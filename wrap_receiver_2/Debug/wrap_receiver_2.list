
wrap_receiver_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cac  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08008e88  08008e88  00018e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090b0  080090b0  000204b0  2**0
                  CONTENTS
  4 .ARM          00000008  080090b0  080090b0  000190b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090b8  080090b8  000204b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090b8  080090b8  000190b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090bc  080090bc  000190bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b0  20000000  080090c0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001aec0  200004b0  08009570  000204b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001b370  08009570  0002b370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204b0  2**0
                  CONTENTS, READONLY
 12 .comment      000000b3  00000000  00000000  000204e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001709d  00000000  00000000  00020593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cf8  00000000  00000000  00037630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  0003a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100c  00000000  00000000  0003b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002112e  00000000  00000000  0003c7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d13  00000000  00000000  0005d92a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1c79  00000000  00000000  0007563d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060b8  00000000  00000000  001572b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0015d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00001ec2  00000000  00000000  0015d3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000020  00000000  00000000  0015f28b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200004b0 	.word	0x200004b0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008e6c 	.word	0x08008e6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200004b4 	.word	0x200004b4
 8000214:	08008e6c 	.word	0x08008e6c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c34:	f000 b970 	b.w	8000f18 <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9e08      	ldr	r6, [sp, #32]
 8000c56:	460d      	mov	r5, r1
 8000c58:	4604      	mov	r4, r0
 8000c5a:	460f      	mov	r7, r1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d14a      	bne.n	8000cf6 <__udivmoddi4+0xa6>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	4694      	mov	ip, r2
 8000c64:	d965      	bls.n	8000d32 <__udivmoddi4+0xe2>
 8000c66:	fab2 f382 	clz	r3, r2
 8000c6a:	b143      	cbz	r3, 8000c7e <__udivmoddi4+0x2e>
 8000c6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c70:	f1c3 0220 	rsb	r2, r3, #32
 8000c74:	409f      	lsls	r7, r3
 8000c76:	fa20 f202 	lsr.w	r2, r0, r2
 8000c7a:	4317      	orrs	r7, r2
 8000c7c:	409c      	lsls	r4, r3
 8000c7e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c82:	fa1f f58c 	uxth.w	r5, ip
 8000c86:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c8a:	0c22      	lsrs	r2, r4, #16
 8000c8c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c90:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c94:	fb01 f005 	mul.w	r0, r1, r5
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	d90a      	bls.n	8000cb2 <__udivmoddi4+0x62>
 8000c9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ca4:	f080 811c 	bcs.w	8000ee0 <__udivmoddi4+0x290>
 8000ca8:	4290      	cmp	r0, r2
 8000caa:	f240 8119 	bls.w	8000ee0 <__udivmoddi4+0x290>
 8000cae:	3902      	subs	r1, #2
 8000cb0:	4462      	add	r2, ip
 8000cb2:	1a12      	subs	r2, r2, r0
 8000cb4:	b2a4      	uxth	r4, r4
 8000cb6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cba:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cbe:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc2:	fb00 f505 	mul.w	r5, r0, r5
 8000cc6:	42a5      	cmp	r5, r4
 8000cc8:	d90a      	bls.n	8000ce0 <__udivmoddi4+0x90>
 8000cca:	eb1c 0404 	adds.w	r4, ip, r4
 8000cce:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cd2:	f080 8107 	bcs.w	8000ee4 <__udivmoddi4+0x294>
 8000cd6:	42a5      	cmp	r5, r4
 8000cd8:	f240 8104 	bls.w	8000ee4 <__udivmoddi4+0x294>
 8000cdc:	4464      	add	r4, ip
 8000cde:	3802      	subs	r0, #2
 8000ce0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ce4:	1b64      	subs	r4, r4, r5
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	b11e      	cbz	r6, 8000cf2 <__udivmoddi4+0xa2>
 8000cea:	40dc      	lsrs	r4, r3
 8000cec:	2300      	movs	r3, #0
 8000cee:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0xbc>
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	f000 80ed 	beq.w	8000eda <__udivmoddi4+0x28a>
 8000d00:	2100      	movs	r1, #0
 8000d02:	e9c6 0500 	strd	r0, r5, [r6]
 8000d06:	4608      	mov	r0, r1
 8000d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0c:	fab3 f183 	clz	r1, r3
 8000d10:	2900      	cmp	r1, #0
 8000d12:	d149      	bne.n	8000da8 <__udivmoddi4+0x158>
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	d302      	bcc.n	8000d1e <__udivmoddi4+0xce>
 8000d18:	4282      	cmp	r2, r0
 8000d1a:	f200 80f8 	bhi.w	8000f0e <__udivmoddi4+0x2be>
 8000d1e:	1a84      	subs	r4, r0, r2
 8000d20:	eb65 0203 	sbc.w	r2, r5, r3
 8000d24:	2001      	movs	r0, #1
 8000d26:	4617      	mov	r7, r2
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d0e2      	beq.n	8000cf2 <__udivmoddi4+0xa2>
 8000d2c:	e9c6 4700 	strd	r4, r7, [r6]
 8000d30:	e7df      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000d32:	b902      	cbnz	r2, 8000d36 <__udivmoddi4+0xe6>
 8000d34:	deff      	udf	#255	; 0xff
 8000d36:	fab2 f382 	clz	r3, r2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 8090 	bne.w	8000e60 <__udivmoddi4+0x210>
 8000d40:	1a8a      	subs	r2, r1, r2
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d50:	fb07 2015 	mls	r0, r7, r5, r2
 8000d54:	0c22      	lsrs	r2, r4, #16
 8000d56:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d5a:	fb0e f005 	mul.w	r0, lr, r5
 8000d5e:	4290      	cmp	r0, r2
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x124>
 8000d62:	eb1c 0202 	adds.w	r2, ip, r2
 8000d66:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x122>
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2b8>
 8000d72:	4645      	mov	r5, r8
 8000d74:	1a12      	subs	r2, r2, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000d80:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x14e>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x14c>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2c2>
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000da6:	e79f      	b.n	8000ce8 <__udivmoddi4+0x98>
 8000da8:	f1c1 0720 	rsb	r7, r1, #32
 8000dac:	408b      	lsls	r3, r1
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa05 f401 	lsl.w	r4, r5, r1
 8000dba:	fa20 f307 	lsr.w	r3, r0, r7
 8000dbe:	40fd      	lsrs	r5, r7
 8000dc0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc4:	4323      	orrs	r3, r4
 8000dc6:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dca:	fa1f fe8c 	uxth.w	lr, ip
 8000dce:	fb09 5518 	mls	r5, r9, r8, r5
 8000dd2:	0c1c      	lsrs	r4, r3, #16
 8000dd4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd8:	fb08 f50e 	mul.w	r5, r8, lr
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	fa00 f001 	lsl.w	r0, r0, r1
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b0>
 8000de8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2b4>
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2b4>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4464      	add	r4, ip
 8000e00:	1b64      	subs	r4, r4, r5
 8000e02:	b29d      	uxth	r5, r3
 8000e04:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e08:	fb09 4413 	mls	r4, r9, r3, r4
 8000e0c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e10:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e14:	45a6      	cmp	lr, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1da>
 8000e18:	eb1c 0404 	adds.w	r4, ip, r4
 8000e1c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2ac>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2ac>
 8000e26:	3b02      	subs	r3, #2
 8000e28:	4464      	add	r4, ip
 8000e2a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e2e:	fba3 9502 	umull	r9, r5, r3, r2
 8000e32:	eba4 040e 	sub.w	r4, r4, lr
 8000e36:	42ac      	cmp	r4, r5
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46ae      	mov	lr, r5
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x29c>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x298>
 8000e40:	b156      	cbz	r6, 8000e58 <__udivmoddi4+0x208>
 8000e42:	ebb0 0208 	subs.w	r2, r0, r8
 8000e46:	eb64 040e 	sbc.w	r4, r4, lr
 8000e4a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e4e:	40ca      	lsrs	r2, r1
 8000e50:	40cc      	lsrs	r4, r1
 8000e52:	4317      	orrs	r7, r2
 8000e54:	e9c6 7400 	strd	r7, r4, [r6]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e60:	f1c3 0120 	rsb	r1, r3, #32
 8000e64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e68:	fa20 f201 	lsr.w	r2, r0, r1
 8000e6c:	fa25 f101 	lsr.w	r1, r5, r1
 8000e70:	409d      	lsls	r5, r3
 8000e72:	432a      	orrs	r2, r5
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e80:	fb07 1510 	mls	r5, r7, r0, r1
 8000e84:	0c11      	lsrs	r1, r2, #16
 8000e86:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e8a:	fb00 f50e 	mul.w	r5, r0, lr
 8000e8e:	428d      	cmp	r5, r1
 8000e90:	fa04 f403 	lsl.w	r4, r4, r3
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x258>
 8000e96:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b0>
 8000ea0:	428d      	cmp	r5, r1
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b0>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	1b49      	subs	r1, r1, r5
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb0:	fb07 1115 	mls	r1, r7, r5, r1
 8000eb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb8:	fb05 f10e 	mul.w	r1, r5, lr
 8000ebc:	4291      	cmp	r1, r2
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x282>
 8000ec0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ec4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2a8>
 8000eca:	4291      	cmp	r1, r2
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2a8>
 8000ece:	3d02      	subs	r5, #2
 8000ed0:	4462      	add	r2, ip
 8000ed2:	1a52      	subs	r2, r2, r1
 8000ed4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0xfc>
 8000eda:	4631      	mov	r1, r6
 8000edc:	4630      	mov	r0, r6
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xa2>
 8000ee0:	4639      	mov	r1, r7
 8000ee2:	e6e6      	b.n	8000cb2 <__udivmoddi4+0x62>
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	e6fb      	b.n	8000ce0 <__udivmoddi4+0x90>
 8000ee8:	4548      	cmp	r0, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f0>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f0>
 8000ef8:	4645      	mov	r5, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x282>
 8000efc:	462b      	mov	r3, r5
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1da>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x258>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b0>
 8000f08:	3d02      	subs	r5, #2
 8000f0a:	4462      	add	r2, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x124>
 8000f0e:	4608      	mov	r0, r1
 8000f10:	e70a      	b.n	8000d28 <__udivmoddi4+0xd8>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x14e>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f22:	f001 fb02 	bl	800252a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f26:	f000 f90b 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2a:	f000 faf7 	bl	800151c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f2e:	f000 facb 	bl	80014c8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f32:	f000 f951 	bl	80011d8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f36:	f000 f9cd 	bl	80012d4 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000f3a:	f000 fa2b 	bl	8001394 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000f3e:	f000 fa77 	bl	8001430 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000f42:	217f      	movs	r1, #127	; 0x7f
 8000f44:	486b      	ldr	r0, [pc, #428]	; (80010f4 <main+0x1d8>)
 8000f46:	f002 fd7d 	bl	8003a44 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000f4a:	217f      	movs	r1, #127	; 0x7f
 8000f4c:	486a      	ldr	r0, [pc, #424]	; (80010f8 <main+0x1dc>)
 8000f4e:	f002 fd79 	bl	8003a44 <HAL_ADCEx_Calibration_Start>
  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
  HAL_ADC_Start(&hadc2);
 8000f52:	4869      	ldr	r0, [pc, #420]	; (80010f8 <main+0x1dc>)
 8000f54:	f001 ff56 	bl	8002e04 <HAL_ADC_Start>
  // Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
  HAL_ADCEx_MultiModeStart_DMA(&hadc1,adc_buf,ADC_BUF_LEN);
 8000f58:	f241 1294 	movw	r2, #4500	; 0x1194
 8000f5c:	4967      	ldr	r1, [pc, #412]	; (80010fc <main+0x1e0>)
 8000f5e:	4865      	ldr	r0, [pc, #404]	; (80010f4 <main+0x1d8>)
 8000f60:	f002 fdd2 	bl	8003b08 <HAL_ADCEx_MultiModeStart_DMA>

  // set timer for execution timing
  HAL_TIM_Base_Start(&htim2);
 8000f64:	4866      	ldr	r0, [pc, #408]	; (8001100 <main+0x1e4>)
 8000f66:	f004 fceb 	bl	8005940 <HAL_TIM_Base_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f6a:	4b65      	ldr	r3, [pc, #404]	; (8001100 <main+0x1e4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24

  uint16_t * samples;
  uint8_t packet_found;

  // setup params
  params_r params = {.CL_phase = 0,
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	f04f 0300 	mov.w	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	f04f 0300 	mov.w	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <main+0x1e8>)
 8000f8c:	613b      	str	r3, [r7, #16]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// execute one buffer at a time. Look at SWV console to see if computation time is too long
	// alias buffer for ease
	if (buff_flag_1) {
 8000f8e:	4b5e      	ldr	r3, [pc, #376]	; (8001108 <main+0x1ec>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <main+0x80>
	  samples = buffer_1;
 8000f98:	4b5c      	ldr	r3, [pc, #368]	; (800110c <main+0x1f0>)
 8000f9a:	61bb      	str	r3, [r7, #24]
	}
	if (buff_flag_2) {
 8000f9c:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <main+0x1f4>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <main+0x8e>
	  samples = buffer_2;
 8000fa6:	4b5b      	ldr	r3, [pc, #364]	; (8001114 <main+0x1f8>)
 8000fa8:	61bb      	str	r3, [r7, #24]
	}

	if (buff_flag_1 || buff_flag_2) {
 8000faa:	4b57      	ldr	r3, [pc, #348]	; (8001108 <main+0x1ec>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d104      	bne.n	8000fbe <main+0xa2>
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <main+0x1f4>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0e7      	beq.n	8000f8e <main+0x72>
	  packet_found = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	75fb      	strb	r3, [r7, #23]
	  // demodulate buffer
	  start = __HAL_TIM_GET_COUNTER(&htim2);
 8000fc2:	4b4f      	ldr	r3, [pc, #316]	; (8001100 <main+0x1e4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	4a53      	ldr	r2, [pc, #332]	; (8001118 <main+0x1fc>)
 8000fca:	6013      	str	r3, [r2, #0]
	  num_symbs = demodulate(buffer_1, temp_symbs, &params);
 8000fcc:	463b      	mov	r3, r7
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4952      	ldr	r1, [pc, #328]	; (800111c <main+0x200>)
 8000fd2:	484e      	ldr	r0, [pc, #312]	; (800110c <main+0x1f0>)
 8000fd4:	f000 fb6c 	bl	80016b0 <demodulate>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b50      	ldr	r3, [pc, #320]	; (8001120 <main+0x204>)
 8000fde:	601a      	str	r2, [r3, #0]
	  end = __HAL_TIM_GET_COUNTER(&htim2);
 8000fe0:	4b47      	ldr	r3, [pc, #284]	; (8001100 <main+0x1e4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	4a4f      	ldr	r2, [pc, #316]	; (8001124 <main+0x208>)
 8000fe8:	6013      	str	r3, [r2, #0]
	  total_symbs += num_symbs;
 8000fea:	4b4f      	ldr	r3, [pc, #316]	; (8001128 <main+0x20c>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <main+0x204>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <main+0x20c>)
 8000ff6:	6013      	str	r3, [r2, #0]
	  // add temp_symbs to running buffer for correlation
	  // shift latest entries
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ffc:	e00f      	b.n	800101e <main+0x102>
		  symbol_buffer[j] = symbol_buffer[j+num_symbs];
 8000ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001000:	4b47      	ldr	r3, [pc, #284]	; (8001120 <main+0x204>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4413      	add	r3, r2
 8001006:	4a49      	ldr	r2, [pc, #292]	; (800112c <main+0x210>)
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	4947      	ldr	r1, [pc, #284]	; (800112c <main+0x210>)
 8001010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	3301      	adds	r3, #1
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800101e:	4b40      	ldr	r3, [pc, #256]	; (8001120 <main+0x204>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f1c3 022d 	rsb	r2, r3, #45	; 0x2d
 8001026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001028:	429a      	cmp	r2, r3
 800102a:	d8e8      	bhi.n	8000ffe <main+0xe2>
	  }
	  for (int j = 0; j < num_symbs; j++) {
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001030:	e010      	b.n	8001054 <main+0x138>
		  symbol_buffer[SYMBOL_BUFF-1-num_symbs+j] = temp_symbs[j];
 8001032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001034:	4b3a      	ldr	r3, [pc, #232]	; (8001120 <main+0x204>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	332c      	adds	r3, #44	; 0x2c
 800103c:	4937      	ldr	r1, [pc, #220]	; (800111c <main+0x200>)
 800103e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	440a      	add	r2, r1
 8001044:	6812      	ldr	r2, [r2, #0]
 8001046:	4939      	ldr	r1, [pc, #228]	; (800112c <main+0x210>)
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	440b      	add	r3, r1
 800104c:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < num_symbs; j++) {
 800104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001050:	3301      	adds	r3, #1
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
 8001054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001056:	4b32      	ldr	r3, [pc, #200]	; (8001120 <main+0x204>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	d3e9      	bcc.n	8001032 <main+0x116>
	  }

	  if (total_symbs >= NUM_SYMBS) {
 800105e:	4b32      	ldr	r3, [pc, #200]	; (8001128 <main+0x20c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b16      	cmp	r3, #22
 8001064:	d93c      	bls.n	80010e0 <main+0x1c4>
			packet_found = find_packet(symbol_buffer, bits, SYMBOL_BUFF);
 8001066:	222d      	movs	r2, #45	; 0x2d
 8001068:	4931      	ldr	r1, [pc, #196]	; (8001130 <main+0x214>)
 800106a:	4830      	ldr	r0, [pc, #192]	; (800112c <main+0x210>)
 800106c:	f000 fd4c 	bl	8001b08 <find_packet>
 8001070:	4603      	mov	r3, r0
 8001072:	75fb      	strb	r3, [r7, #23]
			if (packet_found) {
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d02f      	beq.n	80010da <main+0x1be>
				for (int i = 0; i < NUM_SYMBS- (NUM_PACKET_H * 15); i = i+8) {
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
 800107e:	e023      	b.n	80010c8 <main+0x1ac>
					uint8_t result = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0; j < 8; j++)
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	e011      	b.n	80010b0 <main+0x194>
					{
						result <<= 1;
 800108c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						result += bits[i + j];
 8001096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	4413      	add	r3, r2
 800109c:	4a24      	ldr	r2, [pc, #144]	; (8001130 <main+0x214>)
 800109e:	5cd2      	ldrb	r2, [r2, r3]
 80010a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010a4:	4413      	add	r3, r2
 80010a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					for(int j = 0; j < 8; j++)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	2b07      	cmp	r3, #7
 80010b4:	ddea      	ble.n	800108c <main+0x170>
					}
					t_str[i>>3] = result;
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	10db      	asrs	r3, r3, #3
 80010ba:	491e      	ldr	r1, [pc, #120]	; (8001134 <main+0x218>)
 80010bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010c0:	54ca      	strb	r2, [r1, r3]
				for (int i = 0; i < NUM_SYMBS- (NUM_PACKET_H * 15); i = i+8) {
 80010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c4:	3308      	adds	r3, #8
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	ddd8      	ble.n	8001080 <main+0x164>
				}
				HAL_UART_Transmit(&huart2, (uint8_t *)t_str, sizeof(t_str), 100);
 80010ce:	2364      	movs	r3, #100	; 0x64
 80010d0:	2201      	movs	r2, #1
 80010d2:	4918      	ldr	r1, [pc, #96]	; (8001134 <main+0x218>)
 80010d4:	4818      	ldr	r0, [pc, #96]	; (8001138 <main+0x21c>)
 80010d6:	f004 ffb7 	bl	8006048 <HAL_UART_Transmit>
			}

			total_symbs = 0;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <main+0x20c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
	  }
	  buff_process = RESET;
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <main+0x220>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <main+0x1ec>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <main+0x1f4>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
	if (buff_flag_1) {
 80010f2:	e74c      	b.n	8000f8e <main+0x72>
 80010f4:	200004cc 	.word	0x200004cc
 80010f8:	20000538 	.word	0x20000538
 80010fc:	200006e0 	.word	0x200006e0
 8001100:	20000604 	.word	0x20000604
 8001104:	42c80000 	.word	0x42c80000
 8001108:	200094f4 	.word	0x200094f4
 800110c:	20004d30 	.word	0x20004d30
 8001110:	200094f5 	.word	0x200094f5
 8001114:	20007058 	.word	0x20007058
 8001118:	200094f8 	.word	0x200094f8
 800111c:	20009380 	.word	0x20009380
 8001120:	20009500 	.word	0x20009500
 8001124:	200094fc 	.word	0x200094fc
 8001128:	20009504 	.word	0x20009504
 800112c:	20009438 	.word	0x20009438
 8001130:	200094ec 	.word	0x200094ec
 8001134:	20009508 	.word	0x20009508
 8001138:	20000650 	.word	0x20000650
 800113c:	200094f6 	.word	0x200094f6

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	; 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	2238      	movs	r2, #56	; 0x38
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f006 fac2 	bl	80076d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001162:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001166:	f003 fb7f 	bl	8004868 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800117c:	2302      	movs	r3, #2
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001180:	2304      	movs	r3, #4
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001184:	234b      	movs	r3, #75	; 0x4b
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001188:	2302      	movs	r3, #2
 800118a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800118c:	2302      	movs	r3, #2
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001190:	2302      	movs	r3, #2
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fc09 	bl	80049b0 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80011a4:	f000 fd8e 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2303      	movs	r3, #3
 80011ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2104      	movs	r1, #4
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 ff0d 	bl	8004fe0 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80011cc:	f000 fd7a 	bl	8001cc4 <Error_Handler>
  }
}
 80011d0:	bf00      	nop
 80011d2:	3750      	adds	r7, #80	; 0x50
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08c      	sub	sp, #48	; 0x30
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2220      	movs	r2, #32
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fa71 	bl	80076d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <MX_ADC1_Init+0xf4>)
 80011f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011fe:	4b33      	ldr	r3, [pc, #204]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001200:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001204:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_ADC1_Init+0xf4>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_ADC1_Init+0xf4>)
 800121a:	2200      	movs	r2, #0
 800121c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001220:	2204      	movs	r2, #4
 8001222:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001226:	2200      	movs	r2, #0
 8001228:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <MX_ADC1_Init+0xf4>)
 800122c:	2201      	movs	r2, #1
 800122e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001230:	4b26      	ldr	r3, [pc, #152]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001232:	2201      	movs	r2, #1
 8001234:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001236:	4b25      	ldr	r3, [pc, #148]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800123e:	4b23      	ldr	r3, [pc, #140]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001240:	2200      	movs	r2, #0
 8001242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001244:	4b21      	ldr	r3, [pc, #132]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001246:	2200      	movs	r2, #0
 8001248:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800124a:	4b20      	ldr	r3, [pc, #128]	; (80012cc <MX_ADC1_Init+0xf4>)
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001252:	4b1e      	ldr	r3, [pc, #120]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001254:	2200      	movs	r2, #0
 8001256:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001258:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <MX_ADC1_Init+0xf4>)
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001260:	481a      	ldr	r0, [pc, #104]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001262:	f001 fc1b 	bl	8002a9c <HAL_ADC_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800126c:	f000 fd2a 	bl	8001cc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8001270:	2307      	movs	r3, #7
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_12_10_BITS;
 8001274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_8CYCLES;
 800127a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001284:	4619      	mov	r1, r3
 8001286:	4811      	ldr	r0, [pc, #68]	; (80012cc <MX_ADC1_Init+0xf4>)
 8001288:	f002 fcee 	bl	8003c68 <HAL_ADCEx_MultiModeConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001292:	f000 fd17 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <MX_ADC1_Init+0xf8>)
 8001298:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800129a:	2306      	movs	r3, #6
 800129c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012a2:	237f      	movs	r3, #127	; 0x7f
 80012a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012a6:	2304      	movs	r3, #4
 80012a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_ADC1_Init+0xf4>)
 80012b4:	f001 fe7a 	bl	8002fac <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80012be:	f000 fd01 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3730      	adds	r7, #48	; 0x30
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200004cc 	.word	0x200004cc
 80012d0:	04300002 	.word	0x04300002

080012d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2220      	movs	r2, #32
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f006 f9f9 	bl	80076d8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80012e6:	4b28      	ldr	r3, [pc, #160]	; (8001388 <MX_ADC2_Init+0xb4>)
 80012e8:	4a28      	ldr	r2, [pc, #160]	; (800138c <MX_ADC2_Init+0xb8>)
 80012ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <MX_ADC2_Init+0xb4>)
 80012ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <MX_ADC2_Init+0xb4>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <MX_ADC2_Init+0xb4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001300:	4b21      	ldr	r3, [pc, #132]	; (8001388 <MX_ADC2_Init+0xb4>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <MX_ADC2_Init+0xb4>)
 8001308:	2200      	movs	r2, #0
 800130a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130c:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <MX_ADC2_Init+0xb4>)
 800130e:	2204      	movs	r2, #4
 8001310:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_ADC2_Init+0xb4>)
 8001314:	2200      	movs	r2, #0
 8001316:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <MX_ADC2_Init+0xb4>)
 800131a:	2201      	movs	r2, #1
 800131c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_ADC2_Init+0xb4>)
 8001320:	2201      	movs	r2, #1
 8001322:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001324:	4b18      	ldr	r3, [pc, #96]	; (8001388 <MX_ADC2_Init+0xb4>)
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_ADC2_Init+0xb4>)
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_ADC2_Init+0xb4>)
 8001336:	2200      	movs	r2, #0
 8001338:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_ADC2_Init+0xb4>)
 800133c:	2200      	movs	r2, #0
 800133e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_ADC2_Init+0xb4>)
 8001344:	f001 fbaa 	bl	8002a9c <HAL_ADC_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800134e:	f000 fcb9 	bl	8001cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_ADC2_Init+0xbc>)
 8001354:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001356:	2306      	movs	r3, #6
 8001358:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800135a:	2300      	movs	r3, #0
 800135c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135e:	237f      	movs	r3, #127	; 0x7f
 8001360:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001362:	2304      	movs	r3, #4
 8001364:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800136a:	463b      	mov	r3, r7
 800136c:	4619      	mov	r1, r3
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <MX_ADC2_Init+0xb4>)
 8001370:	f001 fe1c 	bl	8002fac <HAL_ADC_ConfigChannel>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800137a:	f000 fca3 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000538 	.word	0x20000538
 800138c:	50000100 	.word	0x50000100
 8001390:	04300002 	.word	0x04300002

08001394 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <MX_TIM2_Init+0x98>)
 80013b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 150;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_TIM2_Init+0x98>)
 80013bc:	2296      	movs	r2, #150	; 0x96
 80013be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c0:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_TIM2_Init+0x98>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80013c6:	4b19      	ldr	r3, [pc, #100]	; (800142c <MX_TIM2_Init+0x98>)
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_TIM2_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_TIM2_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <MX_TIM2_Init+0x98>)
 80013dc:	f004 fa58 	bl	8005890 <HAL_TIM_Base_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013e6:	f000 fc6d 	bl	8001cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_TIM2_Init+0x98>)
 80013f8:	f004 fb0a 	bl	8005a10 <HAL_TIM_ConfigClockSource>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001402:	f000 fc5f 	bl	8001cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_TIM2_Init+0x98>)
 8001414:	f004 fd3a 	bl	8005e8c <HAL_TIMEx_MasterConfigSynchronization>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800141e:	f000 fc51 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000604 	.word	0x20000604

08001430 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001436:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <MX_USART2_UART_Init+0x94>)
 8001438:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800146c:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800147a:	f004 fd95 	bl	8005fa8 <HAL_UART_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001484:	f000 fc1e 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001488:	2100      	movs	r1, #0
 800148a:	480d      	ldr	r0, [pc, #52]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800148c:	f005 fb5c 	bl	8006b48 <HAL_UARTEx_SetTxFifoThreshold>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001496:	f000 fc15 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149a:	2100      	movs	r1, #0
 800149c:	4808      	ldr	r0, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 800149e:	f005 fb91 	bl	8006bc4 <HAL_UARTEx_SetRxFifoThreshold>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014a8:	f000 fc0c 	bl	8001cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_USART2_UART_Init+0x90>)
 80014ae:	f005 fb12 	bl	8006ad6 <HAL_UARTEx_DisableFifoMode>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014b8:	f000 fc04 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000650 	.word	0x20000650
 80014c4:	40004400 	.word	0x40004400

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014ce:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_DMA_Init+0x50>)
 80014d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d2:	4a11      	ldr	r2, [pc, #68]	; (8001518 <MX_DMA_Init+0x50>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6493      	str	r3, [r2, #72]	; 0x48
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_DMA_Init+0x50>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_DMA_Init+0x50>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <MX_DMA_Init+0x50>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6493      	str	r3, [r2, #72]	; 0x48
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_DMA_Init+0x50>)
 80014f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	603b      	str	r3, [r7, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	200b      	movs	r0, #11
 8001504:	f002 fd6f 	bl	8003fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001508:	200b      	movs	r0, #11
 800150a:	f002 fd86 	bl	800401a <HAL_NVIC_EnableIRQ>

}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_GPIO_Init+0x60>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	4a11      	ldr	r2, [pc, #68]	; (800157c <MX_GPIO_Init+0x60>)
 8001536:	f043 0301 	orr.w	r3, r3, #1
 800153a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_GPIO_Init+0x60>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f003 f971 	bl	8004838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800155a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f002 ffe0 	bl	8004534 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000

08001580 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
// Ping Pong Buffer
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f003 f951 	bl	8004838 <HAL_GPIO_WritePin>

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d129      	bne.n	80015f4 <HAL_ADC_ConvHalfCpltCallback+0x74>
	buff_process = SET;
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	701a      	strb	r2, [r3, #0]
	buff_flag_1 = SET;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
	buff_flag_2 = RESET;
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < ADC_BUF_LEN/2; j++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e018      	b.n	80015ea <HAL_ADC_ConvHalfCpltCallback+0x6a>
	{
	  buffer_1[2*j] = (uint16_t)(adc_buf[j]&0x0000FFFF);
 80015b8:	4a13      	ldr	r2, [pc, #76]	; (8001608 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	b291      	uxth	r1, r2
 80015c6:	4a11      	ldr	r2, [pc, #68]	; (800160c <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 80015c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  buffer_1[2*j+1] = (uint16_t)(adc_buf[j]>>16);
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d4:	0c1a      	lsrs	r2, r3, #16
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	3301      	adds	r3, #1
 80015dc:	b291      	uxth	r1, r2
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 80015e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j = 0; j < ADC_BUF_LEN/2; j++)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f640 02c9 	movw	r2, #2249	; 0x8c9
 80015f0:	4293      	cmp	r3, r2
 80015f2:	dde1      	ble.n	80015b8 <HAL_ADC_ConvHalfCpltCallback+0x38>
	}
  }
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200094f6 	.word	0x200094f6
 8001600:	200094f4 	.word	0x200094f4
 8001604:	200094f5 	.word	0x200094f5
 8001608:	200006e0 	.word	0x200006e0
 800160c:	20004d30 	.word	0x20004d30

08001610 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001622:	f003 f909 	bl	8004838 <HAL_GPIO_WritePin>

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8001626:	4b1d      	ldr	r3, [pc, #116]	; (800169c <HAL_ADC_ConvCpltCallback+0x8c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b00      	cmp	r3, #0
 800162e:	d130      	bne.n	8001692 <HAL_ADC_ConvCpltCallback+0x82>
	buff_process = SET;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <HAL_ADC_ConvCpltCallback+0x8c>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
	buff_flag_2 = SET;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <HAL_ADC_ConvCpltCallback+0x90>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
	buff_flag_1 = RESET;
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <HAL_ADC_ConvCpltCallback+0x94>)
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e01f      	b.n	8001688 <HAL_ADC_ConvCpltCallback+0x78>
	buffer_2[2*j] = (uint16_t) adc_buf[j+ADC_BUF_LEN/2]*0x0000FFFF;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f603 03ca 	addw	r3, r3, #2250	; 0x8ca
 800164e:	4a16      	ldr	r2, [pc, #88]	; (80016a8 <HAL_ADC_ConvCpltCallback+0x98>)
 8001650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001654:	b29a      	uxth	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4252      	negs	r2, r2
 800165c:	b291      	uxth	r1, r2
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_ADC_ConvCpltCallback+0x9c>)
 8001660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	buffer_2[2*j+1] = (uint16_t) adc_buf[j+ADC_BUF_LEN/2]>>16;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f603 03ca 	addw	r3, r3, #2250	; 0x8ca
 800166a:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_ADC_ConvCpltCallback+0x98>)
 800166c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001670:	b29b      	uxth	r3, r3
 8001672:	141a      	asrs	r2, r3, #16
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	3301      	adds	r3, #1
 800167a:	b291      	uxth	r1, r2
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_ADC_ConvCpltCallback+0x9c>)
 800167e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3301      	adds	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f640 02c9 	movw	r2, #2249	; 0x8c9
 800168e:	4293      	cmp	r3, r2
 8001690:	ddda      	ble.n	8001648 <HAL_ADC_ConvCpltCallback+0x38>
	}
  }
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200094f6 	.word	0x200094f6
 80016a0:	200094f5 	.word	0x200094f5
 80016a4:	200094f4 	.word	0x200094f4
 80016a8:	200006e0 	.word	0x200006e0
 80016ac:	20007058 	.word	0x20007058

080016b0 <demodulate>:

int demodulate(const uint16_t * samples, int * symbs, params_r * params) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]

    normalize(samples, norm_samples);
 80016bc:	4928      	ldr	r1, [pc, #160]	; (8001760 <demodulate+0xb0>)
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 fb06 	bl	8001cd0 <normalize>

    // Costas Loop
    costas_loop(norm_samples, samples_d, params);
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	4927      	ldr	r1, [pc, #156]	; (8001764 <demodulate+0xb4>)
 80016c8:	4825      	ldr	r0, [pc, #148]	; (8001760 <demodulate+0xb0>)
 80016ca:	f000 f855 	bl	8001778 <costas_loop>
    // filter w SRRC
    arm_conv_f32(samples_d, ADC_BUF_LEN, RRC, RRC_LEN, filtered_samps);
 80016ce:	4b26      	ldr	r3, [pc, #152]	; (8001768 <demodulate+0xb8>)
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	23fb      	movs	r3, #251	; 0xfb
 80016d4:	4a25      	ldr	r2, [pc, #148]	; (800176c <demodulate+0xbc>)
 80016d6:	f241 1194 	movw	r1, #4500	; 0x1194
 80016da:	4822      	ldr	r0, [pc, #136]	; (8001764 <demodulate+0xb4>)
 80016dc:	f005 fd8c 	bl	80071f8 <arm_conv_f32>
    // readjust window
    float shift = RRC_LEN/2. - 0.5;
 80016e0:	4b23      	ldr	r3, [pc, #140]	; (8001770 <demodulate+0xc0>)
 80016e2:	61bb      	str	r3, [r7, #24]
    int k;
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 80016e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80016e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ec:	ee17 3a90 	vmov	r3, s15
 80016f0:	61fb      	str	r3, [r7, #28]
 80016f2:	e01a      	b.n	800172a <demodulate+0x7a>
        k = i - shift;
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001706:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170a:	ee17 3a90 	vmov	r3, s15
 800170e:	613b      	str	r3, [r7, #16]
        filtered_samps[k] = filtered_samps[i];
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <demodulate+0xb8>)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	4913      	ldr	r1, [pc, #76]	; (8001768 <demodulate+0xb8>)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	440b      	add	r3, r1
 8001722:	601a      	str	r2, [r3, #0]
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	3301      	adds	r3, #1
 8001728:	61fb      	str	r3, [r7, #28]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001734:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001774 <demodulate+0xc4>
 8001738:	edd7 7a06 	vldr	s15, [r7, #24]
 800173c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	d4d4      	bmi.n	80016f4 <demodulate+0x44>
    }

    // timing recovery
    int bit_len = timing_recovery(filtered_samps, symbs, params);
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <demodulate+0xb8>)
 8001750:	f000 fb5e 	bl	8001e10 <timing_recovery>
 8001754:	6178      	str	r0, [r7, #20]

    return bit_len;
 8001756:	697b      	ldr	r3, [r7, #20]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000950c 	.word	0x2000950c
 8001764:	2000db5c 	.word	0x2000db5c
 8001768:	200121ac 	.word	0x200121ac
 800176c:	20000000 	.word	0x20000000
 8001770:	42fa0000 	.word	0x42fa0000
 8001774:	45947000 	.word	0x45947000

08001778 <costas_loop>:

void costas_loop(float * norm_samples, float * samples_d, params_r * params) {
 8001778:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800177c:	b0b2      	sub	sp, #200	; 0xc8
 800177e:	af02      	add	r7, sp, #8
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
    float phase = params->CL_phase;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    float inph[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800178e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001792:	222c      	movs	r2, #44	; 0x2c
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f005 ff9e 	bl	80076d8 <memset>
    float quad[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800179c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017a0:	222c      	movs	r2, #44	; 0x2c
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f005 ff97 	bl	80076d8 <memset>
    float inph_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 80017aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
 80017ba:	615a      	str	r2, [r3, #20]
    float quad_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
 80017cc:	615a      	str	r2, [r3, #20]
    double error = 0;
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    float integrator = 0; //params->CL_integrator;
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    float kp = 8.5;
 80017e2:	4bc5      	ldr	r3, [pc, #788]	; (8001af8 <costas_loop+0x380>)
 80017e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    float ki = 0.1;
 80017e8:	4bc4      	ldr	r3, [pc, #784]	; (8001afc <costas_loop+0x384>)
 80017ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    float dt = (float)FC / (float)FS;
 80017ee:	4bc4      	ldr	r3, [pc, #784]	; (8001b00 <costas_loop+0x388>)
 80017f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 80017f4:	2305      	movs	r3, #5
 80017f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017fa:	e140      	b.n	8001a7e <costas_loop+0x306>
        // define t from microcontroller
        int k = i - ORDER;
 80017fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001800:	3b05      	subs	r3, #5
 8001802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        inph_[ORDER] = norm_samples[k]*2*cos(2*M_PI*dt*k + phase);
 8001806:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001818:	ee17 0a90 	vmov	r0, s15
 800181c:	f7fe fe60 	bl	80004e0 <__aeabi_f2d>
 8001820:	4604      	mov	r4, r0
 8001822:	460d      	mov	r5, r1
 8001824:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001828:	f7fe fe5a 	bl	80004e0 <__aeabi_f2d>
 800182c:	a3b0      	add	r3, pc, #704	; (adr r3, 8001af0 <costas_loop+0x378>)
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	f7fe fead 	bl	8000590 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4690      	mov	r8, r2
 800183c:	4699      	mov	r9, r3
 800183e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001842:	f7fe fe3b 	bl	80004bc <__aeabi_i2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4640      	mov	r0, r8
 800184c:	4649      	mov	r1, r9
 800184e:	f7fe fe9f 	bl	8000590 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4690      	mov	r8, r2
 8001858:	4699      	mov	r9, r3
 800185a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800185e:	f7fe fe3f 	bl	80004e0 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4640      	mov	r0, r8
 8001868:	4649      	mov	r1, r9
 800186a:	f7fe fcdb 	bl	8000224 <__adddf3>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	ec43 2b17 	vmov	d7, r2, r3
 8001876:	eeb0 0a47 	vmov.f32	s0, s14
 800187a:	eef0 0a67 	vmov.f32	s1, s15
 800187e:	f005 ffc7 	bl	8007810 <cos>
 8001882:	ec53 2b10 	vmov	r2, r3, d0
 8001886:	4620      	mov	r0, r4
 8001888:	4629      	mov	r1, r5
 800188a:	f7fe fe81 	bl	8000590 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f973 	bl	8000b80 <__aeabi_d2f>
 800189a:	4603      	mov	r3, r0
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
        quad_[ORDER] = norm_samples[k]*-2*sin(2*M_PI*dt*k + phase);
 800189e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	68fa      	ldr	r2, [r7, #12]
 80018a6:	4413      	add	r3, r2
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80018b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b4:	ee17 0a90 	vmov	r0, s15
 80018b8:	f7fe fe12 	bl	80004e0 <__aeabi_f2d>
 80018bc:	4604      	mov	r4, r0
 80018be:	460d      	mov	r5, r1
 80018c0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80018c4:	f7fe fe0c 	bl	80004e0 <__aeabi_f2d>
 80018c8:	a389      	add	r3, pc, #548	; (adr r3, 8001af0 <costas_loop+0x378>)
 80018ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ce:	f7fe fe5f 	bl	8000590 <__aeabi_dmul>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	4690      	mov	r8, r2
 80018d8:	4699      	mov	r9, r3
 80018da:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80018de:	f7fe fded 	bl	80004bc <__aeabi_i2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4640      	mov	r0, r8
 80018e8:	4649      	mov	r1, r9
 80018ea:	f7fe fe51 	bl	8000590 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4690      	mov	r8, r2
 80018f4:	4699      	mov	r9, r3
 80018f6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80018fa:	f7fe fdf1 	bl	80004e0 <__aeabi_f2d>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4640      	mov	r0, r8
 8001904:	4649      	mov	r1, r9
 8001906:	f7fe fc8d 	bl	8000224 <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	ec43 2b17 	vmov	d7, r2, r3
 8001912:	eeb0 0a47 	vmov.f32	s0, s14
 8001916:	eef0 0a67 	vmov.f32	s1, s15
 800191a:	f005 ffcd 	bl	80078b8 <sin>
 800191e:	ec53 2b10 	vmov	r2, r3, d0
 8001922:	4620      	mov	r0, r4
 8001924:	4629      	mov	r1, r5
 8001926:	f7fe fe33 	bl	8000590 <__aeabi_dmul>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4610      	mov	r0, r2
 8001930:	4619      	mov	r1, r3
 8001932:	f7ff f925 	bl	8000b80 <__aeabi_d2f>
 8001936:	4603      	mov	r3, r0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24

        arm_conv_f32(inph_, ORDER+1, lp, ORDER+1, inph);
 800193a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800193e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	2306      	movs	r3, #6
 8001946:	4a6f      	ldr	r2, [pc, #444]	; (8001b04 <costas_loop+0x38c>)
 8001948:	2106      	movs	r1, #6
 800194a:	f005 fc55 	bl	80071f8 <arm_conv_f32>
        arm_conv_f32(quad_, ORDER+1, lp, ORDER+1, quad);
 800194e:	f107 0010 	add.w	r0, r7, #16
 8001952:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2306      	movs	r3, #6
 800195a:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <costas_loop+0x38c>)
 800195c:	2106      	movs	r1, #6
 800195e:	f005 fc4b 	bl	80071f8 <arm_conv_f32>

        samples_d[k] = inph[ORDER];
 8001962:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	4413      	add	r3, r2
 800196c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001970:	601a      	str	r2, [r3, #0]

        error = inph[ORDER] * quad[ORDER];
 8001972:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001976:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800197a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197e:	ee17 0a90 	vmov	r0, s15
 8001982:	f7fe fdad 	bl	80004e0 <__aeabi_f2d>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
        integrator += ki*error;
 800198e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001992:	f7fe fda5 	bl	80004e0 <__aeabi_f2d>
 8001996:	4604      	mov	r4, r0
 8001998:	460d      	mov	r5, r1
 800199a:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800199e:	f7fe fd9f 	bl	80004e0 <__aeabi_f2d>
 80019a2:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80019a6:	f7fe fdf3 	bl	8000590 <__aeabi_dmul>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4620      	mov	r0, r4
 80019b0:	4629      	mov	r1, r5
 80019b2:	f7fe fc37 	bl	8000224 <__adddf3>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f8df 	bl	8000b80 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
        phase = phase + kp*error + integrator;
 80019c8:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80019cc:	f7fe fd88 	bl	80004e0 <__aeabi_f2d>
 80019d0:	4604      	mov	r4, r0
 80019d2:	460d      	mov	r5, r1
 80019d4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80019d8:	f7fe fd82 	bl	80004e0 <__aeabi_f2d>
 80019dc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80019e0:	f7fe fdd6 	bl	8000590 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fc1a 	bl	8000224 <__adddf3>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4614      	mov	r4, r2
 80019f6:	461d      	mov	r5, r3
 80019f8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80019fc:	f7fe fd70 	bl	80004e0 <__aeabi_f2d>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4620      	mov	r0, r4
 8001a06:	4629      	mov	r1, r5
 8001a08:	f7fe fc0c 	bl	8000224 <__adddf3>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4610      	mov	r0, r2
 8001a12:	4619      	mov	r1, r3
 8001a14:	f7ff f8b4 	bl	8000b80 <__aeabi_d2f>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        // shift the values of inph_ and quad_
        for (int jx = 1; jx < ORDER+1; jx++) {
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a24:	e022      	b.n	8001a6c <costas_loop+0x2f4>
            inph_[jx-1] = inph_[jx];
 8001a26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001a30:	0092      	lsls	r2, r2, #2
 8001a32:	32c0      	adds	r2, #192	; 0xc0
 8001a34:	443a      	add	r2, r7
 8001a36:	3a98      	subs	r2, #152	; 0x98
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	33c0      	adds	r3, #192	; 0xc0
 8001a3e:	443b      	add	r3, r7
 8001a40:	3b98      	subs	r3, #152	; 0x98
 8001a42:	601a      	str	r2, [r3, #0]
            quad_[jx-1] = quad_[jx];
 8001a44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	32c0      	adds	r2, #192	; 0xc0
 8001a52:	443a      	add	r2, r7
 8001a54:	3ab0      	subs	r2, #176	; 0xb0
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	33c0      	adds	r3, #192	; 0xc0
 8001a5c:	443b      	add	r3, r7
 8001a5e:	3bb0      	subs	r3, #176	; 0xb0
 8001a60:	601a      	str	r2, [r3, #0]
        for (int jx = 1; jx < ORDER+1; jx++) {
 8001a62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a66:	3301      	adds	r3, #1
 8001a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	ddd8      	ble.n	8001a26 <costas_loop+0x2ae>
    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 8001a74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001a82:	f241 1298 	movw	r2, #4504	; 0x1198
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f77f aeb8 	ble.w	80017fc <costas_loop+0x84>
        }
    }
    params->CL_phase = remainder(phase, 2*M_PI);
 8001a8c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001a90:	f7fe fd26 	bl	80004e0 <__aeabi_f2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001af0 <costas_loop+0x378>
 8001a9c:	ec43 2b10 	vmov	d0, r2, r3
 8001aa0:	f005 fe5e 	bl	8007760 <remainder>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f868 	bl	8000b80 <__aeabi_d2f>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	605a      	str	r2, [r3, #4]
    params->CL_integrator = remainder(integrator, 2*M_PI);
 8001ab6:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001aba:	f7fe fd11 	bl	80004e0 <__aeabi_f2d>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8001af0 <costas_loop+0x378>
 8001ac6:	ec43 2b10 	vmov	d0, r2, r3
 8001aca:	f005 fe49 	bl	8007760 <remainder>
 8001ace:	ec53 2b10 	vmov	r2, r3, d0
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f853 	bl	8000b80 <__aeabi_d2f>
 8001ada:	4602      	mov	r2, r0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	37c0      	adds	r7, #192	; 0xc0
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aea:	bf00      	nop
 8001aec:	f3af 8000 	nop.w
 8001af0:	54442d18 	.word	0x54442d18
 8001af4:	401921fb 	.word	0x401921fb
 8001af8:	41080000 	.word	0x41080000
 8001afc:	3dcccccd 	.word	0x3dcccccd
 8001b00:	3e408312 	.word	0x3e408312
 8001b04:	200003ec 	.word	0x200003ec

08001b08 <find_packet>:

uint8_t find_packet(float * symbs, uint8_t * bits, const int num_symbs) {
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b0c7      	sub	sp, #284	; 0x11c
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001b16:	6018      	str	r0, [r3, #0]
 8001b18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b20:	6019      	str	r1, [r3, #0]
 8001b22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b26:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b2a:	601a      	str	r2, [r3, #0]
    // take cross correlation
    float xcorr_out[SYMBOL_BUFF+14];
    uint8_t packet_found = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    arm_correlate_f32(key, 15, symbs, num_symbs, xcorr_out);
 8001b32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b36:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b3a:	6819      	ldr	r1, [r3, #0]
 8001b3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b40:	f5a3 7282 	sub.w	r2, r3, #260	; 0x104
 8001b44:	f107 0310 	add.w	r3, r7, #16
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	210f      	movs	r1, #15
 8001b50:	485a      	ldr	r0, [pc, #360]	; (8001cbc <find_packet+0x1b4>)
 8001b52:	f005 f8c3 	bl	8006cdc <arm_correlate_f32>

    // find packet
    int shift = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    for (int i = num_symbs-(NUM_PACKET_H-1)*15 - 1; i >= 0; i--) {
 8001b5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b6c:	e05c      	b.n	8001c28 <find_packet+0x120>
        if (fabs(xcorr_out[i]) > 14) {
 8001b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001b72:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eef0 7ae7 	vabs.f32	s15, s15
 8001b86:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	dd44      	ble.n	8001c1e <find_packet+0x116>
            shift = SYMBOL_BUFF+14-i;
 8001b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001b98:	f1c3 033b 	rsb	r3, r3, #59	; 0x3b
 8001b9c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            packet_found = 1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
            if (xcorr_out[i] < 0) {
 8001ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001baa:	f5a3 7280 	sub.w	r2, r3, #256	; 0x100
 8001bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	4413      	add	r3, r2
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc2:	d400      	bmi.n	8001bc6 <find_packet+0xbe>
				for (int j = 0; j < BITS; j++) {
					symbs[shift + j] = symbs[shift+ j]*-1;
				}
            }
            break;
 8001bc4:	e034      	b.n	8001c30 <find_packet+0x128>
				for (int j = 0; j < BITS; j++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001bcc:	e022      	b.n	8001c14 <find_packet+0x10c>
					symbs[shift + j] = symbs[shift+ j]*-1;
 8001bce:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001bd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001bd6:	4413      	add	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bde:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001bee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001bf2:	4413      	add	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bfa:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	eef1 7a67 	vneg.f32	s15, s15
 8001c06:	edc3 7a00 	vstr	s15, [r3]
				for (int j = 0; j < BITS; j++) {
 8001c0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001c14:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001c18:	2b07      	cmp	r3, #7
 8001c1a:	ddd8      	ble.n	8001bce <find_packet+0xc6>
            break;
 8001c1c:	e008      	b.n	8001c30 <find_packet+0x128>
    for (int i = num_symbs-(NUM_PACKET_H-1)*15 - 1; i >= 0; i--) {
 8001c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c22:	3b01      	subs	r3, #1
 8001c24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da9e      	bge.n	8001b6e <find_packet+0x66>
        }
    }

    if (!packet_found)
 8001c30:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <find_packet+0x134>
        return 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e039      	b.n	8001cb0 <find_packet+0x1a8>

    // convert symbols to bits
    for (int i = 0; i < BITS; i++) {
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001c42:	e030      	b.n	8001ca6 <find_packet+0x19e>
        bits[i] = (symbs[shift+i]+1)*0.5;
 8001c44:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8001c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c54:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c68:	ee17 0a90 	vmov	r0, s15
 8001c6c:	f7fe fc38 	bl	80004e0 <__aeabi_f2d>
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <find_packet+0x1b8>)
 8001c76:	f7fe fc8b 	bl	8000590 <__aeabi_dmul>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4610      	mov	r0, r2
 8001c80:	4619      	mov	r1, r3
 8001c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c86:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c8a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	18d4      	adds	r4, r2, r3
 8001c92:	f7fe ff55 	bl	8000b40 <__aeabi_d2uiz>
 8001c96:	4603      	mov	r3, r0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	7023      	strb	r3, [r4, #0]
    for (int i = 0; i < BITS; i++) {
 8001c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001caa:	2b07      	cmp	r3, #7
 8001cac:	ddca      	ble.n	8001c44 <find_packet+0x13c>
    }
    return 1;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	20000404 	.word	0x20000404
 8001cc0:	3fe00000 	.word	0x3fe00000

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>
	...

08001cd0 <normalize>:
params: parameters that need to be stored intermediately
returns length of symbs array. symbs array must be
allocated for longer than samples/sps + some margin
*/

void normalize(const uint16_t * samples, float * norm_samples) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
        // Normalize signal
    float var = 0, mean = 0;
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
    // find mean
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e011      	b.n	8001d10 <normalize+0x40>
        mean += (float)samples[i];
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cfe:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d06:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f241 1293 	movw	r2, #4499	; 0x1193
 8001d16:	4293      	cmp	r3, r2
 8001d18:	dde8      	ble.n	8001cec <normalize+0x1c>
    }
    mean /= ADC_BUF_LEN;
 8001d1a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d1e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001e00 <normalize+0x130>
 8001d22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d26:	edc7 7a06 	vstr	s15, [r7, #24]
    // find sample variance
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	e01b      	b.n	8001d68 <normalize+0x98>
        float temp = (float)samples[i]-mean;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4413      	add	r3, r2
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	ee07 3a90 	vmov	s15, r3
 8001d3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d42:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	edc7 7a02 	vstr	s15, [r7, #8]
        var += temp * temp;
 8001d4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d56:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d5e:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	3301      	adds	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	f241 1293 	movw	r2, #4499	; 0x1193
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	ddde      	ble.n	8001d30 <normalize+0x60>
    }
    var = var / (ADC_BUF_LEN-1);
 8001d72:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d76:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001e04 <normalize+0x134>
 8001d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7e:	edc7 7a07 	vstr	s15, [r7, #28]
    var = sqrt(var)*25;
 8001d82:	69f8      	ldr	r0, [r7, #28]
 8001d84:	f7fe fbac 	bl	80004e0 <__aeabi_f2d>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	ec43 2b10 	vmov	d0, r2, r3
 8001d90:	f005 fd12 	bl	80077b8 <sqrt>
 8001d94:	ec51 0b10 	vmov	r0, r1, d0
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <normalize+0x138>)
 8001d9e:	f7fe fbf7 	bl	8000590 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f7fe fee9 	bl	8000b80 <__aeabi_d2f>
 8001dae:	4603      	mov	r3, r0
 8001db0:	61fb      	str	r3, [r7, #28]

    // normalize
    // divide by 60 arbitrary, just done to get to an ampltiude I used to tune gain values
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	e019      	b.n	8001dec <normalize+0x11c>
        norm_samples[i] = (((float)samples[i]) - mean)/var;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dca:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dce:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	ed97 7a07 	vldr	s14, [r7, #28]
 8001dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3301      	adds	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f241 1293 	movw	r2, #4499	; 0x1193
 8001df2:	4293      	cmp	r3, r2
 8001df4:	dde0      	ble.n	8001db8 <normalize+0xe8>
    }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	458ca000 	.word	0x458ca000
 8001e04:	458c9800 	.word	0x458c9800
 8001e08:	40390000 	.word	0x40390000
 8001e0c:	00000000 	.word	0x00000000

08001e10 <timing_recovery>:



int timing_recovery(float * filtered_samps, float * symbs, params_r * params) {
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b090      	sub	sp, #64	; 0x40
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
    const float kp_PLL = 0.1;
 8001e1c:	4bae      	ldr	r3, [pc, #696]	; (80020d8 <timing_recovery+0x2c8>)
 8001e1e:	623b      	str	r3, [r7, #32]
    const float ki_PLL = 0.05;
 8001e20:	4bae      	ldr	r3, [pc, #696]	; (80020dc <timing_recovery+0x2cc>)
 8001e22:	61fb      	str	r3, [r7, #28]
    const float margin = 0.75;
 8001e24:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 8001e28:	61bb      	str	r3, [r7, #24]

    float sps = params->sps;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    int integrator = 0; //params->TR_integrator;
 8001e30:	2300      	movs	r3, #0
 8001e32:	63bb      	str	r3, [r7, #56]	; 0x38
    int error = 0, bit_len = 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	637b      	str	r3, [r7, #52]	; 0x34
    float prev_phase = 0; // params->TR_phase
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
    float phase;

    // calculate zero crossings
    for (int i = 0; i < ADC_BUF_LEN-1; i++) {
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e46:	e033      	b.n	8001eb0 <timing_recovery+0xa0>
        int temp = copysign(1, (filtered_samps[i+1] * filtered_samps[i]));
 8001e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4413      	add	r3, r2
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	ee17 0a90 	vmov	r0, s15
 8001e6a:	f7fe fb39 	bl	80004e0 <__aeabi_f2d>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	ec43 2b11 	vmov	d1, r2, r3
 8001e76:	ed9f 0b90 	vldr	d0, [pc, #576]	; 80020b8 <timing_recovery+0x2a8>
 8001e7a:	f005 fc5f 	bl	800773c <copysign>
 8001e7e:	ec53 2b10 	vmov	r2, r3, d0
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	f7fe fe33 	bl	8000af0 <__aeabi_d2iz>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	613b      	str	r3, [r7, #16]
        zc[i] = !(temp+1);
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e94:	d102      	bne.n	8001e9c <timing_recovery+0x8c>
 8001e96:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e9a:	e001      	b.n	8001ea0 <timing_recovery+0x90>
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	498f      	ldr	r1, [pc, #572]	; (80020e0 <timing_recovery+0x2d0>)
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ADC_BUF_LEN-1; i++) {
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	3301      	adds	r3, #1
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	f241 1292 	movw	r2, #4498	; 0x1192
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	ddc6      	ble.n	8001e48 <timing_recovery+0x38>
    }

    // timing recovery
    for (int i = 1; i < ADC_BUF_LEN; i++) {
 8001eba:	2301      	movs	r3, #1
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ebe:	e0c3      	b.n	8002048 <timing_recovery+0x238>
        phase = prev_phase + 2*M_PI/sps;
 8001ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ec2:	f7fe fb0d 	bl	80004e0 <__aeabi_f2d>
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	460d      	mov	r5, r1
 8001eca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ecc:	f7fe fb08 	bl	80004e0 <__aeabi_f2d>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	a17a      	add	r1, pc, #488	; (adr r1, 80020c0 <timing_recovery+0x2b0>)
 8001ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eda:	f7fe fc83 	bl	80007e4 <__aeabi_ddiv>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	f7fe f99d 	bl	8000224 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fe45 	bl	8000b80 <__aeabi_d2f>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        phase = wrap_to_pi(phase);
 8001efa:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8001efe:	f000 f8f3 	bl	80020e8 <wrap_to_pi>
 8001f02:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
        if (phase < -M_PI * margin && prev_phase > M_PI * margin) {
 8001f06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001f08:	f7fe faea 	bl	80004e0 <__aeabi_f2d>
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	460d      	mov	r5, r1
 8001f10:	69b8      	ldr	r0, [r7, #24]
 8001f12:	f7fe fae5 	bl	80004e0 <__aeabi_f2d>
 8001f16:	a36c      	add	r3, pc, #432	; (adr r3, 80020c8 <timing_recovery+0x2b8>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fb38 	bl	8000590 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4620      	mov	r0, r4
 8001f26:	4629      	mov	r1, r5
 8001f28:	f7fe fda4 	bl	8000a74 <__aeabi_dcmplt>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d044      	beq.n	8001fbc <timing_recovery+0x1ac>
 8001f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f34:	f7fe fad4 	bl	80004e0 <__aeabi_f2d>
 8001f38:	4604      	mov	r4, r0
 8001f3a:	460d      	mov	r5, r1
 8001f3c:	69b8      	ldr	r0, [r7, #24]
 8001f3e:	f7fe facf 	bl	80004e0 <__aeabi_f2d>
 8001f42:	a363      	add	r3, pc, #396	; (adr r3, 80020d0 <timing_recovery+0x2c0>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fb22 	bl	8000590 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4620      	mov	r0, r4
 8001f52:	4629      	mov	r1, r5
 8001f54:	f7fe fdac 	bl	8000ab0 <__aeabi_dcmpgt>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d02e      	beq.n	8001fbc <timing_recovery+0x1ac>
            symbs[bit_len] = (int)(filtered_samps[i]/fabs(filtered_samps[i]));
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fab9 	bl	80004e0 <__aeabi_f2d>
 8001f6e:	4604      	mov	r4, r0
 8001f70:	460d      	mov	r5, r1
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4413      	add	r3, r2
 8001f7a:	edd3 7a00 	vldr	s15, [r3]
 8001f7e:	eef0 7ae7 	vabs.f32	s15, s15
 8001f82:	ee17 0a90 	vmov	r0, s15
 8001f86:	f7fe faab 	bl	80004e0 <__aeabi_f2d>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe fc27 	bl	80007e4 <__aeabi_ddiv>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fda7 	bl	8000af0 <__aeabi_d2iz>
 8001fa2:	ee07 0a90 	vmov	s15, r0
 8001fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb2:	edc3 7a00 	vstr	s15, [r3]
            bit_len++;
 8001fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fb8:	3301      	adds	r3, #1
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (bit_len==SYMBOL_BUFF) {
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	2b2d      	cmp	r3, #45	; 0x2d
 8001fc0:	d049      	beq.n	8002056 <timing_recovery+0x246>
            break;
        }
        if (zc[i-1]){
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	4a46      	ldr	r2, [pc, #280]	; (80020e0 <timing_recovery+0x2d0>)
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	d031      	beq.n	800203e <timing_recovery+0x22e>
            error = phase;
 8001fda:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe2:	ee17 3a90 	vmov	r3, s15
 8001fe6:	617b      	str	r3, [r7, #20]
            integrator = integrator + error * ki_PLL;
 8001fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ffc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200c:	ee17 3a90 	vmov	r3, s15
 8002010:	63bb      	str	r3, [r7, #56]	; 0x38
            sps = SPS + error*kp_PLL + integrator;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800201c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002024:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80020e4 <timing_recovery+0x2d4>
 8002028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800202c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        }
        prev_phase = phase;
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
    for (int i = 1; i < ADC_BUF_LEN; i++) {
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	3301      	adds	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	f241 1293 	movw	r2, #4499	; 0x1193
 800204e:	4293      	cmp	r3, r2
 8002050:	f77f af36 	ble.w	8001ec0 <timing_recovery+0xb0>
 8002054:	e000      	b.n	8002058 <timing_recovery+0x248>
            break;
 8002056:	bf00      	nop
    }
    params->sps = sps;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800205c:	611a      	str	r2, [r3, #16]
    params->TR_phase = remainder(phase, 2*M_PI);
 800205e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002060:	f7fe fa3e 	bl	80004e0 <__aeabi_f2d>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80020c0 <timing_recovery+0x2b0>
 800206c:	ec43 2b10 	vmov	d0, r2, r3
 8002070:	f005 fb76 	bl	8007760 <remainder>
 8002074:	ec53 2b10 	vmov	r2, r3, d0
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f7fe fd80 	bl	8000b80 <__aeabi_d2f>
 8002080:	4602      	mov	r2, r0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	60da      	str	r2, [r3, #12]
    params->TR_integrator = remainder(integrator, 2*M_PI);
 8002086:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002088:	f7fe fa18 	bl	80004bc <__aeabi_i2d>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 80020c0 <timing_recovery+0x2b0>
 8002094:	ec43 2b10 	vmov	d0, r2, r3
 8002098:	f005 fb62 	bl	8007760 <remainder>
 800209c:	ec53 2b10 	vmov	r2, r3, d0
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f7fe fd6c 	bl	8000b80 <__aeabi_d2f>
 80020a8:	4602      	mov	r2, r0
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	609a      	str	r2, [r3, #8]

    return bit_len;
 80020ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3740      	adds	r7, #64	; 0x40
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bdb0      	pop	{r4, r5, r7, pc}
 80020b8:	00000000 	.word	0x00000000
 80020bc:	3ff00000 	.word	0x3ff00000
 80020c0:	54442d18 	.word	0x54442d18
 80020c4:	401921fb 	.word	0x401921fb
 80020c8:	54442d18 	.word	0x54442d18
 80020cc:	c00921fb 	.word	0xc00921fb
 80020d0:	54442d18 	.word	0x54442d18
 80020d4:	400921fb 	.word	0x400921fb
 80020d8:	3dcccccd 	.word	0x3dcccccd
 80020dc:	3d4ccccd 	.word	0x3d4ccccd
 80020e0:	20016be4 	.word	0x20016be4
 80020e4:	42c80000 	.word	0x42c80000

080020e8 <wrap_to_pi>:

float wrap_to_pi(const float x) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	ed87 0a01 	vstr	s0, [r7, #4]
    float mod_x = remainder(x,2*M_PI);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe f9f4 	bl	80004e0 <__aeabi_f2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8002160 <wrap_to_pi+0x78>
 8002100:	ec43 2b10 	vmov	d0, r2, r3
 8002104:	f005 fb2c 	bl	8007760 <remainder>
 8002108:	ec53 2b10 	vmov	r2, r3, d0
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fd36 	bl	8000b80 <__aeabi_d2f>
 8002114:	4603      	mov	r3, r0
 8002116:	60fb      	str	r3, [r7, #12]
    return (mod_x > M_PI) ? mod_x - M_PI : mod_x;
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7fe f9e1 	bl	80004e0 <__aeabi_f2d>
 800211e:	a312      	add	r3, pc, #72	; (adr r3, 8002168 <wrap_to_pi+0x80>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe fcc4 	bl	8000ab0 <__aeabi_dcmpgt>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00f      	beq.n	800214e <wrap_to_pi+0x66>
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7fe f9d6 	bl	80004e0 <__aeabi_f2d>
 8002134:	a30c      	add	r3, pc, #48	; (adr r3, 8002168 <wrap_to_pi+0x80>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f871 	bl	8000220 <__aeabi_dsub>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	f7fe fd1b 	bl	8000b80 <__aeabi_d2f>
 800214a:	4603      	mov	r3, r0
 800214c:	e000      	b.n	8002150 <wrap_to_pi+0x68>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	ee07 3a90 	vmov	s15, r3
}
 8002154:	eeb0 0a67 	vmov.f32	s0, s15
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	54442d18 	.word	0x54442d18
 8002164:	401921fb 	.word	0x401921fb
 8002168:	54442d18 	.word	0x54442d18
 800216c:	400921fb 	.word	0x400921fb

08002170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_MspInit+0x44>)
 8002178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217a:	4a0e      	ldr	r2, [pc, #56]	; (80021b4 <HAL_MspInit+0x44>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6613      	str	r3, [r2, #96]	; 0x60
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <HAL_MspInit+0x44>)
 8002184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_MspInit+0x44>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_MspInit+0x44>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_MspInit+0x44>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	603b      	str	r3, [r7, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000

080021b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b0a0      	sub	sp, #128	; 0x80
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	2250      	movs	r2, #80	; 0x50
 80021d6:	2100      	movs	r1, #0
 80021d8:	4618      	mov	r0, r3
 80021da:	f005 fa7d 	bl	80076d8 <memset>
  if(hadc->Instance==ADC1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021e6:	d16a      	bne.n	80022be <HAL_ADC_MspInit+0x106>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80021e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80021ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80021f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f4:	f107 031c 	add.w	r3, r7, #28
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 f90d 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002204:	f7ff fd5e 	bl	8001cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002208:	4b50      	ldr	r3, [pc, #320]	; (800234c <HAL_ADC_MspInit+0x194>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3301      	adds	r3, #1
 800220e:	4a4f      	ldr	r2, [pc, #316]	; (800234c <HAL_ADC_MspInit+0x194>)
 8002210:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <HAL_ADC_MspInit+0x194>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d10b      	bne.n	8002232 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800221a:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_ADC_MspInit+0x198>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	4a4c      	ldr	r2, [pc, #304]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002220:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002226:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002236:	4a46      	ldr	r2, [pc, #280]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800223e:	4b44      	ldr	r3, [pc, #272]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800224a:	2301      	movs	r3, #1
 800224c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800224e:	2303      	movs	r3, #3
 8002250:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800225a:	4619      	mov	r1, r3
 800225c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002260:	f002 f968 	bl	8004534 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002264:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 8002266:	4a3c      	ldr	r2, [pc, #240]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002268:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800226a:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 800226c:	2205      	movs	r2, #5
 800226e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002270:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 8002272:	2200      	movs	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 8002278:	2200      	movs	r2, #0
 800227a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 800227e:	2280      	movs	r2, #128	; 0x80
 8002280:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002282:	4b34      	ldr	r3, [pc, #208]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 8002284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002288:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 800228c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002290:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 8002294:	2220      	movs	r2, #32
 8002296:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002298:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 800229a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800229e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022a0:	482c      	ldr	r0, [pc, #176]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 80022a2:	f001 fed5 	bl	8004050 <HAL_DMA_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80022ac:	f7ff fd0a 	bl	8001cc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a28      	ldr	r2, [pc, #160]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
 80022b6:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80022bc:	e042      	b.n	8002344 <HAL_ADC_MspInit+0x18c>
  else if(hadc->Instance==ADC2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a26      	ldr	r2, [pc, #152]	; (800235c <HAL_ADC_MspInit+0x1a4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d13d      	bne.n	8002344 <HAL_ADC_MspInit+0x18c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80022c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022cc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80022ce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d4:	f107 031c 	add.w	r3, r7, #28
 80022d8:	4618      	mov	r0, r3
 80022da:	f003 f89d 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_ADC_MspInit+0x130>
      Error_Handler();
 80022e4:	f7ff fcee 	bl	8001cc4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_ADC_MspInit+0x194>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a17      	ldr	r2, [pc, #92]	; (800234c <HAL_ADC_MspInit+0x194>)
 80022f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80022f2:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_ADC_MspInit+0x194>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d10b      	bne.n	8002312 <HAL_ADC_MspInit+0x15a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	4a14      	ldr	r2, [pc, #80]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002300:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231e:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800232a:	2301      	movs	r3, #1
 800232c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800232e:	2303      	movs	r3, #3
 8002330:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002336:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800233a:	4619      	mov	r1, r3
 800233c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002340:	f002 f8f8 	bl	8004534 <HAL_GPIO_Init>
}
 8002344:	bf00      	nop
 8002346:	3780      	adds	r7, #128	; 0x80
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2001b230 	.word	0x2001b230
 8002350:	40021000 	.word	0x40021000
 8002354:	200005a4 	.word	0x200005a4
 8002358:	40020008 	.word	0x40020008
 800235c:	50000100 	.word	0x50000100

08002360 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002370:	d10b      	bne.n	800238a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_TIM_Base_MspInit+0x38>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_TIM_Base_MspInit+0x38>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6593      	str	r3, [r2, #88]	; 0x58
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_TIM_Base_MspInit+0x38>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000

0800239c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b09e      	sub	sp, #120	; 0x78
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2250      	movs	r2, #80	; 0x50
 80023ba:	2100      	movs	r1, #0
 80023bc:	4618      	mov	r0, r3
 80023be:	f005 f98b 	bl	80076d8 <memset>
  if(huart->Instance==USART2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_UART_MspInit+0xa8>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d136      	bne.n	800243a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80023cc:	2302      	movs	r3, #2
 80023ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 f81d 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80023e4:	f7ff fc6e 	bl	8001cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_UART_MspInit+0xac>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	4a16      	ldr	r2, [pc, #88]	; (8002448 <HAL_UART_MspInit+0xac>)
 80023ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f2:	6593      	str	r3, [r2, #88]	; 0x58
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_UART_MspInit+0xac>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_UART_MspInit+0xac>)
 8002402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002404:	4a10      	ldr	r2, [pc, #64]	; (8002448 <HAL_UART_MspInit+0xac>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240c:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <HAL_UART_MspInit+0xac>)
 800240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002418:	230c      	movs	r3, #12
 800241a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002428:	2307      	movs	r3, #7
 800242a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002436:	f002 f87d 	bl	8004534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800243a:	bf00      	nop
 800243c:	3778      	adds	r7, #120	; 0x78
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40004400 	.word	0x40004400
 8002448:	40021000 	.word	0x40021000

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <NMI_Handler+0x4>

08002452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <MemManage_Handler+0x4>

0800245e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <BusFault_Handler+0x4>

08002464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <UsageFault_Handler+0x4>

0800246a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002498:	f000 f89a 	bl	80025d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}

080024a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <DMA1_Channel1_IRQHandler+0x10>)
 80024a6:	f001 fef6 	bl	8004296 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200005a4 	.word	0x200005a4

080024b4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <SystemInit+0x20>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <SystemInit+0x20>)
 80024c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d8:	480d      	ldr	r0, [pc, #52]	; (8002510 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <LoopForever+0x6>)
  ldr r1, =_edata
 80024de:	490e      	ldr	r1, [pc, #56]	; (8002518 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e0:	4a0e      	ldr	r2, [pc, #56]	; (800251c <LoopForever+0xe>)
  movs r3, #0
 80024e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024e4:	e002      	b.n	80024ec <LoopCopyDataInit>

080024e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ea:	3304      	adds	r3, #4

080024ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f0:	d3f9      	bcc.n	80024e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024f2:	4a0b      	ldr	r2, [pc, #44]	; (8002520 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f4:	4c0b      	ldr	r4, [pc, #44]	; (8002524 <LoopForever+0x16>)
  movs r3, #0
 80024f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f8:	e001      	b.n	80024fe <LoopFillZerobss>

080024fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024fc:	3204      	adds	r2, #4

080024fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002500:	d3fb      	bcc.n	80024fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002502:	f7ff ffd7 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002506:	f005 f8f5 	bl	80076f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800250a:	f7fe fd07 	bl	8000f1c <main>

0800250e <LoopForever>:

LoopForever:
    b LoopForever
 800250e:	e7fe      	b.n	800250e <LoopForever>
  ldr   r0, =_estack
 8002510:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002518:	200004b0 	.word	0x200004b0
  ldr r2, =_sidata
 800251c:	080090c0 	.word	0x080090c0
  ldr r2, =_sbss
 8002520:	200004b0 	.word	0x200004b0
  ldr r4, =_ebss
 8002524:	2001b370 	.word	0x2001b370

08002528 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002528:	e7fe      	b.n	8002528 <ADC1_2_IRQHandler>

0800252a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002534:	2003      	movs	r0, #3
 8002536:	f001 fd4b 	bl	8003fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800253a:	200f      	movs	r0, #15
 800253c:	f000 f80e 	bl	800255c <HAL_InitTick>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	71fb      	strb	r3, [r7, #7]
 800254a:	e001      	b.n	8002550 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800254c:	f7ff fe10 	bl	8002170 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002550:	79fb      	ldrb	r3, [r7, #7]

}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002568:	4b16      	ldr	r3, [pc, #88]	; (80025c4 <HAL_InitTick+0x68>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d022      	beq.n	80025b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002570:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_InitTick+0x6c>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_InitTick+0x68>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800257c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fd56 	bl	8004036 <HAL_SYSTICK_Config>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10f      	bne.n	80025b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b0f      	cmp	r3, #15
 8002594:	d809      	bhi.n	80025aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002596:	2200      	movs	r2, #0
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800259e:	f001 fd22 	bl	8003fe6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_InitTick+0x70>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	e007      	b.n	80025ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	e004      	b.n	80025ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e001      	b.n	80025ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000448 	.word	0x20000448
 80025c8:	20000440 	.word	0x20000440
 80025cc:	20000444 	.word	0x20000444

080025d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_IncTick+0x1c>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_IncTick+0x20>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	4a03      	ldr	r2, [pc, #12]	; (80025ec <HAL_IncTick+0x1c>)
 80025e0:	6013      	str	r3, [r2, #0]
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	2001b234 	.word	0x2001b234
 80025f0:	20000448 	.word	0x20000448

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_GetTick+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	2001b234 	.word	0x2001b234

0800260c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	609a      	str	r2, [r3, #8]
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	609a      	str	r2, [r3, #8]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3360      	adds	r3, #96	; 0x60
 8002686:	461a      	mov	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <LL_ADC_SetOffset+0x44>)
 8002696:	4013      	ands	r3, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	03fff000 	.word	0x03fff000

080026bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3360      	adds	r3, #96	; 0x60
 80026ca:	461a      	mov	r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b087      	sub	sp, #28
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	3360      	adds	r3, #96	; 0x60
 80026f8:	461a      	mov	r2, r3
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	431a      	orrs	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002712:	bf00      	nop
 8002714:	371c      	adds	r7, #28
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800271e:	b480      	push	{r7}
 8002720:	b087      	sub	sp, #28
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3360      	adds	r3, #96	; 0x60
 800272e:	461a      	mov	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	431a      	orrs	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002748:	bf00      	nop
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	3360      	adds	r3, #96	; 0x60
 8002764:	461a      	mov	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	431a      	orrs	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	615a      	str	r2, [r3, #20]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b087      	sub	sp, #28
 80027da:	af00      	add	r7, sp, #0
 80027dc:	60f8      	str	r0, [r7, #12]
 80027de:	60b9      	str	r1, [r7, #8]
 80027e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3330      	adds	r3, #48	; 0x30
 80027e6:	461a      	mov	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	4413      	add	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	211f      	movs	r1, #31
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43db      	mvns	r3, r3
 8002808:	401a      	ands	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 011f 	and.w	r1, r3, #31
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	fa01 f303 	lsl.w	r3, r1, r3
 800281c:	431a      	orrs	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002822:	bf00      	nop
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800282e:	b480      	push	{r7}
 8002830:	b087      	sub	sp, #28
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	3314      	adds	r3, #20
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	0e5b      	lsrs	r3, r3, #25
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	4413      	add	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	0d1b      	lsrs	r3, r3, #20
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2107      	movs	r1, #7
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	0d1b      	lsrs	r3, r3, #20
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	431a      	orrs	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d10a      	bne.n	80028ae <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80028ac:	e00a      	b.n	80028c4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ba:	43db      	mvns	r3, r3
 80028bc:	401a      	ands	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	407f0000 	.word	0x407f0000

080028d4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f003 031f 	and.w	r3, r3, #31
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002900:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6093      	str	r3, [r2, #8]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002928:	d101      	bne.n	800292e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800294c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002950:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002978:	d101      	bne.n	800297e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800299c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029c8:	f043 0202 	orr.w	r2, r3, #2
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <LL_ADC_IsEnabled+0x18>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <LL_ADC_IsEnabled+0x1a>
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d101      	bne.n	8002a1a <LL_ADC_IsDisableOngoing+0x18>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <LL_ADC_IsDisableOngoing+0x1a>
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a3c:	f043 0204 	orr.w	r2, r3, #4
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d101      	bne.n	8002a68 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d101      	bne.n	8002a8e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b089      	sub	sp, #36	; 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e1a1      	b.n	8002dfa <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d109      	bne.n	8002ad8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff fb77 	bl	80021b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ff19 	bl	8002914 <LL_ADC_IsDeepPowerDownEnabled>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d004      	beq.n	8002af2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff feff 	bl	80028f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ff34 	bl	8002964 <LL_ADC_IsInternalRegulatorEnabled>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d115      	bne.n	8002b2e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff ff18 	bl	800293c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b0c:	4b9a      	ldr	r3, [pc, #616]	; (8002d78 <HAL_ADC_Init+0x2dc>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	099b      	lsrs	r3, r3, #6
 8002b12:	4a9a      	ldr	r2, [pc, #616]	; (8002d7c <HAL_ADC_Init+0x2e0>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ff16 	bl	8002964 <LL_ADC_IsInternalRegulatorEnabled>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	f043 0210 	orr.w	r2, r3, #16
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff ff76 	bl	8002a50 <LL_ADC_REG_IsConversionOngoing>
 8002b64:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f040 813a 	bne.w	8002de8 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 8136 	bne.w	8002de8 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b84:	f043 0202 	orr.w	r2, r3, #2
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff23 	bl	80029dc <LL_ADC_IsEnabled>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d137      	bne.n	8002c0c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ba4:	d004      	beq.n	8002bb0 <HAL_ADC_Init+0x114>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a75      	ldr	r2, [pc, #468]	; (8002d80 <HAL_ADC_Init+0x2e4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d10f      	bne.n	8002bd0 <HAL_ADC_Init+0x134>
 8002bb0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bb4:	f7ff ff12 	bl	80029dc <LL_ADC_IsEnabled>
 8002bb8:	4604      	mov	r4, r0
 8002bba:	4871      	ldr	r0, [pc, #452]	; (8002d80 <HAL_ADC_Init+0x2e4>)
 8002bbc:	f7ff ff0e 	bl	80029dc <LL_ADC_IsEnabled>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4323      	orrs	r3, r4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e008      	b.n	8002be2 <HAL_ADC_Init+0x146>
 8002bd0:	486c      	ldr	r0, [pc, #432]	; (8002d84 <HAL_ADC_Init+0x2e8>)
 8002bd2:	f7ff ff03 	bl	80029dc <LL_ADC_IsEnabled>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d012      	beq.n	8002c0c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bee:	d004      	beq.n	8002bfa <HAL_ADC_Init+0x15e>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a62      	ldr	r2, [pc, #392]	; (8002d80 <HAL_ADC_Init+0x2e4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_Init+0x162>
 8002bfa:	4a63      	ldr	r2, [pc, #396]	; (8002d88 <HAL_ADC_Init+0x2ec>)
 8002bfc:	e000      	b.n	8002c00 <HAL_ADC_Init+0x164>
 8002bfe:	4a63      	ldr	r2, [pc, #396]	; (8002d8c <HAL_ADC_Init+0x2f0>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f7ff fd00 	bl	800260c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7f5b      	ldrb	r3, [r3, #29]
 8002c10:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c16:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c1c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c22:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c2a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d106      	bne.n	8002c48 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	045b      	lsls	r3, r3, #17
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d009      	beq.n	8002c64 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <HAL_ADC_Init+0x2f4>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	430b      	orrs	r3, r1
 8002c76:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fedc 	bl	8002a50 <LL_ADC_REG_IsConversionOngoing>
 8002c98:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff fee9 	bl	8002a76 <LL_ADC_INJ_IsConversionOngoing>
 8002ca4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d17b      	bne.n	8002da4 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d178      	bne.n	8002da4 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cb6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cbe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cce:	f023 0302 	bic.w	r3, r3, #2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	69b9      	ldr	r1, [r7, #24]
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d017      	beq.n	8002d14 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691a      	ldr	r2, [r3, #16]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002cf2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cfc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6911      	ldr	r1, [r2, #16]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002d12:	e013      	b.n	8002d3c <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d38:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d126      	bne.n	8002d94 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d5c:	4311      	orrs	r1, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002d62:	4311      	orrs	r1, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 0201 	orr.w	r2, r2, #1
 8002d74:	611a      	str	r2, [r3, #16]
 8002d76:	e015      	b.n	8002da4 <HAL_ADC_Init+0x308>
 8002d78:	20000440 	.word	0x20000440
 8002d7c:	053e2d63 	.word	0x053e2d63
 8002d80:	50000100 	.word	0x50000100
 8002d84:	50000400 	.word	0x50000400
 8002d88:	50000300 	.word	0x50000300
 8002d8c:	50000700 	.word	0x50000700
 8002d90:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691a      	ldr	r2, [r3, #16]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0201 	bic.w	r2, r2, #1
 8002da2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d10c      	bne.n	8002dc6 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f023 010f 	bic.w	r1, r3, #15
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	1e5a      	subs	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc4:	e007      	b.n	8002dd6 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 020f 	bic.w	r2, r2, #15
 8002dd4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002de6:	e007      	b.n	8002df8 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dec:	f043 0210 	orr.w	r2, r3, #16
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd90      	pop	{r4, r7, pc}
 8002e02:	bf00      	nop

08002e04 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e14:	d004      	beq.n	8002e20 <HAL_ADC_Start+0x1c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a5c      	ldr	r2, [pc, #368]	; (8002f8c <HAL_ADC_Start+0x188>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_Start+0x20>
 8002e20:	4b5b      	ldr	r3, [pc, #364]	; (8002f90 <HAL_ADC_Start+0x18c>)
 8002e22:	e000      	b.n	8002e26 <HAL_ADC_Start+0x22>
 8002e24:	4b5b      	ldr	r3, [pc, #364]	; (8002f94 <HAL_ADC_Start+0x190>)
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fd54 	bl	80028d4 <LL_ADC_GetMultimode>
 8002e2c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fe0c 	bl	8002a50 <LL_ADC_REG_IsConversionOngoing>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 809f 	bne.w	8002f7e <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_Start+0x4a>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e09a      	b.n	8002f84 <HAL_ADC_Start+0x180>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fc38 	bl	80036cc <ADC_Enable>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 8086 	bne.w	8002f74 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a42      	ldr	r2, [pc, #264]	; (8002f8c <HAL_ADC_Start+0x188>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d002      	beq.n	8002e8c <HAL_ADC_Start+0x88>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	e001      	b.n	8002e90 <HAL_ADC_Start+0x8c>
 8002e8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d002      	beq.n	8002e9e <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb6:	d106      	bne.n	8002ec6 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	f023 0206 	bic.w	r2, r3, #6
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	661a      	str	r2, [r3, #96]	; 0x60
 8002ec4:	e002      	b.n	8002ecc <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	221c      	movs	r2, #28
 8002ed2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a2a      	ldr	r2, [pc, #168]	; (8002f8c <HAL_ADC_Start+0x188>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d002      	beq.n	8002eec <HAL_ADC_Start+0xe8>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	e001      	b.n	8002ef0 <HAL_ADC_Start+0xec>
 8002eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d008      	beq.n	8002f0a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d002      	beq.n	8002f0a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b09      	cmp	r3, #9
 8002f08:	d114      	bne.n	8002f34 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff fd7b 	bl	8002a28 <LL_ADC_REG_StartConversion>
 8002f32:	e026      	b.n	8002f82 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <HAL_ADC_Start+0x188>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d002      	beq.n	8002f50 <HAL_ADC_Start+0x14c>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	e001      	b.n	8002f54 <HAL_ADC_Start+0x150>
 8002f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002f54:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00f      	beq.n	8002f82 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f72:	e006      	b.n	8002f82 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002f7c:	e001      	b.n	8002f82 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	50000100 	.word	0x50000100
 8002f90:	50000300 	.word	0x50000300
 8002f94:	50000700 	.word	0x50000700

08002f98 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b0a6      	sub	sp, #152	; 0x98
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x22>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e36f      	b.n	80036ae <HAL_ADC_ConfigChannel+0x702>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7ff fd38 	bl	8002a50 <LL_ADC_REG_IsConversionOngoing>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 8354 	bne.w	8003690 <HAL_ADC_ConfigChannel+0x6e4>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	6859      	ldr	r1, [r3, #4]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f7ff fbee 	bl	80027d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff fd26 	bl	8002a50 <LL_ADC_REG_IsConversionOngoing>
 8003004:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fd32 	bl	8002a76 <LL_ADC_INJ_IsConversionOngoing>
 8003012:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003016:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 8173 	bne.w	8003306 <HAL_ADC_ConfigChannel+0x35a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003024:	2b00      	cmp	r3, #0
 8003026:	f040 816e 	bne.w	8003306 <HAL_ADC_ConfigChannel+0x35a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003032:	d10f      	bne.n	8003054 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	4619      	mov	r1, r3
 8003040:	f7ff fbf5 	bl	800282e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff fb9c 	bl	800278a <LL_ADC_SetSamplingTimeCommonConfig>
 8003052:	e00e      	b.n	8003072 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	6819      	ldr	r1, [r3, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	461a      	mov	r2, r3
 8003062:	f7ff fbe4 	bl	800282e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fb8c 	bl	800278a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	08db      	lsrs	r3, r3, #3
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b04      	cmp	r3, #4
 8003092:	d022      	beq.n	80030da <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	6919      	ldr	r1, [r3, #16]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030a4:	f7ff fae6 	bl	8002674 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	6919      	ldr	r1, [r3, #16]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f7ff fb32 	bl	800271e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6919      	ldr	r1, [r3, #16]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	7f1b      	ldrb	r3, [r3, #28]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x124>
 80030ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ce:	e000      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x126>
 80030d0:	2300      	movs	r3, #0
 80030d2:	461a      	mov	r2, r3
 80030d4:	f7ff fb3e 	bl	8002754 <LL_ADC_SetOffsetSaturation>
 80030d8:	e115      	b.n	8003306 <HAL_ADC_ConfigChannel+0x35a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff faeb 	bl	80026bc <LL_ADC_GetOffsetChannel>
 80030e6:	4603      	mov	r3, r0
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x15a>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2100      	movs	r1, #0
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff fae0 	bl	80026bc <LL_ADC_GetOffsetChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	e011      	b.n	800312a <HAL_ADC_ConfigChannel+0x17e>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2100      	movs	r1, #0
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fad5 	bl	80026bc <LL_ADC_GetOffsetChannel>
 8003112:	4603      	mov	r3, r0
 8003114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8003122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x196>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	0e9b      	lsrs	r3, r3, #26
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	e009      	b.n	8003156 <HAL_ADC_ConfigChannel+0x1aa>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	677b      	str	r3, [r7, #116]	; 0x74
  return(result);
 8003150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003152:	fab3 f383 	clz	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003156:	429a      	cmp	r2, r3
 8003158:	d106      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x1bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2200      	movs	r2, #0
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fac0 	bl	80026e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2101      	movs	r1, #1
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff faa4 	bl	80026bc <LL_ADC_GetOffsetChannel>
 8003174:	4603      	mov	r3, r0
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10a      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x1e8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2101      	movs	r1, #1
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fa99 	bl	80026bc <LL_ADC_GetOffsetChannel>
 800318a:	4603      	mov	r3, r0
 800318c:	0e9b      	lsrs	r3, r3, #26
 800318e:	f003 021f 	and.w	r2, r3, #31
 8003192:	e00f      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x208>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2101      	movs	r1, #1
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fa8e 	bl	80026bc <LL_ADC_GetOffsetChannel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80031ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <HAL_ADC_ConfigChannel+0x220>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0e9b      	lsrs	r3, r3, #26
 80031c6:	f003 031f 	and.w	r3, r3, #31
 80031ca:	e009      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x234>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	667b      	str	r3, [r7, #100]	; 0x64
  return(result);
 80031da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031dc:	fab3 f383 	clz	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d106      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x246>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2101      	movs	r1, #1
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fa7b 	bl	80026e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2102      	movs	r1, #2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fa5f 	bl	80026bc <LL_ADC_GetOffsetChannel>
 80031fe:	4603      	mov	r3, r0
 8003200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <HAL_ADC_ConfigChannel+0x272>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2102      	movs	r1, #2
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff fa54 	bl	80026bc <LL_ADC_GetOffsetChannel>
 8003214:	4603      	mov	r3, r0
 8003216:	0e9b      	lsrs	r3, r3, #26
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	e00f      	b.n	800323e <HAL_ADC_ConfigChannel+0x292>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2102      	movs	r1, #2
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fa49 	bl	80026bc <LL_ADC_GetOffsetChannel>
 800322a:	4603      	mov	r3, r0
 800322c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003230:	fa93 f3a3 	rbit	r3, r3
 8003234:	65fb      	str	r3, [r7, #92]	; 0x5c
  return(result);
 8003236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003238:	fab3 f383 	clz	r3, r3
 800323c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x2aa>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	0e9b      	lsrs	r3, r3, #26
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	e009      	b.n	800326a <HAL_ADC_ConfigChannel+0x2be>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800325e:	fa93 f3a3 	rbit	r3, r3
 8003262:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003266:	fab3 f383 	clz	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800326a:	429a      	cmp	r2, r3
 800326c:	d106      	bne.n	800327c <HAL_ADC_ConfigChannel+0x2d0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2200      	movs	r2, #0
 8003274:	2102      	movs	r1, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff fa36 	bl	80026e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2103      	movs	r1, #3
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fa1a 	bl	80026bc <LL_ADC_GetOffsetChannel>
 8003288:	4603      	mov	r3, r0
 800328a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10a      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x2fc>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2103      	movs	r1, #3
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff fa0f 	bl	80026bc <LL_ADC_GetOffsetChannel>
 800329e:	4603      	mov	r3, r0
 80032a0:	0e9b      	lsrs	r3, r3, #26
 80032a2:	f003 021f 	and.w	r2, r3, #31
 80032a6:	e00f      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x31c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2103      	movs	r1, #3
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fa04 	bl	80026bc <LL_ADC_GetOffsetChannel>
 80032b4:	4603      	mov	r3, r0
 80032b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80032c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_ADC_ConfigChannel+0x334>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	0e9b      	lsrs	r3, r3, #26
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	e009      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x348>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80032ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f0:	fab3 f383 	clz	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d106      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x35a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2200      	movs	r2, #0
 80032fe:	2103      	movs	r1, #3
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f9f1 	bl	80026e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff fb66 	bl	80029dc <LL_ADC_IsEnabled>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	f040 8105 	bne.w	8003522 <HAL_ADC_ConfigChannel+0x576>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6819      	ldr	r1, [r3, #0]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	461a      	mov	r2, r3
 8003326:	f7ff faad 	bl	8002884 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4aa9      	ldr	r2, [pc, #676]	; (80035d4 <HAL_ADC_ConfigChannel+0x628>)
 8003330:	4293      	cmp	r3, r2
 8003332:	f040 80f6 	bne.w	8003522 <HAL_ADC_ConfigChannel+0x576>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	2b00      	cmp	r3, #0
 8003344:	d10b      	bne.n	800335e <HAL_ADC_ConfigChannel+0x3b2>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	0e9b      	lsrs	r3, r3, #26
 800334c:	3301      	adds	r3, #1
 800334e:	f003 031f 	and.w	r3, r3, #31
 8003352:	2b09      	cmp	r3, #9
 8003354:	bf94      	ite	ls
 8003356:	2301      	movls	r3, #1
 8003358:	2300      	movhi	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e011      	b.n	8003382 <HAL_ADC_ConfigChannel+0x3d6>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003366:	fa93 f3a3 	rbit	r3, r3
 800336a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800336c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	3301      	adds	r3, #1
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2b09      	cmp	r3, #9
 800337a:	bf94      	ite	ls
 800337c:	2301      	movls	r3, #1
 800337e:	2300      	movhi	r3, #0
 8003380:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003382:	2b00      	cmp	r3, #0
 8003384:	d061      	beq.n	800344a <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338e:	2b00      	cmp	r3, #0
 8003390:	d107      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x3f6>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	0e9b      	lsrs	r3, r3, #26
 8003398:	3301      	adds	r3, #1
 800339a:	069b      	lsls	r3, r3, #26
 800339c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a0:	e00d      	b.n	80033be <HAL_ADC_ConfigChannel+0x412>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	fa93 f3a3 	rbit	r3, r3
 80033ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80033b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033b2:	fab3 f383 	clz	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	069b      	lsls	r3, r3, #26
 80033ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_ADC_ConfigChannel+0x432>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	3301      	adds	r3, #1
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	e00f      	b.n	80033fe <HAL_ADC_ConfigChannel+0x452>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	2101      	movs	r1, #1
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	ea42 0103 	orr.w	r1, r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10a      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x478>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	0e9b      	lsrs	r3, r3, #26
 8003414:	3301      	adds	r3, #1
 8003416:	f003 021f 	and.w	r2, r3, #31
 800341a:	4613      	mov	r3, r2
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	4413      	add	r3, r2
 8003420:	051b      	lsls	r3, r3, #20
 8003422:	e010      	b.n	8003446 <HAL_ADC_ConfigChannel+0x49a>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f003 021f 	and.w	r2, r3, #31
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003446:	430b      	orrs	r3, r1
 8003448:	e066      	b.n	8003518 <HAL_ADC_ConfigChannel+0x56c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_ADC_ConfigChannel+0x4ba>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	0e9b      	lsrs	r3, r3, #26
 800345c:	3301      	adds	r3, #1
 800345e:	069b      	lsls	r3, r3, #26
 8003460:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003464:	e00d      	b.n	8003482 <HAL_ADC_ConfigChannel+0x4d6>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	fa93 f3a3 	rbit	r3, r3
 8003472:	61fb      	str	r3, [r7, #28]
  return(result);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	3301      	adds	r3, #1
 800347c:	069b      	lsls	r3, r3, #26
 800347e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x4f6>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	0e9b      	lsrs	r3, r3, #26
 8003494:	3301      	adds	r3, #1
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	2101      	movs	r1, #1
 800349c:	fa01 f303 	lsl.w	r3, r1, r3
 80034a0:	e00f      	b.n	80034c2 <HAL_ADC_ConfigChannel+0x516>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	fa93 f3a3 	rbit	r3, r3
 80034ae:	617b      	str	r3, [r7, #20]
  return(result);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fab3 f383 	clz	r3, r3
 80034b6:	3301      	adds	r3, #1
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	ea42 0103 	orr.w	r1, r2, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10d      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x542>
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	0e9b      	lsrs	r3, r3, #26
 80034d8:	3301      	adds	r3, #1
 80034da:	f003 021f 	and.w	r2, r3, #31
 80034de:	4613      	mov	r3, r2
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	4413      	add	r3, r2
 80034e4:	3b1e      	subs	r3, #30
 80034e6:	051b      	lsls	r3, r3, #20
 80034e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034ec:	e013      	b.n	8003516 <HAL_ADC_ConfigChannel+0x56a>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	fa93 f3a3 	rbit	r3, r3
 80034fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	3301      	adds	r3, #1
 8003504:	f003 021f 	and.w	r2, r3, #31
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	3b1e      	subs	r3, #30
 8003510:	051b      	lsls	r3, r3, #20
 8003512:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003516:	430b      	orrs	r3, r1
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	6892      	ldr	r2, [r2, #8]
 800351c:	4619      	mov	r1, r3
 800351e:	f7ff f986 	bl	800282e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_ADC_ConfigChannel+0x62c>)
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80b9 	beq.w	80036a2 <HAL_ADC_ConfigChannel+0x6f6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003538:	d004      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x598>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a27      	ldr	r2, [pc, #156]	; (80035dc <HAL_ADC_ConfigChannel+0x630>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x59c>
 8003544:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_ADC_ConfigChannel+0x634>)
 8003546:	e000      	b.n	800354a <HAL_ADC_ConfigChannel+0x59e>
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <HAL_ADC_ConfigChannel+0x638>)
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff f884 	bl	8002658 <LL_ADC_GetCommonPathInternalCh>
 8003550:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a23      	ldr	r2, [pc, #140]	; (80035e8 <HAL_ADC_ConfigChannel+0x63c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_ADC_ConfigChannel+0x5bc>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a22      	ldr	r2, [pc, #136]	; (80035ec <HAL_ADC_ConfigChannel+0x640>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d147      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x64c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800356c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d141      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x64c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800357c:	f040 8091 	bne.w	80036a2 <HAL_ADC_ConfigChannel+0x6f6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003588:	d004      	beq.n	8003594 <HAL_ADC_ConfigChannel+0x5e8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a13      	ldr	r2, [pc, #76]	; (80035dc <HAL_ADC_ConfigChannel+0x630>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d101      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x5ec>
 8003594:	4a12      	ldr	r2, [pc, #72]	; (80035e0 <HAL_ADC_ConfigChannel+0x634>)
 8003596:	e000      	b.n	800359a <HAL_ADC_ConfigChannel+0x5ee>
 8003598:	4a12      	ldr	r2, [pc, #72]	; (80035e4 <HAL_ADC_ConfigChannel+0x638>)
 800359a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800359e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80035a2:	4619      	mov	r1, r3
 80035a4:	4610      	mov	r0, r2
 80035a6:	f7ff f844 	bl	8002632 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_ADC_ConfigChannel+0x644>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	099b      	lsrs	r3, r3, #6
 80035b0:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <HAL_ADC_ConfigChannel+0x648>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	099b      	lsrs	r3, r3, #6
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	4613      	mov	r3, r2
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035c4:	e002      	b.n	80035cc <HAL_ADC_ConfigChannel+0x620>
          {
            wait_loop_index--;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f9      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x61a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035d2:	e066      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x6f6>
 80035d4:	407f0000 	.word	0x407f0000
 80035d8:	80080000 	.word	0x80080000
 80035dc:	50000100 	.word	0x50000100
 80035e0:	50000300 	.word	0x50000300
 80035e4:	50000700 	.word	0x50000700
 80035e8:	c3210000 	.word	0xc3210000
 80035ec:	90c00010 	.word	0x90c00010
 80035f0:	20000440 	.word	0x20000440
 80035f4:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <HAL_ADC_ConfigChannel+0x70c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d120      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x698>
 8003602:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003606:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d11a      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x698>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003616:	d144      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x6f6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003620:	d004      	beq.n	800362c <HAL_ADC_ConfigChannel+0x680>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a25      	ldr	r2, [pc, #148]	; (80036bc <HAL_ADC_ConfigChannel+0x710>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x684>
 800362c:	4a24      	ldr	r2, [pc, #144]	; (80036c0 <HAL_ADC_ConfigChannel+0x714>)
 800362e:	e000      	b.n	8003632 <HAL_ADC_ConfigChannel+0x686>
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <HAL_ADC_ConfigChannel+0x718>)
 8003632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800363a:	4619      	mov	r1, r3
 800363c:	4610      	mov	r0, r2
 800363e:	f7fe fff8 	bl	8002632 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003642:	e02e      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x6f6>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <HAL_ADC_ConfigChannel+0x71c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d129      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x6f6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800364e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d123      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x6f6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_ADC_ConfigChannel+0x710>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d01e      	beq.n	80036a2 <HAL_ADC_ConfigChannel+0x6f6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800366c:	d004      	beq.n	8003678 <HAL_ADC_ConfigChannel+0x6cc>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a12      	ldr	r2, [pc, #72]	; (80036bc <HAL_ADC_ConfigChannel+0x710>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d101      	bne.n	800367c <HAL_ADC_ConfigChannel+0x6d0>
 8003678:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <HAL_ADC_ConfigChannel+0x714>)
 800367a:	e000      	b.n	800367e <HAL_ADC_ConfigChannel+0x6d2>
 800367c:	4a11      	ldr	r2, [pc, #68]	; (80036c4 <HAL_ADC_ConfigChannel+0x718>)
 800367e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003686:	4619      	mov	r1, r3
 8003688:	4610      	mov	r0, r2
 800368a:	f7fe ffd2 	bl	8002632 <LL_ADC_SetCommonPathInternalCh>
 800368e:	e008      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x6f6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036aa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3798      	adds	r7, #152	; 0x98
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	c7520000 	.word	0xc7520000
 80036bc:	50000100 	.word	0x50000100
 80036c0:	50000300 	.word	0x50000300
 80036c4:	50000700 	.word	0x50000700
 80036c8:	cb840000 	.word	0xcb840000

080036cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff f97f 	bl	80029dc <LL_ADC_IsEnabled>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d14d      	bne.n	8003780 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	4b28      	ldr	r3, [pc, #160]	; (800378c <ADC_Enable+0xc0>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	f043 0210 	orr.w	r2, r3, #16
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	f043 0201 	orr.w	r2, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e039      	b.n	8003782 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff f93a 	bl	800298c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003718:	f7fe ff6c 	bl	80025f4 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800371e:	e028      	b.n	8003772 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff f959 	bl	80029dc <LL_ADC_IsEnabled>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d104      	bne.n	800373a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff f929 	bl	800298c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800373a:	f7fe ff5b 	bl	80025f4 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d914      	bls.n	8003772 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b01      	cmp	r3, #1
 8003754:	d00d      	beq.n	8003772 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	f043 0210 	orr.w	r2, r3, #16
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	f043 0201 	orr.w	r2, r3, #1
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e007      	b.n	8003782 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d1cf      	bne.n	8003720 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	8000003f 	.word	0x8000003f

08003790 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff f930 	bl	8002a02 <LL_ADC_IsDisableOngoing>
 80037a2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff f917 	bl	80029dc <LL_ADC_IsEnabled>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d047      	beq.n	8003844 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d144      	bne.n	8003844 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030d 	and.w	r3, r3, #13
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d10c      	bne.n	80037e2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7ff f8f1 	bl	80029b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2203      	movs	r2, #3
 80037d8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037da:	f7fe ff0b 	bl	80025f4 <HAL_GetTick>
 80037de:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037e0:	e029      	b.n	8003836 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	f043 0210 	orr.w	r2, r3, #16
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f2:	f043 0201 	orr.w	r2, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e023      	b.n	8003846 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037fe:	f7fe fef9 	bl	80025f4 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d914      	bls.n	8003836 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	f043 0210 	orr.w	r2, r3, #16
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382a:	f043 0201 	orr.w	r2, r3, #1
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e007      	b.n	8003846 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1dc      	bne.n	80037fe <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003860:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d14b      	bne.n	8003900 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d021      	beq.n	80038c6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fe ff92 	bl	80027b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d032      	beq.n	80038f8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d12b      	bne.n	80038f8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d11f      	bne.n	80038f8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038bc:	f043 0201 	orr.w	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80038c4:	e018      	b.n	80038f8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d111      	bne.n	80038f8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d105      	bne.n	80038f8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f0:	f043 0201 	orr.w	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7fd fe89 	bl	8001610 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80038fe:	e00e      	b.n	800391e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800390c:	68f8      	ldr	r0, [r7, #12]
 800390e:	f7ff fb43 	bl	8002f98 <HAL_ADC_ErrorCallback>
}
 8003912:	e004      	b.n	800391e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	4798      	blx	r3
}
 800391e:	bf00      	nop
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f7fd fe23 	bl	8001580 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003960:	f043 0204 	orr.w	r2, r3, #4
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7ff fb15 	bl	8002f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800396e:	bf00      	nop
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <LL_ADC_IsEnabled>:
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <LL_ADC_IsEnabled+0x18>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <LL_ADC_IsEnabled+0x1a>
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <LL_ADC_StartCalibration>:
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80039ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	609a      	str	r2, [r3, #8]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <LL_ADC_IsCalibrationOnGoing>:
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039e2:	d101      	bne.n	80039e8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <LL_ADC_IsCalibrationOnGoing+0x1c>
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <LL_ADC_REG_StartConversion>:
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a06:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	609a      	str	r2, [r3, #8]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <LL_ADC_REG_IsConversionOngoing>:
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d101      	bne.n	8003a36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADCEx_Calibration_Start+0x1c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e04d      	b.n	8003afc <HAL_ADCEx_Calibration_Start+0xb8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff fe91 	bl	8003790 <ADC_Disable>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d136      	bne.n	8003ae6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a80:	f023 0302 	bic.w	r3, r3, #2
 8003a84:	f043 0202 	orr.w	r2, r3, #2
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7ff ff82 	bl	800399c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a98:	e014      	b.n	8003ac4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	4a18      	ldr	r2, [pc, #96]	; (8003b04 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d90d      	bls.n	8003ac4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	f023 0312 	bic.w	r3, r3, #18
 8003ab0:	f043 0210 	orr.w	r2, r3, #16
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e01b      	b.n	8003afc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff80 	bl	80039ce <LL_ADC_IsCalibrationOnGoing>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e2      	bne.n	8003a9a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	f023 0303 	bic.w	r3, r3, #3
 8003adc:	f043 0201 	orr.w	r2, r3, #1
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ae4:	e005      	b.n	8003af2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	0004de01 	.word	0x0004de01

08003b08 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b0a2      	sub	sp, #136	; 0x88
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff80 	bl	8003a1e <LL_ADC_REG_IsConversionOngoing>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
 8003b26:	e08e      	b.n	8003c46 <HAL_ADCEx_MultiModeStart_DMA+0x13e>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e087      	b.n	8003c46 <HAL_ADCEx_MultiModeStart_DMA+0x13e>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Temporary handle minimum initialization */
    __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003b3e:	2300      	movs	r3, #0
 8003b40:	673b      	str	r3, [r7, #112]	; 0x70
    ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003b42:	2300      	movs	r3, #0
 8003b44:	677b      	str	r3, [r7, #116]	; 0x74

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b4e:	d102      	bne.n	8003b56 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8003b50:	4b3f      	ldr	r3, [pc, #252]	; (8003c50 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	e001      	b.n	8003b5a <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]

    if (tmphadcSlave.Instance == NULL)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	f043 0220 	orr.w	r2, r3, #32
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e066      	b.n	8003c46 <HAL_ADCEx_MultiModeStart_DMA+0x13e>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7ff fda7 	bl	80036cc <ADC_Enable>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    if (tmp_hal_status == HAL_OK)
 8003b84:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8003b8c:	f107 0314 	add.w	r3, r7, #20
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fd9b 	bl	80036cc <ADC_Enable>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8003b9c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d14a      	bne.n	8003c3a <HAL_ADCEx_MultiModeStart_DMA+0x132>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8003bcc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8003bd4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bde:	d004      	beq.n	8003bea <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1a      	ldr	r2, [pc, #104]	; (8003c50 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d101      	bne.n	8003bee <HAL_ADCEx_MultiModeStart_DMA+0xe6>
 8003bea:	4b1d      	ldr	r3, [pc, #116]	; (8003c60 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8003bec:	e000      	b.n	8003bf0 <HAL_ADCEx_MultiModeStart_DMA+0xe8>
 8003bee:	4b1d      	ldr	r3, [pc, #116]	; (8003c64 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8003bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	221c      	movs	r2, #28
 8003bfa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0210 	orr.w	r2, r2, #16
 8003c12:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003c18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	4619      	mov	r1, r3
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f000 fabc 	bl	80041a0 <HAL_DMA_Start_IT>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fedf 	bl	80039f6 <LL_ADC_REG_StartConversion>
 8003c38:	e003      	b.n	8003c42 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8003c42:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
  }
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3788      	adds	r7, #136	; 0x88
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	50000100 	.word	0x50000100
 8003c54:	0800384f 	.word	0x0800384f
 8003c58:	08003927 	.word	0x08003927
 8003c5c:	08003943 	.word	0x08003943
 8003c60:	50000300 	.word	0x50000300
 8003c64:	50000700 	.word	0x50000700

08003c68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b0a1      	sub	sp, #132	; 0x84
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0cb      	b.n	8003e1e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003c92:	2300      	movs	r3, #0
 8003c94:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c9e:	d102      	bne.n	8003ca6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ca0:	4b61      	ldr	r3, [pc, #388]	; (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ca2:	60bb      	str	r3, [r7, #8]
 8003ca4:	e001      	b.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10b      	bne.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	f043 0220 	orr.w	r2, r3, #32
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0aa      	b.n	8003e1e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fea7 	bl	8003a1e <LL_ADC_REG_IsConversionOngoing>
 8003cd0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fea1 	bl	8003a1e <LL_ADC_REG_IsConversionOngoing>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f040 808c 	bne.w	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 8088 	bne.w	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cf4:	d004      	beq.n	8003d00 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4b      	ldr	r2, [pc, #300]	; (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003d00:	4b4a      	ldr	r3, [pc, #296]	; (8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003d02:	e000      	b.n	8003d06 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003d04:	4b4a      	ldr	r3, [pc, #296]	; (8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003d06:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d041      	beq.n	8003d94 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	6859      	ldr	r1, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d22:	035b      	lsls	r3, r3, #13
 8003d24:	430b      	orrs	r3, r1
 8003d26:	431a      	orrs	r2, r3
 8003d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d2a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d34:	d004      	beq.n	8003d40 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3b      	ldr	r2, [pc, #236]	; (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10f      	bne.n	8003d60 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003d40:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003d44:	f7ff fe17 	bl	8003976 <LL_ADC_IsEnabled>
 8003d48:	4604      	mov	r4, r0
 8003d4a:	4837      	ldr	r0, [pc, #220]	; (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d4c:	f7ff fe13 	bl	8003976 <LL_ADC_IsEnabled>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4323      	orrs	r3, r4
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf0c      	ite	eq
 8003d58:	2301      	moveq	r3, #1
 8003d5a:	2300      	movne	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e008      	b.n	8003d72 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003d60:	4834      	ldr	r0, [pc, #208]	; (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003d62:	f7ff fe08 	bl	8003976 <LL_ADC_IsEnabled>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	bf0c      	ite	eq
 8003d6c:	2301      	moveq	r3, #1
 8003d6e:	2300      	movne	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d04c      	beq.n	8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003d7e:	f023 030f 	bic.w	r3, r3, #15
 8003d82:	683a      	ldr	r2, [r7, #0]
 8003d84:	6811      	ldr	r1, [r2, #0]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	6892      	ldr	r2, [r2, #8]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d90:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d92:	e03d      	b.n	8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d9e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da8:	d004      	beq.n	8003db4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1e      	ldr	r2, [pc, #120]	; (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10f      	bne.n	8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003db4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003db8:	f7ff fddd 	bl	8003976 <LL_ADC_IsEnabled>
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	481a      	ldr	r0, [pc, #104]	; (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003dc0:	f7ff fdd9 	bl	8003976 <LL_ADC_IsEnabled>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4323      	orrs	r3, r4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf0c      	ite	eq
 8003dcc:	2301      	moveq	r3, #1
 8003dce:	2300      	movne	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e008      	b.n	8003de6 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003dd4:	4817      	ldr	r0, [pc, #92]	; (8003e34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003dd6:	f7ff fdce 	bl	8003976 <LL_ADC_IsEnabled>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d012      	beq.n	8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003df2:	f023 030f 	bic.w	r3, r3, #15
 8003df6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003df8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dfa:	e009      	b.n	8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	f043 0220 	orr.w	r2, r3, #32
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e0e:	e000      	b.n	8003e12 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e10:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3784      	adds	r7, #132	; 0x84
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd90      	pop	{r4, r7, pc}
 8003e26:	bf00      	nop
 8003e28:	50000100 	.word	0x50000100
 8003e2c:	50000300 	.word	0x50000300
 8003e30:	50000700 	.word	0x50000700
 8003e34:	50000400 	.word	0x50000400

08003e38 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <NVIC_SetPriorityGrouping+0x44>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e4e:	68ba      	ldr	r2, [r7, #8]
 8003e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e54:	4013      	ands	r3, r2
 8003e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e6a:	4a04      	ldr	r2, [pc, #16]	; (8003e7c <NVIC_SetPriorityGrouping+0x44>)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	60d3      	str	r3, [r2, #12]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	e000ed00 	.word	0xe000ed00

08003e80 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e84:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <NVIC_GetPriorityGrouping+0x18>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	0a1b      	lsrs	r3, r3, #8
 8003e8a:	f003 0307 	and.w	r3, r3, #7
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	f003 021f 	and.w	r2, r3, #31
 8003eac:	4907      	ldr	r1, [pc, #28]	; (8003ecc <NVIC_EnableIRQ+0x30>)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	e000e100 	.word	0xe000e100

08003ed0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	6039      	str	r1, [r7, #0]
 8003eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da0b      	bge.n	8003efc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	490c      	ldr	r1, [pc, #48]	; (8003f1c <NVIC_SetPriority+0x4c>)
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	3b04      	subs	r3, #4
 8003ef2:	0112      	lsls	r2, r2, #4
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003efa:	e009      	b.n	8003f10 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	4907      	ldr	r1, [pc, #28]	; (8003f20 <NVIC_SetPriority+0x50>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00
 8003f20:	e000e100 	.word	0xe000e100

08003f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	; 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f1c3 0307 	rsb	r3, r3, #7
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	bf28      	it	cs
 8003f42:	2304      	movcs	r3, #4
 8003f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2b06      	cmp	r3, #6
 8003f4c:	d902      	bls.n	8003f54 <NVIC_EncodePriority+0x30>
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	3b03      	subs	r3, #3
 8003f52:	e000      	b.n	8003f56 <NVIC_EncodePriority+0x32>
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43da      	mvns	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	401a      	ands	r2, r3
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	43d9      	mvns	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f7c:	4313      	orrs	r3, r2
         );
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3724      	adds	r7, #36	; 0x24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f9c:	d301      	bcc.n	8003fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e00f      	b.n	8003fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <SysTick_Config+0x40>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003faa:	210f      	movs	r1, #15
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fb0:	f7ff ff8e 	bl	8003ed0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <SysTick_Config+0x40>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fba:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <SysTick_Config+0x40>)
 8003fbc:	2207      	movs	r2, #7
 8003fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	e000e010 	.word	0xe000e010

08003fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ff2d 	bl	8003e38 <NVIC_SetPriorityGrouping>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b086      	sub	sp, #24
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	4603      	mov	r3, r0
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
 8003ff2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff4:	f7ff ff44 	bl	8003e80 <NVIC_GetPriorityGrouping>
 8003ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	6978      	ldr	r0, [r7, #20]
 8004000:	f7ff ff90 	bl	8003f24 <NVIC_EncodePriority>
 8004004:	4602      	mov	r2, r0
 8004006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400a:	4611      	mov	r1, r2
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff ff5f 	bl	8003ed0 <NVIC_SetPriority>
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff37 	bl	8003e9c <NVIC_EnableIRQ>
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f7ff ffa4 	bl	8003f8c <SysTick_Config>
 8004044:	4603      	mov	r3, r0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e08d      	b.n	800417e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_DMA_Init+0x138>)
 800406a:	429a      	cmp	r2, r3
 800406c:	d80f      	bhi.n	800408e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	4b45      	ldr	r3, [pc, #276]	; (800418c <HAL_DMA_Init+0x13c>)
 8004076:	4413      	add	r3, r2
 8004078:	4a45      	ldr	r2, [pc, #276]	; (8004190 <HAL_DMA_Init+0x140>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	009a      	lsls	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a42      	ldr	r2, [pc, #264]	; (8004194 <HAL_DMA_Init+0x144>)
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
 800408c:	e00e      	b.n	80040ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	4b40      	ldr	r3, [pc, #256]	; (8004198 <HAL_DMA_Init+0x148>)
 8004096:	4413      	add	r3, r2
 8004098:	4a3d      	ldr	r2, [pc, #244]	; (8004190 <HAL_DMA_Init+0x140>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	091b      	lsrs	r3, r3, #4
 80040a0:	009a      	lsls	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a3c      	ldr	r2, [pc, #240]	; (800419c <HAL_DMA_Init+0x14c>)
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2202      	movs	r2, #2
 80040b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80040c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f9b6 	bl	8004470 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410c:	d102      	bne.n	8004114 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004128:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d010      	beq.n	8004154 <HAL_DMA_Init+0x104>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b04      	cmp	r3, #4
 8004138:	d80c      	bhi.n	8004154 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f9d6 	bl	80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	2200      	movs	r2, #0
 8004146:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	e008      	b.n	8004166 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40020407 	.word	0x40020407
 800418c:	bffdfff8 	.word	0xbffdfff8
 8004190:	cccccccd 	.word	0xcccccccd
 8004194:	40020000 	.word	0x40020000
 8004198:	bffdfbf8 	.word	0xbffdfbf8
 800419c:	40020400 	.word	0x40020400

080041a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_DMA_Start_IT+0x20>
 80041bc:	2302      	movs	r3, #2
 80041be:	e066      	b.n	800428e <HAL_DMA_Start_IT+0xee>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d155      	bne.n	8004280 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f8fb 	bl	80043f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004202:	2b00      	cmp	r3, #0
 8004204:	d008      	beq.n	8004218 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 020e 	orr.w	r2, r2, #14
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e00f      	b.n	8004238 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 020a 	orr.w	r2, r2, #10
 8004236:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004250:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004254:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004268:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e005      	b.n	800428c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004288:	2302      	movs	r3, #2
 800428a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800428c:	7dfb      	ldrb	r3, [r7, #23]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b084      	sub	sp, #16
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2204      	movs	r2, #4
 80042b8:	409a      	lsls	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d026      	beq.n	8004310 <HAL_DMA_IRQHandler+0x7a>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d021      	beq.n	8004310 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d107      	bne.n	80042ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0204 	bic.w	r2, r2, #4
 80042e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	f003 021f 	and.w	r2, r3, #31
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2104      	movs	r1, #4
 80042f8:	fa01 f202 	lsl.w	r2, r1, r2
 80042fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004302:	2b00      	cmp	r3, #0
 8004304:	d071      	beq.n	80043ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800430e:	e06c      	b.n	80043ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2202      	movs	r2, #2
 800431a:	409a      	lsls	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d02e      	beq.n	8004382 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d029      	beq.n	8004382 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 020a 	bic.w	r2, r2, #10
 800434a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004358:	f003 021f 	and.w	r2, r3, #31
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	2102      	movs	r1, #2
 8004362:	fa01 f202 	lsl.w	r2, r1, r2
 8004366:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d038      	beq.n	80043ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004380:	e033      	b.n	80043ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004386:	f003 031f 	and.w	r3, r3, #31
 800438a:	2208      	movs	r2, #8
 800438c:	409a      	lsls	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4013      	ands	r3, r2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d02a      	beq.n	80043ec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f003 0308 	and.w	r3, r3, #8
 800439c:	2b00      	cmp	r3, #0
 800439e:	d025      	beq.n	80043ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 020e 	bic.w	r2, r2, #14
 80043ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	f003 021f 	and.w	r2, r3, #31
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043bc:	2101      	movs	r1, #1
 80043be:	fa01 f202 	lsl.w	r2, r1, r2
 80043c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
}
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800440a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800441c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004422:	f003 021f 	and.w	r2, r3, #31
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2101      	movs	r1, #1
 800442c:	fa01 f202 	lsl.w	r2, r1, r2
 8004430:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b10      	cmp	r3, #16
 8004440:	d108      	bne.n	8004454 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004452:	e007      	b.n	8004464 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004480:	429a      	cmp	r2, r3
 8004482:	d802      	bhi.n	800448a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004484:	4b15      	ldr	r3, [pc, #84]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e001      	b.n	800448e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800448a:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800448c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	3b08      	subs	r3, #8
 800449a:	4a12      	ldr	r2, [pc, #72]	; (80044e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a8:	089b      	lsrs	r3, r3, #2
 80044aa:	009a      	lsls	r2, r3, #2
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	4413      	add	r3, r2
 80044b0:	461a      	mov	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a0b      	ldr	r2, [pc, #44]	; (80044e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2201      	movs	r2, #1
 80044c4:	409a      	lsls	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	40020407 	.word	0x40020407
 80044dc:	40020800 	.word	0x40020800
 80044e0:	40020820 	.word	0x40020820
 80044e4:	cccccccd 	.word	0xcccccccd
 80044e8:	40020880 	.word	0x40020880

080044ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4b0b      	ldr	r3, [pc, #44]	; (800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004500:	4413      	add	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	461a      	mov	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a08      	ldr	r2, [pc, #32]	; (8004530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800450e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3b01      	subs	r3, #1
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	2201      	movs	r2, #1
 800451a:	409a      	lsls	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004520:	bf00      	nop
 8004522:	3714      	adds	r7, #20
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	1000823f 	.word	0x1000823f
 8004530:	40020940 	.word	0x40020940

08004534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004542:	e15a      	b.n	80047fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	2101      	movs	r1, #1
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	fa01 f303 	lsl.w	r3, r1, r3
 8004550:	4013      	ands	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 814c 	beq.w	80047f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d005      	beq.n	8004574 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004570:	2b02      	cmp	r3, #2
 8004572:	d130      	bne.n	80045d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	2203      	movs	r2, #3
 8004580:	fa02 f303 	lsl.w	r3, r2, r3
 8004584:	43db      	mvns	r3, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68da      	ldr	r2, [r3, #12]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045aa:	2201      	movs	r2, #1
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4013      	ands	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	091b      	lsrs	r3, r3, #4
 80045c0:	f003 0201 	and.w	r2, r3, #1
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b03      	cmp	r3, #3
 80045e0:	d017      	beq.n	8004612 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	2203      	movs	r2, #3
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d123      	bne.n	8004666 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	08da      	lsrs	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3208      	adds	r2, #8
 8004626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800462a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	220f      	movs	r2, #15
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	43db      	mvns	r3, r3
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	4013      	ands	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	08da      	lsrs	r2, r3, #3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3208      	adds	r2, #8
 8004660:	6939      	ldr	r1, [r7, #16]
 8004662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	2203      	movs	r2, #3
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	4013      	ands	r3, r2
 800467c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f003 0203 	and.w	r2, r3, #3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	f000 80a6 	beq.w	80047f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046a8:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <HAL_GPIO_Init+0x2e4>)
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	4a5a      	ldr	r2, [pc, #360]	; (8004818 <HAL_GPIO_Init+0x2e4>)
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	6613      	str	r3, [r2, #96]	; 0x60
 80046b4:	4b58      	ldr	r3, [pc, #352]	; (8004818 <HAL_GPIO_Init+0x2e4>)
 80046b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	60bb      	str	r3, [r7, #8]
 80046be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046c0:	4a56      	ldr	r2, [pc, #344]	; (800481c <HAL_GPIO_Init+0x2e8>)
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	089b      	lsrs	r3, r3, #2
 80046c6:	3302      	adds	r3, #2
 80046c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	220f      	movs	r2, #15
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4013      	ands	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046ea:	d01f      	beq.n	800472c <HAL_GPIO_Init+0x1f8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a4c      	ldr	r2, [pc, #304]	; (8004820 <HAL_GPIO_Init+0x2ec>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d019      	beq.n	8004728 <HAL_GPIO_Init+0x1f4>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a4b      	ldr	r2, [pc, #300]	; (8004824 <HAL_GPIO_Init+0x2f0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_GPIO_Init+0x1f0>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a4a      	ldr	r2, [pc, #296]	; (8004828 <HAL_GPIO_Init+0x2f4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00d      	beq.n	8004720 <HAL_GPIO_Init+0x1ec>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a49      	ldr	r2, [pc, #292]	; (800482c <HAL_GPIO_Init+0x2f8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <HAL_GPIO_Init+0x1e8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a48      	ldr	r2, [pc, #288]	; (8004830 <HAL_GPIO_Init+0x2fc>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d101      	bne.n	8004718 <HAL_GPIO_Init+0x1e4>
 8004714:	2305      	movs	r3, #5
 8004716:	e00a      	b.n	800472e <HAL_GPIO_Init+0x1fa>
 8004718:	2306      	movs	r3, #6
 800471a:	e008      	b.n	800472e <HAL_GPIO_Init+0x1fa>
 800471c:	2304      	movs	r3, #4
 800471e:	e006      	b.n	800472e <HAL_GPIO_Init+0x1fa>
 8004720:	2303      	movs	r3, #3
 8004722:	e004      	b.n	800472e <HAL_GPIO_Init+0x1fa>
 8004724:	2302      	movs	r3, #2
 8004726:	e002      	b.n	800472e <HAL_GPIO_Init+0x1fa>
 8004728:	2301      	movs	r3, #1
 800472a:	e000      	b.n	800472e <HAL_GPIO_Init+0x1fa>
 800472c:	2300      	movs	r3, #0
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	f002 0203 	and.w	r2, r2, #3
 8004734:	0092      	lsls	r2, r2, #2
 8004736:	4093      	lsls	r3, r2
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4313      	orrs	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800473e:	4937      	ldr	r1, [pc, #220]	; (800481c <HAL_GPIO_Init+0x2e8>)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	089b      	lsrs	r3, r3, #2
 8004744:	3302      	adds	r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800474c:	4b39      	ldr	r3, [pc, #228]	; (8004834 <HAL_GPIO_Init+0x300>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	43db      	mvns	r3, r3
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	4013      	ands	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004770:	4a30      	ldr	r2, [pc, #192]	; (8004834 <HAL_GPIO_Init+0x300>)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004776:	4b2f      	ldr	r3, [pc, #188]	; (8004834 <HAL_GPIO_Init+0x300>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	43db      	mvns	r3, r3
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4013      	ands	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800479a:	4a26      	ldr	r2, [pc, #152]	; (8004834 <HAL_GPIO_Init+0x300>)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80047a0:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_GPIO_Init+0x300>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	43db      	mvns	r3, r3
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_GPIO_Init+0x300>)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80047ca:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <HAL_GPIO_Init+0x300>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	43db      	mvns	r3, r3
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4013      	ands	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <HAL_GPIO_Init+0x300>)
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3301      	adds	r3, #1
 80047f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	f47f ae9d 	bne.w	8004544 <HAL_GPIO_Init+0x10>
  }
}
 800480a:	bf00      	nop
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	40021000 	.word	0x40021000
 800481c:	40010000 	.word	0x40010000
 8004820:	48000400 	.word	0x48000400
 8004824:	48000800 	.word	0x48000800
 8004828:	48000c00 	.word	0x48000c00
 800482c:	48001000 	.word	0x48001000
 8004830:	48001400 	.word	0x48001400
 8004834:	40010400 	.word	0x40010400

08004838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	807b      	strh	r3, [r7, #2]
 8004844:	4613      	mov	r3, r2
 8004846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004848:	787b      	ldrb	r3, [r7, #1]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800484e:	887a      	ldrh	r2, [r7, #2]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004854:	e002      	b.n	800485c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d141      	bne.n	80048fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004876:	4b4b      	ldr	r3, [pc, #300]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800487e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004882:	d131      	bne.n	80048e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004884:	4b47      	ldr	r3, [pc, #284]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800488a:	4a46      	ldr	r2, [pc, #280]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004890:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004894:	4b43      	ldr	r3, [pc, #268]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800489c:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800489e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048a4:	4b40      	ldr	r3, [pc, #256]	; (80049a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2232      	movs	r2, #50	; 0x32
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	4a3f      	ldr	r2, [pc, #252]	; (80049ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048b0:	fba2 2303 	umull	r2, r3, r2, r3
 80048b4:	0c9b      	lsrs	r3, r3, #18
 80048b6:	3301      	adds	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ba:	e002      	b.n	80048c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3b01      	subs	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048c2:	4b38      	ldr	r3, [pc, #224]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ce:	d102      	bne.n	80048d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1f2      	bne.n	80048bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048d6:	4b33      	ldr	r3, [pc, #204]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e2:	d158      	bne.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e057      	b.n	8004998 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048e8:	4b2e      	ldr	r3, [pc, #184]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048ee:	4a2d      	ldr	r2, [pc, #180]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048f8:	e04d      	b.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004900:	d141      	bne.n	8004986 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004902:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800490a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800490e:	d131      	bne.n	8004974 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004916:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800491c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004920:	4b20      	ldr	r3, [pc, #128]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004928:	4a1e      	ldr	r2, [pc, #120]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800492a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800492e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004930:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2232      	movs	r2, #50	; 0x32
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800493c:	fba2 2303 	umull	r2, r3, r2, r3
 8004940:	0c9b      	lsrs	r3, r3, #18
 8004942:	3301      	adds	r3, #1
 8004944:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004946:	e002      	b.n	800494e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3b01      	subs	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800494e:	4b15      	ldr	r3, [pc, #84]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800495a:	d102      	bne.n	8004962 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f2      	bne.n	8004948 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004962:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496e:	d112      	bne.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e011      	b.n	8004998 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004976:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800497a:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800497c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004980:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004984:	e007      	b.n	8004996 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004986:	4b07      	ldr	r3, [pc, #28]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800498e:	4a05      	ldr	r2, [pc, #20]	; (80049a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004990:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004994:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr
 80049a4:	40007000 	.word	0x40007000
 80049a8:	20000440 	.word	0x20000440
 80049ac:	431bde83 	.word	0x431bde83

080049b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e306      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d075      	beq.n	8004aba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ce:	4b97      	ldr	r3, [pc, #604]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d8:	4b94      	ldr	r3, [pc, #592]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	2b0c      	cmp	r3, #12
 80049e6:	d102      	bne.n	80049ee <HAL_RCC_OscConfig+0x3e>
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d002      	beq.n	80049f4 <HAL_RCC_OscConfig+0x44>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d10b      	bne.n	8004a0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f4:	4b8d      	ldr	r3, [pc, #564]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d05b      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x108>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d157      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e2e1      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d106      	bne.n	8004a24 <HAL_RCC_OscConfig+0x74>
 8004a16:	4b85      	ldr	r3, [pc, #532]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a84      	ldr	r2, [pc, #528]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	e01d      	b.n	8004a60 <HAL_RCC_OscConfig+0xb0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x98>
 8004a2e:	4b7f      	ldr	r3, [pc, #508]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7e      	ldr	r2, [pc, #504]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	4b7c      	ldr	r3, [pc, #496]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a7b      	ldr	r2, [pc, #492]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e00b      	b.n	8004a60 <HAL_RCC_OscConfig+0xb0>
 8004a48:	4b78      	ldr	r3, [pc, #480]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a77      	ldr	r2, [pc, #476]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b75      	ldr	r3, [pc, #468]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a74      	ldr	r2, [pc, #464]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d013      	beq.n	8004a90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fd fdc4 	bl	80025f4 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a70:	f7fd fdc0 	bl	80025f4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e2a6      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a82:	4b6a      	ldr	r3, [pc, #424]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0xc0>
 8004a8e:	e014      	b.n	8004aba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a90:	f7fd fdb0 	bl	80025f4 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a98:	f7fd fdac 	bl	80025f4 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b64      	cmp	r3, #100	; 0x64
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e292      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aaa:	4b60      	ldr	r3, [pc, #384]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1f0      	bne.n	8004a98 <HAL_RCC_OscConfig+0xe8>
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d075      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac6:	4b59      	ldr	r3, [pc, #356]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad0:	4b56      	ldr	r3, [pc, #344]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0303 	and.w	r3, r3, #3
 8004ad8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b0c      	cmp	r3, #12
 8004ade:	d102      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x136>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d002      	beq.n	8004aec <HAL_RCC_OscConfig+0x13c>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d11f      	bne.n	8004b2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004aec:	4b4f      	ldr	r3, [pc, #316]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_OscConfig+0x154>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e265      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b04:	4b49      	ldr	r3, [pc, #292]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	061b      	lsls	r3, r3, #24
 8004b12:	4946      	ldr	r1, [pc, #280]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b18:	4b45      	ldr	r3, [pc, #276]	; (8004c30 <HAL_RCC_OscConfig+0x280>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fd fd1d 	bl	800255c <HAL_InitTick>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d043      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e251      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d023      	beq.n	8004b7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b34:	4b3d      	ldr	r3, [pc, #244]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a3c      	ldr	r2, [pc, #240]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7fd fd58 	bl	80025f4 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b48:	f7fd fd54 	bl	80025f4 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e23a      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5a:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b66:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	492d      	ldr	r1, [pc, #180]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	604b      	str	r3, [r1, #4]
 8004b7a:	e01a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a2a      	ldr	r2, [pc, #168]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004b82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b88:	f7fd fd34 	bl	80025f4 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b90:	f7fd fd30 	bl	80025f4 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e216      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba2:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1f0      	bne.n	8004b90 <HAL_RCC_OscConfig+0x1e0>
 8004bae:	e000      	b.n	8004bb2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d041      	beq.n	8004c42 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc6:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bcc:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd6:	f7fd fd0d 	bl	80025f4 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bde:	f7fd fd09 	bl	80025f4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e1ef      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ef      	beq.n	8004bde <HAL_RCC_OscConfig+0x22e>
 8004bfe:	e020      	b.n	8004c42 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c00:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <HAL_RCC_OscConfig+0x27c>)
 8004c08:	f023 0301 	bic.w	r3, r3, #1
 8004c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fd fcf0 	bl	80025f4 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c16:	e00d      	b.n	8004c34 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c18:	f7fd fcec 	bl	80025f4 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d906      	bls.n	8004c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e1d2      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
 8004c2a:	bf00      	nop
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	20000444 	.word	0x20000444
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c34:	4b8c      	ldr	r3, [pc, #560]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1ea      	bne.n	8004c18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0304 	and.w	r3, r3, #4
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 80a6 	beq.w	8004d9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c50:	2300      	movs	r3, #0
 8004c52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c54:	4b84      	ldr	r3, [pc, #528]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2b4>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <HAL_RCC_OscConfig+0x2b6>
 8004c64:	2300      	movs	r3, #0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00d      	beq.n	8004c86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6a:	4b7f      	ldr	r3, [pc, #508]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6e:	4a7e      	ldr	r2, [pc, #504]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c74:	6593      	str	r3, [r2, #88]	; 0x58
 8004c76:	4b7c      	ldr	r3, [pc, #496]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c82:	2301      	movs	r3, #1
 8004c84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c86:	4b79      	ldr	r3, [pc, #484]	; (8004e6c <HAL_RCC_OscConfig+0x4bc>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d118      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c92:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <HAL_RCC_OscConfig+0x4bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a75      	ldr	r2, [pc, #468]	; (8004e6c <HAL_RCC_OscConfig+0x4bc>)
 8004c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c9e:	f7fd fca9 	bl	80025f4 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca4:	e008      	b.n	8004cb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca6:	f7fd fca5 	bl	80025f4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e18b      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb8:	4b6c      	ldr	r3, [pc, #432]	; (8004e6c <HAL_RCC_OscConfig+0x4bc>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0f0      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d108      	bne.n	8004cde <HAL_RCC_OscConfig+0x32e>
 8004ccc:	4b66      	ldr	r3, [pc, #408]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd2:	4a65      	ldr	r2, [pc, #404]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cdc:	e024      	b.n	8004d28 <HAL_RCC_OscConfig+0x378>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b05      	cmp	r3, #5
 8004ce4:	d110      	bne.n	8004d08 <HAL_RCC_OscConfig+0x358>
 8004ce6:	4b60      	ldr	r3, [pc, #384]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	4a5e      	ldr	r2, [pc, #376]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004cee:	f043 0304 	orr.w	r3, r3, #4
 8004cf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cf6:	4b5c      	ldr	r3, [pc, #368]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	4a5a      	ldr	r2, [pc, #360]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d06:	e00f      	b.n	8004d28 <HAL_RCC_OscConfig+0x378>
 8004d08:	4b57      	ldr	r3, [pc, #348]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	4a56      	ldr	r2, [pc, #344]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d18:	4b53      	ldr	r3, [pc, #332]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	4a52      	ldr	r2, [pc, #328]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004d20:	f023 0304 	bic.w	r3, r3, #4
 8004d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d016      	beq.n	8004d5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d30:	f7fd fc60 	bl	80025f4 <HAL_GetTick>
 8004d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d38:	f7fd fc5c 	bl	80025f4 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e140      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4e:	4b46      	ldr	r3, [pc, #280]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0ed      	beq.n	8004d38 <HAL_RCC_OscConfig+0x388>
 8004d5c:	e015      	b.n	8004d8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5e:	f7fd fc49 	bl	80025f4 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d66:	f7fd fc45 	bl	80025f4 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e129      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d7c:	4b3a      	ldr	r3, [pc, #232]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1ed      	bne.n	8004d66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d8a:	7ffb      	ldrb	r3, [r7, #31]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d90:	4b35      	ldr	r3, [pc, #212]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d94:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0320 	and.w	r3, r3, #32
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d03c      	beq.n	8004e22 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01c      	beq.n	8004dea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004db0:	4b2d      	ldr	r3, [pc, #180]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004db6:	4a2c      	ldr	r2, [pc, #176]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004db8:	f043 0301 	orr.w	r3, r3, #1
 8004dbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc0:	f7fd fc18 	bl	80025f4 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dc6:	e008      	b.n	8004dda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dc8:	f7fd fc14 	bl	80025f4 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d901      	bls.n	8004dda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e0fa      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dda:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ef      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x418>
 8004de8:	e01b      	b.n	8004e22 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dea:	4b1f      	ldr	r3, [pc, #124]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004df0:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004df2:	f023 0301 	bic.w	r3, r3, #1
 8004df6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfa:	f7fd fbfb 	bl	80025f4 <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e02:	f7fd fbf7 	bl	80025f4 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0dd      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e14:	4b14      	ldr	r3, [pc, #80]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1ef      	bne.n	8004e02 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80d1 	beq.w	8004fce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	f000 808b 	beq.w	8004f50 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d15e      	bne.n	8004f00 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <HAL_RCC_OscConfig+0x4b8>)
 8004e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4e:	f7fd fbd1 	bl	80025f4 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e54:	e00c      	b.n	8004e70 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e56:	f7fd fbcd 	bl	80025f4 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d905      	bls.n	8004e70 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0b3      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
 8004e68:	40021000 	.word	0x40021000
 8004e6c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e70:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1ec      	bne.n	8004e56 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e7c:	4b56      	ldr	r3, [pc, #344]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	4b56      	ldr	r3, [pc, #344]	; (8004fdc <HAL_RCC_OscConfig+0x62c>)
 8004e82:	4013      	ands	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6a11      	ldr	r1, [r2, #32]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e8c:	3a01      	subs	r2, #1
 8004e8e:	0112      	lsls	r2, r2, #4
 8004e90:	4311      	orrs	r1, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e96:	0212      	lsls	r2, r2, #8
 8004e98:	4311      	orrs	r1, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e9e:	0852      	lsrs	r2, r2, #1
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	0552      	lsls	r2, r2, #21
 8004ea4:	4311      	orrs	r1, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eaa:	0852      	lsrs	r2, r2, #1
 8004eac:	3a01      	subs	r2, #1
 8004eae:	0652      	lsls	r2, r2, #25
 8004eb0:	4311      	orrs	r1, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004eb6:	06d2      	lsls	r2, r2, #27
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	4947      	ldr	r1, [pc, #284]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec0:	4b45      	ldr	r3, [pc, #276]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a44      	ldr	r2, [pc, #272]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ecc:	4b42      	ldr	r3, [pc, #264]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4a41      	ldr	r2, [pc, #260]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ed6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fd fb8c 	bl	80025f4 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fd fb88 	bl	80025f4 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e06e      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef2:	4b39      	ldr	r3, [pc, #228]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x530>
 8004efe:	e066      	b.n	8004fce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f00:	4b35      	ldr	r3, [pc, #212]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a34      	ldr	r2, [pc, #208]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f0a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f0c:	4b32      	ldr	r3, [pc, #200]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a31      	ldr	r2, [pc, #196]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f18:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a2e      	ldr	r2, [pc, #184]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004f1e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fd fb64 	bl	80025f4 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f30:	f7fd fb60 	bl	80025f4 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e046      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f42:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x580>
 8004f4e:	e03e      	b.n	8004fce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d101      	bne.n	8004f5c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e039      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <HAL_RCC_OscConfig+0x628>)
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f003 0203 	and.w	r2, r3, #3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d12c      	bne.n	8004fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d123      	bne.n	8004fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d11b      	bne.n	8004fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d113      	bne.n	8004fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d109      	bne.n	8004fca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc0:	085b      	lsrs	r3, r3, #1
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d001      	beq.n	8004fce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3720      	adds	r7, #32
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	019f800c 	.word	0x019f800c

08004fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e11e      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b91      	ldr	r3, [pc, #580]	; (8005240 <HAL_RCC_ClockConfig+0x260>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d910      	bls.n	8005028 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b8e      	ldr	r3, [pc, #568]	; (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 020f 	bic.w	r2, r3, #15
 800500e:	498c      	ldr	r1, [pc, #560]	; (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b8a      	ldr	r3, [pc, #552]	; (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e106      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d073      	beq.n	800511c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b03      	cmp	r3, #3
 800503a:	d129      	bne.n	8005090 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503c:	4b81      	ldr	r3, [pc, #516]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0f4      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800504c:	f000 f99e 	bl	800538c <RCC_GetSysClockFreqFromPLLSource>
 8005050:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4a7c      	ldr	r2, [pc, #496]	; (8005248 <HAL_RCC_ClockConfig+0x268>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d93f      	bls.n	80050da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800505a:	4b7a      	ldr	r3, [pc, #488]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800506e:	2b00      	cmp	r3, #0
 8005070:	d033      	beq.n	80050da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005076:	2b00      	cmp	r3, #0
 8005078:	d12f      	bne.n	80050da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800507a:	4b72      	ldr	r3, [pc, #456]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005082:	4a70      	ldr	r2, [pc, #448]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005088:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e024      	b.n	80050da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d107      	bne.n	80050a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005098:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d109      	bne.n	80050b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0c6      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a8:	4b66      	ldr	r3, [pc, #408]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e0be      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050b8:	f000 f8ce 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 80050bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4a61      	ldr	r2, [pc, #388]	; (8005248 <HAL_RCC_ClockConfig+0x268>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d909      	bls.n	80050da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050c6:	4b5f      	ldr	r3, [pc, #380]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050ce:	4a5d      	ldr	r2, [pc, #372]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050d6:	2380      	movs	r3, #128	; 0x80
 80050d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050da:	4b5a      	ldr	r3, [pc, #360]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 0203 	bic.w	r2, r3, #3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	4957      	ldr	r1, [pc, #348]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ec:	f7fd fa82 	bl	80025f4 <HAL_GetTick>
 80050f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050f2:	e00a      	b.n	800510a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050f4:	f7fd fa7e 	bl	80025f4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005102:	4293      	cmp	r3, r2
 8005104:	d901      	bls.n	800510a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e095      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	4b4e      	ldr	r3, [pc, #312]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f003 020c 	and.w	r2, r3, #12
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	429a      	cmp	r2, r3
 800511a:	d1eb      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d023      	beq.n	8005170 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005134:	4b43      	ldr	r3, [pc, #268]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	4a42      	ldr	r2, [pc, #264]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800513a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800513e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800514c:	4b3d      	ldr	r3, [pc, #244]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005154:	4a3b      	ldr	r2, [pc, #236]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005156:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800515a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800515c:	4b39      	ldr	r3, [pc, #228]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	4936      	ldr	r1, [pc, #216]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
 800516e:	e008      	b.n	8005182 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2b80      	cmp	r3, #128	; 0x80
 8005174:	d105      	bne.n	8005182 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005176:	4b33      	ldr	r3, [pc, #204]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	4a32      	ldr	r2, [pc, #200]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 800517c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005180:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005182:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d21d      	bcs.n	80051cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005190:	4b2b      	ldr	r3, [pc, #172]	; (8005240 <HAL_RCC_ClockConfig+0x260>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 020f 	bic.w	r2, r3, #15
 8005198:	4929      	ldr	r1, [pc, #164]	; (8005240 <HAL_RCC_ClockConfig+0x260>)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051a0:	f7fd fa28 	bl	80025f4 <HAL_GetTick>
 80051a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	e00a      	b.n	80051be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a8:	f7fd fa24 	bl	80025f4 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e03b      	b.n	8005236 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b20      	ldr	r3, [pc, #128]	; (8005240 <HAL_RCC_ClockConfig+0x260>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1ed      	bne.n	80051a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d8:	4b1a      	ldr	r3, [pc, #104]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4917      	ldr	r1, [pc, #92]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051f6:	4b13      	ldr	r3, [pc, #76]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	490f      	ldr	r1, [pc, #60]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005206:	4313      	orrs	r3, r2
 8005208:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800520a:	f000 f825 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 800520e:	4602      	mov	r2, r0
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <HAL_RCC_ClockConfig+0x264>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	f003 030f 	and.w	r3, r3, #15
 800521a:	490c      	ldr	r1, [pc, #48]	; (800524c <HAL_RCC_ClockConfig+0x26c>)
 800521c:	5ccb      	ldrb	r3, [r1, r3]
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	fa22 f303 	lsr.w	r3, r2, r3
 8005226:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <HAL_RCC_ClockConfig+0x270>)
 8005228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800522a:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <HAL_RCC_ClockConfig+0x274>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f7fd f994 	bl	800255c <HAL_InitTick>
 8005234:	4603      	mov	r3, r0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	40022000 	.word	0x40022000
 8005244:	40021000 	.word	0x40021000
 8005248:	04c4b400 	.word	0x04c4b400
 800524c:	08008e88 	.word	0x08008e88
 8005250:	20000440 	.word	0x20000440
 8005254:	20000444 	.word	0x20000444

08005258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800525e:	4b2c      	ldr	r3, [pc, #176]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f003 030c 	and.w	r3, r3, #12
 8005266:	2b04      	cmp	r3, #4
 8005268:	d102      	bne.n	8005270 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800526a:	4b2a      	ldr	r3, [pc, #168]	; (8005314 <HAL_RCC_GetSysClockFreq+0xbc>)
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	e047      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005270:	4b27      	ldr	r3, [pc, #156]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b08      	cmp	r3, #8
 800527a:	d102      	bne.n	8005282 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800527c:	4b26      	ldr	r3, [pc, #152]	; (8005318 <HAL_RCC_GetSysClockFreq+0xc0>)
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	e03e      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005282:	4b23      	ldr	r3, [pc, #140]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 030c 	and.w	r3, r3, #12
 800528a:	2b0c      	cmp	r3, #12
 800528c:	d136      	bne.n	80052fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800528e:	4b20      	ldr	r3, [pc, #128]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005298:	4b1d      	ldr	r3, [pc, #116]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3301      	adds	r3, #1
 80052a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b03      	cmp	r3, #3
 80052aa:	d10c      	bne.n	80052c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052ac:	4a1a      	ldr	r2, [pc, #104]	; (8005318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	4a16      	ldr	r2, [pc, #88]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b6:	68d2      	ldr	r2, [r2, #12]
 80052b8:	0a12      	lsrs	r2, r2, #8
 80052ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052be:	fb02 f303 	mul.w	r3, r2, r3
 80052c2:	617b      	str	r3, [r7, #20]
      break;
 80052c4:	e00c      	b.n	80052e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052c6:	4a13      	ldr	r2, [pc, #76]	; (8005314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ce:	4a10      	ldr	r2, [pc, #64]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052d0:	68d2      	ldr	r2, [r2, #12]
 80052d2:	0a12      	lsrs	r2, r2, #8
 80052d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80052d8:	fb02 f303 	mul.w	r3, r2, r3
 80052dc:	617b      	str	r3, [r7, #20]
      break;
 80052de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	0e5b      	lsrs	r3, r3, #25
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	3301      	adds	r3, #1
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	613b      	str	r3, [r7, #16]
 80052fa:	e001      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005300:	693b      	ldr	r3, [r7, #16]
}
 8005302:	4618      	mov	r0, r3
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40021000 	.word	0x40021000
 8005314:	00f42400 	.word	0x00f42400
 8005318:	007a1200 	.word	0x007a1200

0800531c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800531c:	b480      	push	{r7}
 800531e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005320:	4b03      	ldr	r3, [pc, #12]	; (8005330 <HAL_RCC_GetHCLKFreq+0x14>)
 8005322:	681b      	ldr	r3, [r3, #0]
}
 8005324:	4618      	mov	r0, r3
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000440 	.word	0x20000440

08005334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005338:	f7ff fff0 	bl	800531c <HAL_RCC_GetHCLKFreq>
 800533c:	4602      	mov	r2, r0
 800533e:	4b06      	ldr	r3, [pc, #24]	; (8005358 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	0a1b      	lsrs	r3, r3, #8
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	4904      	ldr	r1, [pc, #16]	; (800535c <HAL_RCC_GetPCLK1Freq+0x28>)
 800534a:	5ccb      	ldrb	r3, [r1, r3]
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40021000 	.word	0x40021000
 800535c:	08008e98 	.word	0x08008e98

08005360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005364:	f7ff ffda 	bl	800531c <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <HAL_RCC_GetPCLK2Freq+0x24>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0adb      	lsrs	r3, r3, #11
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4904      	ldr	r1, [pc, #16]	; (8005388 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	f003 031f 	and.w	r3, r3, #31
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40021000 	.word	0x40021000
 8005388:	08008e98 	.word	0x08008e98

0800538c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005392:	4b1e      	ldr	r3, [pc, #120]	; (800540c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800539c:	4b1b      	ldr	r3, [pc, #108]	; (800540c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d10c      	bne.n	80053ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053b0:	4a17      	ldr	r2, [pc, #92]	; (8005410 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	4a14      	ldr	r2, [pc, #80]	; (800540c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053ba:	68d2      	ldr	r2, [r2, #12]
 80053bc:	0a12      	lsrs	r2, r2, #8
 80053be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053c2:	fb02 f303 	mul.w	r3, r2, r3
 80053c6:	617b      	str	r3, [r7, #20]
    break;
 80053c8:	e00c      	b.n	80053e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053ca:	4a12      	ldr	r2, [pc, #72]	; (8005414 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d2:	4a0e      	ldr	r2, [pc, #56]	; (800540c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053d4:	68d2      	ldr	r2, [r2, #12]
 80053d6:	0a12      	lsrs	r2, r2, #8
 80053d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053dc:	fb02 f303 	mul.w	r3, r2, r3
 80053e0:	617b      	str	r3, [r7, #20]
    break;
 80053e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	0e5b      	lsrs	r3, r3, #25
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	3301      	adds	r3, #1
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053fe:	687b      	ldr	r3, [r7, #4]
}
 8005400:	4618      	mov	r0, r3
 8005402:	371c      	adds	r7, #28
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	40021000 	.word	0x40021000
 8005410:	007a1200 	.word	0x007a1200
 8005414:	00f42400 	.word	0x00f42400

08005418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005420:	2300      	movs	r3, #0
 8005422:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005424:	2300      	movs	r3, #0
 8005426:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 8098 	beq.w	8005566 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005436:	2300      	movs	r3, #0
 8005438:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800543a:	4b43      	ldr	r3, [pc, #268]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10d      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005446:	4b40      	ldr	r3, [pc, #256]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800544a:	4a3f      	ldr	r2, [pc, #252]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800544c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005450:	6593      	str	r3, [r2, #88]	; 0x58
 8005452:	4b3d      	ldr	r3, [pc, #244]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545a:	60bb      	str	r3, [r7, #8]
 800545c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800545e:	2301      	movs	r3, #1
 8005460:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005462:	4b3a      	ldr	r3, [pc, #232]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a39      	ldr	r2, [pc, #228]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800546e:	f7fd f8c1 	bl	80025f4 <HAL_GetTick>
 8005472:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005474:	e009      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005476:	f7fd f8bd 	bl	80025f4 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d902      	bls.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	74fb      	strb	r3, [r7, #19]
        break;
 8005488:	e005      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800548a:	4b30      	ldr	r3, [pc, #192]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0ef      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005496:	7cfb      	ldrb	r3, [r7, #19]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d159      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800549c:	4b2a      	ldr	r3, [pc, #168]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d01e      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d019      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054c4:	4b20      	ldr	r3, [pc, #128]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054d4:	4b1c      	ldr	r3, [pc, #112]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054e4:	4a18      	ldr	r2, [pc, #96]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d016      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fd f87d 	bl	80025f4 <HAL_GetTick>
 80054fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054fc:	e00b      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fe:	f7fd f879 	bl	80025f4 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f241 3288 	movw	r2, #5000	; 0x1388
 800550c:	4293      	cmp	r3, r2
 800550e:	d902      	bls.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	74fb      	strb	r3, [r7, #19]
            break;
 8005514:	e006      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0ec      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800552a:	4b07      	ldr	r3, [pc, #28]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005538:	4903      	ldr	r1, [pc, #12]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005540:	e008      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005542:	7cfb      	ldrb	r3, [r7, #19]
 8005544:	74bb      	strb	r3, [r7, #18]
 8005546:	e005      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005548:	40021000 	.word	0x40021000
 800554c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005550:	7cfb      	ldrb	r3, [r7, #19]
 8005552:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005554:	7c7b      	ldrb	r3, [r7, #17]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d105      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800555a:	4ba7      	ldr	r3, [pc, #668]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555e:	4aa6      	ldr	r2, [pc, #664]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005564:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005572:	4ba1      	ldr	r3, [pc, #644]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005578:	f023 0203 	bic.w	r2, r3, #3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	499d      	ldr	r1, [pc, #628]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005582:	4313      	orrs	r3, r2
 8005584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0302 	and.w	r3, r3, #2
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005594:	4b98      	ldr	r3, [pc, #608]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f023 020c 	bic.w	r2, r3, #12
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	4995      	ldr	r1, [pc, #596]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055b6:	4b90      	ldr	r3, [pc, #576]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	498c      	ldr	r1, [pc, #560]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00a      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055d8:	4b87      	ldr	r3, [pc, #540]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	4984      	ldr	r1, [pc, #528]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055fa:	4b7f      	ldr	r3, [pc, #508]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	497b      	ldr	r1, [pc, #492]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00a      	beq.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800561c:	4b76      	ldr	r3, [pc, #472]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	4973      	ldr	r1, [pc, #460]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00a      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800563e:	4b6e      	ldr	r3, [pc, #440]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005644:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	496a      	ldr	r1, [pc, #424]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00a      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005660:	4b65      	ldr	r3, [pc, #404]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005666:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	4962      	ldr	r1, [pc, #392]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005670:	4313      	orrs	r3, r2
 8005672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00a      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005682:	4b5d      	ldr	r3, [pc, #372]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005688:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	4959      	ldr	r1, [pc, #356]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056a4:	4b54      	ldr	r3, [pc, #336]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	4951      	ldr	r1, [pc, #324]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d015      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056c6:	4b4c      	ldr	r3, [pc, #304]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	4948      	ldr	r1, [pc, #288]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e4:	d105      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e6:	4b44      	ldr	r3, [pc, #272]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	4a43      	ldr	r2, [pc, #268]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056f0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d015      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056fe:	4b3e      	ldr	r3, [pc, #248]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005704:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570c:	493a      	ldr	r1, [pc, #232]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800571c:	d105      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800571e:	4b36      	ldr	r3, [pc, #216]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	4a35      	ldr	r2, [pc, #212]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005728:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d015      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005736:	4b30      	ldr	r3, [pc, #192]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	492c      	ldr	r1, [pc, #176]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005746:	4313      	orrs	r3, r2
 8005748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005754:	d105      	bne.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005756:	4b28      	ldr	r3, [pc, #160]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	4a27      	ldr	r2, [pc, #156]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005760:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d015      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800576e:	4b22      	ldr	r3, [pc, #136]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	491e      	ldr	r1, [pc, #120]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800578c:	d105      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800578e:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	4a19      	ldr	r2, [pc, #100]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005798:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d015      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a6:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	4910      	ldr	r1, [pc, #64]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c4:	d105      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	4a0b      	ldr	r2, [pc, #44]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d018      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	4902      	ldr	r1, [pc, #8]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	e001      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057f8:	40021000 	.word	0x40021000
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005802:	d105      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005804:	4b21      	ldr	r3, [pc, #132]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4a20      	ldr	r2, [pc, #128]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800580a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d015      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800581c:	4b1b      	ldr	r3, [pc, #108]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800581e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005822:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582a:	4918      	ldr	r1, [pc, #96]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800582c:	4313      	orrs	r3, r2
 800582e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583a:	d105      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800583c:	4b13      	ldr	r3, [pc, #76]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	4a12      	ldr	r2, [pc, #72]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005846:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d015      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005854:	4b0d      	ldr	r3, [pc, #52]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800585a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005862:	490a      	ldr	r1, [pc, #40]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800586e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005872:	d105      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800587a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800587e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005880:	7cbb      	ldrb	r3, [r7, #18]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3718      	adds	r7, #24
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	40021000 	.word	0x40021000

08005890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e049      	b.n	8005936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7fc fd52 	bl	8002360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 f9a2 	bl	8005c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d001      	beq.n	8005958 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e047      	b.n	80059e8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a23      	ldr	r2, [pc, #140]	; (80059f4 <HAL_TIM_Base_Start+0xb4>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d01d      	beq.n	80059a6 <HAL_TIM_Base_Start+0x66>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005972:	d018      	beq.n	80059a6 <HAL_TIM_Base_Start+0x66>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <HAL_TIM_Base_Start+0xb8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d013      	beq.n	80059a6 <HAL_TIM_Base_Start+0x66>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <HAL_TIM_Base_Start+0xbc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00e      	beq.n	80059a6 <HAL_TIM_Base_Start+0x66>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_TIM_Base_Start+0xc0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d009      	beq.n	80059a6 <HAL_TIM_Base_Start+0x66>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1b      	ldr	r2, [pc, #108]	; (8005a04 <HAL_TIM_Base_Start+0xc4>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d004      	beq.n	80059a6 <HAL_TIM_Base_Start+0x66>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <HAL_TIM_Base_Start+0xc8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d115      	bne.n	80059d2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	4b17      	ldr	r3, [pc, #92]	; (8005a0c <HAL_TIM_Base_Start+0xcc>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2b06      	cmp	r3, #6
 80059b6:	d015      	beq.n	80059e4 <HAL_TIM_Base_Start+0xa4>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059be:	d011      	beq.n	80059e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d0:	e008      	b.n	80059e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0201 	orr.w	r2, r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
 80059e2:	e000      	b.n	80059e6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40012c00 	.word	0x40012c00
 80059f8:	40000400 	.word	0x40000400
 80059fc:	40000800 	.word	0x40000800
 8005a00:	40013400 	.word	0x40013400
 8005a04:	40014000 	.word	0x40014000
 8005a08:	40015000 	.word	0x40015000
 8005a0c:	00010007 	.word	0x00010007

08005a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d101      	bne.n	8005a2c <HAL_TIM_ConfigClockSource+0x1c>
 8005a28:	2302      	movs	r3, #2
 8005a2a:	e0e6      	b.n	8005bfa <HAL_TIM_ConfigClockSource+0x1ea>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005a4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a67      	ldr	r2, [pc, #412]	; (8005c04 <HAL_TIM_ConfigClockSource+0x1f4>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	f000 80b1 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005a6c:	4a65      	ldr	r2, [pc, #404]	; (8005c04 <HAL_TIM_ConfigClockSource+0x1f4>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	f200 80b6 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005a74:	4a64      	ldr	r2, [pc, #400]	; (8005c08 <HAL_TIM_ConfigClockSource+0x1f8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	f000 80a9 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005a7c:	4a62      	ldr	r2, [pc, #392]	; (8005c08 <HAL_TIM_ConfigClockSource+0x1f8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	f200 80ae 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005a84:	4a61      	ldr	r2, [pc, #388]	; (8005c0c <HAL_TIM_ConfigClockSource+0x1fc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	f000 80a1 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005a8c:	4a5f      	ldr	r2, [pc, #380]	; (8005c0c <HAL_TIM_ConfigClockSource+0x1fc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	f200 80a6 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005a94:	4a5e      	ldr	r2, [pc, #376]	; (8005c10 <HAL_TIM_ConfigClockSource+0x200>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	f000 8099 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005a9c:	4a5c      	ldr	r2, [pc, #368]	; (8005c10 <HAL_TIM_ConfigClockSource+0x200>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	f200 809e 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005aa4:	4a5b      	ldr	r2, [pc, #364]	; (8005c14 <HAL_TIM_ConfigClockSource+0x204>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	f000 8091 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005aac:	4a59      	ldr	r2, [pc, #356]	; (8005c14 <HAL_TIM_ConfigClockSource+0x204>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	f200 8096 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005ab4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ab8:	f000 8089 	beq.w	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005abc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005ac0:	f200 808e 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac8:	d03e      	beq.n	8005b48 <HAL_TIM_ConfigClockSource+0x138>
 8005aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ace:	f200 8087 	bhi.w	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad6:	f000 8086 	beq.w	8005be6 <HAL_TIM_ConfigClockSource+0x1d6>
 8005ada:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ade:	d87f      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005ae0:	2b70      	cmp	r3, #112	; 0x70
 8005ae2:	d01a      	beq.n	8005b1a <HAL_TIM_ConfigClockSource+0x10a>
 8005ae4:	2b70      	cmp	r3, #112	; 0x70
 8005ae6:	d87b      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005ae8:	2b60      	cmp	r3, #96	; 0x60
 8005aea:	d050      	beq.n	8005b8e <HAL_TIM_ConfigClockSource+0x17e>
 8005aec:	2b60      	cmp	r3, #96	; 0x60
 8005aee:	d877      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005af0:	2b50      	cmp	r3, #80	; 0x50
 8005af2:	d03c      	beq.n	8005b6e <HAL_TIM_ConfigClockSource+0x15e>
 8005af4:	2b50      	cmp	r3, #80	; 0x50
 8005af6:	d873      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d058      	beq.n	8005bae <HAL_TIM_ConfigClockSource+0x19e>
 8005afc:	2b40      	cmp	r3, #64	; 0x40
 8005afe:	d86f      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005b00:	2b30      	cmp	r3, #48	; 0x30
 8005b02:	d064      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005b04:	2b30      	cmp	r3, #48	; 0x30
 8005b06:	d86b      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d060      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d867      	bhi.n	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d05c      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	d05a      	beq.n	8005bce <HAL_TIM_ConfigClockSource+0x1be>
 8005b18:	e062      	b.n	8005be0 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6899      	ldr	r1, [r3, #8]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	f000 f98f 	bl	8005e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	609a      	str	r2, [r3, #8]
      break;
 8005b46:	e04f      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6818      	ldr	r0, [r3, #0]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	6899      	ldr	r1, [r3, #8]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	685a      	ldr	r2, [r3, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f000 f978 	bl	8005e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689a      	ldr	r2, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b6a:	609a      	str	r2, [r3, #8]
      break;
 8005b6c:	e03c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6818      	ldr	r0, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6859      	ldr	r1, [r3, #4]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f000 f8ea 	bl	8005d54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2150      	movs	r1, #80	; 0x50
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f943 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005b8c:	e02c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6818      	ldr	r0, [r3, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	6859      	ldr	r1, [r3, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f000 f909 	bl	8005db2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2160      	movs	r1, #96	; 0x60
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 f933 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005bac:	e01c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	6859      	ldr	r1, [r3, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	f000 f8ca 	bl	8005d54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2140      	movs	r1, #64	; 0x40
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 f923 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005bcc:	e00c      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f000 f91a 	bl	8005e12 <TIM_ITRx_SetConfig>
      break;
 8005bde:	e003      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	73fb      	strb	r3, [r7, #15]
      break;
 8005be4:	e000      	b.n	8005be8 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8005be6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	00100070 	.word	0x00100070
 8005c08:	00100050 	.word	0x00100050
 8005c0c:	00100040 	.word	0x00100040
 8005c10:	00100030 	.word	0x00100030
 8005c14:	00100020 	.word	0x00100020

08005c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a42      	ldr	r2, [pc, #264]	; (8005d34 <TIM_Base_SetConfig+0x11c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d013      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c36:	d00f      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a3f      	ldr	r2, [pc, #252]	; (8005d38 <TIM_Base_SetConfig+0x120>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a3e      	ldr	r2, [pc, #248]	; (8005d3c <TIM_Base_SetConfig+0x124>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d007      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a3d      	ldr	r2, [pc, #244]	; (8005d40 <TIM_Base_SetConfig+0x128>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d003      	beq.n	8005c58 <TIM_Base_SetConfig+0x40>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a3c      	ldr	r2, [pc, #240]	; (8005d44 <TIM_Base_SetConfig+0x12c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d108      	bne.n	8005c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a31      	ldr	r2, [pc, #196]	; (8005d34 <TIM_Base_SetConfig+0x11c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d01f      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c78:	d01b      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a2e      	ldr	r2, [pc, #184]	; (8005d38 <TIM_Base_SetConfig+0x120>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d017      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a2d      	ldr	r2, [pc, #180]	; (8005d3c <TIM_Base_SetConfig+0x124>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4a2c      	ldr	r2, [pc, #176]	; (8005d40 <TIM_Base_SetConfig+0x128>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00f      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4a2c      	ldr	r2, [pc, #176]	; (8005d48 <TIM_Base_SetConfig+0x130>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00b      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a2b      	ldr	r2, [pc, #172]	; (8005d4c <TIM_Base_SetConfig+0x134>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d007      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2a      	ldr	r2, [pc, #168]	; (8005d50 <TIM_Base_SetConfig+0x138>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d003      	beq.n	8005cb2 <TIM_Base_SetConfig+0x9a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	4a25      	ldr	r2, [pc, #148]	; (8005d44 <TIM_Base_SetConfig+0x12c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d108      	bne.n	8005cc4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <TIM_Base_SetConfig+0x11c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d013      	beq.n	8005d18 <TIM_Base_SetConfig+0x100>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a13      	ldr	r2, [pc, #76]	; (8005d40 <TIM_Base_SetConfig+0x128>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00f      	beq.n	8005d18 <TIM_Base_SetConfig+0x100>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <TIM_Base_SetConfig+0x130>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d00b      	beq.n	8005d18 <TIM_Base_SetConfig+0x100>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a12      	ldr	r2, [pc, #72]	; (8005d4c <TIM_Base_SetConfig+0x134>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d007      	beq.n	8005d18 <TIM_Base_SetConfig+0x100>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a11      	ldr	r2, [pc, #68]	; (8005d50 <TIM_Base_SetConfig+0x138>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_Base_SetConfig+0x100>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <TIM_Base_SetConfig+0x12c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d103      	bne.n	8005d20 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	615a      	str	r2, [r3, #20]
}
 8005d26:	bf00      	nop
 8005d28:	3714      	adds	r7, #20
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40000400 	.word	0x40000400
 8005d3c:	40000800 	.word	0x40000800
 8005d40:	40013400 	.word	0x40013400
 8005d44:	40015000 	.word	0x40015000
 8005d48:	40014000 	.word	0x40014000
 8005d4c:	40014400 	.word	0x40014400
 8005d50:	40014800 	.word	0x40014800

08005d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 030a 	bic.w	r3, r3, #10
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	f023 0210 	bic.w	r2, r3, #16
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	031b      	lsls	r3, r3, #12
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	621a      	str	r2, [r3, #32]
}
 8005e06:	bf00      	nop
 8005e08:	371c      	adds	r7, #28
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr

08005e12 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f043 0307 	orr.w	r3, r3, #7
 8005e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	609a      	str	r2, [r3, #8]
}
 8005e40:	bf00      	nop
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
 8005e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	bf00      	nop
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e06f      	b.n	8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a31      	ldr	r2, [pc, #196]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d009      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a30      	ldr	r2, [pc, #192]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d004      	beq.n	8005ee2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a2e      	ldr	r2, [pc, #184]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d108      	bne.n	8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ee8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1e      	ldr	r2, [pc, #120]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d01d      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f24:	d018      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d013      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1a      	ldr	r2, [pc, #104]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00e      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d009      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a16      	ldr	r2, [pc, #88]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d004      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a11      	ldr	r2, [pc, #68]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d10c      	bne.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40013400 	.word	0x40013400
 8005f98:	40015000 	.word	0x40015000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40014000 	.word	0x40014000

08005fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e042      	b.n	8006040 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7fc f9e5 	bl	800239c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2224      	movs	r2, #36	; 0x24
 8005fd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0201 	bic.w	r2, r2, #1
 8005fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f8c2 	bl	8006174 <UART_SetConfig>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e022      	b.n	8006040 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fbb2 	bl	800676c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	689a      	ldr	r2, [r3, #8]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fc39 	bl	80068b0 <UART_CheckIdleState>
 800603e:	4603      	mov	r3, r0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	; 0x28
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800605e:	2b20      	cmp	r3, #32
 8006060:	f040 8083 	bne.w	800616a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_UART_Transmit+0x28>
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e07b      	b.n	800616c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800607a:	2b01      	cmp	r3, #1
 800607c:	d101      	bne.n	8006082 <HAL_UART_Transmit+0x3a>
 800607e:	2302      	movs	r3, #2
 8006080:	e074      	b.n	800616c <HAL_UART_Transmit+0x124>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2221      	movs	r2, #33	; 0x21
 8006096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800609a:	f7fc faab 	bl	80025f4 <HAL_GetTick>
 800609e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	88fa      	ldrh	r2, [r7, #6]
 80060a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060b8:	d108      	bne.n	80060cc <HAL_UART_Transmit+0x84>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	e003      	b.n	80060d4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060d0:	2300      	movs	r3, #0
 80060d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80060dc:	e02c      	b.n	8006138 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2200      	movs	r2, #0
 80060e6:	2180      	movs	r1, #128	; 0x80
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 fc2c 	bl	8006946 <UART_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e039      	b.n	800616c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	461a      	mov	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800610c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	3302      	adds	r3, #2
 8006112:	61bb      	str	r3, [r7, #24]
 8006114:	e007      	b.n	8006126 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	781a      	ldrb	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3301      	adds	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800612c:	b29b      	uxth	r3, r3
 800612e:	3b01      	subs	r3, #1
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1cc      	bne.n	80060de <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2200      	movs	r2, #0
 800614c:	2140      	movs	r1, #64	; 0x40
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fbf9 	bl	8006946 <UART_WaitOnFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d001      	beq.n	800615e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e006      	b.n	800616c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800616a:	2302      	movs	r3, #2
  }
}
 800616c:	4618      	mov	r0, r3
 800616e:	3720      	adds	r7, #32
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006174:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006178:	b08c      	sub	sp, #48	; 0x30
 800617a:	af00      	add	r7, sp, #0
 800617c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800617e:	2300      	movs	r3, #0
 8006180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	431a      	orrs	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	431a      	orrs	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	4313      	orrs	r3, r2
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4baa      	ldr	r3, [pc, #680]	; (800644c <UART_SetConfig+0x2d8>)
 80061a4:	4013      	ands	r3, r2
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	6812      	ldr	r2, [r2, #0]
 80061aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061ac:	430b      	orrs	r3, r1
 80061ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	430a      	orrs	r2, r1
 80061c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a9f      	ldr	r2, [pc, #636]	; (8006450 <UART_SetConfig+0x2dc>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d004      	beq.n	80061e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061dc:	4313      	orrs	r3, r2
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80061ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	6812      	ldr	r2, [r2, #0]
 80061f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061f4:	430b      	orrs	r3, r1
 80061f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	f023 010f 	bic.w	r1, r3, #15
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a90      	ldr	r2, [pc, #576]	; (8006454 <UART_SetConfig+0x2e0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d125      	bne.n	8006264 <UART_SetConfig+0xf0>
 8006218:	4b8f      	ldr	r3, [pc, #572]	; (8006458 <UART_SetConfig+0x2e4>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f003 0303 	and.w	r3, r3, #3
 8006222:	2b03      	cmp	r3, #3
 8006224:	d81a      	bhi.n	800625c <UART_SetConfig+0xe8>
 8006226:	a201      	add	r2, pc, #4	; (adr r2, 800622c <UART_SetConfig+0xb8>)
 8006228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622c:	0800623d 	.word	0x0800623d
 8006230:	0800624d 	.word	0x0800624d
 8006234:	08006245 	.word	0x08006245
 8006238:	08006255 	.word	0x08006255
 800623c:	2301      	movs	r3, #1
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006242:	e116      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006244:	2302      	movs	r3, #2
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624a:	e112      	b.n	8006472 <UART_SetConfig+0x2fe>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006252:	e10e      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800625a:	e10a      	b.n	8006472 <UART_SetConfig+0x2fe>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006262:	e106      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a7c      	ldr	r2, [pc, #496]	; (800645c <UART_SetConfig+0x2e8>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d138      	bne.n	80062e0 <UART_SetConfig+0x16c>
 800626e:	4b7a      	ldr	r3, [pc, #488]	; (8006458 <UART_SetConfig+0x2e4>)
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006274:	f003 030c 	and.w	r3, r3, #12
 8006278:	2b0c      	cmp	r3, #12
 800627a:	d82d      	bhi.n	80062d8 <UART_SetConfig+0x164>
 800627c:	a201      	add	r2, pc, #4	; (adr r2, 8006284 <UART_SetConfig+0x110>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	080062b9 	.word	0x080062b9
 8006288:	080062d9 	.word	0x080062d9
 800628c:	080062d9 	.word	0x080062d9
 8006290:	080062d9 	.word	0x080062d9
 8006294:	080062c9 	.word	0x080062c9
 8006298:	080062d9 	.word	0x080062d9
 800629c:	080062d9 	.word	0x080062d9
 80062a0:	080062d9 	.word	0x080062d9
 80062a4:	080062c1 	.word	0x080062c1
 80062a8:	080062d9 	.word	0x080062d9
 80062ac:	080062d9 	.word	0x080062d9
 80062b0:	080062d9 	.word	0x080062d9
 80062b4:	080062d1 	.word	0x080062d1
 80062b8:	2300      	movs	r3, #0
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062be:	e0d8      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062c0:	2302      	movs	r3, #2
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c6:	e0d4      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062c8:	2304      	movs	r3, #4
 80062ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ce:	e0d0      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062d0:	2308      	movs	r3, #8
 80062d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d6:	e0cc      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062d8:	2310      	movs	r3, #16
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062de:	e0c8      	b.n	8006472 <UART_SetConfig+0x2fe>
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a5e      	ldr	r2, [pc, #376]	; (8006460 <UART_SetConfig+0x2ec>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d125      	bne.n	8006336 <UART_SetConfig+0x1c2>
 80062ea:	4b5b      	ldr	r3, [pc, #364]	; (8006458 <UART_SetConfig+0x2e4>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062f4:	2b30      	cmp	r3, #48	; 0x30
 80062f6:	d016      	beq.n	8006326 <UART_SetConfig+0x1b2>
 80062f8:	2b30      	cmp	r3, #48	; 0x30
 80062fa:	d818      	bhi.n	800632e <UART_SetConfig+0x1ba>
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d00a      	beq.n	8006316 <UART_SetConfig+0x1a2>
 8006300:	2b20      	cmp	r3, #32
 8006302:	d814      	bhi.n	800632e <UART_SetConfig+0x1ba>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <UART_SetConfig+0x19a>
 8006308:	2b10      	cmp	r3, #16
 800630a:	d008      	beq.n	800631e <UART_SetConfig+0x1aa>
 800630c:	e00f      	b.n	800632e <UART_SetConfig+0x1ba>
 800630e:	2300      	movs	r3, #0
 8006310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006314:	e0ad      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006316:	2302      	movs	r3, #2
 8006318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631c:	e0a9      	b.n	8006472 <UART_SetConfig+0x2fe>
 800631e:	2304      	movs	r3, #4
 8006320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006324:	e0a5      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006326:	2308      	movs	r3, #8
 8006328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632c:	e0a1      	b.n	8006472 <UART_SetConfig+0x2fe>
 800632e:	2310      	movs	r3, #16
 8006330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006334:	e09d      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a4a      	ldr	r2, [pc, #296]	; (8006464 <UART_SetConfig+0x2f0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d125      	bne.n	800638c <UART_SetConfig+0x218>
 8006340:	4b45      	ldr	r3, [pc, #276]	; (8006458 <UART_SetConfig+0x2e4>)
 8006342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800634a:	2bc0      	cmp	r3, #192	; 0xc0
 800634c:	d016      	beq.n	800637c <UART_SetConfig+0x208>
 800634e:	2bc0      	cmp	r3, #192	; 0xc0
 8006350:	d818      	bhi.n	8006384 <UART_SetConfig+0x210>
 8006352:	2b80      	cmp	r3, #128	; 0x80
 8006354:	d00a      	beq.n	800636c <UART_SetConfig+0x1f8>
 8006356:	2b80      	cmp	r3, #128	; 0x80
 8006358:	d814      	bhi.n	8006384 <UART_SetConfig+0x210>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <UART_SetConfig+0x1f0>
 800635e:	2b40      	cmp	r3, #64	; 0x40
 8006360:	d008      	beq.n	8006374 <UART_SetConfig+0x200>
 8006362:	e00f      	b.n	8006384 <UART_SetConfig+0x210>
 8006364:	2300      	movs	r3, #0
 8006366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800636a:	e082      	b.n	8006472 <UART_SetConfig+0x2fe>
 800636c:	2302      	movs	r3, #2
 800636e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006372:	e07e      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006374:	2304      	movs	r3, #4
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800637a:	e07a      	b.n	8006472 <UART_SetConfig+0x2fe>
 800637c:	2308      	movs	r3, #8
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006382:	e076      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006384:	2310      	movs	r3, #16
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638a:	e072      	b.n	8006472 <UART_SetConfig+0x2fe>
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a35      	ldr	r2, [pc, #212]	; (8006468 <UART_SetConfig+0x2f4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d12a      	bne.n	80063ec <UART_SetConfig+0x278>
 8006396:	4b30      	ldr	r3, [pc, #192]	; (8006458 <UART_SetConfig+0x2e4>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063a4:	d01a      	beq.n	80063dc <UART_SetConfig+0x268>
 80063a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063aa:	d81b      	bhi.n	80063e4 <UART_SetConfig+0x270>
 80063ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b0:	d00c      	beq.n	80063cc <UART_SetConfig+0x258>
 80063b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b6:	d815      	bhi.n	80063e4 <UART_SetConfig+0x270>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <UART_SetConfig+0x250>
 80063bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063c0:	d008      	beq.n	80063d4 <UART_SetConfig+0x260>
 80063c2:	e00f      	b.n	80063e4 <UART_SetConfig+0x270>
 80063c4:	2300      	movs	r3, #0
 80063c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ca:	e052      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063cc:	2302      	movs	r3, #2
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d2:	e04e      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063d4:	2304      	movs	r3, #4
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063da:	e04a      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063dc:	2308      	movs	r3, #8
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e2:	e046      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063e4:	2310      	movs	r3, #16
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ea:	e042      	b.n	8006472 <UART_SetConfig+0x2fe>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a17      	ldr	r2, [pc, #92]	; (8006450 <UART_SetConfig+0x2dc>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d13a      	bne.n	800646c <UART_SetConfig+0x2f8>
 80063f6:	4b18      	ldr	r3, [pc, #96]	; (8006458 <UART_SetConfig+0x2e4>)
 80063f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006404:	d01a      	beq.n	800643c <UART_SetConfig+0x2c8>
 8006406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800640a:	d81b      	bhi.n	8006444 <UART_SetConfig+0x2d0>
 800640c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006410:	d00c      	beq.n	800642c <UART_SetConfig+0x2b8>
 8006412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006416:	d815      	bhi.n	8006444 <UART_SetConfig+0x2d0>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <UART_SetConfig+0x2b0>
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006420:	d008      	beq.n	8006434 <UART_SetConfig+0x2c0>
 8006422:	e00f      	b.n	8006444 <UART_SetConfig+0x2d0>
 8006424:	2300      	movs	r3, #0
 8006426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642a:	e022      	b.n	8006472 <UART_SetConfig+0x2fe>
 800642c:	2302      	movs	r3, #2
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e01e      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006434:	2304      	movs	r3, #4
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800643a:	e01a      	b.n	8006472 <UART_SetConfig+0x2fe>
 800643c:	2308      	movs	r3, #8
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006442:	e016      	b.n	8006472 <UART_SetConfig+0x2fe>
 8006444:	2310      	movs	r3, #16
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644a:	e012      	b.n	8006472 <UART_SetConfig+0x2fe>
 800644c:	cfff69f3 	.word	0xcfff69f3
 8006450:	40008000 	.word	0x40008000
 8006454:	40013800 	.word	0x40013800
 8006458:	40021000 	.word	0x40021000
 800645c:	40004400 	.word	0x40004400
 8006460:	40004800 	.word	0x40004800
 8006464:	40004c00 	.word	0x40004c00
 8006468:	40005000 	.word	0x40005000
 800646c:	2310      	movs	r3, #16
 800646e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4aae      	ldr	r2, [pc, #696]	; (8006730 <UART_SetConfig+0x5bc>)
 8006478:	4293      	cmp	r3, r2
 800647a:	f040 8097 	bne.w	80065ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800647e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006482:	2b08      	cmp	r3, #8
 8006484:	d823      	bhi.n	80064ce <UART_SetConfig+0x35a>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x318>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064b1 	.word	0x080064b1
 8006490:	080064cf 	.word	0x080064cf
 8006494:	080064b9 	.word	0x080064b9
 8006498:	080064cf 	.word	0x080064cf
 800649c:	080064bf 	.word	0x080064bf
 80064a0:	080064cf 	.word	0x080064cf
 80064a4:	080064cf 	.word	0x080064cf
 80064a8:	080064cf 	.word	0x080064cf
 80064ac:	080064c7 	.word	0x080064c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064b0:	f7fe ff40 	bl	8005334 <HAL_RCC_GetPCLK1Freq>
 80064b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064b6:	e010      	b.n	80064da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b8:	4b9e      	ldr	r3, [pc, #632]	; (8006734 <UART_SetConfig+0x5c0>)
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064bc:	e00d      	b.n	80064da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064be:	f7fe fecb 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 80064c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064c4:	e009      	b.n	80064da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064cc:	e005      	b.n	80064da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8130 	beq.w	8006742 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	4a94      	ldr	r2, [pc, #592]	; (8006738 <UART_SetConfig+0x5c4>)
 80064e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ec:	461a      	mov	r2, r3
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	005b      	lsls	r3, r3, #1
 80064fe:	4413      	add	r3, r2
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	429a      	cmp	r2, r3
 8006504:	d305      	bcc.n	8006512 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	429a      	cmp	r2, r3
 8006510:	d903      	bls.n	800651a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006518:	e113      	b.n	8006742 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651c:	2200      	movs	r2, #0
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	60fa      	str	r2, [r7, #12]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	4a84      	ldr	r2, [pc, #528]	; (8006738 <UART_SetConfig+0x5c4>)
 8006528:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800652c:	b29b      	uxth	r3, r3
 800652e:	2200      	movs	r2, #0
 8006530:	603b      	str	r3, [r7, #0]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006538:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800653c:	f7fa fb70 	bl	8000c20 <__aeabi_uldivmod>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	020b      	lsls	r3, r1, #8
 8006552:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006556:	0202      	lsls	r2, r0, #8
 8006558:	6979      	ldr	r1, [r7, #20]
 800655a:	6849      	ldr	r1, [r1, #4]
 800655c:	0849      	lsrs	r1, r1, #1
 800655e:	2000      	movs	r0, #0
 8006560:	460c      	mov	r4, r1
 8006562:	4605      	mov	r5, r0
 8006564:	eb12 0804 	adds.w	r8, r2, r4
 8006568:	eb43 0905 	adc.w	r9, r3, r5
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	469a      	mov	sl, r3
 8006574:	4693      	mov	fp, r2
 8006576:	4652      	mov	r2, sl
 8006578:	465b      	mov	r3, fp
 800657a:	4640      	mov	r0, r8
 800657c:	4649      	mov	r1, r9
 800657e:	f7fa fb4f 	bl	8000c20 <__aeabi_uldivmod>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4613      	mov	r3, r2
 8006588:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006590:	d308      	bcc.n	80065a4 <UART_SetConfig+0x430>
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006598:	d204      	bcs.n	80065a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	60da      	str	r2, [r3, #12]
 80065a2:	e0ce      	b.n	8006742 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065aa:	e0ca      	b.n	8006742 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b4:	d166      	bne.n	8006684 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80065b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d827      	bhi.n	800660e <UART_SetConfig+0x49a>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <UART_SetConfig+0x450>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065e9 	.word	0x080065e9
 80065c8:	080065f1 	.word	0x080065f1
 80065cc:	080065f9 	.word	0x080065f9
 80065d0:	0800660f 	.word	0x0800660f
 80065d4:	080065ff 	.word	0x080065ff
 80065d8:	0800660f 	.word	0x0800660f
 80065dc:	0800660f 	.word	0x0800660f
 80065e0:	0800660f 	.word	0x0800660f
 80065e4:	08006607 	.word	0x08006607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065e8:	f7fe fea4 	bl	8005334 <HAL_RCC_GetPCLK1Freq>
 80065ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065ee:	e014      	b.n	800661a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065f0:	f7fe feb6 	bl	8005360 <HAL_RCC_GetPCLK2Freq>
 80065f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065f6:	e010      	b.n	800661a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065f8:	4b4e      	ldr	r3, [pc, #312]	; (8006734 <UART_SetConfig+0x5c0>)
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065fc:	e00d      	b.n	800661a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065fe:	f7fe fe2b 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 8006602:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006604:	e009      	b.n	800661a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800660c:	e005      	b.n	800661a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800661a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 8090 	beq.w	8006742 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	4a44      	ldr	r2, [pc, #272]	; (8006738 <UART_SetConfig+0x5c4>)
 8006628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800662c:	461a      	mov	r2, r3
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	fbb3 f3f2 	udiv	r3, r3, r2
 8006634:	005a      	lsls	r2, r3, #1
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	085b      	lsrs	r3, r3, #1
 800663c:	441a      	add	r2, r3
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	fbb2 f3f3 	udiv	r3, r2, r3
 8006646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	2b0f      	cmp	r3, #15
 800664c:	d916      	bls.n	800667c <UART_SetConfig+0x508>
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006654:	d212      	bcs.n	800667c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f023 030f 	bic.w	r3, r3, #15
 800665e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	b29b      	uxth	r3, r3
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	b29a      	uxth	r2, r3
 800666c:	8bfb      	ldrh	r3, [r7, #30]
 800666e:	4313      	orrs	r3, r2
 8006670:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	8bfa      	ldrh	r2, [r7, #30]
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	e062      	b.n	8006742 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006682:	e05e      	b.n	8006742 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006684:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006688:	2b08      	cmp	r3, #8
 800668a:	d828      	bhi.n	80066de <UART_SetConfig+0x56a>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0x520>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066b9 	.word	0x080066b9
 8006698:	080066c1 	.word	0x080066c1
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	080066df 	.word	0x080066df
 80066a4:	080066cf 	.word	0x080066cf
 80066a8:	080066df 	.word	0x080066df
 80066ac:	080066df 	.word	0x080066df
 80066b0:	080066df 	.word	0x080066df
 80066b4:	080066d7 	.word	0x080066d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b8:	f7fe fe3c 	bl	8005334 <HAL_RCC_GetPCLK1Freq>
 80066bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066be:	e014      	b.n	80066ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066c0:	f7fe fe4e 	bl	8005360 <HAL_RCC_GetPCLK2Freq>
 80066c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066c6:	e010      	b.n	80066ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c8:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <UART_SetConfig+0x5c0>)
 80066ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066cc:	e00d      	b.n	80066ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ce:	f7fe fdc3 	bl	8005258 <HAL_RCC_GetSysClockFreq>
 80066d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066d4:	e009      	b.n	80066ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066dc:	e005      	b.n	80066ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066e8:	bf00      	nop
    }

    if (pclk != 0U)
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d028      	beq.n	8006742 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f4:	4a10      	ldr	r2, [pc, #64]	; (8006738 <UART_SetConfig+0x5c4>)
 80066f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066fa:	461a      	mov	r2, r3
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	441a      	add	r2, r3
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006712:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	d910      	bls.n	800673c <UART_SetConfig+0x5c8>
 800671a:	6a3b      	ldr	r3, [r7, #32]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006720:	d20c      	bcs.n	800673c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	b29a      	uxth	r2, r3
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60da      	str	r2, [r3, #12]
 800672c:	e009      	b.n	8006742 <UART_SetConfig+0x5ce>
 800672e:	bf00      	nop
 8006730:	40008000 	.word	0x40008000
 8006734:	00f42400 	.word	0x00f42400
 8006738:	08008ea0 	.word	0x08008ea0
      }
      else
      {
        ret = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2201      	movs	r2, #1
 8006746:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2201      	movs	r2, #1
 800674e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2200      	movs	r2, #0
 8006756:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2200      	movs	r2, #0
 800675c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800675e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006762:	4618      	mov	r0, r3
 8006764:	3730      	adds	r7, #48	; 0x30
 8006766:	46bd      	mov	sp, r7
 8006768:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800676c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00a      	beq.n	8006796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	430a      	orrs	r2, r1
 8006794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00a      	beq.n	80067b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	430a      	orrs	r2, r1
 80067b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00a      	beq.n	80067fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01a      	beq.n	8006882 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006866:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800686a:	d10a      	bne.n	8006882 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	605a      	str	r2, [r3, #4]
  }
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af02      	add	r7, sp, #8
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068c0:	f7fb fe98 	bl	80025f4 <HAL_GetTick>
 80068c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d10e      	bne.n	80068f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f82f 	bl	8006946 <UART_WaitOnFlagUntilTimeout>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e025      	b.n	800693e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b04      	cmp	r3, #4
 80068fe:	d10e      	bne.n	800691e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f819 	bl	8006946 <UART_WaitOnFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e00f      	b.n	800693e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2220      	movs	r2, #32
 800692a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b09c      	sub	sp, #112	; 0x70
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	603b      	str	r3, [r7, #0]
 8006952:	4613      	mov	r3, r2
 8006954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006956:	e0a9      	b.n	8006aac <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800695e:	f000 80a5 	beq.w	8006aac <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	f7fb fe47 	bl	80025f4 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800696e:	429a      	cmp	r2, r3
 8006970:	d302      	bcc.n	8006978 <UART_WaitOnFlagUntilTimeout+0x32>
 8006972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006974:	2b00      	cmp	r3, #0
 8006976:	d140      	bne.n	80069fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800698c:	667b      	str	r3, [r7, #100]	; 0x64
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006998:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800699c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e6      	bne.n	8006978 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3308      	adds	r3, #8
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	f023 0301 	bic.w	r3, r3, #1
 80069c0:	663b      	str	r3, [r7, #96]	; 0x60
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3308      	adds	r3, #8
 80069c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80069cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e5      	bne.n	80069aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2220      	movs	r2, #32
 80069e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e069      	b.n	8006ace <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d051      	beq.n	8006aac <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a16:	d149      	bne.n	8006aac <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a20:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
 8006a42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e6      	bne.n	8006a22 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	613b      	str	r3, [r7, #16]
   return(result);
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	f023 0301 	bic.w	r3, r3, #1
 8006a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a74:	623a      	str	r2, [r7, #32]
 8006a76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	69f9      	ldr	r1, [r7, #28]
 8006a7a:	6a3a      	ldr	r2, [r7, #32]
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e5      	bne.n	8006a54 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2220      	movs	r2, #32
 8006a9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e010      	b.n	8006ace <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	69da      	ldr	r2, [r3, #28]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	bf0c      	ite	eq
 8006abc:	2301      	moveq	r3, #1
 8006abe:	2300      	movne	r3, #0
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	f43f af46 	beq.w	8006958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3770      	adds	r7, #112	; 0x70
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b085      	sub	sp, #20
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_UARTEx_DisableFifoMode+0x16>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e027      	b.n	8006b3c <HAL_UARTEx_DisableFifoMode+0x66>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2224      	movs	r2, #36	; 0x24
 8006af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 0201 	bic.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b1a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d101      	bne.n	8006b60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	e02d      	b.n	8006bbc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2224      	movs	r2, #36	; 0x24
 8006b6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f84f 	bl	8006c40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e02d      	b.n	8006c38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2224      	movs	r2, #36	; 0x24
 8006be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f811 	bl	8006c40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d108      	bne.n	8006c62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c60:	e031      	b.n	8006cc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c62:	2308      	movs	r3, #8
 8006c64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c66:	2308      	movs	r3, #8
 8006c68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	0e5b      	lsrs	r3, r3, #25
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	f003 0307 	and.w	r3, r3, #7
 8006c78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	0f5b      	lsrs	r3, r3, #29
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	f003 0307 	and.w	r3, r3, #7
 8006c88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c8a:	7bbb      	ldrb	r3, [r7, #14]
 8006c8c:	7b3a      	ldrb	r2, [r7, #12]
 8006c8e:	4911      	ldr	r1, [pc, #68]	; (8006cd4 <UARTEx_SetNbDataToProcess+0x94>)
 8006c90:	5c8a      	ldrb	r2, [r1, r2]
 8006c92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c96:	7b3a      	ldrb	r2, [r7, #12]
 8006c98:	490f      	ldr	r1, [pc, #60]	; (8006cd8 <UARTEx_SetNbDataToProcess+0x98>)
 8006c9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	7b7a      	ldrb	r2, [r7, #13]
 8006cac:	4909      	ldr	r1, [pc, #36]	; (8006cd4 <UARTEx_SetNbDataToProcess+0x94>)
 8006cae:	5c8a      	ldrb	r2, [r1, r2]
 8006cb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cb4:	7b7a      	ldrb	r2, [r7, #13]
 8006cb6:	4908      	ldr	r1, [pc, #32]	; (8006cd8 <UARTEx_SetNbDataToProcess+0x98>)
 8006cb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cba:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	08008eb8 	.word	0x08008eb8
 8006cd8:	08008ec0 	.word	0x08008ec0

08006cdc <arm_correlate_f32>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	b087      	sub	sp, #28
 8006ce2:	4299      	cmp	r1, r3
 8006ce4:	4684      	mov	ip, r0
 8006ce6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006ce8:	f0c0 80a7 	bcc.w	8006e3a <arm_correlate_f32+0x15e>
 8006cec:	ebc3 0e01 	rsb	lr, r3, r1
 8006cf0:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8006cf4:	2704      	movs	r7, #4
 8006cf6:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8006cfa:	3101      	adds	r1, #1
 8006cfc:	3801      	subs	r0, #1
 8006cfe:	1ac9      	subs	r1, r1, r3
 8006d00:	1e5e      	subs	r6, r3, #1
 8006d02:	9100      	str	r1, [sp, #0]
 8006d04:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8006d08:	d055      	beq.n	8006db6 <arm_correlate_f32+0xda>
 8006d0a:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8006ebc <arm_correlate_f32+0x1e0>
 8006d0e:	f1a0 0804 	sub.w	r8, r0, #4
 8006d12:	46f1      	mov	r9, lr
 8006d14:	4664      	mov	r4, ip
 8006d16:	2501      	movs	r5, #1
 8006d18:	f015 0103 	ands.w	r1, r5, #3
 8006d1c:	d009      	beq.n	8006d32 <arm_correlate_f32+0x56>
 8006d1e:	ecf4 6a01 	vldmia	r4!, {s13}
 8006d22:	ecb0 7a01 	vldmia	r0!, {s14}
 8006d26:	ee26 7a87 	vmul.f32	s14, s13, s14
 8006d2a:	3901      	subs	r1, #1
 8006d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d30:	d1f5      	bne.n	8006d1e <arm_correlate_f32+0x42>
 8006d32:	3501      	adds	r5, #1
 8006d34:	429d      	cmp	r5, r3
 8006d36:	edc9 7a00 	vstr	s15, [r9]
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	44b9      	add	r9, r7
 8006d3e:	d038      	beq.n	8006db2 <arm_correlate_f32+0xd6>
 8006d40:	ea5f 0a95 	movs.w	sl, r5, lsr #2
 8006d44:	eddf 7a5d 	vldr	s15, [pc, #372]	; 8006ebc <arm_correlate_f32+0x1e0>
 8006d48:	f000 8253 	beq.w	80071f2 <arm_correlate_f32+0x516>
 8006d4c:	f10c 0010 	add.w	r0, ip, #16
 8006d50:	f108 0110 	add.w	r1, r8, #16
 8006d54:	4654      	mov	r4, sl
 8006d56:	ed51 6a04 	vldr	s13, [r1, #-16]
 8006d5a:	ed10 4a04 	vldr	s8, [r0, #-16]
 8006d5e:	ed50 3a03 	vldr	s7, [r0, #-12]
 8006d62:	ed11 5a03 	vldr	s10, [r1, #-12]
 8006d66:	ed50 4a02 	vldr	s9, [r0, #-8]
 8006d6a:	ed11 6a02 	vldr	s12, [r1, #-8]
 8006d6e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006d72:	ed11 7a01 	vldr	s14, [r1, #-4]
 8006d76:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006d7a:	ee23 5a85 	vmul.f32	s10, s7, s10
 8006d7e:	ee74 6a27 	vadd.f32	s13, s8, s15
 8006d82:	ee24 6a86 	vmul.f32	s12, s9, s12
 8006d86:	ee75 6a26 	vadd.f32	s13, s10, s13
 8006d8a:	ee25 7a87 	vmul.f32	s14, s11, s14
 8006d8e:	ee76 7a26 	vadd.f32	s15, s12, s13
 8006d92:	3c01      	subs	r4, #1
 8006d94:	f100 0010 	add.w	r0, r0, #16
 8006d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d9c:	f101 0110 	add.w	r1, r1, #16
 8006da0:	d1d9      	bne.n	8006d56 <arm_correlate_f32+0x7a>
 8006da2:	ea4f 100a 	mov.w	r0, sl, lsl #4
 8006da6:	eb0c 0400 	add.w	r4, ip, r0
 8006daa:	4440      	add	r0, r8
 8006dac:	f1a8 0804 	sub.w	r8, r8, #4
 8006db0:	e7b2      	b.n	8006d18 <arm_correlate_f32+0x3c>
 8006db2:	fb07 ee06 	mla	lr, r7, r6, lr
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	9900      	ldr	r1, [sp, #0]
 8006dba:	d84d      	bhi.n	8006e58 <arm_correlate_f32+0x17c>
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	f000 81d4 	beq.w	800716a <arm_correlate_f32+0x48e>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 81d6 	beq.w	8007174 <arm_correlate_f32+0x498>
 8006dc8:	2e00      	cmp	r6, #0
 8006dca:	f000 81df 	beq.w	800718c <arm_correlate_f32+0x4b0>
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	9b00      	ldr	r3, [sp, #0]
 8006dd2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8006dd6:	f000 81ef 	beq.w	80071b8 <arm_correlate_f32+0x4dc>
 8006dda:	eddf 4a38 	vldr	s9, [pc, #224]	; 8006ebc <arm_correlate_f32+0x1e0>
 8006dde:	eb0c 0503 	add.w	r5, ip, r3
 8006de2:	4664      	mov	r4, ip
 8006de4:	f10c 0004 	add.w	r0, ip, #4
 8006de8:	4671      	mov	r1, lr
 8006dea:	ecb4 5a01 	vldmia	r4!, {s10}
 8006dee:	ed92 6a00 	vldr	s12, [r2]
 8006df2:	edd0 7a00 	vldr	s15, [r0]
 8006df6:	edd2 6a01 	vldr	s13, [r2, #4]
 8006dfa:	edd0 5a01 	vldr	s11, [r0, #4]
 8006dfe:	ed92 7a02 	vldr	s14, [r2, #8]
 8006e02:	ee25 6a06 	vmul.f32	s12, s10, s12
 8006e06:	3004      	adds	r0, #4
 8006e08:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006e0c:	ee36 6a24 	vadd.f32	s12, s12, s9
 8006e10:	ee25 7a87 	vmul.f32	s14, s11, s14
 8006e14:	ee76 7a26 	vadd.f32	s15, s12, s13
 8006e18:	42ac      	cmp	r4, r5
 8006e1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e1e:	edc1 7a00 	vstr	s15, [r1]
 8006e22:	4439      	add	r1, r7
 8006e24:	d1e1      	bne.n	8006dea <arm_correlate_f32+0x10e>
 8006e26:	9900      	ldr	r1, [sp, #0]
 8006e28:	449c      	add	ip, r3
 8006e2a:	fb07 ee01 	mla	lr, r7, r1, lr
 8006e2e:	2e00      	cmp	r6, #0
 8006e30:	f040 814c 	bne.w	80070cc <arm_correlate_f32+0x3f0>
 8006e34:	b007      	add	sp, #28
 8006e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3a:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 8006e3e:	3802      	subs	r0, #2
 8006e40:	4666      	mov	r6, ip
 8006e42:	4408      	add	r0, r1
 8006e44:	460d      	mov	r5, r1
 8006e46:	4694      	mov	ip, r2
 8006e48:	4619      	mov	r1, r3
 8006e4a:	eb04 0e80 	add.w	lr, r4, r0, lsl #2
 8006e4e:	4632      	mov	r2, r6
 8006e50:	f06f 0703 	mvn.w	r7, #3
 8006e54:	462b      	mov	r3, r5
 8006e56:	e74e      	b.n	8006cf6 <arm_correlate_f32+0x1a>
 8006e58:	0889      	lsrs	r1, r1, #2
 8006e5a:	9101      	str	r1, [sp, #4]
 8006e5c:	f000 8187 	beq.w	800716e <arm_correlate_f32+0x492>
 8006e60:	0109      	lsls	r1, r1, #4
 8006e62:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 8006e66:	9102      	str	r1, [sp, #8]
 8006e68:	ea4f 1b0a 	mov.w	fp, sl, lsl #4
 8006e6c:	310c      	adds	r1, #12
 8006e6e:	4461      	add	r1, ip
 8006e70:	f003 0903 	and.w	r9, r3, #3
 8006e74:	eb02 000b 	add.w	r0, r2, fp
 8006e78:	f102 0410 	add.w	r4, r2, #16
 8006e7c:	f10c 050c 	add.w	r5, ip, #12
 8006e80:	46f0      	mov	r8, lr
 8006e82:	f8cd e00c 	str.w	lr, [sp, #12]
 8006e86:	9604      	str	r6, [sp, #16]
 8006e88:	f8cd c014 	str.w	ip, [sp, #20]
 8006e8c:	464e      	mov	r6, r9
 8006e8e:	468e      	mov	lr, r1
 8006e90:	4681      	mov	r9, r0
 8006e92:	46a4      	mov	ip, r4
 8006e94:	eddf 5a09 	vldr	s11, [pc, #36]	; 8006ebc <arm_correlate_f32+0x1e0>
 8006e98:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006e9c:	ed15 2a02 	vldr	s4, [r5, #-8]
 8006ea0:	ed55 1a01 	vldr	s3, [r5, #-4]
 8006ea4:	ed95 5a00 	vldr	s10, [r5]
 8006ea8:	eef0 4a65 	vmov.f32	s9, s11
 8006eac:	eef0 3a65 	vmov.f32	s7, s11
 8006eb0:	eeb0 1a65 	vmov.f32	s2, s11
 8006eb4:	4661      	mov	r1, ip
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	4654      	mov	r4, sl
 8006eba:	e004      	b.n	8006ec6 <arm_correlate_f32+0x1ea>
 8006ebc:	00000000 	.word	0x00000000
 8006ec0:	3010      	adds	r0, #16
 8006ec2:	ed90 5a00 	vldr	s10, [r0]
 8006ec6:	ed11 6a04 	vldr	s12, [r1, #-16]
 8006eca:	ed51 6a03 	vldr	s13, [r1, #-12]
 8006ece:	ed11 7a02 	vldr	s14, [r1, #-8]
 8006ed2:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006ed6:	ee62 0a86 	vmul.f32	s1, s5, s12
 8006eda:	ee22 3a06 	vmul.f32	s6, s4, s12
 8006ede:	ee21 4a86 	vmul.f32	s8, s3, s12
 8006ee2:	edd0 2a01 	vldr	s5, [r0, #4]
 8006ee6:	ee25 6a06 	vmul.f32	s12, s10, s12
 8006eea:	ee30 1a81 	vadd.f32	s2, s1, s2
 8006eee:	ee73 3a23 	vadd.f32	s7, s6, s7
 8006ef2:	ee62 0a26 	vmul.f32	s1, s4, s13
 8006ef6:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8006efa:	ee74 4a24 	vadd.f32	s9, s8, s9
 8006efe:	ee76 5a25 	vadd.f32	s11, s12, s11
 8006f02:	ed90 2a02 	vldr	s4, [r0, #8]
 8006f06:	ee25 6a26 	vmul.f32	s12, s10, s13
 8006f0a:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8006f0e:	ee30 1a81 	vadd.f32	s2, s1, s2
 8006f12:	ee73 3a23 	vadd.f32	s7, s6, s7
 8006f16:	ee61 0a87 	vmul.f32	s1, s3, s14
 8006f1a:	ee25 4a07 	vmul.f32	s8, s10, s14
 8006f1e:	ee76 4a24 	vadd.f32	s9, s12, s9
 8006f22:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8006f26:	edd0 1a03 	vldr	s3, [r0, #12]
 8006f2a:	ee62 6a87 	vmul.f32	s13, s5, s14
 8006f2e:	ee22 7a07 	vmul.f32	s14, s4, s14
 8006f32:	ee25 5a27 	vmul.f32	s10, s10, s15
 8006f36:	ee34 6a23 	vadd.f32	s12, s8, s7
 8006f3a:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006f3e:	ee62 3aa7 	vmul.f32	s7, s5, s15
 8006f42:	ee62 4a27 	vmul.f32	s9, s4, s15
 8006f46:	ee30 3a81 	vadd.f32	s6, s1, s2
 8006f4a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8006f4e:	ee61 7aa7 	vmul.f32	s15, s3, s15
 8006f52:	3c01      	subs	r4, #1
 8006f54:	f101 0110 	add.w	r1, r1, #16
 8006f58:	ee35 1a03 	vadd.f32	s2, s10, s6
 8006f5c:	ee73 3a86 	vadd.f32	s7, s7, s12
 8006f60:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8006f64:	ee77 5a87 	vadd.f32	s11, s15, s14
 8006f68:	d1aa      	bne.n	8006ec0 <arm_correlate_f32+0x1e4>
 8006f6a:	eb05 000b 	add.w	r0, r5, fp
 8006f6e:	b1ee      	cbz	r6, 8006fac <arm_correlate_f32+0x2d0>
 8006f70:	4631      	mov	r1, r6
 8006f72:	464c      	mov	r4, r9
 8006f74:	ecf4 7a01 	vldmia	r4!, {s15}
 8006f78:	ecb0 7a01 	vldmia	r0!, {s14}
 8006f7c:	ee62 2aa7 	vmul.f32	s5, s5, s15
 8006f80:	ee22 6a27 	vmul.f32	s12, s4, s15
 8006f84:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8006f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8c:	3901      	subs	r1, #1
 8006f8e:	ee31 1a22 	vadd.f32	s2, s2, s5
 8006f92:	ee73 3a86 	vadd.f32	s7, s7, s12
 8006f96:	eef0 2a42 	vmov.f32	s5, s4
 8006f9a:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8006f9e:	eeb0 2a61 	vmov.f32	s4, s3
 8006fa2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006fa6:	eef0 1a47 	vmov.f32	s3, s14
 8006faa:	d1e3      	bne.n	8006f74 <arm_correlate_f32+0x298>
 8006fac:	eb08 0107 	add.w	r1, r8, r7
 8006fb0:	19c8      	adds	r0, r1, r7
 8006fb2:	3510      	adds	r5, #16
 8006fb4:	ed88 1a00 	vstr	s2, [r8]
 8006fb8:	4575      	cmp	r5, lr
 8006fba:	eb00 0807 	add.w	r8, r0, r7
 8006fbe:	edc1 3a00 	vstr	s7, [r1]
 8006fc2:	edc0 4a00 	vstr	s9, [r0]
 8006fc6:	edc8 5a00 	vstr	s11, [r8]
 8006fca:	44b8      	add	r8, r7
 8006fcc:	f47f af62 	bne.w	8006e94 <arm_correlate_f32+0x1b8>
 8006fd0:	f8dd c014 	ldr.w	ip, [sp, #20]
 8006fd4:	9802      	ldr	r0, [sp, #8]
 8006fd6:	9c01      	ldr	r4, [sp, #4]
 8006fd8:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8006fdc:	9e04      	ldr	r6, [sp, #16]
 8006fde:	00b9      	lsls	r1, r7, #2
 8006fe0:	4460      	add	r0, ip
 8006fe2:	4605      	mov	r5, r0
 8006fe4:	fb04 ee01 	mla	lr, r4, r1, lr
 8006fe8:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8006fec:	9900      	ldr	r1, [sp, #0]
 8006fee:	f011 0103 	ands.w	r1, r1, #3
 8006ff2:	9101      	str	r1, [sp, #4]
 8006ff4:	d064      	beq.n	80070c0 <arm_correlate_f32+0x3e4>
 8006ff6:	ea4f 0b93 	mov.w	fp, r3, lsr #2
 8006ffa:	3101      	adds	r1, #1
 8006ffc:	4441      	add	r1, r8
 8006ffe:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8007002:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8007006:	f108 0801 	add.w	r8, r8, #1
 800700a:	f003 0003 	and.w	r0, r3, #3
 800700e:	f102 0410 	add.w	r4, r2, #16
 8007012:	eb02 030a 	add.w	r3, r2, sl
 8007016:	eb0c 0888 	add.w	r8, ip, r8, lsl #2
 800701a:	46f1      	mov	r9, lr
 800701c:	f8cd e008 	str.w	lr, [sp, #8]
 8007020:	9603      	str	r6, [sp, #12]
 8007022:	f8cd c010 	str.w	ip, [sp, #16]
 8007026:	460e      	mov	r6, r1
 8007028:	469c      	mov	ip, r3
 800702a:	46a6      	mov	lr, r4
 800702c:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 8006ebc <arm_correlate_f32+0x1e0>
 8007030:	f105 0110 	add.w	r1, r5, #16
 8007034:	4673      	mov	r3, lr
 8007036:	465c      	mov	r4, fp
 8007038:	ed53 6a04 	vldr	s13, [r3, #-16]
 800703c:	ed11 4a04 	vldr	s8, [r1, #-16]
 8007040:	ed51 3a03 	vldr	s7, [r1, #-12]
 8007044:	ed13 5a03 	vldr	s10, [r3, #-12]
 8007048:	ed51 4a02 	vldr	s9, [r1, #-8]
 800704c:	ed13 6a02 	vldr	s12, [r3, #-8]
 8007050:	ed51 5a01 	vldr	s11, [r1, #-4]
 8007054:	ed13 7a01 	vldr	s14, [r3, #-4]
 8007058:	ee24 4a26 	vmul.f32	s8, s8, s13
 800705c:	ee23 5a85 	vmul.f32	s10, s7, s10
 8007060:	ee74 6a27 	vadd.f32	s13, s8, s15
 8007064:	ee24 6a86 	vmul.f32	s12, s9, s12
 8007068:	ee75 6a26 	vadd.f32	s13, s10, s13
 800706c:	ee25 7a87 	vmul.f32	s14, s11, s14
 8007070:	ee76 7a26 	vadd.f32	s15, s12, s13
 8007074:	3c01      	subs	r4, #1
 8007076:	f101 0110 	add.w	r1, r1, #16
 800707a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800707e:	f103 0310 	add.w	r3, r3, #16
 8007082:	d1d9      	bne.n	8007038 <arm_correlate_f32+0x35c>
 8007084:	4455      	add	r5, sl
 8007086:	b158      	cbz	r0, 80070a0 <arm_correlate_f32+0x3c4>
 8007088:	4603      	mov	r3, r0
 800708a:	4661      	mov	r1, ip
 800708c:	ecf5 6a01 	vldmia	r5!, {s13}
 8007090:	ecb1 7a01 	vldmia	r1!, {s14}
 8007094:	ee26 7a87 	vmul.f32	s14, s13, s14
 8007098:	3b01      	subs	r3, #1
 800709a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800709e:	d1f5      	bne.n	800708c <arm_correlate_f32+0x3b0>
 80070a0:	4645      	mov	r5, r8
 80070a2:	f108 0804 	add.w	r8, r8, #4
 80070a6:	45b0      	cmp	r8, r6
 80070a8:	edc9 7a00 	vstr	s15, [r9]
 80070ac:	44b9      	add	r9, r7
 80070ae:	d1bd      	bne.n	800702c <arm_correlate_f32+0x350>
 80070b0:	f8dd e008 	ldr.w	lr, [sp, #8]
 80070b4:	9b01      	ldr	r3, [sp, #4]
 80070b6:	9e03      	ldr	r6, [sp, #12]
 80070b8:	f8dd c010 	ldr.w	ip, [sp, #16]
 80070bc:	fb07 ee03 	mla	lr, r7, r3, lr
 80070c0:	9b00      	ldr	r3, [sp, #0]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	449c      	add	ip, r3
 80070c6:	2e00      	cmp	r6, #0
 80070c8:	f43f aeb4 	beq.w	8006e34 <arm_correlate_f32+0x158>
 80070cc:	08b4      	lsrs	r4, r6, #2
 80070ce:	ed5f 7a85 	vldr	s15, [pc, #-532]	; 8006ebc <arm_correlate_f32+0x1e0>
 80070d2:	d047      	beq.n	8007164 <arm_correlate_f32+0x488>
 80070d4:	f10c 0110 	add.w	r1, ip, #16
 80070d8:	f102 0310 	add.w	r3, r2, #16
 80070dc:	4620      	mov	r0, r4
 80070de:	ed53 6a04 	vldr	s13, [r3, #-16]
 80070e2:	ed11 4a04 	vldr	s8, [r1, #-16]
 80070e6:	ed51 3a03 	vldr	s7, [r1, #-12]
 80070ea:	ed13 5a03 	vldr	s10, [r3, #-12]
 80070ee:	ed51 4a02 	vldr	s9, [r1, #-8]
 80070f2:	ed13 6a02 	vldr	s12, [r3, #-8]
 80070f6:	ed51 5a01 	vldr	s11, [r1, #-4]
 80070fa:	ed13 7a01 	vldr	s14, [r3, #-4]
 80070fe:	ee24 4a26 	vmul.f32	s8, s8, s13
 8007102:	ee23 5a85 	vmul.f32	s10, s7, s10
 8007106:	ee74 6a27 	vadd.f32	s13, s8, s15
 800710a:	ee24 6a86 	vmul.f32	s12, s9, s12
 800710e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8007112:	ee25 7a87 	vmul.f32	s14, s11, s14
 8007116:	ee76 7a26 	vadd.f32	s15, s12, s13
 800711a:	3801      	subs	r0, #1
 800711c:	f101 0110 	add.w	r1, r1, #16
 8007120:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007124:	f103 0310 	add.w	r3, r3, #16
 8007128:	d1d9      	bne.n	80070de <arm_correlate_f32+0x402>
 800712a:	0121      	lsls	r1, r4, #4
 800712c:	eb0c 0001 	add.w	r0, ip, r1
 8007130:	4411      	add	r1, r2
 8007132:	f016 0303 	ands.w	r3, r6, #3
 8007136:	d009      	beq.n	800714c <arm_correlate_f32+0x470>
 8007138:	ecf0 6a01 	vldmia	r0!, {s13}
 800713c:	ecb1 7a01 	vldmia	r1!, {s14}
 8007140:	ee26 7a87 	vmul.f32	s14, s13, s14
 8007144:	3b01      	subs	r3, #1
 8007146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800714a:	d1f5      	bne.n	8007138 <arm_correlate_f32+0x45c>
 800714c:	3e01      	subs	r6, #1
 800714e:	edce 7a00 	vstr	s15, [lr]
 8007152:	f10c 0c04 	add.w	ip, ip, #4
 8007156:	44be      	add	lr, r7
 8007158:	f43f ae6c 	beq.w	8006e34 <arm_correlate_f32+0x158>
 800715c:	08b4      	lsrs	r4, r6, #2
 800715e:	ed5f 7aa9 	vldr	s15, [pc, #-676]	; 8006ebc <arm_correlate_f32+0x1e0>
 8007162:	d1b7      	bne.n	80070d4 <arm_correlate_f32+0x3f8>
 8007164:	4611      	mov	r1, r2
 8007166:	4660      	mov	r0, ip
 8007168:	e7e3      	b.n	8007132 <arm_correlate_f32+0x456>
 800716a:	460b      	mov	r3, r1
 800716c:	e7aa      	b.n	80070c4 <arm_correlate_f32+0x3e8>
 800716e:	4688      	mov	r8, r1
 8007170:	4665      	mov	r5, ip
 8007172:	e73b      	b.n	8006fec <arm_correlate_f32+0x310>
 8007174:	9900      	ldr	r1, [sp, #0]
 8007176:	2000      	movs	r0, #0
 8007178:	4673      	mov	r3, lr
 800717a:	3901      	subs	r1, #1
 800717c:	6018      	str	r0, [r3, #0]
 800717e:	443b      	add	r3, r7
 8007180:	d1fb      	bne.n	800717a <arm_correlate_f32+0x49e>
 8007182:	9900      	ldr	r1, [sp, #0]
 8007184:	fb07 ee01 	mla	lr, r7, r1, lr
 8007188:	008b      	lsls	r3, r1, #2
 800718a:	e79b      	b.n	80070c4 <arm_correlate_f32+0x3e8>
 800718c:	9b00      	ldr	r3, [sp, #0]
 800718e:	ed5f 6ab5 	vldr	s13, [pc, #-724]	; 8006ebc <arm_correlate_f32+0x1e0>
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	eb0c 0403 	add.w	r4, ip, r3
 8007198:	4660      	mov	r0, ip
 800719a:	4671      	mov	r1, lr
 800719c:	ecb0 7a01 	vldmia	r0!, {s14}
 80071a0:	edd2 7a00 	vldr	s15, [r2]
 80071a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a8:	42a0      	cmp	r0, r4
 80071aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ae:	edc1 7a00 	vstr	s15, [r1]
 80071b2:	4439      	add	r1, r7
 80071b4:	d1f2      	bne.n	800719c <arm_correlate_f32+0x4c0>
 80071b6:	e636      	b.n	8006e26 <arm_correlate_f32+0x14a>
 80071b8:	ed5f 5ac0 	vldr	s11, [pc, #-768]	; 8006ebc <arm_correlate_f32+0x1e0>
 80071bc:	eb0c 0403 	add.w	r4, ip, r3
 80071c0:	4661      	mov	r1, ip
 80071c2:	4670      	mov	r0, lr
 80071c4:	ed91 6a00 	vldr	s12, [r1]
 80071c8:	ed92 7a00 	vldr	s14, [r2]
 80071cc:	edd1 6a01 	vldr	s13, [r1, #4]
 80071d0:	edd2 7a01 	vldr	s15, [r2, #4]
 80071d4:	3104      	adds	r1, #4
 80071d6:	ee26 7a07 	vmul.f32	s14, s12, s14
 80071da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80071de:	ee37 7a25 	vadd.f32	s14, s14, s11
 80071e2:	42a1      	cmp	r1, r4
 80071e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071e8:	edc0 7a00 	vstr	s15, [r0]
 80071ec:	4438      	add	r0, r7
 80071ee:	d1e9      	bne.n	80071c4 <arm_correlate_f32+0x4e8>
 80071f0:	e619      	b.n	8006e26 <arm_correlate_f32+0x14a>
 80071f2:	4664      	mov	r4, ip
 80071f4:	e5da      	b.n	8006dac <arm_correlate_f32+0xd0>
 80071f6:	bf00      	nop

080071f8 <arm_conv_f32>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	b087      	sub	sp, #28
 80071fe:	4299      	cmp	r1, r3
 8007200:	4680      	mov	r8, r0
 8007202:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8007204:	d205      	bcs.n	8007212 <arm_conv_f32+0x1a>
 8007206:	4604      	mov	r4, r0
 8007208:	4608      	mov	r0, r1
 800720a:	4690      	mov	r8, r2
 800720c:	4619      	mov	r1, r3
 800720e:	4622      	mov	r2, r4
 8007210:	4603      	mov	r3, r0
 8007212:	3101      	adds	r1, #1
 8007214:	1ac9      	subs	r1, r1, r3
 8007216:	1e5c      	subs	r4, r3, #1
 8007218:	9101      	str	r1, [sp, #4]
 800721a:	f000 8214 	beq.w	8007646 <arm_conv_f32+0x44e>
 800721e:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8007350 <arm_conv_f32+0x158>
 8007222:	f102 0c04 	add.w	ip, r2, #4
 8007226:	46b1      	mov	r9, r6
 8007228:	4610      	mov	r0, r2
 800722a:	4647      	mov	r7, r8
 800722c:	f04f 0e01 	mov.w	lr, #1
 8007230:	f01e 0103 	ands.w	r1, lr, #3
 8007234:	d00a      	beq.n	800724c <arm_conv_f32+0x54>
 8007236:	3004      	adds	r0, #4
 8007238:	ecf7 6a01 	vldmia	r7!, {s13}
 800723c:	ed30 7a01 	vldmdb	r0!, {s14}
 8007240:	ee26 7a87 	vmul.f32	s14, s13, s14
 8007244:	3901      	subs	r1, #1
 8007246:	ee77 7a87 	vadd.f32	s15, s15, s14
 800724a:	d1f5      	bne.n	8007238 <arm_conv_f32+0x40>
 800724c:	f10e 0e01 	add.w	lr, lr, #1
 8007250:	459e      	cmp	lr, r3
 8007252:	ece9 7a01 	vstmia	r9!, {s15}
 8007256:	4660      	mov	r0, ip
 8007258:	d037      	beq.n	80072ca <arm_conv_f32+0xd2>
 800725a:	ea5f 0a9e 	movs.w	sl, lr, lsr #2
 800725e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8007350 <arm_conv_f32+0x158>
 8007262:	f000 8236 	beq.w	80076d2 <arm_conv_f32+0x4da>
 8007266:	f108 0010 	add.w	r0, r8, #16
 800726a:	f1ac 0110 	sub.w	r1, ip, #16
 800726e:	4655      	mov	r5, sl
 8007270:	edd1 6a04 	vldr	s13, [r1, #16]
 8007274:	ed10 4a04 	vldr	s8, [r0, #-16]
 8007278:	ed50 3a03 	vldr	s7, [r0, #-12]
 800727c:	ed91 5a03 	vldr	s10, [r1, #12]
 8007280:	ed50 4a02 	vldr	s9, [r0, #-8]
 8007284:	ed91 6a02 	vldr	s12, [r1, #8]
 8007288:	ed50 5a01 	vldr	s11, [r0, #-4]
 800728c:	ed91 7a01 	vldr	s14, [r1, #4]
 8007290:	ee24 4a26 	vmul.f32	s8, s8, s13
 8007294:	ee23 5a85 	vmul.f32	s10, s7, s10
 8007298:	ee74 6a27 	vadd.f32	s13, s8, s15
 800729c:	ee24 6a86 	vmul.f32	s12, s9, s12
 80072a0:	ee75 6a26 	vadd.f32	s13, s10, s13
 80072a4:	ee25 7a87 	vmul.f32	s14, s11, s14
 80072a8:	ee76 7a26 	vadd.f32	s15, s12, s13
 80072ac:	3d01      	subs	r5, #1
 80072ae:	f100 0010 	add.w	r0, r0, #16
 80072b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072b6:	f1a1 0110 	sub.w	r1, r1, #16
 80072ba:	d1d9      	bne.n	8007270 <arm_conv_f32+0x78>
 80072bc:	eb08 170a 	add.w	r7, r8, sl, lsl #4
 80072c0:	ebac 100a 	sub.w	r0, ip, sl, lsl #4
 80072c4:	f10c 0c04 	add.w	ip, ip, #4
 80072c8:	e7b2      	b.n	8007230 <arm_conv_f32+0x38>
 80072ca:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000
 80072ce:	3d01      	subs	r5, #1
 80072d0:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80072da:	9a01      	ldr	r2, [sp, #4]
 80072dc:	d83a      	bhi.n	8007354 <arm_conv_f32+0x15c>
 80072de:	2a00      	cmp	r2, #0
 80072e0:	f000 81ac 	beq.w	800763c <arm_conv_f32+0x444>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	f000 81b2 	beq.w	800764e <arm_conv_f32+0x456>
 80072ea:	2c00      	cmp	r4, #0
 80072ec:	f000 81dc 	beq.w	80076a8 <arm_conv_f32+0x4b0>
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	f000 81bb 	beq.w	800766c <arm_conv_f32+0x474>
 80072f6:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80072fa:	eddf 4a15 	vldr	s9, [pc, #84]	; 8007350 <arm_conv_f32+0x158>
 80072fe:	eb06 0709 	add.w	r7, r6, r9
 8007302:	4642      	mov	r2, r8
 8007304:	f108 0304 	add.w	r3, r8, #4
 8007308:	ecb2 5a01 	vldmia	r2!, {s10}
 800730c:	ed95 6a00 	vldr	s12, [r5]
 8007310:	edd3 7a00 	vldr	s15, [r3]
 8007314:	ed55 6a01 	vldr	s13, [r5, #-4]
 8007318:	edd3 5a01 	vldr	s11, [r3, #4]
 800731c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8007320:	ee25 6a06 	vmul.f32	s12, s10, s12
 8007324:	3304      	adds	r3, #4
 8007326:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800732a:	ee36 6a24 	vadd.f32	s12, s12, s9
 800732e:	ee25 7a87 	vmul.f32	s14, s11, s14
 8007332:	ee76 7a26 	vadd.f32	s15, s12, s13
 8007336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800733a:	ece6 7a01 	vstmia	r6!, {s15}
 800733e:	42be      	cmp	r6, r7
 8007340:	d1e2      	bne.n	8007308 <arm_conv_f32+0x110>
 8007342:	44c8      	add	r8, r9
 8007344:	2c00      	cmp	r4, #0
 8007346:	f040 812a 	bne.w	800759e <arm_conv_f32+0x3a6>
 800734a:	b007      	add	sp, #28
 800734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007350:	00000000 	.word	0x00000000
 8007354:	0892      	lsrs	r2, r2, #2
 8007356:	4611      	mov	r1, r2
 8007358:	9202      	str	r2, [sp, #8]
 800735a:	f000 8172 	beq.w	8007642 <arm_conv_f32+0x44a>
 800735e:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 8007362:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8007366:	ea4f 190a 	mov.w	r9, sl, lsl #4
 800736a:	3101      	adds	r1, #1
 800736c:	f1c2 0204 	rsb	r2, r2, #4
 8007370:	0109      	lsls	r1, r1, #4
 8007372:	18aa      	adds	r2, r5, r2
 8007374:	f1a9 0010 	sub.w	r0, r9, #16
 8007378:	f003 0c03 	and.w	ip, r3, #3
 800737c:	f1a5 0910 	sub.w	r9, r5, #16
 8007380:	9504      	str	r5, [sp, #16]
 8007382:	9405      	str	r4, [sp, #20]
 8007384:	9103      	str	r1, [sp, #12]
 8007386:	4664      	mov	r4, ip
 8007388:	eb06 0b01 	add.w	fp, r6, r1
 800738c:	f106 0e10 	add.w	lr, r6, #16
 8007390:	f108 071c 	add.w	r7, r8, #28
 8007394:	4694      	mov	ip, r2
 8007396:	4605      	mov	r5, r0
 8007398:	ed5f 5a13 	vldr	s11, [pc, #-76]	; 8007350 <arm_conv_f32+0x158>
 800739c:	ed57 2a07 	vldr	s5, [r7, #-28]	; 0xffffffe4
 80073a0:	ed17 2a06 	vldr	s4, [r7, #-24]	; 0xffffffe8
 80073a4:	ed57 1a05 	vldr	s3, [r7, #-20]	; 0xffffffec
 80073a8:	eef0 3a65 	vmov.f32	s7, s11
 80073ac:	eeb0 1a65 	vmov.f32	s2, s11
 80073b0:	eef0 4a65 	vmov.f32	s9, s11
 80073b4:	4649      	mov	r1, r9
 80073b6:	463a      	mov	r2, r7
 80073b8:	4650      	mov	r0, sl
 80073ba:	ed91 6a04 	vldr	s12, [r1, #16]
 80073be:	ed12 5a04 	vldr	s10, [r2, #-16]
 80073c2:	edd1 6a03 	vldr	s13, [r1, #12]
 80073c6:	ed91 7a02 	vldr	s14, [r1, #8]
 80073ca:	edd1 7a01 	vldr	s15, [r1, #4]
 80073ce:	ee22 4a86 	vmul.f32	s8, s5, s12
 80073d2:	ee62 0a06 	vmul.f32	s1, s4, s12
 80073d6:	ee21 3a86 	vmul.f32	s6, s3, s12
 80073da:	ed52 2a03 	vldr	s5, [r2, #-12]
 80073de:	ee25 6a06 	vmul.f32	s12, s10, s12
 80073e2:	ee74 4a24 	vadd.f32	s9, s8, s9
 80073e6:	ee30 1a81 	vadd.f32	s2, s1, s2
 80073ea:	ee22 4a26 	vmul.f32	s8, s4, s13
 80073ee:	ee61 0aa6 	vmul.f32	s1, s3, s13
 80073f2:	ed12 2a02 	vldr	s4, [r2, #-8]
 80073f6:	ee73 3a23 	vadd.f32	s7, s6, s7
 80073fa:	ee76 5a25 	vadd.f32	s11, s12, s11
 80073fe:	ee25 3a26 	vmul.f32	s6, s10, s13
 8007402:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8007406:	ee21 6a87 	vmul.f32	s12, s3, s14
 800740a:	ee74 4a24 	vadd.f32	s9, s8, s9
 800740e:	ee30 1a81 	vadd.f32	s2, s1, s2
 8007412:	ee73 3a23 	vadd.f32	s7, s6, s7
 8007416:	ee65 0a07 	vmul.f32	s1, s10, s14
 800741a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800741e:	ee22 4a87 	vmul.f32	s8, s5, s14
 8007422:	ed52 1a01 	vldr	s3, [r2, #-4]
 8007426:	ee22 7a07 	vmul.f32	s14, s4, s14
 800742a:	ee76 6a24 	vadd.f32	s13, s12, s9
 800742e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8007432:	ee30 3a81 	vadd.f32	s6, s1, s2
 8007436:	ee34 6a23 	vadd.f32	s12, s8, s7
 800743a:	ee22 1aa7 	vmul.f32	s2, s5, s15
 800743e:	ee62 3a27 	vmul.f32	s7, s4, s15
 8007442:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007446:	ee61 7aa7 	vmul.f32	s15, s3, s15
 800744a:	3801      	subs	r0, #1
 800744c:	f1a1 0110 	sub.w	r1, r1, #16
 8007450:	ee75 4a26 	vadd.f32	s9, s10, s13
 8007454:	ee31 1a03 	vadd.f32	s2, s2, s6
 8007458:	ee73 3a86 	vadd.f32	s7, s7, s12
 800745c:	ee77 5a87 	vadd.f32	s11, s15, s14
 8007460:	f102 0210 	add.w	r2, r2, #16
 8007464:	d1a9      	bne.n	80073ba <arm_conv_f32+0x1c2>
 8007466:	19e9      	adds	r1, r5, r7
 8007468:	b1ec      	cbz	r4, 80074a6 <arm_conv_f32+0x2ae>
 800746a:	4660      	mov	r0, ip
 800746c:	4622      	mov	r2, r4
 800746e:	ed70 7a01 	vldmdb	r0!, {s15}
 8007472:	ecb1 7a01 	vldmia	r1!, {s14}
 8007476:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800747a:	ee22 6a27 	vmul.f32	s12, s4, s15
 800747e:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8007482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007486:	3a01      	subs	r2, #1
 8007488:	ee74 4aa2 	vadd.f32	s9, s9, s5
 800748c:	ee31 1a06 	vadd.f32	s2, s2, s12
 8007490:	eef0 2a42 	vmov.f32	s5, s4
 8007494:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8007498:	eeb0 2a61 	vmov.f32	s4, s3
 800749c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80074a0:	eef0 1a47 	vmov.f32	s3, s14
 80074a4:	d1e3      	bne.n	800746e <arm_conv_f32+0x276>
 80074a6:	ed4e 4a04 	vstr	s9, [lr, #-16]
 80074aa:	ed0e 1a03 	vstr	s2, [lr, #-12]
 80074ae:	ed4e 3a02 	vstr	s7, [lr, #-8]
 80074b2:	ed4e 5a01 	vstr	s11, [lr, #-4]
 80074b6:	f10e 0e10 	add.w	lr, lr, #16
 80074ba:	45de      	cmp	lr, fp
 80074bc:	f107 0710 	add.w	r7, r7, #16
 80074c0:	f47f af6a 	bne.w	8007398 <arm_conv_f32+0x1a0>
 80074c4:	9a03      	ldr	r2, [sp, #12]
 80074c6:	9d04      	ldr	r5, [sp, #16]
 80074c8:	9c05      	ldr	r4, [sp, #20]
 80074ca:	f1a2 0010 	sub.w	r0, r2, #16
 80074ce:	9a02      	ldr	r2, [sp, #8]
 80074d0:	4406      	add	r6, r0
 80074d2:	0092      	lsls	r2, r2, #2
 80074d4:	4440      	add	r0, r8
 80074d6:	9901      	ldr	r1, [sp, #4]
 80074d8:	f011 0703 	ands.w	r7, r1, #3
 80074dc:	f000 80c2 	beq.w	8007664 <arm_conv_f32+0x46c>
 80074e0:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 80074e4:	ea4f 190a 	mov.w	r9, sl, lsl #4
 80074e8:	f1c9 0904 	rsb	r9, r9, #4
 80074ec:	f003 0e03 	and.w	lr, r3, #3
 80074f0:	3201      	adds	r2, #1
 80074f2:	eb05 0309 	add.w	r3, r5, r9
 80074f6:	9502      	str	r5, [sp, #8]
 80074f8:	f1a5 0910 	sub.w	r9, r5, #16
 80074fc:	eb08 0c82 	add.w	ip, r8, r2, lsl #2
 8007500:	4675      	mov	r5, lr
 8007502:	eb06 0787 	add.w	r7, r6, r7, lsl #2
 8007506:	ea4f 1b0a 	mov.w	fp, sl, lsl #4
 800750a:	469e      	mov	lr, r3
 800750c:	ed5f 7a70 	vldr	s15, [pc, #-448]	; 8007350 <arm_conv_f32+0x158>
 8007510:	f100 0210 	add.w	r2, r0, #16
 8007514:	464b      	mov	r3, r9
 8007516:	4651      	mov	r1, sl
 8007518:	edd3 6a04 	vldr	s13, [r3, #16]
 800751c:	ed12 4a04 	vldr	s8, [r2, #-16]
 8007520:	ed52 3a03 	vldr	s7, [r2, #-12]
 8007524:	ed93 5a03 	vldr	s10, [r3, #12]
 8007528:	ed52 4a02 	vldr	s9, [r2, #-8]
 800752c:	ed93 6a02 	vldr	s12, [r3, #8]
 8007530:	ed52 5a01 	vldr	s11, [r2, #-4]
 8007534:	ed93 7a01 	vldr	s14, [r3, #4]
 8007538:	ee24 4a26 	vmul.f32	s8, s8, s13
 800753c:	ee23 5a85 	vmul.f32	s10, s7, s10
 8007540:	ee74 6a27 	vadd.f32	s13, s8, s15
 8007544:	ee24 6a86 	vmul.f32	s12, s9, s12
 8007548:	ee75 6a26 	vadd.f32	s13, s10, s13
 800754c:	ee25 7a87 	vmul.f32	s14, s11, s14
 8007550:	ee76 7a26 	vadd.f32	s15, s12, s13
 8007554:	3901      	subs	r1, #1
 8007556:	f102 0210 	add.w	r2, r2, #16
 800755a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800755e:	f1a3 0310 	sub.w	r3, r3, #16
 8007562:	d1d9      	bne.n	8007518 <arm_conv_f32+0x320>
 8007564:	4458      	add	r0, fp
 8007566:	b15d      	cbz	r5, 8007580 <arm_conv_f32+0x388>
 8007568:	4672      	mov	r2, lr
 800756a:	462b      	mov	r3, r5
 800756c:	ecf0 6a01 	vldmia	r0!, {s13}
 8007570:	ed32 7a01 	vldmdb	r2!, {s14}
 8007574:	ee26 7a87 	vmul.f32	s14, s13, s14
 8007578:	3b01      	subs	r3, #1
 800757a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800757e:	d1f5      	bne.n	800756c <arm_conv_f32+0x374>
 8007580:	ece6 7a01 	vstmia	r6!, {s15}
 8007584:	42be      	cmp	r6, r7
 8007586:	4660      	mov	r0, ip
 8007588:	f10c 0c04 	add.w	ip, ip, #4
 800758c:	d1be      	bne.n	800750c <arm_conv_f32+0x314>
 800758e:	9b01      	ldr	r3, [sp, #4]
 8007590:	9d02      	ldr	r5, [sp, #8]
 8007592:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007596:	44c8      	add	r8, r9
 8007598:	2c00      	cmp	r4, #0
 800759a:	f43f aed6 	beq.w	800734a <arm_conv_f32+0x152>
 800759e:	08a0      	lsrs	r0, r4, #2
 80075a0:	ed5f 7a95 	vldr	s15, [pc, #-596]	; 8007350 <arm_conv_f32+0x158>
 80075a4:	d047      	beq.n	8007636 <arm_conv_f32+0x43e>
 80075a6:	f108 0210 	add.w	r2, r8, #16
 80075aa:	f1a5 0310 	sub.w	r3, r5, #16
 80075ae:	4601      	mov	r1, r0
 80075b0:	edd3 6a04 	vldr	s13, [r3, #16]
 80075b4:	ed12 4a04 	vldr	s8, [r2, #-16]
 80075b8:	ed52 3a03 	vldr	s7, [r2, #-12]
 80075bc:	ed93 5a03 	vldr	s10, [r3, #12]
 80075c0:	ed52 4a02 	vldr	s9, [r2, #-8]
 80075c4:	ed93 6a02 	vldr	s12, [r3, #8]
 80075c8:	ed52 5a01 	vldr	s11, [r2, #-4]
 80075cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80075d0:	ee24 4a26 	vmul.f32	s8, s8, s13
 80075d4:	ee23 5a85 	vmul.f32	s10, s7, s10
 80075d8:	ee74 6a27 	vadd.f32	s13, s8, s15
 80075dc:	ee24 6a86 	vmul.f32	s12, s9, s12
 80075e0:	ee75 6a26 	vadd.f32	s13, s10, s13
 80075e4:	ee25 7a87 	vmul.f32	s14, s11, s14
 80075e8:	ee76 7a26 	vadd.f32	s15, s12, s13
 80075ec:	3901      	subs	r1, #1
 80075ee:	f102 0210 	add.w	r2, r2, #16
 80075f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075f6:	f1a3 0310 	sub.w	r3, r3, #16
 80075fa:	d1d9      	bne.n	80075b0 <arm_conv_f32+0x3b8>
 80075fc:	eb08 1100 	add.w	r1, r8, r0, lsl #4
 8007600:	eba5 1200 	sub.w	r2, r5, r0, lsl #4
 8007604:	f014 0303 	ands.w	r3, r4, #3
 8007608:	d00a      	beq.n	8007620 <arm_conv_f32+0x428>
 800760a:	3204      	adds	r2, #4
 800760c:	ecf1 6a01 	vldmia	r1!, {s13}
 8007610:	ed32 7a01 	vldmdb	r2!, {s14}
 8007614:	ee26 7a87 	vmul.f32	s14, s13, s14
 8007618:	3b01      	subs	r3, #1
 800761a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800761e:	d1f5      	bne.n	800760c <arm_conv_f32+0x414>
 8007620:	3c01      	subs	r4, #1
 8007622:	ece7 7a01 	vstmia	r7!, {s15}
 8007626:	f108 0804 	add.w	r8, r8, #4
 800762a:	f43f ae8e 	beq.w	800734a <arm_conv_f32+0x152>
 800762e:	08a0      	lsrs	r0, r4, #2
 8007630:	ed5f 7ab9 	vldr	s15, [pc, #-740]	; 8007350 <arm_conv_f32+0x158>
 8007634:	d1b7      	bne.n	80075a6 <arm_conv_f32+0x3ae>
 8007636:	462a      	mov	r2, r5
 8007638:	4641      	mov	r1, r8
 800763a:	e7e3      	b.n	8007604 <arm_conv_f32+0x40c>
 800763c:	4691      	mov	r9, r2
 800763e:	4637      	mov	r7, r6
 8007640:	e7a9      	b.n	8007596 <arm_conv_f32+0x39e>
 8007642:	4640      	mov	r0, r8
 8007644:	e747      	b.n	80074d6 <arm_conv_f32+0x2de>
 8007646:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000
 800764a:	3d01      	subs	r5, #1
 800764c:	e642      	b.n	80072d4 <arm_conv_f32+0xdc>
 800764e:	9a01      	ldr	r2, [sp, #4]
 8007650:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8007654:	4619      	mov	r1, r3
 8007656:	464a      	mov	r2, r9
 8007658:	4630      	mov	r0, r6
 800765a:	f000 f83d 	bl	80076d8 <memset>
 800765e:	eb06 0709 	add.w	r7, r6, r9
 8007662:	e798      	b.n	8007596 <arm_conv_f32+0x39e>
 8007664:	4637      	mov	r7, r6
 8007666:	ea4f 0981 	mov.w	r9, r1, lsl #2
 800766a:	e794      	b.n	8007596 <arm_conv_f32+0x39e>
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	ed5f 5ac8 	vldr	s11, [pc, #-800]	; 8007350 <arm_conv_f32+0x158>
 8007672:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8007676:	eb06 0709 	add.w	r7, r6, r9
 800767a:	4643      	mov	r3, r8
 800767c:	ed93 6a00 	vldr	s12, [r3]
 8007680:	ed95 7a00 	vldr	s14, [r5]
 8007684:	edd3 6a01 	vldr	s13, [r3, #4]
 8007688:	ed55 7a01 	vldr	s15, [r5, #-4]
 800768c:	3304      	adds	r3, #4
 800768e:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007696:	ee37 7a25 	vadd.f32	s14, s14, s11
 800769a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800769e:	ece6 7a01 	vstmia	r6!, {s15}
 80076a2:	42be      	cmp	r6, r7
 80076a4:	d1ea      	bne.n	800767c <arm_conv_f32+0x484>
 80076a6:	e776      	b.n	8007596 <arm_conv_f32+0x39e>
 80076a8:	9b01      	ldr	r3, [sp, #4]
 80076aa:	ed5f 6ad7 	vldr	s13, [pc, #-860]	; 8007350 <arm_conv_f32+0x158>
 80076ae:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80076b2:	eb06 0709 	add.w	r7, r6, r9
 80076b6:	4643      	mov	r3, r8
 80076b8:	ecb3 7a01 	vldmia	r3!, {s14}
 80076bc:	edd5 7a00 	vldr	s15, [r5]
 80076c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c8:	ece6 7a01 	vstmia	r6!, {s15}
 80076cc:	42be      	cmp	r6, r7
 80076ce:	d1f3      	bne.n	80076b8 <arm_conv_f32+0x4c0>
 80076d0:	e761      	b.n	8007596 <arm_conv_f32+0x39e>
 80076d2:	4647      	mov	r7, r8
 80076d4:	e5f6      	b.n	80072c4 <arm_conv_f32+0xcc>
 80076d6:	bf00      	nop

080076d8 <memset>:
 80076d8:	4402      	add	r2, r0
 80076da:	4603      	mov	r3, r0
 80076dc:	4293      	cmp	r3, r2
 80076de:	d100      	bne.n	80076e2 <memset+0xa>
 80076e0:	4770      	bx	lr
 80076e2:	f803 1b01 	strb.w	r1, [r3], #1
 80076e6:	e7f9      	b.n	80076dc <memset+0x4>

080076e8 <__errno>:
 80076e8:	4b01      	ldr	r3, [pc, #4]	; (80076f0 <__errno+0x8>)
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000498 	.word	0x20000498

080076f4 <__libc_init_array>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	4d0d      	ldr	r5, [pc, #52]	; (800772c <__libc_init_array+0x38>)
 80076f8:	4c0d      	ldr	r4, [pc, #52]	; (8007730 <__libc_init_array+0x3c>)
 80076fa:	1b64      	subs	r4, r4, r5
 80076fc:	10a4      	asrs	r4, r4, #2
 80076fe:	2600      	movs	r6, #0
 8007700:	42a6      	cmp	r6, r4
 8007702:	d109      	bne.n	8007718 <__libc_init_array+0x24>
 8007704:	4d0b      	ldr	r5, [pc, #44]	; (8007734 <__libc_init_array+0x40>)
 8007706:	4c0c      	ldr	r4, [pc, #48]	; (8007738 <__libc_init_array+0x44>)
 8007708:	f001 fbb0 	bl	8008e6c <_init>
 800770c:	1b64      	subs	r4, r4, r5
 800770e:	10a4      	asrs	r4, r4, #2
 8007710:	2600      	movs	r6, #0
 8007712:	42a6      	cmp	r6, r4
 8007714:	d105      	bne.n	8007722 <__libc_init_array+0x2e>
 8007716:	bd70      	pop	{r4, r5, r6, pc}
 8007718:	f855 3b04 	ldr.w	r3, [r5], #4
 800771c:	4798      	blx	r3
 800771e:	3601      	adds	r6, #1
 8007720:	e7ee      	b.n	8007700 <__libc_init_array+0xc>
 8007722:	f855 3b04 	ldr.w	r3, [r5], #4
 8007726:	4798      	blx	r3
 8007728:	3601      	adds	r6, #1
 800772a:	e7f2      	b.n	8007712 <__libc_init_array+0x1e>
 800772c:	080090b8 	.word	0x080090b8
 8007730:	080090b8 	.word	0x080090b8
 8007734:	080090b8 	.word	0x080090b8
 8007738:	080090bc 	.word	0x080090bc

0800773c <copysign>:
 800773c:	b082      	sub	sp, #8
 800773e:	ec51 0b10 	vmov	r0, r1, d0
 8007742:	ed8d 1b00 	vstr	d1, [sp]
 8007746:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 800774a:	9901      	ldr	r1, [sp, #4]
 800774c:	ee10 2a10 	vmov	r2, s0
 8007750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007754:	ea40 0301 	orr.w	r3, r0, r1
 8007758:	ec43 2b10 	vmov	d0, r2, r3
 800775c:	b002      	add	sp, #8
 800775e:	4770      	bx	lr

08007760 <remainder>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	ed2d 8b02 	vpush	{d8}
 8007766:	ec55 4b11 	vmov	r4, r5, d1
 800776a:	f000 fbdf 	bl	8007f2c <__ieee754_remainder>
 800776e:	4622      	mov	r2, r4
 8007770:	462b      	mov	r3, r5
 8007772:	4620      	mov	r0, r4
 8007774:	4629      	mov	r1, r5
 8007776:	eeb0 8a40 	vmov.f32	s16, s0
 800777a:	eef0 8a60 	vmov.f32	s17, s1
 800777e:	f7f9 f9a1 	bl	8000ac4 <__aeabi_dcmpun>
 8007782:	b990      	cbnz	r0, 80077aa <remainder+0x4a>
 8007784:	2200      	movs	r2, #0
 8007786:	2300      	movs	r3, #0
 8007788:	4620      	mov	r0, r4
 800778a:	4629      	mov	r1, r5
 800778c:	f7f9 f968 	bl	8000a60 <__aeabi_dcmpeq>
 8007790:	b158      	cbz	r0, 80077aa <remainder+0x4a>
 8007792:	f7ff ffa9 	bl	80076e8 <__errno>
 8007796:	2321      	movs	r3, #33	; 0x21
 8007798:	6003      	str	r3, [r0, #0]
 800779a:	2200      	movs	r2, #0
 800779c:	2300      	movs	r3, #0
 800779e:	4610      	mov	r0, r2
 80077a0:	4619      	mov	r1, r3
 80077a2:	f7f9 f81f 	bl	80007e4 <__aeabi_ddiv>
 80077a6:	ec41 0b18 	vmov	d8, r0, r1
 80077aa:	eeb0 0a48 	vmov.f32	s0, s16
 80077ae:	eef0 0a68 	vmov.f32	s1, s17
 80077b2:	ecbd 8b02 	vpop	{d8}
 80077b6:	bd38      	pop	{r3, r4, r5, pc}

080077b8 <sqrt>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	ed2d 8b02 	vpush	{d8}
 80077be:	ec55 4b10 	vmov	r4, r5, d0
 80077c2:	f000 f8d1 	bl	8007968 <__ieee754_sqrt>
 80077c6:	4622      	mov	r2, r4
 80077c8:	462b      	mov	r3, r5
 80077ca:	4620      	mov	r0, r4
 80077cc:	4629      	mov	r1, r5
 80077ce:	eeb0 8a40 	vmov.f32	s16, s0
 80077d2:	eef0 8a60 	vmov.f32	s17, s1
 80077d6:	f7f9 f975 	bl	8000ac4 <__aeabi_dcmpun>
 80077da:	b990      	cbnz	r0, 8007802 <sqrt+0x4a>
 80077dc:	2200      	movs	r2, #0
 80077de:	2300      	movs	r3, #0
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f9 f946 	bl	8000a74 <__aeabi_dcmplt>
 80077e8:	b158      	cbz	r0, 8007802 <sqrt+0x4a>
 80077ea:	f7ff ff7d 	bl	80076e8 <__errno>
 80077ee:	2321      	movs	r3, #33	; 0x21
 80077f0:	6003      	str	r3, [r0, #0]
 80077f2:	2200      	movs	r2, #0
 80077f4:	2300      	movs	r3, #0
 80077f6:	4610      	mov	r0, r2
 80077f8:	4619      	mov	r1, r3
 80077fa:	f7f8 fff3 	bl	80007e4 <__aeabi_ddiv>
 80077fe:	ec41 0b18 	vmov	d8, r0, r1
 8007802:	eeb0 0a48 	vmov.f32	s0, s16
 8007806:	eef0 0a68 	vmov.f32	s1, s17
 800780a:	ecbd 8b02 	vpop	{d8}
 800780e:	bd38      	pop	{r3, r4, r5, pc}

08007810 <cos>:
 8007810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007812:	ec53 2b10 	vmov	r2, r3, d0
 8007816:	4826      	ldr	r0, [pc, #152]	; (80078b0 <cos+0xa0>)
 8007818:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800781c:	4281      	cmp	r1, r0
 800781e:	dc06      	bgt.n	800782e <cos+0x1e>
 8007820:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80078a8 <cos+0x98>
 8007824:	b005      	add	sp, #20
 8007826:	f85d eb04 	ldr.w	lr, [sp], #4
 800782a:	f000 bf81 	b.w	8008730 <__kernel_cos>
 800782e:	4821      	ldr	r0, [pc, #132]	; (80078b4 <cos+0xa4>)
 8007830:	4281      	cmp	r1, r0
 8007832:	dd09      	ble.n	8007848 <cos+0x38>
 8007834:	ee10 0a10 	vmov	r0, s0
 8007838:	4619      	mov	r1, r3
 800783a:	f7f8 fcf1 	bl	8000220 <__aeabi_dsub>
 800783e:	ec41 0b10 	vmov	d0, r0, r1
 8007842:	b005      	add	sp, #20
 8007844:	f85d fb04 	ldr.w	pc, [sp], #4
 8007848:	4668      	mov	r0, sp
 800784a:	f000 f969 	bl	8007b20 <__ieee754_rem_pio2>
 800784e:	f000 0003 	and.w	r0, r0, #3
 8007852:	2801      	cmp	r0, #1
 8007854:	d00b      	beq.n	800786e <cos+0x5e>
 8007856:	2802      	cmp	r0, #2
 8007858:	d016      	beq.n	8007888 <cos+0x78>
 800785a:	b9e0      	cbnz	r0, 8007896 <cos+0x86>
 800785c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007860:	ed9d 0b00 	vldr	d0, [sp]
 8007864:	f000 ff64 	bl	8008730 <__kernel_cos>
 8007868:	ec51 0b10 	vmov	r0, r1, d0
 800786c:	e7e7      	b.n	800783e <cos+0x2e>
 800786e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007872:	ed9d 0b00 	vldr	d0, [sp]
 8007876:	f001 f823 	bl	80088c0 <__kernel_sin>
 800787a:	ec53 2b10 	vmov	r2, r3, d0
 800787e:	ee10 0a10 	vmov	r0, s0
 8007882:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007886:	e7da      	b.n	800783e <cos+0x2e>
 8007888:	ed9d 1b02 	vldr	d1, [sp, #8]
 800788c:	ed9d 0b00 	vldr	d0, [sp]
 8007890:	f000 ff4e 	bl	8008730 <__kernel_cos>
 8007894:	e7f1      	b.n	800787a <cos+0x6a>
 8007896:	ed9d 1b02 	vldr	d1, [sp, #8]
 800789a:	ed9d 0b00 	vldr	d0, [sp]
 800789e:	2001      	movs	r0, #1
 80078a0:	f001 f80e 	bl	80088c0 <__kernel_sin>
 80078a4:	e7e0      	b.n	8007868 <cos+0x58>
 80078a6:	bf00      	nop
	...
 80078b0:	3fe921fb 	.word	0x3fe921fb
 80078b4:	7fefffff 	.word	0x7fefffff

080078b8 <sin>:
 80078b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ba:	ec53 2b10 	vmov	r2, r3, d0
 80078be:	4828      	ldr	r0, [pc, #160]	; (8007960 <sin+0xa8>)
 80078c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80078c4:	4281      	cmp	r1, r0
 80078c6:	dc07      	bgt.n	80078d8 <sin+0x20>
 80078c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007958 <sin+0xa0>
 80078cc:	2000      	movs	r0, #0
 80078ce:	b005      	add	sp, #20
 80078d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078d4:	f000 bff4 	b.w	80088c0 <__kernel_sin>
 80078d8:	4822      	ldr	r0, [pc, #136]	; (8007964 <sin+0xac>)
 80078da:	4281      	cmp	r1, r0
 80078dc:	dd09      	ble.n	80078f2 <sin+0x3a>
 80078de:	ee10 0a10 	vmov	r0, s0
 80078e2:	4619      	mov	r1, r3
 80078e4:	f7f8 fc9c 	bl	8000220 <__aeabi_dsub>
 80078e8:	ec41 0b10 	vmov	d0, r0, r1
 80078ec:	b005      	add	sp, #20
 80078ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80078f2:	4668      	mov	r0, sp
 80078f4:	f000 f914 	bl	8007b20 <__ieee754_rem_pio2>
 80078f8:	f000 0003 	and.w	r0, r0, #3
 80078fc:	2801      	cmp	r0, #1
 80078fe:	d00c      	beq.n	800791a <sin+0x62>
 8007900:	2802      	cmp	r0, #2
 8007902:	d011      	beq.n	8007928 <sin+0x70>
 8007904:	b9f0      	cbnz	r0, 8007944 <sin+0x8c>
 8007906:	ed9d 1b02 	vldr	d1, [sp, #8]
 800790a:	ed9d 0b00 	vldr	d0, [sp]
 800790e:	2001      	movs	r0, #1
 8007910:	f000 ffd6 	bl	80088c0 <__kernel_sin>
 8007914:	ec51 0b10 	vmov	r0, r1, d0
 8007918:	e7e6      	b.n	80078e8 <sin+0x30>
 800791a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800791e:	ed9d 0b00 	vldr	d0, [sp]
 8007922:	f000 ff05 	bl	8008730 <__kernel_cos>
 8007926:	e7f5      	b.n	8007914 <sin+0x5c>
 8007928:	ed9d 1b02 	vldr	d1, [sp, #8]
 800792c:	ed9d 0b00 	vldr	d0, [sp]
 8007930:	2001      	movs	r0, #1
 8007932:	f000 ffc5 	bl	80088c0 <__kernel_sin>
 8007936:	ec53 2b10 	vmov	r2, r3, d0
 800793a:	ee10 0a10 	vmov	r0, s0
 800793e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007942:	e7d1      	b.n	80078e8 <sin+0x30>
 8007944:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007948:	ed9d 0b00 	vldr	d0, [sp]
 800794c:	f000 fef0 	bl	8008730 <__kernel_cos>
 8007950:	e7f1      	b.n	8007936 <sin+0x7e>
 8007952:	bf00      	nop
 8007954:	f3af 8000 	nop.w
	...
 8007960:	3fe921fb 	.word	0x3fe921fb
 8007964:	7fefffff 	.word	0x7fefffff

08007968 <__ieee754_sqrt>:
 8007968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	ec55 4b10 	vmov	r4, r5, d0
 8007970:	4e67      	ldr	r6, [pc, #412]	; (8007b10 <__ieee754_sqrt+0x1a8>)
 8007972:	43ae      	bics	r6, r5
 8007974:	ee10 0a10 	vmov	r0, s0
 8007978:	ee10 2a10 	vmov	r2, s0
 800797c:	4629      	mov	r1, r5
 800797e:	462b      	mov	r3, r5
 8007980:	d10d      	bne.n	800799e <__ieee754_sqrt+0x36>
 8007982:	f7f8 fe05 	bl	8000590 <__aeabi_dmul>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	4620      	mov	r0, r4
 800798c:	4629      	mov	r1, r5
 800798e:	f7f8 fc49 	bl	8000224 <__adddf3>
 8007992:	4604      	mov	r4, r0
 8007994:	460d      	mov	r5, r1
 8007996:	ec45 4b10 	vmov	d0, r4, r5
 800799a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799e:	2d00      	cmp	r5, #0
 80079a0:	dc0b      	bgt.n	80079ba <__ieee754_sqrt+0x52>
 80079a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80079a6:	4326      	orrs	r6, r4
 80079a8:	d0f5      	beq.n	8007996 <__ieee754_sqrt+0x2e>
 80079aa:	b135      	cbz	r5, 80079ba <__ieee754_sqrt+0x52>
 80079ac:	f7f8 fc38 	bl	8000220 <__aeabi_dsub>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	f7f8 ff16 	bl	80007e4 <__aeabi_ddiv>
 80079b8:	e7eb      	b.n	8007992 <__ieee754_sqrt+0x2a>
 80079ba:	1509      	asrs	r1, r1, #20
 80079bc:	f000 808d 	beq.w	8007ada <__ieee754_sqrt+0x172>
 80079c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079c4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80079c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079cc:	07c9      	lsls	r1, r1, #31
 80079ce:	bf5c      	itt	pl
 80079d0:	005b      	lslpl	r3, r3, #1
 80079d2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80079d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80079da:	bf58      	it	pl
 80079dc:	0052      	lslpl	r2, r2, #1
 80079de:	2500      	movs	r5, #0
 80079e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80079e4:	1076      	asrs	r6, r6, #1
 80079e6:	0052      	lsls	r2, r2, #1
 80079e8:	f04f 0e16 	mov.w	lr, #22
 80079ec:	46ac      	mov	ip, r5
 80079ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079f2:	eb0c 0001 	add.w	r0, ip, r1
 80079f6:	4298      	cmp	r0, r3
 80079f8:	bfde      	ittt	le
 80079fa:	1a1b      	suble	r3, r3, r0
 80079fc:	eb00 0c01 	addle.w	ip, r0, r1
 8007a00:	186d      	addle	r5, r5, r1
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	f1be 0e01 	subs.w	lr, lr, #1
 8007a08:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007a0c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007a10:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007a14:	d1ed      	bne.n	80079f2 <__ieee754_sqrt+0x8a>
 8007a16:	4674      	mov	r4, lr
 8007a18:	2720      	movs	r7, #32
 8007a1a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007a1e:	4563      	cmp	r3, ip
 8007a20:	eb01 000e 	add.w	r0, r1, lr
 8007a24:	dc02      	bgt.n	8007a2c <__ieee754_sqrt+0xc4>
 8007a26:	d113      	bne.n	8007a50 <__ieee754_sqrt+0xe8>
 8007a28:	4290      	cmp	r0, r2
 8007a2a:	d811      	bhi.n	8007a50 <__ieee754_sqrt+0xe8>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	eb00 0e01 	add.w	lr, r0, r1
 8007a32:	da57      	bge.n	8007ae4 <__ieee754_sqrt+0x17c>
 8007a34:	f1be 0f00 	cmp.w	lr, #0
 8007a38:	db54      	blt.n	8007ae4 <__ieee754_sqrt+0x17c>
 8007a3a:	f10c 0801 	add.w	r8, ip, #1
 8007a3e:	eba3 030c 	sub.w	r3, r3, ip
 8007a42:	4290      	cmp	r0, r2
 8007a44:	bf88      	it	hi
 8007a46:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007a4a:	1a12      	subs	r2, r2, r0
 8007a4c:	440c      	add	r4, r1
 8007a4e:	46c4      	mov	ip, r8
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	3f01      	subs	r7, #1
 8007a54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007a58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007a5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007a60:	d1dd      	bne.n	8007a1e <__ieee754_sqrt+0xb6>
 8007a62:	4313      	orrs	r3, r2
 8007a64:	d01b      	beq.n	8007a9e <__ieee754_sqrt+0x136>
 8007a66:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007b14 <__ieee754_sqrt+0x1ac>
 8007a6a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007b18 <__ieee754_sqrt+0x1b0>
 8007a6e:	e9da 0100 	ldrd	r0, r1, [sl]
 8007a72:	e9db 2300 	ldrd	r2, r3, [fp]
 8007a76:	f7f8 fbd3 	bl	8000220 <__aeabi_dsub>
 8007a7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f7f8 ffff 	bl	8000a88 <__aeabi_dcmple>
 8007a8a:	b140      	cbz	r0, 8007a9e <__ieee754_sqrt+0x136>
 8007a8c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007a90:	e9da 0100 	ldrd	r0, r1, [sl]
 8007a94:	e9db 2300 	ldrd	r2, r3, [fp]
 8007a98:	d126      	bne.n	8007ae8 <__ieee754_sqrt+0x180>
 8007a9a:	3501      	adds	r5, #1
 8007a9c:	463c      	mov	r4, r7
 8007a9e:	106a      	asrs	r2, r5, #1
 8007aa0:	0863      	lsrs	r3, r4, #1
 8007aa2:	07e9      	lsls	r1, r5, #31
 8007aa4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007aa8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007aac:	bf48      	it	mi
 8007aae:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8007ab2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8007ab6:	461c      	mov	r4, r3
 8007ab8:	e76d      	b.n	8007996 <__ieee754_sqrt+0x2e>
 8007aba:	0ad3      	lsrs	r3, r2, #11
 8007abc:	3815      	subs	r0, #21
 8007abe:	0552      	lsls	r2, r2, #21
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0fa      	beq.n	8007aba <__ieee754_sqrt+0x152>
 8007ac4:	02dc      	lsls	r4, r3, #11
 8007ac6:	d50a      	bpl.n	8007ade <__ieee754_sqrt+0x176>
 8007ac8:	f1c1 0420 	rsb	r4, r1, #32
 8007acc:	fa22 f404 	lsr.w	r4, r2, r4
 8007ad0:	1e4d      	subs	r5, r1, #1
 8007ad2:	408a      	lsls	r2, r1
 8007ad4:	4323      	orrs	r3, r4
 8007ad6:	1b41      	subs	r1, r0, r5
 8007ad8:	e772      	b.n	80079c0 <__ieee754_sqrt+0x58>
 8007ada:	4608      	mov	r0, r1
 8007adc:	e7f0      	b.n	8007ac0 <__ieee754_sqrt+0x158>
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	3101      	adds	r1, #1
 8007ae2:	e7ef      	b.n	8007ac4 <__ieee754_sqrt+0x15c>
 8007ae4:	46e0      	mov	r8, ip
 8007ae6:	e7aa      	b.n	8007a3e <__ieee754_sqrt+0xd6>
 8007ae8:	f7f8 fb9c 	bl	8000224 <__adddf3>
 8007aec:	e9da 8900 	ldrd	r8, r9, [sl]
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	4640      	mov	r0, r8
 8007af6:	4649      	mov	r1, r9
 8007af8:	f7f8 ffbc 	bl	8000a74 <__aeabi_dcmplt>
 8007afc:	b120      	cbz	r0, 8007b08 <__ieee754_sqrt+0x1a0>
 8007afe:	1ca0      	adds	r0, r4, #2
 8007b00:	bf08      	it	eq
 8007b02:	3501      	addeq	r5, #1
 8007b04:	3402      	adds	r4, #2
 8007b06:	e7ca      	b.n	8007a9e <__ieee754_sqrt+0x136>
 8007b08:	3401      	adds	r4, #1
 8007b0a:	f024 0401 	bic.w	r4, r4, #1
 8007b0e:	e7c6      	b.n	8007a9e <__ieee754_sqrt+0x136>
 8007b10:	7ff00000 	.word	0x7ff00000
 8007b14:	200004a0 	.word	0x200004a0
 8007b18:	200004a8 	.word	0x200004a8
 8007b1c:	00000000 	.word	0x00000000

08007b20 <__ieee754_rem_pio2>:
 8007b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b24:	ed2d 8b02 	vpush	{d8}
 8007b28:	ec55 4b10 	vmov	r4, r5, d0
 8007b2c:	4bca      	ldr	r3, [pc, #808]	; (8007e58 <__ieee754_rem_pio2+0x338>)
 8007b2e:	b08b      	sub	sp, #44	; 0x2c
 8007b30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007b34:	4598      	cmp	r8, r3
 8007b36:	4682      	mov	sl, r0
 8007b38:	9502      	str	r5, [sp, #8]
 8007b3a:	dc08      	bgt.n	8007b4e <__ieee754_rem_pio2+0x2e>
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	2300      	movs	r3, #0
 8007b40:	ed80 0b00 	vstr	d0, [r0]
 8007b44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007b48:	f04f 0b00 	mov.w	fp, #0
 8007b4c:	e028      	b.n	8007ba0 <__ieee754_rem_pio2+0x80>
 8007b4e:	4bc3      	ldr	r3, [pc, #780]	; (8007e5c <__ieee754_rem_pio2+0x33c>)
 8007b50:	4598      	cmp	r8, r3
 8007b52:	dc78      	bgt.n	8007c46 <__ieee754_rem_pio2+0x126>
 8007b54:	9b02      	ldr	r3, [sp, #8]
 8007b56:	4ec2      	ldr	r6, [pc, #776]	; (8007e60 <__ieee754_rem_pio2+0x340>)
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	ee10 0a10 	vmov	r0, s0
 8007b5e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007e20 <__ieee754_rem_pio2+0x300>)
 8007b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b64:	4629      	mov	r1, r5
 8007b66:	dd39      	ble.n	8007bdc <__ieee754_rem_pio2+0xbc>
 8007b68:	f7f8 fb5a 	bl	8000220 <__aeabi_dsub>
 8007b6c:	45b0      	cmp	r8, r6
 8007b6e:	4604      	mov	r4, r0
 8007b70:	460d      	mov	r5, r1
 8007b72:	d01b      	beq.n	8007bac <__ieee754_rem_pio2+0x8c>
 8007b74:	a3ac      	add	r3, pc, #688	; (adr r3, 8007e28 <__ieee754_rem_pio2+0x308>)
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f7f8 fb51 	bl	8000220 <__aeabi_dsub>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	e9ca 2300 	strd	r2, r3, [sl]
 8007b86:	4620      	mov	r0, r4
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7f8 fb49 	bl	8000220 <__aeabi_dsub>
 8007b8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8007e28 <__ieee754_rem_pio2+0x308>)
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	f7f8 fb44 	bl	8000220 <__aeabi_dsub>
 8007b98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b9c:	f04f 0b01 	mov.w	fp, #1
 8007ba0:	4658      	mov	r0, fp
 8007ba2:	b00b      	add	sp, #44	; 0x2c
 8007ba4:	ecbd 8b02 	vpop	{d8}
 8007ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bac:	a3a0      	add	r3, pc, #640	; (adr r3, 8007e30 <__ieee754_rem_pio2+0x310>)
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	f7f8 fb35 	bl	8000220 <__aeabi_dsub>
 8007bb6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007e38 <__ieee754_rem_pio2+0x318>)
 8007bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	460d      	mov	r5, r1
 8007bc0:	f7f8 fb2e 	bl	8000220 <__aeabi_dsub>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	e9ca 2300 	strd	r2, r3, [sl]
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7f8 fb26 	bl	8000220 <__aeabi_dsub>
 8007bd4:	a398      	add	r3, pc, #608	; (adr r3, 8007e38 <__ieee754_rem_pio2+0x318>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	e7db      	b.n	8007b94 <__ieee754_rem_pio2+0x74>
 8007bdc:	f7f8 fb22 	bl	8000224 <__adddf3>
 8007be0:	45b0      	cmp	r8, r6
 8007be2:	4604      	mov	r4, r0
 8007be4:	460d      	mov	r5, r1
 8007be6:	d016      	beq.n	8007c16 <__ieee754_rem_pio2+0xf6>
 8007be8:	a38f      	add	r3, pc, #572	; (adr r3, 8007e28 <__ieee754_rem_pio2+0x308>)
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f7f8 fb19 	bl	8000224 <__adddf3>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	e9ca 2300 	strd	r2, r3, [sl]
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	f7f8 fb0f 	bl	8000220 <__aeabi_dsub>
 8007c02:	a389      	add	r3, pc, #548	; (adr r3, 8007e28 <__ieee754_rem_pio2+0x308>)
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	f7f8 fb0c 	bl	8000224 <__adddf3>
 8007c0c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8007c10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007c14:	e7c4      	b.n	8007ba0 <__ieee754_rem_pio2+0x80>
 8007c16:	a386      	add	r3, pc, #536	; (adr r3, 8007e30 <__ieee754_rem_pio2+0x310>)
 8007c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1c:	f7f8 fb02 	bl	8000224 <__adddf3>
 8007c20:	a385      	add	r3, pc, #532	; (adr r3, 8007e38 <__ieee754_rem_pio2+0x318>)
 8007c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c26:	4604      	mov	r4, r0
 8007c28:	460d      	mov	r5, r1
 8007c2a:	f7f8 fafb 	bl	8000224 <__adddf3>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	e9ca 2300 	strd	r2, r3, [sl]
 8007c36:	4620      	mov	r0, r4
 8007c38:	4629      	mov	r1, r5
 8007c3a:	f7f8 faf1 	bl	8000220 <__aeabi_dsub>
 8007c3e:	a37e      	add	r3, pc, #504	; (adr r3, 8007e38 <__ieee754_rem_pio2+0x318>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	e7e0      	b.n	8007c08 <__ieee754_rem_pio2+0xe8>
 8007c46:	4b87      	ldr	r3, [pc, #540]	; (8007e64 <__ieee754_rem_pio2+0x344>)
 8007c48:	4598      	cmp	r8, r3
 8007c4a:	f300 80d8 	bgt.w	8007dfe <__ieee754_rem_pio2+0x2de>
 8007c4e:	f000 fef5 	bl	8008a3c <fabs>
 8007c52:	ec55 4b10 	vmov	r4, r5, d0
 8007c56:	ee10 0a10 	vmov	r0, s0
 8007c5a:	a379      	add	r3, pc, #484	; (adr r3, 8007e40 <__ieee754_rem_pio2+0x320>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 fc95 	bl	8000590 <__aeabi_dmul>
 8007c66:	4b80      	ldr	r3, [pc, #512]	; (8007e68 <__ieee754_rem_pio2+0x348>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f7f8 fadb 	bl	8000224 <__adddf3>
 8007c6e:	f7f8 ff3f 	bl	8000af0 <__aeabi_d2iz>
 8007c72:	4683      	mov	fp, r0
 8007c74:	f7f8 fc22 	bl	80004bc <__aeabi_i2d>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	ec43 2b18 	vmov	d8, r2, r3
 8007c80:	a367      	add	r3, pc, #412	; (adr r3, 8007e20 <__ieee754_rem_pio2+0x300>)
 8007c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c86:	f7f8 fc83 	bl	8000590 <__aeabi_dmul>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 fac5 	bl	8000220 <__aeabi_dsub>
 8007c96:	a364      	add	r3, pc, #400	; (adr r3, 8007e28 <__ieee754_rem_pio2+0x308>)
 8007c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9c:	4606      	mov	r6, r0
 8007c9e:	460f      	mov	r7, r1
 8007ca0:	ec51 0b18 	vmov	r0, r1, d8
 8007ca4:	f7f8 fc74 	bl	8000590 <__aeabi_dmul>
 8007ca8:	f1bb 0f1f 	cmp.w	fp, #31
 8007cac:	4604      	mov	r4, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	dc0d      	bgt.n	8007cce <__ieee754_rem_pio2+0x1ae>
 8007cb2:	4b6e      	ldr	r3, [pc, #440]	; (8007e6c <__ieee754_rem_pio2+0x34c>)
 8007cb4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8007cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cbc:	4543      	cmp	r3, r8
 8007cbe:	d006      	beq.n	8007cce <__ieee754_rem_pio2+0x1ae>
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	462b      	mov	r3, r5
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	4639      	mov	r1, r7
 8007cc8:	f7f8 faaa 	bl	8000220 <__aeabi_dsub>
 8007ccc:	e00e      	b.n	8007cec <__ieee754_rem_pio2+0x1cc>
 8007cce:	462b      	mov	r3, r5
 8007cd0:	4622      	mov	r2, r4
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 faa3 	bl	8000220 <__aeabi_dsub>
 8007cda:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007cde:	9303      	str	r3, [sp, #12]
 8007ce0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ce4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007ce8:	2b10      	cmp	r3, #16
 8007cea:	dc02      	bgt.n	8007cf2 <__ieee754_rem_pio2+0x1d2>
 8007cec:	e9ca 0100 	strd	r0, r1, [sl]
 8007cf0:	e039      	b.n	8007d66 <__ieee754_rem_pio2+0x246>
 8007cf2:	a34f      	add	r3, pc, #316	; (adr r3, 8007e30 <__ieee754_rem_pio2+0x310>)
 8007cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf8:	ec51 0b18 	vmov	r0, r1, d8
 8007cfc:	f7f8 fc48 	bl	8000590 <__aeabi_dmul>
 8007d00:	4604      	mov	r4, r0
 8007d02:	460d      	mov	r5, r1
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4630      	mov	r0, r6
 8007d0a:	4639      	mov	r1, r7
 8007d0c:	f7f8 fa88 	bl	8000220 <__aeabi_dsub>
 8007d10:	4602      	mov	r2, r0
 8007d12:	460b      	mov	r3, r1
 8007d14:	4680      	mov	r8, r0
 8007d16:	4689      	mov	r9, r1
 8007d18:	4630      	mov	r0, r6
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	f7f8 fa80 	bl	8000220 <__aeabi_dsub>
 8007d20:	4622      	mov	r2, r4
 8007d22:	462b      	mov	r3, r5
 8007d24:	f7f8 fa7c 	bl	8000220 <__aeabi_dsub>
 8007d28:	a343      	add	r3, pc, #268	; (adr r3, 8007e38 <__ieee754_rem_pio2+0x318>)
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	4604      	mov	r4, r0
 8007d30:	460d      	mov	r5, r1
 8007d32:	ec51 0b18 	vmov	r0, r1, d8
 8007d36:	f7f8 fc2b 	bl	8000590 <__aeabi_dmul>
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	462b      	mov	r3, r5
 8007d3e:	f7f8 fa6f 	bl	8000220 <__aeabi_dsub>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4604      	mov	r4, r0
 8007d48:	460d      	mov	r5, r1
 8007d4a:	4640      	mov	r0, r8
 8007d4c:	4649      	mov	r1, r9
 8007d4e:	f7f8 fa67 	bl	8000220 <__aeabi_dsub>
 8007d52:	9a03      	ldr	r2, [sp, #12]
 8007d54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	2b31      	cmp	r3, #49	; 0x31
 8007d5c:	dc24      	bgt.n	8007da8 <__ieee754_rem_pio2+0x288>
 8007d5e:	e9ca 0100 	strd	r0, r1, [sl]
 8007d62:	4646      	mov	r6, r8
 8007d64:	464f      	mov	r7, r9
 8007d66:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	4642      	mov	r2, r8
 8007d6e:	464b      	mov	r3, r9
 8007d70:	4639      	mov	r1, r7
 8007d72:	f7f8 fa55 	bl	8000220 <__aeabi_dsub>
 8007d76:	462b      	mov	r3, r5
 8007d78:	4622      	mov	r2, r4
 8007d7a:	f7f8 fa51 	bl	8000220 <__aeabi_dsub>
 8007d7e:	9b02      	ldr	r3, [sp, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d86:	f6bf af0b 	bge.w	8007ba0 <__ieee754_rem_pio2+0x80>
 8007d8a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d8e:	f8ca 3004 	str.w	r3, [sl, #4]
 8007d92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d96:	f8ca 8000 	str.w	r8, [sl]
 8007d9a:	f8ca 0008 	str.w	r0, [sl, #8]
 8007d9e:	f8ca 300c 	str.w	r3, [sl, #12]
 8007da2:	f1cb 0b00 	rsb	fp, fp, #0
 8007da6:	e6fb      	b.n	8007ba0 <__ieee754_rem_pio2+0x80>
 8007da8:	a327      	add	r3, pc, #156	; (adr r3, 8007e48 <__ieee754_rem_pio2+0x328>)
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	ec51 0b18 	vmov	r0, r1, d8
 8007db2:	f7f8 fbed 	bl	8000590 <__aeabi_dmul>
 8007db6:	4604      	mov	r4, r0
 8007db8:	460d      	mov	r5, r1
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 fa2d 	bl	8000220 <__aeabi_dsub>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460f      	mov	r7, r1
 8007dce:	4640      	mov	r0, r8
 8007dd0:	4649      	mov	r1, r9
 8007dd2:	f7f8 fa25 	bl	8000220 <__aeabi_dsub>
 8007dd6:	4622      	mov	r2, r4
 8007dd8:	462b      	mov	r3, r5
 8007dda:	f7f8 fa21 	bl	8000220 <__aeabi_dsub>
 8007dde:	a31c      	add	r3, pc, #112	; (adr r3, 8007e50 <__ieee754_rem_pio2+0x330>)
 8007de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de4:	4604      	mov	r4, r0
 8007de6:	460d      	mov	r5, r1
 8007de8:	ec51 0b18 	vmov	r0, r1, d8
 8007dec:	f7f8 fbd0 	bl	8000590 <__aeabi_dmul>
 8007df0:	4622      	mov	r2, r4
 8007df2:	462b      	mov	r3, r5
 8007df4:	f7f8 fa14 	bl	8000220 <__aeabi_dsub>
 8007df8:	4604      	mov	r4, r0
 8007dfa:	460d      	mov	r5, r1
 8007dfc:	e760      	b.n	8007cc0 <__ieee754_rem_pio2+0x1a0>
 8007dfe:	4b1c      	ldr	r3, [pc, #112]	; (8007e70 <__ieee754_rem_pio2+0x350>)
 8007e00:	4598      	cmp	r8, r3
 8007e02:	dd37      	ble.n	8007e74 <__ieee754_rem_pio2+0x354>
 8007e04:	ee10 2a10 	vmov	r2, s0
 8007e08:	462b      	mov	r3, r5
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	f7f8 fa07 	bl	8000220 <__aeabi_dsub>
 8007e12:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007e16:	e9ca 0100 	strd	r0, r1, [sl]
 8007e1a:	e695      	b.n	8007b48 <__ieee754_rem_pio2+0x28>
 8007e1c:	f3af 8000 	nop.w
 8007e20:	54400000 	.word	0x54400000
 8007e24:	3ff921fb 	.word	0x3ff921fb
 8007e28:	1a626331 	.word	0x1a626331
 8007e2c:	3dd0b461 	.word	0x3dd0b461
 8007e30:	1a600000 	.word	0x1a600000
 8007e34:	3dd0b461 	.word	0x3dd0b461
 8007e38:	2e037073 	.word	0x2e037073
 8007e3c:	3ba3198a 	.word	0x3ba3198a
 8007e40:	6dc9c883 	.word	0x6dc9c883
 8007e44:	3fe45f30 	.word	0x3fe45f30
 8007e48:	2e000000 	.word	0x2e000000
 8007e4c:	3ba3198a 	.word	0x3ba3198a
 8007e50:	252049c1 	.word	0x252049c1
 8007e54:	397b839a 	.word	0x397b839a
 8007e58:	3fe921fb 	.word	0x3fe921fb
 8007e5c:	4002d97b 	.word	0x4002d97b
 8007e60:	3ff921fb 	.word	0x3ff921fb
 8007e64:	413921fb 	.word	0x413921fb
 8007e68:	3fe00000 	.word	0x3fe00000
 8007e6c:	08008ec8 	.word	0x08008ec8
 8007e70:	7fefffff 	.word	0x7fefffff
 8007e74:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007e78:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007e7c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007e80:	4620      	mov	r0, r4
 8007e82:	460d      	mov	r5, r1
 8007e84:	f7f8 fe34 	bl	8000af0 <__aeabi_d2iz>
 8007e88:	f7f8 fb18 	bl	80004bc <__aeabi_i2d>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	4620      	mov	r0, r4
 8007e92:	4629      	mov	r1, r5
 8007e94:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e98:	f7f8 f9c2 	bl	8000220 <__aeabi_dsub>
 8007e9c:	4b21      	ldr	r3, [pc, #132]	; (8007f24 <__ieee754_rem_pio2+0x404>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f7f8 fb76 	bl	8000590 <__aeabi_dmul>
 8007ea4:	460d      	mov	r5, r1
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	f7f8 fe22 	bl	8000af0 <__aeabi_d2iz>
 8007eac:	f7f8 fb06 	bl	80004bc <__aeabi_i2d>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ebc:	f7f8 f9b0 	bl	8000220 <__aeabi_dsub>
 8007ec0:	4b18      	ldr	r3, [pc, #96]	; (8007f24 <__ieee754_rem_pio2+0x404>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f7f8 fb64 	bl	8000590 <__aeabi_dmul>
 8007ec8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ecc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007ed0:	2703      	movs	r7, #3
 8007ed2:	2400      	movs	r4, #0
 8007ed4:	2500      	movs	r5, #0
 8007ed6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8007eda:	4622      	mov	r2, r4
 8007edc:	462b      	mov	r3, r5
 8007ede:	46b9      	mov	r9, r7
 8007ee0:	3f01      	subs	r7, #1
 8007ee2:	f7f8 fdbd 	bl	8000a60 <__aeabi_dcmpeq>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d1f5      	bne.n	8007ed6 <__ieee754_rem_pio2+0x3b6>
 8007eea:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <__ieee754_rem_pio2+0x408>)
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	2302      	movs	r3, #2
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	4632      	mov	r2, r6
 8007ef4:	464b      	mov	r3, r9
 8007ef6:	4651      	mov	r1, sl
 8007ef8:	a804      	add	r0, sp, #16
 8007efa:	f000 f8c9 	bl	8008090 <__kernel_rem_pio2>
 8007efe:	9b02      	ldr	r3, [sp, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	4683      	mov	fp, r0
 8007f04:	f6bf ae4c 	bge.w	8007ba0 <__ieee754_rem_pio2+0x80>
 8007f08:	e9da 2100 	ldrd	r2, r1, [sl]
 8007f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f10:	e9ca 2300 	strd	r2, r3, [sl]
 8007f14:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007f18:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f1c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007f20:	e73f      	b.n	8007da2 <__ieee754_rem_pio2+0x282>
 8007f22:	bf00      	nop
 8007f24:	41700000 	.word	0x41700000
 8007f28:	08008f48 	.word	0x08008f48

08007f2c <__ieee754_remainder>:
 8007f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	ec57 6b11 	vmov	r6, r7, d1
 8007f34:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8007f38:	ea5a 0306 	orrs.w	r3, sl, r6
 8007f3c:	ec55 4b10 	vmov	r4, r5, d0
 8007f40:	ee11 ba10 	vmov	fp, s2
 8007f44:	46b8      	mov	r8, r7
 8007f46:	d10e      	bne.n	8007f66 <__ieee754_remainder+0x3a>
 8007f48:	4632      	mov	r2, r6
 8007f4a:	463b      	mov	r3, r7
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	4629      	mov	r1, r5
 8007f50:	f7f8 fb1e 	bl	8000590 <__aeabi_dmul>
 8007f54:	4602      	mov	r2, r0
 8007f56:	460b      	mov	r3, r1
 8007f58:	f7f8 fc44 	bl	80007e4 <__aeabi_ddiv>
 8007f5c:	ec41 0b10 	vmov	d0, r0, r1
 8007f60:	b003      	add	sp, #12
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	4b46      	ldr	r3, [pc, #280]	; (8008080 <__ieee754_remainder+0x154>)
 8007f68:	9501      	str	r5, [sp, #4]
 8007f6a:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8007f6e:	4599      	cmp	r9, r3
 8007f70:	dcea      	bgt.n	8007f48 <__ieee754_remainder+0x1c>
 8007f72:	459a      	cmp	sl, r3
 8007f74:	dd08      	ble.n	8007f88 <__ieee754_remainder+0x5c>
 8007f76:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8007f7a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007f7e:	4333      	orrs	r3, r6
 8007f80:	d1e2      	bne.n	8007f48 <__ieee754_remainder+0x1c>
 8007f82:	4620      	mov	r0, r4
 8007f84:	4629      	mov	r1, r5
 8007f86:	e012      	b.n	8007fae <__ieee754_remainder+0x82>
 8007f88:	4b3e      	ldr	r3, [pc, #248]	; (8008084 <__ieee754_remainder+0x158>)
 8007f8a:	459a      	cmp	sl, r3
 8007f8c:	dcf9      	bgt.n	8007f82 <__ieee754_remainder+0x56>
 8007f8e:	ee11 2a10 	vmov	r2, s2
 8007f92:	ee11 0a10 	vmov	r0, s2
 8007f96:	463b      	mov	r3, r7
 8007f98:	4639      	mov	r1, r7
 8007f9a:	f7f8 f943 	bl	8000224 <__adddf3>
 8007f9e:	ec45 4b10 	vmov	d0, r4, r5
 8007fa2:	ec41 0b11 	vmov	d1, r0, r1
 8007fa6:	f000 fe53 	bl	8008c50 <__ieee754_fmod>
 8007faa:	ec51 0b10 	vmov	r0, r1, d0
 8007fae:	eba9 090a 	sub.w	r9, r9, sl
 8007fb2:	eba4 040b 	sub.w	r4, r4, fp
 8007fb6:	ea59 0904 	orrs.w	r9, r9, r4
 8007fba:	d104      	bne.n	8007fc6 <__ieee754_remainder+0x9a>
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f7f8 fae6 	bl	8000590 <__aeabi_dmul>
 8007fc4:	e7ca      	b.n	8007f5c <__ieee754_remainder+0x30>
 8007fc6:	ec41 0b10 	vmov	d0, r0, r1
 8007fca:	f000 fd37 	bl	8008a3c <fabs>
 8007fce:	ec55 4b10 	vmov	r4, r5, d0
 8007fd2:	ec47 6b10 	vmov	d0, r6, r7
 8007fd6:	f000 fd31 	bl	8008a3c <fabs>
 8007fda:	4b2b      	ldr	r3, [pc, #172]	; (8008088 <__ieee754_remainder+0x15c>)
 8007fdc:	ea08 0303 	and.w	r3, r8, r3
 8007fe0:	ec57 6b10 	vmov	r6, r7, d0
 8007fe4:	bb63      	cbnz	r3, 8008040 <__ieee754_remainder+0x114>
 8007fe6:	4622      	mov	r2, r4
 8007fe8:	462b      	mov	r3, r5
 8007fea:	4620      	mov	r0, r4
 8007fec:	4629      	mov	r1, r5
 8007fee:	f7f8 f919 	bl	8000224 <__adddf3>
 8007ff2:	4632      	mov	r2, r6
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	f7f8 fd5b 	bl	8000ab0 <__aeabi_dcmpgt>
 8007ffa:	b1c0      	cbz	r0, 800802e <__ieee754_remainder+0x102>
 8007ffc:	4632      	mov	r2, r6
 8007ffe:	463b      	mov	r3, r7
 8008000:	4620      	mov	r0, r4
 8008002:	4629      	mov	r1, r5
 8008004:	f7f8 f90c 	bl	8000220 <__aeabi_dsub>
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	4604      	mov	r4, r0
 800800e:	460d      	mov	r5, r1
 8008010:	f7f8 f908 	bl	8000224 <__adddf3>
 8008014:	4632      	mov	r2, r6
 8008016:	463b      	mov	r3, r7
 8008018:	f7f8 fd40 	bl	8000a9c <__aeabi_dcmpge>
 800801c:	b138      	cbz	r0, 800802e <__ieee754_remainder+0x102>
 800801e:	4620      	mov	r0, r4
 8008020:	4629      	mov	r1, r5
 8008022:	4632      	mov	r2, r6
 8008024:	463b      	mov	r3, r7
 8008026:	f7f8 f8fb 	bl	8000220 <__aeabi_dsub>
 800802a:	4604      	mov	r4, r0
 800802c:	460d      	mov	r5, r1
 800802e:	9901      	ldr	r1, [sp, #4]
 8008030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008034:	4622      	mov	r2, r4
 8008036:	ea81 0305 	eor.w	r3, r1, r5
 800803a:	ec43 2b10 	vmov	d0, r2, r3
 800803e:	e78f      	b.n	8007f60 <__ieee754_remainder+0x34>
 8008040:	4b12      	ldr	r3, [pc, #72]	; (800808c <__ieee754_remainder+0x160>)
 8008042:	2200      	movs	r2, #0
 8008044:	ee10 0a10 	vmov	r0, s0
 8008048:	4639      	mov	r1, r7
 800804a:	f7f8 faa1 	bl	8000590 <__aeabi_dmul>
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fd29 	bl	8000ab0 <__aeabi_dcmpgt>
 800805e:	2800      	cmp	r0, #0
 8008060:	d0e5      	beq.n	800802e <__ieee754_remainder+0x102>
 8008062:	4632      	mov	r2, r6
 8008064:	463b      	mov	r3, r7
 8008066:	4620      	mov	r0, r4
 8008068:	4629      	mov	r1, r5
 800806a:	f7f8 f8d9 	bl	8000220 <__aeabi_dsub>
 800806e:	4604      	mov	r4, r0
 8008070:	460d      	mov	r5, r1
 8008072:	4602      	mov	r2, r0
 8008074:	460b      	mov	r3, r1
 8008076:	4640      	mov	r0, r8
 8008078:	4649      	mov	r1, r9
 800807a:	f7f8 fd05 	bl	8000a88 <__aeabi_dcmple>
 800807e:	e7cd      	b.n	800801c <__ieee754_remainder+0xf0>
 8008080:	7fefffff 	.word	0x7fefffff
 8008084:	7fdfffff 	.word	0x7fdfffff
 8008088:	7fe00000 	.word	0x7fe00000
 800808c:	3fe00000 	.word	0x3fe00000

08008090 <__kernel_rem_pio2>:
 8008090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008094:	ed2d 8b02 	vpush	{d8}
 8008098:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800809c:	f112 0f14 	cmn.w	r2, #20
 80080a0:	9306      	str	r3, [sp, #24]
 80080a2:	9104      	str	r1, [sp, #16]
 80080a4:	4bc2      	ldr	r3, [pc, #776]	; (80083b0 <__kernel_rem_pio2+0x320>)
 80080a6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80080a8:	9009      	str	r0, [sp, #36]	; 0x24
 80080aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	9b06      	ldr	r3, [sp, #24]
 80080b2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80080b6:	bfa8      	it	ge
 80080b8:	1ed4      	subge	r4, r2, #3
 80080ba:	9305      	str	r3, [sp, #20]
 80080bc:	bfb2      	itee	lt
 80080be:	2400      	movlt	r4, #0
 80080c0:	2318      	movge	r3, #24
 80080c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80080c6:	f06f 0317 	mvn.w	r3, #23
 80080ca:	fb04 3303 	mla	r3, r4, r3, r3
 80080ce:	eb03 0a02 	add.w	sl, r3, r2
 80080d2:	9b00      	ldr	r3, [sp, #0]
 80080d4:	9a05      	ldr	r2, [sp, #20]
 80080d6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80083a0 <__kernel_rem_pio2+0x310>
 80080da:	eb03 0802 	add.w	r8, r3, r2
 80080de:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80080e0:	1aa7      	subs	r7, r4, r2
 80080e2:	ae20      	add	r6, sp, #128	; 0x80
 80080e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80080e8:	2500      	movs	r5, #0
 80080ea:	4545      	cmp	r5, r8
 80080ec:	dd13      	ble.n	8008116 <__kernel_rem_pio2+0x86>
 80080ee:	9b06      	ldr	r3, [sp, #24]
 80080f0:	aa20      	add	r2, sp, #128	; 0x80
 80080f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80080f6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80080fa:	f04f 0800 	mov.w	r8, #0
 80080fe:	9b00      	ldr	r3, [sp, #0]
 8008100:	4598      	cmp	r8, r3
 8008102:	dc31      	bgt.n	8008168 <__kernel_rem_pio2+0xd8>
 8008104:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80083a0 <__kernel_rem_pio2+0x310>
 8008108:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800810c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008110:	462f      	mov	r7, r5
 8008112:	2600      	movs	r6, #0
 8008114:	e01b      	b.n	800814e <__kernel_rem_pio2+0xbe>
 8008116:	42ef      	cmn	r7, r5
 8008118:	d407      	bmi.n	800812a <__kernel_rem_pio2+0x9a>
 800811a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800811e:	f7f8 f9cd 	bl	80004bc <__aeabi_i2d>
 8008122:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008126:	3501      	adds	r5, #1
 8008128:	e7df      	b.n	80080ea <__kernel_rem_pio2+0x5a>
 800812a:	ec51 0b18 	vmov	r0, r1, d8
 800812e:	e7f8      	b.n	8008122 <__kernel_rem_pio2+0x92>
 8008130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008134:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008138:	f7f8 fa2a 	bl	8000590 <__aeabi_dmul>
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008144:	f7f8 f86e 	bl	8000224 <__adddf3>
 8008148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800814c:	3601      	adds	r6, #1
 800814e:	9b05      	ldr	r3, [sp, #20]
 8008150:	429e      	cmp	r6, r3
 8008152:	f1a7 0708 	sub.w	r7, r7, #8
 8008156:	ddeb      	ble.n	8008130 <__kernel_rem_pio2+0xa0>
 8008158:	ed9d 7b02 	vldr	d7, [sp, #8]
 800815c:	f108 0801 	add.w	r8, r8, #1
 8008160:	ecab 7b02 	vstmia	fp!, {d7}
 8008164:	3508      	adds	r5, #8
 8008166:	e7ca      	b.n	80080fe <__kernel_rem_pio2+0x6e>
 8008168:	9b00      	ldr	r3, [sp, #0]
 800816a:	aa0c      	add	r2, sp, #48	; 0x30
 800816c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008170:	930b      	str	r3, [sp, #44]	; 0x2c
 8008172:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008174:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008178:	9c00      	ldr	r4, [sp, #0]
 800817a:	930a      	str	r3, [sp, #40]	; 0x28
 800817c:	00e3      	lsls	r3, r4, #3
 800817e:	9308      	str	r3, [sp, #32]
 8008180:	ab98      	add	r3, sp, #608	; 0x260
 8008182:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008186:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800818a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800818e:	ab70      	add	r3, sp, #448	; 0x1c0
 8008190:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8008194:	46c3      	mov	fp, r8
 8008196:	46a1      	mov	r9, r4
 8008198:	f1b9 0f00 	cmp.w	r9, #0
 800819c:	f1a5 0508 	sub.w	r5, r5, #8
 80081a0:	dc77      	bgt.n	8008292 <__kernel_rem_pio2+0x202>
 80081a2:	ec47 6b10 	vmov	d0, r6, r7
 80081a6:	4650      	mov	r0, sl
 80081a8:	f000 fc52 	bl	8008a50 <scalbn>
 80081ac:	ec57 6b10 	vmov	r6, r7, d0
 80081b0:	2200      	movs	r2, #0
 80081b2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80081b6:	ee10 0a10 	vmov	r0, s0
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 f9e8 	bl	8000590 <__aeabi_dmul>
 80081c0:	ec41 0b10 	vmov	d0, r0, r1
 80081c4:	f000 fcc4 	bl	8008b50 <floor>
 80081c8:	4b7a      	ldr	r3, [pc, #488]	; (80083b4 <__kernel_rem_pio2+0x324>)
 80081ca:	ec51 0b10 	vmov	r0, r1, d0
 80081ce:	2200      	movs	r2, #0
 80081d0:	f7f8 f9de 	bl	8000590 <__aeabi_dmul>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4630      	mov	r0, r6
 80081da:	4639      	mov	r1, r7
 80081dc:	f7f8 f820 	bl	8000220 <__aeabi_dsub>
 80081e0:	460f      	mov	r7, r1
 80081e2:	4606      	mov	r6, r0
 80081e4:	f7f8 fc84 	bl	8000af0 <__aeabi_d2iz>
 80081e8:	9002      	str	r0, [sp, #8]
 80081ea:	f7f8 f967 	bl	80004bc <__aeabi_i2d>
 80081ee:	4602      	mov	r2, r0
 80081f0:	460b      	mov	r3, r1
 80081f2:	4630      	mov	r0, r6
 80081f4:	4639      	mov	r1, r7
 80081f6:	f7f8 f813 	bl	8000220 <__aeabi_dsub>
 80081fa:	f1ba 0f00 	cmp.w	sl, #0
 80081fe:	4606      	mov	r6, r0
 8008200:	460f      	mov	r7, r1
 8008202:	dd6d      	ble.n	80082e0 <__kernel_rem_pio2+0x250>
 8008204:	1e61      	subs	r1, r4, #1
 8008206:	ab0c      	add	r3, sp, #48	; 0x30
 8008208:	9d02      	ldr	r5, [sp, #8]
 800820a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800820e:	f1ca 0018 	rsb	r0, sl, #24
 8008212:	fa43 f200 	asr.w	r2, r3, r0
 8008216:	4415      	add	r5, r2
 8008218:	4082      	lsls	r2, r0
 800821a:	1a9b      	subs	r3, r3, r2
 800821c:	aa0c      	add	r2, sp, #48	; 0x30
 800821e:	9502      	str	r5, [sp, #8]
 8008220:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008224:	f1ca 0217 	rsb	r2, sl, #23
 8008228:	fa43 fb02 	asr.w	fp, r3, r2
 800822c:	f1bb 0f00 	cmp.w	fp, #0
 8008230:	dd65      	ble.n	80082fe <__kernel_rem_pio2+0x26e>
 8008232:	9b02      	ldr	r3, [sp, #8]
 8008234:	2200      	movs	r2, #0
 8008236:	3301      	adds	r3, #1
 8008238:	9302      	str	r3, [sp, #8]
 800823a:	4615      	mov	r5, r2
 800823c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008240:	4294      	cmp	r4, r2
 8008242:	f300 809f 	bgt.w	8008384 <__kernel_rem_pio2+0x2f4>
 8008246:	f1ba 0f00 	cmp.w	sl, #0
 800824a:	dd07      	ble.n	800825c <__kernel_rem_pio2+0x1cc>
 800824c:	f1ba 0f01 	cmp.w	sl, #1
 8008250:	f000 80c1 	beq.w	80083d6 <__kernel_rem_pio2+0x346>
 8008254:	f1ba 0f02 	cmp.w	sl, #2
 8008258:	f000 80c7 	beq.w	80083ea <__kernel_rem_pio2+0x35a>
 800825c:	f1bb 0f02 	cmp.w	fp, #2
 8008260:	d14d      	bne.n	80082fe <__kernel_rem_pio2+0x26e>
 8008262:	4632      	mov	r2, r6
 8008264:	463b      	mov	r3, r7
 8008266:	4954      	ldr	r1, [pc, #336]	; (80083b8 <__kernel_rem_pio2+0x328>)
 8008268:	2000      	movs	r0, #0
 800826a:	f7f7 ffd9 	bl	8000220 <__aeabi_dsub>
 800826e:	4606      	mov	r6, r0
 8008270:	460f      	mov	r7, r1
 8008272:	2d00      	cmp	r5, #0
 8008274:	d043      	beq.n	80082fe <__kernel_rem_pio2+0x26e>
 8008276:	4650      	mov	r0, sl
 8008278:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80083a8 <__kernel_rem_pio2+0x318>
 800827c:	f000 fbe8 	bl	8008a50 <scalbn>
 8008280:	4630      	mov	r0, r6
 8008282:	4639      	mov	r1, r7
 8008284:	ec53 2b10 	vmov	r2, r3, d0
 8008288:	f7f7 ffca 	bl	8000220 <__aeabi_dsub>
 800828c:	4606      	mov	r6, r0
 800828e:	460f      	mov	r7, r1
 8008290:	e035      	b.n	80082fe <__kernel_rem_pio2+0x26e>
 8008292:	4b4a      	ldr	r3, [pc, #296]	; (80083bc <__kernel_rem_pio2+0x32c>)
 8008294:	2200      	movs	r2, #0
 8008296:	4630      	mov	r0, r6
 8008298:	4639      	mov	r1, r7
 800829a:	f7f8 f979 	bl	8000590 <__aeabi_dmul>
 800829e:	f7f8 fc27 	bl	8000af0 <__aeabi_d2iz>
 80082a2:	f7f8 f90b 	bl	80004bc <__aeabi_i2d>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	ec43 2b18 	vmov	d8, r2, r3
 80082ae:	4b44      	ldr	r3, [pc, #272]	; (80083c0 <__kernel_rem_pio2+0x330>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	f7f8 f96d 	bl	8000590 <__aeabi_dmul>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4630      	mov	r0, r6
 80082bc:	4639      	mov	r1, r7
 80082be:	f7f7 ffaf 	bl	8000220 <__aeabi_dsub>
 80082c2:	f7f8 fc15 	bl	8000af0 <__aeabi_d2iz>
 80082c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082ca:	f84b 0b04 	str.w	r0, [fp], #4
 80082ce:	ec51 0b18 	vmov	r0, r1, d8
 80082d2:	f7f7 ffa7 	bl	8000224 <__adddf3>
 80082d6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80082da:	4606      	mov	r6, r0
 80082dc:	460f      	mov	r7, r1
 80082de:	e75b      	b.n	8008198 <__kernel_rem_pio2+0x108>
 80082e0:	d106      	bne.n	80082f0 <__kernel_rem_pio2+0x260>
 80082e2:	1e63      	subs	r3, r4, #1
 80082e4:	aa0c      	add	r2, sp, #48	; 0x30
 80082e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ea:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80082ee:	e79d      	b.n	800822c <__kernel_rem_pio2+0x19c>
 80082f0:	4b34      	ldr	r3, [pc, #208]	; (80083c4 <__kernel_rem_pio2+0x334>)
 80082f2:	2200      	movs	r2, #0
 80082f4:	f7f8 fbd2 	bl	8000a9c <__aeabi_dcmpge>
 80082f8:	2800      	cmp	r0, #0
 80082fa:	d140      	bne.n	800837e <__kernel_rem_pio2+0x2ee>
 80082fc:	4683      	mov	fp, r0
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	4630      	mov	r0, r6
 8008304:	4639      	mov	r1, r7
 8008306:	f7f8 fbab 	bl	8000a60 <__aeabi_dcmpeq>
 800830a:	2800      	cmp	r0, #0
 800830c:	f000 80c1 	beq.w	8008492 <__kernel_rem_pio2+0x402>
 8008310:	1e65      	subs	r5, r4, #1
 8008312:	462b      	mov	r3, r5
 8008314:	2200      	movs	r2, #0
 8008316:	9900      	ldr	r1, [sp, #0]
 8008318:	428b      	cmp	r3, r1
 800831a:	da6d      	bge.n	80083f8 <__kernel_rem_pio2+0x368>
 800831c:	2a00      	cmp	r2, #0
 800831e:	f000 808a 	beq.w	8008436 <__kernel_rem_pio2+0x3a6>
 8008322:	ab0c      	add	r3, sp, #48	; 0x30
 8008324:	f1aa 0a18 	sub.w	sl, sl, #24
 8008328:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 80ae 	beq.w	800848e <__kernel_rem_pio2+0x3fe>
 8008332:	4650      	mov	r0, sl
 8008334:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80083a8 <__kernel_rem_pio2+0x318>
 8008338:	f000 fb8a 	bl	8008a50 <scalbn>
 800833c:	1c6b      	adds	r3, r5, #1
 800833e:	00da      	lsls	r2, r3, #3
 8008340:	9205      	str	r2, [sp, #20]
 8008342:	ec57 6b10 	vmov	r6, r7, d0
 8008346:	aa70      	add	r2, sp, #448	; 0x1c0
 8008348:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80083bc <__kernel_rem_pio2+0x32c>
 800834c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8008350:	462c      	mov	r4, r5
 8008352:	f04f 0800 	mov.w	r8, #0
 8008356:	2c00      	cmp	r4, #0
 8008358:	f280 80d4 	bge.w	8008504 <__kernel_rem_pio2+0x474>
 800835c:	462c      	mov	r4, r5
 800835e:	2c00      	cmp	r4, #0
 8008360:	f2c0 8102 	blt.w	8008568 <__kernel_rem_pio2+0x4d8>
 8008364:	4b18      	ldr	r3, [pc, #96]	; (80083c8 <__kernel_rem_pio2+0x338>)
 8008366:	461e      	mov	r6, r3
 8008368:	ab70      	add	r3, sp, #448	; 0x1c0
 800836a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800836e:	1b2b      	subs	r3, r5, r4
 8008370:	f04f 0900 	mov.w	r9, #0
 8008374:	f04f 0a00 	mov.w	sl, #0
 8008378:	2700      	movs	r7, #0
 800837a:	9306      	str	r3, [sp, #24]
 800837c:	e0e6      	b.n	800854c <__kernel_rem_pio2+0x4bc>
 800837e:	f04f 0b02 	mov.w	fp, #2
 8008382:	e756      	b.n	8008232 <__kernel_rem_pio2+0x1a2>
 8008384:	f8d8 3000 	ldr.w	r3, [r8]
 8008388:	bb05      	cbnz	r5, 80083cc <__kernel_rem_pio2+0x33c>
 800838a:	b123      	cbz	r3, 8008396 <__kernel_rem_pio2+0x306>
 800838c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008390:	f8c8 3000 	str.w	r3, [r8]
 8008394:	2301      	movs	r3, #1
 8008396:	3201      	adds	r2, #1
 8008398:	f108 0804 	add.w	r8, r8, #4
 800839c:	461d      	mov	r5, r3
 800839e:	e74f      	b.n	8008240 <__kernel_rem_pio2+0x1b0>
	...
 80083ac:	3ff00000 	.word	0x3ff00000
 80083b0:	08009090 	.word	0x08009090
 80083b4:	40200000 	.word	0x40200000
 80083b8:	3ff00000 	.word	0x3ff00000
 80083bc:	3e700000 	.word	0x3e700000
 80083c0:	41700000 	.word	0x41700000
 80083c4:	3fe00000 	.word	0x3fe00000
 80083c8:	08009050 	.word	0x08009050
 80083cc:	1acb      	subs	r3, r1, r3
 80083ce:	f8c8 3000 	str.w	r3, [r8]
 80083d2:	462b      	mov	r3, r5
 80083d4:	e7df      	b.n	8008396 <__kernel_rem_pio2+0x306>
 80083d6:	1e62      	subs	r2, r4, #1
 80083d8:	ab0c      	add	r3, sp, #48	; 0x30
 80083da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80083e2:	a90c      	add	r1, sp, #48	; 0x30
 80083e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80083e8:	e738      	b.n	800825c <__kernel_rem_pio2+0x1cc>
 80083ea:	1e62      	subs	r2, r4, #1
 80083ec:	ab0c      	add	r3, sp, #48	; 0x30
 80083ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80083f6:	e7f4      	b.n	80083e2 <__kernel_rem_pio2+0x352>
 80083f8:	a90c      	add	r1, sp, #48	; 0x30
 80083fa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80083fe:	3b01      	subs	r3, #1
 8008400:	430a      	orrs	r2, r1
 8008402:	e788      	b.n	8008316 <__kernel_rem_pio2+0x286>
 8008404:	3301      	adds	r3, #1
 8008406:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800840a:	2900      	cmp	r1, #0
 800840c:	d0fa      	beq.n	8008404 <__kernel_rem_pio2+0x374>
 800840e:	9a08      	ldr	r2, [sp, #32]
 8008410:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8008414:	446a      	add	r2, sp
 8008416:	3a98      	subs	r2, #152	; 0x98
 8008418:	9208      	str	r2, [sp, #32]
 800841a:	9a06      	ldr	r2, [sp, #24]
 800841c:	a920      	add	r1, sp, #128	; 0x80
 800841e:	18a2      	adds	r2, r4, r2
 8008420:	18e3      	adds	r3, r4, r3
 8008422:	f104 0801 	add.w	r8, r4, #1
 8008426:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800842a:	9302      	str	r3, [sp, #8]
 800842c:	9b02      	ldr	r3, [sp, #8]
 800842e:	4543      	cmp	r3, r8
 8008430:	da04      	bge.n	800843c <__kernel_rem_pio2+0x3ac>
 8008432:	461c      	mov	r4, r3
 8008434:	e6a2      	b.n	800817c <__kernel_rem_pio2+0xec>
 8008436:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008438:	2301      	movs	r3, #1
 800843a:	e7e4      	b.n	8008406 <__kernel_rem_pio2+0x376>
 800843c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800843e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008442:	f7f8 f83b 	bl	80004bc <__aeabi_i2d>
 8008446:	e8e5 0102 	strd	r0, r1, [r5], #8
 800844a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800844c:	46ab      	mov	fp, r5
 800844e:	461c      	mov	r4, r3
 8008450:	f04f 0900 	mov.w	r9, #0
 8008454:	2600      	movs	r6, #0
 8008456:	2700      	movs	r7, #0
 8008458:	9b05      	ldr	r3, [sp, #20]
 800845a:	4599      	cmp	r9, r3
 800845c:	dd06      	ble.n	800846c <__kernel_rem_pio2+0x3dc>
 800845e:	9b08      	ldr	r3, [sp, #32]
 8008460:	e8e3 6702 	strd	r6, r7, [r3], #8
 8008464:	f108 0801 	add.w	r8, r8, #1
 8008468:	9308      	str	r3, [sp, #32]
 800846a:	e7df      	b.n	800842c <__kernel_rem_pio2+0x39c>
 800846c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008470:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008474:	f7f8 f88c 	bl	8000590 <__aeabi_dmul>
 8008478:	4602      	mov	r2, r0
 800847a:	460b      	mov	r3, r1
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f7 fed0 	bl	8000224 <__adddf3>
 8008484:	f109 0901 	add.w	r9, r9, #1
 8008488:	4606      	mov	r6, r0
 800848a:	460f      	mov	r7, r1
 800848c:	e7e4      	b.n	8008458 <__kernel_rem_pio2+0x3c8>
 800848e:	3d01      	subs	r5, #1
 8008490:	e747      	b.n	8008322 <__kernel_rem_pio2+0x292>
 8008492:	ec47 6b10 	vmov	d0, r6, r7
 8008496:	f1ca 0000 	rsb	r0, sl, #0
 800849a:	f000 fad9 	bl	8008a50 <scalbn>
 800849e:	ec57 6b10 	vmov	r6, r7, d0
 80084a2:	4ba0      	ldr	r3, [pc, #640]	; (8008724 <__kernel_rem_pio2+0x694>)
 80084a4:	ee10 0a10 	vmov	r0, s0
 80084a8:	2200      	movs	r2, #0
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f8 faf6 	bl	8000a9c <__aeabi_dcmpge>
 80084b0:	b1f8      	cbz	r0, 80084f2 <__kernel_rem_pio2+0x462>
 80084b2:	4b9d      	ldr	r3, [pc, #628]	; (8008728 <__kernel_rem_pio2+0x698>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	4630      	mov	r0, r6
 80084b8:	4639      	mov	r1, r7
 80084ba:	f7f8 f869 	bl	8000590 <__aeabi_dmul>
 80084be:	f7f8 fb17 	bl	8000af0 <__aeabi_d2iz>
 80084c2:	4680      	mov	r8, r0
 80084c4:	f7f7 fffa 	bl	80004bc <__aeabi_i2d>
 80084c8:	4b96      	ldr	r3, [pc, #600]	; (8008724 <__kernel_rem_pio2+0x694>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	f7f8 f860 	bl	8000590 <__aeabi_dmul>
 80084d0:	460b      	mov	r3, r1
 80084d2:	4602      	mov	r2, r0
 80084d4:	4639      	mov	r1, r7
 80084d6:	4630      	mov	r0, r6
 80084d8:	f7f7 fea2 	bl	8000220 <__aeabi_dsub>
 80084dc:	f7f8 fb08 	bl	8000af0 <__aeabi_d2iz>
 80084e0:	1c65      	adds	r5, r4, #1
 80084e2:	ab0c      	add	r3, sp, #48	; 0x30
 80084e4:	f10a 0a18 	add.w	sl, sl, #24
 80084e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80084ec:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80084f0:	e71f      	b.n	8008332 <__kernel_rem_pio2+0x2a2>
 80084f2:	4630      	mov	r0, r6
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f8 fafb 	bl	8000af0 <__aeabi_d2iz>
 80084fa:	ab0c      	add	r3, sp, #48	; 0x30
 80084fc:	4625      	mov	r5, r4
 80084fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008502:	e716      	b.n	8008332 <__kernel_rem_pio2+0x2a2>
 8008504:	ab0c      	add	r3, sp, #48	; 0x30
 8008506:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800850a:	f7f7 ffd7 	bl	80004bc <__aeabi_i2d>
 800850e:	4632      	mov	r2, r6
 8008510:	463b      	mov	r3, r7
 8008512:	f7f8 f83d 	bl	8000590 <__aeabi_dmul>
 8008516:	4642      	mov	r2, r8
 8008518:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800851c:	464b      	mov	r3, r9
 800851e:	4630      	mov	r0, r6
 8008520:	4639      	mov	r1, r7
 8008522:	f7f8 f835 	bl	8000590 <__aeabi_dmul>
 8008526:	3c01      	subs	r4, #1
 8008528:	4606      	mov	r6, r0
 800852a:	460f      	mov	r7, r1
 800852c:	e713      	b.n	8008356 <__kernel_rem_pio2+0x2c6>
 800852e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8008532:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8008536:	f7f8 f82b 	bl	8000590 <__aeabi_dmul>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4648      	mov	r0, r9
 8008540:	4651      	mov	r1, sl
 8008542:	f7f7 fe6f 	bl	8000224 <__adddf3>
 8008546:	3701      	adds	r7, #1
 8008548:	4681      	mov	r9, r0
 800854a:	468a      	mov	sl, r1
 800854c:	9b00      	ldr	r3, [sp, #0]
 800854e:	429f      	cmp	r7, r3
 8008550:	dc02      	bgt.n	8008558 <__kernel_rem_pio2+0x4c8>
 8008552:	9b06      	ldr	r3, [sp, #24]
 8008554:	429f      	cmp	r7, r3
 8008556:	ddea      	ble.n	800852e <__kernel_rem_pio2+0x49e>
 8008558:	9a06      	ldr	r2, [sp, #24]
 800855a:	ab48      	add	r3, sp, #288	; 0x120
 800855c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8008560:	e9c6 9a00 	strd	r9, sl, [r6]
 8008564:	3c01      	subs	r4, #1
 8008566:	e6fa      	b.n	800835e <__kernel_rem_pio2+0x2ce>
 8008568:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800856a:	2b02      	cmp	r3, #2
 800856c:	dc0b      	bgt.n	8008586 <__kernel_rem_pio2+0x4f6>
 800856e:	2b00      	cmp	r3, #0
 8008570:	dc39      	bgt.n	80085e6 <__kernel_rem_pio2+0x556>
 8008572:	d05d      	beq.n	8008630 <__kernel_rem_pio2+0x5a0>
 8008574:	9b02      	ldr	r3, [sp, #8]
 8008576:	f003 0007 	and.w	r0, r3, #7
 800857a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800857e:	ecbd 8b02 	vpop	{d8}
 8008582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008586:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008588:	2b03      	cmp	r3, #3
 800858a:	d1f3      	bne.n	8008574 <__kernel_rem_pio2+0x4e4>
 800858c:	9b05      	ldr	r3, [sp, #20]
 800858e:	9500      	str	r5, [sp, #0]
 8008590:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8008594:	eb0d 0403 	add.w	r4, sp, r3
 8008598:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800859c:	46a2      	mov	sl, r4
 800859e:	9b00      	ldr	r3, [sp, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f1aa 0a08 	sub.w	sl, sl, #8
 80085a6:	dc69      	bgt.n	800867c <__kernel_rem_pio2+0x5ec>
 80085a8:	46aa      	mov	sl, r5
 80085aa:	f1ba 0f01 	cmp.w	sl, #1
 80085ae:	f1a4 0408 	sub.w	r4, r4, #8
 80085b2:	f300 8083 	bgt.w	80086bc <__kernel_rem_pio2+0x62c>
 80085b6:	9c05      	ldr	r4, [sp, #20]
 80085b8:	ab48      	add	r3, sp, #288	; 0x120
 80085ba:	441c      	add	r4, r3
 80085bc:	2000      	movs	r0, #0
 80085be:	2100      	movs	r1, #0
 80085c0:	2d01      	cmp	r5, #1
 80085c2:	f300 809a 	bgt.w	80086fa <__kernel_rem_pio2+0x66a>
 80085c6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80085ca:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80085ce:	f1bb 0f00 	cmp.w	fp, #0
 80085d2:	f040 8098 	bne.w	8008706 <__kernel_rem_pio2+0x676>
 80085d6:	9b04      	ldr	r3, [sp, #16]
 80085d8:	e9c3 7800 	strd	r7, r8, [r3]
 80085dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80085e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80085e4:	e7c6      	b.n	8008574 <__kernel_rem_pio2+0x4e4>
 80085e6:	9e05      	ldr	r6, [sp, #20]
 80085e8:	ab48      	add	r3, sp, #288	; 0x120
 80085ea:	441e      	add	r6, r3
 80085ec:	462c      	mov	r4, r5
 80085ee:	2000      	movs	r0, #0
 80085f0:	2100      	movs	r1, #0
 80085f2:	2c00      	cmp	r4, #0
 80085f4:	da33      	bge.n	800865e <__kernel_rem_pio2+0x5ce>
 80085f6:	f1bb 0f00 	cmp.w	fp, #0
 80085fa:	d036      	beq.n	800866a <__kernel_rem_pio2+0x5da>
 80085fc:	4602      	mov	r2, r0
 80085fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008602:	9c04      	ldr	r4, [sp, #16]
 8008604:	e9c4 2300 	strd	r2, r3, [r4]
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008610:	f7f7 fe06 	bl	8000220 <__aeabi_dsub>
 8008614:	ae4a      	add	r6, sp, #296	; 0x128
 8008616:	2401      	movs	r4, #1
 8008618:	42a5      	cmp	r5, r4
 800861a:	da29      	bge.n	8008670 <__kernel_rem_pio2+0x5e0>
 800861c:	f1bb 0f00 	cmp.w	fp, #0
 8008620:	d002      	beq.n	8008628 <__kernel_rem_pio2+0x598>
 8008622:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008626:	4619      	mov	r1, r3
 8008628:	9b04      	ldr	r3, [sp, #16]
 800862a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800862e:	e7a1      	b.n	8008574 <__kernel_rem_pio2+0x4e4>
 8008630:	9c05      	ldr	r4, [sp, #20]
 8008632:	ab48      	add	r3, sp, #288	; 0x120
 8008634:	441c      	add	r4, r3
 8008636:	2000      	movs	r0, #0
 8008638:	2100      	movs	r1, #0
 800863a:	2d00      	cmp	r5, #0
 800863c:	da09      	bge.n	8008652 <__kernel_rem_pio2+0x5c2>
 800863e:	f1bb 0f00 	cmp.w	fp, #0
 8008642:	d002      	beq.n	800864a <__kernel_rem_pio2+0x5ba>
 8008644:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008648:	4619      	mov	r1, r3
 800864a:	9b04      	ldr	r3, [sp, #16]
 800864c:	e9c3 0100 	strd	r0, r1, [r3]
 8008650:	e790      	b.n	8008574 <__kernel_rem_pio2+0x4e4>
 8008652:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008656:	f7f7 fde5 	bl	8000224 <__adddf3>
 800865a:	3d01      	subs	r5, #1
 800865c:	e7ed      	b.n	800863a <__kernel_rem_pio2+0x5aa>
 800865e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008662:	f7f7 fddf 	bl	8000224 <__adddf3>
 8008666:	3c01      	subs	r4, #1
 8008668:	e7c3      	b.n	80085f2 <__kernel_rem_pio2+0x562>
 800866a:	4602      	mov	r2, r0
 800866c:	460b      	mov	r3, r1
 800866e:	e7c8      	b.n	8008602 <__kernel_rem_pio2+0x572>
 8008670:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008674:	f7f7 fdd6 	bl	8000224 <__adddf3>
 8008678:	3401      	adds	r4, #1
 800867a:	e7cd      	b.n	8008618 <__kernel_rem_pio2+0x588>
 800867c:	e9da 8900 	ldrd	r8, r9, [sl]
 8008680:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8008684:	9b00      	ldr	r3, [sp, #0]
 8008686:	3b01      	subs	r3, #1
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	4632      	mov	r2, r6
 800868c:	463b      	mov	r3, r7
 800868e:	4640      	mov	r0, r8
 8008690:	4649      	mov	r1, r9
 8008692:	f7f7 fdc7 	bl	8000224 <__adddf3>
 8008696:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800869a:	4602      	mov	r2, r0
 800869c:	460b      	mov	r3, r1
 800869e:	4640      	mov	r0, r8
 80086a0:	4649      	mov	r1, r9
 80086a2:	f7f7 fdbd 	bl	8000220 <__aeabi_dsub>
 80086a6:	4632      	mov	r2, r6
 80086a8:	463b      	mov	r3, r7
 80086aa:	f7f7 fdbb 	bl	8000224 <__adddf3>
 80086ae:	ed9d 7b06 	vldr	d7, [sp, #24]
 80086b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80086b6:	ed8a 7b00 	vstr	d7, [sl]
 80086ba:	e770      	b.n	800859e <__kernel_rem_pio2+0x50e>
 80086bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80086c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80086c4:	4640      	mov	r0, r8
 80086c6:	4632      	mov	r2, r6
 80086c8:	463b      	mov	r3, r7
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f7 fdaa 	bl	8000224 <__adddf3>
 80086d0:	e9cd 0100 	strd	r0, r1, [sp]
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	f7f7 fda0 	bl	8000220 <__aeabi_dsub>
 80086e0:	4632      	mov	r2, r6
 80086e2:	463b      	mov	r3, r7
 80086e4:	f7f7 fd9e 	bl	8000224 <__adddf3>
 80086e8:	ed9d 7b00 	vldr	d7, [sp]
 80086ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80086f0:	ed84 7b00 	vstr	d7, [r4]
 80086f4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80086f8:	e757      	b.n	80085aa <__kernel_rem_pio2+0x51a>
 80086fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80086fe:	f7f7 fd91 	bl	8000224 <__adddf3>
 8008702:	3d01      	subs	r5, #1
 8008704:	e75c      	b.n	80085c0 <__kernel_rem_pio2+0x530>
 8008706:	9b04      	ldr	r3, [sp, #16]
 8008708:	9a04      	ldr	r2, [sp, #16]
 800870a:	601f      	str	r7, [r3, #0]
 800870c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8008710:	605c      	str	r4, [r3, #4]
 8008712:	609d      	str	r5, [r3, #8]
 8008714:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008718:	60d3      	str	r3, [r2, #12]
 800871a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800871e:	6110      	str	r0, [r2, #16]
 8008720:	6153      	str	r3, [r2, #20]
 8008722:	e727      	b.n	8008574 <__kernel_rem_pio2+0x4e4>
 8008724:	41700000 	.word	0x41700000
 8008728:	3e700000 	.word	0x3e700000
 800872c:	00000000 	.word	0x00000000

08008730 <__kernel_cos>:
 8008730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	ec57 6b10 	vmov	r6, r7, d0
 8008738:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800873c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008740:	ed8d 1b00 	vstr	d1, [sp]
 8008744:	da07      	bge.n	8008756 <__kernel_cos+0x26>
 8008746:	ee10 0a10 	vmov	r0, s0
 800874a:	4639      	mov	r1, r7
 800874c:	f7f8 f9d0 	bl	8000af0 <__aeabi_d2iz>
 8008750:	2800      	cmp	r0, #0
 8008752:	f000 8088 	beq.w	8008866 <__kernel_cos+0x136>
 8008756:	4632      	mov	r2, r6
 8008758:	463b      	mov	r3, r7
 800875a:	4630      	mov	r0, r6
 800875c:	4639      	mov	r1, r7
 800875e:	f7f7 ff17 	bl	8000590 <__aeabi_dmul>
 8008762:	4b51      	ldr	r3, [pc, #324]	; (80088a8 <__kernel_cos+0x178>)
 8008764:	2200      	movs	r2, #0
 8008766:	4604      	mov	r4, r0
 8008768:	460d      	mov	r5, r1
 800876a:	f7f7 ff11 	bl	8000590 <__aeabi_dmul>
 800876e:	a340      	add	r3, pc, #256	; (adr r3, 8008870 <__kernel_cos+0x140>)
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	4682      	mov	sl, r0
 8008776:	468b      	mov	fp, r1
 8008778:	4620      	mov	r0, r4
 800877a:	4629      	mov	r1, r5
 800877c:	f7f7 ff08 	bl	8000590 <__aeabi_dmul>
 8008780:	a33d      	add	r3, pc, #244	; (adr r3, 8008878 <__kernel_cos+0x148>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	f7f7 fd4d 	bl	8000224 <__adddf3>
 800878a:	4622      	mov	r2, r4
 800878c:	462b      	mov	r3, r5
 800878e:	f7f7 feff 	bl	8000590 <__aeabi_dmul>
 8008792:	a33b      	add	r3, pc, #236	; (adr r3, 8008880 <__kernel_cos+0x150>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f7f7 fd42 	bl	8000220 <__aeabi_dsub>
 800879c:	4622      	mov	r2, r4
 800879e:	462b      	mov	r3, r5
 80087a0:	f7f7 fef6 	bl	8000590 <__aeabi_dmul>
 80087a4:	a338      	add	r3, pc, #224	; (adr r3, 8008888 <__kernel_cos+0x158>)
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	f7f7 fd3b 	bl	8000224 <__adddf3>
 80087ae:	4622      	mov	r2, r4
 80087b0:	462b      	mov	r3, r5
 80087b2:	f7f7 feed 	bl	8000590 <__aeabi_dmul>
 80087b6:	a336      	add	r3, pc, #216	; (adr r3, 8008890 <__kernel_cos+0x160>)
 80087b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087bc:	f7f7 fd30 	bl	8000220 <__aeabi_dsub>
 80087c0:	4622      	mov	r2, r4
 80087c2:	462b      	mov	r3, r5
 80087c4:	f7f7 fee4 	bl	8000590 <__aeabi_dmul>
 80087c8:	a333      	add	r3, pc, #204	; (adr r3, 8008898 <__kernel_cos+0x168>)
 80087ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ce:	f7f7 fd29 	bl	8000224 <__adddf3>
 80087d2:	4622      	mov	r2, r4
 80087d4:	462b      	mov	r3, r5
 80087d6:	f7f7 fedb 	bl	8000590 <__aeabi_dmul>
 80087da:	4622      	mov	r2, r4
 80087dc:	462b      	mov	r3, r5
 80087de:	f7f7 fed7 	bl	8000590 <__aeabi_dmul>
 80087e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087e6:	4604      	mov	r4, r0
 80087e8:	460d      	mov	r5, r1
 80087ea:	4630      	mov	r0, r6
 80087ec:	4639      	mov	r1, r7
 80087ee:	f7f7 fecf 	bl	8000590 <__aeabi_dmul>
 80087f2:	460b      	mov	r3, r1
 80087f4:	4602      	mov	r2, r0
 80087f6:	4629      	mov	r1, r5
 80087f8:	4620      	mov	r0, r4
 80087fa:	f7f7 fd11 	bl	8000220 <__aeabi_dsub>
 80087fe:	4b2b      	ldr	r3, [pc, #172]	; (80088ac <__kernel_cos+0x17c>)
 8008800:	4598      	cmp	r8, r3
 8008802:	4606      	mov	r6, r0
 8008804:	460f      	mov	r7, r1
 8008806:	dc10      	bgt.n	800882a <__kernel_cos+0xfa>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4650      	mov	r0, sl
 800880e:	4659      	mov	r1, fp
 8008810:	f7f7 fd06 	bl	8000220 <__aeabi_dsub>
 8008814:	460b      	mov	r3, r1
 8008816:	4926      	ldr	r1, [pc, #152]	; (80088b0 <__kernel_cos+0x180>)
 8008818:	4602      	mov	r2, r0
 800881a:	2000      	movs	r0, #0
 800881c:	f7f7 fd00 	bl	8000220 <__aeabi_dsub>
 8008820:	ec41 0b10 	vmov	d0, r0, r1
 8008824:	b003      	add	sp, #12
 8008826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882a:	4b22      	ldr	r3, [pc, #136]	; (80088b4 <__kernel_cos+0x184>)
 800882c:	4920      	ldr	r1, [pc, #128]	; (80088b0 <__kernel_cos+0x180>)
 800882e:	4598      	cmp	r8, r3
 8008830:	bfcc      	ite	gt
 8008832:	4d21      	ldrgt	r5, [pc, #132]	; (80088b8 <__kernel_cos+0x188>)
 8008834:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008838:	2400      	movs	r4, #0
 800883a:	4622      	mov	r2, r4
 800883c:	462b      	mov	r3, r5
 800883e:	2000      	movs	r0, #0
 8008840:	f7f7 fcee 	bl	8000220 <__aeabi_dsub>
 8008844:	4622      	mov	r2, r4
 8008846:	4680      	mov	r8, r0
 8008848:	4689      	mov	r9, r1
 800884a:	462b      	mov	r3, r5
 800884c:	4650      	mov	r0, sl
 800884e:	4659      	mov	r1, fp
 8008850:	f7f7 fce6 	bl	8000220 <__aeabi_dsub>
 8008854:	4632      	mov	r2, r6
 8008856:	463b      	mov	r3, r7
 8008858:	f7f7 fce2 	bl	8000220 <__aeabi_dsub>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	e7da      	b.n	800881c <__kernel_cos+0xec>
 8008866:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80088a0 <__kernel_cos+0x170>
 800886a:	e7db      	b.n	8008824 <__kernel_cos+0xf4>
 800886c:	f3af 8000 	nop.w
 8008870:	be8838d4 	.word	0xbe8838d4
 8008874:	bda8fae9 	.word	0xbda8fae9
 8008878:	bdb4b1c4 	.word	0xbdb4b1c4
 800887c:	3e21ee9e 	.word	0x3e21ee9e
 8008880:	809c52ad 	.word	0x809c52ad
 8008884:	3e927e4f 	.word	0x3e927e4f
 8008888:	19cb1590 	.word	0x19cb1590
 800888c:	3efa01a0 	.word	0x3efa01a0
 8008890:	16c15177 	.word	0x16c15177
 8008894:	3f56c16c 	.word	0x3f56c16c
 8008898:	5555554c 	.word	0x5555554c
 800889c:	3fa55555 	.word	0x3fa55555
 80088a0:	00000000 	.word	0x00000000
 80088a4:	3ff00000 	.word	0x3ff00000
 80088a8:	3fe00000 	.word	0x3fe00000
 80088ac:	3fd33332 	.word	0x3fd33332
 80088b0:	3ff00000 	.word	0x3ff00000
 80088b4:	3fe90000 	.word	0x3fe90000
 80088b8:	3fd20000 	.word	0x3fd20000
 80088bc:	00000000 	.word	0x00000000

080088c0 <__kernel_sin>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ed2d 8b04 	vpush	{d8-d9}
 80088c8:	eeb0 8a41 	vmov.f32	s16, s2
 80088cc:	eef0 8a61 	vmov.f32	s17, s3
 80088d0:	ec55 4b10 	vmov	r4, r5, d0
 80088d4:	b083      	sub	sp, #12
 80088d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80088da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80088de:	9001      	str	r0, [sp, #4]
 80088e0:	da06      	bge.n	80088f0 <__kernel_sin+0x30>
 80088e2:	ee10 0a10 	vmov	r0, s0
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f8 f902 	bl	8000af0 <__aeabi_d2iz>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d051      	beq.n	8008994 <__kernel_sin+0xd4>
 80088f0:	4622      	mov	r2, r4
 80088f2:	462b      	mov	r3, r5
 80088f4:	4620      	mov	r0, r4
 80088f6:	4629      	mov	r1, r5
 80088f8:	f7f7 fe4a 	bl	8000590 <__aeabi_dmul>
 80088fc:	4682      	mov	sl, r0
 80088fe:	468b      	mov	fp, r1
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4620      	mov	r0, r4
 8008906:	4629      	mov	r1, r5
 8008908:	f7f7 fe42 	bl	8000590 <__aeabi_dmul>
 800890c:	a341      	add	r3, pc, #260	; (adr r3, 8008a14 <__kernel_sin+0x154>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	4680      	mov	r8, r0
 8008914:	4689      	mov	r9, r1
 8008916:	4650      	mov	r0, sl
 8008918:	4659      	mov	r1, fp
 800891a:	f7f7 fe39 	bl	8000590 <__aeabi_dmul>
 800891e:	a33f      	add	r3, pc, #252	; (adr r3, 8008a1c <__kernel_sin+0x15c>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f7 fc7c 	bl	8000220 <__aeabi_dsub>
 8008928:	4652      	mov	r2, sl
 800892a:	465b      	mov	r3, fp
 800892c:	f7f7 fe30 	bl	8000590 <__aeabi_dmul>
 8008930:	a33c      	add	r3, pc, #240	; (adr r3, 8008a24 <__kernel_sin+0x164>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fc75 	bl	8000224 <__adddf3>
 800893a:	4652      	mov	r2, sl
 800893c:	465b      	mov	r3, fp
 800893e:	f7f7 fe27 	bl	8000590 <__aeabi_dmul>
 8008942:	a33a      	add	r3, pc, #232	; (adr r3, 8008a2c <__kernel_sin+0x16c>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fc6a 	bl	8000220 <__aeabi_dsub>
 800894c:	4652      	mov	r2, sl
 800894e:	465b      	mov	r3, fp
 8008950:	f7f7 fe1e 	bl	8000590 <__aeabi_dmul>
 8008954:	a337      	add	r3, pc, #220	; (adr r3, 8008a34 <__kernel_sin+0x174>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	f7f7 fc63 	bl	8000224 <__adddf3>
 800895e:	9b01      	ldr	r3, [sp, #4]
 8008960:	4606      	mov	r6, r0
 8008962:	460f      	mov	r7, r1
 8008964:	b9eb      	cbnz	r3, 80089a2 <__kernel_sin+0xe2>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	4650      	mov	r0, sl
 800896c:	4659      	mov	r1, fp
 800896e:	f7f7 fe0f 	bl	8000590 <__aeabi_dmul>
 8008972:	a325      	add	r3, pc, #148	; (adr r3, 8008a08 <__kernel_sin+0x148>)
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f7f7 fc52 	bl	8000220 <__aeabi_dsub>
 800897c:	4642      	mov	r2, r8
 800897e:	464b      	mov	r3, r9
 8008980:	f7f7 fe06 	bl	8000590 <__aeabi_dmul>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4620      	mov	r0, r4
 800898a:	4629      	mov	r1, r5
 800898c:	f7f7 fc4a 	bl	8000224 <__adddf3>
 8008990:	4604      	mov	r4, r0
 8008992:	460d      	mov	r5, r1
 8008994:	ec45 4b10 	vmov	d0, r4, r5
 8008998:	b003      	add	sp, #12
 800899a:	ecbd 8b04 	vpop	{d8-d9}
 800899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a2:	4b1b      	ldr	r3, [pc, #108]	; (8008a10 <__kernel_sin+0x150>)
 80089a4:	ec51 0b18 	vmov	r0, r1, d8
 80089a8:	2200      	movs	r2, #0
 80089aa:	f7f7 fdf1 	bl	8000590 <__aeabi_dmul>
 80089ae:	4632      	mov	r2, r6
 80089b0:	ec41 0b19 	vmov	d9, r0, r1
 80089b4:	463b      	mov	r3, r7
 80089b6:	4640      	mov	r0, r8
 80089b8:	4649      	mov	r1, r9
 80089ba:	f7f7 fde9 	bl	8000590 <__aeabi_dmul>
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	ec51 0b19 	vmov	r0, r1, d9
 80089c6:	f7f7 fc2b 	bl	8000220 <__aeabi_dsub>
 80089ca:	4652      	mov	r2, sl
 80089cc:	465b      	mov	r3, fp
 80089ce:	f7f7 fddf 	bl	8000590 <__aeabi_dmul>
 80089d2:	ec53 2b18 	vmov	r2, r3, d8
 80089d6:	f7f7 fc23 	bl	8000220 <__aeabi_dsub>
 80089da:	a30b      	add	r3, pc, #44	; (adr r3, 8008a08 <__kernel_sin+0x148>)
 80089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e0:	4606      	mov	r6, r0
 80089e2:	460f      	mov	r7, r1
 80089e4:	4640      	mov	r0, r8
 80089e6:	4649      	mov	r1, r9
 80089e8:	f7f7 fdd2 	bl	8000590 <__aeabi_dmul>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4630      	mov	r0, r6
 80089f2:	4639      	mov	r1, r7
 80089f4:	f7f7 fc16 	bl	8000224 <__adddf3>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4620      	mov	r0, r4
 80089fe:	4629      	mov	r1, r5
 8008a00:	f7f7 fc0e 	bl	8000220 <__aeabi_dsub>
 8008a04:	e7c4      	b.n	8008990 <__kernel_sin+0xd0>
 8008a06:	bf00      	nop
 8008a08:	55555549 	.word	0x55555549
 8008a0c:	3fc55555 	.word	0x3fc55555
 8008a10:	3fe00000 	.word	0x3fe00000
 8008a14:	5acfd57c 	.word	0x5acfd57c
 8008a18:	3de5d93a 	.word	0x3de5d93a
 8008a1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8008a20:	3e5ae5e6 	.word	0x3e5ae5e6
 8008a24:	57b1fe7d 	.word	0x57b1fe7d
 8008a28:	3ec71de3 	.word	0x3ec71de3
 8008a2c:	19c161d5 	.word	0x19c161d5
 8008a30:	3f2a01a0 	.word	0x3f2a01a0
 8008a34:	1110f8a6 	.word	0x1110f8a6
 8008a38:	3f811111 	.word	0x3f811111

08008a3c <fabs>:
 8008a3c:	ec51 0b10 	vmov	r0, r1, d0
 8008a40:	ee10 2a10 	vmov	r2, s0
 8008a44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a48:	ec43 2b10 	vmov	d0, r2, r3
 8008a4c:	4770      	bx	lr
	...

08008a50 <scalbn>:
 8008a50:	b570      	push	{r4, r5, r6, lr}
 8008a52:	ec55 4b10 	vmov	r4, r5, d0
 8008a56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	462b      	mov	r3, r5
 8008a5e:	b999      	cbnz	r1, 8008a88 <scalbn+0x38>
 8008a60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008a64:	4323      	orrs	r3, r4
 8008a66:	d03f      	beq.n	8008ae8 <scalbn+0x98>
 8008a68:	4b35      	ldr	r3, [pc, #212]	; (8008b40 <scalbn+0xf0>)
 8008a6a:	4629      	mov	r1, r5
 8008a6c:	ee10 0a10 	vmov	r0, s0
 8008a70:	2200      	movs	r2, #0
 8008a72:	f7f7 fd8d 	bl	8000590 <__aeabi_dmul>
 8008a76:	4b33      	ldr	r3, [pc, #204]	; (8008b44 <scalbn+0xf4>)
 8008a78:	429e      	cmp	r6, r3
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	460d      	mov	r5, r1
 8008a7e:	da10      	bge.n	8008aa2 <scalbn+0x52>
 8008a80:	a327      	add	r3, pc, #156	; (adr r3, 8008b20 <scalbn+0xd0>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	e01f      	b.n	8008ac8 <scalbn+0x78>
 8008a88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008a8c:	4291      	cmp	r1, r2
 8008a8e:	d10c      	bne.n	8008aaa <scalbn+0x5a>
 8008a90:	ee10 2a10 	vmov	r2, s0
 8008a94:	4620      	mov	r0, r4
 8008a96:	4629      	mov	r1, r5
 8008a98:	f7f7 fbc4 	bl	8000224 <__adddf3>
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	e022      	b.n	8008ae8 <scalbn+0x98>
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008aa8:	3936      	subs	r1, #54	; 0x36
 8008aaa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8008aae:	4296      	cmp	r6, r2
 8008ab0:	dd0d      	ble.n	8008ace <scalbn+0x7e>
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	a11c      	add	r1, pc, #112	; (adr r1, 8008b28 <scalbn+0xd8>)
 8008ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008aba:	da02      	bge.n	8008ac2 <scalbn+0x72>
 8008abc:	a11c      	add	r1, pc, #112	; (adr r1, 8008b30 <scalbn+0xe0>)
 8008abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ac2:	a319      	add	r3, pc, #100	; (adr r3, 8008b28 <scalbn+0xd8>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fd62 	bl	8000590 <__aeabi_dmul>
 8008acc:	e7e6      	b.n	8008a9c <scalbn+0x4c>
 8008ace:	1872      	adds	r2, r6, r1
 8008ad0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008ad4:	428a      	cmp	r2, r1
 8008ad6:	dcec      	bgt.n	8008ab2 <scalbn+0x62>
 8008ad8:	2a00      	cmp	r2, #0
 8008ada:	dd08      	ble.n	8008aee <scalbn+0x9e>
 8008adc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ae0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ae4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ae8:	ec45 4b10 	vmov	d0, r4, r5
 8008aec:	bd70      	pop	{r4, r5, r6, pc}
 8008aee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008af2:	da08      	bge.n	8008b06 <scalbn+0xb6>
 8008af4:	2d00      	cmp	r5, #0
 8008af6:	a10a      	add	r1, pc, #40	; (adr r1, 8008b20 <scalbn+0xd0>)
 8008af8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afc:	dac0      	bge.n	8008a80 <scalbn+0x30>
 8008afe:	a10e      	add	r1, pc, #56	; (adr r1, 8008b38 <scalbn+0xe8>)
 8008b00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b04:	e7bc      	b.n	8008a80 <scalbn+0x30>
 8008b06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b0a:	3236      	adds	r2, #54	; 0x36
 8008b0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008b14:	4620      	mov	r0, r4
 8008b16:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <scalbn+0xf8>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	e7d5      	b.n	8008ac8 <scalbn+0x78>
 8008b1c:	f3af 8000 	nop.w
 8008b20:	c2f8f359 	.word	0xc2f8f359
 8008b24:	01a56e1f 	.word	0x01a56e1f
 8008b28:	8800759c 	.word	0x8800759c
 8008b2c:	7e37e43c 	.word	0x7e37e43c
 8008b30:	8800759c 	.word	0x8800759c
 8008b34:	fe37e43c 	.word	0xfe37e43c
 8008b38:	c2f8f359 	.word	0xc2f8f359
 8008b3c:	81a56e1f 	.word	0x81a56e1f
 8008b40:	43500000 	.word	0x43500000
 8008b44:	ffff3cb0 	.word	0xffff3cb0
 8008b48:	3c900000 	.word	0x3c900000
 8008b4c:	00000000 	.word	0x00000000

08008b50 <floor>:
 8008b50:	ec51 0b10 	vmov	r0, r1, d0
 8008b54:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8008b60:	2e13      	cmp	r6, #19
 8008b62:	ee10 5a10 	vmov	r5, s0
 8008b66:	ee10 8a10 	vmov	r8, s0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	dc31      	bgt.n	8008bd2 <floor+0x82>
 8008b6e:	2e00      	cmp	r6, #0
 8008b70:	da14      	bge.n	8008b9c <floor+0x4c>
 8008b72:	a333      	add	r3, pc, #204	; (adr r3, 8008c40 <floor+0xf0>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f7f7 fb54 	bl	8000224 <__adddf3>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f7f7 ff96 	bl	8000ab0 <__aeabi_dcmpgt>
 8008b84:	b138      	cbz	r0, 8008b96 <floor+0x46>
 8008b86:	2c00      	cmp	r4, #0
 8008b88:	da53      	bge.n	8008c32 <floor+0xe2>
 8008b8a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8008b8e:	4325      	orrs	r5, r4
 8008b90:	d052      	beq.n	8008c38 <floor+0xe8>
 8008b92:	4c2d      	ldr	r4, [pc, #180]	; (8008c48 <floor+0xf8>)
 8008b94:	2500      	movs	r5, #0
 8008b96:	4621      	mov	r1, r4
 8008b98:	4628      	mov	r0, r5
 8008b9a:	e024      	b.n	8008be6 <floor+0x96>
 8008b9c:	4f2b      	ldr	r7, [pc, #172]	; (8008c4c <floor+0xfc>)
 8008b9e:	4137      	asrs	r7, r6
 8008ba0:	ea01 0307 	and.w	r3, r1, r7
 8008ba4:	4303      	orrs	r3, r0
 8008ba6:	d01e      	beq.n	8008be6 <floor+0x96>
 8008ba8:	a325      	add	r3, pc, #148	; (adr r3, 8008c40 <floor+0xf0>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 fb39 	bl	8000224 <__adddf3>
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f7f7 ff7b 	bl	8000ab0 <__aeabi_dcmpgt>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	d0eb      	beq.n	8008b96 <floor+0x46>
 8008bbe:	2c00      	cmp	r4, #0
 8008bc0:	bfbe      	ittt	lt
 8008bc2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008bc6:	4133      	asrlt	r3, r6
 8008bc8:	18e4      	addlt	r4, r4, r3
 8008bca:	ea24 0407 	bic.w	r4, r4, r7
 8008bce:	2500      	movs	r5, #0
 8008bd0:	e7e1      	b.n	8008b96 <floor+0x46>
 8008bd2:	2e33      	cmp	r6, #51	; 0x33
 8008bd4:	dd0b      	ble.n	8008bee <floor+0x9e>
 8008bd6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008bda:	d104      	bne.n	8008be6 <floor+0x96>
 8008bdc:	ee10 2a10 	vmov	r2, s0
 8008be0:	460b      	mov	r3, r1
 8008be2:	f7f7 fb1f 	bl	8000224 <__adddf3>
 8008be6:	ec41 0b10 	vmov	d0, r0, r1
 8008bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bee:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8008bf2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008bf6:	40df      	lsrs	r7, r3
 8008bf8:	4238      	tst	r0, r7
 8008bfa:	d0f4      	beq.n	8008be6 <floor+0x96>
 8008bfc:	a310      	add	r3, pc, #64	; (adr r3, 8008c40 <floor+0xf0>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fb0f 	bl	8000224 <__adddf3>
 8008c06:	2200      	movs	r2, #0
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f7f7 ff51 	bl	8000ab0 <__aeabi_dcmpgt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d0c1      	beq.n	8008b96 <floor+0x46>
 8008c12:	2c00      	cmp	r4, #0
 8008c14:	da0a      	bge.n	8008c2c <floor+0xdc>
 8008c16:	2e14      	cmp	r6, #20
 8008c18:	d101      	bne.n	8008c1e <floor+0xce>
 8008c1a:	3401      	adds	r4, #1
 8008c1c:	e006      	b.n	8008c2c <floor+0xdc>
 8008c1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008c22:	2301      	movs	r3, #1
 8008c24:	40b3      	lsls	r3, r6
 8008c26:	441d      	add	r5, r3
 8008c28:	45a8      	cmp	r8, r5
 8008c2a:	d8f6      	bhi.n	8008c1a <floor+0xca>
 8008c2c:	ea25 0507 	bic.w	r5, r5, r7
 8008c30:	e7b1      	b.n	8008b96 <floor+0x46>
 8008c32:	2500      	movs	r5, #0
 8008c34:	462c      	mov	r4, r5
 8008c36:	e7ae      	b.n	8008b96 <floor+0x46>
 8008c38:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008c3c:	e7ab      	b.n	8008b96 <floor+0x46>
 8008c3e:	bf00      	nop
 8008c40:	8800759c 	.word	0x8800759c
 8008c44:	7e37e43c 	.word	0x7e37e43c
 8008c48:	bff00000 	.word	0xbff00000
 8008c4c:	000fffff 	.word	0x000fffff

08008c50 <__ieee754_fmod>:
 8008c50:	ec53 2b11 	vmov	r2, r3, d1
 8008c54:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8008c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c5c:	ea5c 0402 	orrs.w	r4, ip, r2
 8008c60:	ec51 0b10 	vmov	r0, r1, d0
 8008c64:	ee11 7a10 	vmov	r7, s2
 8008c68:	ee11 ea10 	vmov	lr, s2
 8008c6c:	461e      	mov	r6, r3
 8008c6e:	d00c      	beq.n	8008c8a <__ieee754_fmod+0x3a>
 8008c70:	4c78      	ldr	r4, [pc, #480]	; (8008e54 <__ieee754_fmod+0x204>)
 8008c72:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8008c76:	45a0      	cmp	r8, r4
 8008c78:	4689      	mov	r9, r1
 8008c7a:	dc06      	bgt.n	8008c8a <__ieee754_fmod+0x3a>
 8008c7c:	4254      	negs	r4, r2
 8008c7e:	4d76      	ldr	r5, [pc, #472]	; (8008e58 <__ieee754_fmod+0x208>)
 8008c80:	4314      	orrs	r4, r2
 8008c82:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8008c86:	42ac      	cmp	r4, r5
 8008c88:	d909      	bls.n	8008c9e <__ieee754_fmod+0x4e>
 8008c8a:	f7f7 fc81 	bl	8000590 <__aeabi_dmul>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	f7f7 fda7 	bl	80007e4 <__aeabi_ddiv>
 8008c96:	ec41 0b10 	vmov	d0, r0, r1
 8008c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c9e:	45e0      	cmp	r8, ip
 8008ca0:	ee10 aa10 	vmov	sl, s0
 8008ca4:	ee10 4a10 	vmov	r4, s0
 8008ca8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008cac:	dc09      	bgt.n	8008cc2 <__ieee754_fmod+0x72>
 8008cae:	dbf2      	blt.n	8008c96 <__ieee754_fmod+0x46>
 8008cb0:	4290      	cmp	r0, r2
 8008cb2:	d3f0      	bcc.n	8008c96 <__ieee754_fmod+0x46>
 8008cb4:	d105      	bne.n	8008cc2 <__ieee754_fmod+0x72>
 8008cb6:	4b69      	ldr	r3, [pc, #420]	; (8008e5c <__ieee754_fmod+0x20c>)
 8008cb8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8008cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008cc0:	e7e9      	b.n	8008c96 <__ieee754_fmod+0x46>
 8008cc2:	4a65      	ldr	r2, [pc, #404]	; (8008e58 <__ieee754_fmod+0x208>)
 8008cc4:	ea19 0f02 	tst.w	r9, r2
 8008cc8:	d148      	bne.n	8008d5c <__ieee754_fmod+0x10c>
 8008cca:	f1b8 0f00 	cmp.w	r8, #0
 8008cce:	d13d      	bne.n	8008d4c <__ieee754_fmod+0xfc>
 8008cd0:	4963      	ldr	r1, [pc, #396]	; (8008e60 <__ieee754_fmod+0x210>)
 8008cd2:	4653      	mov	r3, sl
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dc36      	bgt.n	8008d46 <__ieee754_fmod+0xf6>
 8008cd8:	4216      	tst	r6, r2
 8008cda:	d14f      	bne.n	8008d7c <__ieee754_fmod+0x12c>
 8008cdc:	f1bc 0f00 	cmp.w	ip, #0
 8008ce0:	d144      	bne.n	8008d6c <__ieee754_fmod+0x11c>
 8008ce2:	4a5f      	ldr	r2, [pc, #380]	; (8008e60 <__ieee754_fmod+0x210>)
 8008ce4:	463b      	mov	r3, r7
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	dc3d      	bgt.n	8008d66 <__ieee754_fmod+0x116>
 8008cea:	485e      	ldr	r0, [pc, #376]	; (8008e64 <__ieee754_fmod+0x214>)
 8008cec:	4281      	cmp	r1, r0
 8008cee:	db4a      	blt.n	8008d86 <__ieee754_fmod+0x136>
 8008cf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cf8:	485a      	ldr	r0, [pc, #360]	; (8008e64 <__ieee754_fmod+0x214>)
 8008cfa:	4282      	cmp	r2, r0
 8008cfc:	db57      	blt.n	8008dae <__ieee754_fmod+0x15e>
 8008cfe:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8008d02:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8008d06:	1a89      	subs	r1, r1, r2
 8008d08:	1b98      	subs	r0, r3, r6
 8008d0a:	eba4 070e 	sub.w	r7, r4, lr
 8008d0e:	2900      	cmp	r1, #0
 8008d10:	d162      	bne.n	8008dd8 <__ieee754_fmod+0x188>
 8008d12:	4574      	cmp	r4, lr
 8008d14:	bf38      	it	cc
 8008d16:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	bfa4      	itt	ge
 8008d1e:	463c      	movge	r4, r7
 8008d20:	4603      	movge	r3, r0
 8008d22:	ea53 0104 	orrs.w	r1, r3, r4
 8008d26:	d0c6      	beq.n	8008cb6 <__ieee754_fmod+0x66>
 8008d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d2c:	db69      	blt.n	8008e02 <__ieee754_fmod+0x1b2>
 8008d2e:	494d      	ldr	r1, [pc, #308]	; (8008e64 <__ieee754_fmod+0x214>)
 8008d30:	428a      	cmp	r2, r1
 8008d32:	db6c      	blt.n	8008e0e <__ieee754_fmod+0x1be>
 8008d34:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d38:	432b      	orrs	r3, r5
 8008d3a:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8008d3e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008d42:	4620      	mov	r0, r4
 8008d44:	e7a7      	b.n	8008c96 <__ieee754_fmod+0x46>
 8008d46:	3901      	subs	r1, #1
 8008d48:	005b      	lsls	r3, r3, #1
 8008d4a:	e7c3      	b.n	8008cd4 <__ieee754_fmod+0x84>
 8008d4c:	4945      	ldr	r1, [pc, #276]	; (8008e64 <__ieee754_fmod+0x214>)
 8008d4e:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	ddc0      	ble.n	8008cd8 <__ieee754_fmod+0x88>
 8008d56:	3901      	subs	r1, #1
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	e7fa      	b.n	8008d52 <__ieee754_fmod+0x102>
 8008d5c:	ea4f 5128 	mov.w	r1, r8, asr #20
 8008d60:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008d64:	e7b8      	b.n	8008cd8 <__ieee754_fmod+0x88>
 8008d66:	3a01      	subs	r2, #1
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	e7bc      	b.n	8008ce6 <__ieee754_fmod+0x96>
 8008d6c:	4a3d      	ldr	r2, [pc, #244]	; (8008e64 <__ieee754_fmod+0x214>)
 8008d6e:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	ddb9      	ble.n	8008cea <__ieee754_fmod+0x9a>
 8008d76:	3a01      	subs	r2, #1
 8008d78:	005b      	lsls	r3, r3, #1
 8008d7a:	e7fa      	b.n	8008d72 <__ieee754_fmod+0x122>
 8008d7c:	ea4f 522c 	mov.w	r2, ip, asr #20
 8008d80:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008d84:	e7b1      	b.n	8008cea <__ieee754_fmod+0x9a>
 8008d86:	1a40      	subs	r0, r0, r1
 8008d88:	281f      	cmp	r0, #31
 8008d8a:	dc0a      	bgt.n	8008da2 <__ieee754_fmod+0x152>
 8008d8c:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8008d90:	fa08 f800 	lsl.w	r8, r8, r0
 8008d94:	fa2a f303 	lsr.w	r3, sl, r3
 8008d98:	ea43 0308 	orr.w	r3, r3, r8
 8008d9c:	fa0a f400 	lsl.w	r4, sl, r0
 8008da0:	e7aa      	b.n	8008cf8 <__ieee754_fmod+0xa8>
 8008da2:	4b31      	ldr	r3, [pc, #196]	; (8008e68 <__ieee754_fmod+0x218>)
 8008da4:	1a5b      	subs	r3, r3, r1
 8008da6:	fa0a f303 	lsl.w	r3, sl, r3
 8008daa:	2400      	movs	r4, #0
 8008dac:	e7a4      	b.n	8008cf8 <__ieee754_fmod+0xa8>
 8008dae:	1a80      	subs	r0, r0, r2
 8008db0:	281f      	cmp	r0, #31
 8008db2:	dc0a      	bgt.n	8008dca <__ieee754_fmod+0x17a>
 8008db4:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8008db8:	fa0c fc00 	lsl.w	ip, ip, r0
 8008dbc:	fa27 f606 	lsr.w	r6, r7, r6
 8008dc0:	ea46 060c 	orr.w	r6, r6, ip
 8008dc4:	fa07 fe00 	lsl.w	lr, r7, r0
 8008dc8:	e79d      	b.n	8008d06 <__ieee754_fmod+0xb6>
 8008dca:	4e27      	ldr	r6, [pc, #156]	; (8008e68 <__ieee754_fmod+0x218>)
 8008dcc:	1ab6      	subs	r6, r6, r2
 8008dce:	fa07 f606 	lsl.w	r6, r7, r6
 8008dd2:	f04f 0e00 	mov.w	lr, #0
 8008dd6:	e796      	b.n	8008d06 <__ieee754_fmod+0xb6>
 8008dd8:	4574      	cmp	r4, lr
 8008dda:	bf38      	it	cc
 8008ddc:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 8008de0:	2800      	cmp	r0, #0
 8008de2:	da05      	bge.n	8008df0 <__ieee754_fmod+0x1a0>
 8008de4:	0fe0      	lsrs	r0, r4, #31
 8008de6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8008dea:	0064      	lsls	r4, r4, #1
 8008dec:	3901      	subs	r1, #1
 8008dee:	e78b      	b.n	8008d08 <__ieee754_fmod+0xb8>
 8008df0:	ea50 0307 	orrs.w	r3, r0, r7
 8008df4:	f43f af5f 	beq.w	8008cb6 <__ieee754_fmod+0x66>
 8008df8:	0ffb      	lsrs	r3, r7, #31
 8008dfa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008dfe:	007c      	lsls	r4, r7, #1
 8008e00:	e7f4      	b.n	8008dec <__ieee754_fmod+0x19c>
 8008e02:	0fe1      	lsrs	r1, r4, #31
 8008e04:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008e08:	0064      	lsls	r4, r4, #1
 8008e0a:	3a01      	subs	r2, #1
 8008e0c:	e78c      	b.n	8008d28 <__ieee754_fmod+0xd8>
 8008e0e:	1a89      	subs	r1, r1, r2
 8008e10:	2914      	cmp	r1, #20
 8008e12:	dc0a      	bgt.n	8008e2a <__ieee754_fmod+0x1da>
 8008e14:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008e18:	fa03 f202 	lsl.w	r2, r3, r2
 8008e1c:	40cc      	lsrs	r4, r1
 8008e1e:	4322      	orrs	r2, r4
 8008e20:	410b      	asrs	r3, r1
 8008e22:	ea43 0105 	orr.w	r1, r3, r5
 8008e26:	4610      	mov	r0, r2
 8008e28:	e735      	b.n	8008c96 <__ieee754_fmod+0x46>
 8008e2a:	291f      	cmp	r1, #31
 8008e2c:	dc07      	bgt.n	8008e3e <__ieee754_fmod+0x1ee>
 8008e2e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8008e32:	40cc      	lsrs	r4, r1
 8008e34:	fa03 f202 	lsl.w	r2, r3, r2
 8008e38:	4322      	orrs	r2, r4
 8008e3a:	462b      	mov	r3, r5
 8008e3c:	e7f1      	b.n	8008e22 <__ieee754_fmod+0x1d2>
 8008e3e:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8008e42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e46:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8008e4a:	32e2      	adds	r2, #226	; 0xe2
 8008e4c:	fa43 f202 	asr.w	r2, r3, r2
 8008e50:	e7f3      	b.n	8008e3a <__ieee754_fmod+0x1ea>
 8008e52:	bf00      	nop
 8008e54:	7fefffff 	.word	0x7fefffff
 8008e58:	7ff00000 	.word	0x7ff00000
 8008e5c:	080090a0 	.word	0x080090a0
 8008e60:	fffffbed 	.word	0xfffffbed
 8008e64:	fffffc02 	.word	0xfffffc02
 8008e68:	fffffbe2 	.word	0xfffffbe2

08008e6c <_init>:
 8008e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6e:	bf00      	nop
 8008e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e72:	bc08      	pop	{r3}
 8008e74:	469e      	mov	lr, r3
 8008e76:	4770      	bx	lr

08008e78 <_fini>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	bf00      	nop
 8008e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e7e:	bc08      	pop	{r3}
 8008e80:	469e      	mov	lr, r3
 8008e82:	4770      	bx	lr
