
cbt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c78  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002e50  08002e50  00003e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e60  08002e60  00005300  2**0
                  CONTENTS
  4 .ARM          00000000  08002e60  08002e60  00005300  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e60  08002e60  00005300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e60  08002e60  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e64  08002e64  00003e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001300  20000000  08002e68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20001300  08004168  00005300  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001590  08004168  00005590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005300  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da01  00000000  00000000  00005330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a0  00000000  00000000  00012d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00014ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b28  00000000  00000000  00015d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed7a  00000000  00000000  00016888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb2e  00000000  00000000  00035602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000caaa7  00000000  00000000  00045130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fbd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf4  00000000  00000000  0010fc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00113910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20001300 	.word	0x20001300
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002e38 	.word	0x08002e38

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20001304 	.word	0x20001304
 8000214:	08002e38 	.word	0x08002e38

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	f5ad 4dc5 	sub.w	sp, sp, #25216	@ 0x6280
 800021e:	b082      	sub	sp, #8
 8000220:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000222:	f000 fc0a 	bl	8000a3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000226:	f000 f8e7 	bl	80003f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022a:	f000 fa33 	bl	8000694 <MX_GPIO_Init>
  MX_DMA_Init();
 800022e:	f000 f9ff 	bl	8000630 <MX_DMA_Init>
  MX_OPAMP6_Init();
 8000232:	f000 f9a1 	bl	8000578 <MX_OPAMP6_Init>
  MX_DAC3_Init();
 8000236:	f000 f965 	bl	8000504 <MX_DAC3_Init>
  MX_TIM6_Init();
 800023a:	f000 f9c3 	bl	80005c4 <MX_TIM6_Init>
  MX_DAC1_Init();
 800023e:	f000 f927 	bl	8000490 <MX_DAC1_Init>
  //Wave_LUT[9] = 0U;

  float upsampled_symbols[N];
  //float signal[N];
  // create symbols
  for (int i = 0; i < N_symbols; i++) {
 8000242:	2300      	movs	r3, #0
 8000244:	f507 42c4 	add.w	r2, r7, #25088	@ 0x6200
 8000248:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 800024c:	6013      	str	r3, [r2, #0]
 800024e:	e01c      	b.n	800028a <main+0x72>
	  symbols[i] = 2*bits[i] - 1;
 8000250:	4a61      	ldr	r2, [pc, #388]	@ (80003d8 <main+0x1c0>)
 8000252:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 8000256:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	005b      	lsls	r3, r3, #1
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	495d      	ldr	r1, [pc, #372]	@ (80003dc <main+0x1c4>)
 8000266:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 800026a:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < N_symbols; i++) {
 8000274:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 8000278:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	3301      	adds	r3, #1
 8000280:	f507 42c4 	add.w	r2, r7, #25088	@ 0x6200
 8000284:	f102 027c 	add.w	r2, r2, #124	@ 0x7c
 8000288:	6013      	str	r3, [r2, #0]
 800028a:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 800028e:	f103 037c 	add.w	r3, r3, #124	@ 0x7c
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b3e      	cmp	r3, #62	@ 0x3e
 8000296:	dddb      	ble.n	8000250 <main+0x38>
  }
  // upsample symbols
  for (int i = 0; i < N; i++) {
 8000298:	2300      	movs	r3, #0
 800029a:	f507 42c4 	add.w	r2, r7, #25088	@ 0x6200
 800029e:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 80002a2:	6013      	str	r3, [r2, #0]
 80002a4:	e05a      	b.n	800035c <main+0x144>
	  if (i % SPS == 0) {
 80002a6:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 80002aa:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b4b      	ldr	r3, [pc, #300]	@ (80003e0 <main+0x1c8>)
 80002b2:	fb83 1302 	smull	r1, r3, r3, r2
 80002b6:	1159      	asrs	r1, r3, #5
 80002b8:	17d3      	asrs	r3, r2, #31
 80002ba:	1acb      	subs	r3, r1, r3
 80002bc:	2164      	movs	r1, #100	@ 0x64
 80002be:	fb01 f303 	mul.w	r3, r1, r3
 80002c2:	1ad3      	subs	r3, r2, r3
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d11f      	bne.n	8000308 <main+0xf0>
		  upsampled_symbols[i] = (symbols[i / SPS]);
 80002c8:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 80002cc:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a43      	ldr	r2, [pc, #268]	@ (80003e0 <main+0x1c8>)
 80002d4:	fb82 1203 	smull	r1, r2, r2, r3
 80002d8:	1152      	asrs	r2, r2, #5
 80002da:	17db      	asrs	r3, r3, #31
 80002dc:	1ad3      	subs	r3, r2, r3
 80002de:	4a3f      	ldr	r2, [pc, #252]	@ (80003dc <main+0x1c4>)
 80002e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e4:	ee07 3a90 	vmov	s15, r3
 80002e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80002ec:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 80002f0:	f5a3 721f 	sub.w	r2, r3, #636	@ 0x27c
 80002f4:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 80002f8:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4413      	add	r3, r2
 8000302:	edc3 7a00 	vstr	s15, [r3]
 8000306:	e01e      	b.n	8000346 <main+0x12e>
	  }
	  else {
		  upsampled_symbols[i] = (symbols[i / SPS]);//0;
 8000308:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 800030c:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a33      	ldr	r2, [pc, #204]	@ (80003e0 <main+0x1c8>)
 8000314:	fb82 1203 	smull	r1, r2, r2, r3
 8000318:	1152      	asrs	r2, r2, #5
 800031a:	17db      	asrs	r3, r3, #31
 800031c:	1ad3      	subs	r3, r2, r3
 800031e:	4a2f      	ldr	r2, [pc, #188]	@ (80003dc <main+0x1c4>)
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	ee07 3a90 	vmov	s15, r3
 8000328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800032c:	f507 7320 	add.w	r3, r7, #640	@ 0x280
 8000330:	f5a3 721f 	sub.w	r2, r3, #636	@ 0x27c
 8000334:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 8000338:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	4413      	add	r3, r2
 8000342:	edc3 7a00 	vstr	s15, [r3]
  for (int i = 0; i < N; i++) {
 8000346:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 800034a:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	3301      	adds	r3, #1
 8000352:	f507 42c4 	add.w	r2, r7, #25088	@ 0x6200
 8000356:	f102 0278 	add.w	r2, r2, #120	@ 0x78
 800035a:	6013      	str	r3, [r2, #0]
 800035c:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 8000360:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f641 029b 	movw	r2, #6299	@ 0x189b
 800036a:	4293      	cmp	r3, r2
 800036c:	dd9b      	ble.n	80002a6 <main+0x8e>
	  }
  }
  for (int i = 0; i < N; i++) {
 800036e:	2300      	movs	r3, #0
 8000370:	f507 42c4 	add.w	r2, r7, #25088	@ 0x6200
 8000374:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8000378:	6013      	str	r3, [r2, #0]
 800037a:	e00a      	b.n	8000392 <main+0x17a>
 800037c:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 8000380:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	3301      	adds	r3, #1
 8000388:	f507 42c4 	add.w	r2, r7, #25088	@ 0x6200
 800038c:	f102 0274 	add.w	r2, r2, #116	@ 0x74
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	f507 43c4 	add.w	r3, r7, #25088	@ 0x6200
 8000396:	f103 0374 	add.w	r3, r3, #116	@ 0x74
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f641 029b 	movw	r2, #6299	@ 0x189b
 80003a0:	4293      	cmp	r3, r2
 80003a2:	ddeb      	ble.n	800037c <main+0x164>
	  //Wave_LUT[i] = 2048 + 1023*cos(2 * 3.141593 * 0.1 * i); //*  upsampled_symbols[i];
  }
  HAL_OPAMP_Start(&hopamp6);
 80003a4:	480f      	ldr	r0, [pc, #60]	@ (80003e4 <main+0x1cc>)
 80003a6:	f001 fd41 	bl	8001e2c <HAL_OPAMP_Start>
  HAL_TIM_Base_Start(&htim6);
 80003aa:	480f      	ldr	r0, [pc, #60]	@ (80003e8 <main+0x1d0>)
 80003ac:	f002 fb84 	bl	8002ab8 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac3, DAC_CHANNEL_1);
 80003b0:	2100      	movs	r1, #0
 80003b2:	480e      	ldr	r0, [pc, #56]	@ (80003ec <main+0x1d4>)
 80003b4:	f000 fd05 	bl	8000dc2 <HAL_DAC_Start>
  HAL_DAC_Start_DMA(&hdac3, DAC_CHANNEL_1, (uint32_t*)Wave_LUT, 2300, DAC_ALIGN_12B_R);
 80003b8:	2300      	movs	r3, #0
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	f640 03fc 	movw	r3, #2300	@ 0x8fc
 80003c0:	4a0b      	ldr	r2, [pc, #44]	@ (80003f0 <main+0x1d8>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4809      	ldr	r0, [pc, #36]	@ (80003ec <main+0x1d4>)
 80003c6:	f000 fd4f 	bl	8000e68 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	test++;
 80003ca:	4b0a      	ldr	r3, [pc, #40]	@ (80003f4 <main+0x1dc>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	3301      	adds	r3, #1
 80003d0:	4a08      	ldr	r2, [pc, #32]	@ (80003f4 <main+0x1dc>)
 80003d2:	6013      	str	r3, [r2, #0]
 80003d4:	e7f9      	b.n	80003ca <main+0x1b2>
 80003d6:	bf00      	nop
 80003d8:	200011f8 	.word	0x200011f8
 80003dc:	2000148c 	.word	0x2000148c
 80003e0:	51eb851f 	.word	0x51eb851f
 80003e4:	20001404 	.word	0x20001404
 80003e8:	20001440 	.word	0x20001440
 80003ec:	20001330 	.word	0x20001330
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20001588 	.word	0x20001588

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b094      	sub	sp, #80	@ 0x50
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	2238      	movs	r2, #56	@ 0x38
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f002 fcea 	bl	8002de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800041a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800041e:	f001 fd37 	bl	8001e90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000422:	2302      	movs	r3, #2
 8000424:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000426:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800042a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800042c:	2340      	movs	r3, #64	@ 0x40
 800042e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000430:	2302      	movs	r3, #2
 8000432:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000434:	2302      	movs	r3, #2
 8000436:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000438:	2304      	movs	r3, #4
 800043a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 800043c:	234b      	movs	r3, #75	@ 0x4b
 800043e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000440:	2302      	movs	r3, #2
 8000442:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000444:	2302      	movs	r3, #2
 8000446:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000448:	2302      	movs	r3, #2
 800044a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044c:	f107 0318 	add.w	r3, r7, #24
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fdd1 	bl	8001ff8 <HAL_RCC_OscConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800045c:	f000 f93e 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000460:	230f      	movs	r3, #15
 8000462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000464:	2303      	movs	r3, #3
 8000466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000470:	2300      	movs	r3, #0
 8000472:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2104      	movs	r1, #4
 8000478:	4618      	mov	r0, r3
 800047a:	f002 f8d5 	bl	8002628 <HAL_RCC_ClockConfig>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d001      	beq.n	8000488 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000484:	f000 f92a 	bl	80006dc <Error_Handler>
  }
}
 8000488:	bf00      	nop
 800048a:	3750      	adds	r7, #80	@ 0x50
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08c      	sub	sp, #48	@ 0x30
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000496:	463b      	mov	r3, r7
 8000498:	2230      	movs	r2, #48	@ 0x30
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f002 fc9f 	bl	8002de0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004a2:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <MX_DAC1_Init+0x6c>)
 80004a4:	4a16      	ldr	r2, [pc, #88]	@ (8000500 <MX_DAC1_Init+0x70>)
 80004a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004a8:	4814      	ldr	r0, [pc, #80]	@ (80004fc <MX_DAC1_Init+0x6c>)
 80004aa:	f000 fc68 	bl	8000d7e <HAL_DAC_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004b4:	f000 f912 	bl	80006dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80004b8:	2302      	movs	r3, #2
 80004ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80004c8:	231e      	movs	r3, #30
 80004ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80004d4:	2301      	movs	r3, #1
 80004d6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	4619      	mov	r1, r3
 80004e2:	4806      	ldr	r0, [pc, #24]	@ (80004fc <MX_DAC1_Init+0x6c>)
 80004e4:	f000 fdac 	bl	8001040 <HAL_DAC_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80004ee:	f000 f8f5 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	3730      	adds	r7, #48	@ 0x30
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	2000131c 	.word	0x2000131c
 8000500:	50000800 	.word	0x50000800

08000504 <MX_DAC3_Init>:
  * @brief DAC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC3_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08c      	sub	sp, #48	@ 0x30
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC3_Init 0 */

  /* USER CODE END DAC3_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800050a:	463b      	mov	r3, r7
 800050c:	2230      	movs	r2, #48	@ 0x30
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f002 fc65 	bl	8002de0 <memset>

  /* USER CODE END DAC3_Init 1 */

  /** DAC Initialization
  */
  hdac3.Instance = DAC3;
 8000516:	4b16      	ldr	r3, [pc, #88]	@ (8000570 <MX_DAC3_Init+0x6c>)
 8000518:	4a16      	ldr	r2, [pc, #88]	@ (8000574 <MX_DAC3_Init+0x70>)
 800051a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800051c:	4814      	ldr	r0, [pc, #80]	@ (8000570 <MX_DAC3_Init+0x6c>)
 800051e:	f000 fc2e 	bl	8000d7e <HAL_DAC_Init>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_DAC3_Init+0x28>
  {
    Error_Handler();
 8000528:	f000 f8d8 	bl	80006dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800052c:	2302      	movs	r3, #2
 800052e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000538:	2300      	movs	r3, #0
 800053a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800053c:	231e      	movs	r3, #30
 800053e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000540:	2300      	movs	r3, #0
 8000542:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000544:	2302      	movs	r3, #2
 8000546:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8000548:	2302      	movs	r3, #2
 800054a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800054c:	2300      	movs	r3, #0
 800054e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000550:	463b      	mov	r3, r7
 8000552:	2200      	movs	r2, #0
 8000554:	4619      	mov	r1, r3
 8000556:	4806      	ldr	r0, [pc, #24]	@ (8000570 <MX_DAC3_Init+0x6c>)
 8000558:	f000 fd72 	bl	8001040 <HAL_DAC_ConfigChannel>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <MX_DAC3_Init+0x62>
  {
    Error_Handler();
 8000562:	f000 f8bb 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC3_Init 2 */

  /* USER CODE END DAC3_Init 2 */

}
 8000566:	bf00      	nop
 8000568:	3730      	adds	r7, #48	@ 0x30
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20001330 	.word	0x20001330
 8000574:	50001000 	.word	0x50001000

08000578 <MX_OPAMP6_Init>:
  * @brief OPAMP6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP6_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP6_Init 0 */

  /* USER CODE BEGIN OPAMP6_Init 1 */

  /* USER CODE END OPAMP6_Init 1 */
  hopamp6.Instance = OPAMP6;
 800057c:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <MX_OPAMP6_Init+0x44>)
 800057e:	4a10      	ldr	r2, [pc, #64]	@ (80005c0 <MX_OPAMP6_Init+0x48>)
 8000580:	601a      	str	r2, [r3, #0]
  hopamp6.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <MX_OPAMP6_Init+0x44>)
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	605a      	str	r2, [r3, #4]
  hopamp6.Init.Mode = OPAMP_FOLLOWER_MODE;
 8000588:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <MX_OPAMP6_Init+0x44>)
 800058a:	2260      	movs	r2, #96	@ 0x60
 800058c:	609a      	str	r2, [r3, #8]
  hopamp6.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_DAC;
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <MX_OPAMP6_Init+0x44>)
 8000590:	220c      	movs	r2, #12
 8000592:	611a      	str	r2, [r3, #16]
  hopamp6.Init.InternalOutput = DISABLE;
 8000594:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <MX_OPAMP6_Init+0x44>)
 8000596:	2200      	movs	r2, #0
 8000598:	751a      	strb	r2, [r3, #20]
  hopamp6.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800059a:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <MX_OPAMP6_Init+0x44>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  hopamp6.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80005a0:	4b06      	ldr	r3, [pc, #24]	@ (80005bc <MX_OPAMP6_Init+0x44>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_OPAMP_Init(&hopamp6) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <MX_OPAMP6_Init+0x44>)
 80005a8:	f001 fb70 	bl	8001c8c <HAL_OPAMP_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_OPAMP6_Init+0x3e>
  {
    Error_Handler();
 80005b2:	f000 f893 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP6_Init 2 */

  /* USER CODE END OPAMP6_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20001404 	.word	0x20001404
 80005c0:	40010314 	.word	0x40010314

080005c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <MX_TIM6_Init+0x64>)
 80005d6:	4a15      	ldr	r2, [pc, #84]	@ (800062c <MX_TIM6_Init+0x68>)
 80005d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80005da:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <MX_TIM6_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <MX_TIM6_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 29;
 80005e6:	4b10      	ldr	r3, [pc, #64]	@ (8000628 <MX_TIM6_Init+0x64>)
 80005e8:	221d      	movs	r2, #29
 80005ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <MX_TIM6_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005f2:	480d      	ldr	r0, [pc, #52]	@ (8000628 <MX_TIM6_Init+0x64>)
 80005f4:	f002 fa08 	bl	8002a08 <HAL_TIM_Base_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80005fe:	f000 f86d 	bl	80006dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000602:	2320      	movs	r3, #32
 8000604:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4619      	mov	r1, r3
 800060e:	4806      	ldr	r0, [pc, #24]	@ (8000628 <MX_TIM6_Init+0x64>)
 8000610:	f002 fb58 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800061a:	f000 f85f 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	3710      	adds	r7, #16
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20001440 	.word	0x20001440
 800062c:	40001000 	.word	0x40001000

08000630 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <MX_DMA_Init+0x60>)
 8000638:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800063a:	4a15      	ldr	r2, [pc, #84]	@ (8000690 <MX_DMA_Init+0x60>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6493      	str	r3, [r2, #72]	@ 0x48
 8000642:	4b13      	ldr	r3, [pc, #76]	@ (8000690 <MX_DMA_Init+0x60>)
 8000644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <MX_DMA_Init+0x60>)
 8000650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000652:	4a0f      	ldr	r2, [pc, #60]	@ (8000690 <MX_DMA_Init+0x60>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6493      	str	r3, [r2, #72]	@ 0x48
 800065a:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <MX_DMA_Init+0x60>)
 800065c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000666:	2200      	movs	r2, #0
 8000668:	2100      	movs	r1, #0
 800066a:	200b      	movs	r0, #11
 800066c:	f000 fb53 	bl	8000d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000670:	200b      	movs	r0, #11
 8000672:	f000 fb6a 	bl	8000d4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000676:	2200      	movs	r2, #0
 8000678:	2100      	movs	r1, #0
 800067a:	200c      	movs	r0, #12
 800067c:	f000 fb4b 	bl	8000d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000680:	200c      	movs	r0, #12
 8000682:	f000 fb62 	bl	8000d4a <HAL_NVIC_EnableIRQ>

}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40021000 	.word	0x40021000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_GPIO_Init+0x44>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <MX_GPIO_Init+0x44>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <MX_GPIO_Init+0x44>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <MX_GPIO_Init+0x44>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <MX_GPIO_Init+0x44>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <MX_GPIO_Init+0x44>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	@ (800072c <HAL_MspInit+0x44>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006f2:	4a0e      	ldr	r2, [pc, #56]	@ (800072c <HAL_MspInit+0x44>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <HAL_MspInit+0x44>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <HAL_MspInit+0x44>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800070a:	4a08      	ldr	r2, [pc, #32]	@ (800072c <HAL_MspInit+0x44>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000710:	6593      	str	r3, [r2, #88]	@ 0x58
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_MspInit+0x44>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800071e:	f001 fc5b 	bl	8001fd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	@ 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a4a      	ldr	r2, [pc, #296]	@ (8000878 <HAL_DAC_MspInit+0x148>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d151      	bne.n	80007f6 <HAL_DAC_MspInit+0xc6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000752:	4b4a      	ldr	r3, [pc, #296]	@ (800087c <HAL_DAC_MspInit+0x14c>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a49      	ldr	r2, [pc, #292]	@ (800087c <HAL_DAC_MspInit+0x14c>)
 8000758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b47      	ldr	r3, [pc, #284]	@ (800087c <HAL_DAC_MspInit+0x14c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b44      	ldr	r3, [pc, #272]	@ (800087c <HAL_DAC_MspInit+0x14c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a43      	ldr	r2, [pc, #268]	@ (800087c <HAL_DAC_MspInit+0x14c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b41      	ldr	r3, [pc, #260]	@ (800087c <HAL_DAC_MspInit+0x14c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000782:	2310      	movs	r3, #16
 8000784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000786:	2303      	movs	r3, #3
 8000788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000798:	f001 f8f6 	bl	8001988 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800079c:	4b38      	ldr	r3, [pc, #224]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 800079e:	4a39      	ldr	r2, [pc, #228]	@ (8000884 <HAL_DAC_MspInit+0x154>)
 80007a0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80007a2:	4b37      	ldr	r3, [pc, #220]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007a4:	2206      	movs	r2, #6
 80007a6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007a8:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007aa:	2210      	movs	r2, #16
 80007ac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ae:	4b34      	ldr	r3, [pc, #208]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007b4:	4b32      	ldr	r3, [pc, #200]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80007ba:	4b31      	ldr	r3, [pc, #196]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007c8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80007ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007cc:	2220      	movs	r2, #32
 80007ce:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80007d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007d2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80007d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80007d8:	4829      	ldr	r0, [pc, #164]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007da:	f000 fe63 	bl	80014a4 <HAL_DMA_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 80007e4:	f7ff ff7a 	bl	80006dc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4a25      	ldr	r2, [pc, #148]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	4a24      	ldr	r2, [pc, #144]	@ (8000880 <HAL_DAC_MspInit+0x150>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN DAC3_MspInit 1 */

  /* USER CODE END DAC3_MspInit 1 */
  }

}
 80007f4:	e03c      	b.n	8000870 <HAL_DAC_MspInit+0x140>
  else if(hdac->Instance==DAC3)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <HAL_DAC_MspInit+0x158>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d137      	bne.n	8000870 <HAL_DAC_MspInit+0x140>
    __HAL_RCC_DAC3_CLK_ENABLE();
 8000800:	4b1e      	ldr	r3, [pc, #120]	@ (800087c <HAL_DAC_MspInit+0x14c>)
 8000802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000804:	4a1d      	ldr	r2, [pc, #116]	@ (800087c <HAL_DAC_MspInit+0x14c>)
 8000806:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800080a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080c:	4b1b      	ldr	r3, [pc, #108]	@ (800087c <HAL_DAC_MspInit+0x14c>)
 800080e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000810:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
    hdma_dac3_ch1.Instance = DMA1_Channel1;
 8000818:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 800081a:	4a1d      	ldr	r2, [pc, #116]	@ (8000890 <HAL_DAC_MspInit+0x160>)
 800081c:	601a      	str	r2, [r3, #0]
    hdma_dac3_ch1.Init.Request = DMA_REQUEST_DAC3_CHANNEL1;
 800081e:	4b1b      	ldr	r3, [pc, #108]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 8000820:	2266      	movs	r2, #102	@ 0x66
 8000822:	605a      	str	r2, [r3, #4]
    hdma_dac3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000824:	4b19      	ldr	r3, [pc, #100]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 8000826:	2210      	movs	r2, #16
 8000828:	609a      	str	r2, [r3, #8]
    hdma_dac3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
    hdma_dac3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000830:	4b16      	ldr	r3, [pc, #88]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 8000832:	2280      	movs	r2, #128	@ 0x80
 8000834:	611a      	str	r2, [r3, #16]
    hdma_dac3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 8000838:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800083c:	615a      	str	r2, [r3, #20]
    hdma_dac3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 8000840:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000844:	619a      	str	r2, [r3, #24]
    hdma_dac3_ch1.Init.Mode = DMA_CIRCULAR;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 8000848:	2220      	movs	r2, #32
 800084a:	61da      	str	r2, [r3, #28]
    hdma_dac3_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 800084e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8000852:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac3_ch1) != HAL_OK)
 8000854:	480d      	ldr	r0, [pc, #52]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 8000856:	f000 fe25 	bl	80014a4 <HAL_DMA_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <HAL_DAC_MspInit+0x134>
      Error_Handler();
 8000860:	f7ff ff3c 	bl	80006dc <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac3_ch1);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a09      	ldr	r2, [pc, #36]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <HAL_DAC_MspInit+0x15c>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	@ 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	50000800 	.word	0x50000800
 800087c:	40021000 	.word	0x40021000
 8000880:	20001344 	.word	0x20001344
 8000884:	4002001c 	.word	0x4002001c
 8000888:	50001000 	.word	0x50001000
 800088c:	200013a4 	.word	0x200013a4
 8000890:	40020008 	.word	0x40020008

08000894 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP6)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <HAL_OPAMP_MspInit+0x5c>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d118      	bne.n	80008e8 <HAL_OPAMP_MspInit+0x54>
  {
  /* USER CODE BEGIN OPAMP6_MspInit 0 */

  /* USER CODE END OPAMP6_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_OPAMP_MspInit+0x60>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <HAL_OPAMP_MspInit+0x60>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_OPAMP_MspInit+0x60>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
    /**OPAMP6 GPIO Configuration
    PB11     ------> OPAMP6_VOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80008d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d4:	2303      	movs	r3, #3
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	4619      	mov	r1, r3
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <HAL_OPAMP_MspInit+0x64>)
 80008e4:	f001 f850 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP6_MspInit 1 */

  /* USER CODE END OPAMP6_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40010314 	.word	0x40010314
 80008f4:	40021000 	.word	0x40021000
 80008f8:	48000400 	.word	0x48000400

080008fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b085      	sub	sp, #20
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <HAL_TIM_Base_MspInit+0x38>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d10b      	bne.n	8000926 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800090e:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <HAL_TIM_Base_MspInit+0x3c>)
 8000910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000912:	4a09      	ldr	r2, [pc, #36]	@ (8000938 <HAL_TIM_Base_MspInit+0x3c>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6593      	str	r3, [r2, #88]	@ 0x58
 800091a:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <HAL_TIM_Base_MspInit+0x3c>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40001000 	.word	0x40001000
 8000938:	40021000 	.word	0x40021000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <NMI_Handler+0x4>

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <MemManage_Handler+0x4>

08000954 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <UsageFault_Handler+0x4>

08000964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000992:	f000 f8a5 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac3_ch1);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <DMA1_Channel1_IRQHandler+0x10>)
 80009a2:	f000 fea2 	bl	80016ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200013a4 	.word	0x200013a4

080009b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80009b4:	4802      	ldr	r0, [pc, #8]	@ (80009c0 <DMA1_Channel2_IRQHandler+0x10>)
 80009b6:	f000 fe98 	bl	80016ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20001344 	.word	0x20001344

080009c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e8:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490e      	ldr	r1, [pc, #56]	@ (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0b      	ldr	r4, [pc, #44]	@ (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a12:	f7ff ffd7 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f002 f9eb 	bl	8002df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fbfd 	bl	8000218 <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   r0, =_estack
 8000a20:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20001300 	.word	0x20001300
  ldr r2, =_sidata
 8000a2c:	08002e68 	.word	0x08002e68
  ldr r2, =_sbss
 8000a30:	20001300 	.word	0x20001300
  ldr r4, =_ebss
 8000a34:	20001590 	.word	0x20001590

08000a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_2_IRQHandler>

08000a3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f95b 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 f80e 	bl	8000a6c <HAL_InitTick>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	e001      	b.n	8000a60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5c:	f7ff fe44 	bl	80006e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a60:	79fb      	ldrb	r3, [r7, #7]

}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a78:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <HAL_InitTick+0x68>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d022      	beq.n	8000ac6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <HAL_InitTick+0x6c>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <HAL_InitTick+0x68>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f966 	bl	8000d66 <HAL_SYSTICK_Config>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d10f      	bne.n	8000ac0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	d809      	bhi.n	8000aba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	6879      	ldr	r1, [r7, #4]
 8000aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8000aae:	f000 f932 	bl	8000d16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_InitTick+0x70>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	e007      	b.n	8000aca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e004      	b.n	8000aca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e001      	b.n	8000aca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200012fc 	.word	0x200012fc
 8000ad8:	200012f4 	.word	0x200012f4
 8000adc:	200012f8 	.word	0x200012f8

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_IncTick+0x20>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a03      	ldr	r2, [pc, #12]	@ (8000afc <HAL_IncTick+0x1c>)
 8000af0:	6013      	str	r3, [r2, #0]
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	2000158c 	.word	0x2000158c
 8000b00:	200012fc 	.word	0x200012fc

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <HAL_GetTick+0x14>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000158c 	.word	0x2000158c

08000b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b24:	f7ff ffee 	bl	8000b04 <HAL_GetTick>
 8000b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b34:	d004      	beq.n	8000b40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b36:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <HAL_Delay+0x40>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b40:	bf00      	nop
 8000b42:	f7ff ffdf 	bl	8000b04 <HAL_GetTick>
 8000b46:	4602      	mov	r2, r0
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d8f7      	bhi.n	8000b42 <HAL_Delay+0x26>
  {
  }
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	200012fc 	.word	0x200012fc

08000b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b76:	68ba      	ldr	r2, [r7, #8]
 8000b78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b92:	4a04      	ldr	r2, [pc, #16]	@ (8000ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	60d3      	str	r3, [r2, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	3714      	adds	r7, #20
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bac:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	0a1b      	lsrs	r3, r3, #8
 8000bb2:	f003 0307 	and.w	r3, r3, #7
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	db0b      	blt.n	8000bee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	f003 021f 	and.w	r2, r3, #31
 8000bdc:	4907      	ldr	r1, [pc, #28]	@ (8000bfc <__NVIC_EnableIRQ+0x38>)
 8000bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be2:	095b      	lsrs	r3, r3, #5
 8000be4:	2001      	movs	r0, #1
 8000be6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	@ (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	@ (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	@ 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	@ 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff29 	bl	8000b60 <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff40 	bl	8000ba8 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	4603      	mov	r3, r0
 8000d52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff33 	bl	8000bc4 <__NVIC_EnableIRQ>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffa4 	bl	8000cbc <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e014      	b.n	8000dba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	791b      	ldrb	r3, [r3, #4]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d105      	bne.n	8000da6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff fcc5 	bl	8000730 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2202      	movs	r2, #2
 8000daa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2201      	movs	r2, #1
 8000db6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	795b      	ldrb	r3, [r3, #5]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d101      	bne.n	8000dd8 <HAL_DAC_Start+0x16>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e043      	b.n	8000e60 <HAL_DAC_Start+0x9e>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2201      	movs	r2, #1
 8000ddc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2202      	movs	r2, #2
 8000de2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6819      	ldr	r1, [r3, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	2201      	movs	r2, #1
 8000df2:	409a      	lsls	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f7ff fe8d 	bl	8000b1c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d10f      	bne.n	8000e28 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d11d      	bne.n	8000e52 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f042 0201 	orr.w	r2, r2, #1
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	e014      	b.n	8000e52 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	f003 0310 	and.w	r3, r3, #16
 8000e38:	2102      	movs	r1, #2
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d107      	bne.n	8000e52 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	685a      	ldr	r2, [r3, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0202 	orr.w	r2, r2, #2
 8000e50:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2201      	movs	r2, #1
 8000e56:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
 8000e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	795b      	ldrb	r3, [r3, #5]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d101      	bne.n	8000e86 <HAL_DAC_Start_DMA+0x1e>
 8000e82:	2302      	movs	r3, #2
 8000e84:	e0ae      	b.n	8000fe4 <HAL_DAC_Start_DMA+0x17c>
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2202      	movs	r2, #2
 8000e90:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d12f      	bne.n	8000ef8 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	4a53      	ldr	r2, [pc, #332]	@ (8000fec <HAL_DAC_Start_DMA+0x184>)
 8000e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	4a52      	ldr	r2, [pc, #328]	@ (8000ff0 <HAL_DAC_Start_DMA+0x188>)
 8000ea6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	4a51      	ldr	r2, [pc, #324]	@ (8000ff4 <HAL_DAC_Start_DMA+0x18c>)
 8000eae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000ebe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d013      	beq.n	8000eee <HAL_DAC_Start_DMA+0x86>
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d845      	bhi.n	8000f58 <HAL_DAC_Start_DMA+0xf0>
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_DAC_Start_DMA+0x72>
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d005      	beq.n	8000ee4 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000ed8:	e03e      	b.n	8000f58 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3308      	adds	r3, #8
 8000ee0:	613b      	str	r3, [r7, #16]
        break;
 8000ee2:	e03c      	b.n	8000f5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	330c      	adds	r3, #12
 8000eea:	613b      	str	r3, [r7, #16]
        break;
 8000eec:	e037      	b.n	8000f5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3310      	adds	r3, #16
 8000ef4:	613b      	str	r3, [r7, #16]
        break;
 8000ef6:	e032      	b.n	8000f5e <HAL_DAC_Start_DMA+0xf6>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	4a3e      	ldr	r2, [pc, #248]	@ (8000ff8 <HAL_DAC_Start_DMA+0x190>)
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	4a3d      	ldr	r2, [pc, #244]	@ (8000ffc <HAL_DAC_Start_DMA+0x194>)
 8000f06:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8001000 <HAL_DAC_Start_DMA+0x198>)
 8000f0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f1e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000f20:	6a3b      	ldr	r3, [r7, #32]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d013      	beq.n	8000f4e <HAL_DAC_Start_DMA+0xe6>
 8000f26:	6a3b      	ldr	r3, [r7, #32]
 8000f28:	2b08      	cmp	r3, #8
 8000f2a:	d817      	bhi.n	8000f5c <HAL_DAC_Start_DMA+0xf4>
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_DAC_Start_DMA+0xd2>
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d005      	beq.n	8000f44 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000f38:	e010      	b.n	8000f5c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	3314      	adds	r3, #20
 8000f40:	613b      	str	r3, [r7, #16]
        break;
 8000f42:	e00c      	b.n	8000f5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	3318      	adds	r3, #24
 8000f4a:	613b      	str	r3, [r7, #16]
        break;
 8000f4c:	e007      	b.n	8000f5e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	331c      	adds	r3, #28
 8000f54:	613b      	str	r3, [r7, #16]
        break;
 8000f56:	e002      	b.n	8000f5e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000f58:	bf00      	nop
 8000f5a:	e000      	b.n	8000f5e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000f5c:	bf00      	nop
    }
  }


  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d111      	bne.n	8000f88 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000f72:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6898      	ldr	r0, [r3, #8]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	f000 fb39 	bl	80015f4 <HAL_DMA_Start_IT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	75fb      	strb	r3, [r7, #23]
 8000f86:	e010      	b.n	8000faa <HAL_DAC_Start_DMA+0x142>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8000f96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	68d8      	ldr	r0, [r3, #12]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	f000 fb27 	bl	80015f4 <HAL_DMA_Start_IT>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10f      	bne.n	8000fd6 <HAL_DAC_Start_DMA+0x16e>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6819      	ldr	r1, [r3, #0]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	f003 0310 	and.w	r3, r3, #16
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f7ff fda4 	bl	8000b1c <HAL_Delay>
 8000fd4:	e005      	b.n	8000fe2 <HAL_DAC_Start_DMA+0x17a>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	f043 0204 	orr.w	r2, r3, #4
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	08001391 	.word	0x08001391
 8000ff0:	080013b3 	.word	0x080013b3
 8000ff4:	080013cf 	.word	0x080013cf
 8000ff8:	08001439 	.word	0x08001439
 8000ffc:	0800145b 	.word	0x0800145b
 8001000:	08001477 	.word	0x08001477

08001004 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	795b      	ldrb	r3, [r3, #5]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d101      	bne.n	8001058 <HAL_DAC_ConfigChannel+0x18>
 8001054:	2302      	movs	r3, #2
 8001056:	e192      	b.n	800137e <HAL_DAC_ConfigChannel+0x33e>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2201      	movs	r2, #1
 800105c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2202      	movs	r2, #2
 8001062:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d174      	bne.n	8001156 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800106c:	f7ff fd4a 	bl	8000b04 <HAL_GetTick>
 8001070:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d134      	bne.n	80010e2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001078:	e011      	b.n	800109e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800107a:	f7ff fd43 	bl	8000b04 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d90a      	bls.n	800109e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	f043 0208 	orr.w	r2, r3, #8
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2203      	movs	r2, #3
 8001098:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e16f      	b.n	800137e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1e6      	bne.n	800107a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80010ac:	2001      	movs	r0, #1
 80010ae:	f7ff fd35 	bl	8000b1c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80010ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80010bc:	e01e      	b.n	80010fc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80010be:	f7ff fd21 	bl	8000b04 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d90a      	bls.n	80010e2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	f043 0208 	orr.w	r2, r3, #8
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2203      	movs	r2, #3
 80010dc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e14d      	b.n	800137e <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	dbe8      	blt.n	80010be <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 80010ec:	2001      	movs	r0, #1
 80010ee:	f7ff fd15 	bl	8000b1c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80010fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	ea02 0103 	and.w	r1, r2, r3
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f003 0310 	and.w	r3, r3, #16
 8001120:	409a      	lsls	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	21ff      	movs	r1, #255	@ 0xff
 8001138:	fa01 f303 	lsl.w	r3, r1, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	ea02 0103 	and.w	r1, r2, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f003 0310 	and.w	r3, r3, #16
 800114c:	409a      	lsls	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d11d      	bne.n	800119a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	221f      	movs	r2, #31
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001176:	4013      	ands	r3, r2
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	6a1b      	ldr	r3, [r3, #32]
 800117e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800118e:	4313      	orrs	r3, r2
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001198:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f003 0310 	and.w	r3, r3, #16
 80011a8:	2207      	movs	r2, #7
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011b2:	4013      	ands	r3, r2
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d102      	bne.n	80011c4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
 80011c2:	e00f      	b.n	80011e4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d102      	bne.n	80011d2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80011cc:	2301      	movs	r3, #1
 80011ce:	623b      	str	r3, [r7, #32]
 80011d0:	e008      	b.n	80011e4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
 80011de:	e001      	b.n	80011e4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001206:	4013      	ands	r3, r2
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	791b      	ldrb	r3, [r3, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d102      	bne.n	8001218 <HAL_DAC_ConfigChannel+0x1d8>
 8001212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001216:	e000      	b.n	800121a <HAL_DAC_ConfigChannel+0x1da>
 8001218:	2300      	movs	r3, #0
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0310 	and.w	r3, r3, #16
 8001226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001232:	4013      	ands	r3, r2
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	795b      	ldrb	r3, [r3, #5]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d102      	bne.n	8001244 <HAL_DAC_ConfigChannel+0x204>
 800123e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001242:	e000      	b.n	8001246 <HAL_DAC_ConfigChannel+0x206>
 8001244:	2300      	movs	r3, #0
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d114      	bne.n	8001286 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800125c:	f001 fb82 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8001260:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	4a48      	ldr	r2, [pc, #288]	@ (8001388 <HAL_DAC_ConfigChannel+0x348>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d904      	bls.n	8001274 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001270:	627b      	str	r3, [r7, #36]	@ 0x24
 8001272:	e00f      	b.n	8001294 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	4a45      	ldr	r2, [pc, #276]	@ (800138c <HAL_DAC_ConfigChannel+0x34c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d90a      	bls.n	8001292 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001282:	627b      	str	r3, [r7, #36]	@ 0x24
 8001284:	e006      	b.n	8001294 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800128c:	4313      	orrs	r3, r2
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001290:	e000      	b.n	8001294 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8001292:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a2:	4313      	orrs	r3, r2
 80012a4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6819      	ldr	r1, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0310 	and.w	r3, r3, #16
 80012ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	400a      	ands	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0310 	and.w	r3, r3, #16
 80012da:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012e6:	4013      	ands	r3, r2
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012fe:	4313      	orrs	r3, r2
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001308:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6819      	ldr	r1, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	22c0      	movs	r2, #192	@ 0xc0
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43da      	mvns	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	400a      	ands	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f003 0310 	and.w	r3, r3, #16
 8001350:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	ea02 0103 	and.w	r1, r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2201      	movs	r2, #1
 8001374:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3728      	adds	r7, #40	@ 0x28
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	09896800 	.word	0x09896800
 800138c:	04c4b400 	.word	0x04c4b400

08001390 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff fe30 	bl	8001004 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2201      	movs	r2, #1
 80013a8:	711a      	strb	r2, [r3, #4]
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013be:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff fe29 	bl	8001018 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013da:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	f043 0204 	orr.w	r2, r3, #4
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f7ff fe1f 	bl	800102c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2201      	movs	r2, #1
 80013f2:	711a      	strb	r2, [r3, #4]
}
 80013f4:	bf00      	nop
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001444:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff ffd8 	bl	80013fc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2201      	movs	r2, #1
 8001450:	711a      	strb	r2, [r3, #4]
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001466:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff ffd1 	bl	8001410 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001482:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	f043 0204 	orr.w	r2, r3, #4
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001490:	68f8      	ldr	r0, [r7, #12]
 8001492:	f7ff ffc7 	bl	8001424 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2201      	movs	r2, #1
 800149a:	711a      	strb	r2, [r3, #4]
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e08d      	b.n	80015d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	4b47      	ldr	r3, [pc, #284]	@ (80015dc <HAL_DMA_Init+0x138>)
 80014be:	429a      	cmp	r2, r3
 80014c0:	d80f      	bhi.n	80014e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b45      	ldr	r3, [pc, #276]	@ (80015e0 <HAL_DMA_Init+0x13c>)
 80014ca:	4413      	add	r3, r2
 80014cc:	4a45      	ldr	r2, [pc, #276]	@ (80015e4 <HAL_DMA_Init+0x140>)
 80014ce:	fba2 2303 	umull	r2, r3, r2, r3
 80014d2:	091b      	lsrs	r3, r3, #4
 80014d4:	009a      	lsls	r2, r3, #2
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a42      	ldr	r2, [pc, #264]	@ (80015e8 <HAL_DMA_Init+0x144>)
 80014de:	641a      	str	r2, [r3, #64]	@ 0x40
 80014e0:	e00e      	b.n	8001500 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b40      	ldr	r3, [pc, #256]	@ (80015ec <HAL_DMA_Init+0x148>)
 80014ea:	4413      	add	r3, r2
 80014ec:	4a3d      	ldr	r2, [pc, #244]	@ (80015e4 <HAL_DMA_Init+0x140>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	009a      	lsls	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a3c      	ldr	r2, [pc, #240]	@ (80015f0 <HAL_DMA_Init+0x14c>)
 80014fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800151a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001524:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001530:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001544:	68fa      	ldr	r2, [r7, #12]
 8001546:	4313      	orrs	r3, r2
 8001548:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f9b6 	bl	80018c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001560:	d102      	bne.n	8001568 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800157c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d010      	beq.n	80015a8 <HAL_DMA_Init+0x104>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b04      	cmp	r3, #4
 800158c:	d80c      	bhi.n	80015a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f9d6 	bl	8001940 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	e008      	b.n	80015ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40020407 	.word	0x40020407
 80015e0:	bffdfff8 	.word	0xbffdfff8
 80015e4:	cccccccd 	.word	0xcccccccd
 80015e8:	40020000 	.word	0x40020000
 80015ec:	bffdfbf8 	.word	0xbffdfbf8
 80015f0:	40020400 	.word	0x40020400

080015f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800160c:	2b01      	cmp	r3, #1
 800160e:	d101      	bne.n	8001614 <HAL_DMA_Start_IT+0x20>
 8001610:	2302      	movs	r3, #2
 8001612:	e066      	b.n	80016e2 <HAL_DMA_Start_IT+0xee>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2b01      	cmp	r3, #1
 8001626:	d155      	bne.n	80016d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2202      	movs	r2, #2
 800162c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f8fb 	bl	8001848 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	2b00      	cmp	r3, #0
 8001658:	d008      	beq.n	800166c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 020e 	orr.w	r2, r2, #14
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	e00f      	b.n	800168c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0204 	bic.w	r2, r2, #4
 800167a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 020a 	orr.w	r2, r2, #10
 800168a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0201 	orr.w	r2, r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	e005      	b.n	80016e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016dc:	2302      	movs	r3, #2
 80016de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f003 031f 	and.w	r3, r3, #31
 800170a:	2204      	movs	r2, #4
 800170c:	409a      	lsls	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4013      	ands	r3, r2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d026      	beq.n	8001764 <HAL_DMA_IRQHandler+0x7a>
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d021      	beq.n	8001764 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0320 	and.w	r3, r3, #32
 800172a:	2b00      	cmp	r3, #0
 800172c:	d107      	bne.n	800173e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0204 	bic.w	r2, r2, #4
 800173c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001742:	f003 021f 	and.w	r2, r3, #31
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	2104      	movs	r1, #4
 800174c:	fa01 f202 	lsl.w	r2, r1, r2
 8001750:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	2b00      	cmp	r3, #0
 8001758:	d071      	beq.n	800183e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001762:	e06c      	b.n	800183e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	2202      	movs	r2, #2
 800176e:	409a      	lsls	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d02e      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d029      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0320 	and.w	r3, r3, #32
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10b      	bne.n	80017a8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 020a 	bic.w	r2, r2, #10
 800179e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ac:	f003 021f 	and.w	r2, r3, #31
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	2102      	movs	r1, #2
 80017b6:	fa01 f202 	lsl.w	r2, r1, r2
 80017ba:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d038      	beq.n	800183e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017d4:	e033      	b.n	800183e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f003 031f 	and.w	r3, r3, #31
 80017de:	2208      	movs	r2, #8
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d02a      	beq.n	8001840 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d025      	beq.n	8001840 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 020e 	bic.w	r2, r2, #14
 8001802:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	2101      	movs	r1, #1
 8001812:	fa01 f202 	lsl.w	r2, r1, r2
 8001816:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800183e:	bf00      	nop
 8001840:	bf00      	nop
}
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800185e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001870:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	f003 021f 	and.w	r2, r3, #31
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2b10      	cmp	r3, #16
 8001894:	d108      	bne.n	80018a8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018a6:	e007      	b.n	80018b8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	60da      	str	r2, [r3, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b16      	ldr	r3, [pc, #88]	@ (800192c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d802      	bhi.n	80018de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80018d8:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e001      	b.n	80018e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80018e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3b08      	subs	r3, #8
 80018ee:	4a12      	ldr	r2, [pc, #72]	@ (8001938 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fc:	089b      	lsrs	r3, r3, #2
 80018fe:	009a      	lsls	r2, r3, #2
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4413      	add	r3, r2
 8001904:	461a      	mov	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a0b      	ldr	r2, [pc, #44]	@ (800193c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800190e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	2201      	movs	r2, #1
 8001918:	409a      	lsls	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40020407 	.word	0x40020407
 8001930:	40020800 	.word	0x40020800
 8001934:	40020820 	.word	0x40020820
 8001938:	cccccccd 	.word	0xcccccccd
 800193c:	40020880 	.word	0x40020880

08001940 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001954:	4413      	add	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	461a      	mov	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001962:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3b01      	subs	r3, #1
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	2201      	movs	r2, #1
 800196e:	409a      	lsls	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	1000823f 	.word	0x1000823f
 8001984:	40020940 	.word	0x40020940

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001996:	e15a      	b.n	8001c4e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	2101      	movs	r1, #1
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	4013      	ands	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 814c 	beq.w	8001c48 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d005      	beq.n	80019c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d130      	bne.n	8001a2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	2203      	movs	r2, #3
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68da      	ldr	r2, [r3, #12]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019fe:	2201      	movs	r2, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	091b      	lsrs	r3, r3, #4
 8001a14:	f003 0201 	and.w	r2, r3, #1
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d017      	beq.n	8001a66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d123      	bne.n	8001aba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	08da      	lsrs	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3208      	adds	r2, #8
 8001a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4013      	ands	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	691a      	ldr	r2, [r3, #16]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	6939      	ldr	r1, [r7, #16]
 8001ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0203 	and.w	r2, r3, #3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80a6 	beq.w	8001c48 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001afc:	4b5b      	ldr	r3, [pc, #364]	@ (8001c6c <HAL_GPIO_Init+0x2e4>)
 8001afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b00:	4a5a      	ldr	r2, [pc, #360]	@ (8001c6c <HAL_GPIO_Init+0x2e4>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b08:	4b58      	ldr	r3, [pc, #352]	@ (8001c6c <HAL_GPIO_Init+0x2e4>)
 8001b0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b14:	4a56      	ldr	r2, [pc, #344]	@ (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b3e:	d01f      	beq.n	8001b80 <HAL_GPIO_Init+0x1f8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a4c      	ldr	r2, [pc, #304]	@ (8001c74 <HAL_GPIO_Init+0x2ec>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d019      	beq.n	8001b7c <HAL_GPIO_Init+0x1f4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a4b      	ldr	r2, [pc, #300]	@ (8001c78 <HAL_GPIO_Init+0x2f0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d013      	beq.n	8001b78 <HAL_GPIO_Init+0x1f0>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a4a      	ldr	r2, [pc, #296]	@ (8001c7c <HAL_GPIO_Init+0x2f4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00d      	beq.n	8001b74 <HAL_GPIO_Init+0x1ec>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a49      	ldr	r2, [pc, #292]	@ (8001c80 <HAL_GPIO_Init+0x2f8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d007      	beq.n	8001b70 <HAL_GPIO_Init+0x1e8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a48      	ldr	r2, [pc, #288]	@ (8001c84 <HAL_GPIO_Init+0x2fc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_GPIO_Init+0x1e4>
 8001b68:	2305      	movs	r3, #5
 8001b6a:	e00a      	b.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b6c:	2306      	movs	r3, #6
 8001b6e:	e008      	b.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b70:	2304      	movs	r3, #4
 8001b72:	e006      	b.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b74:	2303      	movs	r3, #3
 8001b76:	e004      	b.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b78:	2302      	movs	r3, #2
 8001b7a:	e002      	b.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_GPIO_Init+0x1fa>
 8001b80:	2300      	movs	r3, #0
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	f002 0203 	and.w	r2, r2, #3
 8001b88:	0092      	lsls	r2, r2, #2
 8001b8a:	4093      	lsls	r3, r2
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b92:	4937      	ldr	r1, [pc, #220]	@ (8001c70 <HAL_GPIO_Init+0x2e8>)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ba0:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <HAL_GPIO_Init+0x300>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc4:	4a30      	ldr	r2, [pc, #192]	@ (8001c88 <HAL_GPIO_Init+0x300>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bca:	4b2f      	ldr	r3, [pc, #188]	@ (8001c88 <HAL_GPIO_Init+0x300>)
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bee:	4a26      	ldr	r2, [pc, #152]	@ (8001c88 <HAL_GPIO_Init+0x300>)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bf4:	4b24      	ldr	r3, [pc, #144]	@ (8001c88 <HAL_GPIO_Init+0x300>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c18:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <HAL_GPIO_Init+0x300>)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <HAL_GPIO_Init+0x300>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c42:	4a11      	ldr	r2, [pc, #68]	@ (8001c88 <HAL_GPIO_Init+0x300>)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f47f ae9d 	bne.w	8001998 <HAL_GPIO_Init+0x10>
  }
}
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40010000 	.word	0x40010000
 8001c74:	48000400 	.word	0x48000400
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	48000c00 	.word	0x48000c00
 8001c80:	48001000 	.word	0x48001000
 8001c84:	48001400 	.word	0x48001400
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c94:	2300      	movs	r3, #0
 8001c96:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0bb      	b.n	8001e1a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d101      	bne.n	8001cb2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0b3      	b.n	8001e1a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0ab      	b.n	8001e1a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b58      	ldr	r3, [pc, #352]	@ (8001e24 <HAL_OPAMP_Init+0x198>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc6:	4a57      	ldr	r2, [pc, #348]	@ (8001e24 <HAL_OPAMP_Init+0x198>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cce:	4b55      	ldr	r3, [pc, #340]	@ (8001e24 <HAL_OPAMP_Init+0x198>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d103      	bne.n	8001cee <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fdd0 	bl	8000894 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b40      	cmp	r3, #64	@ 0x40
 8001cfa:	d003      	beq.n	8001d04 <HAL_OPAMP_Init+0x78>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b60      	cmp	r3, #96	@ 0x60
 8001d02:	d133      	bne.n	8001d6c <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 0110 	bic.w	r1, r3, #16
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b41      	ldr	r3, [pc, #260]	@ (8001e28 <HAL_OPAMP_Init+0x19c>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6851      	ldr	r1, [r2, #4]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6892      	ldr	r2, [r2, #8]
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6912      	ldr	r2, [r2, #16]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	6879      	ldr	r1, [r7, #4]
 8001d36:	7d09      	ldrb	r1, [r1, #20]
 8001d38:	2901      	cmp	r1, #1
 8001d3a:	d102      	bne.n	8001d42 <HAL_OPAMP_Init+0xb6>
 8001d3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d40:	e000      	b.n	8001d44 <HAL_OPAMP_Init+0xb8>
 8001d42:	2100      	movs	r1, #0
 8001d44:	4311      	orrs	r1, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d4a:	4311      	orrs	r1, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d50:	4311      	orrs	r1, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d56:	04d2      	lsls	r2, r2, #19
 8001d58:	4311      	orrs	r1, r2
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d5e:	0612      	lsls	r2, r2, #24
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	430b      	orrs	r3, r1
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e035      	b.n	8001dd8 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 0110 	bic.w	r1, r3, #16
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b27      	ldr	r3, [pc, #156]	@ (8001e28 <HAL_OPAMP_Init+0x19c>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6851      	ldr	r1, [r2, #4]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6892      	ldr	r2, [r2, #8]
 8001d94:	4311      	orrs	r1, r2
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68d2      	ldr	r2, [r2, #12]
 8001d9a:	4311      	orrs	r1, r2
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6912      	ldr	r2, [r2, #16]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	7d09      	ldrb	r1, [r1, #20]
 8001da6:	2901      	cmp	r1, #1
 8001da8:	d102      	bne.n	8001db0 <HAL_OPAMP_Init+0x124>
 8001daa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dae:	e000      	b.n	8001db2 <HAL_OPAMP_Init+0x126>
 8001db0:	2100      	movs	r1, #0
 8001db2:	4311      	orrs	r1, r2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001db8:	4311      	orrs	r1, r2
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001dbe:	4311      	orrs	r1, r2
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001dc4:	04d2      	lsls	r2, r2, #19
 8001dc6:	4311      	orrs	r1, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001dcc:	0612      	lsls	r2, r2, #24
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	699b      	ldr	r3, [r3, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db10      	blt.n	8001e04 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699a      	ldr	r2, [r3, #24]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	e0003e11 	.word	0xe0003e11

08001e2c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	e01d      	b.n	8001e80 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d102      	bne.n	8001e56 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	73fb      	strb	r3, [r7, #15]
 8001e54:	e014      	b.n	8001e80 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d10c      	bne.n	8001e7c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2204      	movs	r2, #4
 8001e76:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8001e7a:	e001      	b.n	8001e80 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8001e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d141      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eaa:	d131      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eac:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eb2:	4a46      	ldr	r2, [pc, #280]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec4:	4a41      	ldr	r2, [pc, #260]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ecc:	4b40      	ldr	r3, [pc, #256]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2232      	movs	r2, #50	@ 0x32
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	0c9b      	lsrs	r3, r3, #18
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee2:	e002      	b.n	8001eea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eea:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef6:	d102      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f2      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001efe:	4b33      	ldr	r3, [pc, #204]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0a:	d158      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e057      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f10:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f16:	4a2d      	ldr	r2, [pc, #180]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f20:	e04d      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f28:	d141      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f36:	d131      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f38:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f3e:	4a23      	ldr	r2, [pc, #140]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f50:	4a1e      	ldr	r2, [pc, #120]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2232      	movs	r2, #50	@ 0x32
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6e:	e002      	b.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f82:	d102      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f96:	d112      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e011      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fac:	e007      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	200012f4 	.word	0x200012f4
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e306      	b.n	8002618 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d075      	beq.n	8002102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002016:	4b97      	ldr	r3, [pc, #604]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	4b94      	ldr	r3, [pc, #592]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d102      	bne.n	8002036 <HAL_RCC_OscConfig+0x3e>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d002      	beq.n	800203c <HAL_RCC_OscConfig+0x44>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d10b      	bne.n	8002054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	4b8d      	ldr	r3, [pc, #564]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05b      	beq.n	8002100 <HAL_RCC_OscConfig+0x108>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d157      	bne.n	8002100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e2e1      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205c:	d106      	bne.n	800206c <HAL_RCC_OscConfig+0x74>
 800205e:	4b85      	ldr	r3, [pc, #532]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a84      	ldr	r2, [pc, #528]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x98>
 8002076:	4b7f      	ldr	r3, [pc, #508]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7e      	ldr	r2, [pc, #504]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b7c      	ldr	r3, [pc, #496]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7b      	ldr	r2, [pc, #492]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 8002090:	4b78      	ldr	r3, [pc, #480]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a77      	ldr	r2, [pc, #476]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b75      	ldr	r3, [pc, #468]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a74      	ldr	r2, [pc, #464]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fd28 	bl	8000b04 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7fe fd24 	bl	8000b04 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e2a6      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xc0>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7fe fd14 	bl	8000b04 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7fe fd10 	bl	8000b04 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e292      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f2:	4b60      	ldr	r3, [pc, #384]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0xe8>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d075      	beq.n	80021fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210e:	4b59      	ldr	r3, [pc, #356]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002118:	4b56      	ldr	r3, [pc, #344]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d102      	bne.n	800212e <HAL_RCC_OscConfig+0x136>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d002      	beq.n	8002134 <HAL_RCC_OscConfig+0x13c>
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d11f      	bne.n	8002174 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002134:	4b4f      	ldr	r3, [pc, #316]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_OscConfig+0x154>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e265      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	4946      	ldr	r1, [pc, #280]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002160:	4b45      	ldr	r3, [pc, #276]	@ (8002278 <HAL_RCC_OscConfig+0x280>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fc81 	bl	8000a6c <HAL_InitTick>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d043      	beq.n	80021f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e251      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a3c      	ldr	r2, [pc, #240]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe fcbc 	bl	8000b04 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7fe fcb8 	bl	8000b04 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e23a      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a2:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	492d      	ldr	r1, [pc, #180]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e01a      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fc98 	bl	8000b04 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d8:	f7fe fc94 	bl	8000b04 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e216      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1e0>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d041      	beq.n	800228a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01c      	beq.n	8002248 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7fe fc71 	bl	8000b04 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7fe fc6d 	bl	8000b04 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1ef      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0ef      	beq.n	8002226 <HAL_RCC_OscConfig+0x22e>
 8002246:	e020      	b.n	800228a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224e:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7fe fc54 	bl	8000b04 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800225e:	e00d      	b.n	800227c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7fe fc50 	bl	8000b04 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d906      	bls.n	800227c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1d2      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	200012f8 	.word	0x200012f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227c:	4b8c      	ldr	r3, [pc, #560]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ea      	bne.n	8002260 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80a6 	beq.w	80023e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800229c:	4b84      	ldr	r3, [pc, #528]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_OscConfig+0x2b4>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x2b6>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b7f      	ldr	r3, [pc, #508]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	4a7e      	ldr	r2, [pc, #504]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022be:	4b7c      	ldr	r3, [pc, #496]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ce:	4b79      	ldr	r3, [pc, #484]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022da:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a75      	ldr	r2, [pc, #468]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7fe fc0d 	bl	8000b04 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7fe fc09 	bl	8000b04 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e18b      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002300:	4b6c      	ldr	r3, [pc, #432]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <HAL_RCC_OscConfig+0x32e>
 8002314:	4b66      	ldr	r3, [pc, #408]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231a:	4a65      	ldr	r2, [pc, #404]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002324:	e024      	b.n	8002370 <HAL_RCC_OscConfig+0x378>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d110      	bne.n	8002350 <HAL_RCC_OscConfig+0x358>
 800232e:	4b60      	ldr	r3, [pc, #384]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002334:	4a5e      	ldr	r2, [pc, #376]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800233e:	4b5c      	ldr	r3, [pc, #368]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	4a5a      	ldr	r2, [pc, #360]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x378>
 8002350:	4b57      	ldr	r3, [pc, #348]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002356:	4a56      	ldr	r2, [pc, #344]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002360:	4b53      	ldr	r3, [pc, #332]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002366:	4a52      	ldr	r2, [pc, #328]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d016      	beq.n	80023a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fbc4 	bl	8000b04 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7fe fbc0 	bl	8000b04 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e140      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002396:	4b46      	ldr	r3, [pc, #280]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ed      	beq.n	8002380 <HAL_RCC_OscConfig+0x388>
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe fbad 	bl	8000b04 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe fba9 	bl	8000b04 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e129      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c4:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ed      	bne.n	80023ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b35      	ldr	r3, [pc, #212]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03c      	beq.n	800246a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01c      	beq.n	8002432 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023f8:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023fe:	4a2c      	ldr	r2, [pc, #176]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe fb7c 	bl	8000b04 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002410:	f7fe fb78 	bl	8000b04 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0fa      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002422:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002424:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ef      	beq.n	8002410 <HAL_RCC_OscConfig+0x418>
 8002430:	e01b      	b.n	800246a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002432:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002438:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe fb5f 	bl	8000b04 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800244a:	f7fe fb5b 	bl	8000b04 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0dd      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ef      	bne.n	800244a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80d1 	beq.w	8002616 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002474:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b0c      	cmp	r3, #12
 800247e:	f000 808b 	beq.w	8002598 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d15e      	bne.n	8002548 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a08      	ldr	r2, [pc, #32]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002490:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe fb35 	bl	8000b04 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249c:	e00c      	b.n	80024b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249e:	f7fe fb31 	bl	8000b04 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d905      	bls.n	80024b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0b3      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	4b59      	ldr	r3, [pc, #356]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ec      	bne.n	800249e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c4:	4b56      	ldr	r3, [pc, #344]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	4b56      	ldr	r3, [pc, #344]	@ (8002624 <HAL_RCC_OscConfig+0x62c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6a11      	ldr	r1, [r2, #32]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024de:	0212      	lsls	r2, r2, #8
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024e6:	0852      	lsrs	r2, r2, #1
 80024e8:	3a01      	subs	r2, #1
 80024ea:	0552      	lsls	r2, r2, #21
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024f2:	0852      	lsrs	r2, r2, #1
 80024f4:	3a01      	subs	r2, #1
 80024f6:	0652      	lsls	r2, r2, #25
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024fe:	06d2      	lsls	r2, r2, #27
 8002500:	430a      	orrs	r2, r1
 8002502:	4947      	ldr	r1, [pc, #284]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 8002504:	4313      	orrs	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b45      	ldr	r3, [pc, #276]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a44      	ldr	r2, [pc, #272]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002514:	4b42      	ldr	r3, [pc, #264]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a41      	ldr	r2, [pc, #260]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800251e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe faf0 	bl	8000b04 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe faec 	bl	8000b04 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e06e      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x530>
 8002546:	e066      	b.n	8002616 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	4b35      	ldr	r3, [pc, #212]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a34      	ldr	r2, [pc, #208]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 800254e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002552:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002554:	4b32      	ldr	r3, [pc, #200]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a31      	ldr	r2, [pc, #196]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002560:	4b2f      	ldr	r3, [pc, #188]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a2e      	ldr	r2, [pc, #184]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 8002566:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800256a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fac8 	bl	8000b04 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe fac4 	bl	8000b04 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e046      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258a:	4b25      	ldr	r3, [pc, #148]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x580>
 8002596:	e03e      	b.n	8002616 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e039      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <HAL_RCC_OscConfig+0x628>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d12c      	bne.n	8002612 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c2:	3b01      	subs	r3, #1
 80025c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d123      	bne.n	8002612 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d11b      	bne.n	8002612 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d113      	bne.n	8002612 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	085b      	lsrs	r3, r3, #1
 80025f6:	3b01      	subs	r3, #1
 80025f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d109      	bne.n	8002612 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	3b01      	subs	r3, #1
 800260c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000
 8002624:	019f800c 	.word	0x019f800c

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e11e      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b91      	ldr	r3, [pc, #580]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b8e      	ldr	r3, [pc, #568]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	498c      	ldr	r1, [pc, #560]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b8a      	ldr	r3, [pc, #552]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e106      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d073      	beq.n	8002764 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d129      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002684:	4b81      	ldr	r3, [pc, #516]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0f4      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002694:	f000 f972 	bl	800297c <RCC_GetSysClockFreqFromPLLSource>
 8002698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4a7c      	ldr	r2, [pc, #496]	@ (8002890 <HAL_RCC_ClockConfig+0x268>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d93f      	bls.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026a2:	4b7a      	ldr	r3, [pc, #488]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d033      	beq.n	8002722 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d12f      	bne.n	8002722 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026c2:	4b72      	ldr	r3, [pc, #456]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026ca:	4a70      	ldr	r2, [pc, #448]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e024      	b.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e0:	4b6a      	ldr	r3, [pc, #424]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0c6      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f0:	4b66      	ldr	r3, [pc, #408]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0be      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002700:	f000 f8ce 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4a61      	ldr	r2, [pc, #388]	@ (8002890 <HAL_RCC_ClockConfig+0x268>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d909      	bls.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800270e:	4b5f      	ldr	r3, [pc, #380]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002716:	4a5d      	ldr	r2, [pc, #372]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800271c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800271e:	2380      	movs	r3, #128	@ 0x80
 8002720:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b5a      	ldr	r3, [pc, #360]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4957      	ldr	r1, [pc, #348]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002730:	4313      	orrs	r3, r2
 8002732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe f9e6 	bl	8000b04 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7fe f9e2 	bl	8000b04 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e095      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b4e      	ldr	r3, [pc, #312]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d023      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b43      	ldr	r3, [pc, #268]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a42      	ldr	r2, [pc, #264]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002786:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002794:	4b3d      	ldr	r3, [pc, #244]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800279c:	4a3b      	ldr	r2, [pc, #236]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800279e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b39      	ldr	r3, [pc, #228]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4936      	ldr	r1, [pc, #216]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
 80027b6:	e008      	b.n	80027ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b80      	cmp	r3, #128	@ 0x80
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027be:	4b33      	ldr	r3, [pc, #204]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4a32      	ldr	r2, [pc, #200]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80027c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d21d      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 020f 	bic.w	r2, r3, #15
 80027e0:	4929      	ldr	r1, [pc, #164]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027e8:	f7fe f98c 	bl	8000b04 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe f988 	bl	8000b04 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e03b      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d1ed      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b1a      	ldr	r3, [pc, #104]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4917      	ldr	r1, [pc, #92]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490f      	ldr	r1, [pc, #60]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002852:	f000 f825 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490c      	ldr	r1, [pc, #48]	@ (8002894 <HAL_RCC_ClockConfig+0x26c>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <HAL_RCC_ClockConfig+0x270>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_RCC_ClockConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f8f8 	bl	8000a6c <HAL_InitTick>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	04c4b400 	.word	0x04c4b400
 8002894:	08002e50 	.word	0x08002e50
 8002898:	200012f4 	.word	0x200012f4
 800289c:	200012f8 	.word	0x200012f8

080028a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028b2:	4b2a      	ldr	r3, [pc, #168]	@ (800295c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e047      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028b8:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028c4:	4b26      	ldr	r3, [pc, #152]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	e03e      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028ca:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d136      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3301      	adds	r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	4a16      	ldr	r2, [pc, #88]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	0a12      	lsrs	r2, r2, #8
 8002902:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	617b      	str	r3, [r7, #20]
      break;
 800290c:	e00c      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800290e:	4a13      	ldr	r2, [pc, #76]	@ (800295c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4a10      	ldr	r2, [pc, #64]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002918:	68d2      	ldr	r2, [r2, #12]
 800291a:	0a12      	lsrs	r2, r2, #8
 800291c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
      break;
 8002926:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0e5b      	lsrs	r3, r3, #25
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	e001      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002948:	693b      	ldr	r3, [r7, #16]
}
 800294a:	4618      	mov	r0, r3
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	00f42400 	.word	0x00f42400
 8002960:	007a1200 	.word	0x007a1200

08002964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	200012f4 	.word	0x200012f4

0800297c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002982:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800298c:	4b1b      	ldr	r3, [pc, #108]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3301      	adds	r3, #1
 8002998:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d10c      	bne.n	80029ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a0:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	4a14      	ldr	r2, [pc, #80]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029aa:	68d2      	ldr	r2, [r2, #12]
 80029ac:	0a12      	lsrs	r2, r2, #8
 80029ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	617b      	str	r3, [r7, #20]
    break;
 80029b8:	e00c      	b.n	80029d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ba:	4a12      	ldr	r2, [pc, #72]	@ (8002a04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4a0e      	ldr	r2, [pc, #56]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c4:	68d2      	ldr	r2, [r2, #12]
 80029c6:	0a12      	lsrs	r2, r2, #8
 80029c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	617b      	str	r3, [r7, #20]
    break;
 80029d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d4:	4b09      	ldr	r3, [pc, #36]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	0e5b      	lsrs	r3, r3, #25
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	3301      	adds	r3, #1
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029ee:	687b      	ldr	r3, [r7, #4]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40021000 	.word	0x40021000
 8002a00:	007a1200 	.word	0x007a1200
 8002a04:	00f42400 	.word	0x00f42400

08002a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e049      	b.n	8002aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fd ff64 	bl	80008fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 f89e 	bl	8002b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d001      	beq.n	8002ad0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e047      	b.n	8002b60 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a23      	ldr	r2, [pc, #140]	@ (8002b6c <HAL_TIM_Base_Start+0xb4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01d      	beq.n	8002b1e <HAL_TIM_Base_Start+0x66>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aea:	d018      	beq.n	8002b1e <HAL_TIM_Base_Start+0x66>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b70 <HAL_TIM_Base_Start+0xb8>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_TIM_Base_Start+0x66>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1e      	ldr	r2, [pc, #120]	@ (8002b74 <HAL_TIM_Base_Start+0xbc>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00e      	beq.n	8002b1e <HAL_TIM_Base_Start+0x66>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a1c      	ldr	r2, [pc, #112]	@ (8002b78 <HAL_TIM_Base_Start+0xc0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d009      	beq.n	8002b1e <HAL_TIM_Base_Start+0x66>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b7c <HAL_TIM_Base_Start+0xc4>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_TIM_Base_Start+0x66>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a19      	ldr	r2, [pc, #100]	@ (8002b80 <HAL_TIM_Base_Start+0xc8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d115      	bne.n	8002b4a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	4b17      	ldr	r3, [pc, #92]	@ (8002b84 <HAL_TIM_Base_Start+0xcc>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d015      	beq.n	8002b5c <HAL_TIM_Base_Start+0xa4>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b36:	d011      	beq.n	8002b5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b48:	e008      	b.n	8002b5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e000      	b.n	8002b5e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	40012c00 	.word	0x40012c00
 8002b70:	40000400 	.word	0x40000400
 8002b74:	40000800 	.word	0x40000800
 8002b78:	40013400 	.word	0x40013400
 8002b7c:	40014000 	.word	0x40014000
 8002b80:	40015000 	.word	0x40015000
 8002b84:	00010007 	.word	0x00010007

08002b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a42      	ldr	r2, [pc, #264]	@ (8002ca4 <TIM_Base_SetConfig+0x11c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d013      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ba6:	d00f      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a3f      	ldr	r2, [pc, #252]	@ (8002ca8 <TIM_Base_SetConfig+0x120>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a3e      	ldr	r2, [pc, #248]	@ (8002cac <TIM_Base_SetConfig+0x124>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d007      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3d      	ldr	r2, [pc, #244]	@ (8002cb0 <TIM_Base_SetConfig+0x128>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3c      	ldr	r2, [pc, #240]	@ (8002cb4 <TIM_Base_SetConfig+0x12c>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d108      	bne.n	8002bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a31      	ldr	r2, [pc, #196]	@ (8002ca4 <TIM_Base_SetConfig+0x11c>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01f      	beq.n	8002c22 <TIM_Base_SetConfig+0x9a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be8:	d01b      	beq.n	8002c22 <TIM_Base_SetConfig+0x9a>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca8 <TIM_Base_SetConfig+0x120>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d017      	beq.n	8002c22 <TIM_Base_SetConfig+0x9a>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8002cac <TIM_Base_SetConfig+0x124>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <TIM_Base_SetConfig+0x9a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8002cb0 <TIM_Base_SetConfig+0x128>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00f      	beq.n	8002c22 <TIM_Base_SetConfig+0x9a>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a2c      	ldr	r2, [pc, #176]	@ (8002cb8 <TIM_Base_SetConfig+0x130>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00b      	beq.n	8002c22 <TIM_Base_SetConfig+0x9a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cbc <TIM_Base_SetConfig+0x134>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <TIM_Base_SetConfig+0x9a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc0 <TIM_Base_SetConfig+0x138>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <TIM_Base_SetConfig+0x9a>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	@ (8002cb4 <TIM_Base_SetConfig+0x12c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d108      	bne.n	8002c34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <TIM_Base_SetConfig+0x11c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <TIM_Base_SetConfig+0x100>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a13      	ldr	r2, [pc, #76]	@ (8002cb0 <TIM_Base_SetConfig+0x128>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d00f      	beq.n	8002c88 <TIM_Base_SetConfig+0x100>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a13      	ldr	r2, [pc, #76]	@ (8002cb8 <TIM_Base_SetConfig+0x130>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <TIM_Base_SetConfig+0x100>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a12      	ldr	r2, [pc, #72]	@ (8002cbc <TIM_Base_SetConfig+0x134>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0x100>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a11      	ldr	r2, [pc, #68]	@ (8002cc0 <TIM_Base_SetConfig+0x138>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0x100>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a0c      	ldr	r2, [pc, #48]	@ (8002cb4 <TIM_Base_SetConfig+0x12c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d103      	bne.n	8002c90 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	615a      	str	r2, [r3, #20]
}
 8002c96:	bf00      	nop
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40013400 	.word	0x40013400
 8002cb4:	40015000 	.word	0x40015000
 8002cb8:	40014000 	.word	0x40014000
 8002cbc:	40014400 	.word	0x40014400
 8002cc0:	40014800 	.word	0x40014800

08002cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e06f      	b.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a31      	ldr	r2, [pc, #196]	@ (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a30      	ldr	r2, [pc, #192]	@ (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d108      	bne.n	8002d2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d01d      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5c:	d018      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d013      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00e      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a15      	ldr	r2, [pc, #84]	@ (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a16      	ldr	r2, [pc, #88]	@ (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a11      	ldr	r2, [pc, #68]	@ (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d10c      	bne.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40013400 	.word	0x40013400
 8002dd0:	40015000 	.word	0x40015000
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40014000 	.word	0x40014000

08002de0 <memset>:
 8002de0:	4402      	add	r2, r0
 8002de2:	4603      	mov	r3, r0
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d100      	bne.n	8002dea <memset+0xa>
 8002de8:	4770      	bx	lr
 8002dea:	f803 1b01 	strb.w	r1, [r3], #1
 8002dee:	e7f9      	b.n	8002de4 <memset+0x4>

08002df0 <__libc_init_array>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	4d0d      	ldr	r5, [pc, #52]	@ (8002e28 <__libc_init_array+0x38>)
 8002df4:	4c0d      	ldr	r4, [pc, #52]	@ (8002e2c <__libc_init_array+0x3c>)
 8002df6:	1b64      	subs	r4, r4, r5
 8002df8:	10a4      	asrs	r4, r4, #2
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	42a6      	cmp	r6, r4
 8002dfe:	d109      	bne.n	8002e14 <__libc_init_array+0x24>
 8002e00:	4d0b      	ldr	r5, [pc, #44]	@ (8002e30 <__libc_init_array+0x40>)
 8002e02:	4c0c      	ldr	r4, [pc, #48]	@ (8002e34 <__libc_init_array+0x44>)
 8002e04:	f000 f818 	bl	8002e38 <_init>
 8002e08:	1b64      	subs	r4, r4, r5
 8002e0a:	10a4      	asrs	r4, r4, #2
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	42a6      	cmp	r6, r4
 8002e10:	d105      	bne.n	8002e1e <__libc_init_array+0x2e>
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e18:	4798      	blx	r3
 8002e1a:	3601      	adds	r6, #1
 8002e1c:	e7ee      	b.n	8002dfc <__libc_init_array+0xc>
 8002e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e22:	4798      	blx	r3
 8002e24:	3601      	adds	r6, #1
 8002e26:	e7f2      	b.n	8002e0e <__libc_init_array+0x1e>
 8002e28:	08002e60 	.word	0x08002e60
 8002e2c:	08002e60 	.word	0x08002e60
 8002e30:	08002e60 	.word	0x08002e60
 8002e34:	08002e64 	.word	0x08002e64

08002e38 <_init>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	bf00      	nop
 8002e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3e:	bc08      	pop	{r3}
 8002e40:	469e      	mov	lr, r3
 8002e42:	4770      	bx	lr

08002e44 <_fini>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	bf00      	nop
 8002e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	469e      	mov	lr, r3
 8002e4e:	4770      	bx	lr
