
WRAP_RX_H7_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6f8  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800c9a4  0800c9a4  0000d9a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c9e4  0800c9e4  0000d9e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c9ec  0800c9ec  0000d9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c9f0  0800c9f0  0000d9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800c9f4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00013b48  24000010  0800ca04  0000e010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24013b58  0800ca04  0000eb58  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ae50  00000000  00000000  0000e03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d6e  00000000  00000000  00028e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001570  00000000  00000000  0002bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010c6  00000000  00000000  0002d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000328cc  00000000  00000000  0002e236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001bd2a  00000000  00000000  00060b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153c7d  00000000  00000000  0007c82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d04a9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cfc  00000000  00000000  001d04ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000059  00000000  00000000  001d61e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800c98c 	.word	0x0800c98c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800c98c 	.word	0x0800c98c

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e2:	f000 fb87 	bl	8000cf4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f000 fe63 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f849 	bl	8000680 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005ee:	f000 f909 	bl	8000804 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 fad7 	bl	8000ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f6:	f000 faad 	bl	8000b54 <MX_DMA_Init>
  MX_ADC1_Init();
 80005fa:	f000 f933 	bl	8000864 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005fe:	f000 f9af 	bl	8000960 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000602:	f000 fa5b 	bl	8000abc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000606:	f000 fa0b 	bl	8000a20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start timers
  HAL_TIM_Base_Start(&htim2);
 800060a:	4815      	ldr	r0, [pc, #84]	@ (8000660 <main+0x84>)
 800060c:	f009 fd80 	bl	800a110 <HAL_TIM_Base_Start>

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
  HAL_ADC_Start(&hadc2);
 8000610:	4814      	ldr	r0, [pc, #80]	@ (8000664 <main+0x88>)
 8000612:	f001 fa8b 	bl	8001b2c <HAL_ADC_Start>

  // Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000616:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800061a:	4913      	ldr	r1, [pc, #76]	@ (8000668 <main+0x8c>)
 800061c:	4813      	ldr	r0, [pc, #76]	@ (800066c <main+0x90>)
 800061e:	f002 fb97 	bl	8002d50 <HAL_ADCEx_MultiModeStart_DMA>

  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rx_msg, sizeof(rx_msg));
 8000622:	2202      	movs	r2, #2
 8000624:	4912      	ldr	r1, [pc, #72]	@ (8000670 <main+0x94>)
 8000626:	4813      	ldr	r0, [pc, #76]	@ (8000674 <main+0x98>)
 8000628:	f00a f98a 	bl	800a940 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //char msg[256] = {0};
	  if (done && requested) {
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <main+0x9c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d0fb      	beq.n	800062c <main+0x50>
 8000634:	4b11      	ldr	r3, [pc, #68]	@ (800067c <main+0xa0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f7      	beq.n	800062c <main+0x50>
//		  for (int i = 0; i < 2 * ADC_BUF_LEN; i++) {
//			  sprintf(msg, "%i: %i\n", i, adc_samples[i]);
//			  HAL_UART_Transmit(&huart3, (uint8_t *)msg, sizeof(msg), 256);
//		  }
		  uint8_t* casted_samples = (uint8_t *)&adc_buf;
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <main+0x8c>)
 800063e:	607b      	str	r3, [r7, #4]
		  HAL_UART_Transmit(&huart3, casted_samples, ADC_BUF_LEN*4, 0xFFFFFFFF);
 8000640:	f04f 33ff 	mov.w	r3, #4294967295
 8000644:	f44f 5262 	mov.w	r2, #14464	@ 0x3880
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	480a      	ldr	r0, [pc, #40]	@ (8000674 <main+0x98>)
 800064c:	f00a f8ea 	bl	800a824 <HAL_UART_Transmit>
		  done = 0;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <main+0x9c>)
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
		  requested = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <main+0xa0>)
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
	  if (done && requested) {
 800065c:	e7e6      	b.n	800062c <main+0x50>
 800065e:	bf00      	nop
 8000660:	2400016c 	.word	0x2400016c
 8000664:	24000090 	.word	0x24000090
 8000668:	240002c4 	.word	0x240002c4
 800066c:	2400002c 	.word	0x2400002c
 8000670:	24013b4c 	.word	0x24013b4c
 8000674:	240001b8 	.word	0x240001b8
 8000678:	24013b44 	.word	0x24013b44
 800067c:	24013b48 	.word	0x24013b48

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b0a4      	sub	sp, #144	@ 0x90
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800068a:	224c      	movs	r2, #76	@ 0x4c
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00c f950 	bl	800c934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000698:	2220      	movs	r2, #32
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f00c f949 	bl	800c934 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
 80006b2:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80006b4:	4b51      	ldr	r3, [pc, #324]	@ (80007fc <SystemClock_Config+0x17c>)
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006be:	2004      	movs	r0, #4
 80006c0:	f005 ffec 	bl	800669c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000800 <SystemClock_Config+0x180>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a4c      	ldr	r2, [pc, #304]	@ (8000800 <SystemClock_Config+0x180>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d2:	6193      	str	r3, [r2, #24]
 80006d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000800 <SystemClock_Config+0x180>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006e0:	bf00      	nop
 80006e2:	4b47      	ldr	r3, [pc, #284]	@ (8000800 <SystemClock_Config+0x180>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ee:	d1f8      	bne.n	80006e2 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006f0:	f005 ffc4 	bl	800667c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006f4:	4b41      	ldr	r3, [pc, #260]	@ (80007fc <SystemClock_Config+0x17c>)
 80006f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80006f8:	4a40      	ldr	r2, [pc, #256]	@ (80007fc <SystemClock_Config+0x17c>)
 80006fa:	f023 0318 	bic.w	r3, r3, #24
 80006fe:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000700:	2327      	movs	r3, #39	@ 0x27
 8000702:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000704:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800070a:	2301      	movs	r3, #1
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800070e:	2301      	movs	r3, #1
 8000710:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	2302      	movs	r3, #2
 8000720:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000722:	2301      	movs	r3, #1
 8000724:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000726:	2346      	movs	r3, #70	@ 0x46
 8000728:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800072a:	2302      	movs	r3, #2
 800072c:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072e:	2304      	movs	r3, #4
 8000730:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000738:	230c      	movs	r3, #12
 800073a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800074e:	4618      	mov	r0, r3
 8000750:	f005 fffe 	bl	8006750 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800075a:	f000 faf7 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	233f      	movs	r3, #63	@ 0x3f
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2303      	movs	r3, #3
 8000764:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800076e:	2340      	movs	r3, #64	@ 0x40
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000772:	2340      	movs	r3, #64	@ 0x40
 8000774:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000784:	2106      	movs	r1, #6
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fc14 	bl	8006fb4 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000792:	f000 fadb 	bl	8000d4c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000796:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800079a:	2100      	movs	r1, #0
 800079c:	2000      	movs	r0, #0
 800079e:	f006 fdbf 	bl	8007320 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 80007a2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007a6:	2100      	movs	r1, #0
 80007a8:	2001      	movs	r0, #1
 80007aa:	f006 fdb9 	bl	8007320 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80007ae:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <SystemClock_Config+0x17c>)
 80007b0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80007b4:	4a11      	ldr	r2, [pc, #68]	@ (80007fc <SystemClock_Config+0x17c>)
 80007b6:	f043 0302 	orr.w	r3, r3, #2
 80007ba:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80007be:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <SystemClock_Config+0x17c>)
 80007c0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80007c4:	f003 0302 	and.w	r3, r3, #2
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80007d0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80007da:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 80007de:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80007e0:	2322      	movs	r3, #34	@ 0x22
 80007e2:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80007e4:	2320      	movs	r3, #32
 80007e6:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4618      	mov	r0, r3
 80007ee:	f009 fa7d 	bl	8009cec <HAL_RCCEx_CRSConfig>
}
 80007f2:	bf00      	nop
 80007f4:	3790      	adds	r7, #144	@ 0x90
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58024400 	.word	0x58024400
 8000800:	58024800 	.word	0x58024800

08000804 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b0b0      	sub	sp, #192	@ 0xc0
 8000808:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	22c0      	movs	r2, #192	@ 0xc0
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f00c f88f 	bl	800c934 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000816:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800081a:	f04f 0300 	mov.w	r3, #0
 800081e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000826:	2312      	movs	r3, #18
 8000828:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800082a:	2303      	movs	r3, #3
 800082c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000832:	2302      	movs	r3, #2
 8000834:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000836:	23c0      	movs	r3, #192	@ 0xc0
 8000838:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 800083e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000844:	2300      	movs	r3, #0
 8000846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4618      	mov	r0, r3
 800084e:	f006 ffa7 	bl	80077a0 <HAL_RCCEx_PeriphCLKConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000858:	f000 fa78 	bl	8000d4c <Error_Handler>
  }
}
 800085c:	bf00      	nop
 800085e:	37c0      	adds	r7, #192	@ 0xc0
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	463b      	mov	r3, r7
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
 8000884:	615a      	str	r2, [r3, #20]
 8000886:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000888:	4b32      	ldr	r3, [pc, #200]	@ (8000954 <MX_ADC1_Init+0xf0>)
 800088a:	4a33      	ldr	r2, [pc, #204]	@ (8000958 <MX_ADC1_Init+0xf4>)
 800088c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800088e:	4b31      	ldr	r3, [pc, #196]	@ (8000954 <MX_ADC1_Init+0xf0>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000894:	4b2f      	ldr	r3, [pc, #188]	@ (8000954 <MX_ADC1_Init+0xf0>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089a:	4b2e      	ldr	r3, [pc, #184]	@ (8000954 <MX_ADC1_Init+0xf0>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008ac:	4b29      	ldr	r3, [pc, #164]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80008b2:	4b28      	ldr	r3, [pc, #160]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b8:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008be:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c4:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80008ca:	4b22      	ldr	r3, [pc, #136]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008cc:	2203      	movs	r2, #3
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d0:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e4:	481b      	ldr	r0, [pc, #108]	@ (8000954 <MX_ADC1_Init+0xf0>)
 80008e6:	f000 ffc7 	bl	8001878 <HAL_ADC_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008f0:	f000 fa2c 	bl	8000d4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 80008f4:	2307      	movs	r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80008f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008fc:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 80008fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4812      	ldr	r0, [pc, #72]	@ (8000954 <MX_ADC1_Init+0xf0>)
 800090c:	f002 fbea 	bl	80030e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000916:	f000 fa19 	bl	8000d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_ADC1_Init+0xf8>)
 800091c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091e:	2306      	movs	r3, #6
 8000920:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000926:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800092a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_ADC1_Init+0xf0>)
 800093e:	f001 fbe7 	bl	8002110 <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000948:	f000 fa00 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2400002c 	.word	0x2400002c
 8000958:	40022000 	.word	0x40022000
 800095c:	0c900008 	.word	0x0c900008

08000960 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 800097a:	4a27      	ldr	r2, [pc, #156]	@ (8000a18 <MX_ADC2_Init+0xb8>)
 800097c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800097e:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000984:	4b23      	ldr	r3, [pc, #140]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800098a:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000990:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 8000992:	2204      	movs	r2, #4
 8000994:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 8000998:	2200      	movs	r2, #0
 800099a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800099c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 800099e:	2201      	movs	r2, #1
 80009a0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009bc:	2200      	movs	r2, #0
 80009be:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009c8:	4812      	ldr	r0, [pc, #72]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009ca:	f000 ff55 	bl	8001878 <HAL_ADC_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 80009d4:	f000 f9ba 	bl	8000d4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009d8:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_ADC2_Init+0xbc>)
 80009da:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009dc:	2306      	movs	r3, #6
 80009de:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009e4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ea:	2304      	movs	r3, #4
 80009ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	@ (8000a14 <MX_ADC2_Init+0xb4>)
 80009fc:	f001 fb88 	bl	8002110 <HAL_ADC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000a06:	f000 f9a1 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	3720      	adds	r7, #32
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	24000090 	.word	0x24000090
 8000a18:	40022100 	.word	0x40022100
 8000a1c:	0c900008 	.word	0x0c900008

08000a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0310 	add.w	r3, r7, #16
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab8 <MX_TIM2_Init+0x98>)
 8000a40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <MX_TIM2_Init+0x98>)
 8000a48:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000a4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab8 <MX_TIM2_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a54:	4b18      	ldr	r3, [pc, #96]	@ (8000ab8 <MX_TIM2_Init+0x98>)
 8000a56:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_TIM2_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_TIM2_Init+0x98>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a68:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <MX_TIM2_Init+0x98>)
 8000a6a:	f009 faf9 	bl	800a060 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a74:	f000 f96a 	bl	8000d4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0310 	add.w	r3, r7, #16
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_TIM2_Init+0x98>)
 8000a86:	f009 fbb3 	bl	800a1f0 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a90:	f000 f95c 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_TIM2_Init+0x98>)
 8000aa2:	f009 fde1 	bl	800a668 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000aac:	f000 f94e 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2400016c 	.word	0x2400016c

08000abc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ac2:	4a23      	ldr	r2, [pc, #140]	@ (8000b50 <MX_USART3_UART_Init+0x94>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	4b16      	ldr	r3, [pc, #88]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000afe:	4b13      	ldr	r3, [pc, #76]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b04:	4811      	ldr	r0, [pc, #68]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b06:	f009 fe3d 	bl	800a784 <HAL_UART_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b10:	f000 f91c 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	480d      	ldr	r0, [pc, #52]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b18:	f00b fe41 	bl	800c79e <HAL_UARTEx_SetTxFifoThreshold>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b22:	f000 f913 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b26:	2100      	movs	r1, #0
 8000b28:	4808      	ldr	r0, [pc, #32]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b2a:	f00b fe76 	bl	800c81a <HAL_UARTEx_SetRxFifoThreshold>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b34:	f000 f90a 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_USART3_UART_Init+0x90>)
 8000b3a:	f00b fdf7 	bl	800c72c <HAL_UARTEx_DisableFifoMode>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b44:	f000 f902 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	240001b8 	.word	0x240001b8
 8000b50:	40004800 	.word	0x40004800

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ba0 <MX_DMA_Init+0x4c>)
 8000b5c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <MX_DMA_Init+0x4c>)
 8000b62:	f043 0301 	orr.w	r3, r3, #1
 8000b66:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba0 <MX_DMA_Init+0x4c>)
 8000b6c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b70:	f003 0301 	and.w	r3, r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
 8000b76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	200b      	movs	r0, #11
 8000b7e:	f002 fc28 	bl	80033d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b82:	200b      	movs	r0, #11
 8000b84:	f002 fc3f 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	200c      	movs	r0, #12
 8000b8e:	f002 fc20 	bl	80033d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b92:	200c      	movs	r0, #12
 8000b94:	f002 fc37 	bl	8003406 <HAL_NVIC_EnableIRQ>

}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	58024400 	.word	0x58024400

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bba:	4b3a      	ldr	r3, [pc, #232]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000bbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bc0:	4a38      	ldr	r2, [pc, #224]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000bc2:	f043 0304 	orr.w	r3, r3, #4
 8000bc6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bca:	4b36      	ldr	r3, [pc, #216]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000bcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd8:	4b32      	ldr	r3, [pc, #200]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000bda:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bde:	4a31      	ldr	r2, [pc, #196]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000be0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000be8:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000bea:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bfc:	4a29      	ldr	r2, [pc, #164]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c06:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000c08:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c14:	4b23      	ldr	r3, [pc, #140]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000c16:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c1a:	4a22      	ldr	r2, [pc, #136]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000c24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_GPIO_Init+0x100>)
 8000c26:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2120      	movs	r1, #32
 8000c36:	481c      	ldr	r0, [pc, #112]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000c38:	f005 fd06 	bl	8006648 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c3c:	2320      	movs	r3, #32
 8000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4815      	ldr	r0, [pc, #84]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000c54:	f005 fb48 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	4619      	mov	r1, r3
 8000c74:	480d      	ldr	r0, [pc, #52]	@ (8000cac <MX_GPIO_Init+0x108>)
 8000c76:	f005 fb37 	bl	80062e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4804      	ldr	r0, [pc, #16]	@ (8000ca8 <MX_GPIO_Init+0x104>)
 8000c98:	f005 fb26 	bl	80062e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	@ 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	58024400 	.word	0x58024400
 8000ca8:	58020000 	.word	0x58020000
 8000cac:	58020800 	.word	0x58020800

08000cb0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	HAL_ADCEx_MultiModeStop_DMA(&hadc1);
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <HAL_ADC_ConvCpltCallback+0x1c>)
 8000cba:	f002 f919 	bl	8002ef0 <HAL_ADCEx_MultiModeStop_DMA>
	done = 1;
 8000cbe:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <HAL_ADC_ConvCpltCallback+0x20>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	2400002c 	.word	0x2400002c
 8000cd0:	24013b44 	.word	0x24013b44

08000cd4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	requested = 1;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <HAL_UART_RxCpltCallback+0x1c>)
 8000cde:	2201      	movs	r2, #1
 8000ce0:	601a      	str	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	24013b48 	.word	0x24013b48

08000cf4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d06:	f002 fb99 	bl	800343c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d16:	231f      	movs	r3, #31
 8000d18:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d1a:	2387      	movs	r3, #135	@ 0x87
 8000d1c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d26:	2301      	movs	r3, #1
 8000d28:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d36:	463b      	mov	r3, r7
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fbb7 	bl	80034ac <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d3e:	2004      	movs	r0, #4
 8000d40:	f002 fb94 	bl	800346c <HAL_MPU_Enable>

}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <Error_Handler+0x8>

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_MspInit+0x30>)
 8000d60:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d64:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_MspInit+0x30>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_MspInit+0x30>)
 8000d70:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	58024400 	.word	0x58024400

08000d8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	@ 0x30
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a59      	ldr	r2, [pc, #356]	@ (8000f10 <HAL_ADC_MspInit+0x184>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d16c      	bne.n	8000e88 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dae:	4b59      	ldr	r3, [pc, #356]	@ (8000f14 <HAL_ADC_MspInit+0x188>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	4a57      	ldr	r2, [pc, #348]	@ (8000f14 <HAL_ADC_MspInit+0x188>)
 8000db6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000db8:	4b56      	ldr	r3, [pc, #344]	@ (8000f14 <HAL_ADC_MspInit+0x188>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d10e      	bne.n	8000dde <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000dc0:	4b55      	ldr	r3, [pc, #340]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000dc2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000dc6:	4a54      	ldr	r2, [pc, #336]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000dc8:	f043 0320 	orr.w	r3, r3, #32
 8000dcc:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000dd0:	4b51      	ldr	r3, [pc, #324]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000dd2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000dd6:	f003 0320 	and.w	r3, r3, #32
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b4e      	ldr	r3, [pc, #312]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000de0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000de4:	4a4c      	ldr	r2, [pc, #304]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dee:	4b4a      	ldr	r3, [pc, #296]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000df0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dfc:	2340      	movs	r3, #64	@ 0x40
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 031c 	add.w	r3, r7, #28
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4843      	ldr	r0, [pc, #268]	@ (8000f1c <HAL_ADC_MspInit+0x190>)
 8000e10:	f005 fa6a 	bl	80062e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000e14:	4b42      	ldr	r3, [pc, #264]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e16:	4a43      	ldr	r2, [pc, #268]	@ (8000f24 <HAL_ADC_MspInit+0x198>)
 8000e18:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e1a:	4b41      	ldr	r3, [pc, #260]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e1c:	2209      	movs	r2, #9
 8000e1e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e20:	4b3f      	ldr	r3, [pc, #252]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e26:	4b3e      	ldr	r3, [pc, #248]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e32:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e34:	4b3a      	ldr	r3, [pc, #232]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e3a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e3c:	4b38      	ldr	r3, [pc, #224]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e42:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e44:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e4c:	4b34      	ldr	r3, [pc, #208]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e54:	4b32      	ldr	r3, [pc, #200]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e5a:	4831      	ldr	r0, [pc, #196]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e5c:	f002 fb66 	bl	800352c <HAL_DMA_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000e66:	f7ff ff71 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e6e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e70:	4a2b      	ldr	r2, [pc, #172]	@ (8000f20 <HAL_ADC_MspInit+0x194>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2012      	movs	r0, #18
 8000e7c:	f002 faa9 	bl	80033d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e80:	2012      	movs	r0, #18
 8000e82:	f002 fac0 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e86:	e03f      	b.n	8000f08 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <HAL_ADC_MspInit+0x19c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d13a      	bne.n	8000f08 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <HAL_ADC_MspInit+0x188>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	4a1e      	ldr	r2, [pc, #120]	@ (8000f14 <HAL_ADC_MspInit+0x188>)
 8000e9a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <HAL_ADC_MspInit+0x188>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d10e      	bne.n	8000ec2 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000ea6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000eac:	f043 0320 	orr.w	r3, r3, #32
 8000eb0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000eb4:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000eb6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000eba:	f003 0320 	and.w	r3, r3, #32
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000ec4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ec8:	4a13      	ldr	r2, [pc, #76]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <HAL_ADC_MspInit+0x18c>)
 8000ed4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ee0:	2340      	movs	r3, #64	@ 0x40
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480a      	ldr	r0, [pc, #40]	@ (8000f1c <HAL_ADC_MspInit+0x190>)
 8000ef4:	f005 f9f8 	bl	80062e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2100      	movs	r1, #0
 8000efc:	2012      	movs	r0, #18
 8000efe:	f002 fa68 	bl	80033d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f02:	2012      	movs	r0, #18
 8000f04:	f002 fa7f 	bl	8003406 <HAL_NVIC_EnableIRQ>
}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	@ 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40022000 	.word	0x40022000
 8000f14:	24013b50 	.word	0x24013b50
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	58020000 	.word	0x58020000
 8000f20:	240000f4 	.word	0x240000f4
 8000f24:	40020010 	.word	0x40020010
 8000f28:	40022100 	.word	0x40022100

08000f2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f3c:	d10e      	bne.n	8000f5c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <HAL_TIM_Base_MspInit+0x3c>)
 8000f40:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f44:	4a08      	ldr	r2, [pc, #32]	@ (8000f68 <HAL_TIM_Base_MspInit+0x3c>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_TIM_Base_MspInit+0x3c>)
 8000f50:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3714      	adds	r7, #20
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	58024400 	.word	0x58024400

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	22c0      	movs	r2, #192	@ 0xc0
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f00b fcd1 	bl	800c934 <memset>
  if(huart->Instance==USART3)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a42      	ldr	r2, [pc, #264]	@ (80010a0 <HAL_UART_MspInit+0x134>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d17d      	bne.n	8001098 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f9c:	f04f 0202 	mov.w	r2, #2
 8000fa0:	f04f 0300 	mov.w	r3, #0
 8000fa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fae:	f107 0310 	add.w	r3, r7, #16
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 fbf4 	bl	80077a0 <HAL_RCCEx_PeriphCLKConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fbe:	f7ff fec5 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fc2:	4b38      	ldr	r3, [pc, #224]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fc4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000fc8:	4a36      	ldr	r2, [pc, #216]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fce:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000fd2:	4b34      	ldr	r3, [pc, #208]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe0:	4b30      	ldr	r3, [pc, #192]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fe2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ff0:	4b2c      	ldr	r3, [pc, #176]	@ (80010a4 <HAL_UART_MspInit+0x138>)
 8000ff2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ff6:	f003 0308 	and.w	r3, r3, #8
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ffe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001018:	2307      	movs	r3, #7
 800101a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001022:	4619      	mov	r1, r3
 8001024:	4820      	ldr	r0, [pc, #128]	@ (80010a8 <HAL_UART_MspInit+0x13c>)
 8001026:	f005 f95f 	bl	80062e8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800102a:	4b20      	ldr	r3, [pc, #128]	@ (80010ac <HAL_UART_MspInit+0x140>)
 800102c:	4a20      	ldr	r2, [pc, #128]	@ (80010b0 <HAL_UART_MspInit+0x144>)
 800102e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001030:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <HAL_UART_MspInit+0x140>)
 8001032:	222d      	movs	r2, #45	@ 0x2d
 8001034:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001036:	4b1d      	ldr	r3, [pc, #116]	@ (80010ac <HAL_UART_MspInit+0x140>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_UART_MspInit+0x140>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001042:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <HAL_UART_MspInit+0x140>)
 8001044:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001048:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_UART_MspInit+0x140>)
 800104c:	2200      	movs	r2, #0
 800104e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001050:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <HAL_UART_MspInit+0x140>)
 8001052:	2200      	movs	r2, #0
 8001054:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_UART_MspInit+0x140>)
 8001058:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800105c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800105e:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <HAL_UART_MspInit+0x140>)
 8001060:	2200      	movs	r2, #0
 8001062:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_UART_MspInit+0x140>)
 8001066:	2200      	movs	r2, #0
 8001068:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800106a:	4810      	ldr	r0, [pc, #64]	@ (80010ac <HAL_UART_MspInit+0x140>)
 800106c:	f002 fa5e 	bl	800352c <HAL_DMA_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001076:	f7ff fe69 	bl	8000d4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <HAL_UART_MspInit+0x140>)
 800107e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001082:	4a0a      	ldr	r2, [pc, #40]	@ (80010ac <HAL_UART_MspInit+0x140>)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2027      	movs	r0, #39	@ 0x27
 800108e:	f002 f9a0 	bl	80033d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001092:	2027      	movs	r0, #39	@ 0x27
 8001094:	f002 f9b7 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	37e8      	adds	r7, #232	@ 0xe8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40004800 	.word	0x40004800
 80010a4:	58024400 	.word	0x58024400
 80010a8:	58020c00 	.word	0x58020c00
 80010ac:	2400024c 	.word	0x2400024c
 80010b0:	40020028 	.word	0x40020028

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110a:	f000 f943 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <DMA1_Stream0_IRQHandler+0x10>)
 800111a:	f003 fd63 	bl	8004be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	240000f4 	.word	0x240000f4

08001128 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <DMA1_Stream1_IRQHandler+0x10>)
 800112e:	f003 fd59 	bl	8004be4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2400024c 	.word	0x2400024c

0800113c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001140:	4803      	ldr	r0, [pc, #12]	@ (8001150 <ADC_IRQHandler+0x14>)
 8001142:	f000 fdad 	bl	8001ca0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001146:	4803      	ldr	r0, [pc, #12]	@ (8001154 <ADC_IRQHandler+0x18>)
 8001148:	f000 fdaa 	bl	8001ca0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2400002c 	.word	0x2400002c
 8001154:	24000090 	.word	0x24000090

08001158 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <USART3_IRQHandler+0x10>)
 800115e:	f009 fc3b 	bl	800a9d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	240001b8 	.word	0x240001b8

0800116c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001170:	4b32      	ldr	r3, [pc, #200]	@ (800123c <SystemInit+0xd0>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001176:	4a31      	ldr	r2, [pc, #196]	@ (800123c <SystemInit+0xd0>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001180:	4b2f      	ldr	r3, [pc, #188]	@ (8001240 <SystemInit+0xd4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	2b02      	cmp	r3, #2
 800118a:	d807      	bhi.n	800119c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800118c:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <SystemInit+0xd4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 030f 	bic.w	r3, r3, #15
 8001194:	4a2a      	ldr	r2, [pc, #168]	@ (8001240 <SystemInit+0xd4>)
 8001196:	f043 0303 	orr.w	r3, r3, #3
 800119a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800119c:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <SystemInit+0xd8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a28      	ldr	r2, [pc, #160]	@ (8001244 <SystemInit+0xd8>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011a8:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <SystemInit+0xd8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ae:	4b25      	ldr	r3, [pc, #148]	@ (8001244 <SystemInit+0xd8>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	4924      	ldr	r1, [pc, #144]	@ (8001244 <SystemInit+0xd8>)
 80011b4:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <SystemInit+0xdc>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ba:	4b21      	ldr	r3, [pc, #132]	@ (8001240 <SystemInit+0xd4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d007      	beq.n	80011d6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <SystemInit+0xd4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 030f 	bic.w	r3, r3, #15
 80011ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001240 <SystemInit+0xd4>)
 80011d0:	f043 0303 	orr.w	r3, r3, #3
 80011d4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80011d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <SystemInit+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011dc:	4b19      	ldr	r3, [pc, #100]	@ (8001244 <SystemInit+0xd8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80011e2:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <SystemInit+0xd8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011e8:	4b16      	ldr	r3, [pc, #88]	@ (8001244 <SystemInit+0xd8>)
 80011ea:	4a18      	ldr	r2, [pc, #96]	@ (800124c <SystemInit+0xe0>)
 80011ec:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ee:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <SystemInit+0xd8>)
 80011f0:	4a17      	ldr	r2, [pc, #92]	@ (8001250 <SystemInit+0xe4>)
 80011f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011f4:	4b13      	ldr	r3, [pc, #76]	@ (8001244 <SystemInit+0xd8>)
 80011f6:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <SystemInit+0xe8>)
 80011f8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011fa:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <SystemInit+0xd8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001200:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <SystemInit+0xd8>)
 8001202:	4a14      	ldr	r2, [pc, #80]	@ (8001254 <SystemInit+0xe8>)
 8001204:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001206:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <SystemInit+0xd8>)
 8001208:	2200      	movs	r2, #0
 800120a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800120c:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <SystemInit+0xd8>)
 800120e:	4a11      	ldr	r2, [pc, #68]	@ (8001254 <SystemInit+0xe8>)
 8001210:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001212:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <SystemInit+0xd8>)
 8001214:	2200      	movs	r2, #0
 8001216:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <SystemInit+0xd8>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a09      	ldr	r2, [pc, #36]	@ (8001244 <SystemInit+0xd8>)
 800121e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001222:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001224:	4b07      	ldr	r3, [pc, #28]	@ (8001244 <SystemInit+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <SystemInit+0xec>)
 800122c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001230:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00
 8001240:	52002000 	.word	0x52002000
 8001244:	58024400 	.word	0x58024400
 8001248:	eaf6ed7f 	.word	0xeaf6ed7f
 800124c:	02020200 	.word	0x02020200
 8001250:	01ff0000 	.word	0x01ff0000
 8001254:	01010280 	.word	0x01010280
 8001258:	52004000 	.word	0x52004000

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001294 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff ff84 	bl	800116c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	@ (80012a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800128a:	f00b fb5b 	bl	800c944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff f9a5 	bl	80005dc <main>
  bx  lr
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001298:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800129c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012a0:	0800c9f4 	.word	0x0800c9f4
  ldr r2, =_sbss
 80012a4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80012a8:	24013b58 	.word	0x24013b58

080012ac <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <BDMA1_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b6:	2003      	movs	r0, #3
 80012b8:	f002 f880 	bl	80033bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80012bc:	f006 f89a 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_Init+0x68>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	4913      	ldr	r1, [pc, #76]	@ (800131c <HAL_Init+0x6c>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_Init+0x68>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	4a0e      	ldr	r2, [pc, #56]	@ (800131c <HAL_Init+0x6c>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <HAL_Init+0x70>)
 80012f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <HAL_Init+0x74>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 f814 	bl	8001328 <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e002      	b.n	8001310 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800130a:	f7ff fd25 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58024400 	.word	0x58024400
 800131c:	0800c9a4 	.word	0x0800c9a4
 8001320:	24000004 	.word	0x24000004
 8001324:	24000000 	.word	0x24000000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_InitTick+0x60>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e021      	b.n	8001380 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800133c:	4b13      	ldr	r3, [pc, #76]	@ (800138c <HAL_InitTick+0x64>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_InitTick+0x60>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f002 f865 	bl	8003422 <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f002 f82f 	bl	80033d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	@ (8001390 <HAL_InitTick+0x68>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2400000c 	.word	0x2400000c
 800138c:	24000000 	.word	0x24000000
 8001390:	24000008 	.word	0x24000008

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	2400000c 	.word	0x2400000c
 80013b8:	24013b54 	.word	0x24013b54

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	24013b54 	.word	0x24013b54

080013d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <HAL_GetREVID+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0c1b      	lsrs	r3, r3, #16
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	5c001000 	.word	0x5c001000

080013ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	431a      	orrs	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	609a      	str	r2, [r3, #8]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3360      	adds	r3, #96	@ 0x60
 8001466:	461a      	mov	r2, r3
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	430b      	orrs	r3, r1
 8001482:	431a      	orrs	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001488:	bf00      	nop
 800148a:	371c      	adds	r7, #28
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	fa01 f303 	lsl.w	r3, r1, r3
 80014b4:	431a      	orrs	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	611a      	str	r2, [r3, #16]
}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b087      	sub	sp, #28
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3360      	adds	r3, #96	@ 0x60
 80014d6:	461a      	mov	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]
  }
}
 80014f0:	bf00      	nop
 80014f2:	371c      	adds	r7, #28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001522:	b480      	push	{r7}
 8001524:	b087      	sub	sp, #28
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	3330      	adds	r3, #48	@ 0x30
 8001532:	461a      	mov	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	4413      	add	r3, r2
 8001540:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f003 031f 	and.w	r3, r3, #31
 800154c:	211f      	movs	r1, #31
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	401a      	ands	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	0e9b      	lsrs	r3, r3, #26
 800155a:	f003 011f 	and.w	r1, r3, #31
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	431a      	orrs	r2, r3
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800156e:	bf00      	nop
 8001570:	371c      	adds	r7, #28
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3314      	adds	r3, #20
 80015b0:	461a      	mov	r2, r3
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	0e5b      	lsrs	r3, r3, #25
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	4413      	add	r3, r2
 80015be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	0d1b      	lsrs	r3, r3, #20
 80015c8:	f003 031f 	and.w	r3, r3, #31
 80015cc:	2107      	movs	r1, #7
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	401a      	ands	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	0d1b      	lsrs	r3, r3, #20
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001610:	43db      	mvns	r3, r3
 8001612:	401a      	ands	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0318 	and.w	r3, r3, #24
 800161a:	4908      	ldr	r1, [pc, #32]	@ (800163c <LL_ADC_SetChannelSingleDiff+0x44>)
 800161c:	40d9      	lsrs	r1, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	400b      	ands	r3, r1
 8001622:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001626:	431a      	orrs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	000fffff 	.word	0x000fffff

08001640 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	f003 031f 	and.w	r3, r3, #31
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001686:	4013      	ands	r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6093      	str	r3, [r2, #8]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	5fffffc0 	.word	0x5fffffc0

0800169c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016b0:	d101      	bne.n	80016b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	6fffffc0 	.word	0x6fffffc0

080016ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001700:	d101      	bne.n	8001706 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	4b05      	ldr	r3, [pc, #20]	@ (8001738 <LL_ADC_Enable+0x24>)
 8001722:	4013      	ands	r3, r2
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	7fffffc0 	.word	0x7fffffc0

0800173c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <LL_ADC_Disable+0x24>)
 800174a:	4013      	ands	r3, r2
 800174c:	f043 0202 	orr.w	r2, r3, #2
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	7fffffc0 	.word	0x7fffffc0

08001764 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b01      	cmp	r3, #1
 8001776:	d101      	bne.n	800177c <LL_ADC_IsEnabled+0x18>
 8001778:	2301      	movs	r3, #1
 800177a:	e000      	b.n	800177e <LL_ADC_IsEnabled+0x1a>
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d101      	bne.n	80017a2 <LL_ADC_IsDisableOngoing+0x18>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_IsDisableOngoing+0x1a>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <LL_ADC_REG_StartConversion+0x24>)
 80017be:	4013      	ands	r3, r2
 80017c0:	f043 0204 	orr.w	r2, r3, #4
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	7fffffc0 	.word	0x7fffffc0

080017d8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <LL_ADC_REG_StopConversion+0x24>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	f043 0210 	orr.w	r2, r3, #16
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	7fffffc0 	.word	0x7fffffc0

08001800 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b04      	cmp	r3, #4
 8001812:	d101      	bne.n	8001818 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	4b05      	ldr	r3, [pc, #20]	@ (800184c <LL_ADC_INJ_StopConversion+0x24>)
 8001836:	4013      	ands	r3, r2
 8001838:	f043 0220 	orr.w	r2, r3, #32
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	7fffffc0 	.word	0x7fffffc0

08001850 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b08      	cmp	r3, #8
 8001862:	d101      	bne.n	8001868 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e138      	b.n	8001b04 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fa73 	bl	8000d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff feef 	bl	800169c <LL_ADC_IsDeepPowerDownEnabled>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fed5 	bl	8001678 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff0a 	bl	80016ec <LL_ADC_IsInternalRegulatorEnabled>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d114      	bne.n	8001908 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff feee 	bl	80016c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018e8:	4b88      	ldr	r3, [pc, #544]	@ (8001b0c <HAL_ADC_Init+0x294>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	4a88      	ldr	r2, [pc, #544]	@ (8001b10 <HAL_ADC_Init+0x298>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	3301      	adds	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018fa:	e002      	b.n	8001902 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	3b01      	subs	r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f9      	bne.n	80018fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff feed 	bl	80016ec <LL_ADC_IsInternalRegulatorEnabled>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10d      	bne.n	8001934 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191c:	f043 0210 	orr.w	r2, r3, #16
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff61 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 800193e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 80d2 	bne.w	8001af2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 80ce 	bne.w	8001af2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800195e:	f043 0202 	orr.w	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fefa 	bl	8001764 <LL_ADC_IsEnabled>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d110      	bne.n	8001998 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001976:	4867      	ldr	r0, [pc, #412]	@ (8001b14 <HAL_ADC_Init+0x29c>)
 8001978:	f7ff fef4 	bl	8001764 <LL_ADC_IsEnabled>
 800197c:	4604      	mov	r4, r0
 800197e:	4866      	ldr	r0, [pc, #408]	@ (8001b18 <HAL_ADC_Init+0x2a0>)
 8001980:	f7ff fef0 	bl	8001764 <LL_ADC_IsEnabled>
 8001984:	4603      	mov	r3, r0
 8001986:	4323      	orrs	r3, r4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	4619      	mov	r1, r3
 8001992:	4862      	ldr	r0, [pc, #392]	@ (8001b1c <HAL_ADC_Init+0x2a4>)
 8001994:	f7ff fd2a 	bl	80013ec <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7d5b      	ldrb	r3, [r3, #21]
 800199c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80019a8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7f1b      	ldrb	r3, [r3, #28]
 80019ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	7f1b      	ldrb	r3, [r3, #28]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	045b      	lsls	r3, r3, #17
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001b20 <HAL_ADC_Init+0x2a8>)
 80019ee:	4013      	ands	r3, r2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fefe 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 8001a04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff20 	bl	8001850 <LL_ADC_INJ_IsConversionOngoing>
 8001a10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d14a      	bne.n	8001aae <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d147      	bne.n	8001aae <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7d1b      	ldrb	r3, [r3, #20]
 8001a22:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	4b3c      	ldr	r3, [pc, #240]	@ (8001b24 <HAL_ADC_Init+0x2ac>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	69b9      	ldr	r1, [r7, #24]
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d11b      	bne.n	8001a82 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	691a      	ldr	r2, [r3, #16]
 8001a56:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <HAL_ADC_Init+0x2b0>)
 8001a58:	4013      	ands	r3, r2
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	0411      	lsls	r1, r2, #16
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a66:	4311      	orrs	r1, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a72:	430a      	orrs	r2, r1
 8001a74:	431a      	orrs	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	e007      	b.n	8001a92 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691a      	ldr	r2, [r3, #16]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f022 0201 	bic.w	r2, r2, #1
 8001a90:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f001 f847 	bl	8002b3c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	f023 010f 	bic.w	r1, r3, #15
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	1e5a      	subs	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	430a      	orrs	r2, r1
 8001acc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ace:	e007      	b.n	8001ae0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 020f 	bic.w	r2, r2, #15
 8001ade:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae4:	f023 0303 	bic.w	r3, r3, #3
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	655a      	str	r2, [r3, #84]	@ 0x54
 8001af0:	e007      	b.n	8001b02 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af6:	f043 0210 	orr.w	r2, r3, #16
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3724      	adds	r7, #36	@ 0x24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd90      	pop	{r4, r7, pc}
 8001b0c:	24000000 	.word	0x24000000
 8001b10:	053e2d63 	.word	0x053e2d63
 8001b14:	40022000 	.word	0x40022000
 8001b18:	40022100 	.word	0x40022100
 8001b1c:	40022300 	.word	0x40022300
 8001b20:	fff0c003 	.word	0xfff0c003
 8001b24:	ffffbffc 	.word	0xffffbffc
 8001b28:	fc00f81e 	.word	0xfc00f81e

08001b2c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b34:	4856      	ldr	r0, [pc, #344]	@ (8001c90 <HAL_ADC_Start+0x164>)
 8001b36:	f7ff fd83 	bl	8001640 <LL_ADC_GetMultimode>
 8001b3a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fe5d 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f040 809a 	bne.w	8001c82 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_Start+0x30>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e095      	b.n	8001c88 <HAL_ADC_Start+0x15c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fe79 	bl	800285c <ADC_Enable>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f040 8081 	bne.w	8001c78 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b7a:	4b46      	ldr	r3, [pc, #280]	@ (8001c94 <HAL_ADC_Start+0x168>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a43      	ldr	r2, [pc, #268]	@ (8001c98 <HAL_ADC_Start+0x16c>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d002      	beq.n	8001b96 <HAL_ADC_Start+0x6a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	e000      	b.n	8001b98 <HAL_ADC_Start+0x6c>
 8001b96:	4b41      	ldr	r3, [pc, #260]	@ (8001c9c <HAL_ADC_Start+0x170>)
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d002      	beq.n	8001ba6 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d105      	bne.n	8001bb2 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001baa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bbe:	d106      	bne.n	8001bce <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc4:	f023 0206 	bic.w	r2, r3, #6
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bcc:	e002      	b.n	8001bd4 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	221c      	movs	r2, #28
 8001bda:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <HAL_ADC_Start+0x16c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d002      	beq.n	8001bf4 <HAL_ADC_Start+0xc8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	e000      	b.n	8001bf6 <HAL_ADC_Start+0xca>
 8001bf4:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <HAL_ADC_Start+0x170>)
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d008      	beq.n	8001c10 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d002      	beq.n	8001c10 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b09      	cmp	r3, #9
 8001c0e:	d114      	bne.n	8001c3a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c26:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fdbc 	bl	80017b0 <LL_ADC_REG_StartConversion>
 8001c38:	e025      	b.n	8001c86 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a13      	ldr	r2, [pc, #76]	@ (8001c98 <HAL_ADC_Start+0x16c>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d002      	beq.n	8001c56 <HAL_ADC_Start+0x12a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	e000      	b.n	8001c58 <HAL_ADC_Start+0x12c>
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <HAL_ADC_Start+0x170>)
 8001c58:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00f      	beq.n	8001c86 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c6a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c6e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c76:	e006      	b.n	8001c86 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001c80:	e001      	b.n	8001c86 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
 8001c84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022300 	.word	0x40022300
 8001c94:	fffff0fe 	.word	0xfffff0fe
 8001c98:	40022100 	.word	0x40022100
 8001c9c:	40022000 	.word	0x40022000

08001ca0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001ca8:	2300      	movs	r3, #0
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cbc:	4882      	ldr	r0, [pc, #520]	@ (8001ec8 <HAL_ADC_IRQHandler+0x228>)
 8001cbe:	f7ff fcbf 	bl	8001640 <LL_ADC_GetMultimode>
 8001cc2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d017      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x5e>
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d012      	beq.n	8001cfe <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f001 f9ed 	bl	80030d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d004      	beq.n	8001d12 <HAL_ADC_IRQHandler+0x72>
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10a      	bne.n	8001d28 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 8083 	beq.w	8001e24 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d07d      	beq.n	8001e24 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2c:	f003 0310 	and.w	r3, r3, #16
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d38:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fbd9 	bl	80014fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d062      	beq.n	8001e16 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a5d      	ldr	r2, [pc, #372]	@ (8001ecc <HAL_ADC_IRQHandler+0x22c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d002      	beq.n	8001d60 <HAL_ADC_IRQHandler+0xc0>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e000      	b.n	8001d62 <HAL_ADC_IRQHandler+0xc2>
 8001d60:	4b5b      	ldr	r3, [pc, #364]	@ (8001ed0 <HAL_ADC_IRQHandler+0x230>)
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d008      	beq.n	8001d7c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d002      	beq.n	8001d7c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b09      	cmp	r3, #9
 8001d7a:	d104      	bne.n	8001d86 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	e00c      	b.n	8001da0 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a50      	ldr	r2, [pc, #320]	@ (8001ecc <HAL_ADC_IRQHandler+0x22c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d002      	beq.n	8001d96 <HAL_ADC_IRQHandler+0xf6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	e000      	b.n	8001d98 <HAL_ADC_IRQHandler+0xf8>
 8001d96:	4b4e      	ldr	r3, [pc, #312]	@ (8001ed0 <HAL_ADC_IRQHandler+0x230>)
 8001d98:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d135      	bne.n	8001e16 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d12e      	bne.n	8001e16 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fd1f 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d11a      	bne.n	8001dfe <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 020c 	bic.w	r2, r2, #12
 8001dd6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ddc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d112      	bne.n	8001e16 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	f043 0201 	orr.w	r2, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	655a      	str	r2, [r3, #84]	@ 0x54
 8001dfc:	e00b      	b.n	8001e16 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e02:	f043 0210 	orr.w	r2, r3, #16
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7fe ff4a 	bl	8000cb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	220c      	movs	r2, #12
 8001e22:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d004      	beq.n	8001e38 <HAL_ADC_IRQHandler+0x198>
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 0320 	and.w	r3, r3, #32
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10b      	bne.n	8001e50 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 809f 	beq.w	8001f82 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8099 	beq.w	8001f82 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d105      	bne.n	8001e68 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e60:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fb84 	bl	800157a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e72:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fb3f 	bl	80014fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e7e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a11      	ldr	r2, [pc, #68]	@ (8001ecc <HAL_ADC_IRQHandler+0x22c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d002      	beq.n	8001e90 <HAL_ADC_IRQHandler+0x1f0>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	e000      	b.n	8001e92 <HAL_ADC_IRQHandler+0x1f2>
 8001e90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <HAL_ADC_IRQHandler+0x230>)
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d008      	beq.n	8001eac <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d002      	beq.n	8001eac <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b07      	cmp	r3, #7
 8001eaa:	d104      	bne.n	8001eb6 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	623b      	str	r3, [r7, #32]
 8001eb4:	e013      	b.n	8001ede <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_ADC_IRQHandler+0x22c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d009      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0x234>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	e007      	b.n	8001ed6 <HAL_ADC_IRQHandler+0x236>
 8001ec6:	bf00      	nop
 8001ec8:	40022300 	.word	0x40022300
 8001ecc:	40022100 	.word	0x40022100
 8001ed0:	40022000 	.word	0x40022000
 8001ed4:	4b7d      	ldr	r3, [pc, #500]	@ (80020cc <HAL_ADC_IRQHandler+0x42c>)
 8001ed6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d047      	beq.n	8001f74 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_ADC_IRQHandler+0x25e>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d03f      	beq.n	8001f74 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d13a      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f08:	2b40      	cmp	r3, #64	@ 0x40
 8001f0a:	d133      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d12e      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fc98 	bl	8001850 <LL_ADC_INJ_IsConversionOngoing>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d11a      	bne.n	8001f5c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f34:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d112      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f52:	f043 0201 	orr.w	r2, r3, #1
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
 8001f5a:	e00b      	b.n	8001f74 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f60:	f043 0210 	orr.w	r2, r3, #16
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f001 f883 	bl	8003080 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2260      	movs	r2, #96	@ 0x60
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d011      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x310>
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8a0 	bl	80020e8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2280      	movs	r2, #128	@ 0x80
 8001fae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d012      	beq.n	8001fe0 <HAL_ADC_IRQHandler+0x340>
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f001 f869 	bl	80030a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fde:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d012      	beq.n	8002010 <HAL_ADC_IRQHandler+0x370>
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00d      	beq.n	8002010 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f001 f85b 	bl	80030bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800200e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0310 	and.w	r3, r3, #16
 8002016:	2b00      	cmp	r3, #0
 8002018:	d036      	beq.n	8002088 <HAL_ADC_IRQHandler+0x3e8>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d031      	beq.n	8002088 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800202c:	2301      	movs	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002030:	e014      	b.n	800205c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002038:	4825      	ldr	r0, [pc, #148]	@ (80020d0 <HAL_ADC_IRQHandler+0x430>)
 800203a:	f7ff fb0f 	bl	800165c <LL_ADC_GetMultiDMATransfer>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00b      	beq.n	800205c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002044:	2301      	movs	r3, #1
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
 8002048:	e008      	b.n	800205c <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002058:	2301      	movs	r3, #1
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10e      	bne.n	8002080 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002066:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002072:	f043 0202 	orr.w	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f83e 	bl	80020fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2210      	movs	r2, #16
 8002086:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208e:	2b00      	cmp	r3, #0
 8002090:	d018      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x424>
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020a0:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ac:	f043 0208 	orr.w	r2, r3, #8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020bc:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 ffe8 	bl	8003094 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020c4:	bf00      	nop
 80020c6:	3728      	adds	r7, #40	@ 0x28
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40022300 	.word	0x40022300

080020d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b0a1      	sub	sp, #132	@ 0x84
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a95      	ldr	r2, [pc, #596]	@ (8002380 <HAL_ADC_ConfigChannel+0x270>)
 800212a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x2a>
 8002136:	2302      	movs	r3, #2
 8002138:	e2c0      	b.n	80026bc <HAL_ADC_ConfigChannel+0x5ac>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fb5a 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	f040 82a5 	bne.w	800269e <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db2c      	blt.n	80021b6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002164:	2b00      	cmp	r3, #0
 8002166:	d108      	bne.n	800217a <HAL_ADC_ConfigChannel+0x6a>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	2201      	movs	r2, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	e016      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x98>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002188:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800218a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800218c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e003      	b.n	800219e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002196:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	2201      	movs	r2, #1
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	69d1      	ldr	r1, [r2, #28]
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	430b      	orrs	r3, r1
 80021b4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6859      	ldr	r1, [r3, #4]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f7ff f9ad 	bl	8001522 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fb17 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 80021d2:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff fb39 	bl	8001850 <LL_ADC_INJ_IsConversionOngoing>
 80021de:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 80a0 	bne.w	8002328 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 809c 	bne.w	8002328 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	6819      	ldr	r1, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	461a      	mov	r2, r3
 80021fe:	f7ff f9cf 	bl	80015a0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10b      	bne.n	8002228 <HAL_ADC_ConfigChannel+0x118>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	e00a      	b.n	800223e <HAL_ADC_ConfigChannel+0x12e>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2b04      	cmp	r3, #4
 8002246:	d027      	beq.n	8002298 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6919      	ldr	r1, [r3, #16]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002256:	f7ff f8fd 	bl	8001454 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6919      	ldr	r1, [r3, #16]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7e5b      	ldrb	r3, [r3, #25]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d102      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x160>
 800226a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800226e:	e000      	b.n	8002272 <HAL_ADC_ConfigChannel+0x162>
 8002270:	2300      	movs	r3, #0
 8002272:	461a      	mov	r2, r3
 8002274:	f7ff f927 	bl	80014c6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	6919      	ldr	r1, [r3, #16]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	7e1b      	ldrb	r3, [r3, #24]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d102      	bne.n	800228e <HAL_ADC_ConfigChannel+0x17e>
 8002288:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800228c:	e000      	b.n	8002290 <HAL_ADC_ConfigChannel+0x180>
 800228e:	2300      	movs	r3, #0
 8002290:	461a      	mov	r2, r3
 8002292:	f7ff f8ff 	bl	8001494 <LL_ADC_SetDataRightShift>
 8002296:	e047      	b.n	8002328 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	069b      	lsls	r3, r3, #26
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d107      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022ba:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	069b      	lsls	r3, r3, #26
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d107      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022de:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	069b      	lsls	r3, r3, #26
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d107      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002302:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800230a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	069b      	lsls	r3, r3, #26
 8002314:	429a      	cmp	r2, r3
 8002316:	d107      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002326:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff fa19 	bl	8001764 <LL_ADC_IsEnabled>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 81bb 	bne.w	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6819      	ldr	r1, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	461a      	mov	r2, r3
 8002348:	f7ff f956 	bl	80015f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4a0b      	ldr	r2, [pc, #44]	@ (8002380 <HAL_ADC_ConfigChannel+0x270>)
 8002352:	4293      	cmp	r3, r2
 8002354:	f040 8130 	bne.w	80025b8 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x274>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0e9b      	lsrs	r3, r3, #26
 800236e:	3301      	adds	r3, #1
 8002370:	f003 031f 	and.w	r3, r3, #31
 8002374:	2b09      	cmp	r3, #9
 8002376:	bf94      	ite	ls
 8002378:	2301      	movls	r3, #1
 800237a:	2300      	movhi	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e01b      	b.n	80023b8 <HAL_ADC_ConfigChannel+0x2a8>
 8002380:	47ff0000 	.word	0x47ff0000
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002394:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 800239c:	2320      	movs	r3, #32
 800239e:	e003      	b.n	80023a8 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 80023a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80023a2:	fab3 f383 	clz	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	3301      	adds	r3, #1
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	2b09      	cmp	r3, #9
 80023b0:	bf94      	ite	ls
 80023b2:	2301      	movls	r3, #1
 80023b4:	2300      	movhi	r3, #0
 80023b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d079      	beq.n	80024b0 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d107      	bne.n	80023d8 <HAL_ADC_ConfigChannel+0x2c8>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0e9b      	lsrs	r3, r3, #26
 80023ce:	3301      	adds	r3, #1
 80023d0:	069b      	lsls	r3, r3, #26
 80023d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023d6:	e015      	b.n	8002404 <HAL_ADC_ConfigChannel+0x2f4>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80023e0:	fa93 f3a3 	rbit	r3, r3
 80023e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80023e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023e8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80023ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 80023f0:	2320      	movs	r3, #32
 80023f2:	e003      	b.n	80023fc <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 80023f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	3301      	adds	r3, #1
 80023fe:	069b      	lsls	r3, r3, #26
 8002400:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800240c:	2b00      	cmp	r3, #0
 800240e:	d109      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x314>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0e9b      	lsrs	r3, r3, #26
 8002416:	3301      	adds	r3, #1
 8002418:	f003 031f 	and.w	r3, r3, #31
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f303 	lsl.w	r3, r1, r3
 8002422:	e017      	b.n	8002454 <HAL_ADC_ConfigChannel+0x344>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002434:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 031f 	and.w	r3, r3, #31
 800244e:	2101      	movs	r1, #1
 8002450:	fa01 f303 	lsl.w	r3, r1, r3
 8002454:	ea42 0103 	orr.w	r1, r2, r3
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10a      	bne.n	800247a <HAL_ADC_ConfigChannel+0x36a>
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0e9b      	lsrs	r3, r3, #26
 800246a:	3301      	adds	r3, #1
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4613      	mov	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4413      	add	r3, r2
 8002476:	051b      	lsls	r3, r3, #20
 8002478:	e018      	b.n	80024ac <HAL_ADC_ConfigChannel+0x39c>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800248c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002492:	2320      	movs	r3, #32
 8002494:	e003      	b.n	800249e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024ac:	430b      	orrs	r3, r1
 80024ae:	e07e      	b.n	80025ae <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d107      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x3bc>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	3301      	adds	r3, #1
 80024c4:	069b      	lsls	r3, r3, #26
 80024c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024ca:	e015      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x3e8>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80024de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 80024e4:	2320      	movs	r3, #32
 80024e6:	e003      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 80024e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	069b      	lsls	r3, r3, #26
 80024f4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x408>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0e9b      	lsrs	r3, r3, #26
 800250a:	3301      	adds	r3, #1
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	2101      	movs	r1, #1
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	e017      	b.n	8002548 <HAL_ADC_ConfigChannel+0x438>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	61bb      	str	r3, [r7, #24]
  return result;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8002530:	2320      	movs	r3, #32
 8002532:	e003      	b.n	800253c <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	2101      	movs	r1, #1
 8002544:	fa01 f303 	lsl.w	r3, r1, r3
 8002548:	ea42 0103 	orr.w	r1, r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10d      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x464>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	0e9b      	lsrs	r3, r3, #26
 800255e:	3301      	adds	r3, #1
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	3b1e      	subs	r3, #30
 800256c:	051b      	lsls	r3, r3, #20
 800256e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002572:	e01b      	b.n	80025ac <HAL_ADC_ConfigChannel+0x49c>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	60fb      	str	r3, [r7, #12]
  return result;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800258c:	2320      	movs	r3, #32
 800258e:	e003      	b.n	8002598 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	fab3 f383 	clz	r3, r3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f003 021f 	and.w	r2, r3, #31
 800259e:	4613      	mov	r3, r2
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	4413      	add	r3, r2
 80025a4:	3b1e      	subs	r3, #30
 80025a6:	051b      	lsls	r3, r3, #20
 80025a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ac:	430b      	orrs	r3, r1
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	6892      	ldr	r2, [r2, #8]
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fff4 	bl	80015a0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da77      	bge.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025c0:	4840      	ldr	r0, [pc, #256]	@ (80026c4 <HAL_ADC_ConfigChannel+0x5b4>)
 80025c2:	f7fe ff39 	bl	8001438 <LL_ADC_GetCommonPathInternalCh>
 80025c6:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c8:	483f      	ldr	r0, [pc, #252]	@ (80026c8 <HAL_ADC_ConfigChannel+0x5b8>)
 80025ca:	f7ff f8cb 	bl	8001764 <LL_ADC_IsEnabled>
 80025ce:	4604      	mov	r4, r0
 80025d0:	483e      	ldr	r0, [pc, #248]	@ (80026cc <HAL_ADC_ConfigChannel+0x5bc>)
 80025d2:	f7ff f8c7 	bl	8001764 <LL_ADC_IsEnabled>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4323      	orrs	r3, r4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d155      	bne.n	800268a <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a3b      	ldr	r2, [pc, #236]	@ (80026d0 <HAL_ADC_ConfigChannel+0x5c0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d122      	bne.n	800262e <HAL_ADC_ConfigChannel+0x51e>
 80025e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d11d      	bne.n	800262e <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a35      	ldr	r2, [pc, #212]	@ (80026cc <HAL_ADC_ConfigChannel+0x5bc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d159      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80025fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002602:	4619      	mov	r1, r3
 8002604:	482f      	ldr	r0, [pc, #188]	@ (80026c4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002606:	f7fe ff04 	bl	8001412 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800260a:	4b32      	ldr	r3, [pc, #200]	@ (80026d4 <HAL_ADC_ConfigChannel+0x5c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	099b      	lsrs	r3, r3, #6
 8002610:	4a31      	ldr	r2, [pc, #196]	@ (80026d8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	099b      	lsrs	r3, r3, #6
 8002618:	3301      	adds	r3, #1
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800261e:	e002      	b.n	8002626 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	3b01      	subs	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f9      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800262c:	e040      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2a      	ldr	r2, [pc, #168]	@ (80026dc <HAL_ADC_ConfigChannel+0x5cc>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d111      	bne.n	800265c <HAL_ADC_ConfigChannel+0x54c>
 8002638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800263a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a21      	ldr	r2, [pc, #132]	@ (80026cc <HAL_ADC_ConfigChannel+0x5bc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d131      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800264c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002652:	4619      	mov	r1, r3
 8002654:	481b      	ldr	r0, [pc, #108]	@ (80026c4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002656:	f7fe fedc 	bl	8001412 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800265a:	e029      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a1f      	ldr	r2, [pc, #124]	@ (80026e0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d124      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
 8002666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11f      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a15      	ldr	r2, [pc, #84]	@ (80026cc <HAL_ADC_ConfigChannel+0x5bc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d11a      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800267a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800267c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002680:	4619      	mov	r1, r3
 8002682:	4810      	ldr	r0, [pc, #64]	@ (80026c4 <HAL_ADC_ConfigChannel+0x5b4>)
 8002684:	f7fe fec5 	bl	8001412 <LL_ADC_SetCommonPathInternalCh>
 8002688:	e012      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	f043 0220 	orr.w	r2, r3, #32
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800269c:	e008      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	f043 0220 	orr.w	r2, r3, #32
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3784      	adds	r7, #132	@ 0x84
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd90      	pop	{r4, r7, pc}
 80026c4:	40022300 	.word	0x40022300
 80026c8:	40022000 	.word	0x40022000
 80026cc:	40022100 	.word	0x40022100
 80026d0:	cb840000 	.word	0xcb840000
 80026d4:	24000000 	.word	0x24000000
 80026d8:	053e2d63 	.word	0x053e2d63
 80026dc:	bac04000 	.word	0xbac04000
 80026e0:	cfb80000 	.word	0xcfb80000

080026e4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f880 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 8002700:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff f8a2 	bl	8001850 <LL_ADC_INJ_IsConversionOngoing>
 800270c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d103      	bne.n	800271c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8098 	beq.w	800284c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d02a      	beq.n	8002780 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	7d5b      	ldrb	r3, [r3, #21]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d126      	bne.n	8002780 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	7d1b      	ldrb	r3, [r3, #20]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d122      	bne.n	8002780 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800273e:	e014      	b.n	800276a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4a45      	ldr	r2, [pc, #276]	@ (8002858 <ADC_ConversionStop+0x174>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d90d      	bls.n	8002764 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f043 0210 	orr.w	r2, r3, #16
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	f043 0201 	orr.w	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e074      	b.n	800284e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	3301      	adds	r3, #1
 8002768:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002774:	2b40      	cmp	r3, #64	@ 0x40
 8002776:	d1e3      	bne.n	8002740 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2240      	movs	r2, #64	@ 0x40
 800277e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d014      	beq.n	80027b0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff f838 	bl	8001800 <LL_ADC_REG_IsConversionOngoing>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fff5 	bl	800178a <LL_ADC_IsDisableOngoing>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d104      	bne.n	80027b0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f814 	bl	80017d8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d014      	beq.n	80027e0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff f848 	bl	8001850 <LL_ADC_INJ_IsConversionOngoing>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00c      	beq.n	80027e0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe ffdd 	bl	800178a <LL_ADC_IsDisableOngoing>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff f824 	bl	8001828 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d005      	beq.n	80027f2 <ADC_ConversionStop+0x10e>
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d105      	bne.n	80027f8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80027ec:	230c      	movs	r3, #12
 80027ee:	617b      	str	r3, [r7, #20]
        break;
 80027f0:	e005      	b.n	80027fe <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80027f2:	2308      	movs	r3, #8
 80027f4:	617b      	str	r3, [r7, #20]
        break;
 80027f6:	e002      	b.n	80027fe <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80027f8:	2304      	movs	r3, #4
 80027fa:	617b      	str	r3, [r7, #20]
        break;
 80027fc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80027fe:	f7fe fddd 	bl	80013bc <HAL_GetTick>
 8002802:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002804:	e01b      	b.n	800283e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002806:	f7fe fdd9 	bl	80013bc <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b05      	cmp	r3, #5
 8002812:	d914      	bls.n	800283e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4013      	ands	r3, r2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e007      	b.n	800284e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1dc      	bne.n	8002806 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	000cdbff 	.word	0x000cdbff

0800285c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe ff7b 	bl	8001764 <LL_ADC_IsEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d161      	bne.n	8002938 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	4b32      	ldr	r3, [pc, #200]	@ (8002944 <ADC_Enable+0xe8>)
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00d      	beq.n	800289e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002886:	f043 0210 	orr.w	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e04d      	b.n	800293a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe ff36 	bl	8001714 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028a8:	f7fe fd88 	bl	80013bc <HAL_GetTick>
 80028ac:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028ae:	4826      	ldr	r0, [pc, #152]	@ (8002948 <ADC_Enable+0xec>)
 80028b0:	f7fe fec6 	bl	8001640 <LL_ADC_GetMultimode>
 80028b4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a24      	ldr	r2, [pc, #144]	@ (800294c <ADC_Enable+0xf0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d002      	beq.n	80028c6 <ADC_Enable+0x6a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	e000      	b.n	80028c8 <ADC_Enable+0x6c>
 80028c6:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <ADC_Enable+0xf4>)
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d02c      	beq.n	800292a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d130      	bne.n	8002938 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028d6:	e028      	b.n	800292a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe ff41 	bl	8001764 <LL_ADC_IsEnabled>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d104      	bne.n	80028f2 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe ff11 	bl	8001714 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028f2:	f7fe fd63 	bl	80013bc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d914      	bls.n	800292a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b01      	cmp	r3, #1
 800290c:	d00d      	beq.n	800292a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002912:	f043 0210 	orr.w	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e007      	b.n	800293a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d1cf      	bne.n	80028d8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	8000003f 	.word	0x8000003f
 8002948:	40022300 	.word	0x40022300
 800294c:	40022100 	.word	0x40022100
 8002950:	40022000 	.word	0x40022000

08002954 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe ff12 	bl	800178a <LL_ADC_IsDisableOngoing>
 8002966:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fe fef9 	bl	8001764 <LL_ADC_IsEnabled>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d047      	beq.n	8002a08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d144      	bne.n	8002a08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 030d 	and.w	r3, r3, #13
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10c      	bne.n	80029a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fe fed3 	bl	800173c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2203      	movs	r2, #3
 800299c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800299e:	f7fe fd0d 	bl	80013bc <HAL_GetTick>
 80029a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029a4:	e029      	b.n	80029fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029aa:	f043 0210 	orr.w	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029b6:	f043 0201 	orr.w	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e023      	b.n	8002a0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80029c2:	f7fe fcfb 	bl	80013bc <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d914      	bls.n	80029fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00d      	beq.n	80029fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ee:	f043 0201 	orr.w	r2, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e007      	b.n	8002a0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1dc      	bne.n	80029c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d14b      	bne.n	8002ac4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a30:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d021      	beq.n	8002a8a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe fd56 	bl	80014fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d032      	beq.n	8002abc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d12b      	bne.n	8002abc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d11f      	bne.n	8002abc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f043 0201 	orr.w	r2, r3, #1
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a88:	e018      	b.n	8002abc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d111      	bne.n	8002abc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7fe f8f7 	bl	8000cb0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ac2:	e00e      	b.n	8002ae2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff fb13 	bl	80020fc <HAL_ADC_ErrorCallback>
}
 8002ad6:	e004      	b.n	8002ae2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	4798      	blx	r3
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff faeb 	bl	80020d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fae5 	bl	80020fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002b44:	4b60      	ldr	r3, [pc, #384]	@ (8002cc8 <ADC_ConfigureBoostMode+0x18c>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d01c      	beq.n	8002b8a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002b50:	f004 fdca 	bl	80076e8 <HAL_RCC_GetHCLKFreq>
 8002b54:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b5e:	d010      	beq.n	8002b82 <ADC_ConfigureBoostMode+0x46>
 8002b60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b64:	d873      	bhi.n	8002c4e <ADC_ConfigureBoostMode+0x112>
 8002b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b6a:	d002      	beq.n	8002b72 <ADC_ConfigureBoostMode+0x36>
 8002b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b70:	d16d      	bne.n	8002c4e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7e:	60fb      	str	r3, [r7, #12]
        break;
 8002b80:	e068      	b.n	8002c54 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	60fb      	str	r3, [r7, #12]
        break;
 8002b88:	e064      	b.n	8002c54 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002b8a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	f005 ffc3 	bl	8008b1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002b96:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002ba0:	d051      	beq.n	8002c46 <ADC_ConfigureBoostMode+0x10a>
 8002ba2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002ba6:	d854      	bhi.n	8002c52 <ADC_ConfigureBoostMode+0x116>
 8002ba8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002bac:	d047      	beq.n	8002c3e <ADC_ConfigureBoostMode+0x102>
 8002bae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002bb2:	d84e      	bhi.n	8002c52 <ADC_ConfigureBoostMode+0x116>
 8002bb4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002bb8:	d03d      	beq.n	8002c36 <ADC_ConfigureBoostMode+0xfa>
 8002bba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002bbe:	d848      	bhi.n	8002c52 <ADC_ConfigureBoostMode+0x116>
 8002bc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bc4:	d033      	beq.n	8002c2e <ADC_ConfigureBoostMode+0xf2>
 8002bc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002bca:	d842      	bhi.n	8002c52 <ADC_ConfigureBoostMode+0x116>
 8002bcc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002bd0:	d029      	beq.n	8002c26 <ADC_ConfigureBoostMode+0xea>
 8002bd2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002bd6:	d83c      	bhi.n	8002c52 <ADC_ConfigureBoostMode+0x116>
 8002bd8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002bdc:	d01a      	beq.n	8002c14 <ADC_ConfigureBoostMode+0xd8>
 8002bde:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002be2:	d836      	bhi.n	8002c52 <ADC_ConfigureBoostMode+0x116>
 8002be4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002be8:	d014      	beq.n	8002c14 <ADC_ConfigureBoostMode+0xd8>
 8002bea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002bee:	d830      	bhi.n	8002c52 <ADC_ConfigureBoostMode+0x116>
 8002bf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf4:	d00e      	beq.n	8002c14 <ADC_ConfigureBoostMode+0xd8>
 8002bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bfa:	d82a      	bhi.n	8002c52 <ADC_ConfigureBoostMode+0x116>
 8002bfc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c00:	d008      	beq.n	8002c14 <ADC_ConfigureBoostMode+0xd8>
 8002c02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c06:	d824      	bhi.n	8002c52 <ADC_ConfigureBoostMode+0x116>
 8002c08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c0c:	d002      	beq.n	8002c14 <ADC_ConfigureBoostMode+0xd8>
 8002c0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c12:	d11e      	bne.n	8002c52 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c9b      	lsrs	r3, r3, #18
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c22:	60fb      	str	r3, [r7, #12]
        break;
 8002c24:	e016      	b.n	8002c54 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
        break;
 8002c2c:	e012      	b.n	8002c54 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	095b      	lsrs	r3, r3, #5
 8002c32:	60fb      	str	r3, [r7, #12]
        break;
 8002c34:	e00e      	b.n	8002c54 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	099b      	lsrs	r3, r3, #6
 8002c3a:	60fb      	str	r3, [r7, #12]
        break;
 8002c3c:	e00a      	b.n	8002c54 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	09db      	lsrs	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]
        break;
 8002c44:	e006      	b.n	8002c54 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	60fb      	str	r3, [r7, #12]
        break;
 8002c4c:	e002      	b.n	8002c54 <ADC_ConfigureBoostMode+0x118>
        break;
 8002c4e:	bf00      	nop
 8002c50:	e000      	b.n	8002c54 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002c52:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8002ccc <ADC_ConfigureBoostMode+0x190>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d808      	bhi.n	8002c74 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c70:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002c72:	e025      	b.n	8002cc0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a16      	ldr	r2, [pc, #88]	@ (8002cd0 <ADC_ConfigureBoostMode+0x194>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d80a      	bhi.n	8002c92 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	e016      	b.n	8002cc0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd4 <ADC_ConfigureBoostMode+0x198>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d80a      	bhi.n	8002cb0 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cac:	609a      	str	r2, [r3, #8]
}
 8002cae:	e007      	b.n	8002cc0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40022300 	.word	0x40022300
 8002ccc:	005f5e10 	.word	0x005f5e10
 8002cd0:	00bebc20 	.word	0x00bebc20
 8002cd4:	017d7840 	.word	0x017d7840

08002cd8 <LL_ADC_IsEnabled>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <LL_ADC_IsEnabled+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_ADC_IsEnabled+0x1a>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <LL_ADC_REG_StartConversion>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	4b05      	ldr	r3, [pc, #20]	@ (8002d24 <LL_ADC_REG_StartConversion+0x24>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	f043 0204 	orr.w	r2, r3, #4
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	7fffffc0 	.word	0x7fffffc0

08002d28 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d101      	bne.n	8002d40 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e000      	b.n	8002d42 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b0a0      	sub	sp, #128	@ 0x80
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ffe1 	bl	8002d28 <LL_ADC_REG_IsConversionOngoing>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	e0ad      	b.n	8002ecc <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e0a6      	b.n	8002ecc <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a52      	ldr	r2, [pc, #328]	@ (8002ed4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d002      	beq.n	8002d96 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	e000      	b.n	8002d98 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 8002d96:	4b50      	ldr	r3, [pc, #320]	@ (8002ed8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d006      	beq.n	8002dae <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff fd5b 	bl	800285c <ADC_Enable>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002dac:	e02e      	b.n	8002e0c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002dae:	2300      	movs	r3, #0
 8002db0:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a47      	ldr	r2, [pc, #284]	@ (8002ed8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d102      	bne.n	8002dc6 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 8002dc0:	4b44      	ldr	r3, [pc, #272]	@ (8002ed4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e001      	b.n	8002dca <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e071      	b.n	8002ecc <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f7ff fd37 	bl	800285c <ADC_Enable>
 8002dee:	4603      	mov	r3, r0
 8002df0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 8002df4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d107      	bne.n	8002e0c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff fd2b 	bl	800285c <ADC_Enable>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002e0c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d155      	bne.n	8002ec0 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e18:	4b30      	ldr	r3, [pc, #192]	@ (8002edc <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee0 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8002e30:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e36:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee4 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8002e38:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee8 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 8002e40:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	221c      	movs	r2, #28
 8002e48:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0210 	orr.w	r2, r2, #16
 8002e60:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d002      	beq.n	8002e72 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	e000      	b.n	8002e74 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 8002e72:	4b19      	ldr	r3, [pc, #100]	@ (8002ed8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00d      	beq.n	8002e98 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3340      	adds	r3, #64	@ 0x40
 8002e86:	4619      	mov	r1, r3
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f000 fedc 	bl	8003c48 <HAL_DMA_Start_IT>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e96:	e017      	b.n	8002ec8 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e98:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 8002e9a:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ea2:	330c      	adds	r3, #12
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f000 fecd 	bl	8003c48 <HAL_DMA_Start_IT>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff ff21 	bl	8002d00 <LL_ADC_REG_StartConversion>
 8002ebe:	e003      	b.n	8002ec8 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002ec8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3780      	adds	r7, #128	@ 0x80
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40022100 	.word	0x40022100
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	fffff0fe 	.word	0xfffff0fe
 8002ee0:	08002a13 	.word	0x08002a13
 8002ee4:	08002aeb 	.word	0x08002aeb
 8002ee8:	08002b07 	.word	0x08002b07
 8002eec:	40022300 	.word	0x40022300

08002ef0 <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b0a0      	sub	sp, #128	@ 0x80
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e0b2      	b.n	800306c <HAL_ADCEx_MultiModeStop_DMA+0x17c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002f0e:	2103      	movs	r1, #3
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f7ff fbe7 	bl	80026e4 <ADC_ConversionStop>
 8002f16:	4603      	mov	r3, r0
 8002f18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002f1c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 809d 	bne.w	8003060 <HAL_ADCEx_MultiModeStop_DMA+0x170>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	663b      	str	r3, [r7, #96]	@ 0x60
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a50      	ldr	r2, [pc, #320]	@ (8003074 <HAL_ADCEx_MultiModeStop_DMA+0x184>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d102      	bne.n	8002f3e <HAL_ADCEx_MultiModeStop_DMA+0x4e>
 8002f38:	4b4f      	ldr	r3, [pc, #316]	@ (8003078 <HAL_ADCEx_MultiModeStop_DMA+0x188>)
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	e001      	b.n	8002f42 <HAL_ADCEx_MultiModeStop_DMA+0x52>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]

    if (tmphadcSlave.Instance == NULL)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10b      	bne.n	8002f60 <HAL_ADCEx_MultiModeStop_DMA+0x70>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4c:	f043 0220 	orr.w	r2, r3, #32
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e085      	b.n	800306c <HAL_ADCEx_MultiModeStop_DMA+0x17c>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 8002f60:	f7fe fa2c 	bl	80013bc <HAL_GetTick>
 8002f64:	6778      	str	r0, [r7, #116]	@ 0x74

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7ff fedd 	bl	8002d28 <LL_ADC_REG_IsConversionOngoing>
 8002f6e:	67b8      	str	r0, [r7, #120]	@ 0x78
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8002f70:	e027      	b.n	8002fc2 <HAL_ADCEx_MultiModeStop_DMA+0xd2>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002f72:	f7fe fa23 	bl	80013bc <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	2b05      	cmp	r3, #5
 8002f7e:	d91b      	bls.n	8002fb8 <HAL_ADCEx_MultiModeStop_DMA+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fed0 	bl	8002d28 <LL_ADC_REG_IsConversionOngoing>
 8002f88:	67b8      	str	r0, [r7, #120]	@ 0x78

        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff feca 	bl	8002d28 <LL_ADC_REG_IsConversionOngoing>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d002      	beq.n	8002fa0 <HAL_ADCEx_MultiModeStop_DMA+0xb0>
           || (tmphadcSlave_conversion_on_going == 1UL)
 8002f9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_ADCEx_MultiModeStop_DMA+0xc8>
          )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa4:	f043 0210 	orr.w	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e059      	b.n	800306c <HAL_ADCEx_MultiModeStop_DMA+0x17c>
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff feb4 	bl	8002d28 <LL_ADC_REG_IsConversionOngoing>
 8002fc0:	67b8      	str	r0, [r7, #120]	@ 0x78
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff feae 	bl	8002d28 <LL_ADC_REG_IsConversionOngoing>
 8002fcc:	4603      	mov	r3, r0
           || (tmphadcSlave_conversion_on_going == 1UL)
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d0cf      	beq.n	8002f72 <HAL_ADCEx_MultiModeStop_DMA+0x82>
 8002fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d0cc      	beq.n	8002f72 <HAL_ADCEx_MultiModeStop_DMA+0x82>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 f89d 	bl	800411c <HAL_DMA_Abort>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8002fe8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <HAL_ADCEx_MultiModeStop_DMA+0x10c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0210 	bic.w	r2, r2, #16
 800300a:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 800300c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003010:	2b00      	cmp	r3, #0
 8003012:	d115      	bne.n	8003040 <HAL_ADCEx_MultiModeStop_DMA+0x150>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8003014:	f107 030c 	add.w	r3, r7, #12
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fc9b 	bl	8002954 <ADC_Disable>
 800301e:	4603      	mov	r3, r0
 8003020:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fc95 	bl	8002954 <ADC_Disable>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10f      	bne.n	8003050 <HAL_ADCEx_MultiModeStop_DMA+0x160>
 8003030:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10b      	bne.n	8003050 <HAL_ADCEx_MultiModeStop_DMA+0x160>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800303e:	e007      	b.n	8003050 <HAL_ADCEx_MultiModeStop_DMA+0x160>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fc87 	bl	8002954 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8003046:	f107 030c 	add.w	r3, r7, #12
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fc82 	bl	8002954 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_ADCEx_MultiModeStop_DMA+0x18c>)
 8003056:	4013      	ands	r3, r2
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003068:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800306c:	4618      	mov	r0, r3
 800306e:	3780      	adds	r7, #128	@ 0x80
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40022000 	.word	0x40022000
 8003078:	40022100 	.word	0x40022100
 800307c:	ffffeefe 	.word	0xffffeefe

08003080 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b09f      	sub	sp, #124	@ 0x7c
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030fe:	2302      	movs	r3, #2
 8003100:	e080      	b.n	8003204 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800310e:	2300      	movs	r3, #0
 8003110:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3d      	ldr	r2, [pc, #244]	@ (800320c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d102      	bne.n	8003122 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800311c:	4b3c      	ldr	r3, [pc, #240]	@ (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	e001      	b.n	8003126 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e05f      	b.n	8003204 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fdee 	bl	8002d28 <LL_ADC_REG_IsConversionOngoing>
 800314c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fde8 	bl	8002d28 <LL_ADC_REG_IsConversionOngoing>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d141      	bne.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800315e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003160:	2b00      	cmp	r3, #0
 8003162:	d13e      	bne.n	80031e2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003164:	4b2b      	ldr	r3, [pc, #172]	@ (8003214 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003166:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d020      	beq.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	431a      	orrs	r2, r3
 800317e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003180:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003182:	4822      	ldr	r0, [pc, #136]	@ (800320c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003184:	f7ff fda8 	bl	8002cd8 <LL_ADC_IsEnabled>
 8003188:	4604      	mov	r4, r0
 800318a:	4821      	ldr	r0, [pc, #132]	@ (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800318c:	f7ff fda4 	bl	8002cd8 <LL_ADC_IsEnabled>
 8003190:	4603      	mov	r3, r0
 8003192:	4323      	orrs	r3, r4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d12e      	bne.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	4b1e      	ldr	r3, [pc, #120]	@ (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800319e:	4013      	ands	r3, r2
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	6811      	ldr	r1, [r2, #0]
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	6892      	ldr	r2, [r2, #8]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031ae:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031b0:	e021      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80031b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031be:	4813      	ldr	r0, [pc, #76]	@ (800320c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80031c0:	f7ff fd8a 	bl	8002cd8 <LL_ADC_IsEnabled>
 80031c4:	4604      	mov	r4, r0
 80031c6:	4812      	ldr	r0, [pc, #72]	@ (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80031c8:	f7ff fd86 	bl	8002cd8 <LL_ADC_IsEnabled>
 80031cc:	4603      	mov	r3, r0
 80031ce:	4323      	orrs	r3, r4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d110      	bne.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003218 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80031da:	4013      	ands	r3, r2
 80031dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031de:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031e0:	e009      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e6:	f043 0220 	orr.w	r2, r3, #32
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80031f4:	e000      	b.n	80031f8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80031f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003200:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003204:	4618      	mov	r0, r3
 8003206:	377c      	adds	r7, #124	@ 0x7c
 8003208:	46bd      	mov	sp, r7
 800320a:	bd90      	pop	{r4, r7, pc}
 800320c:	40022000 	.word	0x40022000
 8003210:	40022100 	.word	0x40022100
 8003214:	40022300 	.word	0x40022300
 8003218:	fffff0e0 	.word	0xfffff0e0

0800321c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <__NVIC_SetPriorityGrouping+0x40>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003238:	4013      	ands	r3, r2
 800323a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003244:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <__NVIC_SetPriorityGrouping+0x44>)
 8003246:	4313      	orrs	r3, r2
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	@ (800325c <__NVIC_SetPriorityGrouping+0x40>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00
 8003260:	05fa0000 	.word	0x05fa0000

08003264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003268:	4b04      	ldr	r3, [pc, #16]	@ (800327c <__NVIC_GetPriorityGrouping+0x18>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	0a1b      	lsrs	r3, r3, #8
 800326e:	f003 0307 	and.w	r3, r3, #7
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	e000ed00 	.word	0xe000ed00

08003280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800328a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800328e:	2b00      	cmp	r3, #0
 8003290:	db0b      	blt.n	80032aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	f003 021f 	and.w	r2, r3, #31
 8003298:	4907      	ldr	r1, [pc, #28]	@ (80032b8 <__NVIC_EnableIRQ+0x38>)
 800329a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	2001      	movs	r0, #1
 80032a2:	fa00 f202 	lsl.w	r2, r0, r2
 80032a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000e100 	.word	0xe000e100

080032bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	db0a      	blt.n	80032e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	490c      	ldr	r1, [pc, #48]	@ (8003308 <__NVIC_SetPriority+0x4c>)
 80032d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	440b      	add	r3, r1
 80032e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e4:	e00a      	b.n	80032fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	4908      	ldr	r1, [pc, #32]	@ (800330c <__NVIC_SetPriority+0x50>)
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	3b04      	subs	r3, #4
 80032f4:	0112      	lsls	r2, r2, #4
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	440b      	add	r3, r1
 80032fa:	761a      	strb	r2, [r3, #24]
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000e100 	.word	0xe000e100
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003310:	b480      	push	{r7}
 8003312:	b089      	sub	sp, #36	@ 0x24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f1c3 0307 	rsb	r3, r3, #7
 800332a:	2b04      	cmp	r3, #4
 800332c:	bf28      	it	cs
 800332e:	2304      	movcs	r3, #4
 8003330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3304      	adds	r3, #4
 8003336:	2b06      	cmp	r3, #6
 8003338:	d902      	bls.n	8003340 <NVIC_EncodePriority+0x30>
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3b03      	subs	r3, #3
 800333e:	e000      	b.n	8003342 <NVIC_EncodePriority+0x32>
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	f04f 32ff 	mov.w	r2, #4294967295
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43da      	mvns	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	401a      	ands	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003358:	f04f 31ff 	mov.w	r1, #4294967295
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	fa01 f303 	lsl.w	r3, r1, r3
 8003362:	43d9      	mvns	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003368:	4313      	orrs	r3, r2
         );
}
 800336a:	4618      	mov	r0, r3
 800336c:	3724      	adds	r7, #36	@ 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3b01      	subs	r3, #1
 8003384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003388:	d301      	bcc.n	800338e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800338a:	2301      	movs	r3, #1
 800338c:	e00f      	b.n	80033ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338e:	4a0a      	ldr	r2, [pc, #40]	@ (80033b8 <SysTick_Config+0x40>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003396:	210f      	movs	r1, #15
 8003398:	f04f 30ff 	mov.w	r0, #4294967295
 800339c:	f7ff ff8e 	bl	80032bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033a0:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <SysTick_Config+0x40>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a6:	4b04      	ldr	r3, [pc, #16]	@ (80033b8 <SysTick_Config+0x40>)
 80033a8:	2207      	movs	r2, #7
 80033aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	e000e010 	.word	0xe000e010

080033bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff ff29 	bl	800321c <__NVIC_SetPriorityGrouping>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	4603      	mov	r3, r0
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
 80033de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff40 	bl	8003264 <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff90 	bl	8003310 <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5f 	bl	80032bc <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff33 	bl	8003280 <__NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffa4 	bl	8003378 <SysTick_Config>
 8003430:	4603      	mov	r3, r0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
	...

0800343c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003440:	f3bf 8f5f 	dmb	sy
}
 8003444:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003446:	4b07      	ldr	r3, [pc, #28]	@ (8003464 <HAL_MPU_Disable+0x28>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	4a06      	ldr	r2, [pc, #24]	@ (8003464 <HAL_MPU_Disable+0x28>)
 800344c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003450:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003452:	4b05      	ldr	r3, [pc, #20]	@ (8003468 <HAL_MPU_Disable+0x2c>)
 8003454:	2200      	movs	r2, #0
 8003456:	605a      	str	r2, [r3, #4]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000ed00 	.word	0xe000ed00
 8003468:	e000ed90 	.word	0xe000ed90

0800346c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003474:	4a0b      	ldr	r2, [pc, #44]	@ (80034a4 <HAL_MPU_Enable+0x38>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <HAL_MPU_Enable+0x3c>)
 8003480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003482:	4a09      	ldr	r2, [pc, #36]	@ (80034a8 <HAL_MPU_Enable+0x3c>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800348a:	f3bf 8f4f 	dsb	sy
}
 800348e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003490:	f3bf 8f6f 	isb	sy
}
 8003494:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000ed90 	.word	0xe000ed90
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	785a      	ldrb	r2, [r3, #1]
 80034b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <HAL_MPU_ConfigRegion+0x7c>)
 80034ba:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80034bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003528 <HAL_MPU_ConfigRegion+0x7c>)
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	4a19      	ldr	r2, [pc, #100]	@ (8003528 <HAL_MPU_ConfigRegion+0x7c>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80034c8:	4a17      	ldr	r2, [pc, #92]	@ (8003528 <HAL_MPU_ConfigRegion+0x7c>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7b1b      	ldrb	r3, [r3, #12]
 80034d4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7adb      	ldrb	r3, [r3, #11]
 80034da:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80034dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	7a9b      	ldrb	r3, [r3, #10]
 80034e2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80034e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	7b5b      	ldrb	r3, [r3, #13]
 80034ea:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80034ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	7b9b      	ldrb	r3, [r3, #14]
 80034f2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80034f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	7bdb      	ldrb	r3, [r3, #15]
 80034fa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80034fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	7a5b      	ldrb	r3, [r3, #9]
 8003502:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003504:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	7a1b      	ldrb	r3, [r3, #8]
 800350a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800350c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	7812      	ldrb	r2, [r2, #0]
 8003512:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003514:	4a04      	ldr	r2, [pc, #16]	@ (8003528 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003516:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003518:	6113      	str	r3, [r2, #16]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	e000ed90 	.word	0xe000ed90

0800352c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003534:	f7fd ff42 	bl	80013bc <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e37d      	b.n	8003c40 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a66      	ldr	r2, [pc, #408]	@ (80036e4 <HAL_DMA_Init+0x1b8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d04a      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a65      	ldr	r2, [pc, #404]	@ (80036e8 <HAL_DMA_Init+0x1bc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d045      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a63      	ldr	r2, [pc, #396]	@ (80036ec <HAL_DMA_Init+0x1c0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d040      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a62      	ldr	r2, [pc, #392]	@ (80036f0 <HAL_DMA_Init+0x1c4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d03b      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a60      	ldr	r2, [pc, #384]	@ (80036f4 <HAL_DMA_Init+0x1c8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d036      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a5f      	ldr	r2, [pc, #380]	@ (80036f8 <HAL_DMA_Init+0x1cc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d031      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5d      	ldr	r2, [pc, #372]	@ (80036fc <HAL_DMA_Init+0x1d0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d02c      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a5c      	ldr	r2, [pc, #368]	@ (8003700 <HAL_DMA_Init+0x1d4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d027      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a5a      	ldr	r2, [pc, #360]	@ (8003704 <HAL_DMA_Init+0x1d8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d022      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a59      	ldr	r2, [pc, #356]	@ (8003708 <HAL_DMA_Init+0x1dc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d01d      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a57      	ldr	r2, [pc, #348]	@ (800370c <HAL_DMA_Init+0x1e0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d018      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a56      	ldr	r2, [pc, #344]	@ (8003710 <HAL_DMA_Init+0x1e4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d013      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a54      	ldr	r2, [pc, #336]	@ (8003714 <HAL_DMA_Init+0x1e8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00e      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a53      	ldr	r2, [pc, #332]	@ (8003718 <HAL_DMA_Init+0x1ec>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d009      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a51      	ldr	r2, [pc, #324]	@ (800371c <HAL_DMA_Init+0x1f0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d004      	beq.n	80035e4 <HAL_DMA_Init+0xb8>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a50      	ldr	r2, [pc, #320]	@ (8003720 <HAL_DMA_Init+0x1f4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_DMA_Init+0xbc>
 80035e4:	2301      	movs	r3, #1
 80035e6:	e000      	b.n	80035ea <HAL_DMA_Init+0xbe>
 80035e8:	2300      	movs	r3, #0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 813c 	beq.w	8003868 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a37      	ldr	r2, [pc, #220]	@ (80036e4 <HAL_DMA_Init+0x1b8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d04a      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a36      	ldr	r2, [pc, #216]	@ (80036e8 <HAL_DMA_Init+0x1bc>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d045      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a34      	ldr	r2, [pc, #208]	@ (80036ec <HAL_DMA_Init+0x1c0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d040      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a33      	ldr	r2, [pc, #204]	@ (80036f0 <HAL_DMA_Init+0x1c4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d03b      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a31      	ldr	r2, [pc, #196]	@ (80036f4 <HAL_DMA_Init+0x1c8>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d036      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a30      	ldr	r2, [pc, #192]	@ (80036f8 <HAL_DMA_Init+0x1cc>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d031      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a2e      	ldr	r2, [pc, #184]	@ (80036fc <HAL_DMA_Init+0x1d0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d02c      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2d      	ldr	r2, [pc, #180]	@ (8003700 <HAL_DMA_Init+0x1d4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d027      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a2b      	ldr	r2, [pc, #172]	@ (8003704 <HAL_DMA_Init+0x1d8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d022      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a2a      	ldr	r2, [pc, #168]	@ (8003708 <HAL_DMA_Init+0x1dc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d01d      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a28      	ldr	r2, [pc, #160]	@ (800370c <HAL_DMA_Init+0x1e0>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d018      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a27      	ldr	r2, [pc, #156]	@ (8003710 <HAL_DMA_Init+0x1e4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d013      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a25      	ldr	r2, [pc, #148]	@ (8003714 <HAL_DMA_Init+0x1e8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00e      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a24      	ldr	r2, [pc, #144]	@ (8003718 <HAL_DMA_Init+0x1ec>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d009      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a22      	ldr	r2, [pc, #136]	@ (800371c <HAL_DMA_Init+0x1f0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d004      	beq.n	80036a0 <HAL_DMA_Init+0x174>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a21      	ldr	r2, [pc, #132]	@ (8003720 <HAL_DMA_Init+0x1f4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d108      	bne.n	80036b2 <HAL_DMA_Init+0x186>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e007      	b.n	80036c2 <HAL_DMA_Init+0x196>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0201 	bic.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80036c2:	e02f      	b.n	8003724 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036c4:	f7fd fe7a 	bl	80013bc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b05      	cmp	r3, #5
 80036d0:	d928      	bls.n	8003724 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2220      	movs	r2, #32
 80036d6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2203      	movs	r2, #3
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e2ad      	b.n	8003c40 <HAL_DMA_Init+0x714>
 80036e4:	40020010 	.word	0x40020010
 80036e8:	40020028 	.word	0x40020028
 80036ec:	40020040 	.word	0x40020040
 80036f0:	40020058 	.word	0x40020058
 80036f4:	40020070 	.word	0x40020070
 80036f8:	40020088 	.word	0x40020088
 80036fc:	400200a0 	.word	0x400200a0
 8003700:	400200b8 	.word	0x400200b8
 8003704:	40020410 	.word	0x40020410
 8003708:	40020428 	.word	0x40020428
 800370c:	40020440 	.word	0x40020440
 8003710:	40020458 	.word	0x40020458
 8003714:	40020470 	.word	0x40020470
 8003718:	40020488 	.word	0x40020488
 800371c:	400204a0 	.word	0x400204a0
 8003720:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1c8      	bne.n	80036c4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4b73      	ldr	r3, [pc, #460]	@ (800390c <HAL_DMA_Init+0x3e0>)
 800373e:	4013      	ands	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800374a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003756:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003762:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	2b04      	cmp	r3, #4
 8003776:	d107      	bne.n	8003788 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	4313      	orrs	r3, r2
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b28      	cmp	r3, #40	@ 0x28
 800378e:	d903      	bls.n	8003798 <HAL_DMA_Init+0x26c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b2e      	cmp	r3, #46	@ 0x2e
 8003796:	d91f      	bls.n	80037d8 <HAL_DMA_Init+0x2ac>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b3e      	cmp	r3, #62	@ 0x3e
 800379e:	d903      	bls.n	80037a8 <HAL_DMA_Init+0x27c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b42      	cmp	r3, #66	@ 0x42
 80037a6:	d917      	bls.n	80037d8 <HAL_DMA_Init+0x2ac>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	2b46      	cmp	r3, #70	@ 0x46
 80037ae:	d903      	bls.n	80037b8 <HAL_DMA_Init+0x28c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b48      	cmp	r3, #72	@ 0x48
 80037b6:	d90f      	bls.n	80037d8 <HAL_DMA_Init+0x2ac>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b4e      	cmp	r3, #78	@ 0x4e
 80037be:	d903      	bls.n	80037c8 <HAL_DMA_Init+0x29c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	2b52      	cmp	r3, #82	@ 0x52
 80037c6:	d907      	bls.n	80037d8 <HAL_DMA_Init+0x2ac>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b73      	cmp	r3, #115	@ 0x73
 80037ce:	d905      	bls.n	80037dc <HAL_DMA_Init+0x2b0>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b77      	cmp	r3, #119	@ 0x77
 80037d6:	d801      	bhi.n	80037dc <HAL_DMA_Init+0x2b0>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_DMA_Init+0x2b2>
 80037dc:	2300      	movs	r3, #0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f023 0307 	bic.w	r3, r3, #7
 8003800:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	2b04      	cmp	r3, #4
 8003812:	d117      	bne.n	8003844 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00e      	beq.n	8003844 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f002 fbd4 	bl	8005fd4 <DMA_CheckFifoParam>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d008      	beq.n	8003844 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2240      	movs	r2, #64	@ 0x40
 8003836:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e1fd      	b.n	8003c40 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f002 fb0f 	bl	8005e70 <DMA_CalcBaseAndBitshift>
 8003852:	4603      	mov	r3, r0
 8003854:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	223f      	movs	r2, #63	@ 0x3f
 8003860:	409a      	lsls	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	e0fd      	b.n	8003a64 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a28      	ldr	r2, [pc, #160]	@ (8003910 <HAL_DMA_Init+0x3e4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a27      	ldr	r2, [pc, #156]	@ (8003914 <HAL_DMA_Init+0x3e8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a25      	ldr	r2, [pc, #148]	@ (8003918 <HAL_DMA_Init+0x3ec>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a24      	ldr	r2, [pc, #144]	@ (800391c <HAL_DMA_Init+0x3f0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a22      	ldr	r2, [pc, #136]	@ (8003920 <HAL_DMA_Init+0x3f4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a21      	ldr	r2, [pc, #132]	@ (8003924 <HAL_DMA_Init+0x3f8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003928 <HAL_DMA_Init+0x3fc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a1e      	ldr	r2, [pc, #120]	@ (800392c <HAL_DMA_Init+0x400>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003930 <HAL_DMA_Init+0x404>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003934 <HAL_DMA_Init+0x408>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a19      	ldr	r2, [pc, #100]	@ (8003938 <HAL_DMA_Init+0x40c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a18      	ldr	r2, [pc, #96]	@ (800393c <HAL_DMA_Init+0x410>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a16      	ldr	r2, [pc, #88]	@ (8003940 <HAL_DMA_Init+0x414>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a15      	ldr	r2, [pc, #84]	@ (8003944 <HAL_DMA_Init+0x418>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a13      	ldr	r2, [pc, #76]	@ (8003948 <HAL_DMA_Init+0x41c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_Init+0x3dc>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a12      	ldr	r2, [pc, #72]	@ (800394c <HAL_DMA_Init+0x420>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d123      	bne.n	8003950 <HAL_DMA_Init+0x424>
 8003908:	2301      	movs	r3, #1
 800390a:	e022      	b.n	8003952 <HAL_DMA_Init+0x426>
 800390c:	fe10803f 	.word	0xfe10803f
 8003910:	48022c08 	.word	0x48022c08
 8003914:	48022c1c 	.word	0x48022c1c
 8003918:	48022c30 	.word	0x48022c30
 800391c:	48022c44 	.word	0x48022c44
 8003920:	48022c58 	.word	0x48022c58
 8003924:	48022c6c 	.word	0x48022c6c
 8003928:	48022c80 	.word	0x48022c80
 800392c:	48022c94 	.word	0x48022c94
 8003930:	58025408 	.word	0x58025408
 8003934:	5802541c 	.word	0x5802541c
 8003938:	58025430 	.word	0x58025430
 800393c:	58025444 	.word	0x58025444
 8003940:	58025458 	.word	0x58025458
 8003944:	5802546c 	.word	0x5802546c
 8003948:	58025480 	.word	0x58025480
 800394c:	58025494 	.word	0x58025494
 8003950:	2300      	movs	r3, #0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d07d      	beq.n	8003a52 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a7f      	ldr	r2, [pc, #508]	@ (8003b58 <HAL_DMA_Init+0x62c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d021      	beq.n	80039a4 <HAL_DMA_Init+0x478>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a7d      	ldr	r2, [pc, #500]	@ (8003b5c <HAL_DMA_Init+0x630>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01c      	beq.n	80039a4 <HAL_DMA_Init+0x478>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a7c      	ldr	r2, [pc, #496]	@ (8003b60 <HAL_DMA_Init+0x634>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d017      	beq.n	80039a4 <HAL_DMA_Init+0x478>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a7a      	ldr	r2, [pc, #488]	@ (8003b64 <HAL_DMA_Init+0x638>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d012      	beq.n	80039a4 <HAL_DMA_Init+0x478>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a79      	ldr	r2, [pc, #484]	@ (8003b68 <HAL_DMA_Init+0x63c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d00d      	beq.n	80039a4 <HAL_DMA_Init+0x478>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a77      	ldr	r2, [pc, #476]	@ (8003b6c <HAL_DMA_Init+0x640>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d008      	beq.n	80039a4 <HAL_DMA_Init+0x478>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a76      	ldr	r2, [pc, #472]	@ (8003b70 <HAL_DMA_Init+0x644>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d003      	beq.n	80039a4 <HAL_DMA_Init+0x478>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a74      	ldr	r2, [pc, #464]	@ (8003b74 <HAL_DMA_Init+0x648>)
 80039a2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4b6e      	ldr	r3, [pc, #440]	@ (8003b78 <HAL_DMA_Init+0x64c>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d008      	beq.n	80039de <HAL_DMA_Init+0x4b2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	2b80      	cmp	r3, #128	@ 0x80
 80039d2:	d102      	bne.n	80039da <HAL_DMA_Init+0x4ae>
 80039d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80039d8:	e002      	b.n	80039e0 <HAL_DMA_Init+0x4b4>
 80039da:	2300      	movs	r3, #0
 80039dc:	e000      	b.n	80039e0 <HAL_DMA_Init+0x4b4>
 80039de:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68d2      	ldr	r2, [r2, #12]
 80039e4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80039e6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80039ee:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80039f6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80039fe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69db      	ldr	r3, [r3, #28]
 8003a04:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003a06:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003a0e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	4b55      	ldr	r3, [pc, #340]	@ (8003b7c <HAL_DMA_Init+0x650>)
 8003a26:	4413      	add	r3, r2
 8003a28:	4a55      	ldr	r2, [pc, #340]	@ (8003b80 <HAL_DMA_Init+0x654>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	091b      	lsrs	r3, r3, #4
 8003a30:	009a      	lsls	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f002 fa1a 	bl	8005e70 <DMA_CalcBaseAndBitshift>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a44:	f003 031f 	and.w	r3, r3, #31
 8003a48:	2201      	movs	r2, #1
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	e008      	b.n	8003a64 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2240      	movs	r2, #64	@ 0x40
 8003a56:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0ed      	b.n	8003c40 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a46      	ldr	r2, [pc, #280]	@ (8003b84 <HAL_DMA_Init+0x658>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d072      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a45      	ldr	r2, [pc, #276]	@ (8003b88 <HAL_DMA_Init+0x65c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d06d      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a43      	ldr	r2, [pc, #268]	@ (8003b8c <HAL_DMA_Init+0x660>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d068      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a42      	ldr	r2, [pc, #264]	@ (8003b90 <HAL_DMA_Init+0x664>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d063      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a40      	ldr	r2, [pc, #256]	@ (8003b94 <HAL_DMA_Init+0x668>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d05e      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3f      	ldr	r2, [pc, #252]	@ (8003b98 <HAL_DMA_Init+0x66c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d059      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a3d      	ldr	r2, [pc, #244]	@ (8003b9c <HAL_DMA_Init+0x670>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d054      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a3c      	ldr	r2, [pc, #240]	@ (8003ba0 <HAL_DMA_Init+0x674>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d04f      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ba4 <HAL_DMA_Init+0x678>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d04a      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a39      	ldr	r2, [pc, #228]	@ (8003ba8 <HAL_DMA_Init+0x67c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d045      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a37      	ldr	r2, [pc, #220]	@ (8003bac <HAL_DMA_Init+0x680>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d040      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a36      	ldr	r2, [pc, #216]	@ (8003bb0 <HAL_DMA_Init+0x684>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d03b      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a34      	ldr	r2, [pc, #208]	@ (8003bb4 <HAL_DMA_Init+0x688>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d036      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a33      	ldr	r2, [pc, #204]	@ (8003bb8 <HAL_DMA_Init+0x68c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d031      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a31      	ldr	r2, [pc, #196]	@ (8003bbc <HAL_DMA_Init+0x690>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d02c      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a30      	ldr	r2, [pc, #192]	@ (8003bc0 <HAL_DMA_Init+0x694>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d027      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a13      	ldr	r2, [pc, #76]	@ (8003b58 <HAL_DMA_Init+0x62c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d022      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a12      	ldr	r2, [pc, #72]	@ (8003b5c <HAL_DMA_Init+0x630>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d01d      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a10      	ldr	r2, [pc, #64]	@ (8003b60 <HAL_DMA_Init+0x634>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d018      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a0f      	ldr	r2, [pc, #60]	@ (8003b64 <HAL_DMA_Init+0x638>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d013      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	@ (8003b68 <HAL_DMA_Init+0x63c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00e      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <HAL_DMA_Init+0x640>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d009      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <HAL_DMA_Init+0x644>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d004      	beq.n	8003b54 <HAL_DMA_Init+0x628>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <HAL_DMA_Init+0x648>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d137      	bne.n	8003bc4 <HAL_DMA_Init+0x698>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e036      	b.n	8003bc6 <HAL_DMA_Init+0x69a>
 8003b58:	58025408 	.word	0x58025408
 8003b5c:	5802541c 	.word	0x5802541c
 8003b60:	58025430 	.word	0x58025430
 8003b64:	58025444 	.word	0x58025444
 8003b68:	58025458 	.word	0x58025458
 8003b6c:	5802546c 	.word	0x5802546c
 8003b70:	58025480 	.word	0x58025480
 8003b74:	58025494 	.word	0x58025494
 8003b78:	fffe000f 	.word	0xfffe000f
 8003b7c:	a7fdabf8 	.word	0xa7fdabf8
 8003b80:	cccccccd 	.word	0xcccccccd
 8003b84:	40020010 	.word	0x40020010
 8003b88:	40020028 	.word	0x40020028
 8003b8c:	40020040 	.word	0x40020040
 8003b90:	40020058 	.word	0x40020058
 8003b94:	40020070 	.word	0x40020070
 8003b98:	40020088 	.word	0x40020088
 8003b9c:	400200a0 	.word	0x400200a0
 8003ba0:	400200b8 	.word	0x400200b8
 8003ba4:	40020410 	.word	0x40020410
 8003ba8:	40020428 	.word	0x40020428
 8003bac:	40020440 	.word	0x40020440
 8003bb0:	40020458 	.word	0x40020458
 8003bb4:	40020470 	.word	0x40020470
 8003bb8:	40020488 	.word	0x40020488
 8003bbc:	400204a0 	.word	0x400204a0
 8003bc0:	400204b8 	.word	0x400204b8
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d032      	beq.n	8003c30 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f002 fa7e 	bl	80060cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b80      	cmp	r3, #128	@ 0x80
 8003bd6:	d102      	bne.n	8003bde <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003bf2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <HAL_DMA_Init+0x6f2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d80c      	bhi.n	8003c1e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f002 fafb 	bl	8006200 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c1a:	605a      	str	r2, [r3, #4]
 8003c1c:	e008      	b.n	8003c30 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e226      	b.n	80040b2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_DMA_Start_IT+0x2a>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e21f      	b.n	80040b2 <HAL_DMA_Start_IT+0x46a>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	f040 820a 	bne.w	800409c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a68      	ldr	r2, [pc, #416]	@ (8003e3c <HAL_DMA_Start_IT+0x1f4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d04a      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a66      	ldr	r2, [pc, #408]	@ (8003e40 <HAL_DMA_Start_IT+0x1f8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d045      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a65      	ldr	r2, [pc, #404]	@ (8003e44 <HAL_DMA_Start_IT+0x1fc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d040      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a63      	ldr	r2, [pc, #396]	@ (8003e48 <HAL_DMA_Start_IT+0x200>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d03b      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a62      	ldr	r2, [pc, #392]	@ (8003e4c <HAL_DMA_Start_IT+0x204>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d036      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a60      	ldr	r2, [pc, #384]	@ (8003e50 <HAL_DMA_Start_IT+0x208>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d031      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a5f      	ldr	r2, [pc, #380]	@ (8003e54 <HAL_DMA_Start_IT+0x20c>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d02c      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e58 <HAL_DMA_Start_IT+0x210>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d027      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5c      	ldr	r2, [pc, #368]	@ (8003e5c <HAL_DMA_Start_IT+0x214>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e60 <HAL_DMA_Start_IT+0x218>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01d      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a59      	ldr	r2, [pc, #356]	@ (8003e64 <HAL_DMA_Start_IT+0x21c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a57      	ldr	r2, [pc, #348]	@ (8003e68 <HAL_DMA_Start_IT+0x220>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d013      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a56      	ldr	r2, [pc, #344]	@ (8003e6c <HAL_DMA_Start_IT+0x224>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a54      	ldr	r2, [pc, #336]	@ (8003e70 <HAL_DMA_Start_IT+0x228>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a53      	ldr	r2, [pc, #332]	@ (8003e74 <HAL_DMA_Start_IT+0x22c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_DMA_Start_IT+0xee>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a51      	ldr	r2, [pc, #324]	@ (8003e78 <HAL_DMA_Start_IT+0x230>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d108      	bne.n	8003d48 <HAL_DMA_Start_IT+0x100>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
 8003d46:	e007      	b.n	8003d58 <HAL_DMA_Start_IT+0x110>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f001 fea2 	bl	8005aa8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a34      	ldr	r2, [pc, #208]	@ (8003e3c <HAL_DMA_Start_IT+0x1f4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d04a      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a33      	ldr	r2, [pc, #204]	@ (8003e40 <HAL_DMA_Start_IT+0x1f8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d045      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a31      	ldr	r2, [pc, #196]	@ (8003e44 <HAL_DMA_Start_IT+0x1fc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d040      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a30      	ldr	r2, [pc, #192]	@ (8003e48 <HAL_DMA_Start_IT+0x200>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d03b      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a2e      	ldr	r2, [pc, #184]	@ (8003e4c <HAL_DMA_Start_IT+0x204>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d036      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e50 <HAL_DMA_Start_IT+0x208>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d031      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e54 <HAL_DMA_Start_IT+0x20c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d02c      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2a      	ldr	r2, [pc, #168]	@ (8003e58 <HAL_DMA_Start_IT+0x210>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d027      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a28      	ldr	r2, [pc, #160]	@ (8003e5c <HAL_DMA_Start_IT+0x214>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d022      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a27      	ldr	r2, [pc, #156]	@ (8003e60 <HAL_DMA_Start_IT+0x218>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01d      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a25      	ldr	r2, [pc, #148]	@ (8003e64 <HAL_DMA_Start_IT+0x21c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d018      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a24      	ldr	r2, [pc, #144]	@ (8003e68 <HAL_DMA_Start_IT+0x220>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a22      	ldr	r2, [pc, #136]	@ (8003e6c <HAL_DMA_Start_IT+0x224>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a21      	ldr	r2, [pc, #132]	@ (8003e70 <HAL_DMA_Start_IT+0x228>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e74 <HAL_DMA_Start_IT+0x22c>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_DMA_Start_IT+0x1bc>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8003e78 <HAL_DMA_Start_IT+0x230>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d101      	bne.n	8003e08 <HAL_DMA_Start_IT+0x1c0>
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_DMA_Start_IT+0x1c2>
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d036      	beq.n	8003e7c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f023 021e 	bic.w	r2, r3, #30
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0216 	orr.w	r2, r2, #22
 8003e20:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d03e      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0208 	orr.w	r2, r2, #8
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	e035      	b.n	8003ea8 <HAL_DMA_Start_IT+0x260>
 8003e3c:	40020010 	.word	0x40020010
 8003e40:	40020028 	.word	0x40020028
 8003e44:	40020040 	.word	0x40020040
 8003e48:	40020058 	.word	0x40020058
 8003e4c:	40020070 	.word	0x40020070
 8003e50:	40020088 	.word	0x40020088
 8003e54:	400200a0 	.word	0x400200a0
 8003e58:	400200b8 	.word	0x400200b8
 8003e5c:	40020410 	.word	0x40020410
 8003e60:	40020428 	.word	0x40020428
 8003e64:	40020440 	.word	0x40020440
 8003e68:	40020458 	.word	0x40020458
 8003e6c:	40020470 	.word	0x40020470
 8003e70:	40020488 	.word	0x40020488
 8003e74:	400204a0 	.word	0x400204a0
 8003e78:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 020e 	bic.w	r2, r3, #14
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 020a 	orr.w	r2, r2, #10
 8003e8e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0204 	orr.w	r2, r2, #4
 8003ea6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a83      	ldr	r2, [pc, #524]	@ (80040bc <HAL_DMA_Start_IT+0x474>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d072      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a82      	ldr	r2, [pc, #520]	@ (80040c0 <HAL_DMA_Start_IT+0x478>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d06d      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a80      	ldr	r2, [pc, #512]	@ (80040c4 <HAL_DMA_Start_IT+0x47c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d068      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a7f      	ldr	r2, [pc, #508]	@ (80040c8 <HAL_DMA_Start_IT+0x480>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d063      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a7d      	ldr	r2, [pc, #500]	@ (80040cc <HAL_DMA_Start_IT+0x484>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d05e      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a7c      	ldr	r2, [pc, #496]	@ (80040d0 <HAL_DMA_Start_IT+0x488>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d059      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a7a      	ldr	r2, [pc, #488]	@ (80040d4 <HAL_DMA_Start_IT+0x48c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d054      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a79      	ldr	r2, [pc, #484]	@ (80040d8 <HAL_DMA_Start_IT+0x490>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d04f      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a77      	ldr	r2, [pc, #476]	@ (80040dc <HAL_DMA_Start_IT+0x494>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d04a      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a76      	ldr	r2, [pc, #472]	@ (80040e0 <HAL_DMA_Start_IT+0x498>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d045      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a74      	ldr	r2, [pc, #464]	@ (80040e4 <HAL_DMA_Start_IT+0x49c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d040      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a73      	ldr	r2, [pc, #460]	@ (80040e8 <HAL_DMA_Start_IT+0x4a0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d03b      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a71      	ldr	r2, [pc, #452]	@ (80040ec <HAL_DMA_Start_IT+0x4a4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d036      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a70      	ldr	r2, [pc, #448]	@ (80040f0 <HAL_DMA_Start_IT+0x4a8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d031      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a6e      	ldr	r2, [pc, #440]	@ (80040f4 <HAL_DMA_Start_IT+0x4ac>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d02c      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a6d      	ldr	r2, [pc, #436]	@ (80040f8 <HAL_DMA_Start_IT+0x4b0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d027      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80040fc <HAL_DMA_Start_IT+0x4b4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d022      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6a      	ldr	r2, [pc, #424]	@ (8004100 <HAL_DMA_Start_IT+0x4b8>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d01d      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a68      	ldr	r2, [pc, #416]	@ (8004104 <HAL_DMA_Start_IT+0x4bc>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d018      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a67      	ldr	r2, [pc, #412]	@ (8004108 <HAL_DMA_Start_IT+0x4c0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d013      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a65      	ldr	r2, [pc, #404]	@ (800410c <HAL_DMA_Start_IT+0x4c4>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d00e      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a64      	ldr	r2, [pc, #400]	@ (8004110 <HAL_DMA_Start_IT+0x4c8>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d009      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a62      	ldr	r2, [pc, #392]	@ (8004114 <HAL_DMA_Start_IT+0x4cc>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d004      	beq.n	8003f98 <HAL_DMA_Start_IT+0x350>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a61      	ldr	r2, [pc, #388]	@ (8004118 <HAL_DMA_Start_IT+0x4d0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d101      	bne.n	8003f9c <HAL_DMA_Start_IT+0x354>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_DMA_Start_IT+0x356>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01a      	beq.n	8003fd8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fbe:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d007      	beq.n	8003fd8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fd6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a37      	ldr	r2, [pc, #220]	@ (80040bc <HAL_DMA_Start_IT+0x474>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d04a      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a36      	ldr	r2, [pc, #216]	@ (80040c0 <HAL_DMA_Start_IT+0x478>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d045      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a34      	ldr	r2, [pc, #208]	@ (80040c4 <HAL_DMA_Start_IT+0x47c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d040      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a33      	ldr	r2, [pc, #204]	@ (80040c8 <HAL_DMA_Start_IT+0x480>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d03b      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a31      	ldr	r2, [pc, #196]	@ (80040cc <HAL_DMA_Start_IT+0x484>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d036      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a30      	ldr	r2, [pc, #192]	@ (80040d0 <HAL_DMA_Start_IT+0x488>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d031      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2e      	ldr	r2, [pc, #184]	@ (80040d4 <HAL_DMA_Start_IT+0x48c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d02c      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2d      	ldr	r2, [pc, #180]	@ (80040d8 <HAL_DMA_Start_IT+0x490>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d027      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2b      	ldr	r2, [pc, #172]	@ (80040dc <HAL_DMA_Start_IT+0x494>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d022      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2a      	ldr	r2, [pc, #168]	@ (80040e0 <HAL_DMA_Start_IT+0x498>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d01d      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a28      	ldr	r2, [pc, #160]	@ (80040e4 <HAL_DMA_Start_IT+0x49c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d018      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a27      	ldr	r2, [pc, #156]	@ (80040e8 <HAL_DMA_Start_IT+0x4a0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a25      	ldr	r2, [pc, #148]	@ (80040ec <HAL_DMA_Start_IT+0x4a4>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00e      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a24      	ldr	r2, [pc, #144]	@ (80040f0 <HAL_DMA_Start_IT+0x4a8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d009      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a22      	ldr	r2, [pc, #136]	@ (80040f4 <HAL_DMA_Start_IT+0x4ac>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_DMA_Start_IT+0x430>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a21      	ldr	r2, [pc, #132]	@ (80040f8 <HAL_DMA_Start_IT+0x4b0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d108      	bne.n	800408a <HAL_DMA_Start_IT+0x442>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	e012      	b.n	80040b0 <HAL_DMA_Start_IT+0x468>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	e009      	b.n	80040b0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040a2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40020010 	.word	0x40020010
 80040c0:	40020028 	.word	0x40020028
 80040c4:	40020040 	.word	0x40020040
 80040c8:	40020058 	.word	0x40020058
 80040cc:	40020070 	.word	0x40020070
 80040d0:	40020088 	.word	0x40020088
 80040d4:	400200a0 	.word	0x400200a0
 80040d8:	400200b8 	.word	0x400200b8
 80040dc:	40020410 	.word	0x40020410
 80040e0:	40020428 	.word	0x40020428
 80040e4:	40020440 	.word	0x40020440
 80040e8:	40020458 	.word	0x40020458
 80040ec:	40020470 	.word	0x40020470
 80040f0:	40020488 	.word	0x40020488
 80040f4:	400204a0 	.word	0x400204a0
 80040f8:	400204b8 	.word	0x400204b8
 80040fc:	58025408 	.word	0x58025408
 8004100:	5802541c 	.word	0x5802541c
 8004104:	58025430 	.word	0x58025430
 8004108:	58025444 	.word	0x58025444
 800410c:	58025458 	.word	0x58025458
 8004110:	5802546c 	.word	0x5802546c
 8004114:	58025480 	.word	0x58025480
 8004118:	58025494 	.word	0x58025494

0800411c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004124:	f7fd f94a 	bl	80013bc <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e2dc      	b.n	80046ee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d008      	beq.n	8004152 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2280      	movs	r2, #128	@ 0x80
 8004144:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e2cd      	b.n	80046ee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a76      	ldr	r2, [pc, #472]	@ (8004330 <HAL_DMA_Abort+0x214>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d04a      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a74      	ldr	r2, [pc, #464]	@ (8004334 <HAL_DMA_Abort+0x218>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d045      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a73      	ldr	r2, [pc, #460]	@ (8004338 <HAL_DMA_Abort+0x21c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d040      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a71      	ldr	r2, [pc, #452]	@ (800433c <HAL_DMA_Abort+0x220>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d03b      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a70      	ldr	r2, [pc, #448]	@ (8004340 <HAL_DMA_Abort+0x224>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d036      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a6e      	ldr	r2, [pc, #440]	@ (8004344 <HAL_DMA_Abort+0x228>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d031      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6d      	ldr	r2, [pc, #436]	@ (8004348 <HAL_DMA_Abort+0x22c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d02c      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a6b      	ldr	r2, [pc, #428]	@ (800434c <HAL_DMA_Abort+0x230>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d027      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6a      	ldr	r2, [pc, #424]	@ (8004350 <HAL_DMA_Abort+0x234>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d022      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a68      	ldr	r2, [pc, #416]	@ (8004354 <HAL_DMA_Abort+0x238>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01d      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a67      	ldr	r2, [pc, #412]	@ (8004358 <HAL_DMA_Abort+0x23c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d018      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a65      	ldr	r2, [pc, #404]	@ (800435c <HAL_DMA_Abort+0x240>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d013      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a64      	ldr	r2, [pc, #400]	@ (8004360 <HAL_DMA_Abort+0x244>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00e      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a62      	ldr	r2, [pc, #392]	@ (8004364 <HAL_DMA_Abort+0x248>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d009      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a61      	ldr	r2, [pc, #388]	@ (8004368 <HAL_DMA_Abort+0x24c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d004      	beq.n	80041f2 <HAL_DMA_Abort+0xd6>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a5f      	ldr	r2, [pc, #380]	@ (800436c <HAL_DMA_Abort+0x250>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <HAL_DMA_Abort+0xda>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <HAL_DMA_Abort+0xdc>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 021e 	bic.w	r2, r2, #30
 800420a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800421a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e00a      	b.n	800423a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 020e 	bic.w	r2, r2, #14
 8004232:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a3c      	ldr	r2, [pc, #240]	@ (8004330 <HAL_DMA_Abort+0x214>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d072      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a3a      	ldr	r2, [pc, #232]	@ (8004334 <HAL_DMA_Abort+0x218>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d06d      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a39      	ldr	r2, [pc, #228]	@ (8004338 <HAL_DMA_Abort+0x21c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d068      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a37      	ldr	r2, [pc, #220]	@ (800433c <HAL_DMA_Abort+0x220>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d063      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a36      	ldr	r2, [pc, #216]	@ (8004340 <HAL_DMA_Abort+0x224>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d05e      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a34      	ldr	r2, [pc, #208]	@ (8004344 <HAL_DMA_Abort+0x228>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d059      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a33      	ldr	r2, [pc, #204]	@ (8004348 <HAL_DMA_Abort+0x22c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d054      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a31      	ldr	r2, [pc, #196]	@ (800434c <HAL_DMA_Abort+0x230>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d04f      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <HAL_DMA_Abort+0x234>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d04a      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a2e      	ldr	r2, [pc, #184]	@ (8004354 <HAL_DMA_Abort+0x238>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d045      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004358 <HAL_DMA_Abort+0x23c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d040      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2b      	ldr	r2, [pc, #172]	@ (800435c <HAL_DMA_Abort+0x240>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d03b      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004360 <HAL_DMA_Abort+0x244>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d036      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a28      	ldr	r2, [pc, #160]	@ (8004364 <HAL_DMA_Abort+0x248>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d031      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a27      	ldr	r2, [pc, #156]	@ (8004368 <HAL_DMA_Abort+0x24c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d02c      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a25      	ldr	r2, [pc, #148]	@ (800436c <HAL_DMA_Abort+0x250>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d027      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a24      	ldr	r2, [pc, #144]	@ (8004370 <HAL_DMA_Abort+0x254>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d022      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a22      	ldr	r2, [pc, #136]	@ (8004374 <HAL_DMA_Abort+0x258>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d01d      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a21      	ldr	r2, [pc, #132]	@ (8004378 <HAL_DMA_Abort+0x25c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d018      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1f      	ldr	r2, [pc, #124]	@ (800437c <HAL_DMA_Abort+0x260>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a1e      	ldr	r2, [pc, #120]	@ (8004380 <HAL_DMA_Abort+0x264>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d00e      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1c      	ldr	r2, [pc, #112]	@ (8004384 <HAL_DMA_Abort+0x268>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1b      	ldr	r2, [pc, #108]	@ (8004388 <HAL_DMA_Abort+0x26c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d004      	beq.n	800432a <HAL_DMA_Abort+0x20e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a19      	ldr	r2, [pc, #100]	@ (800438c <HAL_DMA_Abort+0x270>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d132      	bne.n	8004390 <HAL_DMA_Abort+0x274>
 800432a:	2301      	movs	r3, #1
 800432c:	e031      	b.n	8004392 <HAL_DMA_Abort+0x276>
 800432e:	bf00      	nop
 8004330:	40020010 	.word	0x40020010
 8004334:	40020028 	.word	0x40020028
 8004338:	40020040 	.word	0x40020040
 800433c:	40020058 	.word	0x40020058
 8004340:	40020070 	.word	0x40020070
 8004344:	40020088 	.word	0x40020088
 8004348:	400200a0 	.word	0x400200a0
 800434c:	400200b8 	.word	0x400200b8
 8004350:	40020410 	.word	0x40020410
 8004354:	40020428 	.word	0x40020428
 8004358:	40020440 	.word	0x40020440
 800435c:	40020458 	.word	0x40020458
 8004360:	40020470 	.word	0x40020470
 8004364:	40020488 	.word	0x40020488
 8004368:	400204a0 	.word	0x400204a0
 800436c:	400204b8 	.word	0x400204b8
 8004370:	58025408 	.word	0x58025408
 8004374:	5802541c 	.word	0x5802541c
 8004378:	58025430 	.word	0x58025430
 800437c:	58025444 	.word	0x58025444
 8004380:	58025458 	.word	0x58025458
 8004384:	5802546c 	.word	0x5802546c
 8004388:	58025480 	.word	0x58025480
 800438c:	58025494 	.word	0x58025494
 8004390:	2300      	movs	r3, #0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a6d      	ldr	r2, [pc, #436]	@ (8004560 <HAL_DMA_Abort+0x444>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d04a      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a6b      	ldr	r2, [pc, #428]	@ (8004564 <HAL_DMA_Abort+0x448>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d045      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a6a      	ldr	r2, [pc, #424]	@ (8004568 <HAL_DMA_Abort+0x44c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d040      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a68      	ldr	r2, [pc, #416]	@ (800456c <HAL_DMA_Abort+0x450>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d03b      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a67      	ldr	r2, [pc, #412]	@ (8004570 <HAL_DMA_Abort+0x454>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d036      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a65      	ldr	r2, [pc, #404]	@ (8004574 <HAL_DMA_Abort+0x458>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d031      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a64      	ldr	r2, [pc, #400]	@ (8004578 <HAL_DMA_Abort+0x45c>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d02c      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a62      	ldr	r2, [pc, #392]	@ (800457c <HAL_DMA_Abort+0x460>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d027      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a61      	ldr	r2, [pc, #388]	@ (8004580 <HAL_DMA_Abort+0x464>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d022      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a5f      	ldr	r2, [pc, #380]	@ (8004584 <HAL_DMA_Abort+0x468>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01d      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a5e      	ldr	r2, [pc, #376]	@ (8004588 <HAL_DMA_Abort+0x46c>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d018      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a5c      	ldr	r2, [pc, #368]	@ (800458c <HAL_DMA_Abort+0x470>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d013      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a5b      	ldr	r2, [pc, #364]	@ (8004590 <HAL_DMA_Abort+0x474>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00e      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a59      	ldr	r2, [pc, #356]	@ (8004594 <HAL_DMA_Abort+0x478>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a58      	ldr	r2, [pc, #352]	@ (8004598 <HAL_DMA_Abort+0x47c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <HAL_DMA_Abort+0x32a>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a56      	ldr	r2, [pc, #344]	@ (800459c <HAL_DMA_Abort+0x480>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d108      	bne.n	8004458 <HAL_DMA_Abort+0x33c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0201 	bic.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e007      	b.n	8004468 <HAL_DMA_Abort+0x34c>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004468:	e013      	b.n	8004492 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800446a:	f7fc ffa7 	bl	80013bc <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b05      	cmp	r3, #5
 8004476:	d90c      	bls.n	8004492 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2203      	movs	r2, #3
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e12d      	b.n	80046ee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e5      	bne.n	800446a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2f      	ldr	r2, [pc, #188]	@ (8004560 <HAL_DMA_Abort+0x444>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d04a      	beq.n	800453e <HAL_DMA_Abort+0x422>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004564 <HAL_DMA_Abort+0x448>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d045      	beq.n	800453e <HAL_DMA_Abort+0x422>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004568 <HAL_DMA_Abort+0x44c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d040      	beq.n	800453e <HAL_DMA_Abort+0x422>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2a      	ldr	r2, [pc, #168]	@ (800456c <HAL_DMA_Abort+0x450>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d03b      	beq.n	800453e <HAL_DMA_Abort+0x422>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a29      	ldr	r2, [pc, #164]	@ (8004570 <HAL_DMA_Abort+0x454>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d036      	beq.n	800453e <HAL_DMA_Abort+0x422>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a27      	ldr	r2, [pc, #156]	@ (8004574 <HAL_DMA_Abort+0x458>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d031      	beq.n	800453e <HAL_DMA_Abort+0x422>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a26      	ldr	r2, [pc, #152]	@ (8004578 <HAL_DMA_Abort+0x45c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d02c      	beq.n	800453e <HAL_DMA_Abort+0x422>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a24      	ldr	r2, [pc, #144]	@ (800457c <HAL_DMA_Abort+0x460>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d027      	beq.n	800453e <HAL_DMA_Abort+0x422>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a23      	ldr	r2, [pc, #140]	@ (8004580 <HAL_DMA_Abort+0x464>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d022      	beq.n	800453e <HAL_DMA_Abort+0x422>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a21      	ldr	r2, [pc, #132]	@ (8004584 <HAL_DMA_Abort+0x468>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01d      	beq.n	800453e <HAL_DMA_Abort+0x422>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a20      	ldr	r2, [pc, #128]	@ (8004588 <HAL_DMA_Abort+0x46c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d018      	beq.n	800453e <HAL_DMA_Abort+0x422>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1e      	ldr	r2, [pc, #120]	@ (800458c <HAL_DMA_Abort+0x470>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d013      	beq.n	800453e <HAL_DMA_Abort+0x422>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1d      	ldr	r2, [pc, #116]	@ (8004590 <HAL_DMA_Abort+0x474>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_DMA_Abort+0x422>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a1b      	ldr	r2, [pc, #108]	@ (8004594 <HAL_DMA_Abort+0x478>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d009      	beq.n	800453e <HAL_DMA_Abort+0x422>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1a      	ldr	r2, [pc, #104]	@ (8004598 <HAL_DMA_Abort+0x47c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_DMA_Abort+0x422>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a18      	ldr	r2, [pc, #96]	@ (800459c <HAL_DMA_Abort+0x480>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d101      	bne.n	8004542 <HAL_DMA_Abort+0x426>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_DMA_Abort+0x428>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d02b      	beq.n	80045a0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	223f      	movs	r2, #63	@ 0x3f
 8004558:	409a      	lsls	r2, r3
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	609a      	str	r2, [r3, #8]
 800455e:	e02a      	b.n	80045b6 <HAL_DMA_Abort+0x49a>
 8004560:	40020010 	.word	0x40020010
 8004564:	40020028 	.word	0x40020028
 8004568:	40020040 	.word	0x40020040
 800456c:	40020058 	.word	0x40020058
 8004570:	40020070 	.word	0x40020070
 8004574:	40020088 	.word	0x40020088
 8004578:	400200a0 	.word	0x400200a0
 800457c:	400200b8 	.word	0x400200b8
 8004580:	40020410 	.word	0x40020410
 8004584:	40020428 	.word	0x40020428
 8004588:	40020440 	.word	0x40020440
 800458c:	40020458 	.word	0x40020458
 8004590:	40020470 	.word	0x40020470
 8004594:	40020488 	.word	0x40020488
 8004598:	400204a0 	.word	0x400204a0
 800459c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	2201      	movs	r2, #1
 80045b0:	409a      	lsls	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a4f      	ldr	r2, [pc, #316]	@ (80046f8 <HAL_DMA_Abort+0x5dc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d072      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a4d      	ldr	r2, [pc, #308]	@ (80046fc <HAL_DMA_Abort+0x5e0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d06d      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004700 <HAL_DMA_Abort+0x5e4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d068      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a4a      	ldr	r2, [pc, #296]	@ (8004704 <HAL_DMA_Abort+0x5e8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d063      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a49      	ldr	r2, [pc, #292]	@ (8004708 <HAL_DMA_Abort+0x5ec>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d05e      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a47      	ldr	r2, [pc, #284]	@ (800470c <HAL_DMA_Abort+0x5f0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d059      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a46      	ldr	r2, [pc, #280]	@ (8004710 <HAL_DMA_Abort+0x5f4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d054      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a44      	ldr	r2, [pc, #272]	@ (8004714 <HAL_DMA_Abort+0x5f8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d04f      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a43      	ldr	r2, [pc, #268]	@ (8004718 <HAL_DMA_Abort+0x5fc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d04a      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a41      	ldr	r2, [pc, #260]	@ (800471c <HAL_DMA_Abort+0x600>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d045      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a40      	ldr	r2, [pc, #256]	@ (8004720 <HAL_DMA_Abort+0x604>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d040      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a3e      	ldr	r2, [pc, #248]	@ (8004724 <HAL_DMA_Abort+0x608>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d03b      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a3d      	ldr	r2, [pc, #244]	@ (8004728 <HAL_DMA_Abort+0x60c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d036      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a3b      	ldr	r2, [pc, #236]	@ (800472c <HAL_DMA_Abort+0x610>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d031      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a3a      	ldr	r2, [pc, #232]	@ (8004730 <HAL_DMA_Abort+0x614>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d02c      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a38      	ldr	r2, [pc, #224]	@ (8004734 <HAL_DMA_Abort+0x618>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d027      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a37      	ldr	r2, [pc, #220]	@ (8004738 <HAL_DMA_Abort+0x61c>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d022      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a35      	ldr	r2, [pc, #212]	@ (800473c <HAL_DMA_Abort+0x620>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01d      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a34      	ldr	r2, [pc, #208]	@ (8004740 <HAL_DMA_Abort+0x624>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d018      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a32      	ldr	r2, [pc, #200]	@ (8004744 <HAL_DMA_Abort+0x628>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a31      	ldr	r2, [pc, #196]	@ (8004748 <HAL_DMA_Abort+0x62c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d00e      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a2f      	ldr	r2, [pc, #188]	@ (800474c <HAL_DMA_Abort+0x630>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d009      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a2e      	ldr	r2, [pc, #184]	@ (8004750 <HAL_DMA_Abort+0x634>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d004      	beq.n	80046a6 <HAL_DMA_Abort+0x58a>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004754 <HAL_DMA_Abort+0x638>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d101      	bne.n	80046aa <HAL_DMA_Abort+0x58e>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_DMA_Abort+0x590>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80046b8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00c      	beq.n	80046dc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046d0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80046da:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40020010 	.word	0x40020010
 80046fc:	40020028 	.word	0x40020028
 8004700:	40020040 	.word	0x40020040
 8004704:	40020058 	.word	0x40020058
 8004708:	40020070 	.word	0x40020070
 800470c:	40020088 	.word	0x40020088
 8004710:	400200a0 	.word	0x400200a0
 8004714:	400200b8 	.word	0x400200b8
 8004718:	40020410 	.word	0x40020410
 800471c:	40020428 	.word	0x40020428
 8004720:	40020440 	.word	0x40020440
 8004724:	40020458 	.word	0x40020458
 8004728:	40020470 	.word	0x40020470
 800472c:	40020488 	.word	0x40020488
 8004730:	400204a0 	.word	0x400204a0
 8004734:	400204b8 	.word	0x400204b8
 8004738:	58025408 	.word	0x58025408
 800473c:	5802541c 	.word	0x5802541c
 8004740:	58025430 	.word	0x58025430
 8004744:	58025444 	.word	0x58025444
 8004748:	58025458 	.word	0x58025458
 800474c:	5802546c 	.word	0x5802546c
 8004750:	58025480 	.word	0x58025480
 8004754:	58025494 	.word	0x58025494

08004758 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e237      	b.n	8004bda <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d004      	beq.n	8004780 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2280      	movs	r2, #128	@ 0x80
 800477a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e22c      	b.n	8004bda <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a5c      	ldr	r2, [pc, #368]	@ (80048f8 <HAL_DMA_Abort_IT+0x1a0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d04a      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a5b      	ldr	r2, [pc, #364]	@ (80048fc <HAL_DMA_Abort_IT+0x1a4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d045      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a59      	ldr	r2, [pc, #356]	@ (8004900 <HAL_DMA_Abort_IT+0x1a8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d040      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a58      	ldr	r2, [pc, #352]	@ (8004904 <HAL_DMA_Abort_IT+0x1ac>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d03b      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a56      	ldr	r2, [pc, #344]	@ (8004908 <HAL_DMA_Abort_IT+0x1b0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d036      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a55      	ldr	r2, [pc, #340]	@ (800490c <HAL_DMA_Abort_IT+0x1b4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d031      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a53      	ldr	r2, [pc, #332]	@ (8004910 <HAL_DMA_Abort_IT+0x1b8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d02c      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a52      	ldr	r2, [pc, #328]	@ (8004914 <HAL_DMA_Abort_IT+0x1bc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d027      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a50      	ldr	r2, [pc, #320]	@ (8004918 <HAL_DMA_Abort_IT+0x1c0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d022      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a4f      	ldr	r2, [pc, #316]	@ (800491c <HAL_DMA_Abort_IT+0x1c4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d01d      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a4d      	ldr	r2, [pc, #308]	@ (8004920 <HAL_DMA_Abort_IT+0x1c8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a4c      	ldr	r2, [pc, #304]	@ (8004924 <HAL_DMA_Abort_IT+0x1cc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004928 <HAL_DMA_Abort_IT+0x1d0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a49      	ldr	r2, [pc, #292]	@ (800492c <HAL_DMA_Abort_IT+0x1d4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a47      	ldr	r2, [pc, #284]	@ (8004930 <HAL_DMA_Abort_IT+0x1d8>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_DMA_Abort_IT+0xc8>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a46      	ldr	r2, [pc, #280]	@ (8004934 <HAL_DMA_Abort_IT+0x1dc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <HAL_DMA_Abort_IT+0xcc>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_DMA_Abort_IT+0xce>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 8086 	beq.w	8004938 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2204      	movs	r2, #4
 8004830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a2f      	ldr	r2, [pc, #188]	@ (80048f8 <HAL_DMA_Abort_IT+0x1a0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d04a      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2e      	ldr	r2, [pc, #184]	@ (80048fc <HAL_DMA_Abort_IT+0x1a4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d045      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a2c      	ldr	r2, [pc, #176]	@ (8004900 <HAL_DMA_Abort_IT+0x1a8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d040      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a2b      	ldr	r2, [pc, #172]	@ (8004904 <HAL_DMA_Abort_IT+0x1ac>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d03b      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a29      	ldr	r2, [pc, #164]	@ (8004908 <HAL_DMA_Abort_IT+0x1b0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d036      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a28      	ldr	r2, [pc, #160]	@ (800490c <HAL_DMA_Abort_IT+0x1b4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d031      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a26      	ldr	r2, [pc, #152]	@ (8004910 <HAL_DMA_Abort_IT+0x1b8>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d02c      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a25      	ldr	r2, [pc, #148]	@ (8004914 <HAL_DMA_Abort_IT+0x1bc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d027      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a23      	ldr	r2, [pc, #140]	@ (8004918 <HAL_DMA_Abort_IT+0x1c0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d022      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a22      	ldr	r2, [pc, #136]	@ (800491c <HAL_DMA_Abort_IT+0x1c4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d01d      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a20      	ldr	r2, [pc, #128]	@ (8004920 <HAL_DMA_Abort_IT+0x1c8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d018      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004924 <HAL_DMA_Abort_IT+0x1cc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d013      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004928 <HAL_DMA_Abort_IT+0x1d0>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a1c      	ldr	r2, [pc, #112]	@ (800492c <HAL_DMA_Abort_IT+0x1d4>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004930 <HAL_DMA_Abort_IT+0x1d8>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_DMA_Abort_IT+0x17c>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a19      	ldr	r2, [pc, #100]	@ (8004934 <HAL_DMA_Abort_IT+0x1dc>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d108      	bne.n	80048e6 <HAL_DMA_Abort_IT+0x18e>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	e178      	b.n	8004bd8 <HAL_DMA_Abort_IT+0x480>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
 80048f6:	e16f      	b.n	8004bd8 <HAL_DMA_Abort_IT+0x480>
 80048f8:	40020010 	.word	0x40020010
 80048fc:	40020028 	.word	0x40020028
 8004900:	40020040 	.word	0x40020040
 8004904:	40020058 	.word	0x40020058
 8004908:	40020070 	.word	0x40020070
 800490c:	40020088 	.word	0x40020088
 8004910:	400200a0 	.word	0x400200a0
 8004914:	400200b8 	.word	0x400200b8
 8004918:	40020410 	.word	0x40020410
 800491c:	40020428 	.word	0x40020428
 8004920:	40020440 	.word	0x40020440
 8004924:	40020458 	.word	0x40020458
 8004928:	40020470 	.word	0x40020470
 800492c:	40020488 	.word	0x40020488
 8004930:	400204a0 	.word	0x400204a0
 8004934:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 020e 	bic.w	r2, r2, #14
 8004946:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a6c      	ldr	r2, [pc, #432]	@ (8004b00 <HAL_DMA_Abort_IT+0x3a8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d04a      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a6b      	ldr	r2, [pc, #428]	@ (8004b04 <HAL_DMA_Abort_IT+0x3ac>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d045      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a69      	ldr	r2, [pc, #420]	@ (8004b08 <HAL_DMA_Abort_IT+0x3b0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d040      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a68      	ldr	r2, [pc, #416]	@ (8004b0c <HAL_DMA_Abort_IT+0x3b4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d03b      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a66      	ldr	r2, [pc, #408]	@ (8004b10 <HAL_DMA_Abort_IT+0x3b8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d036      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a65      	ldr	r2, [pc, #404]	@ (8004b14 <HAL_DMA_Abort_IT+0x3bc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d031      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a63      	ldr	r2, [pc, #396]	@ (8004b18 <HAL_DMA_Abort_IT+0x3c0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d02c      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a62      	ldr	r2, [pc, #392]	@ (8004b1c <HAL_DMA_Abort_IT+0x3c4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d027      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a60      	ldr	r2, [pc, #384]	@ (8004b20 <HAL_DMA_Abort_IT+0x3c8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d022      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a5f      	ldr	r2, [pc, #380]	@ (8004b24 <HAL_DMA_Abort_IT+0x3cc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d01d      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004b28 <HAL_DMA_Abort_IT+0x3d0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d018      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a5c      	ldr	r2, [pc, #368]	@ (8004b2c <HAL_DMA_Abort_IT+0x3d4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d013      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5a      	ldr	r2, [pc, #360]	@ (8004b30 <HAL_DMA_Abort_IT+0x3d8>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00e      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a59      	ldr	r2, [pc, #356]	@ (8004b34 <HAL_DMA_Abort_IT+0x3dc>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d009      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a57      	ldr	r2, [pc, #348]	@ (8004b38 <HAL_DMA_Abort_IT+0x3e0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_DMA_Abort_IT+0x290>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a56      	ldr	r2, [pc, #344]	@ (8004b3c <HAL_DMA_Abort_IT+0x3e4>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d108      	bne.n	80049fa <HAL_DMA_Abort_IT+0x2a2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e007      	b.n	8004a0a <HAL_DMA_Abort_IT+0x2b2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0201 	bic.w	r2, r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b00 <HAL_DMA_Abort_IT+0x3a8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d072      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3a      	ldr	r2, [pc, #232]	@ (8004b04 <HAL_DMA_Abort_IT+0x3ac>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d06d      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a39      	ldr	r2, [pc, #228]	@ (8004b08 <HAL_DMA_Abort_IT+0x3b0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d068      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a37      	ldr	r2, [pc, #220]	@ (8004b0c <HAL_DMA_Abort_IT+0x3b4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d063      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a36      	ldr	r2, [pc, #216]	@ (8004b10 <HAL_DMA_Abort_IT+0x3b8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d05e      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a34      	ldr	r2, [pc, #208]	@ (8004b14 <HAL_DMA_Abort_IT+0x3bc>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d059      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a33      	ldr	r2, [pc, #204]	@ (8004b18 <HAL_DMA_Abort_IT+0x3c0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d054      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a31      	ldr	r2, [pc, #196]	@ (8004b1c <HAL_DMA_Abort_IT+0x3c4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d04f      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a30      	ldr	r2, [pc, #192]	@ (8004b20 <HAL_DMA_Abort_IT+0x3c8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d04a      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2e      	ldr	r2, [pc, #184]	@ (8004b24 <HAL_DMA_Abort_IT+0x3cc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d045      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2d      	ldr	r2, [pc, #180]	@ (8004b28 <HAL_DMA_Abort_IT+0x3d0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d040      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b2c <HAL_DMA_Abort_IT+0x3d4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d03b      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2a      	ldr	r2, [pc, #168]	@ (8004b30 <HAL_DMA_Abort_IT+0x3d8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d036      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a28      	ldr	r2, [pc, #160]	@ (8004b34 <HAL_DMA_Abort_IT+0x3dc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d031      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a27      	ldr	r2, [pc, #156]	@ (8004b38 <HAL_DMA_Abort_IT+0x3e0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d02c      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	@ (8004b3c <HAL_DMA_Abort_IT+0x3e4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d027      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a24      	ldr	r2, [pc, #144]	@ (8004b40 <HAL_DMA_Abort_IT+0x3e8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d022      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <HAL_DMA_Abort_IT+0x3ec>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01d      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	@ (8004b48 <HAL_DMA_Abort_IT+0x3f0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d018      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b4c <HAL_DMA_Abort_IT+0x3f4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d013      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b50 <HAL_DMA_Abort_IT+0x3f8>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00e      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b54 <HAL_DMA_Abort_IT+0x3fc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1b      	ldr	r2, [pc, #108]	@ (8004b58 <HAL_DMA_Abort_IT+0x400>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_DMA_Abort_IT+0x3a2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a19      	ldr	r2, [pc, #100]	@ (8004b5c <HAL_DMA_Abort_IT+0x404>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d132      	bne.n	8004b60 <HAL_DMA_Abort_IT+0x408>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e031      	b.n	8004b62 <HAL_DMA_Abort_IT+0x40a>
 8004afe:	bf00      	nop
 8004b00:	40020010 	.word	0x40020010
 8004b04:	40020028 	.word	0x40020028
 8004b08:	40020040 	.word	0x40020040
 8004b0c:	40020058 	.word	0x40020058
 8004b10:	40020070 	.word	0x40020070
 8004b14:	40020088 	.word	0x40020088
 8004b18:	400200a0 	.word	0x400200a0
 8004b1c:	400200b8 	.word	0x400200b8
 8004b20:	40020410 	.word	0x40020410
 8004b24:	40020428 	.word	0x40020428
 8004b28:	40020440 	.word	0x40020440
 8004b2c:	40020458 	.word	0x40020458
 8004b30:	40020470 	.word	0x40020470
 8004b34:	40020488 	.word	0x40020488
 8004b38:	400204a0 	.word	0x400204a0
 8004b3c:	400204b8 	.word	0x400204b8
 8004b40:	58025408 	.word	0x58025408
 8004b44:	5802541c 	.word	0x5802541c
 8004b48:	58025430 	.word	0x58025430
 8004b4c:	58025444 	.word	0x58025444
 8004b50:	58025458 	.word	0x58025458
 8004b54:	5802546c 	.word	0x5802546c
 8004b58:	58025480 	.word	0x58025480
 8004b5c:	58025494 	.word	0x58025494
 8004b60:	2300      	movs	r3, #0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d028      	beq.n	8004bb8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b74:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b7a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	2201      	movs	r2, #1
 8004b86:	409a      	lsls	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b94:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004bac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bb6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop

08004be4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	@ 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bf0:	4b67      	ldr	r3, [pc, #412]	@ (8004d90 <HAL_DMA_IRQHandler+0x1ac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a67      	ldr	r2, [pc, #412]	@ (8004d94 <HAL_DMA_IRQHandler+0x1b0>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	0a9b      	lsrs	r3, r3, #10
 8004bfc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c02:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c08:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8004d98 <HAL_DMA_IRQHandler+0x1b4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d04a      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a5d      	ldr	r2, [pc, #372]	@ (8004d9c <HAL_DMA_IRQHandler+0x1b8>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d045      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a5c      	ldr	r2, [pc, #368]	@ (8004da0 <HAL_DMA_IRQHandler+0x1bc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d040      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a5a      	ldr	r2, [pc, #360]	@ (8004da4 <HAL_DMA_IRQHandler+0x1c0>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d03b      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a59      	ldr	r2, [pc, #356]	@ (8004da8 <HAL_DMA_IRQHandler+0x1c4>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d036      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a57      	ldr	r2, [pc, #348]	@ (8004dac <HAL_DMA_IRQHandler+0x1c8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d031      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a56      	ldr	r2, [pc, #344]	@ (8004db0 <HAL_DMA_IRQHandler+0x1cc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d02c      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a54      	ldr	r2, [pc, #336]	@ (8004db4 <HAL_DMA_IRQHandler+0x1d0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d027      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a53      	ldr	r2, [pc, #332]	@ (8004db8 <HAL_DMA_IRQHandler+0x1d4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d022      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a51      	ldr	r2, [pc, #324]	@ (8004dbc <HAL_DMA_IRQHandler+0x1d8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01d      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a50      	ldr	r2, [pc, #320]	@ (8004dc0 <HAL_DMA_IRQHandler+0x1dc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d018      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a4e      	ldr	r2, [pc, #312]	@ (8004dc4 <HAL_DMA_IRQHandler+0x1e0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a4d      	ldr	r2, [pc, #308]	@ (8004dc8 <HAL_DMA_IRQHandler+0x1e4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00e      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004dcc <HAL_DMA_IRQHandler+0x1e8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d009      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a4a      	ldr	r2, [pc, #296]	@ (8004dd0 <HAL_DMA_IRQHandler+0x1ec>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d004      	beq.n	8004cb6 <HAL_DMA_IRQHandler+0xd2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a48      	ldr	r2, [pc, #288]	@ (8004dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d101      	bne.n	8004cba <HAL_DMA_IRQHandler+0xd6>
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e000      	b.n	8004cbc <HAL_DMA_IRQHandler+0xd8>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f000 842b 	beq.w	8005518 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	2208      	movs	r2, #8
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80a2 	beq.w	8004e1c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8004d98 <HAL_DMA_IRQHandler+0x1b4>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d04a      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8004d9c <HAL_DMA_IRQHandler+0x1b8>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d045      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8004da0 <HAL_DMA_IRQHandler+0x1bc>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d040      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8004da4 <HAL_DMA_IRQHandler+0x1c0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d03b      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a28      	ldr	r2, [pc, #160]	@ (8004da8 <HAL_DMA_IRQHandler+0x1c4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d036      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a27      	ldr	r2, [pc, #156]	@ (8004dac <HAL_DMA_IRQHandler+0x1c8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d031      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a25      	ldr	r2, [pc, #148]	@ (8004db0 <HAL_DMA_IRQHandler+0x1cc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d02c      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a24      	ldr	r2, [pc, #144]	@ (8004db4 <HAL_DMA_IRQHandler+0x1d0>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d027      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a22      	ldr	r2, [pc, #136]	@ (8004db8 <HAL_DMA_IRQHandler+0x1d4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a21      	ldr	r2, [pc, #132]	@ (8004dbc <HAL_DMA_IRQHandler+0x1d8>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d01d      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc0 <HAL_DMA_IRQHandler+0x1dc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc4 <HAL_DMA_IRQHandler+0x1e0>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc8 <HAL_DMA_IRQHandler+0x1e4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dcc <HAL_DMA_IRQHandler+0x1e8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a19      	ldr	r2, [pc, #100]	@ (8004dd0 <HAL_DMA_IRQHandler+0x1ec>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_DMA_IRQHandler+0x194>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <HAL_DMA_IRQHandler+0x1f0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d12f      	bne.n	8004dd8 <HAL_DMA_IRQHandler+0x1f4>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bf14      	ite	ne
 8004d86:	2301      	movne	r3, #1
 8004d88:	2300      	moveq	r3, #0
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	e02e      	b.n	8004dec <HAL_DMA_IRQHandler+0x208>
 8004d8e:	bf00      	nop
 8004d90:	24000000 	.word	0x24000000
 8004d94:	1b4e81b5 	.word	0x1b4e81b5
 8004d98:	40020010 	.word	0x40020010
 8004d9c:	40020028 	.word	0x40020028
 8004da0:	40020040 	.word	0x40020040
 8004da4:	40020058 	.word	0x40020058
 8004da8:	40020070 	.word	0x40020070
 8004dac:	40020088 	.word	0x40020088
 8004db0:	400200a0 	.word	0x400200a0
 8004db4:	400200b8 	.word	0x400200b8
 8004db8:	40020410 	.word	0x40020410
 8004dbc:	40020428 	.word	0x40020428
 8004dc0:	40020440 	.word	0x40020440
 8004dc4:	40020458 	.word	0x40020458
 8004dc8:	40020470 	.word	0x40020470
 8004dcc:	40020488 	.word	0x40020488
 8004dd0:	400204a0 	.word	0x400204a0
 8004dd4:	400204b8 	.word	0x400204b8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0308 	and.w	r3, r3, #8
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf14      	ite	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	2300      	moveq	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d015      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0204 	bic.w	r2, r2, #4
 8004dfe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2208      	movs	r2, #8
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	f043 0201 	orr.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d06e      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a69      	ldr	r2, [pc, #420]	@ (8004fdc <HAL_DMA_IRQHandler+0x3f8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d04a      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a67      	ldr	r2, [pc, #412]	@ (8004fe0 <HAL_DMA_IRQHandler+0x3fc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d045      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a66      	ldr	r2, [pc, #408]	@ (8004fe4 <HAL_DMA_IRQHandler+0x400>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d040      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a64      	ldr	r2, [pc, #400]	@ (8004fe8 <HAL_DMA_IRQHandler+0x404>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d03b      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a63      	ldr	r2, [pc, #396]	@ (8004fec <HAL_DMA_IRQHandler+0x408>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d036      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a61      	ldr	r2, [pc, #388]	@ (8004ff0 <HAL_DMA_IRQHandler+0x40c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d031      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a60      	ldr	r2, [pc, #384]	@ (8004ff4 <HAL_DMA_IRQHandler+0x410>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d02c      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff8 <HAL_DMA_IRQHandler+0x414>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d027      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a5d      	ldr	r2, [pc, #372]	@ (8004ffc <HAL_DMA_IRQHandler+0x418>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d022      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a5b      	ldr	r2, [pc, #364]	@ (8005000 <HAL_DMA_IRQHandler+0x41c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01d      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a5a      	ldr	r2, [pc, #360]	@ (8005004 <HAL_DMA_IRQHandler+0x420>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d018      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a58      	ldr	r2, [pc, #352]	@ (8005008 <HAL_DMA_IRQHandler+0x424>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a57      	ldr	r2, [pc, #348]	@ (800500c <HAL_DMA_IRQHandler+0x428>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a55      	ldr	r2, [pc, #340]	@ (8005010 <HAL_DMA_IRQHandler+0x42c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a54      	ldr	r2, [pc, #336]	@ (8005014 <HAL_DMA_IRQHandler+0x430>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0x2ee>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a52      	ldr	r2, [pc, #328]	@ (8005018 <HAL_DMA_IRQHandler+0x434>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10a      	bne.n	8004ee8 <HAL_DMA_IRQHandler+0x304>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf14      	ite	ne
 8004ee0:	2301      	movne	r3, #1
 8004ee2:	2300      	moveq	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	e003      	b.n	8004ef0 <HAL_DMA_IRQHandler+0x30c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00d      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	2201      	movs	r2, #1
 8004efe:	409a      	lsls	r2, r3
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f08:	f043 0202 	orr.w	r2, r3, #2
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f14:	f003 031f 	and.w	r3, r3, #31
 8004f18:	2204      	movs	r2, #4
 8004f1a:	409a      	lsls	r2, r3
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 808f 	beq.w	8005044 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004fdc <HAL_DMA_IRQHandler+0x3f8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d04a      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a2a      	ldr	r2, [pc, #168]	@ (8004fe0 <HAL_DMA_IRQHandler+0x3fc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d045      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a29      	ldr	r2, [pc, #164]	@ (8004fe4 <HAL_DMA_IRQHandler+0x400>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d040      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a27      	ldr	r2, [pc, #156]	@ (8004fe8 <HAL_DMA_IRQHandler+0x404>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d03b      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a26      	ldr	r2, [pc, #152]	@ (8004fec <HAL_DMA_IRQHandler+0x408>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d036      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a24      	ldr	r2, [pc, #144]	@ (8004ff0 <HAL_DMA_IRQHandler+0x40c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d031      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a23      	ldr	r2, [pc, #140]	@ (8004ff4 <HAL_DMA_IRQHandler+0x410>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d02c      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a21      	ldr	r2, [pc, #132]	@ (8004ff8 <HAL_DMA_IRQHandler+0x414>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d027      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a20      	ldr	r2, [pc, #128]	@ (8004ffc <HAL_DMA_IRQHandler+0x418>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d022      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1e      	ldr	r2, [pc, #120]	@ (8005000 <HAL_DMA_IRQHandler+0x41c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01d      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8005004 <HAL_DMA_IRQHandler+0x420>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d018      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a1b      	ldr	r2, [pc, #108]	@ (8005008 <HAL_DMA_IRQHandler+0x424>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d013      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800500c <HAL_DMA_IRQHandler+0x428>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a18      	ldr	r2, [pc, #96]	@ (8005010 <HAL_DMA_IRQHandler+0x42c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a17      	ldr	r2, [pc, #92]	@ (8005014 <HAL_DMA_IRQHandler+0x430>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d004      	beq.n	8004fc6 <HAL_DMA_IRQHandler+0x3e2>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a15      	ldr	r2, [pc, #84]	@ (8005018 <HAL_DMA_IRQHandler+0x434>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d12a      	bne.n	800501c <HAL_DMA_IRQHandler+0x438>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	bf14      	ite	ne
 8004fd4:	2301      	movne	r3, #1
 8004fd6:	2300      	moveq	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	e023      	b.n	8005024 <HAL_DMA_IRQHandler+0x440>
 8004fdc:	40020010 	.word	0x40020010
 8004fe0:	40020028 	.word	0x40020028
 8004fe4:	40020040 	.word	0x40020040
 8004fe8:	40020058 	.word	0x40020058
 8004fec:	40020070 	.word	0x40020070
 8004ff0:	40020088 	.word	0x40020088
 8004ff4:	400200a0 	.word	0x400200a0
 8004ff8:	400200b8 	.word	0x400200b8
 8004ffc:	40020410 	.word	0x40020410
 8005000:	40020428 	.word	0x40020428
 8005004:	40020440 	.word	0x40020440
 8005008:	40020458 	.word	0x40020458
 800500c:	40020470 	.word	0x40020470
 8005010:	40020488 	.word	0x40020488
 8005014:	400204a0 	.word	0x400204a0
 8005018:	400204b8 	.word	0x400204b8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2300      	movs	r3, #0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00d      	beq.n	8005044 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800502c:	f003 031f 	and.w	r3, r3, #31
 8005030:	2204      	movs	r2, #4
 8005032:	409a      	lsls	r2, r3
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503c:	f043 0204 	orr.w	r2, r3, #4
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005048:	f003 031f 	and.w	r3, r3, #31
 800504c:	2210      	movs	r2, #16
 800504e:	409a      	lsls	r2, r3
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	4013      	ands	r3, r2
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80a6 	beq.w	80051a6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a85      	ldr	r2, [pc, #532]	@ (8005274 <HAL_DMA_IRQHandler+0x690>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d04a      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a83      	ldr	r2, [pc, #524]	@ (8005278 <HAL_DMA_IRQHandler+0x694>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d045      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a82      	ldr	r2, [pc, #520]	@ (800527c <HAL_DMA_IRQHandler+0x698>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d040      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a80      	ldr	r2, [pc, #512]	@ (8005280 <HAL_DMA_IRQHandler+0x69c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d03b      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a7f      	ldr	r2, [pc, #508]	@ (8005284 <HAL_DMA_IRQHandler+0x6a0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d036      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a7d      	ldr	r2, [pc, #500]	@ (8005288 <HAL_DMA_IRQHandler+0x6a4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d031      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a7c      	ldr	r2, [pc, #496]	@ (800528c <HAL_DMA_IRQHandler+0x6a8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d02c      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a7a      	ldr	r2, [pc, #488]	@ (8005290 <HAL_DMA_IRQHandler+0x6ac>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d027      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a79      	ldr	r2, [pc, #484]	@ (8005294 <HAL_DMA_IRQHandler+0x6b0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d022      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a77      	ldr	r2, [pc, #476]	@ (8005298 <HAL_DMA_IRQHandler+0x6b4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01d      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a76      	ldr	r2, [pc, #472]	@ (800529c <HAL_DMA_IRQHandler+0x6b8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d018      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a74      	ldr	r2, [pc, #464]	@ (80052a0 <HAL_DMA_IRQHandler+0x6bc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d013      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a73      	ldr	r2, [pc, #460]	@ (80052a4 <HAL_DMA_IRQHandler+0x6c0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00e      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a71      	ldr	r2, [pc, #452]	@ (80052a8 <HAL_DMA_IRQHandler+0x6c4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d009      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a70      	ldr	r2, [pc, #448]	@ (80052ac <HAL_DMA_IRQHandler+0x6c8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d004      	beq.n	80050fa <HAL_DMA_IRQHandler+0x516>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a6e      	ldr	r2, [pc, #440]	@ (80052b0 <HAL_DMA_IRQHandler+0x6cc>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d10a      	bne.n	8005110 <HAL_DMA_IRQHandler+0x52c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e009      	b.n	8005124 <HAL_DMA_IRQHandler+0x540>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d03e      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	2210      	movs	r2, #16
 8005132:	409a      	lsls	r2, r3
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d024      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	4798      	blx	r3
 8005164:	e01f      	b.n	80051a6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800516a:	2b00      	cmp	r3, #0
 800516c:	d01b      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	4798      	blx	r3
 8005176:	e016      	b.n	80051a6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005182:	2b00      	cmp	r3, #0
 8005184:	d107      	bne.n	8005196 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0208 	bic.w	r2, r2, #8
 8005194:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051aa:	f003 031f 	and.w	r3, r3, #31
 80051ae:	2220      	movs	r2, #32
 80051b0:	409a      	lsls	r2, r3
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8110 	beq.w	80053dc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005274 <HAL_DMA_IRQHandler+0x690>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d04a      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <HAL_DMA_IRQHandler+0x694>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d045      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a29      	ldr	r2, [pc, #164]	@ (800527c <HAL_DMA_IRQHandler+0x698>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d040      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a28      	ldr	r2, [pc, #160]	@ (8005280 <HAL_DMA_IRQHandler+0x69c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d03b      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a26      	ldr	r2, [pc, #152]	@ (8005284 <HAL_DMA_IRQHandler+0x6a0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d036      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a25      	ldr	r2, [pc, #148]	@ (8005288 <HAL_DMA_IRQHandler+0x6a4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d031      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a23      	ldr	r2, [pc, #140]	@ (800528c <HAL_DMA_IRQHandler+0x6a8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d02c      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a22      	ldr	r2, [pc, #136]	@ (8005290 <HAL_DMA_IRQHandler+0x6ac>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d027      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a20      	ldr	r2, [pc, #128]	@ (8005294 <HAL_DMA_IRQHandler+0x6b0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d022      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1f      	ldr	r2, [pc, #124]	@ (8005298 <HAL_DMA_IRQHandler+0x6b4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d01d      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a1d      	ldr	r2, [pc, #116]	@ (800529c <HAL_DMA_IRQHandler+0x6b8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d018      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a1c      	ldr	r2, [pc, #112]	@ (80052a0 <HAL_DMA_IRQHandler+0x6bc>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1a      	ldr	r2, [pc, #104]	@ (80052a4 <HAL_DMA_IRQHandler+0x6c0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a19      	ldr	r2, [pc, #100]	@ (80052a8 <HAL_DMA_IRQHandler+0x6c4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a17      	ldr	r2, [pc, #92]	@ (80052ac <HAL_DMA_IRQHandler+0x6c8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_DMA_IRQHandler+0x678>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a16      	ldr	r2, [pc, #88]	@ (80052b0 <HAL_DMA_IRQHandler+0x6cc>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d12b      	bne.n	80052b4 <HAL_DMA_IRQHandler+0x6d0>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	e02a      	b.n	80052c8 <HAL_DMA_IRQHandler+0x6e4>
 8005272:	bf00      	nop
 8005274:	40020010 	.word	0x40020010
 8005278:	40020028 	.word	0x40020028
 800527c:	40020040 	.word	0x40020040
 8005280:	40020058 	.word	0x40020058
 8005284:	40020070 	.word	0x40020070
 8005288:	40020088 	.word	0x40020088
 800528c:	400200a0 	.word	0x400200a0
 8005290:	400200b8 	.word	0x400200b8
 8005294:	40020410 	.word	0x40020410
 8005298:	40020428 	.word	0x40020428
 800529c:	40020440 	.word	0x40020440
 80052a0:	40020458 	.word	0x40020458
 80052a4:	40020470 	.word	0x40020470
 80052a8:	40020488 	.word	0x40020488
 80052ac:	400204a0 	.word	0x400204a0
 80052b0:	400204b8 	.word	0x400204b8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bf14      	ite	ne
 80052c2:	2301      	movne	r3, #1
 80052c4:	2300      	moveq	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8087 	beq.w	80053dc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	2220      	movs	r2, #32
 80052d8:	409a      	lsls	r2, r3
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d139      	bne.n	800535e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0216 	bic.w	r2, r2, #22
 80052f8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695a      	ldr	r2, [r3, #20]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005308:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	2b00      	cmp	r3, #0
 8005310:	d103      	bne.n	800531a <HAL_DMA_IRQHandler+0x736>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0208 	bic.w	r2, r2, #8
 8005328:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	223f      	movs	r2, #63	@ 0x3f
 8005334:	409a      	lsls	r2, r3
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 8382 	beq.w	8005a58 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
          }
          return;
 800535c:	e37c      	b.n	8005a58 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d018      	beq.n	800539e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d108      	bne.n	800538c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537e:	2b00      	cmp	r3, #0
 8005380:	d02c      	beq.n	80053dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
 800538a:	e027      	b.n	80053dc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d023      	beq.n	80053dc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
 800539c:	e01e      	b.n	80053dc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0210 	bic.w	r2, r2, #16
 80053ba:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 833e 	beq.w	8005a62 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 8088 	beq.w	8005504 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2204      	movs	r2, #4
 80053f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a89      	ldr	r2, [pc, #548]	@ (8005628 <HAL_DMA_IRQHandler+0xa44>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d04a      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a88      	ldr	r2, [pc, #544]	@ (800562c <HAL_DMA_IRQHandler+0xa48>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d045      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a86      	ldr	r2, [pc, #536]	@ (8005630 <HAL_DMA_IRQHandler+0xa4c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d040      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a85      	ldr	r2, [pc, #532]	@ (8005634 <HAL_DMA_IRQHandler+0xa50>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d03b      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a83      	ldr	r2, [pc, #524]	@ (8005638 <HAL_DMA_IRQHandler+0xa54>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d036      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a82      	ldr	r2, [pc, #520]	@ (800563c <HAL_DMA_IRQHandler+0xa58>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d031      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a80      	ldr	r2, [pc, #512]	@ (8005640 <HAL_DMA_IRQHandler+0xa5c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d02c      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a7f      	ldr	r2, [pc, #508]	@ (8005644 <HAL_DMA_IRQHandler+0xa60>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d027      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a7d      	ldr	r2, [pc, #500]	@ (8005648 <HAL_DMA_IRQHandler+0xa64>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a7c      	ldr	r2, [pc, #496]	@ (800564c <HAL_DMA_IRQHandler+0xa68>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d01d      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a7a      	ldr	r2, [pc, #488]	@ (8005650 <HAL_DMA_IRQHandler+0xa6c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a79      	ldr	r2, [pc, #484]	@ (8005654 <HAL_DMA_IRQHandler+0xa70>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a77      	ldr	r2, [pc, #476]	@ (8005658 <HAL_DMA_IRQHandler+0xa74>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a76      	ldr	r2, [pc, #472]	@ (800565c <HAL_DMA_IRQHandler+0xa78>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a74      	ldr	r2, [pc, #464]	@ (8005660 <HAL_DMA_IRQHandler+0xa7c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_DMA_IRQHandler+0x8b8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a73      	ldr	r2, [pc, #460]	@ (8005664 <HAL_DMA_IRQHandler+0xa80>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d108      	bne.n	80054ae <HAL_DMA_IRQHandler+0x8ca>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	e007      	b.n	80054be <HAL_DMA_IRQHandler+0x8da>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3301      	adds	r3, #1
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d307      	bcc.n	80054da <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1f2      	bne.n	80054be <HAL_DMA_IRQHandler+0x8da>
 80054d8:	e000      	b.n	80054dc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80054da:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d004      	beq.n	80054f4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2203      	movs	r2, #3
 80054ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80054f2:	e003      	b.n	80054fc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 82aa 	beq.w	8005a62 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	4798      	blx	r3
 8005516:	e2a4      	b.n	8005a62 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a52      	ldr	r2, [pc, #328]	@ (8005668 <HAL_DMA_IRQHandler+0xa84>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d04a      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a51      	ldr	r2, [pc, #324]	@ (800566c <HAL_DMA_IRQHandler+0xa88>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d045      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a4f      	ldr	r2, [pc, #316]	@ (8005670 <HAL_DMA_IRQHandler+0xa8c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d040      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a4e      	ldr	r2, [pc, #312]	@ (8005674 <HAL_DMA_IRQHandler+0xa90>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d03b      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a4c      	ldr	r2, [pc, #304]	@ (8005678 <HAL_DMA_IRQHandler+0xa94>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d036      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a4b      	ldr	r2, [pc, #300]	@ (800567c <HAL_DMA_IRQHandler+0xa98>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d031      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a49      	ldr	r2, [pc, #292]	@ (8005680 <HAL_DMA_IRQHandler+0xa9c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d02c      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a48      	ldr	r2, [pc, #288]	@ (8005684 <HAL_DMA_IRQHandler+0xaa0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d027      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a46      	ldr	r2, [pc, #280]	@ (8005688 <HAL_DMA_IRQHandler+0xaa4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d022      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a45      	ldr	r2, [pc, #276]	@ (800568c <HAL_DMA_IRQHandler+0xaa8>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d01d      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a43      	ldr	r2, [pc, #268]	@ (8005690 <HAL_DMA_IRQHandler+0xaac>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d018      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a42      	ldr	r2, [pc, #264]	@ (8005694 <HAL_DMA_IRQHandler+0xab0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a40      	ldr	r2, [pc, #256]	@ (8005698 <HAL_DMA_IRQHandler+0xab4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a3f      	ldr	r2, [pc, #252]	@ (800569c <HAL_DMA_IRQHandler+0xab8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d009      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a3d      	ldr	r2, [pc, #244]	@ (80056a0 <HAL_DMA_IRQHandler+0xabc>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_DMA_IRQHandler+0x9d4>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a3c      	ldr	r2, [pc, #240]	@ (80056a4 <HAL_DMA_IRQHandler+0xac0>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d101      	bne.n	80055bc <HAL_DMA_IRQHandler+0x9d8>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_DMA_IRQHandler+0x9da>
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 824f 	beq.w	8005a62 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d0:	f003 031f 	and.w	r3, r3, #31
 80055d4:	2204      	movs	r2, #4
 80055d6:	409a      	lsls	r2, r3
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80dd 	beq.w	800579c <HAL_DMA_IRQHandler+0xbb8>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80d7 	beq.w	800579c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f2:	f003 031f 	and.w	r3, r3, #31
 80055f6:	2204      	movs	r2, #4
 80055f8:	409a      	lsls	r2, r3
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d059      	beq.n	80056bc <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d14a      	bne.n	80056a8 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8220 	beq.w	8005a5c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005624:	e21a      	b.n	8005a5c <HAL_DMA_IRQHandler+0xe78>
 8005626:	bf00      	nop
 8005628:	40020010 	.word	0x40020010
 800562c:	40020028 	.word	0x40020028
 8005630:	40020040 	.word	0x40020040
 8005634:	40020058 	.word	0x40020058
 8005638:	40020070 	.word	0x40020070
 800563c:	40020088 	.word	0x40020088
 8005640:	400200a0 	.word	0x400200a0
 8005644:	400200b8 	.word	0x400200b8
 8005648:	40020410 	.word	0x40020410
 800564c:	40020428 	.word	0x40020428
 8005650:	40020440 	.word	0x40020440
 8005654:	40020458 	.word	0x40020458
 8005658:	40020470 	.word	0x40020470
 800565c:	40020488 	.word	0x40020488
 8005660:	400204a0 	.word	0x400204a0
 8005664:	400204b8 	.word	0x400204b8
 8005668:	48022c08 	.word	0x48022c08
 800566c:	48022c1c 	.word	0x48022c1c
 8005670:	48022c30 	.word	0x48022c30
 8005674:	48022c44 	.word	0x48022c44
 8005678:	48022c58 	.word	0x48022c58
 800567c:	48022c6c 	.word	0x48022c6c
 8005680:	48022c80 	.word	0x48022c80
 8005684:	48022c94 	.word	0x48022c94
 8005688:	58025408 	.word	0x58025408
 800568c:	5802541c 	.word	0x5802541c
 8005690:	58025430 	.word	0x58025430
 8005694:	58025444 	.word	0x58025444
 8005698:	58025458 	.word	0x58025458
 800569c:	5802546c 	.word	0x5802546c
 80056a0:	58025480 	.word	0x58025480
 80056a4:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 81d5 	beq.w	8005a5c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056ba:	e1cf      	b.n	8005a5c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d160      	bne.n	8005788 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a7f      	ldr	r2, [pc, #508]	@ (80058c8 <HAL_DMA_IRQHandler+0xce4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d04a      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a7d      	ldr	r2, [pc, #500]	@ (80058cc <HAL_DMA_IRQHandler+0xce8>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d045      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a7c      	ldr	r2, [pc, #496]	@ (80058d0 <HAL_DMA_IRQHandler+0xcec>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d040      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a7a      	ldr	r2, [pc, #488]	@ (80058d4 <HAL_DMA_IRQHandler+0xcf0>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d03b      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a79      	ldr	r2, [pc, #484]	@ (80058d8 <HAL_DMA_IRQHandler+0xcf4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d036      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a77      	ldr	r2, [pc, #476]	@ (80058dc <HAL_DMA_IRQHandler+0xcf8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a76      	ldr	r2, [pc, #472]	@ (80058e0 <HAL_DMA_IRQHandler+0xcfc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d02c      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a74      	ldr	r2, [pc, #464]	@ (80058e4 <HAL_DMA_IRQHandler+0xd00>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d027      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a73      	ldr	r2, [pc, #460]	@ (80058e8 <HAL_DMA_IRQHandler+0xd04>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a71      	ldr	r2, [pc, #452]	@ (80058ec <HAL_DMA_IRQHandler+0xd08>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a70      	ldr	r2, [pc, #448]	@ (80058f0 <HAL_DMA_IRQHandler+0xd0c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a6e      	ldr	r2, [pc, #440]	@ (80058f4 <HAL_DMA_IRQHandler+0xd10>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a6d      	ldr	r2, [pc, #436]	@ (80058f8 <HAL_DMA_IRQHandler+0xd14>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a6b      	ldr	r2, [pc, #428]	@ (80058fc <HAL_DMA_IRQHandler+0xd18>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a6a      	ldr	r2, [pc, #424]	@ (8005900 <HAL_DMA_IRQHandler+0xd1c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_DMA_IRQHandler+0xb82>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a68      	ldr	r2, [pc, #416]	@ (8005904 <HAL_DMA_IRQHandler+0xd20>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d108      	bne.n	8005778 <HAL_DMA_IRQHandler+0xb94>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0208 	bic.w	r2, r2, #8
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	e007      	b.n	8005788 <HAL_DMA_IRQHandler+0xba4>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0204 	bic.w	r2, r2, #4
 8005786:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8165 	beq.w	8005a5c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800579a:	e15f      	b.n	8005a5c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a0:	f003 031f 	and.w	r3, r3, #31
 80057a4:	2202      	movs	r2, #2
 80057a6:	409a      	lsls	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 80c5 	beq.w	800593c <HAL_DMA_IRQHandler+0xd58>
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80bf 	beq.w	800593c <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2202      	movs	r2, #2
 80057c8:	409a      	lsls	r2, r3
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d018      	beq.n	800580a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d109      	bne.n	80057f6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 813a 	beq.w	8005a60 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057f4:	e134      	b.n	8005a60 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8130 	beq.w	8005a60 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005808:	e12a      	b.n	8005a60 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b00      	cmp	r3, #0
 8005812:	f040 8089 	bne.w	8005928 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2b      	ldr	r2, [pc, #172]	@ (80058c8 <HAL_DMA_IRQHandler+0xce4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d04a      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a29      	ldr	r2, [pc, #164]	@ (80058cc <HAL_DMA_IRQHandler+0xce8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d045      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a28      	ldr	r2, [pc, #160]	@ (80058d0 <HAL_DMA_IRQHandler+0xcec>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d040      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a26      	ldr	r2, [pc, #152]	@ (80058d4 <HAL_DMA_IRQHandler+0xcf0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d03b      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a25      	ldr	r2, [pc, #148]	@ (80058d8 <HAL_DMA_IRQHandler+0xcf4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d036      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a23      	ldr	r2, [pc, #140]	@ (80058dc <HAL_DMA_IRQHandler+0xcf8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d031      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a22      	ldr	r2, [pc, #136]	@ (80058e0 <HAL_DMA_IRQHandler+0xcfc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d02c      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a20      	ldr	r2, [pc, #128]	@ (80058e4 <HAL_DMA_IRQHandler+0xd00>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d027      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a1f      	ldr	r2, [pc, #124]	@ (80058e8 <HAL_DMA_IRQHandler+0xd04>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d022      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a1d      	ldr	r2, [pc, #116]	@ (80058ec <HAL_DMA_IRQHandler+0xd08>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d01d      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a1c      	ldr	r2, [pc, #112]	@ (80058f0 <HAL_DMA_IRQHandler+0xd0c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d018      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1a      	ldr	r2, [pc, #104]	@ (80058f4 <HAL_DMA_IRQHandler+0xd10>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d013      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a19      	ldr	r2, [pc, #100]	@ (80058f8 <HAL_DMA_IRQHandler+0xd14>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00e      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a17      	ldr	r2, [pc, #92]	@ (80058fc <HAL_DMA_IRQHandler+0xd18>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d009      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a16      	ldr	r2, [pc, #88]	@ (8005900 <HAL_DMA_IRQHandler+0xd1c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d004      	beq.n	80058b6 <HAL_DMA_IRQHandler+0xcd2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a14      	ldr	r2, [pc, #80]	@ (8005904 <HAL_DMA_IRQHandler+0xd20>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d128      	bne.n	8005908 <HAL_DMA_IRQHandler+0xd24>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0214 	bic.w	r2, r2, #20
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	e027      	b.n	8005918 <HAL_DMA_IRQHandler+0xd34>
 80058c8:	40020010 	.word	0x40020010
 80058cc:	40020028 	.word	0x40020028
 80058d0:	40020040 	.word	0x40020040
 80058d4:	40020058 	.word	0x40020058
 80058d8:	40020070 	.word	0x40020070
 80058dc:	40020088 	.word	0x40020088
 80058e0:	400200a0 	.word	0x400200a0
 80058e4:	400200b8 	.word	0x400200b8
 80058e8:	40020410 	.word	0x40020410
 80058ec:	40020428 	.word	0x40020428
 80058f0:	40020440 	.word	0x40020440
 80058f4:	40020458 	.word	0x40020458
 80058f8:	40020470 	.word	0x40020470
 80058fc:	40020488 	.word	0x40020488
 8005900:	400204a0 	.word	0x400204a0
 8005904:	400204b8 	.word	0x400204b8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 020a 	bic.w	r2, r2, #10
 8005916:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 8097 	beq.w	8005a60 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800593a:	e091      	b.n	8005a60 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2208      	movs	r2, #8
 8005946:	409a      	lsls	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8088 	beq.w	8005a62 <HAL_DMA_IRQHandler+0xe7e>
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8082 	beq.w	8005a62 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a41      	ldr	r2, [pc, #260]	@ (8005a68 <HAL_DMA_IRQHandler+0xe84>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d04a      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a6c <HAL_DMA_IRQHandler+0xe88>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d045      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a3e      	ldr	r2, [pc, #248]	@ (8005a70 <HAL_DMA_IRQHandler+0xe8c>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d040      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a3c      	ldr	r2, [pc, #240]	@ (8005a74 <HAL_DMA_IRQHandler+0xe90>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d03b      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a3b      	ldr	r2, [pc, #236]	@ (8005a78 <HAL_DMA_IRQHandler+0xe94>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d036      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a39      	ldr	r2, [pc, #228]	@ (8005a7c <HAL_DMA_IRQHandler+0xe98>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d031      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a38      	ldr	r2, [pc, #224]	@ (8005a80 <HAL_DMA_IRQHandler+0xe9c>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d02c      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a36      	ldr	r2, [pc, #216]	@ (8005a84 <HAL_DMA_IRQHandler+0xea0>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d027      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a35      	ldr	r2, [pc, #212]	@ (8005a88 <HAL_DMA_IRQHandler+0xea4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d022      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a33      	ldr	r2, [pc, #204]	@ (8005a8c <HAL_DMA_IRQHandler+0xea8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01d      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a32      	ldr	r2, [pc, #200]	@ (8005a90 <HAL_DMA_IRQHandler+0xeac>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d018      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a30      	ldr	r2, [pc, #192]	@ (8005a94 <HAL_DMA_IRQHandler+0xeb0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d013      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2f      	ldr	r2, [pc, #188]	@ (8005a98 <HAL_DMA_IRQHandler+0xeb4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d00e      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a2d      	ldr	r2, [pc, #180]	@ (8005a9c <HAL_DMA_IRQHandler+0xeb8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d009      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa0 <HAL_DMA_IRQHandler+0xebc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d004      	beq.n	80059fe <HAL_DMA_IRQHandler+0xe1a>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a2a      	ldr	r2, [pc, #168]	@ (8005aa4 <HAL_DMA_IRQHandler+0xec0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d108      	bne.n	8005a10 <HAL_DMA_IRQHandler+0xe2c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 021c 	bic.w	r2, r2, #28
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	e007      	b.n	8005a20 <HAL_DMA_IRQHandler+0xe3c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 020e 	bic.w	r2, r2, #14
 8005a1e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	2201      	movs	r2, #1
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	4798      	blx	r3
 8005a56:	e004      	b.n	8005a62 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005a58:	bf00      	nop
 8005a5a:	e002      	b.n	8005a62 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a5c:	bf00      	nop
 8005a5e:	e000      	b.n	8005a62 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a60:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a62:	3728      	adds	r7, #40	@ 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40020010 	.word	0x40020010
 8005a6c:	40020028 	.word	0x40020028
 8005a70:	40020040 	.word	0x40020040
 8005a74:	40020058 	.word	0x40020058
 8005a78:	40020070 	.word	0x40020070
 8005a7c:	40020088 	.word	0x40020088
 8005a80:	400200a0 	.word	0x400200a0
 8005a84:	400200b8 	.word	0x400200b8
 8005a88:	40020410 	.word	0x40020410
 8005a8c:	40020428 	.word	0x40020428
 8005a90:	40020440 	.word	0x40020440
 8005a94:	40020458 	.word	0x40020458
 8005a98:	40020470 	.word	0x40020470
 8005a9c:	40020488 	.word	0x40020488
 8005aa0:	400204a0 	.word	0x400204a0
 8005aa4:	400204b8 	.word	0x400204b8

08005aa8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b087      	sub	sp, #28
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aba:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ac0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a7f      	ldr	r2, [pc, #508]	@ (8005cc4 <DMA_SetConfig+0x21c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d072      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a7d      	ldr	r2, [pc, #500]	@ (8005cc8 <DMA_SetConfig+0x220>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d06d      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a7c      	ldr	r2, [pc, #496]	@ (8005ccc <DMA_SetConfig+0x224>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d068      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a7a      	ldr	r2, [pc, #488]	@ (8005cd0 <DMA_SetConfig+0x228>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d063      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a79      	ldr	r2, [pc, #484]	@ (8005cd4 <DMA_SetConfig+0x22c>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d05e      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a77      	ldr	r2, [pc, #476]	@ (8005cd8 <DMA_SetConfig+0x230>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d059      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a76      	ldr	r2, [pc, #472]	@ (8005cdc <DMA_SetConfig+0x234>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d054      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a74      	ldr	r2, [pc, #464]	@ (8005ce0 <DMA_SetConfig+0x238>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d04f      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a73      	ldr	r2, [pc, #460]	@ (8005ce4 <DMA_SetConfig+0x23c>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d04a      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a71      	ldr	r2, [pc, #452]	@ (8005ce8 <DMA_SetConfig+0x240>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d045      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a70      	ldr	r2, [pc, #448]	@ (8005cec <DMA_SetConfig+0x244>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d040      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a6e      	ldr	r2, [pc, #440]	@ (8005cf0 <DMA_SetConfig+0x248>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d03b      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a6d      	ldr	r2, [pc, #436]	@ (8005cf4 <DMA_SetConfig+0x24c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d036      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a6b      	ldr	r2, [pc, #428]	@ (8005cf8 <DMA_SetConfig+0x250>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d031      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a6a      	ldr	r2, [pc, #424]	@ (8005cfc <DMA_SetConfig+0x254>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d02c      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a68      	ldr	r2, [pc, #416]	@ (8005d00 <DMA_SetConfig+0x258>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d027      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a67      	ldr	r2, [pc, #412]	@ (8005d04 <DMA_SetConfig+0x25c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d022      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a65      	ldr	r2, [pc, #404]	@ (8005d08 <DMA_SetConfig+0x260>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d01d      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a64      	ldr	r2, [pc, #400]	@ (8005d0c <DMA_SetConfig+0x264>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d018      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a62      	ldr	r2, [pc, #392]	@ (8005d10 <DMA_SetConfig+0x268>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a61      	ldr	r2, [pc, #388]	@ (8005d14 <DMA_SetConfig+0x26c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00e      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a5f      	ldr	r2, [pc, #380]	@ (8005d18 <DMA_SetConfig+0x270>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d009      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a5e      	ldr	r2, [pc, #376]	@ (8005d1c <DMA_SetConfig+0x274>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d004      	beq.n	8005bb2 <DMA_SetConfig+0x10a>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a5c      	ldr	r2, [pc, #368]	@ (8005d20 <DMA_SetConfig+0x278>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d101      	bne.n	8005bb6 <DMA_SetConfig+0x10e>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <DMA_SetConfig+0x110>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00d      	beq.n	8005bd8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005bc4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d004      	beq.n	8005bd8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005bd6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a39      	ldr	r2, [pc, #228]	@ (8005cc4 <DMA_SetConfig+0x21c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d04a      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a38      	ldr	r2, [pc, #224]	@ (8005cc8 <DMA_SetConfig+0x220>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d045      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a36      	ldr	r2, [pc, #216]	@ (8005ccc <DMA_SetConfig+0x224>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d040      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a35      	ldr	r2, [pc, #212]	@ (8005cd0 <DMA_SetConfig+0x228>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d03b      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a33      	ldr	r2, [pc, #204]	@ (8005cd4 <DMA_SetConfig+0x22c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d036      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a32      	ldr	r2, [pc, #200]	@ (8005cd8 <DMA_SetConfig+0x230>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d031      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a30      	ldr	r2, [pc, #192]	@ (8005cdc <DMA_SetConfig+0x234>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d02c      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a2f      	ldr	r2, [pc, #188]	@ (8005ce0 <DMA_SetConfig+0x238>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d027      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ce4 <DMA_SetConfig+0x23c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d022      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <DMA_SetConfig+0x240>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d01d      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2a      	ldr	r2, [pc, #168]	@ (8005cec <DMA_SetConfig+0x244>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d018      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a29      	ldr	r2, [pc, #164]	@ (8005cf0 <DMA_SetConfig+0x248>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d013      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a27      	ldr	r2, [pc, #156]	@ (8005cf4 <DMA_SetConfig+0x24c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d00e      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a26      	ldr	r2, [pc, #152]	@ (8005cf8 <DMA_SetConfig+0x250>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a24      	ldr	r2, [pc, #144]	@ (8005cfc <DMA_SetConfig+0x254>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <DMA_SetConfig+0x1d0>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a23      	ldr	r2, [pc, #140]	@ (8005d00 <DMA_SetConfig+0x258>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <DMA_SetConfig+0x1d4>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <DMA_SetConfig+0x1d6>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d059      	beq.n	8005d36 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	223f      	movs	r2, #63	@ 0x3f
 8005c8c:	409a      	lsls	r2, r3
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005ca0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b40      	cmp	r3, #64	@ 0x40
 8005cb0:	d138      	bne.n	8005d24 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cc2:	e0ae      	b.n	8005e22 <DMA_SetConfig+0x37a>
 8005cc4:	40020010 	.word	0x40020010
 8005cc8:	40020028 	.word	0x40020028
 8005ccc:	40020040 	.word	0x40020040
 8005cd0:	40020058 	.word	0x40020058
 8005cd4:	40020070 	.word	0x40020070
 8005cd8:	40020088 	.word	0x40020088
 8005cdc:	400200a0 	.word	0x400200a0
 8005ce0:	400200b8 	.word	0x400200b8
 8005ce4:	40020410 	.word	0x40020410
 8005ce8:	40020428 	.word	0x40020428
 8005cec:	40020440 	.word	0x40020440
 8005cf0:	40020458 	.word	0x40020458
 8005cf4:	40020470 	.word	0x40020470
 8005cf8:	40020488 	.word	0x40020488
 8005cfc:	400204a0 	.word	0x400204a0
 8005d00:	400204b8 	.word	0x400204b8
 8005d04:	58025408 	.word	0x58025408
 8005d08:	5802541c 	.word	0x5802541c
 8005d0c:	58025430 	.word	0x58025430
 8005d10:	58025444 	.word	0x58025444
 8005d14:	58025458 	.word	0x58025458
 8005d18:	5802546c 	.word	0x5802546c
 8005d1c:	58025480 	.word	0x58025480
 8005d20:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]
}
 8005d34:	e075      	b.n	8005e22 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a3d      	ldr	r2, [pc, #244]	@ (8005e30 <DMA_SetConfig+0x388>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d04a      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a3b      	ldr	r2, [pc, #236]	@ (8005e34 <DMA_SetConfig+0x38c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d045      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a3a      	ldr	r2, [pc, #232]	@ (8005e38 <DMA_SetConfig+0x390>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d040      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a38      	ldr	r2, [pc, #224]	@ (8005e3c <DMA_SetConfig+0x394>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d03b      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a37      	ldr	r2, [pc, #220]	@ (8005e40 <DMA_SetConfig+0x398>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d036      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a35      	ldr	r2, [pc, #212]	@ (8005e44 <DMA_SetConfig+0x39c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d031      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a34      	ldr	r2, [pc, #208]	@ (8005e48 <DMA_SetConfig+0x3a0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d02c      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a32      	ldr	r2, [pc, #200]	@ (8005e4c <DMA_SetConfig+0x3a4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d027      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a31      	ldr	r2, [pc, #196]	@ (8005e50 <DMA_SetConfig+0x3a8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d022      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a2f      	ldr	r2, [pc, #188]	@ (8005e54 <DMA_SetConfig+0x3ac>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01d      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e58 <DMA_SetConfig+0x3b0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d018      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a2c      	ldr	r2, [pc, #176]	@ (8005e5c <DMA_SetConfig+0x3b4>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a2b      	ldr	r2, [pc, #172]	@ (8005e60 <DMA_SetConfig+0x3b8>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a29      	ldr	r2, [pc, #164]	@ (8005e64 <DMA_SetConfig+0x3bc>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a28      	ldr	r2, [pc, #160]	@ (8005e68 <DMA_SetConfig+0x3c0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <DMA_SetConfig+0x32e>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a26      	ldr	r2, [pc, #152]	@ (8005e6c <DMA_SetConfig+0x3c4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d101      	bne.n	8005dda <DMA_SetConfig+0x332>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <DMA_SetConfig+0x334>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d020      	beq.n	8005e22 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	2201      	movs	r2, #1
 8005dea:	409a      	lsls	r2, r3
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	2b40      	cmp	r3, #64	@ 0x40
 8005dfe:	d108      	bne.n	8005e12 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	60da      	str	r2, [r3, #12]
}
 8005e10:	e007      	b.n	8005e22 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	60da      	str	r2, [r3, #12]
}
 8005e22:	bf00      	nop
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	48022c08 	.word	0x48022c08
 8005e34:	48022c1c 	.word	0x48022c1c
 8005e38:	48022c30 	.word	0x48022c30
 8005e3c:	48022c44 	.word	0x48022c44
 8005e40:	48022c58 	.word	0x48022c58
 8005e44:	48022c6c 	.word	0x48022c6c
 8005e48:	48022c80 	.word	0x48022c80
 8005e4c:	48022c94 	.word	0x48022c94
 8005e50:	58025408 	.word	0x58025408
 8005e54:	5802541c 	.word	0x5802541c
 8005e58:	58025430 	.word	0x58025430
 8005e5c:	58025444 	.word	0x58025444
 8005e60:	58025458 	.word	0x58025458
 8005e64:	5802546c 	.word	0x5802546c
 8005e68:	58025480 	.word	0x58025480
 8005e6c:	58025494 	.word	0x58025494

08005e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a42      	ldr	r2, [pc, #264]	@ (8005f88 <DMA_CalcBaseAndBitshift+0x118>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d04a      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a41      	ldr	r2, [pc, #260]	@ (8005f8c <DMA_CalcBaseAndBitshift+0x11c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d045      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a3f      	ldr	r2, [pc, #252]	@ (8005f90 <DMA_CalcBaseAndBitshift+0x120>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d040      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a3e      	ldr	r2, [pc, #248]	@ (8005f94 <DMA_CalcBaseAndBitshift+0x124>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d03b      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8005f98 <DMA_CalcBaseAndBitshift+0x128>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d036      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3b      	ldr	r2, [pc, #236]	@ (8005f9c <DMA_CalcBaseAndBitshift+0x12c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d031      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a39      	ldr	r2, [pc, #228]	@ (8005fa0 <DMA_CalcBaseAndBitshift+0x130>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d02c      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a38      	ldr	r2, [pc, #224]	@ (8005fa4 <DMA_CalcBaseAndBitshift+0x134>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d027      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a36      	ldr	r2, [pc, #216]	@ (8005fa8 <DMA_CalcBaseAndBitshift+0x138>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a35      	ldr	r2, [pc, #212]	@ (8005fac <DMA_CalcBaseAndBitshift+0x13c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d01d      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a33      	ldr	r2, [pc, #204]	@ (8005fb0 <DMA_CalcBaseAndBitshift+0x140>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a32      	ldr	r2, [pc, #200]	@ (8005fb4 <DMA_CalcBaseAndBitshift+0x144>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a30      	ldr	r2, [pc, #192]	@ (8005fb8 <DMA_CalcBaseAndBitshift+0x148>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2f      	ldr	r2, [pc, #188]	@ (8005fbc <DMA_CalcBaseAndBitshift+0x14c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a2d      	ldr	r2, [pc, #180]	@ (8005fc0 <DMA_CalcBaseAndBitshift+0x150>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <DMA_CalcBaseAndBitshift+0xa8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc4 <DMA_CalcBaseAndBitshift+0x154>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d101      	bne.n	8005f1c <DMA_CalcBaseAndBitshift+0xac>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <DMA_CalcBaseAndBitshift+0xae>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d024      	beq.n	8005f6c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	3b10      	subs	r3, #16
 8005f2a:	4a27      	ldr	r2, [pc, #156]	@ (8005fc8 <DMA_CalcBaseAndBitshift+0x158>)
 8005f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	4a24      	ldr	r2, [pc, #144]	@ (8005fcc <DMA_CalcBaseAndBitshift+0x15c>)
 8005f3c:	5cd3      	ldrb	r3, [r2, r3]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d908      	bls.n	8005f5c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd0 <DMA_CalcBaseAndBitshift+0x160>)
 8005f52:	4013      	ands	r3, r2
 8005f54:	1d1a      	adds	r2, r3, #4
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f5a:	e00d      	b.n	8005f78 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	4b1b      	ldr	r3, [pc, #108]	@ (8005fd0 <DMA_CalcBaseAndBitshift+0x160>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f6a:	e005      	b.n	8005f78 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	40020010 	.word	0x40020010
 8005f8c:	40020028 	.word	0x40020028
 8005f90:	40020040 	.word	0x40020040
 8005f94:	40020058 	.word	0x40020058
 8005f98:	40020070 	.word	0x40020070
 8005f9c:	40020088 	.word	0x40020088
 8005fa0:	400200a0 	.word	0x400200a0
 8005fa4:	400200b8 	.word	0x400200b8
 8005fa8:	40020410 	.word	0x40020410
 8005fac:	40020428 	.word	0x40020428
 8005fb0:	40020440 	.word	0x40020440
 8005fb4:	40020458 	.word	0x40020458
 8005fb8:	40020470 	.word	0x40020470
 8005fbc:	40020488 	.word	0x40020488
 8005fc0:	400204a0 	.word	0x400204a0
 8005fc4:	400204b8 	.word	0x400204b8
 8005fc8:	aaaaaaab 	.word	0xaaaaaaab
 8005fcc:	0800c9b4 	.word	0x0800c9b4
 8005fd0:	fffffc00 	.word	0xfffffc00

08005fd4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d120      	bne.n	800602a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d858      	bhi.n	80060a2 <DMA_CheckFifoParam+0xce>
 8005ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff8 <DMA_CheckFifoParam+0x24>)
 8005ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff6:	bf00      	nop
 8005ff8:	08006009 	.word	0x08006009
 8005ffc:	0800601b 	.word	0x0800601b
 8006000:	08006009 	.word	0x08006009
 8006004:	080060a3 	.word	0x080060a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d048      	beq.n	80060a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006018:	e045      	b.n	80060a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800601e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006022:	d142      	bne.n	80060aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006028:	e03f      	b.n	80060aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006032:	d123      	bne.n	800607c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	2b03      	cmp	r3, #3
 800603a:	d838      	bhi.n	80060ae <DMA_CheckFifoParam+0xda>
 800603c:	a201      	add	r2, pc, #4	@ (adr r2, 8006044 <DMA_CheckFifoParam+0x70>)
 800603e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006042:	bf00      	nop
 8006044:	08006055 	.word	0x08006055
 8006048:	0800605b 	.word	0x0800605b
 800604c:	08006055 	.word	0x08006055
 8006050:	0800606d 	.word	0x0800606d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	73fb      	strb	r3, [r7, #15]
        break;
 8006058:	e030      	b.n	80060bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d025      	beq.n	80060b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800606a:	e022      	b.n	80060b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006070:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006074:	d11f      	bne.n	80060b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800607a:	e01c      	b.n	80060b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006080:	2b02      	cmp	r3, #2
 8006082:	d902      	bls.n	800608a <DMA_CheckFifoParam+0xb6>
 8006084:	2b03      	cmp	r3, #3
 8006086:	d003      	beq.n	8006090 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006088:	e018      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
        break;
 800608e:	e015      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006094:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00e      	beq.n	80060ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
    break;
 80060a0:	e00b      	b.n	80060ba <DMA_CheckFifoParam+0xe6>
        break;
 80060a2:	bf00      	nop
 80060a4:	e00a      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060a6:	bf00      	nop
 80060a8:	e008      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060aa:	bf00      	nop
 80060ac:	e006      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060ae:	bf00      	nop
 80060b0:	e004      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060b2:	bf00      	nop
 80060b4:	e002      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
        break;
 80060b6:	bf00      	nop
 80060b8:	e000      	b.n	80060bc <DMA_CheckFifoParam+0xe8>
    break;
 80060ba:	bf00      	nop
    }
  }

  return status;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop

080060cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a38      	ldr	r2, [pc, #224]	@ (80061c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d022      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a36      	ldr	r2, [pc, #216]	@ (80061c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01d      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a35      	ldr	r2, [pc, #212]	@ (80061c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a33      	ldr	r2, [pc, #204]	@ (80061cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a32      	ldr	r2, [pc, #200]	@ (80061d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a30      	ldr	r2, [pc, #192]	@ (80061d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2f      	ldr	r2, [pc, #188]	@ (80061d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a2d      	ldr	r2, [pc, #180]	@ (80061dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d101      	bne.n	800612e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800612a:	2301      	movs	r3, #1
 800612c:	e000      	b.n	8006130 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800612e:	2300      	movs	r3, #0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d01a      	beq.n	800616a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	3b08      	subs	r3, #8
 800613c:	4a28      	ldr	r2, [pc, #160]	@ (80061e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800613e:	fba2 2303 	umull	r2, r3, r2, r3
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	4b26      	ldr	r3, [pc, #152]	@ (80061e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	461a      	mov	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a24      	ldr	r2, [pc, #144]	@ (80061e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006158:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	2201      	movs	r2, #1
 8006162:	409a      	lsls	r2, r3
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006168:	e024      	b.n	80061b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	b2db      	uxtb	r3, r3
 8006170:	3b10      	subs	r3, #16
 8006172:	4a1e      	ldr	r2, [pc, #120]	@ (80061ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4a1c      	ldr	r2, [pc, #112]	@ (80061f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d806      	bhi.n	8006192 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4a1b      	ldr	r2, [pc, #108]	@ (80061f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d902      	bls.n	8006192 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3308      	adds	r3, #8
 8006190:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4b18      	ldr	r3, [pc, #96]	@ (80061f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	461a      	mov	r2, r3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a16      	ldr	r2, [pc, #88]	@ (80061fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80061a4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2201      	movs	r2, #1
 80061ae:	409a      	lsls	r2, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	58025408 	.word	0x58025408
 80061c4:	5802541c 	.word	0x5802541c
 80061c8:	58025430 	.word	0x58025430
 80061cc:	58025444 	.word	0x58025444
 80061d0:	58025458 	.word	0x58025458
 80061d4:	5802546c 	.word	0x5802546c
 80061d8:	58025480 	.word	0x58025480
 80061dc:	58025494 	.word	0x58025494
 80061e0:	cccccccd 	.word	0xcccccccd
 80061e4:	16009600 	.word	0x16009600
 80061e8:	58025880 	.word	0x58025880
 80061ec:	aaaaaaab 	.word	0xaaaaaaab
 80061f0:	400204b8 	.word	0x400204b8
 80061f4:	4002040f 	.word	0x4002040f
 80061f8:	10008200 	.word	0x10008200
 80061fc:	40020880 	.word	0x40020880

08006200 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d04a      	beq.n	80062ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d847      	bhi.n	80062ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a25      	ldr	r2, [pc, #148]	@ (80062b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d022      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a24      	ldr	r2, [pc, #144]	@ (80062bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d01d      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a22      	ldr	r2, [pc, #136]	@ (80062c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d018      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a21      	ldr	r2, [pc, #132]	@ (80062c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d013      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1f      	ldr	r2, [pc, #124]	@ (80062c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00e      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1e      	ldr	r2, [pc, #120]	@ (80062cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d009      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1c      	ldr	r2, [pc, #112]	@ (80062d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d004      	beq.n	800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1b      	ldr	r2, [pc, #108]	@ (80062d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d101      	bne.n	8006270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006270:	2300      	movs	r3, #0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	4b17      	ldr	r3, [pc, #92]	@ (80062d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800627a:	4413      	add	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	461a      	mov	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a15      	ldr	r2, [pc, #84]	@ (80062dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006288:	671a      	str	r2, [r3, #112]	@ 0x70
 800628a:	e009      	b.n	80062a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4b14      	ldr	r3, [pc, #80]	@ (80062e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	461a      	mov	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a11      	ldr	r2, [pc, #68]	@ (80062e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800629e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3b01      	subs	r3, #1
 80062a4:	2201      	movs	r2, #1
 80062a6:	409a      	lsls	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	58025408 	.word	0x58025408
 80062bc:	5802541c 	.word	0x5802541c
 80062c0:	58025430 	.word	0x58025430
 80062c4:	58025444 	.word	0x58025444
 80062c8:	58025458 	.word	0x58025458
 80062cc:	5802546c 	.word	0x5802546c
 80062d0:	58025480 	.word	0x58025480
 80062d4:	58025494 	.word	0x58025494
 80062d8:	1600963f 	.word	0x1600963f
 80062dc:	58025940 	.word	0x58025940
 80062e0:	1000823f 	.word	0x1000823f
 80062e4:	40020940 	.word	0x40020940

080062e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b089      	sub	sp, #36	@ 0x24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80062f6:	4b89      	ldr	r3, [pc, #548]	@ (800651c <HAL_GPIO_Init+0x234>)
 80062f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80062fa:	e194      	b.n	8006626 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	2101      	movs	r1, #1
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	fa01 f303 	lsl.w	r3, r1, r3
 8006308:	4013      	ands	r3, r2
 800630a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 8186 	beq.w	8006620 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b01      	cmp	r3, #1
 800631e:	d005      	beq.n	800632c <HAL_GPIO_Init+0x44>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d130      	bne.n	800638e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	2203      	movs	r2, #3
 8006338:	fa02 f303 	lsl.w	r3, r2, r3
 800633c:	43db      	mvns	r3, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4013      	ands	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	005b      	lsls	r3, r3, #1
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4313      	orrs	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006362:	2201      	movs	r2, #1
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	43db      	mvns	r3, r3
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	4013      	ands	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	091b      	lsrs	r3, r3, #4
 8006378:	f003 0201 	and.w	r2, r3, #1
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	fa02 f303 	lsl.w	r3, r2, r3
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	4313      	orrs	r3, r2
 8006386:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f003 0303 	and.w	r3, r3, #3
 8006396:	2b03      	cmp	r3, #3
 8006398:	d017      	beq.n	80063ca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	2203      	movs	r2, #3
 80063a6:	fa02 f303 	lsl.w	r3, r2, r3
 80063aa:	43db      	mvns	r3, r3
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	4013      	ands	r3, r2
 80063b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	fa02 f303 	lsl.w	r3, r2, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d123      	bne.n	800641e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	08da      	lsrs	r2, r3, #3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3208      	adds	r2, #8
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	220f      	movs	r2, #15
 80063ee:	fa02 f303 	lsl.w	r3, r2, r3
 80063f2:	43db      	mvns	r3, r3
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	4013      	ands	r3, r2
 80063f8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	fa02 f303 	lsl.w	r3, r2, r3
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	4313      	orrs	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	08da      	lsrs	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3208      	adds	r2, #8
 8006418:	69b9      	ldr	r1, [r7, #24]
 800641a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	2203      	movs	r2, #3
 800642a:	fa02 f303 	lsl.w	r3, r2, r3
 800642e:	43db      	mvns	r3, r3
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4013      	ands	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f003 0203 	and.w	r2, r3, #3
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	4313      	orrs	r3, r2
 800644a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80e0 	beq.w	8006620 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006460:	4b2f      	ldr	r3, [pc, #188]	@ (8006520 <HAL_GPIO_Init+0x238>)
 8006462:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006466:	4a2e      	ldr	r2, [pc, #184]	@ (8006520 <HAL_GPIO_Init+0x238>)
 8006468:	f043 0302 	orr.w	r3, r3, #2
 800646c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006470:	4b2b      	ldr	r3, [pc, #172]	@ (8006520 <HAL_GPIO_Init+0x238>)
 8006472:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800647e:	4a29      	ldr	r2, [pc, #164]	@ (8006524 <HAL_GPIO_Init+0x23c>)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	3302      	adds	r3, #2
 8006486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800648a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	220f      	movs	r2, #15
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a20      	ldr	r2, [pc, #128]	@ (8006528 <HAL_GPIO_Init+0x240>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d052      	beq.n	8006550 <HAL_GPIO_Init+0x268>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a1f      	ldr	r2, [pc, #124]	@ (800652c <HAL_GPIO_Init+0x244>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d031      	beq.n	8006516 <HAL_GPIO_Init+0x22e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006530 <HAL_GPIO_Init+0x248>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d02b      	beq.n	8006512 <HAL_GPIO_Init+0x22a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006534 <HAL_GPIO_Init+0x24c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d025      	beq.n	800650e <HAL_GPIO_Init+0x226>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006538 <HAL_GPIO_Init+0x250>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d01f      	beq.n	800650a <HAL_GPIO_Init+0x222>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a1b      	ldr	r2, [pc, #108]	@ (800653c <HAL_GPIO_Init+0x254>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d019      	beq.n	8006506 <HAL_GPIO_Init+0x21e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a1a      	ldr	r2, [pc, #104]	@ (8006540 <HAL_GPIO_Init+0x258>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <HAL_GPIO_Init+0x21a>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a19      	ldr	r2, [pc, #100]	@ (8006544 <HAL_GPIO_Init+0x25c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00d      	beq.n	80064fe <HAL_GPIO_Init+0x216>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a18      	ldr	r2, [pc, #96]	@ (8006548 <HAL_GPIO_Init+0x260>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <HAL_GPIO_Init+0x212>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a17      	ldr	r2, [pc, #92]	@ (800654c <HAL_GPIO_Init+0x264>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d101      	bne.n	80064f6 <HAL_GPIO_Init+0x20e>
 80064f2:	2309      	movs	r3, #9
 80064f4:	e02d      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 80064f6:	230a      	movs	r3, #10
 80064f8:	e02b      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 80064fa:	2308      	movs	r3, #8
 80064fc:	e029      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 80064fe:	2307      	movs	r3, #7
 8006500:	e027      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 8006502:	2306      	movs	r3, #6
 8006504:	e025      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 8006506:	2305      	movs	r3, #5
 8006508:	e023      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 800650a:	2304      	movs	r3, #4
 800650c:	e021      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 800650e:	2303      	movs	r3, #3
 8006510:	e01f      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 8006512:	2302      	movs	r3, #2
 8006514:	e01d      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 8006516:	2301      	movs	r3, #1
 8006518:	e01b      	b.n	8006552 <HAL_GPIO_Init+0x26a>
 800651a:	bf00      	nop
 800651c:	58000080 	.word	0x58000080
 8006520:	58024400 	.word	0x58024400
 8006524:	58000400 	.word	0x58000400
 8006528:	58020000 	.word	0x58020000
 800652c:	58020400 	.word	0x58020400
 8006530:	58020800 	.word	0x58020800
 8006534:	58020c00 	.word	0x58020c00
 8006538:	58021000 	.word	0x58021000
 800653c:	58021400 	.word	0x58021400
 8006540:	58021800 	.word	0x58021800
 8006544:	58021c00 	.word	0x58021c00
 8006548:	58022000 	.word	0x58022000
 800654c:	58022400 	.word	0x58022400
 8006550:	2300      	movs	r3, #0
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	f002 0203 	and.w	r2, r2, #3
 8006558:	0092      	lsls	r2, r2, #2
 800655a:	4093      	lsls	r3, r2
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	4313      	orrs	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006562:	4938      	ldr	r1, [pc, #224]	@ (8006644 <HAL_GPIO_Init+0x35c>)
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	089b      	lsrs	r3, r3, #2
 8006568:	3302      	adds	r3, #2
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	43db      	mvns	r3, r3
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	4013      	ands	r3, r2
 8006580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006596:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	4013      	ands	r3, r2
 80065ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80065c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	43db      	mvns	r3, r3
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	4013      	ands	r3, r2
 80065da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	43db      	mvns	r3, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	f47f ae63 	bne.w	80062fc <HAL_GPIO_Init+0x14>
  }
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	3724      	adds	r7, #36	@ 0x24
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	58000400 	.word	0x58000400

08006648 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	807b      	strh	r3, [r7, #2]
 8006654:	4613      	mov	r3, r2
 8006656:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006658:	787b      	ldrb	r3, [r7, #1]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800665e:	887a      	ldrh	r2, [r7, #2]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006664:	e003      	b.n	800666e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006666:	887b      	ldrh	r3, [r7, #2]
 8006668:	041a      	lsls	r2, r3, #16
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	619a      	str	r2, [r3, #24]
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
	...

0800667c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006680:	4b05      	ldr	r3, [pc, #20]	@ (8006698 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a04      	ldr	r2, [pc, #16]	@ (8006698 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006686:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800668a:	6013      	str	r3, [r2, #0]
}
 800668c:	bf00      	nop
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	58024800 	.word	0x58024800

0800669c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80066a4:	4b29      	ldr	r3, [pc, #164]	@ (800674c <HAL_PWREx_ConfigSupply+0xb0>)
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	2b06      	cmp	r3, #6
 80066ae:	d00a      	beq.n	80066c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066b0:	4b26      	ldr	r3, [pc, #152]	@ (800674c <HAL_PWREx_ConfigSupply+0xb0>)
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d001      	beq.n	80066c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e040      	b.n	8006744 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	e03e      	b.n	8006744 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066c6:	4b21      	ldr	r3, [pc, #132]	@ (800674c <HAL_PWREx_ConfigSupply+0xb0>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80066ce:	491f      	ldr	r1, [pc, #124]	@ (800674c <HAL_PWREx_ConfigSupply+0xb0>)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80066d6:	f7fa fe71 	bl	80013bc <HAL_GetTick>
 80066da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066dc:	e009      	b.n	80066f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066de:	f7fa fe6d 	bl	80013bc <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80066ec:	d901      	bls.n	80066f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e028      	b.n	8006744 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066f2:	4b16      	ldr	r3, [pc, #88]	@ (800674c <HAL_PWREx_ConfigSupply+0xb0>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066fe:	d1ee      	bne.n	80066de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b1e      	cmp	r3, #30
 8006704:	d008      	beq.n	8006718 <HAL_PWREx_ConfigSupply+0x7c>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b2e      	cmp	r3, #46	@ 0x2e
 800670a:	d005      	beq.n	8006718 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b1d      	cmp	r3, #29
 8006710:	d002      	beq.n	8006718 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2b2d      	cmp	r3, #45	@ 0x2d
 8006716:	d114      	bne.n	8006742 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006718:	f7fa fe50 	bl	80013bc <HAL_GetTick>
 800671c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800671e:	e009      	b.n	8006734 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006720:	f7fa fe4c 	bl	80013bc <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800672e:	d901      	bls.n	8006734 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e007      	b.n	8006744 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006734:	4b05      	ldr	r3, [pc, #20]	@ (800674c <HAL_PWREx_ConfigSupply+0xb0>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800673c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006740:	d1ee      	bne.n	8006720 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	58024800 	.word	0x58024800

08006750 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08c      	sub	sp, #48	@ 0x30
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d102      	bne.n	8006764 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	f000 bc1f 	b.w	8006fa2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80b3 	beq.w	80068d8 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006772:	4b95      	ldr	r3, [pc, #596]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800677a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800677c:	4b92      	ldr	r3, [pc, #584]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800677e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006780:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006784:	2b10      	cmp	r3, #16
 8006786:	d007      	beq.n	8006798 <HAL_RCC_OscConfig+0x48>
 8006788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800678a:	2b18      	cmp	r3, #24
 800678c:	d112      	bne.n	80067b4 <HAL_RCC_OscConfig+0x64>
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	2b02      	cmp	r3, #2
 8006796:	d10d      	bne.n	80067b4 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006798:	4b8b      	ldr	r3, [pc, #556]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 8098 	beq.w	80068d6 <HAL_RCC_OscConfig+0x186>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 8093 	bne.w	80068d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e3f6      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067bc:	d106      	bne.n	80067cc <HAL_RCC_OscConfig+0x7c>
 80067be:	4b82      	ldr	r3, [pc, #520]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a81      	ldr	r2, [pc, #516]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80067c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	e058      	b.n	800687e <HAL_RCC_OscConfig+0x12e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d112      	bne.n	80067fa <HAL_RCC_OscConfig+0xaa>
 80067d4:	4b7c      	ldr	r3, [pc, #496]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a7b      	ldr	r2, [pc, #492]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80067da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	4b79      	ldr	r3, [pc, #484]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a78      	ldr	r2, [pc, #480]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80067e6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067ea:	6013      	str	r3, [r2, #0]
 80067ec:	4b76      	ldr	r3, [pc, #472]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a75      	ldr	r2, [pc, #468]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80067f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	e041      	b.n	800687e <HAL_RCC_OscConfig+0x12e>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006802:	d112      	bne.n	800682a <HAL_RCC_OscConfig+0xda>
 8006804:	4b70      	ldr	r3, [pc, #448]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a6f      	ldr	r2, [pc, #444]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800680a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	4b6d      	ldr	r3, [pc, #436]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a6c      	ldr	r2, [pc, #432]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006816:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	4b6a      	ldr	r3, [pc, #424]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a69      	ldr	r2, [pc, #420]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	e029      	b.n	800687e <HAL_RCC_OscConfig+0x12e>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006832:	d112      	bne.n	800685a <HAL_RCC_OscConfig+0x10a>
 8006834:	4b64      	ldr	r3, [pc, #400]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a63      	ldr	r2, [pc, #396]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800683a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	4b61      	ldr	r3, [pc, #388]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a60      	ldr	r2, [pc, #384]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006846:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	4b5e      	ldr	r3, [pc, #376]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5d      	ldr	r2, [pc, #372]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006852:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	e011      	b.n	800687e <HAL_RCC_OscConfig+0x12e>
 800685a:	4b5b      	ldr	r3, [pc, #364]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a5a      	ldr	r2, [pc, #360]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	4b58      	ldr	r3, [pc, #352]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a57      	ldr	r2, [pc, #348]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800686c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	4b55      	ldr	r3, [pc, #340]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a54      	ldr	r2, [pc, #336]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006878:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800687c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d013      	beq.n	80068ae <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006886:	f7fa fd99 	bl	80013bc <HAL_GetTick>
 800688a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800688c:	e008      	b.n	80068a0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800688e:	f7fa fd95 	bl	80013bc <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	2b64      	cmp	r3, #100	@ 0x64
 800689a:	d901      	bls.n	80068a0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	e380      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068a0:	4b49      	ldr	r3, [pc, #292]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f0      	beq.n	800688e <HAL_RCC_OscConfig+0x13e>
 80068ac:	e014      	b.n	80068d8 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ae:	f7fa fd85 	bl	80013bc <HAL_GetTick>
 80068b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068b4:	e008      	b.n	80068c8 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068b6:	f7fa fd81 	bl	80013bc <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b64      	cmp	r3, #100	@ 0x64
 80068c2:	d901      	bls.n	80068c8 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e36c      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068c8:	4b3f      	ldr	r3, [pc, #252]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f0      	bne.n	80068b6 <HAL_RCC_OscConfig+0x166>
 80068d4:	e000      	b.n	80068d8 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 808c 	beq.w	80069fe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068e6:	4b38      	ldr	r3, [pc, #224]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068f0:	4b35      	ldr	r3, [pc, #212]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80068f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d007      	beq.n	800690c <HAL_RCC_OscConfig+0x1bc>
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	2b18      	cmp	r3, #24
 8006900:	d137      	bne.n	8006972 <HAL_RCC_OscConfig+0x222>
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	f003 0303 	and.w	r3, r3, #3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d132      	bne.n	8006972 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800690c:	4b2e      	ldr	r3, [pc, #184]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_RCC_OscConfig+0x1d4>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e33e      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006924:	4b28      	ldr	r3, [pc, #160]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f023 0219 	bic.w	r2, r3, #25
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	4925      	ldr	r1, [pc, #148]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006932:	4313      	orrs	r3, r2
 8006934:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006936:	f7fa fd41 	bl	80013bc <HAL_GetTick>
 800693a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800693e:	f7fa fd3d 	bl	80013bc <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e328      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006950:	4b1d      	ldr	r3, [pc, #116]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f0      	beq.n	800693e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695c:	4b1a      	ldr	r3, [pc, #104]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	061b      	lsls	r3, r3, #24
 800696a:	4917      	ldr	r1, [pc, #92]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800696c:	4313      	orrs	r3, r2
 800696e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006970:	e045      	b.n	80069fe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d028      	beq.n	80069cc <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800697a:	4b13      	ldr	r3, [pc, #76]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f023 0219 	bic.w	r2, r3, #25
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	4910      	ldr	r1, [pc, #64]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 8006988:	4313      	orrs	r3, r2
 800698a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7fa fd16 	bl	80013bc <HAL_GetTick>
 8006990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006992:	e008      	b.n	80069a6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006994:	f7fa fd12 	bl	80013bc <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e2fd      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069a6:	4b08      	ldr	r3, [pc, #32]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0f0      	beq.n	8006994 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069b2:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	061b      	lsls	r3, r3, #24
 80069c0:	4901      	ldr	r1, [pc, #4]	@ (80069c8 <HAL_RCC_OscConfig+0x278>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	604b      	str	r3, [r1, #4]
 80069c6:	e01a      	b.n	80069fe <HAL_RCC_OscConfig+0x2ae>
 80069c8:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069cc:	4b97      	ldr	r3, [pc, #604]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a96      	ldr	r2, [pc, #600]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fa fcf0 	bl	80013bc <HAL_GetTick>
 80069dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069e0:	f7fa fcec 	bl	80013bc <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e2d7      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069f2:	4b8e      	ldr	r3, [pc, #568]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f0      	bne.n	80069e0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0310 	and.w	r3, r3, #16
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d06a      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a0a:	4b88      	ldr	r3, [pc, #544]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a14:	4b85      	ldr	r3, [pc, #532]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b08      	cmp	r3, #8
 8006a1e:	d007      	beq.n	8006a30 <HAL_RCC_OscConfig+0x2e0>
 8006a20:	69bb      	ldr	r3, [r7, #24]
 8006a22:	2b18      	cmp	r3, #24
 8006a24:	d11b      	bne.n	8006a5e <HAL_RCC_OscConfig+0x30e>
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d116      	bne.n	8006a5e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a30:	4b7e      	ldr	r3, [pc, #504]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <HAL_RCC_OscConfig+0x2f8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	2b80      	cmp	r3, #128	@ 0x80
 8006a42:	d001      	beq.n	8006a48 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e2ac      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a48:	4b78      	ldr	r3, [pc, #480]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	061b      	lsls	r3, r3, #24
 8006a56:	4975      	ldr	r1, [pc, #468]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a5c:	e040      	b.n	8006ae0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	69db      	ldr	r3, [r3, #28]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d023      	beq.n	8006aae <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a66:	4b71      	ldr	r3, [pc, #452]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a70      	ldr	r2, [pc, #448]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a72:	f7fa fca3 	bl	80013bc <HAL_GetTick>
 8006a76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006a7a:	f7fa fc9f 	bl	80013bc <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e28a      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a8c:	4b67      	ldr	r3, [pc, #412]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0f0      	beq.n	8006a7a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a98:	4b64      	ldr	r3, [pc, #400]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a1b      	ldr	r3, [r3, #32]
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	4961      	ldr	r1, [pc, #388]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60cb      	str	r3, [r1, #12]
 8006aac:	e018      	b.n	8006ae0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006aae:	4b5f      	ldr	r3, [pc, #380]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a5e      	ldr	r2, [pc, #376]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006ab4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aba:	f7fa fc7f 	bl	80013bc <HAL_GetTick>
 8006abe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ac0:	e008      	b.n	8006ad4 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006ac2:	f7fa fc7b 	bl	80013bc <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d901      	bls.n	8006ad4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006ad0:	2303      	movs	r3, #3
 8006ad2:	e266      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ad4:	4b55      	ldr	r3, [pc, #340]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1f0      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d036      	beq.n	8006b5a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d019      	beq.n	8006b28 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006af4:	4b4d      	ldr	r3, [pc, #308]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006af8:	4a4c      	ldr	r2, [pc, #304]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006afa:	f043 0301 	orr.w	r3, r3, #1
 8006afe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b00:	f7fa fc5c 	bl	80013bc <HAL_GetTick>
 8006b04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b08:	f7fa fc58 	bl	80013bc <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e243      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b1a:	4b44      	ldr	r3, [pc, #272]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d0f0      	beq.n	8006b08 <HAL_RCC_OscConfig+0x3b8>
 8006b26:	e018      	b.n	8006b5a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b28:	4b40      	ldr	r3, [pc, #256]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b2c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006b2e:	f023 0301 	bic.w	r3, r3, #1
 8006b32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b34:	f7fa fc42 	bl	80013bc <HAL_GetTick>
 8006b38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b3c:	f7fa fc3e 	bl	80013bc <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e229      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b4e:	4b37      	ldr	r3, [pc, #220]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d036      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d019      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b6e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a2e      	ldr	r2, [pc, #184]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006b78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b7a:	f7fa fc1f 	bl	80013bc <HAL_GetTick>
 8006b7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b80:	e008      	b.n	8006b94 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b82:	f7fa fc1b 	bl	80013bc <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e206      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b94:	4b25      	ldr	r3, [pc, #148]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0f0      	beq.n	8006b82 <HAL_RCC_OscConfig+0x432>
 8006ba0:	e018      	b.n	8006bd4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ba2:	4b22      	ldr	r3, [pc, #136]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a21      	ldr	r2, [pc, #132]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006ba8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bae:	f7fa fc05 	bl	80013bc <HAL_GetTick>
 8006bb2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bb4:	e008      	b.n	8006bc8 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bb6:	f7fa fc01 	bl	80013bc <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d901      	bls.n	8006bc8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e1ec      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bc8:	4b18      	ldr	r3, [pc, #96]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1f0      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80af 	beq.w	8006d40 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006be2:	4b13      	ldr	r3, [pc, #76]	@ (8006c30 <HAL_RCC_OscConfig+0x4e0>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a12      	ldr	r2, [pc, #72]	@ (8006c30 <HAL_RCC_OscConfig+0x4e0>)
 8006be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bee:	f7fa fbe5 	bl	80013bc <HAL_GetTick>
 8006bf2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bf4:	e008      	b.n	8006c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bf6:	f7fa fbe1 	bl	80013bc <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	2b64      	cmp	r3, #100	@ 0x64
 8006c02:	d901      	bls.n	8006c08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	e1cc      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c08:	4b09      	ldr	r3, [pc, #36]	@ (8006c30 <HAL_RCC_OscConfig+0x4e0>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0f0      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d10b      	bne.n	8006c34 <HAL_RCC_OscConfig+0x4e4>
 8006c1c:	4b03      	ldr	r3, [pc, #12]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c20:	4a02      	ldr	r2, [pc, #8]	@ (8006c2c <HAL_RCC_OscConfig+0x4dc>)
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c28:	e05b      	b.n	8006ce2 <HAL_RCC_OscConfig+0x592>
 8006c2a:	bf00      	nop
 8006c2c:	58024400 	.word	0x58024400
 8006c30:	58024800 	.word	0x58024800
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d112      	bne.n	8006c62 <HAL_RCC_OscConfig+0x512>
 8006c3c:	4b9d      	ldr	r3, [pc, #628]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c40:	4a9c      	ldr	r2, [pc, #624]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c48:	4b9a      	ldr	r3, [pc, #616]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c4c:	4a99      	ldr	r2, [pc, #612]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c54:	4b97      	ldr	r3, [pc, #604]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c58:	4a96      	ldr	r2, [pc, #600]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c5a:	f023 0304 	bic.w	r3, r3, #4
 8006c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c60:	e03f      	b.n	8006ce2 <HAL_RCC_OscConfig+0x592>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	2b05      	cmp	r3, #5
 8006c68:	d112      	bne.n	8006c90 <HAL_RCC_OscConfig+0x540>
 8006c6a:	4b92      	ldr	r3, [pc, #584]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c6e:	4a91      	ldr	r2, [pc, #580]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c70:	f043 0304 	orr.w	r3, r3, #4
 8006c74:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c76:	4b8f      	ldr	r3, [pc, #572]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c7a:	4a8e      	ldr	r2, [pc, #568]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c80:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c82:	4b8c      	ldr	r3, [pc, #560]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c86:	4a8b      	ldr	r2, [pc, #556]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c88:	f043 0301 	orr.w	r3, r3, #1
 8006c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006c8e:	e028      	b.n	8006ce2 <HAL_RCC_OscConfig+0x592>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b85      	cmp	r3, #133	@ 0x85
 8006c96:	d112      	bne.n	8006cbe <HAL_RCC_OscConfig+0x56e>
 8006c98:	4b86      	ldr	r3, [pc, #536]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c9c:	4a85      	ldr	r2, [pc, #532]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006c9e:	f043 0304 	orr.w	r3, r3, #4
 8006ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ca4:	4b83      	ldr	r3, [pc, #524]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca8:	4a82      	ldr	r2, [pc, #520]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cb0:	4b80      	ldr	r3, [pc, #512]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006cb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cb4:	4a7f      	ldr	r2, [pc, #508]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006cb6:	f043 0301 	orr.w	r3, r3, #1
 8006cba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cbc:	e011      	b.n	8006ce2 <HAL_RCC_OscConfig+0x592>
 8006cbe:	4b7d      	ldr	r3, [pc, #500]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc2:	4a7c      	ldr	r2, [pc, #496]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cca:	4b7a      	ldr	r3, [pc, #488]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cce:	4a79      	ldr	r2, [pc, #484]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006cd0:	f023 0304 	bic.w	r3, r3, #4
 8006cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006cd6:	4b77      	ldr	r3, [pc, #476]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cda:	4a76      	ldr	r2, [pc, #472]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006cdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ce0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d015      	beq.n	8006d16 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cea:	f7fa fb67 	bl	80013bc <HAL_GetTick>
 8006cee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006cf0:	e00a      	b.n	8006d08 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cf2:	f7fa fb63 	bl	80013bc <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d901      	bls.n	8006d08 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e14c      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d08:	4b6a      	ldr	r3, [pc, #424]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d0ee      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x5a2>
 8006d14:	e014      	b.n	8006d40 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d16:	f7fa fb51 	bl	80013bc <HAL_GetTick>
 8006d1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d1c:	e00a      	b.n	8006d34 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1e:	f7fa fb4d 	bl	80013bc <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e136      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d34:	4b5f      	ldr	r3, [pc, #380]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1ee      	bne.n	8006d1e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 812b 	beq.w	8006fa0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d4a:	4b5a      	ldr	r3, [pc, #360]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d52:	2b18      	cmp	r3, #24
 8006d54:	f000 80bb 	beq.w	8006ece <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	f040 8095 	bne.w	8006e8c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d62:	4b54      	ldr	r3, [pc, #336]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a53      	ldr	r2, [pc, #332]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6e:	f7fa fb25 	bl	80013bc <HAL_GetTick>
 8006d72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d76:	f7fa fb21 	bl	80013bc <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e10c      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d88:	4b4a      	ldr	r3, [pc, #296]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1f0      	bne.n	8006d76 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d94:	4b47      	ldr	r3, [pc, #284]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006d96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d98:	4b47      	ldr	r3, [pc, #284]	@ (8006eb8 <HAL_RCC_OscConfig+0x768>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006da4:	0112      	lsls	r2, r2, #4
 8006da6:	430a      	orrs	r2, r1
 8006da8:	4942      	ldr	r1, [pc, #264]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	628b      	str	r3, [r1, #40]	@ 0x28
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006db2:	3b01      	subs	r3, #1
 8006db4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	025b      	lsls	r3, r3, #9
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	041b      	lsls	r3, r3, #16
 8006dcc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	061b      	lsls	r3, r3, #24
 8006dda:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006dde:	4935      	ldr	r1, [pc, #212]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006de4:	4b33      	ldr	r3, [pc, #204]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	4a32      	ldr	r2, [pc, #200]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006df0:	4b30      	ldr	r3, [pc, #192]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006df2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006df4:	4b31      	ldr	r3, [pc, #196]	@ (8006ebc <HAL_RCC_OscConfig+0x76c>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006dfc:	00d2      	lsls	r2, r2, #3
 8006dfe:	492d      	ldr	r1, [pc, #180]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e04:	4b2b      	ldr	r3, [pc, #172]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e08:	f023 020c 	bic.w	r2, r3, #12
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e10:	4928      	ldr	r1, [pc, #160]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e16:	4b27      	ldr	r3, [pc, #156]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1a:	f023 0202 	bic.w	r2, r3, #2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e22:	4924      	ldr	r1, [pc, #144]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e28:	4b22      	ldr	r3, [pc, #136]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2c:	4a21      	ldr	r2, [pc, #132]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e34:	4b1f      	ldr	r3, [pc, #124]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e38:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e40:	4b1c      	ldr	r3, [pc, #112]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e46:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006e4c:	4b19      	ldr	r3, [pc, #100]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e50:	4a18      	ldr	r2, [pc, #96]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e58:	4b16      	ldr	r3, [pc, #88]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a15      	ldr	r2, [pc, #84]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e64:	f7fa faaa 	bl	80013bc <HAL_GetTick>
 8006e68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fa faa6 	bl	80013bc <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e091      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0f0      	beq.n	8006e6c <HAL_RCC_OscConfig+0x71c>
 8006e8a:	e089      	b.n	8006fa0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8c:	4b09      	ldr	r3, [pc, #36]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a08      	ldr	r2, [pc, #32]	@ (8006eb4 <HAL_RCC_OscConfig+0x764>)
 8006e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e98:	f7fa fa90 	bl	80013bc <HAL_GetTick>
 8006e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e9e:	e00f      	b.n	8006ec0 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea0:	f7fa fa8c 	bl	80013bc <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d908      	bls.n	8006ec0 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e077      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
 8006eb2:	bf00      	nop
 8006eb4:	58024400 	.word	0x58024400
 8006eb8:	fffffc0c 	.word	0xfffffc0c
 8006ebc:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e9      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x750>
 8006ecc:	e068      	b.n	8006fa0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006ece:	4b37      	ldr	r3, [pc, #220]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006ed4:	4b35      	ldr	r3, [pc, #212]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed8:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d031      	beq.n	8006f46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	f003 0203 	and.w	r2, r3, #3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d12a      	bne.n	8006f46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	091b      	lsrs	r3, r3, #4
 8006ef4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d122      	bne.n	8006f46 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d11a      	bne.n	8006f46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	0a5b      	lsrs	r3, r3, #9
 8006f14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f1c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d111      	bne.n	8006f46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	0c1b      	lsrs	r3, r3, #16
 8006f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d108      	bne.n	8006f46 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	0e1b      	lsrs	r3, r3, #24
 8006f38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d001      	beq.n	8006f4a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e02b      	b.n	8006fa2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006f4a:	4b18      	ldr	r3, [pc, #96]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f4e:	08db      	lsrs	r3, r3, #3
 8006f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f54:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d01f      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006f60:	4b12      	ldr	r3, [pc, #72]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	4a11      	ldr	r2, [pc, #68]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006f6c:	f7fa fa26 	bl	80013bc <HAL_GetTick>
 8006f70:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006f72:	bf00      	nop
 8006f74:	f7fa fa22 	bl	80013bc <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d0f9      	beq.n	8006f74 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006f80:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f84:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb0 <HAL_RCC_OscConfig+0x860>)
 8006f86:	4013      	ands	r3, r2
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f8c:	00d2      	lsls	r2, r2, #3
 8006f8e:	4907      	ldr	r1, [pc, #28]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006f94:	4b05      	ldr	r3, [pc, #20]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f98:	4a04      	ldr	r2, [pc, #16]	@ (8006fac <HAL_RCC_OscConfig+0x85c>)
 8006f9a:	f043 0301 	orr.w	r3, r3, #1
 8006f9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3730      	adds	r7, #48	@ 0x30
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	58024400 	.word	0x58024400
 8006fb0:	ffff0007 	.word	0xffff0007

08006fb4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b086      	sub	sp, #24
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e19c      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc8:	4b8a      	ldr	r3, [pc, #552]	@ (80071f4 <HAL_RCC_ClockConfig+0x240>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d910      	bls.n	8006ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd6:	4b87      	ldr	r3, [pc, #540]	@ (80071f4 <HAL_RCC_ClockConfig+0x240>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f023 020f 	bic.w	r2, r3, #15
 8006fde:	4985      	ldr	r1, [pc, #532]	@ (80071f4 <HAL_RCC_ClockConfig+0x240>)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe6:	4b83      	ldr	r3, [pc, #524]	@ (80071f4 <HAL_RCC_ClockConfig+0x240>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d001      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e184      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b00      	cmp	r3, #0
 8007002:	d010      	beq.n	8007026 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691a      	ldr	r2, [r3, #16]
 8007008:	4b7b      	ldr	r3, [pc, #492]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007010:	429a      	cmp	r2, r3
 8007012:	d908      	bls.n	8007026 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007014:	4b78      	ldr	r3, [pc, #480]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	4975      	ldr	r1, [pc, #468]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007022:	4313      	orrs	r3, r2
 8007024:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b00      	cmp	r3, #0
 8007030:	d010      	beq.n	8007054 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	695a      	ldr	r2, [r3, #20]
 8007036:	4b70      	ldr	r3, [pc, #448]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800703e:	429a      	cmp	r2, r3
 8007040:	d908      	bls.n	8007054 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007042:	4b6d      	ldr	r3, [pc, #436]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007044:	69db      	ldr	r3, [r3, #28]
 8007046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	496a      	ldr	r1, [pc, #424]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007050:	4313      	orrs	r3, r2
 8007052:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0310 	and.w	r3, r3, #16
 800705c:	2b00      	cmp	r3, #0
 800705e:	d010      	beq.n	8007082 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	4b64      	ldr	r3, [pc, #400]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800706c:	429a      	cmp	r2, r3
 800706e:	d908      	bls.n	8007082 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007070:	4b61      	ldr	r3, [pc, #388]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	495e      	ldr	r1, [pc, #376]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 800707e:	4313      	orrs	r3, r2
 8007080:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d010      	beq.n	80070b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69da      	ldr	r2, [r3, #28]
 8007092:	4b59      	ldr	r3, [pc, #356]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800709a:	429a      	cmp	r2, r3
 800709c:	d908      	bls.n	80070b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800709e:	4b56      	ldr	r3, [pc, #344]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	4953      	ldr	r1, [pc, #332]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	4b4d      	ldr	r3, [pc, #308]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d908      	bls.n	80070de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070cc:	4b4a      	ldr	r3, [pc, #296]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f023 020f 	bic.w	r2, r3, #15
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	4947      	ldr	r1, [pc, #284]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d055      	beq.n	8007196 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070ea:	4b43      	ldr	r3, [pc, #268]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070ec:	699b      	ldr	r3, [r3, #24]
 80070ee:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	4940      	ldr	r1, [pc, #256]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d107      	bne.n	8007114 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007104:	4b3c      	ldr	r3, [pc, #240]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d121      	bne.n	8007154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e0f6      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d107      	bne.n	800712c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800711c:	4b36      	ldr	r3, [pc, #216]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007124:	2b00      	cmp	r3, #0
 8007126:	d115      	bne.n	8007154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e0ea      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d107      	bne.n	8007144 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007134:	4b30      	ldr	r3, [pc, #192]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d109      	bne.n	8007154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e0de      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007144:	4b2c      	ldr	r3, [pc, #176]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d101      	bne.n	8007154 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e0d6      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007154:	4b28      	ldr	r3, [pc, #160]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f023 0207 	bic.w	r2, r3, #7
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4925      	ldr	r1, [pc, #148]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007162:	4313      	orrs	r3, r2
 8007164:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007166:	f7fa f929 	bl	80013bc <HAL_GetTick>
 800716a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800716c:	e00a      	b.n	8007184 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800716e:	f7fa f925 	bl	80013bc <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	f241 3288 	movw	r2, #5000	@ 0x1388
 800717c:	4293      	cmp	r3, r2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e0be      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007184:	4b1c      	ldr	r3, [pc, #112]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	429a      	cmp	r2, r3
 8007194:	d1eb      	bne.n	800716e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d010      	beq.n	80071c4 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	4b14      	ldr	r3, [pc, #80]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d208      	bcs.n	80071c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071b2:	4b11      	ldr	r3, [pc, #68]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80071b4:	699b      	ldr	r3, [r3, #24]
 80071b6:	f023 020f 	bic.w	r2, r3, #15
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	490e      	ldr	r1, [pc, #56]	@ (80071f8 <HAL_RCC_ClockConfig+0x244>)
 80071c0:	4313      	orrs	r3, r2
 80071c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071c4:	4b0b      	ldr	r3, [pc, #44]	@ (80071f4 <HAL_RCC_ClockConfig+0x240>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d214      	bcs.n	80071fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071d2:	4b08      	ldr	r3, [pc, #32]	@ (80071f4 <HAL_RCC_ClockConfig+0x240>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f023 020f 	bic.w	r2, r3, #15
 80071da:	4906      	ldr	r1, [pc, #24]	@ (80071f4 <HAL_RCC_ClockConfig+0x240>)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	4313      	orrs	r3, r2
 80071e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071e2:	4b04      	ldr	r3, [pc, #16]	@ (80071f4 <HAL_RCC_ClockConfig+0x240>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d005      	beq.n	80071fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e086      	b.n	8007302 <HAL_RCC_ClockConfig+0x34e>
 80071f4:	52002000 	.word	0x52002000
 80071f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0304 	and.w	r3, r3, #4
 8007204:	2b00      	cmp	r3, #0
 8007206:	d010      	beq.n	800722a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691a      	ldr	r2, [r3, #16]
 800720c:	4b3f      	ldr	r3, [pc, #252]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007214:	429a      	cmp	r2, r3
 8007216:	d208      	bcs.n	800722a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007218:	4b3c      	ldr	r3, [pc, #240]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	4939      	ldr	r1, [pc, #228]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 8007226:	4313      	orrs	r3, r2
 8007228:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0308 	and.w	r3, r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d010      	beq.n	8007258 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	695a      	ldr	r2, [r3, #20]
 800723a:	4b34      	ldr	r3, [pc, #208]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 800723c:	69db      	ldr	r3, [r3, #28]
 800723e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007242:	429a      	cmp	r2, r3
 8007244:	d208      	bcs.n	8007258 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007246:	4b31      	ldr	r3, [pc, #196]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	695b      	ldr	r3, [r3, #20]
 8007252:	492e      	ldr	r1, [pc, #184]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 8007254:	4313      	orrs	r3, r2
 8007256:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b00      	cmp	r3, #0
 8007262:	d010      	beq.n	8007286 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699a      	ldr	r2, [r3, #24]
 8007268:	4b28      	ldr	r3, [pc, #160]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007270:	429a      	cmp	r2, r3
 8007272:	d208      	bcs.n	8007286 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007274:	4b25      	ldr	r3, [pc, #148]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 8007276:	69db      	ldr	r3, [r3, #28]
 8007278:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	4922      	ldr	r1, [pc, #136]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 8007282:	4313      	orrs	r3, r2
 8007284:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d010      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69da      	ldr	r2, [r3, #28]
 8007296:	4b1d      	ldr	r3, [pc, #116]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800729e:	429a      	cmp	r2, r3
 80072a0:	d208      	bcs.n	80072b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80072a2:	4b1a      	ldr	r3, [pc, #104]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	4917      	ldr	r1, [pc, #92]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 80072b0:	4313      	orrs	r3, r2
 80072b2:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80072b4:	f000 f89e 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 80072b8:	4602      	mov	r2, r0
 80072ba:	4b14      	ldr	r3, [pc, #80]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	f003 030f 	and.w	r3, r3, #15
 80072c4:	4912      	ldr	r1, [pc, #72]	@ (8007310 <HAL_RCC_ClockConfig+0x35c>)
 80072c6:	5ccb      	ldrb	r3, [r1, r3]
 80072c8:	f003 031f 	and.w	r3, r3, #31
 80072cc:	fa22 f303 	lsr.w	r3, r2, r3
 80072d0:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80072d2:	4b0e      	ldr	r3, [pc, #56]	@ (800730c <HAL_RCC_ClockConfig+0x358>)
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	4a0d      	ldr	r2, [pc, #52]	@ (8007310 <HAL_RCC_ClockConfig+0x35c>)
 80072dc:	5cd3      	ldrb	r3, [r2, r3]
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
 80072e8:	4a0a      	ldr	r2, [pc, #40]	@ (8007314 <HAL_RCC_ClockConfig+0x360>)
 80072ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007318 <HAL_RCC_ClockConfig+0x364>)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80072f2:	4b0a      	ldr	r3, [pc, #40]	@ (800731c <HAL_RCC_ClockConfig+0x368>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7fa f816 	bl	8001328 <HAL_InitTick>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007300:	7bfb      	ldrb	r3, [r7, #15]
}
 8007302:	4618      	mov	r0, r3
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	0800c9a4 	.word	0x0800c9a4
 8007314:	24000004 	.word	0x24000004
 8007318:	24000000 	.word	0x24000000
 800731c:	24000008 	.word	0x24000008

08007320 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b08c      	sub	sp, #48	@ 0x30
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d12a      	bne.n	8007388 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007332:	4b2d      	ldr	r3, [pc, #180]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 8007334:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007338:	4a2b      	ldr	r2, [pc, #172]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 800733a:	f043 0301 	orr.w	r3, r3, #1
 800733e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007342:	4b29      	ldr	r3, [pc, #164]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 8007344:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007350:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007356:	2302      	movs	r3, #2
 8007358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800735a:	2303      	movs	r3, #3
 800735c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007362:	2300      	movs	r3, #0
 8007364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007366:	f107 031c 	add.w	r3, r7, #28
 800736a:	4619      	mov	r1, r3
 800736c:	481f      	ldr	r0, [pc, #124]	@ (80073ec <HAL_RCC_MCOConfig+0xcc>)
 800736e:	f7fe ffbb 	bl	80062e8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007372:	4b1d      	ldr	r3, [pc, #116]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	430b      	orrs	r3, r1
 8007380:	4919      	ldr	r1, [pc, #100]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 8007382:	4313      	orrs	r3, r2
 8007384:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007386:	e02a      	b.n	80073de <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007388:	4b17      	ldr	r3, [pc, #92]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 800738a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800738e:	4a16      	ldr	r2, [pc, #88]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 8007390:	f043 0304 	orr.w	r3, r3, #4
 8007394:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007398:	4b13      	ldr	r3, [pc, #76]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 800739a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80073a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80073aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ac:	2302      	movs	r3, #2
 80073ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b0:	2303      	movs	r3, #3
 80073b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80073b8:	2300      	movs	r3, #0
 80073ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80073bc:	f107 031c 	add.w	r3, r7, #28
 80073c0:	4619      	mov	r1, r3
 80073c2:	480b      	ldr	r0, [pc, #44]	@ (80073f0 <HAL_RCC_MCOConfig+0xd0>)
 80073c4:	f7fe ff90 	bl	80062e8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80073c8:	4b07      	ldr	r3, [pc, #28]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	01d9      	lsls	r1, r3, #7
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	430b      	orrs	r3, r1
 80073d8:	4903      	ldr	r1, [pc, #12]	@ (80073e8 <HAL_RCC_MCOConfig+0xc8>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	610b      	str	r3, [r1, #16]
}
 80073de:	bf00      	nop
 80073e0:	3730      	adds	r7, #48	@ 0x30
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	58024400 	.word	0x58024400
 80073ec:	58020000 	.word	0x58020000
 80073f0:	58020800 	.word	0x58020800

080073f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b089      	sub	sp, #36	@ 0x24
 80073f8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073fa:	4bb3      	ldr	r3, [pc, #716]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007402:	2b18      	cmp	r3, #24
 8007404:	f200 8155 	bhi.w	80076b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007408:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <HAL_RCC_GetSysClockFreq+0x1c>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007475 	.word	0x08007475
 8007414:	080076b3 	.word	0x080076b3
 8007418:	080076b3 	.word	0x080076b3
 800741c:	080076b3 	.word	0x080076b3
 8007420:	080076b3 	.word	0x080076b3
 8007424:	080076b3 	.word	0x080076b3
 8007428:	080076b3 	.word	0x080076b3
 800742c:	080076b3 	.word	0x080076b3
 8007430:	0800749b 	.word	0x0800749b
 8007434:	080076b3 	.word	0x080076b3
 8007438:	080076b3 	.word	0x080076b3
 800743c:	080076b3 	.word	0x080076b3
 8007440:	080076b3 	.word	0x080076b3
 8007444:	080076b3 	.word	0x080076b3
 8007448:	080076b3 	.word	0x080076b3
 800744c:	080076b3 	.word	0x080076b3
 8007450:	080074a1 	.word	0x080074a1
 8007454:	080076b3 	.word	0x080076b3
 8007458:	080076b3 	.word	0x080076b3
 800745c:	080076b3 	.word	0x080076b3
 8007460:	080076b3 	.word	0x080076b3
 8007464:	080076b3 	.word	0x080076b3
 8007468:	080076b3 	.word	0x080076b3
 800746c:	080076b3 	.word	0x080076b3
 8007470:	080074a7 	.word	0x080074a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007474:	4b94      	ldr	r3, [pc, #592]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0320 	and.w	r3, r3, #32
 800747c:	2b00      	cmp	r3, #0
 800747e:	d009      	beq.n	8007494 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007480:	4b91      	ldr	r3, [pc, #580]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	08db      	lsrs	r3, r3, #3
 8007486:	f003 0303 	and.w	r3, r3, #3
 800748a:	4a90      	ldr	r2, [pc, #576]	@ (80076cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
 8007490:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007492:	e111      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007494:	4b8d      	ldr	r3, [pc, #564]	@ (80076cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007496:	61bb      	str	r3, [r7, #24]
      break;
 8007498:	e10e      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800749a:	4b8d      	ldr	r3, [pc, #564]	@ (80076d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800749c:	61bb      	str	r3, [r7, #24]
      break;
 800749e:	e10b      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80074a0:	4b8c      	ldr	r3, [pc, #560]	@ (80076d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80074a2:	61bb      	str	r3, [r7, #24]
      break;
 80074a4:	e108      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074a6:	4b88      	ldr	r3, [pc, #544]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80074b0:	4b85      	ldr	r3, [pc, #532]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b4:	091b      	lsrs	r3, r3, #4
 80074b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80074bc:	4b82      	ldr	r3, [pc, #520]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80074c6:	4b80      	ldr	r3, [pc, #512]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074ca:	08db      	lsrs	r3, r3, #3
 80074cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	fb02 f303 	mul.w	r3, r2, r3
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	f000 80e1 	beq.w	80076ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	f000 8083 	beq.w	80075f8 <HAL_RCC_GetSysClockFreq+0x204>
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	f200 80a1 	bhi.w	800763c <HAL_RCC_GetSysClockFreq+0x248>
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d003      	beq.n	8007508 <HAL_RCC_GetSysClockFreq+0x114>
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d056      	beq.n	80075b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007506:	e099      	b.n	800763c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007508:	4b6f      	ldr	r3, [pc, #444]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d02d      	beq.n	8007570 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007514:	4b6c      	ldr	r3, [pc, #432]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	08db      	lsrs	r3, r3, #3
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	4a6b      	ldr	r2, [pc, #428]	@ (80076cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007520:	fa22 f303 	lsr.w	r3, r2, r3
 8007524:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800753e:	4b62      	ldr	r3, [pc, #392]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800754e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007552:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80076d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800755a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800755e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800756e:	e087      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	ee07 3a90 	vmov	s15, r3
 8007576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80076dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800757e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007582:	4b51      	ldr	r3, [pc, #324]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007592:	ed97 6a02 	vldr	s12, [r7, #8]
 8007596:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80076d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800759a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800759e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075b2:	e065      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80076e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c6:	4b40      	ldr	r3, [pc, #256]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075da:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80076d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80075ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075f6:	e043      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	ee07 3a90 	vmov	s15, r3
 80075fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007602:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80076e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800760a:	4b2f      	ldr	r3, [pc, #188]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800761a:	ed97 6a02 	vldr	s12, [r7, #8]
 800761e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80076d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800762a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800762e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800763a:	e021      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	ee07 3a90 	vmov	s15, r3
 8007642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007646:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80076e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800764a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800764e:	4b1e      	ldr	r3, [pc, #120]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800765e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007662:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80076d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800766a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800766e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800767e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007680:	4b11      	ldr	r3, [pc, #68]	@ (80076c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007684:	0a5b      	lsrs	r3, r3, #9
 8007686:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800768a:	3301      	adds	r3, #1
 800768c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007698:	edd7 6a07 	vldr	s13, [r7, #28]
 800769c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076a4:	ee17 3a90 	vmov	r3, s15
 80076a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80076aa:	e005      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61bb      	str	r3, [r7, #24]
      break;
 80076b0:	e002      	b.n	80076b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80076b2:	4b07      	ldr	r3, [pc, #28]	@ (80076d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80076b4:	61bb      	str	r3, [r7, #24]
      break;
 80076b6:	bf00      	nop
  }

  return sysclockfreq;
 80076b8:	69bb      	ldr	r3, [r7, #24]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3724      	adds	r7, #36	@ 0x24
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	58024400 	.word	0x58024400
 80076cc:	03d09000 	.word	0x03d09000
 80076d0:	003d0900 	.word	0x003d0900
 80076d4:	007a1200 	.word	0x007a1200
 80076d8:	46000000 	.word	0x46000000
 80076dc:	4c742400 	.word	0x4c742400
 80076e0:	4a742400 	.word	0x4a742400
 80076e4:	4af42400 	.word	0x4af42400

080076e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80076ee:	f7ff fe81 	bl	80073f4 <HAL_RCC_GetSysClockFreq>
 80076f2:	4602      	mov	r2, r0
 80076f4:	4b10      	ldr	r3, [pc, #64]	@ (8007738 <HAL_RCC_GetHCLKFreq+0x50>)
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	0a1b      	lsrs	r3, r3, #8
 80076fa:	f003 030f 	and.w	r3, r3, #15
 80076fe:	490f      	ldr	r1, [pc, #60]	@ (800773c <HAL_RCC_GetHCLKFreq+0x54>)
 8007700:	5ccb      	ldrb	r3, [r1, r3]
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	fa22 f303 	lsr.w	r3, r2, r3
 800770a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800770c:	4b0a      	ldr	r3, [pc, #40]	@ (8007738 <HAL_RCC_GetHCLKFreq+0x50>)
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	4a09      	ldr	r2, [pc, #36]	@ (800773c <HAL_RCC_GetHCLKFreq+0x54>)
 8007716:	5cd3      	ldrb	r3, [r2, r3]
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	fa22 f303 	lsr.w	r3, r2, r3
 8007722:	4a07      	ldr	r2, [pc, #28]	@ (8007740 <HAL_RCC_GetHCLKFreq+0x58>)
 8007724:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007726:	4a07      	ldr	r2, [pc, #28]	@ (8007744 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800772c:	4b04      	ldr	r3, [pc, #16]	@ (8007740 <HAL_RCC_GetHCLKFreq+0x58>)
 800772e:	681b      	ldr	r3, [r3, #0]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	58024400 	.word	0x58024400
 800773c:	0800c9a4 	.word	0x0800c9a4
 8007740:	24000004 	.word	0x24000004
 8007744:	24000000 	.word	0x24000000

08007748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800774c:	f7ff ffcc 	bl	80076e8 <HAL_RCC_GetHCLKFreq>
 8007750:	4602      	mov	r2, r0
 8007752:	4b06      	ldr	r3, [pc, #24]	@ (800776c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	091b      	lsrs	r3, r3, #4
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	4904      	ldr	r1, [pc, #16]	@ (8007770 <HAL_RCC_GetPCLK1Freq+0x28>)
 800775e:	5ccb      	ldrb	r3, [r1, r3]
 8007760:	f003 031f 	and.w	r3, r3, #31
 8007764:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007768:	4618      	mov	r0, r3
 800776a:	bd80      	pop	{r7, pc}
 800776c:	58024400 	.word	0x58024400
 8007770:	0800c9a4 	.word	0x0800c9a4

08007774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007778:	f7ff ffb6 	bl	80076e8 <HAL_RCC_GetHCLKFreq>
 800777c:	4602      	mov	r2, r0
 800777e:	4b06      	ldr	r3, [pc, #24]	@ (8007798 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	0a1b      	lsrs	r3, r3, #8
 8007784:	f003 0307 	and.w	r3, r3, #7
 8007788:	4904      	ldr	r1, [pc, #16]	@ (800779c <HAL_RCC_GetPCLK2Freq+0x28>)
 800778a:	5ccb      	ldrb	r3, [r1, r3]
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007794:	4618      	mov	r0, r3
 8007796:	bd80      	pop	{r7, pc}
 8007798:	58024400 	.word	0x58024400
 800779c:	0800c9a4 	.word	0x0800c9a4

080077a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077a4:	b0c8      	sub	sp, #288	@ 0x120
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077ac:	2300      	movs	r3, #0
 80077ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077b2:	2300      	movs	r3, #0
 80077b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80077c4:	2500      	movs	r5, #0
 80077c6:	ea54 0305 	orrs.w	r3, r4, r5
 80077ca:	d049      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80077cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077d6:	d02f      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80077d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077dc:	d828      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80077de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077e2:	d01a      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80077e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077e8:	d822      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80077ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077f2:	d007      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80077f4:	e01c      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f6:	4ba7      	ldr	r3, [pc, #668]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fa:	4aa6      	ldr	r2, [pc, #664]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007800:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007802:	e01a      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007808:	3308      	adds	r3, #8
 800780a:	2102      	movs	r1, #2
 800780c:	4618      	mov	r0, r3
 800780e:	f002 fac3 	bl	8009d98 <RCCEx_PLL2_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007818:	e00f      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800781a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800781e:	3328      	adds	r3, #40	@ 0x28
 8007820:	2102      	movs	r1, #2
 8007822:	4618      	mov	r0, r3
 8007824:	f002 fb6a 	bl	8009efc <RCCEx_PLL3_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800782e:	e004      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007836:	e000      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800783a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007842:	4b94      	ldr	r3, [pc, #592]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007846:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800784a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800784e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007850:	4a90      	ldr	r2, [pc, #576]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007852:	430b      	orrs	r3, r1
 8007854:	6513      	str	r3, [r2, #80]	@ 0x50
 8007856:	e003      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007858:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800785c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007860:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800786c:	f04f 0900 	mov.w	r9, #0
 8007870:	ea58 0309 	orrs.w	r3, r8, r9
 8007874:	d047      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800787a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800787c:	2b04      	cmp	r3, #4
 800787e:	d82a      	bhi.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007880:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007886:	bf00      	nop
 8007888:	0800789d 	.word	0x0800789d
 800788c:	080078ab 	.word	0x080078ab
 8007890:	080078c1 	.word	0x080078c1
 8007894:	080078df 	.word	0x080078df
 8007898:	080078df 	.word	0x080078df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800789c:	4b7d      	ldr	r3, [pc, #500]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a0:	4a7c      	ldr	r2, [pc, #496]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078a8:	e01a      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ae:	3308      	adds	r3, #8
 80078b0:	2100      	movs	r1, #0
 80078b2:	4618      	mov	r0, r3
 80078b4:	f002 fa70 	bl	8009d98 <RCCEx_PLL2_Config>
 80078b8:	4603      	mov	r3, r0
 80078ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078be:	e00f      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078c4:	3328      	adds	r3, #40	@ 0x28
 80078c6:	2100      	movs	r1, #0
 80078c8:	4618      	mov	r0, r3
 80078ca:	f002 fb17 	bl	8009efc <RCCEx_PLL3_Config>
 80078ce:	4603      	mov	r3, r0
 80078d0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80078d4:	e004      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80078dc:	e000      	b.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80078de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10a      	bne.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ec:	f023 0107 	bic.w	r1, r3, #7
 80078f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f6:	4a67      	ldr	r2, [pc, #412]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80078f8:	430b      	orrs	r3, r1
 80078fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80078fc:	e003      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007902:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007906:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800790a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007912:	f04f 0b00 	mov.w	fp, #0
 8007916:	ea5a 030b 	orrs.w	r3, sl, fp
 800791a:	d054      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800791c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007922:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007926:	d036      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007928:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800792c:	d82f      	bhi.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800792e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007932:	d032      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007938:	d829      	bhi.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800793a:	2bc0      	cmp	r3, #192	@ 0xc0
 800793c:	d02f      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800793e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007940:	d825      	bhi.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007942:	2b80      	cmp	r3, #128	@ 0x80
 8007944:	d018      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007946:	2b80      	cmp	r3, #128	@ 0x80
 8007948:	d821      	bhi.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d002      	beq.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800794e:	2b40      	cmp	r3, #64	@ 0x40
 8007950:	d007      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007952:	e01c      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007954:	4b4f      	ldr	r3, [pc, #316]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007958:	4a4e      	ldr	r2, [pc, #312]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800795a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800795e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007960:	e01e      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007962:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007966:	3308      	adds	r3, #8
 8007968:	2100      	movs	r1, #0
 800796a:	4618      	mov	r0, r3
 800796c:	f002 fa14 	bl	8009d98 <RCCEx_PLL2_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007976:	e013      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800797c:	3328      	adds	r3, #40	@ 0x28
 800797e:	2100      	movs	r1, #0
 8007980:	4618      	mov	r0, r3
 8007982:	f002 fabb 	bl	8009efc <RCCEx_PLL3_Config>
 8007986:	4603      	mov	r3, r0
 8007988:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800798c:	e008      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007994:	e004      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007996:	bf00      	nop
 8007998:	e002      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800799a:	bf00      	nop
 800799c:	e000      	b.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800799e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10a      	bne.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80079a8:	4b3a      	ldr	r3, [pc, #232]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80079b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079b6:	4a37      	ldr	r2, [pc, #220]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079b8:	430b      	orrs	r3, r1
 80079ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80079bc:	e003      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80079c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80079d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80079d6:	2300      	movs	r3, #0
 80079d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80079dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80079e0:	460b      	mov	r3, r1
 80079e2:	4313      	orrs	r3, r2
 80079e4:	d05c      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80079e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079ec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80079f0:	d03b      	beq.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079f2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80079f6:	d834      	bhi.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80079f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079fc:	d037      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80079fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a02:	d82e      	bhi.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007a04:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007a08:	d033      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007a0a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007a0e:	d828      	bhi.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007a10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a14:	d01a      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a1a:	d822      	bhi.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a24:	d007      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8007a26:	e01c      	b.n	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a28:	4b1a      	ldr	r3, [pc, #104]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2c:	4a19      	ldr	r2, [pc, #100]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007a34:	e01e      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f002 f9aa 	bl	8009d98 <RCCEx_PLL2_Config>
 8007a44:	4603      	mov	r3, r0
 8007a46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007a4a:	e013      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a50:	3328      	adds	r3, #40	@ 0x28
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f002 fa51 	bl	8009efc <RCCEx_PLL3_Config>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007a60:	e008      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a68:	e004      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007a6a:	bf00      	nop
 8007a6c:	e002      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007a6e:	bf00      	nop
 8007a70:	e000      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10d      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007a7c:	4b05      	ldr	r3, [pc, #20]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a80:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007a84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a8a:	4a02      	ldr	r2, [pc, #8]	@ (8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007a90:	e006      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007a92:	bf00      	nop
 8007a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a98:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a9c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007aac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007ab6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007aba:	460b      	mov	r3, r1
 8007abc:	4313      	orrs	r3, r2
 8007abe:	d03a      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ac6:	2b30      	cmp	r3, #48	@ 0x30
 8007ac8:	d01f      	beq.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007aca:	2b30      	cmp	r3, #48	@ 0x30
 8007acc:	d819      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007ace:	2b20      	cmp	r3, #32
 8007ad0:	d00c      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007ad2:	2b20      	cmp	r3, #32
 8007ad4:	d815      	bhi.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d019      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007ada:	2b10      	cmp	r3, #16
 8007adc:	d111      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ade:	4bae      	ldr	r3, [pc, #696]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae2:	4aad      	ldr	r2, [pc, #692]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007aea:	e011      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007af0:	3308      	adds	r3, #8
 8007af2:	2102      	movs	r1, #2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f002 f94f 	bl	8009d98 <RCCEx_PLL2_Config>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007b00:	e006      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b08:	e002      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007b0a:	bf00      	nop
 8007b0c:	e000      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8007b0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007b18:	4b9f      	ldr	r3, [pc, #636]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b1c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007b20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b26:	4a9c      	ldr	r2, [pc, #624]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b28:	430b      	orrs	r3, r1
 8007b2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007b2c:	e003      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007b42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007b46:	2300      	movs	r3, #0
 8007b48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007b4c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d051      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b60:	d035      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007b62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007b66:	d82e      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007b68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b6c:	d031      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007b6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007b72:	d828      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b78:	d01a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b7e:	d822      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d003      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b88:	d007      	beq.n	8007b9a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007b8a:	e01c      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8c:	4b82      	ldr	r3, [pc, #520]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b90:	4a81      	ldr	r2, [pc, #516]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007b98:	e01c      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f002 f8f8 	bl	8009d98 <RCCEx_PLL2_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bae:	e011      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007bb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bb4:	3328      	adds	r3, #40	@ 0x28
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f002 f99f 	bl	8009efc <RCCEx_PLL3_Config>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bc4:	e006      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007bcc:	e002      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007bce:	bf00      	nop
 8007bd0:	e000      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007bd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007bde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007be8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bea:	4a6b      	ldr	r2, [pc, #428]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007bec:	430b      	orrs	r3, r1
 8007bee:	6513      	str	r3, [r2, #80]	@ 0x50
 8007bf0:	e003      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007c06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007c10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007c14:	460b      	mov	r3, r1
 8007c16:	4313      	orrs	r3, r2
 8007c18:	d053      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c24:	d033      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007c26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007c2a:	d82c      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007c2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c30:	d02f      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8007c32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c36:	d826      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007c38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c3c:	d02b      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007c3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007c42:	d820      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007c44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c48:	d012      	beq.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007c4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007c4e:	d81a      	bhi.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d022      	beq.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c58:	d115      	bne.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c5e:	3308      	adds	r3, #8
 8007c60:	2101      	movs	r1, #1
 8007c62:	4618      	mov	r0, r3
 8007c64:	f002 f898 	bl	8009d98 <RCCEx_PLL2_Config>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c6e:	e015      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c74:	3328      	adds	r3, #40	@ 0x28
 8007c76:	2101      	movs	r1, #1
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 f93f 	bl	8009efc <RCCEx_PLL3_Config>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007c84:	e00a      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c8c:	e006      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007c8e:	bf00      	nop
 8007c90:	e004      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007c92:	bf00      	nop
 8007c94:	e002      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007c96:	bf00      	nop
 8007c98:	e000      	b.n	8007c9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cb2:	4a39      	ldr	r2, [pc, #228]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007cb8:	e003      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cbe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007cc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007cce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cd8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	d060      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007cea:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007cee:	d039      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007cf0:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007cf4:	d832      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007cfa:	d035      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8007cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007d00:	d82c      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d06:	d031      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0c:	d826      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007d0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d12:	d02d      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007d14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007d18:	d820      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d1e:	d012      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007d20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d24:	d81a      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d024      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007d2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d2e:	d115      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d34:	3308      	adds	r3, #8
 8007d36:	2101      	movs	r1, #1
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f002 f82d 	bl	8009d98 <RCCEx_PLL2_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d44:	e017      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d4a:	3328      	adds	r3, #40	@ 0x28
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f002 f8d4 	bl	8009efc <RCCEx_PLL3_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d5a:	e00c      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d62:	e008      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007d64:	bf00      	nop
 8007d66:	e006      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007d68:	bf00      	nop
 8007d6a:	e004      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007d6c:	bf00      	nop
 8007d6e:	e002      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007d70:	bf00      	nop
 8007d72:	e000      	b.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d10e      	bne.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d7e:	4b06      	ldr	r3, [pc, #24]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d82:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007d8e:	4a02      	ldr	r2, [pc, #8]	@ (8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007d90:	430b      	orrs	r3, r1
 8007d92:	6593      	str	r3, [r2, #88]	@ 0x58
 8007d94:	e006      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007d96:	bf00      	nop
 8007d98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007da0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007db0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007db4:	2300      	movs	r3, #0
 8007db6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007dba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	d037      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dce:	d00e      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007dd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dd4:	d816      	bhi.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d018      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007dda:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dde:	d111      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007de0:	4bc4      	ldr	r3, [pc, #784]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de4:	4ac3      	ldr	r2, [pc, #780]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007dec:	e00f      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df2:	3308      	adds	r3, #8
 8007df4:	2101      	movs	r1, #1
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 ffce 	bl	8009d98 <RCCEx_PLL2_Config>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e02:	e004      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e0a:	e000      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8007e0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e16:	4bb7      	ldr	r3, [pc, #732]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e1a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007e1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007e24:	4ab3      	ldr	r2, [pc, #716]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e26:	430b      	orrs	r3, r1
 8007e28:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e2a:	e003      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007e4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007e4e:	460b      	mov	r3, r1
 8007e50:	4313      	orrs	r3, r2
 8007e52:	d039      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	d81c      	bhi.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e64:	08007ea1 	.word	0x08007ea1
 8007e68:	08007e75 	.word	0x08007e75
 8007e6c:	08007e83 	.word	0x08007e83
 8007e70:	08007ea1 	.word	0x08007ea1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e74:	4b9f      	ldr	r3, [pc, #636]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e78:	4a9e      	ldr	r2, [pc, #632]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e80:	e00f      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e86:	3308      	adds	r3, #8
 8007e88:	2102      	movs	r1, #2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 ff84 	bl	8009d98 <RCCEx_PLL2_Config>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007e96:	e004      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e9e:	e000      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007ea0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d10a      	bne.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007eaa:	4b92      	ldr	r3, [pc, #584]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007eae:	f023 0103 	bic.w	r1, r3, #3
 8007eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eb8:	4a8e      	ldr	r2, [pc, #568]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ebe:	e003      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ec0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ec4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007ed4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ede:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	f000 8099 	beq.w	800801c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eea:	4b83      	ldr	r3, [pc, #524]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a82      	ldr	r2, [pc, #520]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ef4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ef6:	f7f9 fa61 	bl	80013bc <HAL_GetTick>
 8007efa:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007efe:	e00b      	b.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f00:	f7f9 fa5c 	bl	80013bc <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	2b64      	cmp	r3, #100	@ 0x64
 8007f0e:	d903      	bls.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007f10:	2303      	movs	r3, #3
 8007f12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f16:	e005      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f18:	4b77      	ldr	r3, [pc, #476]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0ed      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007f24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d173      	bne.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f2c:	4b71      	ldr	r3, [pc, #452]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f38:	4053      	eors	r3, r2
 8007f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d015      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f42:	4b6c      	ldr	r3, [pc, #432]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f4a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f4e:	4b69      	ldr	r3, [pc, #420]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f52:	4a68      	ldr	r2, [pc, #416]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f58:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f5a:	4b66      	ldr	r3, [pc, #408]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f5e:	4a65      	ldr	r2, [pc, #404]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f64:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f66:	4a63      	ldr	r2, [pc, #396]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f7a:	d118      	bne.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7c:	f7f9 fa1e 	bl	80013bc <HAL_GetTick>
 8007f80:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f84:	e00d      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f86:	f7f9 fa19 	bl	80013bc <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007f90:	1ad2      	subs	r2, r2, r3
 8007f92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d903      	bls.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8007fa0:	e005      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fa2:	4b54      	ldr	r3, [pc, #336]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0eb      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007fae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d129      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fc6:	d10e      	bne.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007fc8:	4b4a      	ldr	r3, [pc, #296]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007fd8:	091a      	lsrs	r2, r3, #4
 8007fda:	4b48      	ldr	r3, [pc, #288]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	4a45      	ldr	r2, [pc, #276]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fe0:	430b      	orrs	r3, r1
 8007fe2:	6113      	str	r3, [r2, #16]
 8007fe4:	e005      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007fe6:	4b43      	ldr	r3, [pc, #268]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	4a42      	ldr	r2, [pc, #264]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007fec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007ff0:	6113      	str	r3, [r2, #16]
 8007ff2:	4b40      	ldr	r3, [pc, #256]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ff4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008002:	4a3c      	ldr	r2, [pc, #240]	@ (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008004:	430b      	orrs	r3, r1
 8008006:	6713      	str	r3, [r2, #112]	@ 0x70
 8008008:	e008      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800800a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800800e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008012:	e003      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008018:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800801c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f002 0301 	and.w	r3, r2, #1
 8008028:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800802c:	2300      	movs	r3, #0
 800802e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008032:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008036:	460b      	mov	r3, r1
 8008038:	4313      	orrs	r3, r2
 800803a:	f000 8090 	beq.w	800815e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800803e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008046:	2b28      	cmp	r3, #40	@ 0x28
 8008048:	d870      	bhi.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800804a:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008135 	.word	0x08008135
 8008054:	0800812d 	.word	0x0800812d
 8008058:	0800812d 	.word	0x0800812d
 800805c:	0800812d 	.word	0x0800812d
 8008060:	0800812d 	.word	0x0800812d
 8008064:	0800812d 	.word	0x0800812d
 8008068:	0800812d 	.word	0x0800812d
 800806c:	0800812d 	.word	0x0800812d
 8008070:	08008101 	.word	0x08008101
 8008074:	0800812d 	.word	0x0800812d
 8008078:	0800812d 	.word	0x0800812d
 800807c:	0800812d 	.word	0x0800812d
 8008080:	0800812d 	.word	0x0800812d
 8008084:	0800812d 	.word	0x0800812d
 8008088:	0800812d 	.word	0x0800812d
 800808c:	0800812d 	.word	0x0800812d
 8008090:	08008117 	.word	0x08008117
 8008094:	0800812d 	.word	0x0800812d
 8008098:	0800812d 	.word	0x0800812d
 800809c:	0800812d 	.word	0x0800812d
 80080a0:	0800812d 	.word	0x0800812d
 80080a4:	0800812d 	.word	0x0800812d
 80080a8:	0800812d 	.word	0x0800812d
 80080ac:	0800812d 	.word	0x0800812d
 80080b0:	08008135 	.word	0x08008135
 80080b4:	0800812d 	.word	0x0800812d
 80080b8:	0800812d 	.word	0x0800812d
 80080bc:	0800812d 	.word	0x0800812d
 80080c0:	0800812d 	.word	0x0800812d
 80080c4:	0800812d 	.word	0x0800812d
 80080c8:	0800812d 	.word	0x0800812d
 80080cc:	0800812d 	.word	0x0800812d
 80080d0:	08008135 	.word	0x08008135
 80080d4:	0800812d 	.word	0x0800812d
 80080d8:	0800812d 	.word	0x0800812d
 80080dc:	0800812d 	.word	0x0800812d
 80080e0:	0800812d 	.word	0x0800812d
 80080e4:	0800812d 	.word	0x0800812d
 80080e8:	0800812d 	.word	0x0800812d
 80080ec:	0800812d 	.word	0x0800812d
 80080f0:	08008135 	.word	0x08008135
 80080f4:	58024400 	.word	0x58024400
 80080f8:	58024800 	.word	0x58024800
 80080fc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008104:	3308      	adds	r3, #8
 8008106:	2101      	movs	r1, #1
 8008108:	4618      	mov	r0, r3
 800810a:	f001 fe45 	bl	8009d98 <RCCEx_PLL2_Config>
 800810e:	4603      	mov	r3, r0
 8008110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008114:	e00f      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800811a:	3328      	adds	r3, #40	@ 0x28
 800811c:	2101      	movs	r1, #1
 800811e:	4618      	mov	r0, r3
 8008120:	f001 feec 	bl	8009efc <RCCEx_PLL3_Config>
 8008124:	4603      	mov	r3, r0
 8008126:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800812a:	e004      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008132:	e000      	b.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008136:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800813a:	2b00      	cmp	r3, #0
 800813c:	d10b      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800813e:	4bc0      	ldr	r3, [pc, #768]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008142:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800814a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800814e:	4abc      	ldr	r2, [pc, #752]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008150:	430b      	orrs	r3, r1
 8008152:	6553      	str	r3, [r2, #84]	@ 0x54
 8008154:	e003      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008156:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800815a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008166:	f002 0302 	and.w	r3, r2, #2
 800816a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800816e:	2300      	movs	r3, #0
 8008170:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008174:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008178:	460b      	mov	r3, r1
 800817a:	4313      	orrs	r3, r2
 800817c:	d043      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800817e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008186:	2b05      	cmp	r3, #5
 8008188:	d824      	bhi.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800818a:	a201      	add	r2, pc, #4	@ (adr r2, 8008190 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800818c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008190:	080081dd 	.word	0x080081dd
 8008194:	080081a9 	.word	0x080081a9
 8008198:	080081bf 	.word	0x080081bf
 800819c:	080081dd 	.word	0x080081dd
 80081a0:	080081dd 	.word	0x080081dd
 80081a4:	080081dd 	.word	0x080081dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ac:	3308      	adds	r3, #8
 80081ae:	2101      	movs	r1, #1
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 fdf1 	bl	8009d98 <RCCEx_PLL2_Config>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80081bc:	e00f      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c2:	3328      	adds	r3, #40	@ 0x28
 80081c4:	2101      	movs	r1, #1
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 fe98 	bl	8009efc <RCCEx_PLL3_Config>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80081d2:	e004      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081da:	e000      	b.n	80081de <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80081dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10b      	bne.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80081e6:	4b96      	ldr	r3, [pc, #600]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80081e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ea:	f023 0107 	bic.w	r1, r3, #7
 80081ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081f6:	4a92      	ldr	r2, [pc, #584]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80081f8:	430b      	orrs	r3, r1
 80081fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80081fc:	e003      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008202:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	f002 0304 	and.w	r3, r2, #4
 8008212:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008216:	2300      	movs	r3, #0
 8008218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800821c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008220:	460b      	mov	r3, r1
 8008222:	4313      	orrs	r3, r2
 8008224:	d043      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008226:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800822a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800822e:	2b05      	cmp	r3, #5
 8008230:	d824      	bhi.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008232:	a201      	add	r2, pc, #4	@ (adr r2, 8008238 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008285 	.word	0x08008285
 800823c:	08008251 	.word	0x08008251
 8008240:	08008267 	.word	0x08008267
 8008244:	08008285 	.word	0x08008285
 8008248:	08008285 	.word	0x08008285
 800824c:	08008285 	.word	0x08008285
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008254:	3308      	adds	r3, #8
 8008256:	2101      	movs	r1, #1
 8008258:	4618      	mov	r0, r3
 800825a:	f001 fd9d 	bl	8009d98 <RCCEx_PLL2_Config>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008264:	e00f      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800826a:	3328      	adds	r3, #40	@ 0x28
 800826c:	2101      	movs	r1, #1
 800826e:	4618      	mov	r0, r3
 8008270:	f001 fe44 	bl	8009efc <RCCEx_PLL3_Config>
 8008274:	4603      	mov	r3, r0
 8008276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800827a:	e004      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008282:	e000      	b.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008286:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800828e:	4b6c      	ldr	r3, [pc, #432]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008292:	f023 0107 	bic.w	r1, r3, #7
 8008296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800829a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800829e:	4a68      	ldr	r2, [pc, #416]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80082a0:	430b      	orrs	r3, r1
 80082a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	f002 0320 	and.w	r3, r2, #32
 80082ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80082be:	2300      	movs	r3, #0
 80082c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80082c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80082c8:	460b      	mov	r3, r1
 80082ca:	4313      	orrs	r3, r2
 80082cc:	d055      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80082ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80082d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082da:	d033      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80082dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80082e0:	d82c      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80082e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082e6:	d02f      	beq.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80082e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082ec:	d826      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80082ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082f2:	d02b      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80082f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80082f8:	d820      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80082fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082fe:	d012      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008304:	d81a      	bhi.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d022      	beq.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800830a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800830e:	d115      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008310:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008314:	3308      	adds	r3, #8
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f001 fd3d 	bl	8009d98 <RCCEx_PLL2_Config>
 800831e:	4603      	mov	r3, r0
 8008320:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008324:	e015      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008326:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800832a:	3328      	adds	r3, #40	@ 0x28
 800832c:	2102      	movs	r1, #2
 800832e:	4618      	mov	r0, r3
 8008330:	f001 fde4 	bl	8009efc <RCCEx_PLL3_Config>
 8008334:	4603      	mov	r3, r0
 8008336:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800833a:	e00a      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008342:	e006      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008344:	bf00      	nop
 8008346:	e004      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008348:	bf00      	nop
 800834a:	e002      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800834c:	bf00      	nop
 800834e:	e000      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008352:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10b      	bne.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800835a:	4b39      	ldr	r3, [pc, #228]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800835c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800835e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008362:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008366:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800836a:	4a35      	ldr	r2, [pc, #212]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800836c:	430b      	orrs	r3, r1
 800836e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008370:	e003      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008372:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008376:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800837a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800838a:	2300      	movs	r3, #0
 800838c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008390:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008394:	460b      	mov	r3, r1
 8008396:	4313      	orrs	r3, r2
 8008398:	d058      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800839a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80083a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80083a6:	d033      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80083a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80083ac:	d82c      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80083ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b2:	d02f      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80083b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083b8:	d826      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80083ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083be:	d02b      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80083c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80083c4:	d820      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80083c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ca:	d012      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80083cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083d0:	d81a      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d022      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80083d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083da:	d115      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80083dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e0:	3308      	adds	r3, #8
 80083e2:	2100      	movs	r1, #0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 fcd7 	bl	8009d98 <RCCEx_PLL2_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80083f0:	e015      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80083f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f6:	3328      	adds	r3, #40	@ 0x28
 80083f8:	2102      	movs	r1, #2
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 fd7e 	bl	8009efc <RCCEx_PLL3_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008406:	e00a      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800840e:	e006      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008410:	bf00      	nop
 8008412:	e004      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008414:	bf00      	nop
 8008416:	e002      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008418:	bf00      	nop
 800841a:	e000      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800841c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800841e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10e      	bne.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008426:	4b06      	ldr	r3, [pc, #24]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800842e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008436:	4a02      	ldr	r2, [pc, #8]	@ (8008440 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008438:	430b      	orrs	r3, r1
 800843a:	6593      	str	r3, [r2, #88]	@ 0x58
 800843c:	e006      	b.n	800844c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800843e:	bf00      	nop
 8008440:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008444:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008448:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800844c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800845c:	2300      	movs	r3, #0
 800845e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008462:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008466:	460b      	mov	r3, r1
 8008468:	4313      	orrs	r3, r2
 800846a:	d055      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800846c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008470:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008474:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008478:	d033      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800847a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800847e:	d82c      	bhi.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008484:	d02f      	beq.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800848a:	d826      	bhi.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800848c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008490:	d02b      	beq.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008492:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008496:	d820      	bhi.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008498:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800849c:	d012      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800849e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084a2:	d81a      	bhi.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d022      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80084a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ac:	d115      	bne.n	80084da <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b2:	3308      	adds	r3, #8
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f001 fc6e 	bl	8009d98 <RCCEx_PLL2_Config>
 80084bc:	4603      	mov	r3, r0
 80084be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084c2:	e015      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c8:	3328      	adds	r3, #40	@ 0x28
 80084ca:	2102      	movs	r1, #2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f001 fd15 	bl	8009efc <RCCEx_PLL3_Config>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084d8:	e00a      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084e0:	e006      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80084e2:	bf00      	nop
 80084e4:	e004      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80084e6:	bf00      	nop
 80084e8:	e002      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80084ea:	bf00      	nop
 80084ec:	e000      	b.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80084ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10b      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80084f8:	4ba1      	ldr	r3, [pc, #644]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80084fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008504:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008508:	4a9d      	ldr	r2, [pc, #628]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800850a:	430b      	orrs	r3, r1
 800850c:	6593      	str	r3, [r2, #88]	@ 0x58
 800850e:	e003      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008510:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008514:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f002 0308 	and.w	r3, r2, #8
 8008524:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008528:	2300      	movs	r3, #0
 800852a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800852e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008532:	460b      	mov	r3, r1
 8008534:	4313      	orrs	r3, r2
 8008536:	d01e      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008538:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800853c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008544:	d10c      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008546:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800854a:	3328      	adds	r3, #40	@ 0x28
 800854c:	2102      	movs	r1, #2
 800854e:	4618      	mov	r0, r3
 8008550:	f001 fcd4 	bl	8009efc <RCCEx_PLL3_Config>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008560:	4b87      	ldr	r3, [pc, #540]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008564:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008568:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800856c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008570:	4a83      	ldr	r2, [pc, #524]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008572:	430b      	orrs	r3, r1
 8008574:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f002 0310 	and.w	r3, r2, #16
 8008582:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008586:	2300      	movs	r3, #0
 8008588:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800858c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008590:	460b      	mov	r3, r1
 8008592:	4313      	orrs	r3, r2
 8008594:	d01e      	beq.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008596:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800859a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800859e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085a2:	d10c      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a8:	3328      	adds	r3, #40	@ 0x28
 80085aa:	2102      	movs	r1, #2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 fca5 	bl	8009efc <RCCEx_PLL3_Config>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085be:	4b70      	ldr	r3, [pc, #448]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80085c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80085c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085ce:	4a6c      	ldr	r2, [pc, #432]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80085d0:	430b      	orrs	r3, r1
 80085d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80085e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085e4:	2300      	movs	r3, #0
 80085e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80085ee:	460b      	mov	r3, r1
 80085f0:	4313      	orrs	r3, r2
 80085f2:	d03e      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80085f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80085fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008600:	d022      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008602:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008606:	d81b      	bhi.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800860c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008610:	d00b      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008612:	e015      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008618:	3308      	adds	r3, #8
 800861a:	2100      	movs	r1, #0
 800861c:	4618      	mov	r0, r3
 800861e:	f001 fbbb 	bl	8009d98 <RCCEx_PLL2_Config>
 8008622:	4603      	mov	r3, r0
 8008624:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008628:	e00f      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800862a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800862e:	3328      	adds	r3, #40	@ 0x28
 8008630:	2102      	movs	r1, #2
 8008632:	4618      	mov	r0, r3
 8008634:	f001 fc62 	bl	8009efc <RCCEx_PLL3_Config>
 8008638:	4603      	mov	r3, r0
 800863a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800863e:	e004      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008646:	e000      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800864a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10b      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008652:	4b4b      	ldr	r3, [pc, #300]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008656:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800865a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800865e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008662:	4a47      	ldr	r2, [pc, #284]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008664:	430b      	orrs	r3, r1
 8008666:	6593      	str	r3, [r2, #88]	@ 0x58
 8008668:	e003      	b.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800866a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800866e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800867e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008680:	2300      	movs	r3, #0
 8008682:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008684:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008688:	460b      	mov	r3, r1
 800868a:	4313      	orrs	r3, r2
 800868c:	d03b      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800868e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008696:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800869a:	d01f      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800869c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80086a0:	d818      	bhi.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80086a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086a6:	d003      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80086a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086ac:	d007      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80086ae:	e011      	b.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b0:	4b33      	ldr	r3, [pc, #204]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b4:	4a32      	ldr	r2, [pc, #200]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80086bc:	e00f      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086c2:	3328      	adds	r3, #40	@ 0x28
 80086c4:	2101      	movs	r1, #1
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 fc18 	bl	8009efc <RCCEx_PLL3_Config>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80086d2:	e004      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80086da:	e000      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80086dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086de:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10b      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80086e6:	4b26      	ldr	r3, [pc, #152]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80086ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086f6:	4a22      	ldr	r2, [pc, #136]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80086f8:	430b      	orrs	r3, r1
 80086fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80086fc:	e003      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008702:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800870a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008712:	673b      	str	r3, [r7, #112]	@ 0x70
 8008714:	2300      	movs	r3, #0
 8008716:	677b      	str	r3, [r7, #116]	@ 0x74
 8008718:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800871c:	460b      	mov	r3, r1
 800871e:	4313      	orrs	r3, r2
 8008720:	d034      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008722:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008726:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800872c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008730:	d007      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008732:	e011      	b.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008734:	4b12      	ldr	r3, [pc, #72]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008738:	4a11      	ldr	r2, [pc, #68]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800873a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800873e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008740:	e00e      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008742:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008746:	3308      	adds	r3, #8
 8008748:	2102      	movs	r1, #2
 800874a:	4618      	mov	r0, r3
 800874c:	f001 fb24 	bl	8009d98 <RCCEx_PLL2_Config>
 8008750:	4603      	mov	r3, r0
 8008752:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008756:	e003      	b.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800875e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008760:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10d      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008768:	4b05      	ldr	r3, [pc, #20]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800876a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800876c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008770:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008776:	4a02      	ldr	r2, [pc, #8]	@ (8008780 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008778:	430b      	orrs	r3, r1
 800877a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800877c:	e006      	b.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800877e:	bf00      	nop
 8008780:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008784:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008788:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800878c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008794:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008798:	66bb      	str	r3, [r7, #104]	@ 0x68
 800879a:	2300      	movs	r3, #0
 800879c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800879e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80087a2:	460b      	mov	r3, r1
 80087a4:	4313      	orrs	r3, r2
 80087a6:	d00c      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087ac:	3328      	adds	r3, #40	@ 0x28
 80087ae:	2102      	movs	r1, #2
 80087b0:	4618      	mov	r0, r3
 80087b2:	f001 fba3 	bl	8009efc <RCCEx_PLL3_Config>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80087c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80087ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80087d0:	2300      	movs	r3, #0
 80087d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80087d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80087d8:	460b      	mov	r3, r1
 80087da:	4313      	orrs	r3, r2
 80087dc:	d038      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80087de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087ea:	d018      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80087ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087f0:	d811      	bhi.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80087f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087f6:	d014      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80087f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087fc:	d80b      	bhi.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d011      	beq.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008802:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008806:	d106      	bne.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008808:	4bc3      	ldr	r3, [pc, #780]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800880a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880c:	4ac2      	ldr	r2, [pc, #776]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800880e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008814:	e008      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800881c:	e004      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800881e:	bf00      	nop
 8008820:	e002      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008822:	bf00      	nop
 8008824:	e000      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008826:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008828:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10b      	bne.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008830:	4bb9      	ldr	r3, [pc, #740]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008834:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800883c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008840:	4ab5      	ldr	r2, [pc, #724]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008842:	430b      	orrs	r3, r1
 8008844:	6553      	str	r3, [r2, #84]	@ 0x54
 8008846:	e003      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008848:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800884c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008850:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800885c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800885e:	2300      	movs	r3, #0
 8008860:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008862:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008866:	460b      	mov	r3, r1
 8008868:	4313      	orrs	r3, r2
 800886a:	d009      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800886c:	4baa      	ldr	r3, [pc, #680]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800886e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008870:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008878:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800887a:	4aa7      	ldr	r2, [pc, #668]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800887c:	430b      	orrs	r3, r1
 800887e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008888:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800888c:	653b      	str	r3, [r7, #80]	@ 0x50
 800888e:	2300      	movs	r3, #0
 8008890:	657b      	str	r3, [r7, #84]	@ 0x54
 8008892:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008896:	460b      	mov	r3, r1
 8008898:	4313      	orrs	r3, r2
 800889a:	d009      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800889c:	4b9e      	ldr	r3, [pc, #632]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800889e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088a0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80088a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088aa:	4a9b      	ldr	r2, [pc, #620]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80088ac:	430b      	orrs	r3, r1
 80088ae:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 80088b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80088bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088be:	2300      	movs	r3, #0
 80088c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80088c6:	460b      	mov	r3, r1
 80088c8:	4313      	orrs	r3, r2
 80088ca:	d009      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 80088cc:	4b92      	ldr	r3, [pc, #584]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80088ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088d0:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 80088d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088da:	4a8f      	ldr	r2, [pc, #572]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80088dc:	430b      	orrs	r3, r1
 80088de:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80088e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80088ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80088ee:	2300      	movs	r3, #0
 80088f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80088f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80088f6:	460b      	mov	r3, r1
 80088f8:	4313      	orrs	r3, r2
 80088fa:	d00e      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088fc:	4b86      	ldr	r3, [pc, #536]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	4a85      	ldr	r2, [pc, #532]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008902:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008906:	6113      	str	r3, [r2, #16]
 8008908:	4b83      	ldr	r3, [pc, #524]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800890a:	6919      	ldr	r1, [r3, #16]
 800890c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008910:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008914:	4a80      	ldr	r2, [pc, #512]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008916:	430b      	orrs	r3, r1
 8008918:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800891a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800891e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008922:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008928:	2300      	movs	r3, #0
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800892c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008930:	460b      	mov	r3, r1
 8008932:	4313      	orrs	r3, r2
 8008934:	d009      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008936:	4b78      	ldr	r3, [pc, #480]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800893a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800893e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008944:	4a74      	ldr	r2, [pc, #464]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008946:	430b      	orrs	r3, r1
 8008948:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800894a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008956:	633b      	str	r3, [r7, #48]	@ 0x30
 8008958:	2300      	movs	r3, #0
 800895a:	637b      	str	r3, [r7, #52]	@ 0x34
 800895c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008960:	460b      	mov	r3, r1
 8008962:	4313      	orrs	r3, r2
 8008964:	d00a      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008966:	4b6c      	ldr	r3, [pc, #432]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800896e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008976:	4a68      	ldr	r2, [pc, #416]	@ (8008b18 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008978:	430b      	orrs	r3, r1
 800897a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800897c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	2100      	movs	r1, #0
 8008986:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800898e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008992:	460b      	mov	r3, r1
 8008994:	4313      	orrs	r3, r2
 8008996:	d011      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008998:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800899c:	3308      	adds	r3, #8
 800899e:	2100      	movs	r1, #0
 80089a0:	4618      	mov	r0, r3
 80089a2:	f001 f9f9 	bl	8009d98 <RCCEx_PLL2_Config>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80089ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80089bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	2100      	movs	r1, #0
 80089c6:	6239      	str	r1, [r7, #32]
 80089c8:	f003 0302 	and.w	r3, r3, #2
 80089cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089d2:	460b      	mov	r3, r1
 80089d4:	4313      	orrs	r3, r2
 80089d6:	d011      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089dc:	3308      	adds	r3, #8
 80089de:	2101      	movs	r1, #1
 80089e0:	4618      	mov	r0, r3
 80089e2:	f001 f9d9 	bl	8009d98 <RCCEx_PLL2_Config>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80089ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80089fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a04:	2100      	movs	r1, #0
 8008a06:	61b9      	str	r1, [r7, #24]
 8008a08:	f003 0304 	and.w	r3, r3, #4
 8008a0c:	61fb      	str	r3, [r7, #28]
 8008a0e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a12:	460b      	mov	r3, r1
 8008a14:	4313      	orrs	r3, r2
 8008a16:	d011      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	2102      	movs	r1, #2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f001 f9b9 	bl	8009d98 <RCCEx_PLL2_Config>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008a2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d003      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a34:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a38:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008a3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a44:	2100      	movs	r1, #0
 8008a46:	6139      	str	r1, [r7, #16]
 8008a48:	f003 0308 	and.w	r3, r3, #8
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a52:	460b      	mov	r3, r1
 8008a54:	4313      	orrs	r3, r2
 8008a56:	d011      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a5c:	3328      	adds	r3, #40	@ 0x28
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f001 fa4b 	bl	8009efc <RCCEx_PLL3_Config>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008a6c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d003      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008a7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	2100      	movs	r1, #0
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	60fb      	str	r3, [r7, #12]
 8008a8e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008a92:	460b      	mov	r3, r1
 8008a94:	4313      	orrs	r3, r2
 8008a96:	d011      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a9c:	3328      	adds	r3, #40	@ 0x28
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f001 fa2b 	bl	8009efc <RCCEx_PLL3_Config>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008aac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ab8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008abc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	6039      	str	r1, [r7, #0]
 8008ac8:	f003 0320 	and.w	r3, r3, #32
 8008acc:	607b      	str	r3, [r7, #4]
 8008ace:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008ad2:	460b      	mov	r3, r1
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	d011      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008adc:	3328      	adds	r3, #40	@ 0x28
 8008ade:	2102      	movs	r1, #2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f001 fa0b 	bl	8009efc <RCCEx_PLL3_Config>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008aec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008af8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8008afc:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d101      	bne.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008b04:	2300      	movs	r3, #0
 8008b06:	e000      	b.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008b10:	46bd      	mov	sp, r7
 8008b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b16:	bf00      	nop
 8008b18:	58024400 	.word	0x58024400

08008b1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b090      	sub	sp, #64	@ 0x40
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	f040 8094 	bne.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008b34:	4b97      	ldr	r3, [pc, #604]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b38:	f003 0307 	and.w	r3, r3, #7
 8008b3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	f200 8087 	bhi.w	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008b46:	a201      	add	r2, pc, #4	@ (adr r2, 8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008b61 	.word	0x08008b61
 8008b50:	08008b89 	.word	0x08008b89
 8008b54:	08008bb1 	.word	0x08008bb1
 8008b58:	08008c4d 	.word	0x08008c4d
 8008b5c:	08008bd9 	.word	0x08008bd9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b60:	4b8c      	ldr	r3, [pc, #560]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b6c:	d108      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 ff68 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b7c:	f000 bc97 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b84:	f000 bc93 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b88:	4b82      	ldr	r3, [pc, #520]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b94:	d108      	bne.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b96:	f107 0318 	add.w	r3, r7, #24
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fcac 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba4:	f000 bc83 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bac:	f000 bc7f 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bb0:	4b78      	ldr	r3, [pc, #480]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bbc:	d108      	bne.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bbe:	f107 030c 	add.w	r3, r7, #12
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fdec 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bcc:	f000 bc6f 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd4:	f000 bc6b 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bd8:	4b6e      	ldr	r3, [pc, #440]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008be0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008be2:	4b6c      	ldr	r3, [pc, #432]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0304 	and.w	r3, r3, #4
 8008bea:	2b04      	cmp	r3, #4
 8008bec:	d10c      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d109      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008bf4:	4b67      	ldr	r3, [pc, #412]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	08db      	lsrs	r3, r3, #3
 8008bfa:	f003 0303 	and.w	r3, r3, #3
 8008bfe:	4a66      	ldr	r2, [pc, #408]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008c00:	fa22 f303 	lsr.w	r3, r2, r3
 8008c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c06:	e01f      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c08:	4b62      	ldr	r3, [pc, #392]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c14:	d106      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c1c:	d102      	bne.n	8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c1e:	4b5f      	ldr	r3, [pc, #380]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c22:	e011      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c24:	4b5b      	ldr	r3, [pc, #364]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c30:	d106      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c38:	d102      	bne.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c3a:	4b59      	ldr	r3, [pc, #356]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c3e:	e003      	b.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008c44:	f000 bc33 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008c48:	f000 bc31 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c4c:	4b55      	ldr	r3, [pc, #340]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c50:	f000 bc2d 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c58:	f000 bc29 	b.w	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c60:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008c64:	430b      	orrs	r3, r1
 8008c66:	f040 809f 	bne.w	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8008c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008c72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c7a:	d04d      	beq.n	8008d18 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c82:	f200 8084 	bhi.w	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c8a:	d07d      	beq.n	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c90:	d87d      	bhi.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	2b80      	cmp	r3, #128	@ 0x80
 8008c96:	d02d      	beq.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c9a:	2b80      	cmp	r3, #128	@ 0x80
 8008c9c:	d877      	bhi.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca6:	2b40      	cmp	r3, #64	@ 0x40
 8008ca8:	d012      	beq.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008caa:	e070      	b.n	8008d8e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cac:	4b39      	ldr	r3, [pc, #228]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008cb8:	d107      	bne.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fec2 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cc8:	e3f1      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cce:	e3ee      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cd0:	4b30      	ldr	r3, [pc, #192]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cdc:	d107      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cde:	f107 0318 	add.w	r3, r7, #24
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f000 fc08 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cec:	e3df      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cf2:	e3dc      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008cf4:	4b27      	ldr	r3, [pc, #156]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d00:	d107      	bne.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d02:	f107 030c 	add.w	r3, r7, #12
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fd4a 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d10:	e3cd      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d16:	e3ca      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d18:	4b1e      	ldr	r3, [pc, #120]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008d20:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d22:	4b1c      	ldr	r3, [pc, #112]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f003 0304 	and.w	r3, r3, #4
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d10c      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8008d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d109      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d34:	4b17      	ldr	r3, [pc, #92]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	08db      	lsrs	r3, r3, #3
 8008d3a:	f003 0303 	and.w	r3, r3, #3
 8008d3e:	4a16      	ldr	r2, [pc, #88]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008d40:	fa22 f303 	lsr.w	r3, r2, r3
 8008d44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d46:	e01e      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d48:	4b12      	ldr	r3, [pc, #72]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d54:	d106      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8008d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d5c:	d102      	bne.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d62:	e010      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d64:	4b0b      	ldr	r3, [pc, #44]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d70:	d106      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d78:	d102      	bne.n	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008d7a:	4b09      	ldr	r3, [pc, #36]	@ (8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d7e:	e002      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008d80:	2300      	movs	r3, #0
 8008d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008d84:	e393      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008d86:	e392      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d88:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d8c:	e38f      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d92:	e38c      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008d94:	58024400 	.word	0x58024400
 8008d98:	03d09000 	.word	0x03d09000
 8008d9c:	003d0900 	.word	0x003d0900
 8008da0:	007a1200 	.word	0x007a1200
 8008da4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008db0:	430b      	orrs	r3, r1
 8008db2:	f040 809c 	bne.w	8008eee <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008db6:	4b9e      	ldr	r3, [pc, #632]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dba:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008dbe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dc6:	d054      	beq.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008dce:	f200 808b 	bhi.w	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008dd8:	f000 8083 	beq.w	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dde:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008de2:	f200 8081 	bhi.w	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008de8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dec:	d02f      	beq.n	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8008dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008df4:	d878      	bhi.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d004      	beq.n	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e02:	d012      	beq.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008e04:	e070      	b.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e06:	4b8a      	ldr	r3, [pc, #552]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e12:	d107      	bne.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fe15 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e22:	e344      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e28:	e341      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e2a:	4b81      	ldr	r3, [pc, #516]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e36:	d107      	bne.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e38:	f107 0318 	add.w	r3, r7, #24
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fb5b 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e46:	e332      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e4c:	e32f      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e4e:	4b78      	ldr	r3, [pc, #480]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e5a:	d107      	bne.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e5c:	f107 030c 	add.w	r3, r7, #12
 8008e60:	4618      	mov	r0, r3
 8008e62:	f000 fc9d 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e6a:	e320      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e70:	e31d      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e72:	4b6f      	ldr	r3, [pc, #444]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e7c:	4b6c      	ldr	r3, [pc, #432]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d10c      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d109      	bne.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e8e:	4b68      	ldr	r3, [pc, #416]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	08db      	lsrs	r3, r3, #3
 8008e94:	f003 0303 	and.w	r3, r3, #3
 8008e98:	4a66      	ldr	r2, [pc, #408]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ea0:	e01e      	b.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ea2:	4b63      	ldr	r3, [pc, #396]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eae:	d106      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008eb6:	d102      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008eb8:	4b5f      	ldr	r3, [pc, #380]	@ (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ebc:	e010      	b.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ebe:	4b5c      	ldr	r3, [pc, #368]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008eca:	d106      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed2:	d102      	bne.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008ed4:	4b59      	ldr	r3, [pc, #356]	@ (800903c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ed8:	e002      	b.n	8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8008ede:	e2e6      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008ee0:	e2e5      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008ee2:	4b57      	ldr	r3, [pc, #348]	@ (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee6:	e2e2      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008eec:	e2df      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ef2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008ef6:	430b      	orrs	r3, r1
 8008ef8:	f040 80a7 	bne.w	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008efc:	4b4c      	ldr	r3, [pc, #304]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f00:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008f04:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f0c:	d055      	beq.n	8008fba <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f14:	f200 8096 	bhi.w	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f1e:	f000 8084 	beq.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8008f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f24:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f28:	f200 808c 	bhi.w	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f32:	d030      	beq.n	8008f96 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f3a:	f200 8083 	bhi.w	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d004      	beq.n	8008f4e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f4a:	d012      	beq.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8008f4c:	e07a      	b.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f4e:	4b38      	ldr	r3, [pc, #224]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f5a:	d107      	bne.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 fd71 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f6a:	e2a0      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f70:	e29d      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f72:	4b2f      	ldr	r3, [pc, #188]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f7e:	d107      	bne.n	8008f90 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f80:	f107 0318 	add.w	r3, r7, #24
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 fab7 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f8e:	e28e      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f90:	2300      	movs	r3, #0
 8008f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f94:	e28b      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f96:	4b26      	ldr	r3, [pc, #152]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fa2:	d107      	bne.n	8008fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fa4:	f107 030c 	add.w	r3, r7, #12
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fbf9 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fb2:	e27c      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fb8:	e279      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fba:	4b1d      	ldr	r3, [pc, #116]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fbe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fc2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d10c      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d109      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008fd6:	4b16      	ldr	r3, [pc, #88]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	08db      	lsrs	r3, r3, #3
 8008fdc:	f003 0303 	and.w	r3, r3, #3
 8008fe0:	4a14      	ldr	r2, [pc, #80]	@ (8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fe8:	e01e      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fea:	4b11      	ldr	r3, [pc, #68]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ff6:	d106      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ffa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ffe:	d102      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009000:	4b0d      	ldr	r3, [pc, #52]	@ (8009038 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009004:	e010      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009006:	4b0a      	ldr	r3, [pc, #40]	@ (8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800900e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009012:	d106      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800901a:	d102      	bne.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800901c:	4b07      	ldr	r3, [pc, #28]	@ (800903c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800901e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009020:	e002      	b.n	8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009026:	e242      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009028:	e241      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800902a:	4b05      	ldr	r3, [pc, #20]	@ (8009040 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800902c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800902e:	e23e      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009030:	58024400 	.word	0x58024400
 8009034:	03d09000 	.word	0x03d09000
 8009038:	003d0900 	.word	0x003d0900
 800903c:	007a1200 	.word	0x007a1200
 8009040:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009048:	e231      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800904a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800904e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009052:	430b      	orrs	r3, r1
 8009054:	f040 8085 	bne.w	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009058:	4b9c      	ldr	r3, [pc, #624]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800905a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800905c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009060:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009068:	d06b      	beq.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800906a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800906c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009070:	d874      	bhi.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009074:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009078:	d056      	beq.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800907a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009080:	d86c      	bhi.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009084:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009088:	d03b      	beq.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800908a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009090:	d864      	bhi.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009098:	d021      	beq.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800909a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090a0:	d85c      	bhi.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80090a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d004      	beq.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090ae:	d004      	beq.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80090b0:	e054      	b.n	800915c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80090b2:	f7fe fb49 	bl	8007748 <HAL_RCC_GetPCLK1Freq>
 80090b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090b8:	e1f9      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ba:	4b84      	ldr	r3, [pc, #528]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80090c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090c6:	d107      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090c8:	f107 0318 	add.w	r3, r7, #24
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fa13 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090d6:	e1ea      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090dc:	e1e7      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090de:	4b7b      	ldr	r3, [pc, #492]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ea:	d107      	bne.n	80090fc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ec:	f107 030c 	add.w	r3, r7, #12
 80090f0:	4618      	mov	r0, r3
 80090f2:	f000 fb55 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090fa:	e1d8      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009100:	e1d5      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009102:	4b72      	ldr	r3, [pc, #456]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0304 	and.w	r3, r3, #4
 800910a:	2b04      	cmp	r3, #4
 800910c:	d109      	bne.n	8009122 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800910e:	4b6f      	ldr	r3, [pc, #444]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	08db      	lsrs	r3, r3, #3
 8009114:	f003 0303 	and.w	r3, r3, #3
 8009118:	4a6d      	ldr	r2, [pc, #436]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800911a:	fa22 f303 	lsr.w	r3, r2, r3
 800911e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009120:	e1c5      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009126:	e1c2      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009128:	4b68      	ldr	r3, [pc, #416]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009134:	d102      	bne.n	800913c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8009136:	4b67      	ldr	r3, [pc, #412]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800913a:	e1b8      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009140:	e1b5      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009142:	4b62      	ldr	r3, [pc, #392]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800914a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800914e:	d102      	bne.n	8009156 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8009150:	4b61      	ldr	r3, [pc, #388]	@ (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009154:	e1ab      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800915a:	e1a8      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009160:	e1a5      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009162:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009166:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800916a:	430b      	orrs	r3, r1
 800916c:	d173      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800916e:	4b57      	ldr	r3, [pc, #348]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009172:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009176:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800917a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800917e:	d02f      	beq.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009182:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009186:	d863      	bhi.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918a:	2b00      	cmp	r3, #0
 800918c:	d004      	beq.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009194:	d012      	beq.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009196:	e05b      	b.n	8009250 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009198:	4b4c      	ldr	r3, [pc, #304]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091a4:	d107      	bne.n	80091b6 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091a6:	f107 0318 	add.w	r3, r7, #24
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f9a4 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091b4:	e17b      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091b6:	2300      	movs	r3, #0
 80091b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091ba:	e178      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091bc:	4b43      	ldr	r3, [pc, #268]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091c8:	d107      	bne.n	80091da <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ca:	f107 030c 	add.w	r3, r7, #12
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fae6 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091d8:	e169      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091de:	e166      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091e0:	4b3a      	ldr	r3, [pc, #232]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80091e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091ea:	4b38      	ldr	r3, [pc, #224]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0304 	and.w	r3, r3, #4
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d10c      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80091f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d109      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091fc:	4b33      	ldr	r3, [pc, #204]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	08db      	lsrs	r3, r3, #3
 8009202:	f003 0303 	and.w	r3, r3, #3
 8009206:	4a32      	ldr	r2, [pc, #200]	@ (80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009208:	fa22 f303 	lsr.w	r3, r2, r3
 800920c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800920e:	e01e      	b.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009210:	4b2e      	ldr	r3, [pc, #184]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800921c:	d106      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800921e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009220:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009224:	d102      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009226:	4b2b      	ldr	r3, [pc, #172]	@ (80092d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800922a:	e010      	b.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800922c:	4b27      	ldr	r3, [pc, #156]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009238:	d106      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009240:	d102      	bne.n	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009242:	4b25      	ldr	r3, [pc, #148]	@ (80092d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009246:	e002      	b.n	800924e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009248:	2300      	movs	r3, #0
 800924a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800924c:	e12f      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800924e:	e12e      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009254:	e12b      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800925a:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800925e:	430b      	orrs	r3, r1
 8009260:	d13c      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009262:	4b1a      	ldr	r3, [pc, #104]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009266:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800926a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800926c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926e:	2b00      	cmp	r3, #0
 8009270:	d004      	beq.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8009272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009274:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009278:	d012      	beq.n	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800927a:	e023      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800927c:	4b13      	ldr	r3, [pc, #76]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009288:	d107      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800928a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fbda 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009298:	e109      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800929a:	2300      	movs	r3, #0
 800929c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929e:	e106      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092a0:	4b0a      	ldr	r3, [pc, #40]	@ (80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092ac:	d107      	bne.n	80092be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ae:	f107 0318 	add.w	r3, r7, #24
 80092b2:	4618      	mov	r0, r3
 80092b4:	f000 f920 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092bc:	e0f7      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092be:	2300      	movs	r3, #0
 80092c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c2:	e0f4      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c8:	e0f1      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80092ca:	bf00      	nop
 80092cc:	58024400 	.word	0x58024400
 80092d0:	03d09000 	.word	0x03d09000
 80092d4:	003d0900 	.word	0x003d0900
 80092d8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80092dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092e0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80092e4:	430b      	orrs	r3, r1
 80092e6:	f040 8091 	bne.w	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80092ea:	4b73      	ldr	r3, [pc, #460]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80092ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80092f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80092f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092f6:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80092fa:	f000 8081 	beq.w	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009304:	d87f      	bhi.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800930c:	d06b      	beq.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009314:	d877      	bhi.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800931c:	d056      	beq.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009324:	d86f      	bhi.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009328:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800932c:	d03b      	beq.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009334:	d867      	bhi.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800933c:	d021      	beq.n	8009382 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800933e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009344:	d85f      	bhi.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	2b00      	cmp	r3, #0
 800934a:	d004      	beq.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800934c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009352:	d004      	beq.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009354:	e057      	b.n	8009406 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009356:	f000 f8b9 	bl	80094cc <HAL_RCCEx_GetD3PCLK1Freq>
 800935a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800935c:	e0a7      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800935e:	4b56      	ldr	r3, [pc, #344]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800936a:	d107      	bne.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800936c:	f107 0318 	add.w	r3, r7, #24
 8009370:	4618      	mov	r0, r3
 8009372:	f000 f8c1 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800937a:	e098      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800937c:	2300      	movs	r3, #0
 800937e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009380:	e095      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009382:	4b4d      	ldr	r3, [pc, #308]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800938a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800938e:	d107      	bne.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009390:	f107 030c 	add.w	r3, r7, #12
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fa03 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800939e:	e086      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093a0:	2300      	movs	r3, #0
 80093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093a4:	e083      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80093a6:	4b44      	ldr	r3, [pc, #272]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	2b04      	cmp	r3, #4
 80093b0:	d109      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093b2:	4b41      	ldr	r3, [pc, #260]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	08db      	lsrs	r3, r3, #3
 80093b8:	f003 0303 	and.w	r3, r3, #3
 80093bc:	4a3f      	ldr	r2, [pc, #252]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80093be:	fa22 f303 	lsr.w	r3, r2, r3
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093c4:	e073      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093c6:	2300      	movs	r3, #0
 80093c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ca:	e070      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80093cc:	4b3a      	ldr	r3, [pc, #232]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093d8:	d102      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 80093da:	4b39      	ldr	r3, [pc, #228]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 80093dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093de:	e066      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093e0:	2300      	movs	r3, #0
 80093e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093e4:	e063      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80093e6:	4b34      	ldr	r3, [pc, #208]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093f2:	d102      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80093f4:	4b33      	ldr	r3, [pc, #204]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80093f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093f8:	e059      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093fe:	e056      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009400:	4b31      	ldr	r3, [pc, #196]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009404:	e053      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800940a:	e050      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800940c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009410:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009414:	430b      	orrs	r3, r1
 8009416:	d148      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009418:	4b27      	ldr	r3, [pc, #156]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800941a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800941c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009420:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009428:	d02a      	beq.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800942a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009430:	d838      	bhi.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800943e:	d00d      	beq.n	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009440:	e030      	b.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009442:	4b1d      	ldr	r3, [pc, #116]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800944a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800944e:	d102      	bne.n	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009450:	4b1c      	ldr	r3, [pc, #112]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009454:	e02b      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800945a:	e028      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800945c:	4b16      	ldr	r3, [pc, #88]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009468:	d107      	bne.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800946a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800946e:	4618      	mov	r0, r3
 8009470:	f000 faea 	bl	8009a48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009478:	e019      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800947a:	2300      	movs	r3, #0
 800947c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800947e:	e016      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009480:	4b0d      	ldr	r3, [pc, #52]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009488:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800948c:	d107      	bne.n	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800948e:	f107 0318 	add.w	r3, r7, #24
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f830 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800949c:	e007      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800949e:	2300      	movs	r3, #0
 80094a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a2:	e004      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a8:	e001      	b.n	80094ae <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80094ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3740      	adds	r7, #64	@ 0x40
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	58024400 	.word	0x58024400
 80094bc:	03d09000 	.word	0x03d09000
 80094c0:	003d0900 	.word	0x003d0900
 80094c4:	007a1200 	.word	0x007a1200
 80094c8:	00bb8000 	.word	0x00bb8000

080094cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80094d0:	f7fe f90a 	bl	80076e8 <HAL_RCC_GetHCLKFreq>
 80094d4:	4602      	mov	r2, r0
 80094d6:	4b06      	ldr	r3, [pc, #24]	@ (80094f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	091b      	lsrs	r3, r3, #4
 80094dc:	f003 0307 	and.w	r3, r3, #7
 80094e0:	4904      	ldr	r1, [pc, #16]	@ (80094f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80094e2:	5ccb      	ldrb	r3, [r1, r3]
 80094e4:	f003 031f 	and.w	r3, r3, #31
 80094e8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	58024400 	.word	0x58024400
 80094f4:	0800c9a4 	.word	0x0800c9a4

080094f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b089      	sub	sp, #36	@ 0x24
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009500:	4ba1      	ldr	r3, [pc, #644]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009504:	f003 0303 	and.w	r3, r3, #3
 8009508:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800950a:	4b9f      	ldr	r3, [pc, #636]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	0b1b      	lsrs	r3, r3, #12
 8009510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009514:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009516:	4b9c      	ldr	r3, [pc, #624]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800951a:	091b      	lsrs	r3, r3, #4
 800951c:	f003 0301 	and.w	r3, r3, #1
 8009520:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009522:	4b99      	ldr	r3, [pc, #612]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009526:	08db      	lsrs	r3, r3, #3
 8009528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800952c:	693a      	ldr	r2, [r7, #16]
 800952e:	fb02 f303 	mul.w	r3, r2, r3
 8009532:	ee07 3a90 	vmov	s15, r3
 8009536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 8111 	beq.w	8009768 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	2b02      	cmp	r3, #2
 800954a:	f000 8083 	beq.w	8009654 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2b02      	cmp	r3, #2
 8009552:	f200 80a1 	bhi.w	8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d003      	beq.n	8009564 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d056      	beq.n	8009610 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009562:	e099      	b.n	8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009564:	4b88      	ldr	r3, [pc, #544]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 0320 	and.w	r3, r3, #32
 800956c:	2b00      	cmp	r3, #0
 800956e:	d02d      	beq.n	80095cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009570:	4b85      	ldr	r3, [pc, #532]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	08db      	lsrs	r3, r3, #3
 8009576:	f003 0303 	and.w	r3, r3, #3
 800957a:	4a84      	ldr	r2, [pc, #528]	@ (800978c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800957c:	fa22 f303 	lsr.w	r3, r2, r3
 8009580:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	ee07 3a90 	vmov	s15, r3
 8009588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800959a:	4b7b      	ldr	r3, [pc, #492]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800959c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800959e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80095ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095ca:	e087      	b.n	80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009794 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80095da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095de:	4b6a      	ldr	r3, [pc, #424]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095e6:	ee07 3a90 	vmov	s15, r3
 80095ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80095f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800960a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800960e:	e065      	b.n	80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800961a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800961e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009622:	4b59      	ldr	r3, [pc, #356]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009632:	ed97 6a03 	vldr	s12, [r7, #12]
 8009636:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800963a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800963e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800964a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800964e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009652:	e043      	b.n	80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800965e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800979c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009666:	4b48      	ldr	r3, [pc, #288]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800966a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009676:	ed97 6a03 	vldr	s12, [r7, #12]
 800967a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800967e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800968a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800968e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009696:	e021      	b.n	80096dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096aa:	4b37      	ldr	r3, [pc, #220]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80096be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009790 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80096dc:	4b2a      	ldr	r3, [pc, #168]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e0:	0a5b      	lsrs	r3, r3, #9
 80096e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096e6:	ee07 3a90 	vmov	s15, r3
 80096ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80096fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009702:	ee17 2a90 	vmov	r2, s15
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800970a:	4b1f      	ldr	r3, [pc, #124]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800970c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970e:	0c1b      	lsrs	r3, r3, #16
 8009710:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009714:	ee07 3a90 	vmov	s15, r3
 8009718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800971c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009720:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009724:	edd7 6a07 	vldr	s13, [r7, #28]
 8009728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800972c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009730:	ee17 2a90 	vmov	r2, s15
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009738:	4b13      	ldr	r3, [pc, #76]	@ (8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800973a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973c:	0e1b      	lsrs	r3, r3, #24
 800973e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009742:	ee07 3a90 	vmov	s15, r3
 8009746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800974e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009752:	edd7 6a07 	vldr	s13, [r7, #28]
 8009756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800975a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800975e:	ee17 2a90 	vmov	r2, s15
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009766:	e008      	b.n	800977a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2200      	movs	r2, #0
 8009772:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	609a      	str	r2, [r3, #8]
}
 800977a:	bf00      	nop
 800977c:	3724      	adds	r7, #36	@ 0x24
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	58024400 	.word	0x58024400
 800978c:	03d09000 	.word	0x03d09000
 8009790:	46000000 	.word	0x46000000
 8009794:	4c742400 	.word	0x4c742400
 8009798:	4a742400 	.word	0x4a742400
 800979c:	4af42400 	.word	0x4af42400

080097a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b089      	sub	sp, #36	@ 0x24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097a8:	4ba1      	ldr	r3, [pc, #644]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80097b2:	4b9f      	ldr	r3, [pc, #636]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b6:	0d1b      	lsrs	r3, r3, #20
 80097b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80097be:	4b9c      	ldr	r3, [pc, #624]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c2:	0a1b      	lsrs	r3, r3, #8
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80097ca:	4b99      	ldr	r3, [pc, #612]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ce:	08db      	lsrs	r3, r3, #3
 80097d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	fb02 f303 	mul.w	r3, r2, r3
 80097da:	ee07 3a90 	vmov	s15, r3
 80097de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 8111 	beq.w	8009a10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	2b02      	cmp	r3, #2
 80097f2:	f000 8083 	beq.w	80098fc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	f200 80a1 	bhi.w	8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d003      	beq.n	800980c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d056      	beq.n	80098b8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800980a:	e099      	b.n	8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800980c:	4b88      	ldr	r3, [pc, #544]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0320 	and.w	r3, r3, #32
 8009814:	2b00      	cmp	r3, #0
 8009816:	d02d      	beq.n	8009874 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009818:	4b85      	ldr	r3, [pc, #532]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	08db      	lsrs	r3, r3, #3
 800981e:	f003 0303 	and.w	r3, r3, #3
 8009822:	4a84      	ldr	r2, [pc, #528]	@ (8009a34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009824:	fa22 f303 	lsr.w	r3, r2, r3
 8009828:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	ee07 3a90 	vmov	s15, r3
 8009830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	ee07 3a90 	vmov	s15, r3
 800983a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800983e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009842:	4b7b      	ldr	r3, [pc, #492]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800984a:	ee07 3a90 	vmov	s15, r3
 800984e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009852:	ed97 6a03 	vldr	s12, [r7, #12]
 8009856:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800985a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800985e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800986a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800986e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009872:	e087      	b.n	8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009a3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009886:	4b6a      	ldr	r3, [pc, #424]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800988a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800988e:	ee07 3a90 	vmov	s15, r3
 8009892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009896:	ed97 6a03 	vldr	s12, [r7, #12]
 800989a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800989e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098b6:	e065      	b.n	8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ca:	4b59      	ldr	r3, [pc, #356]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098d2:	ee07 3a90 	vmov	s15, r3
 80098d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098da:	ed97 6a03 	vldr	s12, [r7, #12]
 80098de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098fa:	e043      	b.n	8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	ee07 3a90 	vmov	s15, r3
 8009902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009906:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009a44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800990a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990e:	4b48      	ldr	r3, [pc, #288]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009916:	ee07 3a90 	vmov	s15, r3
 800991a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009922:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800992a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800993e:	e021      	b.n	8009984 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	ee07 3a90 	vmov	s15, r3
 8009946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800994a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800994e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009952:	4b37      	ldr	r3, [pc, #220]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995a:	ee07 3a90 	vmov	s15, r3
 800995e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009962:	ed97 6a03 	vldr	s12, [r7, #12]
 8009966:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009a38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800996a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800997a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009982:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009984:	4b2a      	ldr	r3, [pc, #168]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009988:	0a5b      	lsrs	r3, r3, #9
 800998a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009996:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800999a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800999e:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099aa:	ee17 2a90 	vmov	r2, s15
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80099b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b6:	0c1b      	lsrs	r3, r3, #16
 80099b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099bc:	ee07 3a90 	vmov	s15, r3
 80099c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80099d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099d8:	ee17 2a90 	vmov	r2, s15
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80099e0:	4b13      	ldr	r3, [pc, #76]	@ (8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099e4:	0e1b      	lsrs	r3, r3, #24
 80099e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099ea:	ee07 3a90 	vmov	s15, r3
 80099ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80099f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80099fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a06:	ee17 2a90 	vmov	r2, s15
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009a0e:	e008      	b.n	8009a22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	609a      	str	r2, [r3, #8]
}
 8009a22:	bf00      	nop
 8009a24:	3724      	adds	r7, #36	@ 0x24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	58024400 	.word	0x58024400
 8009a34:	03d09000 	.word	0x03d09000
 8009a38:	46000000 	.word	0x46000000
 8009a3c:	4c742400 	.word	0x4c742400
 8009a40:	4a742400 	.word	0x4a742400
 8009a44:	4af42400 	.word	0x4af42400

08009a48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b089      	sub	sp, #36	@ 0x24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a50:	4ba0      	ldr	r3, [pc, #640]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a54:	f003 0303 	and.w	r3, r3, #3
 8009a58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009a5a:	4b9e      	ldr	r3, [pc, #632]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5e:	091b      	lsrs	r3, r3, #4
 8009a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009a66:	4b9b      	ldr	r3, [pc, #620]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a70:	4b98      	ldr	r3, [pc, #608]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a74:	08db      	lsrs	r3, r3, #3
 8009a76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	fb02 f303 	mul.w	r3, r2, r3
 8009a80:	ee07 3a90 	vmov	s15, r3
 8009a84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f000 8111 	beq.w	8009cb6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	2b02      	cmp	r3, #2
 8009a98:	f000 8083 	beq.w	8009ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	f200 80a1 	bhi.w	8009be6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009aa4:	69bb      	ldr	r3, [r7, #24]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d056      	beq.n	8009b5e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009ab0:	e099      	b.n	8009be6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab2:	4b88      	ldr	r3, [pc, #544]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 0320 	and.w	r3, r3, #32
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d02d      	beq.n	8009b1a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009abe:	4b85      	ldr	r3, [pc, #532]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	08db      	lsrs	r3, r3, #3
 8009ac4:	f003 0303 	and.w	r3, r3, #3
 8009ac8:	4a83      	ldr	r2, [pc, #524]	@ (8009cd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009aca:	fa22 f303 	lsr.w	r3, r2, r3
 8009ace:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	ee07 3a90 	vmov	s15, r3
 8009ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae8:	4b7a      	ldr	r3, [pc, #488]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af0:	ee07 3a90 	vmov	s15, r3
 8009af4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009afc:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b14:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b18:	e087      	b.n	8009c2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	ee07 3a90 	vmov	s15, r3
 8009b20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b24:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009b28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2c:	4b69      	ldr	r3, [pc, #420]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b34:	ee07 3a90 	vmov	s15, r3
 8009b38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b40:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b5c:	e065      	b.n	8009c2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	ee07 3a90 	vmov	s15, r3
 8009b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b68:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b70:	4b58      	ldr	r3, [pc, #352]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b80:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b84:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009b88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ba0:	e043      	b.n	8009c2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	ee07 3a90 	vmov	s15, r3
 8009ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bac:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb4:	4b47      	ldr	r3, [pc, #284]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bbc:	ee07 3a90 	vmov	s15, r3
 8009bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009bcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009be4:	e021      	b.n	8009c2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	ee07 3a90 	vmov	s15, r3
 8009bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bf0:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009bf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf8:	4b36      	ldr	r3, [pc, #216]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c00:	ee07 3a90 	vmov	s15, r3
 8009c04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c08:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009cdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c28:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2e:	0a5b      	lsrs	r3, r3, #9
 8009c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c34:	ee07 3a90 	vmov	s15, r3
 8009c38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c50:	ee17 2a90 	vmov	r2, s15
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009c58:	4b1e      	ldr	r3, [pc, #120]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c5c:	0c1b      	lsrs	r3, r3, #16
 8009c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c62:	ee07 3a90 	vmov	s15, r3
 8009c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7e:	ee17 2a90 	vmov	r2, s15
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009c86:	4b13      	ldr	r3, [pc, #76]	@ (8009cd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c8a:	0e1b      	lsrs	r3, r3, #24
 8009c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c90:	ee07 3a90 	vmov	s15, r3
 8009c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009cac:	ee17 2a90 	vmov	r2, s15
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009cb4:	e008      	b.n	8009cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	609a      	str	r2, [r3, #8]
}
 8009cc8:	bf00      	nop
 8009cca:	3724      	adds	r7, #36	@ 0x24
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	03d09000 	.word	0x03d09000
 8009cdc:	46000000 	.word	0x46000000
 8009ce0:	4c742400 	.word	0x4c742400
 8009ce4:	4a742400 	.word	0x4a742400
 8009ce8:	4af42400 	.word	0x4af42400

08009cec <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009cf4:	4b26      	ldr	r3, [pc, #152]	@ (8009d90 <HAL_RCCEx_CRSConfig+0xa4>)
 8009cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cfa:	4a25      	ldr	r2, [pc, #148]	@ (8009d90 <HAL_RCCEx_CRSConfig+0xa4>)
 8009cfc:	f043 0302 	orr.w	r3, r3, #2
 8009d00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8009d04:	4b22      	ldr	r3, [pc, #136]	@ (8009d90 <HAL_RCCEx_CRSConfig+0xa4>)
 8009d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d0a:	4a21      	ldr	r2, [pc, #132]	@ (8009d90 <HAL_RCCEx_CRSConfig+0xa4>)
 8009d0c:	f023 0302 	bic.w	r3, r3, #2
 8009d10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8009d14:	f7f7 fb5e 	bl	80013d4 <HAL_GetREVID>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d80b      	bhi.n	8009d3a <HAL_RCCEx_CRSConfig+0x4e>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d2a:	d106      	bne.n	8009d3a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681a      	ldr	r2, [r3, #0]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	e008      	b.n	8009d4c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	431a      	orrs	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	041b      	lsls	r3, r3, #16
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8009d62:	4a0c      	ldr	r2, [pc, #48]	@ (8009d94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009d68:	4b0a      	ldr	r3, [pc, #40]	@ (8009d94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	021b      	lsls	r3, r3, #8
 8009d76:	4907      	ldr	r1, [pc, #28]	@ (8009d94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009d7c:	4b05      	ldr	r3, [pc, #20]	@ (8009d94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a04      	ldr	r2, [pc, #16]	@ (8009d94 <HAL_RCCEx_CRSConfig+0xa8>)
 8009d82:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009d86:	6013      	str	r3, [r2, #0]
}
 8009d88:	bf00      	nop
 8009d8a:	3710      	adds	r7, #16
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	58024400 	.word	0x58024400
 8009d94:	40008400 	.word	0x40008400

08009d98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009da6:	4b53      	ldr	r3, [pc, #332]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009daa:	f003 0303 	and.w	r3, r3, #3
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d101      	bne.n	8009db6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	e099      	b.n	8009eea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009db6:	4b4f      	ldr	r3, [pc, #316]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a4e      	ldr	r2, [pc, #312]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009dbc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dc2:	f7f7 fafb 	bl	80013bc <HAL_GetTick>
 8009dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dc8:	e008      	b.n	8009ddc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dca:	f7f7 faf7 	bl	80013bc <HAL_GetTick>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	2b02      	cmp	r3, #2
 8009dd6:	d901      	bls.n	8009ddc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e086      	b.n	8009eea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ddc:	4b45      	ldr	r3, [pc, #276]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1f0      	bne.n	8009dca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009de8:	4b42      	ldr	r3, [pc, #264]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	031b      	lsls	r3, r3, #12
 8009df6:	493f      	ldr	r1, [pc, #252]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	628b      	str	r3, [r1, #40]	@ 0x28
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	025b      	lsls	r3, r3, #9
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	431a      	orrs	r2, r3
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	041b      	lsls	r3, r3, #16
 8009e1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	3b01      	subs	r3, #1
 8009e26:	061b      	lsls	r3, r3, #24
 8009e28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009e2c:	4931      	ldr	r1, [pc, #196]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e32:	4b30      	ldr	r3, [pc, #192]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	492d      	ldr	r1, [pc, #180]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e40:	4313      	orrs	r3, r2
 8009e42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e44:	4b2b      	ldr	r3, [pc, #172]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e48:	f023 0220 	bic.w	r2, r3, #32
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	4928      	ldr	r1, [pc, #160]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e56:	4b27      	ldr	r3, [pc, #156]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e5a:	4a26      	ldr	r2, [pc, #152]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e5c:	f023 0310 	bic.w	r3, r3, #16
 8009e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e62:	4b24      	ldr	r3, [pc, #144]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e66:	4b24      	ldr	r3, [pc, #144]	@ (8009ef8 <RCCEx_PLL2_Config+0x160>)
 8009e68:	4013      	ands	r3, r2
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	69d2      	ldr	r2, [r2, #28]
 8009e6e:	00d2      	lsls	r2, r2, #3
 8009e70:	4920      	ldr	r1, [pc, #128]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e76:	4b1f      	ldr	r3, [pc, #124]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e7c:	f043 0310 	orr.w	r3, r3, #16
 8009e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d106      	bne.n	8009e96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e88:	4b1a      	ldr	r3, [pc, #104]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e8c:	4a19      	ldr	r2, [pc, #100]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009e94:	e00f      	b.n	8009eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d106      	bne.n	8009eaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009e9c:	4b15      	ldr	r3, [pc, #84]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea0:	4a14      	ldr	r2, [pc, #80]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009ea8:	e005      	b.n	8009eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009eaa:	4b12      	ldr	r3, [pc, #72]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eae:	4a11      	ldr	r2, [pc, #68]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a0e      	ldr	r2, [pc, #56]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009ebc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ec2:	f7f7 fa7b 	bl	80013bc <HAL_GetTick>
 8009ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ec8:	e008      	b.n	8009edc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009eca:	f7f7 fa77 	bl	80013bc <HAL_GetTick>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	1ad3      	subs	r3, r2, r3
 8009ed4:	2b02      	cmp	r3, #2
 8009ed6:	d901      	bls.n	8009edc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e006      	b.n	8009eea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009edc:	4b05      	ldr	r3, [pc, #20]	@ (8009ef4 <RCCEx_PLL2_Config+0x15c>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0f0      	beq.n	8009eca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3710      	adds	r7, #16
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	58024400 	.word	0x58024400
 8009ef8:	ffff0007 	.word	0xffff0007

08009efc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f0a:	4b53      	ldr	r3, [pc, #332]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0e:	f003 0303 	and.w	r3, r3, #3
 8009f12:	2b03      	cmp	r3, #3
 8009f14:	d101      	bne.n	8009f1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f16:	2301      	movs	r3, #1
 8009f18:	e099      	b.n	800a04e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f1a:	4b4f      	ldr	r3, [pc, #316]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a4e      	ldr	r2, [pc, #312]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f26:	f7f7 fa49 	bl	80013bc <HAL_GetTick>
 8009f2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f2c:	e008      	b.n	8009f40 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f2e:	f7f7 fa45 	bl	80013bc <HAL_GetTick>
 8009f32:	4602      	mov	r2, r0
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	2b02      	cmp	r3, #2
 8009f3a:	d901      	bls.n	8009f40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e086      	b.n	800a04e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f40:	4b45      	ldr	r3, [pc, #276]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1f0      	bne.n	8009f2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f4c:	4b42      	ldr	r3, [pc, #264]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f50:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	051b      	lsls	r3, r3, #20
 8009f5a:	493f      	ldr	r1, [pc, #252]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	025b      	lsls	r3, r3, #9
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	431a      	orrs	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	041b      	lsls	r3, r3, #16
 8009f7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009f82:	431a      	orrs	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	061b      	lsls	r3, r3, #24
 8009f8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009f90:	4931      	ldr	r1, [pc, #196]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f96:	4b30      	ldr	r3, [pc, #192]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	492d      	ldr	r1, [pc, #180]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009fa8:	4b2b      	ldr	r3, [pc, #172]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	4928      	ldr	r1, [pc, #160]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fba:	4b27      	ldr	r3, [pc, #156]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fbe:	4a26      	ldr	r2, [pc, #152]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fc6:	4b24      	ldr	r3, [pc, #144]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fca:	4b24      	ldr	r3, [pc, #144]	@ (800a05c <RCCEx_PLL3_Config+0x160>)
 8009fcc:	4013      	ands	r3, r2
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	69d2      	ldr	r2, [r2, #28]
 8009fd2:	00d2      	lsls	r2, r2, #3
 8009fd4:	4920      	ldr	r1, [pc, #128]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fda:	4b1f      	ldr	r3, [pc, #124]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fde:	4a1e      	ldr	r2, [pc, #120]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d106      	bne.n	8009ffa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009fec:	4b1a      	ldr	r3, [pc, #104]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff0:	4a19      	ldr	r2, [pc, #100]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 8009ff2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009ff8:	e00f      	b.n	800a01a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d106      	bne.n	800a00e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a000:	4b15      	ldr	r3, [pc, #84]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 800a002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a004:	4a14      	ldr	r2, [pc, #80]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 800a006:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a00a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a00c:	e005      	b.n	800a01a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a00e:	4b12      	ldr	r3, [pc, #72]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 800a010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a012:	4a11      	ldr	r2, [pc, #68]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 800a014:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a018:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a01a:	4b0f      	ldr	r3, [pc, #60]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a0e      	ldr	r2, [pc, #56]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 800a020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a026:	f7f7 f9c9 	bl	80013bc <HAL_GetTick>
 800a02a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a02c:	e008      	b.n	800a040 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a02e:	f7f7 f9c5 	bl	80013bc <HAL_GetTick>
 800a032:	4602      	mov	r2, r0
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	2b02      	cmp	r3, #2
 800a03a:	d901      	bls.n	800a040 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a03c:	2303      	movs	r3, #3
 800a03e:	e006      	b.n	800a04e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a040:	4b05      	ldr	r3, [pc, #20]	@ (800a058 <RCCEx_PLL3_Config+0x15c>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d0f0      	beq.n	800a02e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
 800a056:	bf00      	nop
 800a058:	58024400 	.word	0x58024400
 800a05c:	ffff0007 	.word	0xffff0007

0800a060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d101      	bne.n	800a072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e049      	b.n	800a106 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d106      	bne.n	800a08c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7f6 ff50 	bl	8000f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681a      	ldr	r2, [r3, #0]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f000 f99e 	bl	800a3e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2201      	movs	r2, #1
 800a0b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a110:	b480      	push	{r7}
 800a112:	b085      	sub	sp, #20
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	2b01      	cmp	r3, #1
 800a122:	d001      	beq.n	800a128 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e04c      	b.n	800a1c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a26      	ldr	r2, [pc, #152]	@ (800a1d0 <HAL_TIM_Base_Start+0xc0>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d022      	beq.n	800a180 <HAL_TIM_Base_Start+0x70>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a142:	d01d      	beq.n	800a180 <HAL_TIM_Base_Start+0x70>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a22      	ldr	r2, [pc, #136]	@ (800a1d4 <HAL_TIM_Base_Start+0xc4>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d018      	beq.n	800a180 <HAL_TIM_Base_Start+0x70>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a21      	ldr	r2, [pc, #132]	@ (800a1d8 <HAL_TIM_Base_Start+0xc8>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d013      	beq.n	800a180 <HAL_TIM_Base_Start+0x70>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a1f      	ldr	r2, [pc, #124]	@ (800a1dc <HAL_TIM_Base_Start+0xcc>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d00e      	beq.n	800a180 <HAL_TIM_Base_Start+0x70>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a1e      	ldr	r2, [pc, #120]	@ (800a1e0 <HAL_TIM_Base_Start+0xd0>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d009      	beq.n	800a180 <HAL_TIM_Base_Start+0x70>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a1c      	ldr	r2, [pc, #112]	@ (800a1e4 <HAL_TIM_Base_Start+0xd4>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d004      	beq.n	800a180 <HAL_TIM_Base_Start+0x70>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1e8 <HAL_TIM_Base_Start+0xd8>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d115      	bne.n	800a1ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	4b19      	ldr	r3, [pc, #100]	@ (800a1ec <HAL_TIM_Base_Start+0xdc>)
 800a188:	4013      	ands	r3, r2
 800a18a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2b06      	cmp	r3, #6
 800a190:	d015      	beq.n	800a1be <HAL_TIM_Base_Start+0xae>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a198:	d011      	beq.n	800a1be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f042 0201 	orr.w	r2, r2, #1
 800a1a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1aa:	e008      	b.n	800a1be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0201 	orr.w	r2, r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	e000      	b.n	800a1c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3714      	adds	r7, #20
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	40010000 	.word	0x40010000
 800a1d4:	40000400 	.word	0x40000400
 800a1d8:	40000800 	.word	0x40000800
 800a1dc:	40000c00 	.word	0x40000c00
 800a1e0:	40010400 	.word	0x40010400
 800a1e4:	40001800 	.word	0x40001800
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	00010007 	.word	0x00010007

0800a1f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a204:	2b01      	cmp	r3, #1
 800a206:	d101      	bne.n	800a20c <HAL_TIM_ConfigClockSource+0x1c>
 800a208:	2302      	movs	r3, #2
 800a20a:	e0dc      	b.n	800a3c6 <HAL_TIM_ConfigClockSource+0x1d6>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	4b6a      	ldr	r3, [pc, #424]	@ (800a3d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a228:	4013      	ands	r3, r2
 800a22a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68ba      	ldr	r2, [r7, #8]
 800a23a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a64      	ldr	r2, [pc, #400]	@ (800a3d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a242:	4293      	cmp	r3, r2
 800a244:	f000 80a9 	beq.w	800a39a <HAL_TIM_ConfigClockSource+0x1aa>
 800a248:	4a62      	ldr	r2, [pc, #392]	@ (800a3d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	f200 80ae 	bhi.w	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a250:	4a61      	ldr	r2, [pc, #388]	@ (800a3d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a252:	4293      	cmp	r3, r2
 800a254:	f000 80a1 	beq.w	800a39a <HAL_TIM_ConfigClockSource+0x1aa>
 800a258:	4a5f      	ldr	r2, [pc, #380]	@ (800a3d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	f200 80a6 	bhi.w	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a260:	4a5e      	ldr	r2, [pc, #376]	@ (800a3dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800a262:	4293      	cmp	r3, r2
 800a264:	f000 8099 	beq.w	800a39a <HAL_TIM_ConfigClockSource+0x1aa>
 800a268:	4a5c      	ldr	r2, [pc, #368]	@ (800a3dc <HAL_TIM_ConfigClockSource+0x1ec>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	f200 809e 	bhi.w	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a270:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a274:	f000 8091 	beq.w	800a39a <HAL_TIM_ConfigClockSource+0x1aa>
 800a278:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a27c:	f200 8096 	bhi.w	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a280:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a284:	f000 8089 	beq.w	800a39a <HAL_TIM_ConfigClockSource+0x1aa>
 800a288:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a28c:	f200 808e 	bhi.w	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a294:	d03e      	beq.n	800a314 <HAL_TIM_ConfigClockSource+0x124>
 800a296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a29a:	f200 8087 	bhi.w	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a29e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2a2:	f000 8086 	beq.w	800a3b2 <HAL_TIM_ConfigClockSource+0x1c2>
 800a2a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2aa:	d87f      	bhi.n	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a2ac:	2b70      	cmp	r3, #112	@ 0x70
 800a2ae:	d01a      	beq.n	800a2e6 <HAL_TIM_ConfigClockSource+0xf6>
 800a2b0:	2b70      	cmp	r3, #112	@ 0x70
 800a2b2:	d87b      	bhi.n	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a2b4:	2b60      	cmp	r3, #96	@ 0x60
 800a2b6:	d050      	beq.n	800a35a <HAL_TIM_ConfigClockSource+0x16a>
 800a2b8:	2b60      	cmp	r3, #96	@ 0x60
 800a2ba:	d877      	bhi.n	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a2bc:	2b50      	cmp	r3, #80	@ 0x50
 800a2be:	d03c      	beq.n	800a33a <HAL_TIM_ConfigClockSource+0x14a>
 800a2c0:	2b50      	cmp	r3, #80	@ 0x50
 800a2c2:	d873      	bhi.n	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a2c4:	2b40      	cmp	r3, #64	@ 0x40
 800a2c6:	d058      	beq.n	800a37a <HAL_TIM_ConfigClockSource+0x18a>
 800a2c8:	2b40      	cmp	r3, #64	@ 0x40
 800a2ca:	d86f      	bhi.n	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a2cc:	2b30      	cmp	r3, #48	@ 0x30
 800a2ce:	d064      	beq.n	800a39a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2d0:	2b30      	cmp	r3, #48	@ 0x30
 800a2d2:	d86b      	bhi.n	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	d060      	beq.n	800a39a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	d867      	bhi.n	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d05c      	beq.n	800a39a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2e0:	2b10      	cmp	r3, #16
 800a2e2:	d05a      	beq.n	800a39a <HAL_TIM_ConfigClockSource+0x1aa>
 800a2e4:	e062      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2f6:	f000 f997 	bl	800a628 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68ba      	ldr	r2, [r7, #8]
 800a310:	609a      	str	r2, [r3, #8]
      break;
 800a312:	e04f      	b.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a324:	f000 f980 	bl	800a628 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689a      	ldr	r2, [r3, #8]
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a336:	609a      	str	r2, [r3, #8]
      break;
 800a338:	e03c      	b.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a346:	461a      	mov	r2, r3
 800a348:	f000 f8f0 	bl	800a52c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2150      	movs	r1, #80	@ 0x50
 800a352:	4618      	mov	r0, r3
 800a354:	f000 f94a 	bl	800a5ec <TIM_ITRx_SetConfig>
      break;
 800a358:	e02c      	b.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a366:	461a      	mov	r2, r3
 800a368:	f000 f90f 	bl	800a58a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2160      	movs	r1, #96	@ 0x60
 800a372:	4618      	mov	r0, r3
 800a374:	f000 f93a 	bl	800a5ec <TIM_ITRx_SetConfig>
      break;
 800a378:	e01c      	b.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a386:	461a      	mov	r2, r3
 800a388:	f000 f8d0 	bl	800a52c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2140      	movs	r1, #64	@ 0x40
 800a392:	4618      	mov	r0, r3
 800a394:	f000 f92a 	bl	800a5ec <TIM_ITRx_SetConfig>
      break;
 800a398:	e00c      	b.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	4610      	mov	r0, r2
 800a3a6:	f000 f921 	bl	800a5ec <TIM_ITRx_SetConfig>
      break;
 800a3aa:	e003      	b.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b0:	e000      	b.n	800a3b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a3b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	ffceff88 	.word	0xffceff88
 800a3d4:	00100040 	.word	0x00100040
 800a3d8:	00100030 	.word	0x00100030
 800a3dc:	00100020 	.word	0x00100020

0800a3e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a46      	ldr	r2, [pc, #280]	@ (800a50c <TIM_Base_SetConfig+0x12c>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d013      	beq.n	800a420 <TIM_Base_SetConfig+0x40>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3fe:	d00f      	beq.n	800a420 <TIM_Base_SetConfig+0x40>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a43      	ldr	r2, [pc, #268]	@ (800a510 <TIM_Base_SetConfig+0x130>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d00b      	beq.n	800a420 <TIM_Base_SetConfig+0x40>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a42      	ldr	r2, [pc, #264]	@ (800a514 <TIM_Base_SetConfig+0x134>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d007      	beq.n	800a420 <TIM_Base_SetConfig+0x40>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a41      	ldr	r2, [pc, #260]	@ (800a518 <TIM_Base_SetConfig+0x138>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d003      	beq.n	800a420 <TIM_Base_SetConfig+0x40>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a40      	ldr	r2, [pc, #256]	@ (800a51c <TIM_Base_SetConfig+0x13c>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d108      	bne.n	800a432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	4313      	orrs	r3, r2
 800a430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a35      	ldr	r2, [pc, #212]	@ (800a50c <TIM_Base_SetConfig+0x12c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d01f      	beq.n	800a47a <TIM_Base_SetConfig+0x9a>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a440:	d01b      	beq.n	800a47a <TIM_Base_SetConfig+0x9a>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a32      	ldr	r2, [pc, #200]	@ (800a510 <TIM_Base_SetConfig+0x130>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d017      	beq.n	800a47a <TIM_Base_SetConfig+0x9a>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a31      	ldr	r2, [pc, #196]	@ (800a514 <TIM_Base_SetConfig+0x134>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d013      	beq.n	800a47a <TIM_Base_SetConfig+0x9a>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a30      	ldr	r2, [pc, #192]	@ (800a518 <TIM_Base_SetConfig+0x138>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d00f      	beq.n	800a47a <TIM_Base_SetConfig+0x9a>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a2f      	ldr	r2, [pc, #188]	@ (800a51c <TIM_Base_SetConfig+0x13c>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d00b      	beq.n	800a47a <TIM_Base_SetConfig+0x9a>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a2e      	ldr	r2, [pc, #184]	@ (800a520 <TIM_Base_SetConfig+0x140>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d007      	beq.n	800a47a <TIM_Base_SetConfig+0x9a>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a2d      	ldr	r2, [pc, #180]	@ (800a524 <TIM_Base_SetConfig+0x144>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d003      	beq.n	800a47a <TIM_Base_SetConfig+0x9a>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a2c      	ldr	r2, [pc, #176]	@ (800a528 <TIM_Base_SetConfig+0x148>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d108      	bne.n	800a48c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	4313      	orrs	r3, r2
 800a498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a16      	ldr	r2, [pc, #88]	@ (800a50c <TIM_Base_SetConfig+0x12c>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d00f      	beq.n	800a4d8 <TIM_Base_SetConfig+0xf8>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a18      	ldr	r2, [pc, #96]	@ (800a51c <TIM_Base_SetConfig+0x13c>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d00b      	beq.n	800a4d8 <TIM_Base_SetConfig+0xf8>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a17      	ldr	r2, [pc, #92]	@ (800a520 <TIM_Base_SetConfig+0x140>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d007      	beq.n	800a4d8 <TIM_Base_SetConfig+0xf8>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4a16      	ldr	r2, [pc, #88]	@ (800a524 <TIM_Base_SetConfig+0x144>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d003      	beq.n	800a4d8 <TIM_Base_SetConfig+0xf8>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	4a15      	ldr	r2, [pc, #84]	@ (800a528 <TIM_Base_SetConfig+0x148>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d103      	bne.n	800a4e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	691a      	ldr	r2, [r3, #16]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	f003 0301 	and.w	r3, r3, #1
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d105      	bne.n	800a4fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	f023 0201 	bic.w	r2, r3, #1
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	611a      	str	r2, [r3, #16]
  }
}
 800a4fe:	bf00      	nop
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	40010000 	.word	0x40010000
 800a510:	40000400 	.word	0x40000400
 800a514:	40000800 	.word	0x40000800
 800a518:	40000c00 	.word	0x40000c00
 800a51c:	40010400 	.word	0x40010400
 800a520:	40014000 	.word	0x40014000
 800a524:	40014400 	.word	0x40014400
 800a528:	40014800 	.word	0x40014800

0800a52c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b087      	sub	sp, #28
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	60b9      	str	r1, [r7, #8]
 800a536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	f023 0201 	bic.w	r2, r3, #1
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	011b      	lsls	r3, r3, #4
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f023 030a 	bic.w	r3, r3, #10
 800a568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	693a      	ldr	r2, [r7, #16]
 800a576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	621a      	str	r2, [r3, #32]
}
 800a57e:	bf00      	nop
 800a580:	371c      	adds	r7, #28
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b087      	sub	sp, #28
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	f023 0210 	bic.w	r2, r3, #16
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	031b      	lsls	r3, r3, #12
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a5c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	011b      	lsls	r3, r3, #4
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	693a      	ldr	r2, [r7, #16]
 800a5d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	621a      	str	r2, [r3, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
	...

0800a5ec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	4b09      	ldr	r3, [pc, #36]	@ (800a624 <TIM_ITRx_SetConfig+0x38>)
 800a600:	4013      	ands	r3, r2
 800a602:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4313      	orrs	r3, r2
 800a60a:	f043 0307 	orr.w	r3, r3, #7
 800a60e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	609a      	str	r2, [r3, #8]
}
 800a616:	bf00      	nop
 800a618:	3714      	adds	r7, #20
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	ffcfff8f 	.word	0xffcfff8f

0800a628 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a642:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	021a      	lsls	r2, r3, #8
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	431a      	orrs	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	4313      	orrs	r3, r2
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	4313      	orrs	r3, r2
 800a654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	697a      	ldr	r2, [r7, #20]
 800a65a:	609a      	str	r2, [r3, #8]
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e06d      	b.n	800a75c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a30      	ldr	r2, [pc, #192]	@ (800a768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d004      	beq.n	800a6b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a2f      	ldr	r2, [pc, #188]	@ (800a76c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d108      	bne.n	800a6c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a20      	ldr	r2, [pc, #128]	@ (800a768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d022      	beq.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6f2:	d01d      	beq.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a770 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d018      	beq.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a1c      	ldr	r2, [pc, #112]	@ (800a774 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d013      	beq.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a1a      	ldr	r2, [pc, #104]	@ (800a778 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d00e      	beq.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a15      	ldr	r2, [pc, #84]	@ (800a76c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d009      	beq.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a16      	ldr	r2, [pc, #88]	@ (800a77c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d004      	beq.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a15      	ldr	r2, [pc, #84]	@ (800a780 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d10c      	bne.n	800a74a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a736:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	68ba      	ldr	r2, [r7, #8]
 800a73e:	4313      	orrs	r3, r2
 800a740:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	68ba      	ldr	r2, [r7, #8]
 800a748:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2201      	movs	r2, #1
 800a74e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2200      	movs	r2, #0
 800a756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	40010000 	.word	0x40010000
 800a76c:	40010400 	.word	0x40010400
 800a770:	40000400 	.word	0x40000400
 800a774:	40000800 	.word	0x40000800
 800a778:	40000c00 	.word	0x40000c00
 800a77c:	40001800 	.word	0x40001800
 800a780:	40014000 	.word	0x40014000

0800a784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b082      	sub	sp, #8
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e042      	b.n	800a81c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d106      	bne.n	800a7ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7f6 fbdf 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2224      	movs	r2, #36	@ 0x24
 800a7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f022 0201 	bic.w	r2, r2, #1
 800a7c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f001 fb52 	bl	800be78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fce3 	bl	800b1a0 <UART_SetConfig>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d101      	bne.n	800a7e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e01b      	b.n	800a81c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	685a      	ldr	r2, [r3, #4]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a7f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	689a      	ldr	r2, [r3, #8]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0201 	orr.w	r2, r2, #1
 800a812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 fbd1 	bl	800bfbc <UART_CheckIdleState>
 800a81a:	4603      	mov	r3, r0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b08a      	sub	sp, #40	@ 0x28
 800a828:	af02      	add	r7, sp, #8
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	4613      	mov	r3, r2
 800a832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	d17b      	bne.n	800a936 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d002      	beq.n	800a84a <HAL_UART_Transmit+0x26>
 800a844:	88fb      	ldrh	r3, [r7, #6]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e074      	b.n	800a938 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2221      	movs	r2, #33	@ 0x21
 800a85a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a85e:	f7f6 fdad 	bl	80013bc <HAL_GetTick>
 800a862:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	88fa      	ldrh	r2, [r7, #6]
 800a868:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	88fa      	ldrh	r2, [r7, #6]
 800a870:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a87c:	d108      	bne.n	800a890 <HAL_UART_Transmit+0x6c>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d104      	bne.n	800a890 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a886:	2300      	movs	r3, #0
 800a888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	61bb      	str	r3, [r7, #24]
 800a88e:	e003      	b.n	800a898 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a894:	2300      	movs	r3, #0
 800a896:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a898:	e030      	b.n	800a8fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	9300      	str	r3, [sp, #0]
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2180      	movs	r1, #128	@ 0x80
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f001 fc33 	bl	800c110 <UART_WaitOnFlagUntilTimeout>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e03d      	b.n	800a938 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10b      	bne.n	800a8da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8c2:	69bb      	ldr	r3, [r7, #24]
 800a8c4:	881b      	ldrh	r3, [r3, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8d0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	3302      	adds	r3, #2
 800a8d6:	61bb      	str	r3, [r7, #24]
 800a8d8:	e007      	b.n	800a8ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8da:	69fb      	ldr	r3, [r7, #28]
 800a8dc:	781a      	ldrb	r2, [r3, #0]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a902:	b29b      	uxth	r3, r3
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1c8      	bne.n	800a89a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2200      	movs	r2, #0
 800a910:	2140      	movs	r1, #64	@ 0x40
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f001 fbfc 	bl	800c110 <UART_WaitOnFlagUntilTimeout>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d005      	beq.n	800a92a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2220      	movs	r2, #32
 800a922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e006      	b.n	800a938 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2220      	movs	r2, #32
 800a92e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a932:	2300      	movs	r3, #0
 800a934:	e000      	b.n	800a938 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a936:	2302      	movs	r3, #2
  }
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3720      	adds	r7, #32
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b08a      	sub	sp, #40	@ 0x28
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	4613      	mov	r3, r2
 800a94c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a954:	2b20      	cmp	r3, #32
 800a956:	d137      	bne.n	800a9c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <HAL_UART_Receive_DMA+0x24>
 800a95e:	88fb      	ldrh	r3, [r7, #6]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d101      	bne.n	800a968 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	e030      	b.n	800a9ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2200      	movs	r2, #0
 800a96c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a18      	ldr	r2, [pc, #96]	@ (800a9d4 <HAL_UART_Receive_DMA+0x94>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d01f      	beq.n	800a9b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a982:	2b00      	cmp	r3, #0
 800a984:	d018      	beq.n	800a9b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	e853 3f00 	ldrex	r3, [r3]
 800a992:	613b      	str	r3, [r7, #16]
   return(result);
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a99a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9a4:	623b      	str	r3, [r7, #32]
 800a9a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	69f9      	ldr	r1, [r7, #28]
 800a9aa:	6a3a      	ldr	r2, [r7, #32]
 800a9ac:	e841 2300 	strex	r3, r2, [r1]
 800a9b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1e6      	bne.n	800a986 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a9b8:	88fb      	ldrh	r3, [r7, #6]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	68b9      	ldr	r1, [r7, #8]
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f001 fc14 	bl	800c1ec <UART_Start_Receive_DMA>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	e000      	b.n	800a9ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a9c8:	2302      	movs	r3, #2
  }
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3728      	adds	r7, #40	@ 0x28
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	58000c00 	.word	0x58000c00

0800a9d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b0ba      	sub	sp, #232	@ 0xe8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa02:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa06:	4013      	ands	r3, r2
 800aa08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d11b      	bne.n	800aa4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa18:	f003 0320 	and.w	r3, r3, #32
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d015      	beq.n	800aa4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa24:	f003 0320 	and.w	r3, r3, #32
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d105      	bne.n	800aa38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d009      	beq.n	800aa4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 8377 	beq.w	800b130 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	4798      	blx	r3
      }
      return;
 800aa4a:	e371      	b.n	800b130 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 8123 	beq.w	800ac9c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aa5a:	4b8d      	ldr	r3, [pc, #564]	@ (800ac90 <HAL_UART_IRQHandler+0x2b8>)
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d106      	bne.n	800aa70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa66:	4b8b      	ldr	r3, [pc, #556]	@ (800ac94 <HAL_UART_IRQHandler+0x2bc>)
 800aa68:	4013      	ands	r3, r2
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f000 8116 	beq.w	800ac9c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d011      	beq.n	800aaa0 <HAL_UART_IRQHandler+0xc8>
 800aa7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00b      	beq.n	800aaa0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa96:	f043 0201 	orr.w	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d011      	beq.n	800aad0 <HAL_UART_IRQHandler+0xf8>
 800aaac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00b      	beq.n	800aad0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2202      	movs	r2, #2
 800aabe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aac6:	f043 0204 	orr.w	r2, r3, #4
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d011      	beq.n	800ab00 <HAL_UART_IRQHandler+0x128>
 800aadc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2204      	movs	r2, #4
 800aaee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaf6:	f043 0202 	orr.w	r2, r3, #2
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab04:	f003 0308 	and.w	r3, r3, #8
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d017      	beq.n	800ab3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d105      	bne.n	800ab24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ac90 <HAL_UART_IRQHandler+0x2b8>)
 800ab1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2208      	movs	r2, #8
 800ab2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab32:	f043 0208 	orr.w	r2, r3, #8
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d012      	beq.n	800ab6e <HAL_UART_IRQHandler+0x196>
 800ab48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab64:	f043 0220 	orr.w	r2, r3, #32
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 82dd 	beq.w	800b134 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab7e:	f003 0320 	and.w	r3, r3, #32
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d013      	beq.n	800abae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d105      	bne.n	800ab9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc2:	2b40      	cmp	r3, #64	@ 0x40
 800abc4:	d005      	beq.n	800abd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d054      	beq.n	800ac7c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f001 fbf2 	bl	800c3bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe2:	2b40      	cmp	r3, #64	@ 0x40
 800abe4:	d146      	bne.n	800ac74 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3308      	adds	r3, #8
 800abec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800abfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ac22:	e841 2300 	strex	r3, r2, [r1]
 800ac26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ac2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1d9      	bne.n	800abe6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d017      	beq.n	800ac6c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac42:	4a15      	ldr	r2, [pc, #84]	@ (800ac98 <HAL_UART_IRQHandler+0x2c0>)
 800ac44:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f9 fd83 	bl	8004758 <HAL_DMA_Abort_IT>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d019      	beq.n	800ac8c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ac66:	4610      	mov	r0, r2
 800ac68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6a:	e00f      	b.n	800ac8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fa81 	bl	800b174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac72:	e00b      	b.n	800ac8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fa7d 	bl	800b174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac7a:	e007      	b.n	800ac8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fa79 	bl	800b174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ac8a:	e253      	b.n	800b134 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac8c:	bf00      	nop
    return;
 800ac8e:	e251      	b.n	800b134 <HAL_UART_IRQHandler+0x75c>
 800ac90:	10000001 	.word	0x10000001
 800ac94:	04000120 	.word	0x04000120
 800ac98:	0800c66f 	.word	0x0800c66f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	f040 81e7 	bne.w	800b074 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acaa:	f003 0310 	and.w	r3, r3, #16
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 81e0 	beq.w	800b074 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800acb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acb8:	f003 0310 	and.w	r3, r3, #16
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 81d9 	beq.w	800b074 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2210      	movs	r2, #16
 800acc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acd4:	2b40      	cmp	r3, #64	@ 0x40
 800acd6:	f040 8151 	bne.w	800af7c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a96      	ldr	r2, [pc, #600]	@ (800af3c <HAL_UART_IRQHandler+0x564>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d068      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a93      	ldr	r2, [pc, #588]	@ (800af40 <HAL_UART_IRQHandler+0x568>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d061      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a91      	ldr	r2, [pc, #580]	@ (800af44 <HAL_UART_IRQHandler+0x56c>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d05a      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a8e      	ldr	r2, [pc, #568]	@ (800af48 <HAL_UART_IRQHandler+0x570>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d053      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a8c      	ldr	r2, [pc, #560]	@ (800af4c <HAL_UART_IRQHandler+0x574>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d04c      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a89      	ldr	r2, [pc, #548]	@ (800af50 <HAL_UART_IRQHandler+0x578>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d045      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a87      	ldr	r2, [pc, #540]	@ (800af54 <HAL_UART_IRQHandler+0x57c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d03e      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a84      	ldr	r2, [pc, #528]	@ (800af58 <HAL_UART_IRQHandler+0x580>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d037      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	4a82      	ldr	r2, [pc, #520]	@ (800af5c <HAL_UART_IRQHandler+0x584>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d030      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a7f      	ldr	r2, [pc, #508]	@ (800af60 <HAL_UART_IRQHandler+0x588>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d029      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a7d      	ldr	r2, [pc, #500]	@ (800af64 <HAL_UART_IRQHandler+0x58c>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d022      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a7a      	ldr	r2, [pc, #488]	@ (800af68 <HAL_UART_IRQHandler+0x590>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d01b      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a78      	ldr	r2, [pc, #480]	@ (800af6c <HAL_UART_IRQHandler+0x594>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d014      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a75      	ldr	r2, [pc, #468]	@ (800af70 <HAL_UART_IRQHandler+0x598>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d00d      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a73      	ldr	r2, [pc, #460]	@ (800af74 <HAL_UART_IRQHandler+0x59c>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d006      	beq.n	800adba <HAL_UART_IRQHandler+0x3e2>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a70      	ldr	r2, [pc, #448]	@ (800af78 <HAL_UART_IRQHandler+0x5a0>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d106      	bne.n	800adc8 <HAL_UART_IRQHandler+0x3f0>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	e005      	b.n	800add4 <HAL_UART_IRQHandler+0x3fc>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	b29b      	uxth	r3, r3
 800add4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800add8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 81ab 	beq.w	800b138 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ade8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800adec:	429a      	cmp	r2, r3
 800adee:	f080 81a3 	bcs.w	800b138 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800adf8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae02:	69db      	ldr	r3, [r3, #28]
 800ae04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae08:	f000 8087 	beq.w	800af1a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ae18:	e853 3f00 	ldrex	r3, [r3]
 800ae1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ae20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ae24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ae36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ae3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ae42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ae46:	e841 2300 	strex	r3, r2, [r1]
 800ae4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ae4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1da      	bne.n	800ae0c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ae66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae68:	f023 0301 	bic.w	r3, r3, #1
 800ae6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3308      	adds	r3, #8
 800ae76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ae7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ae7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ae82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ae86:	e841 2300 	strex	r3, r2, [r1]
 800ae8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1e1      	bne.n	800ae56 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	3308      	adds	r3, #8
 800ae98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae9c:	e853 3f00 	ldrex	r3, [r3]
 800aea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800aea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800aeb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800aeb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800aebc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aebe:	e841 2300 	strex	r3, r2, [r1]
 800aec2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800aec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d1e3      	bne.n	800ae92 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2220      	movs	r2, #32
 800aece:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aee0:	e853 3f00 	ldrex	r3, [r3]
 800aee4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aee8:	f023 0310 	bic.w	r3, r3, #16
 800aeec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800aefa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aefc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800af00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800af02:	e841 2300 	strex	r3, r2, [r1]
 800af06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800af08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e4      	bne.n	800aed8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800af14:	4618      	mov	r0, r3
 800af16:	f7f9 f901 	bl	800411c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2202      	movs	r2, #2
 800af1e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	b29b      	uxth	r3, r3
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f927 	bl	800b188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af3a:	e0fd      	b.n	800b138 <HAL_UART_IRQHandler+0x760>
 800af3c:	40020010 	.word	0x40020010
 800af40:	40020028 	.word	0x40020028
 800af44:	40020040 	.word	0x40020040
 800af48:	40020058 	.word	0x40020058
 800af4c:	40020070 	.word	0x40020070
 800af50:	40020088 	.word	0x40020088
 800af54:	400200a0 	.word	0x400200a0
 800af58:	400200b8 	.word	0x400200b8
 800af5c:	40020410 	.word	0x40020410
 800af60:	40020428 	.word	0x40020428
 800af64:	40020440 	.word	0x40020440
 800af68:	40020458 	.word	0x40020458
 800af6c:	40020470 	.word	0x40020470
 800af70:	40020488 	.word	0x40020488
 800af74:	400204a0 	.word	0x400204a0
 800af78:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af88:	b29b      	uxth	r3, r3
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af96:	b29b      	uxth	r3, r3
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 80cf 	beq.w	800b13c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800af9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	f000 80ca 	beq.w	800b13c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb0:	e853 3f00 	ldrex	r3, [r3]
 800afb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800afbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	461a      	mov	r2, r3
 800afc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800afca:	647b      	str	r3, [r7, #68]	@ 0x44
 800afcc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afd2:	e841 2300 	strex	r3, r2, [r1]
 800afd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d1e4      	bne.n	800afa8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3308      	adds	r3, #8
 800afe4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	e853 3f00 	ldrex	r3, [r3]
 800afec:	623b      	str	r3, [r7, #32]
   return(result);
 800afee:	6a3a      	ldr	r2, [r7, #32]
 800aff0:	4b55      	ldr	r3, [pc, #340]	@ (800b148 <HAL_UART_IRQHandler+0x770>)
 800aff2:	4013      	ands	r3, r2
 800aff4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3308      	adds	r3, #8
 800affe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b002:	633a      	str	r2, [r7, #48]	@ 0x30
 800b004:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b008:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b00a:	e841 2300 	strex	r3, r2, [r1]
 800b00e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1e3      	bne.n	800afde <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2220      	movs	r2, #32
 800b01a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	e853 3f00 	ldrex	r3, [r3]
 800b036:	60fb      	str	r3, [r7, #12]
   return(result);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f023 0310 	bic.w	r3, r3, #16
 800b03e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	461a      	mov	r2, r3
 800b048:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b04c:	61fb      	str	r3, [r7, #28]
 800b04e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b050:	69b9      	ldr	r1, [r7, #24]
 800b052:	69fa      	ldr	r2, [r7, #28]
 800b054:	e841 2300 	strex	r3, r2, [r1]
 800b058:	617b      	str	r3, [r7, #20]
   return(result);
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1e4      	bne.n	800b02a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2202      	movs	r2, #2
 800b064:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b066:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b06a:	4619      	mov	r1, r3
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f88b 	bl	800b188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b072:	e063      	b.n	800b13c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00e      	beq.n	800b09e <HAL_UART_IRQHandler+0x6c6>
 800b080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b084:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d008      	beq.n	800b09e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b094:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f001 fb2a 	bl	800c6f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b09c:	e051      	b.n	800b142 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d014      	beq.n	800b0d4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b0aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d105      	bne.n	800b0c2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b0b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d008      	beq.n	800b0d4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d03a      	beq.n	800b140 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	4798      	blx	r3
    }
    return;
 800b0d2:	e035      	b.n	800b140 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d009      	beq.n	800b0f4 <HAL_UART_IRQHandler+0x71c>
 800b0e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d003      	beq.n	800b0f4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 fad4 	bl	800c69a <UART_EndTransmit_IT>
    return;
 800b0f2:	e026      	b.n	800b142 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b0f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d009      	beq.n	800b114 <HAL_UART_IRQHandler+0x73c>
 800b100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b104:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f001 fb03 	bl	800c718 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b112:	e016      	b.n	800b142 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b118:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d010      	beq.n	800b142 <HAL_UART_IRQHandler+0x76a>
 800b120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b124:	2b00      	cmp	r3, #0
 800b126:	da0c      	bge.n	800b142 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f001 faeb 	bl	800c704 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b12e:	e008      	b.n	800b142 <HAL_UART_IRQHandler+0x76a>
      return;
 800b130:	bf00      	nop
 800b132:	e006      	b.n	800b142 <HAL_UART_IRQHandler+0x76a>
    return;
 800b134:	bf00      	nop
 800b136:	e004      	b.n	800b142 <HAL_UART_IRQHandler+0x76a>
      return;
 800b138:	bf00      	nop
 800b13a:	e002      	b.n	800b142 <HAL_UART_IRQHandler+0x76a>
      return;
 800b13c:	bf00      	nop
 800b13e:	e000      	b.n	800b142 <HAL_UART_IRQHandler+0x76a>
    return;
 800b140:	bf00      	nop
  }
}
 800b142:	37e8      	adds	r7, #232	@ 0xe8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}
 800b148:	effffffe 	.word	0xeffffffe

0800b14c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b168:	bf00      	nop
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	460b      	mov	r3, r1
 800b192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1a4:	b092      	sub	sp, #72	@ 0x48
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	431a      	orrs	r2, r3
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	431a      	orrs	r2, r3
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	69db      	ldr	r3, [r3, #28]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	4bbe      	ldr	r3, [pc, #760]	@ (800b4c8 <UART_SetConfig+0x328>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	697a      	ldr	r2, [r7, #20]
 800b1d4:	6812      	ldr	r2, [r2, #0]
 800b1d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b1d8:	430b      	orrs	r3, r1
 800b1da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	685b      	ldr	r3, [r3, #4]
 800b1e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	68da      	ldr	r2, [r3, #12]
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4ab3      	ldr	r2, [pc, #716]	@ (800b4cc <UART_SetConfig+0x32c>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d004      	beq.n	800b20c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b208:	4313      	orrs	r3, r2
 800b20a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689a      	ldr	r2, [r3, #8]
 800b212:	4baf      	ldr	r3, [pc, #700]	@ (800b4d0 <UART_SetConfig+0x330>)
 800b214:	4013      	ands	r3, r2
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	6812      	ldr	r2, [r2, #0]
 800b21a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b21c:	430b      	orrs	r3, r1
 800b21e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b226:	f023 010f 	bic.w	r1, r3, #15
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	430a      	orrs	r2, r1
 800b234:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	4aa6      	ldr	r2, [pc, #664]	@ (800b4d4 <UART_SetConfig+0x334>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d177      	bne.n	800b330 <UART_SetConfig+0x190>
 800b240:	4ba5      	ldr	r3, [pc, #660]	@ (800b4d8 <UART_SetConfig+0x338>)
 800b242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b244:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b248:	2b28      	cmp	r3, #40	@ 0x28
 800b24a:	d86d      	bhi.n	800b328 <UART_SetConfig+0x188>
 800b24c:	a201      	add	r2, pc, #4	@ (adr r2, 800b254 <UART_SetConfig+0xb4>)
 800b24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b252:	bf00      	nop
 800b254:	0800b2f9 	.word	0x0800b2f9
 800b258:	0800b329 	.word	0x0800b329
 800b25c:	0800b329 	.word	0x0800b329
 800b260:	0800b329 	.word	0x0800b329
 800b264:	0800b329 	.word	0x0800b329
 800b268:	0800b329 	.word	0x0800b329
 800b26c:	0800b329 	.word	0x0800b329
 800b270:	0800b329 	.word	0x0800b329
 800b274:	0800b301 	.word	0x0800b301
 800b278:	0800b329 	.word	0x0800b329
 800b27c:	0800b329 	.word	0x0800b329
 800b280:	0800b329 	.word	0x0800b329
 800b284:	0800b329 	.word	0x0800b329
 800b288:	0800b329 	.word	0x0800b329
 800b28c:	0800b329 	.word	0x0800b329
 800b290:	0800b329 	.word	0x0800b329
 800b294:	0800b309 	.word	0x0800b309
 800b298:	0800b329 	.word	0x0800b329
 800b29c:	0800b329 	.word	0x0800b329
 800b2a0:	0800b329 	.word	0x0800b329
 800b2a4:	0800b329 	.word	0x0800b329
 800b2a8:	0800b329 	.word	0x0800b329
 800b2ac:	0800b329 	.word	0x0800b329
 800b2b0:	0800b329 	.word	0x0800b329
 800b2b4:	0800b311 	.word	0x0800b311
 800b2b8:	0800b329 	.word	0x0800b329
 800b2bc:	0800b329 	.word	0x0800b329
 800b2c0:	0800b329 	.word	0x0800b329
 800b2c4:	0800b329 	.word	0x0800b329
 800b2c8:	0800b329 	.word	0x0800b329
 800b2cc:	0800b329 	.word	0x0800b329
 800b2d0:	0800b329 	.word	0x0800b329
 800b2d4:	0800b319 	.word	0x0800b319
 800b2d8:	0800b329 	.word	0x0800b329
 800b2dc:	0800b329 	.word	0x0800b329
 800b2e0:	0800b329 	.word	0x0800b329
 800b2e4:	0800b329 	.word	0x0800b329
 800b2e8:	0800b329 	.word	0x0800b329
 800b2ec:	0800b329 	.word	0x0800b329
 800b2f0:	0800b329 	.word	0x0800b329
 800b2f4:	0800b321 	.word	0x0800b321
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b2fe:	e326      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b300:	2304      	movs	r3, #4
 800b302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b306:	e322      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b308:	2308      	movs	r3, #8
 800b30a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b30e:	e31e      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b310:	2310      	movs	r3, #16
 800b312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b316:	e31a      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b318:	2320      	movs	r3, #32
 800b31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b31e:	e316      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b320:	2340      	movs	r3, #64	@ 0x40
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b326:	e312      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b328:	2380      	movs	r3, #128	@ 0x80
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b32e:	e30e      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a69      	ldr	r2, [pc, #420]	@ (800b4dc <UART_SetConfig+0x33c>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d130      	bne.n	800b39c <UART_SetConfig+0x1fc>
 800b33a:	4b67      	ldr	r3, [pc, #412]	@ (800b4d8 <UART_SetConfig+0x338>)
 800b33c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b33e:	f003 0307 	and.w	r3, r3, #7
 800b342:	2b05      	cmp	r3, #5
 800b344:	d826      	bhi.n	800b394 <UART_SetConfig+0x1f4>
 800b346:	a201      	add	r2, pc, #4	@ (adr r2, 800b34c <UART_SetConfig+0x1ac>)
 800b348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b34c:	0800b365 	.word	0x0800b365
 800b350:	0800b36d 	.word	0x0800b36d
 800b354:	0800b375 	.word	0x0800b375
 800b358:	0800b37d 	.word	0x0800b37d
 800b35c:	0800b385 	.word	0x0800b385
 800b360:	0800b38d 	.word	0x0800b38d
 800b364:	2300      	movs	r3, #0
 800b366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b36a:	e2f0      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b36c:	2304      	movs	r3, #4
 800b36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b372:	e2ec      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b374:	2308      	movs	r3, #8
 800b376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b37a:	e2e8      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b37c:	2310      	movs	r3, #16
 800b37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b382:	e2e4      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b384:	2320      	movs	r3, #32
 800b386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b38a:	e2e0      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b38c:	2340      	movs	r3, #64	@ 0x40
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b392:	e2dc      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b394:	2380      	movs	r3, #128	@ 0x80
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b39a:	e2d8      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a4f      	ldr	r2, [pc, #316]	@ (800b4e0 <UART_SetConfig+0x340>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d130      	bne.n	800b408 <UART_SetConfig+0x268>
 800b3a6:	4b4c      	ldr	r3, [pc, #304]	@ (800b4d8 <UART_SetConfig+0x338>)
 800b3a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3aa:	f003 0307 	and.w	r3, r3, #7
 800b3ae:	2b05      	cmp	r3, #5
 800b3b0:	d826      	bhi.n	800b400 <UART_SetConfig+0x260>
 800b3b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b8 <UART_SetConfig+0x218>)
 800b3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b8:	0800b3d1 	.word	0x0800b3d1
 800b3bc:	0800b3d9 	.word	0x0800b3d9
 800b3c0:	0800b3e1 	.word	0x0800b3e1
 800b3c4:	0800b3e9 	.word	0x0800b3e9
 800b3c8:	0800b3f1 	.word	0x0800b3f1
 800b3cc:	0800b3f9 	.word	0x0800b3f9
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3d6:	e2ba      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b3d8:	2304      	movs	r3, #4
 800b3da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3de:	e2b6      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b3e0:	2308      	movs	r3, #8
 800b3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3e6:	e2b2      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b3e8:	2310      	movs	r3, #16
 800b3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3ee:	e2ae      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b3f0:	2320      	movs	r3, #32
 800b3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3f6:	e2aa      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b3f8:	2340      	movs	r3, #64	@ 0x40
 800b3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b3fe:	e2a6      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b400:	2380      	movs	r3, #128	@ 0x80
 800b402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b406:	e2a2      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a35      	ldr	r2, [pc, #212]	@ (800b4e4 <UART_SetConfig+0x344>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d130      	bne.n	800b474 <UART_SetConfig+0x2d4>
 800b412:	4b31      	ldr	r3, [pc, #196]	@ (800b4d8 <UART_SetConfig+0x338>)
 800b414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b416:	f003 0307 	and.w	r3, r3, #7
 800b41a:	2b05      	cmp	r3, #5
 800b41c:	d826      	bhi.n	800b46c <UART_SetConfig+0x2cc>
 800b41e:	a201      	add	r2, pc, #4	@ (adr r2, 800b424 <UART_SetConfig+0x284>)
 800b420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b424:	0800b43d 	.word	0x0800b43d
 800b428:	0800b445 	.word	0x0800b445
 800b42c:	0800b44d 	.word	0x0800b44d
 800b430:	0800b455 	.word	0x0800b455
 800b434:	0800b45d 	.word	0x0800b45d
 800b438:	0800b465 	.word	0x0800b465
 800b43c:	2300      	movs	r3, #0
 800b43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b442:	e284      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b444:	2304      	movs	r3, #4
 800b446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b44a:	e280      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b44c:	2308      	movs	r3, #8
 800b44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b452:	e27c      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b454:	2310      	movs	r3, #16
 800b456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b45a:	e278      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b45c:	2320      	movs	r3, #32
 800b45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b462:	e274      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b464:	2340      	movs	r3, #64	@ 0x40
 800b466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b46a:	e270      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b46c:	2380      	movs	r3, #128	@ 0x80
 800b46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b472:	e26c      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a1b      	ldr	r2, [pc, #108]	@ (800b4e8 <UART_SetConfig+0x348>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d142      	bne.n	800b504 <UART_SetConfig+0x364>
 800b47e:	4b16      	ldr	r3, [pc, #88]	@ (800b4d8 <UART_SetConfig+0x338>)
 800b480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b482:	f003 0307 	and.w	r3, r3, #7
 800b486:	2b05      	cmp	r3, #5
 800b488:	d838      	bhi.n	800b4fc <UART_SetConfig+0x35c>
 800b48a:	a201      	add	r2, pc, #4	@ (adr r2, 800b490 <UART_SetConfig+0x2f0>)
 800b48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b490:	0800b4a9 	.word	0x0800b4a9
 800b494:	0800b4b1 	.word	0x0800b4b1
 800b498:	0800b4b9 	.word	0x0800b4b9
 800b49c:	0800b4c1 	.word	0x0800b4c1
 800b4a0:	0800b4ed 	.word	0x0800b4ed
 800b4a4:	0800b4f5 	.word	0x0800b4f5
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4ae:	e24e      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b4b0:	2304      	movs	r3, #4
 800b4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4b6:	e24a      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b4b8:	2308      	movs	r3, #8
 800b4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4be:	e246      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b4c0:	2310      	movs	r3, #16
 800b4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4c6:	e242      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b4c8:	cfff69f3 	.word	0xcfff69f3
 800b4cc:	58000c00 	.word	0x58000c00
 800b4d0:	11fff4ff 	.word	0x11fff4ff
 800b4d4:	40011000 	.word	0x40011000
 800b4d8:	58024400 	.word	0x58024400
 800b4dc:	40004400 	.word	0x40004400
 800b4e0:	40004800 	.word	0x40004800
 800b4e4:	40004c00 	.word	0x40004c00
 800b4e8:	40005000 	.word	0x40005000
 800b4ec:	2320      	movs	r3, #32
 800b4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4f2:	e22c      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b4f4:	2340      	movs	r3, #64	@ 0x40
 800b4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b4fa:	e228      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b4fc:	2380      	movs	r3, #128	@ 0x80
 800b4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b502:	e224      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4ab1      	ldr	r2, [pc, #708]	@ (800b7d0 <UART_SetConfig+0x630>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d176      	bne.n	800b5fc <UART_SetConfig+0x45c>
 800b50e:	4bb1      	ldr	r3, [pc, #708]	@ (800b7d4 <UART_SetConfig+0x634>)
 800b510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b516:	2b28      	cmp	r3, #40	@ 0x28
 800b518:	d86c      	bhi.n	800b5f4 <UART_SetConfig+0x454>
 800b51a:	a201      	add	r2, pc, #4	@ (adr r2, 800b520 <UART_SetConfig+0x380>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b5c5 	.word	0x0800b5c5
 800b524:	0800b5f5 	.word	0x0800b5f5
 800b528:	0800b5f5 	.word	0x0800b5f5
 800b52c:	0800b5f5 	.word	0x0800b5f5
 800b530:	0800b5f5 	.word	0x0800b5f5
 800b534:	0800b5f5 	.word	0x0800b5f5
 800b538:	0800b5f5 	.word	0x0800b5f5
 800b53c:	0800b5f5 	.word	0x0800b5f5
 800b540:	0800b5cd 	.word	0x0800b5cd
 800b544:	0800b5f5 	.word	0x0800b5f5
 800b548:	0800b5f5 	.word	0x0800b5f5
 800b54c:	0800b5f5 	.word	0x0800b5f5
 800b550:	0800b5f5 	.word	0x0800b5f5
 800b554:	0800b5f5 	.word	0x0800b5f5
 800b558:	0800b5f5 	.word	0x0800b5f5
 800b55c:	0800b5f5 	.word	0x0800b5f5
 800b560:	0800b5d5 	.word	0x0800b5d5
 800b564:	0800b5f5 	.word	0x0800b5f5
 800b568:	0800b5f5 	.word	0x0800b5f5
 800b56c:	0800b5f5 	.word	0x0800b5f5
 800b570:	0800b5f5 	.word	0x0800b5f5
 800b574:	0800b5f5 	.word	0x0800b5f5
 800b578:	0800b5f5 	.word	0x0800b5f5
 800b57c:	0800b5f5 	.word	0x0800b5f5
 800b580:	0800b5dd 	.word	0x0800b5dd
 800b584:	0800b5f5 	.word	0x0800b5f5
 800b588:	0800b5f5 	.word	0x0800b5f5
 800b58c:	0800b5f5 	.word	0x0800b5f5
 800b590:	0800b5f5 	.word	0x0800b5f5
 800b594:	0800b5f5 	.word	0x0800b5f5
 800b598:	0800b5f5 	.word	0x0800b5f5
 800b59c:	0800b5f5 	.word	0x0800b5f5
 800b5a0:	0800b5e5 	.word	0x0800b5e5
 800b5a4:	0800b5f5 	.word	0x0800b5f5
 800b5a8:	0800b5f5 	.word	0x0800b5f5
 800b5ac:	0800b5f5 	.word	0x0800b5f5
 800b5b0:	0800b5f5 	.word	0x0800b5f5
 800b5b4:	0800b5f5 	.word	0x0800b5f5
 800b5b8:	0800b5f5 	.word	0x0800b5f5
 800b5bc:	0800b5f5 	.word	0x0800b5f5
 800b5c0:	0800b5ed 	.word	0x0800b5ed
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ca:	e1c0      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b5cc:	2304      	movs	r3, #4
 800b5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5d2:	e1bc      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b5d4:	2308      	movs	r3, #8
 800b5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5da:	e1b8      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b5dc:	2310      	movs	r3, #16
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5e2:	e1b4      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b5e4:	2320      	movs	r3, #32
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5ea:	e1b0      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b5ec:	2340      	movs	r3, #64	@ 0x40
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5f2:	e1ac      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b5f4:	2380      	movs	r3, #128	@ 0x80
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b5fa:	e1a8      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a75      	ldr	r2, [pc, #468]	@ (800b7d8 <UART_SetConfig+0x638>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d130      	bne.n	800b668 <UART_SetConfig+0x4c8>
 800b606:	4b73      	ldr	r3, [pc, #460]	@ (800b7d4 <UART_SetConfig+0x634>)
 800b608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b60a:	f003 0307 	and.w	r3, r3, #7
 800b60e:	2b05      	cmp	r3, #5
 800b610:	d826      	bhi.n	800b660 <UART_SetConfig+0x4c0>
 800b612:	a201      	add	r2, pc, #4	@ (adr r2, 800b618 <UART_SetConfig+0x478>)
 800b614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b618:	0800b631 	.word	0x0800b631
 800b61c:	0800b639 	.word	0x0800b639
 800b620:	0800b641 	.word	0x0800b641
 800b624:	0800b649 	.word	0x0800b649
 800b628:	0800b651 	.word	0x0800b651
 800b62c:	0800b659 	.word	0x0800b659
 800b630:	2300      	movs	r3, #0
 800b632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b636:	e18a      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b638:	2304      	movs	r3, #4
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b63e:	e186      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b640:	2308      	movs	r3, #8
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b646:	e182      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b648:	2310      	movs	r3, #16
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b64e:	e17e      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b650:	2320      	movs	r3, #32
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b656:	e17a      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b658:	2340      	movs	r3, #64	@ 0x40
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b65e:	e176      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b660:	2380      	movs	r3, #128	@ 0x80
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b666:	e172      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a5b      	ldr	r2, [pc, #364]	@ (800b7dc <UART_SetConfig+0x63c>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d130      	bne.n	800b6d4 <UART_SetConfig+0x534>
 800b672:	4b58      	ldr	r3, [pc, #352]	@ (800b7d4 <UART_SetConfig+0x634>)
 800b674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b676:	f003 0307 	and.w	r3, r3, #7
 800b67a:	2b05      	cmp	r3, #5
 800b67c:	d826      	bhi.n	800b6cc <UART_SetConfig+0x52c>
 800b67e:	a201      	add	r2, pc, #4	@ (adr r2, 800b684 <UART_SetConfig+0x4e4>)
 800b680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b684:	0800b69d 	.word	0x0800b69d
 800b688:	0800b6a5 	.word	0x0800b6a5
 800b68c:	0800b6ad 	.word	0x0800b6ad
 800b690:	0800b6b5 	.word	0x0800b6b5
 800b694:	0800b6bd 	.word	0x0800b6bd
 800b698:	0800b6c5 	.word	0x0800b6c5
 800b69c:	2300      	movs	r3, #0
 800b69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6a2:	e154      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b6a4:	2304      	movs	r3, #4
 800b6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6aa:	e150      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b6ac:	2308      	movs	r3, #8
 800b6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6b2:	e14c      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b6b4:	2310      	movs	r3, #16
 800b6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ba:	e148      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b6bc:	2320      	movs	r3, #32
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6c2:	e144      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b6c4:	2340      	movs	r3, #64	@ 0x40
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6ca:	e140      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b6cc:	2380      	movs	r3, #128	@ 0x80
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b6d2:	e13c      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a41      	ldr	r2, [pc, #260]	@ (800b7e0 <UART_SetConfig+0x640>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	f040 8082 	bne.w	800b7e4 <UART_SetConfig+0x644>
 800b6e0:	4b3c      	ldr	r3, [pc, #240]	@ (800b7d4 <UART_SetConfig+0x634>)
 800b6e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b6e8:	2b28      	cmp	r3, #40	@ 0x28
 800b6ea:	d86d      	bhi.n	800b7c8 <UART_SetConfig+0x628>
 800b6ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b6f4 <UART_SetConfig+0x554>)
 800b6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f2:	bf00      	nop
 800b6f4:	0800b799 	.word	0x0800b799
 800b6f8:	0800b7c9 	.word	0x0800b7c9
 800b6fc:	0800b7c9 	.word	0x0800b7c9
 800b700:	0800b7c9 	.word	0x0800b7c9
 800b704:	0800b7c9 	.word	0x0800b7c9
 800b708:	0800b7c9 	.word	0x0800b7c9
 800b70c:	0800b7c9 	.word	0x0800b7c9
 800b710:	0800b7c9 	.word	0x0800b7c9
 800b714:	0800b7a1 	.word	0x0800b7a1
 800b718:	0800b7c9 	.word	0x0800b7c9
 800b71c:	0800b7c9 	.word	0x0800b7c9
 800b720:	0800b7c9 	.word	0x0800b7c9
 800b724:	0800b7c9 	.word	0x0800b7c9
 800b728:	0800b7c9 	.word	0x0800b7c9
 800b72c:	0800b7c9 	.word	0x0800b7c9
 800b730:	0800b7c9 	.word	0x0800b7c9
 800b734:	0800b7a9 	.word	0x0800b7a9
 800b738:	0800b7c9 	.word	0x0800b7c9
 800b73c:	0800b7c9 	.word	0x0800b7c9
 800b740:	0800b7c9 	.word	0x0800b7c9
 800b744:	0800b7c9 	.word	0x0800b7c9
 800b748:	0800b7c9 	.word	0x0800b7c9
 800b74c:	0800b7c9 	.word	0x0800b7c9
 800b750:	0800b7c9 	.word	0x0800b7c9
 800b754:	0800b7b1 	.word	0x0800b7b1
 800b758:	0800b7c9 	.word	0x0800b7c9
 800b75c:	0800b7c9 	.word	0x0800b7c9
 800b760:	0800b7c9 	.word	0x0800b7c9
 800b764:	0800b7c9 	.word	0x0800b7c9
 800b768:	0800b7c9 	.word	0x0800b7c9
 800b76c:	0800b7c9 	.word	0x0800b7c9
 800b770:	0800b7c9 	.word	0x0800b7c9
 800b774:	0800b7b9 	.word	0x0800b7b9
 800b778:	0800b7c9 	.word	0x0800b7c9
 800b77c:	0800b7c9 	.word	0x0800b7c9
 800b780:	0800b7c9 	.word	0x0800b7c9
 800b784:	0800b7c9 	.word	0x0800b7c9
 800b788:	0800b7c9 	.word	0x0800b7c9
 800b78c:	0800b7c9 	.word	0x0800b7c9
 800b790:	0800b7c9 	.word	0x0800b7c9
 800b794:	0800b7c1 	.word	0x0800b7c1
 800b798:	2301      	movs	r3, #1
 800b79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b79e:	e0d6      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b7a0:	2304      	movs	r3, #4
 800b7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7a6:	e0d2      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b7a8:	2308      	movs	r3, #8
 800b7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ae:	e0ce      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b7b0:	2310      	movs	r3, #16
 800b7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7b6:	e0ca      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b7b8:	2320      	movs	r3, #32
 800b7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7be:	e0c6      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b7c0:	2340      	movs	r3, #64	@ 0x40
 800b7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7c6:	e0c2      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b7c8:	2380      	movs	r3, #128	@ 0x80
 800b7ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b7ce:	e0be      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b7d0:	40011400 	.word	0x40011400
 800b7d4:	58024400 	.word	0x58024400
 800b7d8:	40007800 	.word	0x40007800
 800b7dc:	40007c00 	.word	0x40007c00
 800b7e0:	40011800 	.word	0x40011800
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4aad      	ldr	r2, [pc, #692]	@ (800baa0 <UART_SetConfig+0x900>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d176      	bne.n	800b8dc <UART_SetConfig+0x73c>
 800b7ee:	4bad      	ldr	r3, [pc, #692]	@ (800baa4 <UART_SetConfig+0x904>)
 800b7f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b7f6:	2b28      	cmp	r3, #40	@ 0x28
 800b7f8:	d86c      	bhi.n	800b8d4 <UART_SetConfig+0x734>
 800b7fa:	a201      	add	r2, pc, #4	@ (adr r2, 800b800 <UART_SetConfig+0x660>)
 800b7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b800:	0800b8a5 	.word	0x0800b8a5
 800b804:	0800b8d5 	.word	0x0800b8d5
 800b808:	0800b8d5 	.word	0x0800b8d5
 800b80c:	0800b8d5 	.word	0x0800b8d5
 800b810:	0800b8d5 	.word	0x0800b8d5
 800b814:	0800b8d5 	.word	0x0800b8d5
 800b818:	0800b8d5 	.word	0x0800b8d5
 800b81c:	0800b8d5 	.word	0x0800b8d5
 800b820:	0800b8ad 	.word	0x0800b8ad
 800b824:	0800b8d5 	.word	0x0800b8d5
 800b828:	0800b8d5 	.word	0x0800b8d5
 800b82c:	0800b8d5 	.word	0x0800b8d5
 800b830:	0800b8d5 	.word	0x0800b8d5
 800b834:	0800b8d5 	.word	0x0800b8d5
 800b838:	0800b8d5 	.word	0x0800b8d5
 800b83c:	0800b8d5 	.word	0x0800b8d5
 800b840:	0800b8b5 	.word	0x0800b8b5
 800b844:	0800b8d5 	.word	0x0800b8d5
 800b848:	0800b8d5 	.word	0x0800b8d5
 800b84c:	0800b8d5 	.word	0x0800b8d5
 800b850:	0800b8d5 	.word	0x0800b8d5
 800b854:	0800b8d5 	.word	0x0800b8d5
 800b858:	0800b8d5 	.word	0x0800b8d5
 800b85c:	0800b8d5 	.word	0x0800b8d5
 800b860:	0800b8bd 	.word	0x0800b8bd
 800b864:	0800b8d5 	.word	0x0800b8d5
 800b868:	0800b8d5 	.word	0x0800b8d5
 800b86c:	0800b8d5 	.word	0x0800b8d5
 800b870:	0800b8d5 	.word	0x0800b8d5
 800b874:	0800b8d5 	.word	0x0800b8d5
 800b878:	0800b8d5 	.word	0x0800b8d5
 800b87c:	0800b8d5 	.word	0x0800b8d5
 800b880:	0800b8c5 	.word	0x0800b8c5
 800b884:	0800b8d5 	.word	0x0800b8d5
 800b888:	0800b8d5 	.word	0x0800b8d5
 800b88c:	0800b8d5 	.word	0x0800b8d5
 800b890:	0800b8d5 	.word	0x0800b8d5
 800b894:	0800b8d5 	.word	0x0800b8d5
 800b898:	0800b8d5 	.word	0x0800b8d5
 800b89c:	0800b8d5 	.word	0x0800b8d5
 800b8a0:	0800b8cd 	.word	0x0800b8cd
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8aa:	e050      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b8ac:	2304      	movs	r3, #4
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b2:	e04c      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b8b4:	2308      	movs	r3, #8
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ba:	e048      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b8bc:	2310      	movs	r3, #16
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8c2:	e044      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b8c4:	2320      	movs	r3, #32
 800b8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ca:	e040      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b8cc:	2340      	movs	r3, #64	@ 0x40
 800b8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8d2:	e03c      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b8d4:	2380      	movs	r3, #128	@ 0x80
 800b8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8da:	e038      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a71      	ldr	r2, [pc, #452]	@ (800baa8 <UART_SetConfig+0x908>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d130      	bne.n	800b948 <UART_SetConfig+0x7a8>
 800b8e6:	4b6f      	ldr	r3, [pc, #444]	@ (800baa4 <UART_SetConfig+0x904>)
 800b8e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8ea:	f003 0307 	and.w	r3, r3, #7
 800b8ee:	2b05      	cmp	r3, #5
 800b8f0:	d826      	bhi.n	800b940 <UART_SetConfig+0x7a0>
 800b8f2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8f8 <UART_SetConfig+0x758>)
 800b8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8f8:	0800b911 	.word	0x0800b911
 800b8fc:	0800b919 	.word	0x0800b919
 800b900:	0800b921 	.word	0x0800b921
 800b904:	0800b929 	.word	0x0800b929
 800b908:	0800b931 	.word	0x0800b931
 800b90c:	0800b939 	.word	0x0800b939
 800b910:	2302      	movs	r3, #2
 800b912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b916:	e01a      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b918:	2304      	movs	r3, #4
 800b91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91e:	e016      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b920:	2308      	movs	r3, #8
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b926:	e012      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b928:	2310      	movs	r3, #16
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b92e:	e00e      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b930:	2320      	movs	r3, #32
 800b932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b936:	e00a      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b938:	2340      	movs	r3, #64	@ 0x40
 800b93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b93e:	e006      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b940:	2380      	movs	r3, #128	@ 0x80
 800b942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b946:	e002      	b.n	800b94e <UART_SetConfig+0x7ae>
 800b948:	2380      	movs	r3, #128	@ 0x80
 800b94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a55      	ldr	r2, [pc, #340]	@ (800baa8 <UART_SetConfig+0x908>)
 800b954:	4293      	cmp	r3, r2
 800b956:	f040 80f8 	bne.w	800bb4a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b95a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b95e:	2b20      	cmp	r3, #32
 800b960:	dc46      	bgt.n	800b9f0 <UART_SetConfig+0x850>
 800b962:	2b02      	cmp	r3, #2
 800b964:	db75      	blt.n	800ba52 <UART_SetConfig+0x8b2>
 800b966:	3b02      	subs	r3, #2
 800b968:	2b1e      	cmp	r3, #30
 800b96a:	d872      	bhi.n	800ba52 <UART_SetConfig+0x8b2>
 800b96c:	a201      	add	r2, pc, #4	@ (adr r2, 800b974 <UART_SetConfig+0x7d4>)
 800b96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b972:	bf00      	nop
 800b974:	0800b9f7 	.word	0x0800b9f7
 800b978:	0800ba53 	.word	0x0800ba53
 800b97c:	0800b9ff 	.word	0x0800b9ff
 800b980:	0800ba53 	.word	0x0800ba53
 800b984:	0800ba53 	.word	0x0800ba53
 800b988:	0800ba53 	.word	0x0800ba53
 800b98c:	0800ba0f 	.word	0x0800ba0f
 800b990:	0800ba53 	.word	0x0800ba53
 800b994:	0800ba53 	.word	0x0800ba53
 800b998:	0800ba53 	.word	0x0800ba53
 800b99c:	0800ba53 	.word	0x0800ba53
 800b9a0:	0800ba53 	.word	0x0800ba53
 800b9a4:	0800ba53 	.word	0x0800ba53
 800b9a8:	0800ba53 	.word	0x0800ba53
 800b9ac:	0800ba1f 	.word	0x0800ba1f
 800b9b0:	0800ba53 	.word	0x0800ba53
 800b9b4:	0800ba53 	.word	0x0800ba53
 800b9b8:	0800ba53 	.word	0x0800ba53
 800b9bc:	0800ba53 	.word	0x0800ba53
 800b9c0:	0800ba53 	.word	0x0800ba53
 800b9c4:	0800ba53 	.word	0x0800ba53
 800b9c8:	0800ba53 	.word	0x0800ba53
 800b9cc:	0800ba53 	.word	0x0800ba53
 800b9d0:	0800ba53 	.word	0x0800ba53
 800b9d4:	0800ba53 	.word	0x0800ba53
 800b9d8:	0800ba53 	.word	0x0800ba53
 800b9dc:	0800ba53 	.word	0x0800ba53
 800b9e0:	0800ba53 	.word	0x0800ba53
 800b9e4:	0800ba53 	.word	0x0800ba53
 800b9e8:	0800ba53 	.word	0x0800ba53
 800b9ec:	0800ba45 	.word	0x0800ba45
 800b9f0:	2b40      	cmp	r3, #64	@ 0x40
 800b9f2:	d02a      	beq.n	800ba4a <UART_SetConfig+0x8aa>
 800b9f4:	e02d      	b.n	800ba52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b9f6:	f7fd fd69 	bl	80094cc <HAL_RCCEx_GetD3PCLK1Freq>
 800b9fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b9fc:	e02f      	b.n	800ba5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ba02:	4618      	mov	r0, r3
 800ba04:	f7fd fd78 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba0c:	e027      	b.n	800ba5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba0e:	f107 0318 	add.w	r3, r7, #24
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7fd fec4 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba1c:	e01f      	b.n	800ba5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba1e:	4b21      	ldr	r3, [pc, #132]	@ (800baa4 <UART_SetConfig+0x904>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	f003 0320 	and.w	r3, r3, #32
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d009      	beq.n	800ba3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba2a:	4b1e      	ldr	r3, [pc, #120]	@ (800baa4 <UART_SetConfig+0x904>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	08db      	lsrs	r3, r3, #3
 800ba30:	f003 0303 	and.w	r3, r3, #3
 800ba34:	4a1d      	ldr	r2, [pc, #116]	@ (800baac <UART_SetConfig+0x90c>)
 800ba36:	fa22 f303 	lsr.w	r3, r2, r3
 800ba3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba3c:	e00f      	b.n	800ba5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ba3e:	4b1b      	ldr	r3, [pc, #108]	@ (800baac <UART_SetConfig+0x90c>)
 800ba40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba42:	e00c      	b.n	800ba5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba44:	4b1a      	ldr	r3, [pc, #104]	@ (800bab0 <UART_SetConfig+0x910>)
 800ba46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba48:	e009      	b.n	800ba5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba50:	e005      	b.n	800ba5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ba52:	2300      	movs	r3, #0
 800ba54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ba56:	2301      	movs	r3, #1
 800ba58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ba5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 81ee 	beq.w	800be42 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba6a:	4a12      	ldr	r2, [pc, #72]	@ (800bab4 <UART_SetConfig+0x914>)
 800ba6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba70:	461a      	mov	r2, r3
 800ba72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba78:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	005b      	lsls	r3, r3, #1
 800ba82:	4413      	add	r3, r2
 800ba84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d305      	bcc.n	800ba96 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d910      	bls.n	800bab8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ba9c:	e1d1      	b.n	800be42 <UART_SetConfig+0xca2>
 800ba9e:	bf00      	nop
 800baa0:	40011c00 	.word	0x40011c00
 800baa4:	58024400 	.word	0x58024400
 800baa8:	58000c00 	.word	0x58000c00
 800baac:	03d09000 	.word	0x03d09000
 800bab0:	003d0900 	.word	0x003d0900
 800bab4:	0800c9bc 	.word	0x0800c9bc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baba:	2200      	movs	r2, #0
 800babc:	60bb      	str	r3, [r7, #8]
 800babe:	60fa      	str	r2, [r7, #12]
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac4:	4ac0      	ldr	r2, [pc, #768]	@ (800bdc8 <UART_SetConfig+0xc28>)
 800bac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	2200      	movs	r2, #0
 800bace:	603b      	str	r3, [r7, #0]
 800bad0:	607a      	str	r2, [r7, #4]
 800bad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bad6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bada:	f7f4 fc07 	bl	80002ec <__aeabi_uldivmod>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4610      	mov	r0, r2
 800bae4:	4619      	mov	r1, r3
 800bae6:	f04f 0200 	mov.w	r2, #0
 800baea:	f04f 0300 	mov.w	r3, #0
 800baee:	020b      	lsls	r3, r1, #8
 800baf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800baf4:	0202      	lsls	r2, r0, #8
 800baf6:	6979      	ldr	r1, [r7, #20]
 800baf8:	6849      	ldr	r1, [r1, #4]
 800bafa:	0849      	lsrs	r1, r1, #1
 800bafc:	2000      	movs	r0, #0
 800bafe:	460c      	mov	r4, r1
 800bb00:	4605      	mov	r5, r0
 800bb02:	eb12 0804 	adds.w	r8, r2, r4
 800bb06:	eb43 0905 	adc.w	r9, r3, r5
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	469a      	mov	sl, r3
 800bb12:	4693      	mov	fp, r2
 800bb14:	4652      	mov	r2, sl
 800bb16:	465b      	mov	r3, fp
 800bb18:	4640      	mov	r0, r8
 800bb1a:	4649      	mov	r1, r9
 800bb1c:	f7f4 fbe6 	bl	80002ec <__aeabi_uldivmod>
 800bb20:	4602      	mov	r2, r0
 800bb22:	460b      	mov	r3, r1
 800bb24:	4613      	mov	r3, r2
 800bb26:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb2e:	d308      	bcc.n	800bb42 <UART_SetConfig+0x9a2>
 800bb30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb36:	d204      	bcs.n	800bb42 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb3e:	60da      	str	r2, [r3, #12]
 800bb40:	e17f      	b.n	800be42 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bb48:	e17b      	b.n	800be42 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb52:	f040 80bd 	bne.w	800bcd0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800bb56:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bb5a:	2b20      	cmp	r3, #32
 800bb5c:	dc48      	bgt.n	800bbf0 <UART_SetConfig+0xa50>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	db7b      	blt.n	800bc5a <UART_SetConfig+0xaba>
 800bb62:	2b20      	cmp	r3, #32
 800bb64:	d879      	bhi.n	800bc5a <UART_SetConfig+0xaba>
 800bb66:	a201      	add	r2, pc, #4	@ (adr r2, 800bb6c <UART_SetConfig+0x9cc>)
 800bb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6c:	0800bbf7 	.word	0x0800bbf7
 800bb70:	0800bbff 	.word	0x0800bbff
 800bb74:	0800bc5b 	.word	0x0800bc5b
 800bb78:	0800bc5b 	.word	0x0800bc5b
 800bb7c:	0800bc07 	.word	0x0800bc07
 800bb80:	0800bc5b 	.word	0x0800bc5b
 800bb84:	0800bc5b 	.word	0x0800bc5b
 800bb88:	0800bc5b 	.word	0x0800bc5b
 800bb8c:	0800bc17 	.word	0x0800bc17
 800bb90:	0800bc5b 	.word	0x0800bc5b
 800bb94:	0800bc5b 	.word	0x0800bc5b
 800bb98:	0800bc5b 	.word	0x0800bc5b
 800bb9c:	0800bc5b 	.word	0x0800bc5b
 800bba0:	0800bc5b 	.word	0x0800bc5b
 800bba4:	0800bc5b 	.word	0x0800bc5b
 800bba8:	0800bc5b 	.word	0x0800bc5b
 800bbac:	0800bc27 	.word	0x0800bc27
 800bbb0:	0800bc5b 	.word	0x0800bc5b
 800bbb4:	0800bc5b 	.word	0x0800bc5b
 800bbb8:	0800bc5b 	.word	0x0800bc5b
 800bbbc:	0800bc5b 	.word	0x0800bc5b
 800bbc0:	0800bc5b 	.word	0x0800bc5b
 800bbc4:	0800bc5b 	.word	0x0800bc5b
 800bbc8:	0800bc5b 	.word	0x0800bc5b
 800bbcc:	0800bc5b 	.word	0x0800bc5b
 800bbd0:	0800bc5b 	.word	0x0800bc5b
 800bbd4:	0800bc5b 	.word	0x0800bc5b
 800bbd8:	0800bc5b 	.word	0x0800bc5b
 800bbdc:	0800bc5b 	.word	0x0800bc5b
 800bbe0:	0800bc5b 	.word	0x0800bc5b
 800bbe4:	0800bc5b 	.word	0x0800bc5b
 800bbe8:	0800bc5b 	.word	0x0800bc5b
 800bbec:	0800bc4d 	.word	0x0800bc4d
 800bbf0:	2b40      	cmp	r3, #64	@ 0x40
 800bbf2:	d02e      	beq.n	800bc52 <UART_SetConfig+0xab2>
 800bbf4:	e031      	b.n	800bc5a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbf6:	f7fb fda7 	bl	8007748 <HAL_RCC_GetPCLK1Freq>
 800bbfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bbfc:	e033      	b.n	800bc66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbfe:	f7fb fdb9 	bl	8007774 <HAL_RCC_GetPCLK2Freq>
 800bc02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bc04:	e02f      	b.n	800bc66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7fd fc74 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc14:	e027      	b.n	800bc66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc16:	f107 0318 	add.w	r3, r7, #24
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7fd fdc0 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc20:	69fb      	ldr	r3, [r7, #28]
 800bc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc24:	e01f      	b.n	800bc66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc26:	4b69      	ldr	r3, [pc, #420]	@ (800bdcc <UART_SetConfig+0xc2c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f003 0320 	and.w	r3, r3, #32
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d009      	beq.n	800bc46 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc32:	4b66      	ldr	r3, [pc, #408]	@ (800bdcc <UART_SetConfig+0xc2c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	08db      	lsrs	r3, r3, #3
 800bc38:	f003 0303 	and.w	r3, r3, #3
 800bc3c:	4a64      	ldr	r2, [pc, #400]	@ (800bdd0 <UART_SetConfig+0xc30>)
 800bc3e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc44:	e00f      	b.n	800bc66 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800bc46:	4b62      	ldr	r3, [pc, #392]	@ (800bdd0 <UART_SetConfig+0xc30>)
 800bc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc4a:	e00c      	b.n	800bc66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc4c:	4b61      	ldr	r3, [pc, #388]	@ (800bdd4 <UART_SetConfig+0xc34>)
 800bc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc50:	e009      	b.n	800bc66 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bc58:	e005      	b.n	800bc66 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bc64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 80ea 	beq.w	800be42 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc72:	4a55      	ldr	r2, [pc, #340]	@ (800bdc8 <UART_SetConfig+0xc28>)
 800bc74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc7c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc80:	005a      	lsls	r2, r3, #1
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	085b      	lsrs	r3, r3, #1
 800bc88:	441a      	add	r2, r3
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc96:	2b0f      	cmp	r3, #15
 800bc98:	d916      	bls.n	800bcc8 <UART_SetConfig+0xb28>
 800bc9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bca0:	d212      	bcs.n	800bcc8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	f023 030f 	bic.w	r3, r3, #15
 800bcaa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcae:	085b      	lsrs	r3, r3, #1
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	f003 0307 	and.w	r3, r3, #7
 800bcb6:	b29a      	uxth	r2, r3
 800bcb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800bcc4:	60da      	str	r2, [r3, #12]
 800bcc6:	e0bc      	b.n	800be42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bcce:	e0b8      	b.n	800be42 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bcd0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	dc4b      	bgt.n	800bd70 <UART_SetConfig+0xbd0>
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f2c0 8087 	blt.w	800bdec <UART_SetConfig+0xc4c>
 800bcde:	2b20      	cmp	r3, #32
 800bce0:	f200 8084 	bhi.w	800bdec <UART_SetConfig+0xc4c>
 800bce4:	a201      	add	r2, pc, #4	@ (adr r2, 800bcec <UART_SetConfig+0xb4c>)
 800bce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcea:	bf00      	nop
 800bcec:	0800bd77 	.word	0x0800bd77
 800bcf0:	0800bd7f 	.word	0x0800bd7f
 800bcf4:	0800bded 	.word	0x0800bded
 800bcf8:	0800bded 	.word	0x0800bded
 800bcfc:	0800bd87 	.word	0x0800bd87
 800bd00:	0800bded 	.word	0x0800bded
 800bd04:	0800bded 	.word	0x0800bded
 800bd08:	0800bded 	.word	0x0800bded
 800bd0c:	0800bd97 	.word	0x0800bd97
 800bd10:	0800bded 	.word	0x0800bded
 800bd14:	0800bded 	.word	0x0800bded
 800bd18:	0800bded 	.word	0x0800bded
 800bd1c:	0800bded 	.word	0x0800bded
 800bd20:	0800bded 	.word	0x0800bded
 800bd24:	0800bded 	.word	0x0800bded
 800bd28:	0800bded 	.word	0x0800bded
 800bd2c:	0800bda7 	.word	0x0800bda7
 800bd30:	0800bded 	.word	0x0800bded
 800bd34:	0800bded 	.word	0x0800bded
 800bd38:	0800bded 	.word	0x0800bded
 800bd3c:	0800bded 	.word	0x0800bded
 800bd40:	0800bded 	.word	0x0800bded
 800bd44:	0800bded 	.word	0x0800bded
 800bd48:	0800bded 	.word	0x0800bded
 800bd4c:	0800bded 	.word	0x0800bded
 800bd50:	0800bded 	.word	0x0800bded
 800bd54:	0800bded 	.word	0x0800bded
 800bd58:	0800bded 	.word	0x0800bded
 800bd5c:	0800bded 	.word	0x0800bded
 800bd60:	0800bded 	.word	0x0800bded
 800bd64:	0800bded 	.word	0x0800bded
 800bd68:	0800bded 	.word	0x0800bded
 800bd6c:	0800bddf 	.word	0x0800bddf
 800bd70:	2b40      	cmp	r3, #64	@ 0x40
 800bd72:	d037      	beq.n	800bde4 <UART_SetConfig+0xc44>
 800bd74:	e03a      	b.n	800bdec <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd76:	f7fb fce7 	bl	8007748 <HAL_RCC_GetPCLK1Freq>
 800bd7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd7c:	e03c      	b.n	800bdf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd7e:	f7fb fcf9 	bl	8007774 <HAL_RCC_GetPCLK2Freq>
 800bd82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bd84:	e038      	b.n	800bdf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fd fbb4 	bl	80094f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bd94:	e030      	b.n	800bdf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd96:	f107 0318 	add.w	r3, r7, #24
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fd fd00 	bl	80097a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bda4:	e028      	b.n	800bdf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bda6:	4b09      	ldr	r3, [pc, #36]	@ (800bdcc <UART_SetConfig+0xc2c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 0320 	and.w	r3, r3, #32
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d012      	beq.n	800bdd8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdb2:	4b06      	ldr	r3, [pc, #24]	@ (800bdcc <UART_SetConfig+0xc2c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	08db      	lsrs	r3, r3, #3
 800bdb8:	f003 0303 	and.w	r3, r3, #3
 800bdbc:	4a04      	ldr	r2, [pc, #16]	@ (800bdd0 <UART_SetConfig+0xc30>)
 800bdbe:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdc4:	e018      	b.n	800bdf8 <UART_SetConfig+0xc58>
 800bdc6:	bf00      	nop
 800bdc8:	0800c9bc 	.word	0x0800c9bc
 800bdcc:	58024400 	.word	0x58024400
 800bdd0:	03d09000 	.word	0x03d09000
 800bdd4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800bdd8:	4b24      	ldr	r3, [pc, #144]	@ (800be6c <UART_SetConfig+0xccc>)
 800bdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bddc:	e00c      	b.n	800bdf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bdde:	4b24      	ldr	r3, [pc, #144]	@ (800be70 <UART_SetConfig+0xcd0>)
 800bde0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bde2:	e009      	b.n	800bdf8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bde4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bde8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bdea:	e005      	b.n	800bdf8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800bdec:	2300      	movs	r3, #0
 800bdee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bdf6:	bf00      	nop
    }

    if (pclk != 0U)
 800bdf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d021      	beq.n	800be42 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be02:	4a1c      	ldr	r2, [pc, #112]	@ (800be74 <UART_SetConfig+0xcd4>)
 800be04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be08:	461a      	mov	r2, r3
 800be0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be0c:	fbb3 f2f2 	udiv	r2, r3, r2
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	085b      	lsrs	r3, r3, #1
 800be16:	441a      	add	r2, r3
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be20:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be24:	2b0f      	cmp	r3, #15
 800be26:	d909      	bls.n	800be3c <UART_SetConfig+0xc9c>
 800be28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be2e:	d205      	bcs.n	800be3c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be32:	b29a      	uxth	r2, r3
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	60da      	str	r2, [r3, #12]
 800be3a:	e002      	b.n	800be42 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	2201      	movs	r2, #1
 800be46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2201      	movs	r2, #1
 800be4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2200      	movs	r2, #0
 800be56:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2200      	movs	r2, #0
 800be5c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be5e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800be62:	4618      	mov	r0, r3
 800be64:	3748      	adds	r7, #72	@ 0x48
 800be66:	46bd      	mov	sp, r7
 800be68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be6c:	03d09000 	.word	0x03d09000
 800be70:	003d0900 	.word	0x003d0900
 800be74:	0800c9bc 	.word	0x0800c9bc

0800be78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be84:	f003 0308 	and.w	r3, r3, #8
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00a      	beq.n	800bea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	430a      	orrs	r2, r1
 800bea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00a      	beq.n	800bec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	685b      	ldr	r3, [r3, #4]
 800beb4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	430a      	orrs	r2, r1
 800bec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec8:	f003 0302 	and.w	r3, r3, #2
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00a      	beq.n	800bee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	430a      	orrs	r2, r1
 800bee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beea:	f003 0304 	and.w	r3, r3, #4
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00a      	beq.n	800bf08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	430a      	orrs	r2, r1
 800bf06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf0c:	f003 0310 	and.w	r3, r3, #16
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d00a      	beq.n	800bf2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf2e:	f003 0320 	and.w	r3, r3, #32
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00a      	beq.n	800bf4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	689b      	ldr	r3, [r3, #8]
 800bf3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	430a      	orrs	r2, r1
 800bf4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d01a      	beq.n	800bf8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf76:	d10a      	bne.n	800bf8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	430a      	orrs	r2, r1
 800bf8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	430a      	orrs	r2, r1
 800bfae:	605a      	str	r2, [r3, #4]
  }
}
 800bfb0:	bf00      	nop
 800bfb2:	370c      	adds	r7, #12
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b098      	sub	sp, #96	@ 0x60
 800bfc0:	af02      	add	r7, sp, #8
 800bfc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfcc:	f7f5 f9f6 	bl	80013bc <HAL_GetTick>
 800bfd0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f003 0308 	and.w	r3, r3, #8
 800bfdc:	2b08      	cmp	r3, #8
 800bfde:	d12f      	bne.n	800c040 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfe0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f88e 	bl	800c110 <UART_WaitOnFlagUntilTimeout>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d022      	beq.n	800c040 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c002:	e853 3f00 	ldrex	r3, [r3]
 800c006:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c00a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c00e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	461a      	mov	r2, r3
 800c016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c018:	647b      	str	r3, [r7, #68]	@ 0x44
 800c01a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c01e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c020:	e841 2300 	strex	r3, r2, [r1]
 800c024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e6      	bne.n	800bffa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e063      	b.n	800c108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0304 	and.w	r3, r3, #4
 800c04a:	2b04      	cmp	r3, #4
 800c04c:	d149      	bne.n	800c0e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c04e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c052:	9300      	str	r3, [sp, #0]
 800c054:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c056:	2200      	movs	r2, #0
 800c058:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f857 	bl	800c110 <UART_WaitOnFlagUntilTimeout>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d03c      	beq.n	800c0e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c070:	e853 3f00 	ldrex	r3, [r3]
 800c074:	623b      	str	r3, [r7, #32]
   return(result);
 800c076:	6a3b      	ldr	r3, [r7, #32]
 800c078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c07c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	461a      	mov	r2, r3
 800c084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c086:	633b      	str	r3, [r7, #48]	@ 0x30
 800c088:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c08c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c08e:	e841 2300 	strex	r3, r2, [r1]
 800c092:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1e6      	bne.n	800c068 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3308      	adds	r3, #8
 800c0a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	e853 3f00 	ldrex	r3, [r3]
 800c0a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f023 0301 	bic.w	r3, r3, #1
 800c0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0ba:	61fa      	str	r2, [r7, #28]
 800c0bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	69b9      	ldr	r1, [r7, #24]
 800c0c0:	69fa      	ldr	r2, [r7, #28]
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	617b      	str	r3, [r7, #20]
   return(result);
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e5      	bne.n	800c09a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	e012      	b.n	800c108 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2220      	movs	r2, #32
 800c0e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3758      	adds	r7, #88	@ 0x58
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	4613      	mov	r3, r2
 800c11e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c120:	e04f      	b.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c128:	d04b      	beq.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c12a:	f7f5 f947 	bl	80013bc <HAL_GetTick>
 800c12e:	4602      	mov	r2, r0
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	69ba      	ldr	r2, [r7, #24]
 800c136:	429a      	cmp	r2, r3
 800c138:	d302      	bcc.n	800c140 <UART_WaitOnFlagUntilTimeout+0x30>
 800c13a:	69bb      	ldr	r3, [r7, #24]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d101      	bne.n	800c144 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c140:	2303      	movs	r3, #3
 800c142:	e04e      	b.n	800c1e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0304 	and.w	r3, r3, #4
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d037      	beq.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b80      	cmp	r3, #128	@ 0x80
 800c156:	d034      	beq.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	2b40      	cmp	r3, #64	@ 0x40
 800c15c:	d031      	beq.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	69db      	ldr	r3, [r3, #28]
 800c164:	f003 0308 	and.w	r3, r3, #8
 800c168:	2b08      	cmp	r3, #8
 800c16a:	d110      	bne.n	800c18e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2208      	movs	r2, #8
 800c172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 f921 	bl	800c3bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2208      	movs	r2, #8
 800c17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e029      	b.n	800c1e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	69db      	ldr	r3, [r3, #28]
 800c194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c19c:	d111      	bne.n	800c1c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1a8:	68f8      	ldr	r0, [r7, #12]
 800c1aa:	f000 f907 	bl	800c3bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1be:	2303      	movs	r3, #3
 800c1c0:	e00f      	b.n	800c1e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	69da      	ldr	r2, [r3, #28]
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	4013      	ands	r3, r2
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	bf0c      	ite	eq
 800c1d2:	2301      	moveq	r3, #1
 800c1d4:	2300      	movne	r3, #0
 800c1d6:	b2db      	uxtb	r3, r3
 800c1d8:	461a      	mov	r2, r3
 800c1da:	79fb      	ldrb	r3, [r7, #7]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d0a0      	beq.n	800c122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b096      	sub	sp, #88	@ 0x58
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	88fa      	ldrh	r2, [r7, #6]
 800c204:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	2222      	movs	r2, #34	@ 0x22
 800c214:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d02d      	beq.n	800c27e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c228:	4a40      	ldr	r2, [pc, #256]	@ (800c32c <UART_Start_Receive_DMA+0x140>)
 800c22a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c232:	4a3f      	ldr	r2, [pc, #252]	@ (800c330 <UART_Start_Receive_DMA+0x144>)
 800c234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c23c:	4a3d      	ldr	r2, [pc, #244]	@ (800c334 <UART_Start_Receive_DMA+0x148>)
 800c23e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c246:	2200      	movs	r2, #0
 800c248:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3324      	adds	r3, #36	@ 0x24
 800c256:	4619      	mov	r1, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c25c:	461a      	mov	r2, r3
 800c25e:	88fb      	ldrh	r3, [r7, #6]
 800c260:	f7f7 fcf2 	bl	8003c48 <HAL_DMA_Start_IT>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d009      	beq.n	800c27e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2210      	movs	r2, #16
 800c26e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2220      	movs	r2, #32
 800c276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e051      	b.n	800c322 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	691b      	ldr	r3, [r3, #16]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d018      	beq.n	800c2b8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c28e:	e853 3f00 	ldrex	r3, [r3]
 800c292:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c296:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c29a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	461a      	mov	r2, r3
 800c2a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2a6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c2aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2ac:	e841 2300 	strex	r3, r2, [r1]
 800c2b0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c2b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d1e6      	bne.n	800c286 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	3308      	adds	r3, #8
 800c2be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c2:	e853 3f00 	ldrex	r3, [r3]
 800c2c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	f043 0301 	orr.w	r3, r3, #1
 800c2ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	3308      	adds	r3, #8
 800c2d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2d8:	637a      	str	r2, [r7, #52]	@ 0x34
 800c2da:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c2de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2e0:	e841 2300 	strex	r3, r2, [r1]
 800c2e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d1e5      	bne.n	800c2b8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	3308      	adds	r3, #8
 800c2f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	e853 3f00 	ldrex	r3, [r3]
 800c2fa:	613b      	str	r3, [r7, #16]
   return(result);
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3308      	adds	r3, #8
 800c30a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c30c:	623a      	str	r2, [r7, #32]
 800c30e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c310:	69f9      	ldr	r1, [r7, #28]
 800c312:	6a3a      	ldr	r2, [r7, #32]
 800c314:	e841 2300 	strex	r3, r2, [r1]
 800c318:	61bb      	str	r3, [r7, #24]
   return(result);
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d1e5      	bne.n	800c2ec <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c320:	2300      	movs	r3, #0
}
 800c322:	4618      	mov	r0, r3
 800c324:	3758      	adds	r7, #88	@ 0x58
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	0800c489 	.word	0x0800c489
 800c330:	0800c5b1 	.word	0x0800c5b1
 800c334:	0800c5ef 	.word	0x0800c5ef

0800c338 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c338:	b480      	push	{r7}
 800c33a:	b08f      	sub	sp, #60	@ 0x3c
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c346:	6a3b      	ldr	r3, [r7, #32]
 800c348:	e853 3f00 	ldrex	r3, [r3]
 800c34c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c354:	637b      	str	r3, [r7, #52]	@ 0x34
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	461a      	mov	r2, r3
 800c35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c360:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c362:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c364:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c366:	e841 2300 	strex	r3, r2, [r1]
 800c36a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d1e6      	bne.n	800c340 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	3308      	adds	r3, #8
 800c378:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	e853 3f00 	ldrex	r3, [r3]
 800c380:	60bb      	str	r3, [r7, #8]
   return(result);
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c388:	633b      	str	r3, [r7, #48]	@ 0x30
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	3308      	adds	r3, #8
 800c390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c392:	61ba      	str	r2, [r7, #24]
 800c394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c396:	6979      	ldr	r1, [r7, #20]
 800c398:	69ba      	ldr	r2, [r7, #24]
 800c39a:	e841 2300 	strex	r3, r2, [r1]
 800c39e:	613b      	str	r3, [r7, #16]
   return(result);
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1e5      	bne.n	800c372 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2220      	movs	r2, #32
 800c3aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c3ae:	bf00      	nop
 800c3b0:	373c      	adds	r7, #60	@ 0x3c
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
	...

0800c3bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b095      	sub	sp, #84	@ 0x54
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3cc:	e853 3f00 	ldrex	r3, [r3]
 800c3d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c3d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c3e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c3e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e6      	bne.n	800c3c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	3308      	adds	r3, #8
 800c3fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fe:	6a3b      	ldr	r3, [r7, #32]
 800c400:	e853 3f00 	ldrex	r3, [r3]
 800c404:	61fb      	str	r3, [r7, #28]
   return(result);
 800c406:	69fa      	ldr	r2, [r7, #28]
 800c408:	4b1e      	ldr	r3, [pc, #120]	@ (800c484 <UART_EndRxTransfer+0xc8>)
 800c40a:	4013      	ands	r3, r2
 800c40c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3308      	adds	r3, #8
 800c414:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c416:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c418:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c41a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c41c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c41e:	e841 2300 	strex	r3, r2, [r1]
 800c422:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1e5      	bne.n	800c3f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d118      	bne.n	800c464 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	e853 3f00 	ldrex	r3, [r3]
 800c43e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f023 0310 	bic.w	r3, r3, #16
 800c446:	647b      	str	r3, [r7, #68]	@ 0x44
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	461a      	mov	r2, r3
 800c44e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c450:	61bb      	str	r3, [r7, #24]
 800c452:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c454:	6979      	ldr	r1, [r7, #20]
 800c456:	69ba      	ldr	r2, [r7, #24]
 800c458:	e841 2300 	strex	r3, r2, [r1]
 800c45c:	613b      	str	r3, [r7, #16]
   return(result);
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d1e6      	bne.n	800c432 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2220      	movs	r2, #32
 800c468:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c478:	bf00      	nop
 800c47a:	3754      	adds	r7, #84	@ 0x54
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr
 800c484:	effffffe 	.word	0xeffffffe

0800c488 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b09c      	sub	sp, #112	@ 0x70
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c494:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c49e:	d071      	beq.n	800c584 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c4a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4b0:	e853 3f00 	ldrex	r3, [r3]
 800c4b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c4b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c4be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c4c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c4c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c4cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c4ce:	e841 2300 	strex	r3, r2, [r1]
 800c4d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c4d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1e6      	bne.n	800c4a8 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3308      	adds	r3, #8
 800c4e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e4:	e853 3f00 	ldrex	r3, [r3]
 800c4e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c4ec:	f023 0301 	bic.w	r3, r3, #1
 800c4f0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c4f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	3308      	adds	r3, #8
 800c4f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c4fa:	647a      	str	r2, [r7, #68]	@ 0x44
 800c4fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c500:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c502:	e841 2300 	strex	r3, r2, [r1]
 800c506:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1e5      	bne.n	800c4da <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c50e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	3308      	adds	r3, #8
 800c514:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c518:	e853 3f00 	ldrex	r3, [r3]
 800c51c:	623b      	str	r3, [r7, #32]
   return(result);
 800c51e:	6a3b      	ldr	r3, [r7, #32]
 800c520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c524:	663b      	str	r3, [r7, #96]	@ 0x60
 800c526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	3308      	adds	r3, #8
 800c52c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c52e:	633a      	str	r2, [r7, #48]	@ 0x30
 800c530:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c532:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c534:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c536:	e841 2300 	strex	r3, r2, [r1]
 800c53a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1e5      	bne.n	800c50e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c544:	2220      	movs	r2, #32
 800c546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c54a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c54c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d118      	bne.n	800c584 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	e853 3f00 	ldrex	r3, [r3]
 800c55e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	f023 0310 	bic.w	r3, r3, #16
 800c566:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	461a      	mov	r2, r3
 800c56e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c570:	61fb      	str	r3, [r7, #28]
 800c572:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c574:	69b9      	ldr	r1, [r7, #24]
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	e841 2300 	strex	r3, r2, [r1]
 800c57c:	617b      	str	r3, [r7, #20]
   return(result);
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1e6      	bne.n	800c552 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c586:	2200      	movs	r2, #0
 800c588:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c58a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c58c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d107      	bne.n	800c5a2 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c594:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c598:	4619      	mov	r1, r3
 800c59a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c59c:	f7fe fdf4 	bl	800b188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5a0:	e002      	b.n	800c5a8 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c5a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5a4:	f7f4 fb96 	bl	8000cd4 <HAL_UART_RxCpltCallback>
}
 800c5a8:	bf00      	nop
 800c5aa:	3770      	adds	r7, #112	@ 0x70
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d109      	bne.n	800c5e0 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c5d2:	085b      	lsrs	r3, r3, #1
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7fe fdd5 	bl	800b188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5de:	e002      	b.n	800c5e6 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f7fe fdbd 	bl	800b160 <HAL_UART_RxHalfCpltCallback>
}
 800c5e6:	bf00      	nop
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}

0800c5ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c5ee:	b580      	push	{r7, lr}
 800c5f0:	b086      	sub	sp, #24
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c602:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c616:	2b80      	cmp	r3, #128	@ 0x80
 800c618:	d109      	bne.n	800c62e <UART_DMAError+0x40>
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	2b21      	cmp	r3, #33	@ 0x21
 800c61e:	d106      	bne.n	800c62e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2200      	movs	r2, #0
 800c624:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c628:	6978      	ldr	r0, [r7, #20]
 800c62a:	f7ff fe85 	bl	800c338 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c638:	2b40      	cmp	r3, #64	@ 0x40
 800c63a:	d109      	bne.n	800c650 <UART_DMAError+0x62>
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2b22      	cmp	r3, #34	@ 0x22
 800c640:	d106      	bne.n	800c650 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2200      	movs	r2, #0
 800c646:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c64a:	6978      	ldr	r0, [r7, #20]
 800c64c:	f7ff feb6 	bl	800c3bc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c656:	f043 0210 	orr.w	r2, r3, #16
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c660:	6978      	ldr	r0, [r7, #20]
 800c662:	f7fe fd87 	bl	800b174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c666:	bf00      	nop
 800c668:	3718      	adds	r7, #24
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b084      	sub	sp, #16
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c67a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2200      	movs	r2, #0
 800c680:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f7fe fd71 	bl	800b174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c692:	bf00      	nop
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b088      	sub	sp, #32
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	e853 3f00 	ldrex	r3, [r3]
 800c6ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6b0:	68bb      	ldr	r3, [r7, #8]
 800c6b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6b6:	61fb      	str	r3, [r7, #28]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	461a      	mov	r2, r3
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	61bb      	str	r3, [r7, #24]
 800c6c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c4:	6979      	ldr	r1, [r7, #20]
 800c6c6:	69ba      	ldr	r2, [r7, #24]
 800c6c8:	e841 2300 	strex	r3, r2, [r1]
 800c6cc:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1e6      	bne.n	800c6a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2220      	movs	r2, #32
 800c6d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7fe fd32 	bl	800b14c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6e8:	bf00      	nop
 800c6ea:	3720      	adds	r7, #32
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c6f8:	bf00      	nop
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c70c:	bf00      	nop
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b085      	sub	sp, #20
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d101      	bne.n	800c742 <HAL_UARTEx_DisableFifoMode+0x16>
 800c73e:	2302      	movs	r3, #2
 800c740:	e027      	b.n	800c792 <HAL_UARTEx_DisableFifoMode+0x66>
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2201      	movs	r2, #1
 800c746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2224      	movs	r2, #36	@ 0x24
 800c74e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f022 0201 	bic.w	r2, r2, #1
 800c768:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c770:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2200      	movs	r2, #0
 800c776:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	68fa      	ldr	r2, [r7, #12]
 800c77e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2220      	movs	r2, #32
 800c784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3714      	adds	r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr

0800c79e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c79e:	b580      	push	{r7, lr}
 800c7a0:	b084      	sub	sp, #16
 800c7a2:	af00      	add	r7, sp, #0
 800c7a4:	6078      	str	r0, [r7, #4]
 800c7a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7ae:	2b01      	cmp	r3, #1
 800c7b0:	d101      	bne.n	800c7b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7b2:	2302      	movs	r3, #2
 800c7b4:	e02d      	b.n	800c812 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2201      	movs	r2, #1
 800c7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2224      	movs	r2, #36	@ 0x24
 800c7c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f022 0201 	bic.w	r2, r2, #1
 800c7dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f850 	bl	800c898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68fa      	ldr	r2, [r7, #12]
 800c7fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2220      	movs	r2, #32
 800c804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d101      	bne.n	800c832 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c82e:	2302      	movs	r3, #2
 800c830:	e02d      	b.n	800c88e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2224      	movs	r2, #36	@ 0x24
 800c83e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f022 0201 	bic.w	r2, r2, #1
 800c858:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	689b      	ldr	r3, [r3, #8]
 800c860:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	430a      	orrs	r2, r1
 800c86c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f812 	bl	800c898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2220      	movs	r2, #32
 800c880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c88c:	2300      	movs	r3, #0
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
	...

0800c898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d108      	bne.n	800c8ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2201      	movs	r2, #1
 800c8ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8b8:	e031      	b.n	800c91e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8ba:	2310      	movs	r3, #16
 800c8bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8be:	2310      	movs	r3, #16
 800c8c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	0e5b      	lsrs	r3, r3, #25
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	f003 0307 	and.w	r3, r3, #7
 800c8d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	0f5b      	lsrs	r3, r3, #29
 800c8da:	b2db      	uxtb	r3, r3
 800c8dc:	f003 0307 	and.w	r3, r3, #7
 800c8e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8e2:	7bbb      	ldrb	r3, [r7, #14]
 800c8e4:	7b3a      	ldrb	r2, [r7, #12]
 800c8e6:	4911      	ldr	r1, [pc, #68]	@ (800c92c <UARTEx_SetNbDataToProcess+0x94>)
 800c8e8:	5c8a      	ldrb	r2, [r1, r2]
 800c8ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c8ee:	7b3a      	ldrb	r2, [r7, #12]
 800c8f0:	490f      	ldr	r1, [pc, #60]	@ (800c930 <UARTEx_SetNbDataToProcess+0x98>)
 800c8f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c8f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8f8:	b29a      	uxth	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c900:	7bfb      	ldrb	r3, [r7, #15]
 800c902:	7b7a      	ldrb	r2, [r7, #13]
 800c904:	4909      	ldr	r1, [pc, #36]	@ (800c92c <UARTEx_SetNbDataToProcess+0x94>)
 800c906:	5c8a      	ldrb	r2, [r1, r2]
 800c908:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c90c:	7b7a      	ldrb	r2, [r7, #13]
 800c90e:	4908      	ldr	r1, [pc, #32]	@ (800c930 <UARTEx_SetNbDataToProcess+0x98>)
 800c910:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c912:	fb93 f3f2 	sdiv	r3, r3, r2
 800c916:	b29a      	uxth	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c91e:	bf00      	nop
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	0800c9d4 	.word	0x0800c9d4
 800c930:	0800c9dc 	.word	0x0800c9dc

0800c934 <memset>:
 800c934:	4402      	add	r2, r0
 800c936:	4603      	mov	r3, r0
 800c938:	4293      	cmp	r3, r2
 800c93a:	d100      	bne.n	800c93e <memset+0xa>
 800c93c:	4770      	bx	lr
 800c93e:	f803 1b01 	strb.w	r1, [r3], #1
 800c942:	e7f9      	b.n	800c938 <memset+0x4>

0800c944 <__libc_init_array>:
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	4d0d      	ldr	r5, [pc, #52]	@ (800c97c <__libc_init_array+0x38>)
 800c948:	4c0d      	ldr	r4, [pc, #52]	@ (800c980 <__libc_init_array+0x3c>)
 800c94a:	1b64      	subs	r4, r4, r5
 800c94c:	10a4      	asrs	r4, r4, #2
 800c94e:	2600      	movs	r6, #0
 800c950:	42a6      	cmp	r6, r4
 800c952:	d109      	bne.n	800c968 <__libc_init_array+0x24>
 800c954:	4d0b      	ldr	r5, [pc, #44]	@ (800c984 <__libc_init_array+0x40>)
 800c956:	4c0c      	ldr	r4, [pc, #48]	@ (800c988 <__libc_init_array+0x44>)
 800c958:	f000 f818 	bl	800c98c <_init>
 800c95c:	1b64      	subs	r4, r4, r5
 800c95e:	10a4      	asrs	r4, r4, #2
 800c960:	2600      	movs	r6, #0
 800c962:	42a6      	cmp	r6, r4
 800c964:	d105      	bne.n	800c972 <__libc_init_array+0x2e>
 800c966:	bd70      	pop	{r4, r5, r6, pc}
 800c968:	f855 3b04 	ldr.w	r3, [r5], #4
 800c96c:	4798      	blx	r3
 800c96e:	3601      	adds	r6, #1
 800c970:	e7ee      	b.n	800c950 <__libc_init_array+0xc>
 800c972:	f855 3b04 	ldr.w	r3, [r5], #4
 800c976:	4798      	blx	r3
 800c978:	3601      	adds	r6, #1
 800c97a:	e7f2      	b.n	800c962 <__libc_init_array+0x1e>
 800c97c:	0800c9ec 	.word	0x0800c9ec
 800c980:	0800c9ec 	.word	0x0800c9ec
 800c984:	0800c9ec 	.word	0x0800c9ec
 800c988:	0800c9f0 	.word	0x0800c9f0

0800c98c <_init>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	bf00      	nop
 800c990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c992:	bc08      	pop	{r3}
 800c994:	469e      	mov	lr, r3
 800c996:	4770      	bx	lr

0800c998 <_fini>:
 800c998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99a:	bf00      	nop
 800c99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c99e:	bc08      	pop	{r3}
 800c9a0:	469e      	mov	lr, r3
 800c9a2:	4770      	bx	lr
