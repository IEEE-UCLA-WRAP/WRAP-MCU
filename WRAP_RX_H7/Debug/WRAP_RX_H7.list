
WRAP_RX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e308  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800e5b8  0800e5b8  0000f5b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e7e0  0800e7e0  0000f7e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e7e8  0800e7e8  0000f7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e7ec  0800e7ec  0000f7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000004a0  24000000  0800e7f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001aecc  240004a0  0800ec90  000104a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2401b36c  0800ec90  0001136c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000104a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d1b7  00000000  00000000  000104ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003362  00000000  00000000  0002d685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015f0  00000000  00000000  000309e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010f8  00000000  00000000  00031fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032d1c  00000000  00000000  000330d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001de21  00000000  00000000  00065dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154a54  00000000  00000000  00083c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001d8661  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000062d4  00000000  00000000  001d871c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001de9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000026a0  00000000  00000000  001dea5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  001e10ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240004a0 	.word	0x240004a0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e5a0 	.word	0x0800e5a0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240004a4 	.word	0x240004a4
 80002ec:	0800e5a0 	.word	0x0800e5a0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e6:	f000 ff45 	bl	8001474 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 fbf5 	bl	8001dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f8ff 	bl	80007f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f2:	f000 f9bf 	bl	8000974 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fb85 	bl	8000d04 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fa:	f000 fb63 	bl	8000cc4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005fe:	f000 f9e9 	bl	80009d4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000602:	f000 fa65 	bl	8000ad0 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fb11 	bl	8000c2c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800060a:	f000 fac1 	bl	8000b90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
	HAL_ADC_Start(&hadc2);
 800060e:	4865      	ldr	r0, [pc, #404]	@ (80007a4 <main+0x1c4>)
 8000610:	f001 ffd0 	bl	80025b4 <HAL_ADC_Start>

	// Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8000614:	f241 1294 	movw	r2, #4500	@ 0x1194
 8000618:	4963      	ldr	r1, [pc, #396]	@ (80007a8 <main+0x1c8>)
 800061a:	4864      	ldr	r0, [pc, #400]	@ (80007ac <main+0x1cc>)
 800061c:	f002 ffb6 	bl	800358c <HAL_ADCEx_MultiModeStart_DMA>

  uint16_t * samples;
  uint8_t packet_found;

  // setup params
  params_r params = {.CL_phase = 0,
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	4b5d      	ldr	r3, [pc, #372]	@ (80007b0 <main+0x1d0>)
 800063a:	613b      	str	r3, [r7, #16]

    /* USER CODE BEGIN 3 */

	// execute one buffer at a time. Look at SWV console to see if computation time is too long
	// alias buffer for ease
	if (buff_flag_1) {
 800063c:	4b5d      	ldr	r3, [pc, #372]	@ (80007b4 <main+0x1d4>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <main+0x6a>
	  samples = buffer_1;
 8000646:	4b5c      	ldr	r3, [pc, #368]	@ (80007b8 <main+0x1d8>)
 8000648:	61bb      	str	r3, [r7, #24]
	}
	if (buff_flag_2) {
 800064a:	4b5c      	ldr	r3, [pc, #368]	@ (80007bc <main+0x1dc>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <main+0x78>
	  samples = buffer_2;
 8000654:	4b5a      	ldr	r3, [pc, #360]	@ (80007c0 <main+0x1e0>)
 8000656:	61bb      	str	r3, [r7, #24]
	}

	if (buff_flag_1 || buff_flag_2) {
 8000658:	4b56      	ldr	r3, [pc, #344]	@ (80007b4 <main+0x1d4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d104      	bne.n	800066c <main+0x8c>
 8000662:	4b56      	ldr	r3, [pc, #344]	@ (80007bc <main+0x1dc>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d0e7      	beq.n	800063c <main+0x5c>
	  packet_found = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	75fb      	strb	r3, [r7, #23]
	  // demodulate buffer
	  start = __HAL_TIM_GET_COUNTER(&htim2);
 8000670:	4b54      	ldr	r3, [pc, #336]	@ (80007c4 <main+0x1e4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000676:	4a54      	ldr	r2, [pc, #336]	@ (80007c8 <main+0x1e8>)
 8000678:	6013      	str	r3, [r2, #0]
	  num_symbs = demodulate(buffer_1, temp_symbs, &params);
 800067a:	463b      	mov	r3, r7
 800067c:	461a      	mov	r2, r3
 800067e:	4953      	ldr	r1, [pc, #332]	@ (80007cc <main+0x1ec>)
 8000680:	484d      	ldr	r0, [pc, #308]	@ (80007b8 <main+0x1d8>)
 8000682:	f000 fc5d 	bl	8000f40 <demodulate>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b51      	ldr	r3, [pc, #324]	@ (80007d0 <main+0x1f0>)
 800068c:	601a      	str	r2, [r3, #0]
	  end = __HAL_TIM_GET_COUNTER(&htim2);
 800068e:	4b4d      	ldr	r3, [pc, #308]	@ (80007c4 <main+0x1e4>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000694:	4a4f      	ldr	r2, [pc, #316]	@ (80007d4 <main+0x1f4>)
 8000696:	6013      	str	r3, [r2, #0]
	  total_symbs += num_symbs;
 8000698:	4b4f      	ldr	r3, [pc, #316]	@ (80007d8 <main+0x1f8>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b4c      	ldr	r3, [pc, #304]	@ (80007d0 <main+0x1f0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	4a4d      	ldr	r2, [pc, #308]	@ (80007d8 <main+0x1f8>)
 80006a4:	6013      	str	r3, [r2, #0]
	  // add temp_symbs to running buffer for correlation
	  // shift latest entries
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006aa:	e00f      	b.n	80006cc <main+0xec>
		  symbol_buffer[j] = symbol_buffer[j+num_symbs];
 80006ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006ae:	4b48      	ldr	r3, [pc, #288]	@ (80007d0 <main+0x1f0>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	4a49      	ldr	r2, [pc, #292]	@ (80007dc <main+0x1fc>)
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	4413      	add	r3, r2
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4947      	ldr	r1, [pc, #284]	@ (80007dc <main+0x1fc>)
 80006be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	440b      	add	r3, r1
 80006c4:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 80006c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006c8:	3301      	adds	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006cc:	4b40      	ldr	r3, [pc, #256]	@ (80007d0 <main+0x1f0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f1c3 022d 	rsb	r2, r3, #45	@ 0x2d
 80006d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d8e8      	bhi.n	80006ac <main+0xcc>
	  }
	  for (int j = 0; j < num_symbs; j++) {
 80006da:	2300      	movs	r3, #0
 80006dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006de:	e010      	b.n	8000702 <main+0x122>
		  symbol_buffer[SYMBOL_BUFF-1-num_symbs+j] = temp_symbs[j];
 80006e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006e2:	4b3b      	ldr	r3, [pc, #236]	@ (80007d0 <main+0x1f0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	332c      	adds	r3, #44	@ 0x2c
 80006ea:	4938      	ldr	r1, [pc, #224]	@ (80007cc <main+0x1ec>)
 80006ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006ee:	0092      	lsls	r2, r2, #2
 80006f0:	440a      	add	r2, r1
 80006f2:	6812      	ldr	r2, [r2, #0]
 80006f4:	4939      	ldr	r1, [pc, #228]	@ (80007dc <main+0x1fc>)
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	440b      	add	r3, r1
 80006fa:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < num_symbs; j++) {
 80006fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006fe:	3301      	adds	r3, #1
 8000700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000702:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000704:	4b32      	ldr	r3, [pc, #200]	@ (80007d0 <main+0x1f0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	429a      	cmp	r2, r3
 800070a:	d3e9      	bcc.n	80006e0 <main+0x100>
	  }

	  if (total_symbs >= NUM_SYMBS) {
 800070c:	4b32      	ldr	r3, [pc, #200]	@ (80007d8 <main+0x1f8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b16      	cmp	r3, #22
 8000712:	d93c      	bls.n	800078e <main+0x1ae>
			packet_found = find_packet(symbol_buffer, bits, SYMBOL_BUFF);
 8000714:	222d      	movs	r2, #45	@ 0x2d
 8000716:	4932      	ldr	r1, [pc, #200]	@ (80007e0 <main+0x200>)
 8000718:	4830      	ldr	r0, [pc, #192]	@ (80007dc <main+0x1fc>)
 800071a:	f000 fdd5 	bl	80012c8 <find_packet>
 800071e:	4603      	mov	r3, r0
 8000720:	75fb      	strb	r3, [r7, #23]
			if (packet_found) {
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d02f      	beq.n	8000788 <main+0x1a8>
				for (int i = 0; i < NUM_SYMBS- (NUM_PACKET_H * 15); i = i+8) {
 8000728:	2300      	movs	r3, #0
 800072a:	627b      	str	r3, [r7, #36]	@ 0x24
 800072c:	e023      	b.n	8000776 <main+0x196>
					uint8_t result = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
					for(int j = 0; j < 8; j++)
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
 8000738:	e011      	b.n	800075e <main+0x17e>
					{
						result <<= 1;
 800073a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
						result += bits[i + j];
 8000744:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	4413      	add	r3, r2
 800074a:	4a25      	ldr	r2, [pc, #148]	@ (80007e0 <main+0x200>)
 800074c:	5cd2      	ldrb	r2, [r2, r3]
 800074e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000752:	4413      	add	r3, r2
 8000754:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
					for(int j = 0; j < 8; j++)
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	3301      	adds	r3, #1
 800075c:	61fb      	str	r3, [r7, #28]
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	2b07      	cmp	r3, #7
 8000762:	ddea      	ble.n	800073a <main+0x15a>
					}
					t_str[i>>3] = result;
 8000764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000766:	10db      	asrs	r3, r3, #3
 8000768:	491e      	ldr	r1, [pc, #120]	@ (80007e4 <main+0x204>)
 800076a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800076e:	54ca      	strb	r2, [r1, r3]
				for (int i = 0; i < NUM_SYMBS- (NUM_PACKET_H * 15); i = i+8) {
 8000770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000772:	3308      	adds	r3, #8
 8000774:	627b      	str	r3, [r7, #36]	@ 0x24
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	2b07      	cmp	r3, #7
 800077a:	ddd8      	ble.n	800072e <main+0x14e>
				}
				HAL_UART_Transmit(&huart3, (uint8_t *)t_str, sizeof(t_str), 100);
 800077c:	2364      	movs	r3, #100	@ 0x64
 800077e:	2201      	movs	r2, #1
 8000780:	4918      	ldr	r1, [pc, #96]	@ (80007e4 <main+0x204>)
 8000782:	4819      	ldr	r0, [pc, #100]	@ (80007e8 <main+0x208>)
 8000784:	f00a fb34 	bl	800adf0 <HAL_UART_Transmit>
			}

			total_symbs = 0;
 8000788:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <main+0x1f8>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
	  }
	  buff_process = RESET;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <main+0x20c>)
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <main+0x1d4>)
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <main+0x1dc>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	if (buff_flag_1) {
 80007a0:	e74c      	b.n	800063c <main+0x5c>
 80007a2:	bf00      	nop
 80007a4:	24000520 	.word	0x24000520
 80007a8:	240006dc 	.word	0x240006dc
 80007ac:	240004bc 	.word	0x240004bc
 80007b0:	42c80000 	.word	0x42c80000
 80007b4:	240094f0 	.word	0x240094f0
 80007b8:	24004d2c 	.word	0x24004d2c
 80007bc:	240094f1 	.word	0x240094f1
 80007c0:	24007054 	.word	0x24007054
 80007c4:	240005fc 	.word	0x240005fc
 80007c8:	240094f4 	.word	0x240094f4
 80007cc:	2400937c 	.word	0x2400937c
 80007d0:	240094fc 	.word	0x240094fc
 80007d4:	240094f8 	.word	0x240094f8
 80007d8:	24009500 	.word	0x24009500
 80007dc:	24009434 	.word	0x24009434
 80007e0:	240094e8 	.word	0x240094e8
 80007e4:	24009504 	.word	0x24009504
 80007e8:	24000648 	.word	0x24000648
 80007ec:	240094f2 	.word	0x240094f2

080007f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0a4      	sub	sp, #144	@ 0x90
 80007f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80007fa:	224c      	movs	r2, #76	@ 0x4c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00c fe9c 	bl	800d53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	2220      	movs	r2, #32
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f00c fe95 	bl	800d53c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
 8000822:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000824:	4b51      	ldr	r3, [pc, #324]	@ (800096c <SystemClock_Config+0x17c>)
 8000826:	f04f 32ff 	mov.w	r2, #4294967295
 800082a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800082e:	2004      	movs	r0, #4
 8000830:	f006 fa8a 	bl	8006d48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	4b4d      	ldr	r3, [pc, #308]	@ (8000970 <SystemClock_Config+0x180>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a4c      	ldr	r2, [pc, #304]	@ (8000970 <SystemClock_Config+0x180>)
 800083e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b4a      	ldr	r3, [pc, #296]	@ (8000970 <SystemClock_Config+0x180>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000850:	bf00      	nop
 8000852:	4b47      	ldr	r3, [pc, #284]	@ (8000970 <SystemClock_Config+0x180>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800085a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800085e:	d1f8      	bne.n	8000852 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000860:	f006 fa62 	bl	8006d28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000864:	4b41      	ldr	r3, [pc, #260]	@ (800096c <SystemClock_Config+0x17c>)
 8000866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000868:	4a40      	ldr	r2, [pc, #256]	@ (800096c <SystemClock_Config+0x17c>)
 800086a:	f023 0318 	bic.w	r3, r3, #24
 800086e:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000870:	2327      	movs	r3, #39	@ 0x27
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000878:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800087a:	2301      	movs	r3, #1
 800087c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800087e:	2301      	movs	r3, #1
 8000880:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000882:	2340      	movs	r3, #64	@ 0x40
 8000884:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000886:	2301      	movs	r3, #1
 8000888:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800088a:	2302      	movs	r3, #2
 800088c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088e:	2302      	movs	r3, #2
 8000890:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000892:	2301      	movs	r3, #1
 8000894:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000896:	2346      	movs	r3, #70	@ 0x46
 8000898:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089e:	2304      	movs	r3, #4
 80008a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a2:	2302      	movs	r3, #2
 80008a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008a8:	230c      	movs	r3, #12
 80008aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008be:	4618      	mov	r0, r3
 80008c0:	f006 fa9c 	bl	8006dfc <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xde>
  {
    Error_Handler();
 80008ca:	f000 fdff 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	233f      	movs	r3, #63	@ 0x3f
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008de:	2340      	movs	r3, #64	@ 0x40
 80008e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008e2:	2340      	movs	r3, #64	@ 0x40
 80008e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80008f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f4:	2106      	movs	r1, #6
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 feb2 	bl	8007660 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000902:	f000 fde3 	bl	80014cc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000906:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800090a:	2100      	movs	r1, #0
 800090c:	2000      	movs	r0, #0
 800090e:	f007 f85d 	bl	80079cc <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000912:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000916:	2100      	movs	r1, #0
 8000918:	2001      	movs	r0, #1
 800091a:	f007 f857 	bl	80079cc <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800091e:	4b13      	ldr	r3, [pc, #76]	@ (800096c <SystemClock_Config+0x17c>)
 8000920:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000924:	4a11      	ldr	r2, [pc, #68]	@ (800096c <SystemClock_Config+0x17c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <SystemClock_Config+0x17c>)
 8000930:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000940:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000944:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800094a:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800094e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000950:	2322      	movs	r3, #34	@ 0x22
 8000952:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000954:	2320      	movs	r3, #32
 8000956:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4618      	mov	r0, r3
 800095e:	f009 fd1b 	bl	800a398 <HAL_RCCEx_CRSConfig>
}
 8000962:	bf00      	nop
 8000964:	3790      	adds	r7, #144	@ 0x90
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	58024400 	.word	0x58024400
 8000970:	58024800 	.word	0x58024800

08000974 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0b0      	sub	sp, #192	@ 0xc0
 8000978:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	22c0      	movs	r2, #192	@ 0xc0
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f00c fddb 	bl	800d53c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000986:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800098a:	f04f 0300 	mov.w	r3, #0
 800098e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000992:	2301      	movs	r3, #1
 8000994:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000996:	2312      	movs	r3, #18
 8000998:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 800099a:	2303      	movs	r3, #3
 800099c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009a6:	23c0      	movs	r3, #192	@ 0xc0
 80009a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80009ae:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009b4:	2300      	movs	r3, #0
 80009b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4618      	mov	r0, r3
 80009be:	f007 fa45 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80009c8:	f000 fd80 	bl	80014cc <Error_Handler>
  }
}
 80009cc:	bf00      	nop
 80009ce:	37c0      	adds	r7, #192	@ 0xc0
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	@ 0x28
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009e6:	463b      	mov	r3, r7
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]
 80009f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f8:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 80009fa:	4a33      	ldr	r2, [pc, #204]	@ (8000ac8 <MX_ADC1_Init+0xf4>)
 80009fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009fe:	4b31      	ldr	r3, [pc, #196]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000a04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a06:	221c      	movs	r2, #28
 8000a08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a10:	4b2c      	ldr	r3, [pc, #176]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a12:	2204      	movs	r2, #4
 8000a14:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a16:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a1c:	4b29      	ldr	r3, [pc, #164]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a22:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a28:	4b26      	ldr	r3, [pc, #152]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a2e:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a34:	4b23      	ldr	r3, [pc, #140]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a3a:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a40:	4b20      	ldr	r3, [pc, #128]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a54:	481b      	ldr	r0, [pc, #108]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a56:	f001 fc53 	bl	8002300 <HAL_ADC_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a60:	f000 fd34 	bl	80014cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000a64:	2307      	movs	r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_8_BITS;
 8000a68:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000a6c:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 8000a6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4812      	ldr	r0, [pc, #72]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000a7c:	f002 fe88 	bl	8003790 <HAL_ADCEx_MultiModeConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000a86:	f000 fd21 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <MX_ADC1_Init+0xf8>)
 8000a8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a8e:	2306      	movs	r3, #6
 8000a90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a96:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000a9a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <MX_ADC1_Init+0xf0>)
 8000aae:	f002 f869 	bl	8002b84 <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000ab8:	f000 fd08 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	@ 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	240004bc 	.word	0x240004bc
 8000ac8:	40022000 	.word	0x40022000
 8000acc:	0c900008 	.word	0x0c900008

08000ad0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
 8000ae4:	615a      	str	r2, [r3, #20]
 8000ae6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ae8:	4b26      	ldr	r3, [pc, #152]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000aea:	4a27      	ldr	r2, [pc, #156]	@ (8000b88 <MX_ADC2_Init+0xb8>)
 8000aec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000aee:	4b25      	ldr	r3, [pc, #148]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000af4:	4b23      	ldr	r3, [pc, #140]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000afa:	4b22      	ldr	r3, [pc, #136]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b00:	4b20      	ldr	r3, [pc, #128]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b06:	4b1f      	ldr	r3, [pc, #124]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b24:	4b17      	ldr	r3, [pc, #92]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b2a:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b30:	4b14      	ldr	r3, [pc, #80]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b38:	4812      	ldr	r0, [pc, #72]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b3a:	f001 fbe1 	bl	8002300 <HAL_ADC_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000b44:	f000 fcc2 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <MX_ADC2_Init+0xbc>)
 8000b4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b54:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b58:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <MX_ADC2_Init+0xb4>)
 8000b6c:	f002 f80a 	bl	8002b84 <HAL_ADC_ConfigChannel>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b76:	f000 fca9 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	3720      	adds	r7, #32
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	24000520 	.word	0x24000520
 8000b88:	40022100 	.word	0x40022100
 8000b8c:	0c900008 	.word	0x0c900008

08000b90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0310 	add.w	r3, r7, #16
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_TIM2_Init+0x98>)
 8000bb0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_TIM2_Init+0x98>)
 8000bb8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_TIM2_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <MX_TIM2_Init+0x98>)
 8000bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_TIM2_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <MX_TIM2_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd8:	4813      	ldr	r0, [pc, #76]	@ (8000c28 <MX_TIM2_Init+0x98>)
 8000bda:	f009 fd97 	bl	800a70c <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000be4:	f000 fc72 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_TIM2_Init+0x98>)
 8000bf6:	f009 fde1 	bl	800a7bc <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c00:	f000 fc64 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_TIM2_Init+0x98>)
 8000c12:	f00a f80f 	bl	800ac34 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c1c:	f000 fc56 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3720      	adds	r7, #32
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	240005fc 	.word	0x240005fc

08000c2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c30:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c32:	4a23      	ldr	r2, [pc, #140]	@ (8000cc0 <MX_USART3_UART_Init+0x94>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c74:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c76:	f00a f86b 	bl	800ad50 <HAL_UART_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c80:	f000 fc24 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c88:	f00b fe3e 	bl	800c908 <HAL_UARTEx_SetTxFifoThreshold>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c92:	f000 fc1b 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000c9a:	f00b fe73 	bl	800c984 <HAL_UARTEx_SetRxFifoThreshold>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca4:	f000 fc12 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <MX_USART3_UART_Init+0x90>)
 8000caa:	f00b fdf4 	bl	800c896 <HAL_UARTEx_DisableFifoMode>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb4:	f000 fc0a 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	24000648 	.word	0x24000648
 8000cc0:	40004800 	.word	0x40004800

08000cc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cca:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <MX_DMA_Init+0x3c>)
 8000ccc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d00 <MX_DMA_Init+0x3c>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000cda:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_DMA_Init+0x3c>)
 8000cdc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	607b      	str	r3, [r7, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	200b      	movs	r0, #11
 8000cee:	f002 fec6 	bl	8003a7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000cf2:	200b      	movs	r0, #11
 8000cf4:	f002 fedd 	bl	8003ab2 <HAL_NVIC_EnableIRQ>

}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58024400 	.word	0x58024400

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	@ 0x28
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d20:	4a38      	ldr	r2, [pc, #224]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d2a:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d38:	4b32      	ldr	r3, [pc, #200]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d3e:	4a31      	ldr	r2, [pc, #196]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d44:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d48:	4b2e      	ldr	r3, [pc, #184]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b2b      	ldr	r3, [pc, #172]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d58:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d5c:	4a29      	ldr	r2, [pc, #164]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d66:	4b27      	ldr	r3, [pc, #156]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d74:	4b23      	ldr	r3, [pc, #140]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d76:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d7a:	4a22      	ldr	r2, [pc, #136]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d7c:	f043 0308 	orr.w	r3, r3, #8
 8000d80:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <MX_GPIO_Init+0x100>)
 8000d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2120      	movs	r1, #32
 8000d96:	481c      	ldr	r0, [pc, #112]	@ (8000e08 <MX_GPIO_Init+0x104>)
 8000d98:	f005 ffac 	bl	8006cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4815      	ldr	r0, [pc, #84]	@ (8000e08 <MX_GPIO_Init+0x104>)
 8000db4:	f005 fdee 	bl	8006994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000db8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <MX_GPIO_Init+0x108>)
 8000dd6:	f005 fddd 	bl	8006994 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4804      	ldr	r0, [pc, #16]	@ (8000e08 <MX_GPIO_Init+0x104>)
 8000df8:	f005 fdcc 	bl	8006994 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3728      	adds	r7, #40	@ 0x28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58020000 	.word	0x58020000
 8000e0c:	58020800 	.word	0x58020800

08000e10 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2120      	movs	r1, #32
 8000e1c:	481a      	ldr	r0, [pc, #104]	@ (8000e88 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000e1e:	f005 ff69 	bl	8006cf4 <HAL_GPIO_WritePin>

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d129      	bne.n	8000e80 <HAL_ADC_ConvHalfCpltCallback+0x70>
	buff_process = SET;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	701a      	strb	r2, [r3, #0]
	buff_flag_1 = SET;
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
	buff_flag_2 = RESET;
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	e018      	b.n	8000e76 <HAL_ADC_ConvHalfCpltCallback+0x66>
	{
	  buffer_1[2*j] = (uint16_t)(adc_buf[j]&0x0000FFFF);
 8000e44:	4a14      	ldr	r2, [pc, #80]	@ (8000e98 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	b291      	uxth	r1, r2
 8000e52:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8000e54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  buffer_1[2*j+1] = (uint16_t)(adc_buf[j]>>16);
 8000e58:	4a0f      	ldr	r2, [pc, #60]	@ (8000e98 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	0c1a      	lsrs	r2, r3, #16
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	3301      	adds	r3, #1
 8000e68:	b291      	uxth	r1, r2
 8000e6a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e9c <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8000e6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	3301      	adds	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	dde1      	ble.n	8000e44 <HAL_ADC_ConvHalfCpltCallback+0x34>
	}
  }
}
 8000e80:	bf00      	nop
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	58020000 	.word	0x58020000
 8000e8c:	240094f2 	.word	0x240094f2
 8000e90:	240094f0 	.word	0x240094f0
 8000e94:	240094f1 	.word	0x240094f1
 8000e98:	240006dc 	.word	0x240006dc
 8000e9c:	24004d2c 	.word	0x24004d2c

08000ea0 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2120      	movs	r1, #32
 8000eac:	481e      	ldr	r0, [pc, #120]	@ (8000f28 <HAL_ADC_ConvCpltCallback+0x88>)
 8000eae:	f005 ff21 	bl	8006cf4 <HAL_GPIO_WritePin>

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d130      	bne.n	8000f1e <HAL_ADC_ConvCpltCallback+0x7e>
	buff_process = SET;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <HAL_ADC_ConvCpltCallback+0x8c>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
	buff_flag_2 = SET;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <HAL_ADC_ConvCpltCallback+0x90>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	701a      	strb	r2, [r3, #0]
	buff_flag_1 = RESET;
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <HAL_ADC_ConvCpltCallback+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	e01f      	b.n	8000f14 <HAL_ADC_ConvCpltCallback+0x74>
	buffer_2[2*j] = (uint16_t) adc_buf[j+ADC_BUF_LEN/2]*0x0000FFFF;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f603 03ca 	addw	r3, r3, #2250	@ 0x8ca
 8000eda:	4a17      	ldr	r2, [pc, #92]	@ (8000f38 <HAL_ADC_ConvCpltCallback+0x98>)
 8000edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4252      	negs	r2, r2
 8000ee8:	b291      	uxth	r1, r2
 8000eea:	4a14      	ldr	r2, [pc, #80]	@ (8000f3c <HAL_ADC_ConvCpltCallback+0x9c>)
 8000eec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	buffer_2[2*j+1] = (uint16_t) adc_buf[j+ADC_BUF_LEN/2]>>16;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f603 03ca 	addw	r3, r3, #2250	@ 0x8ca
 8000ef6:	4a10      	ldr	r2, [pc, #64]	@ (8000f38 <HAL_ADC_ConvCpltCallback+0x98>)
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	141a      	asrs	r2, r3, #16
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	3301      	adds	r3, #1
 8000f06:	b291      	uxth	r1, r2
 8000f08:	4a0c      	ldr	r2, [pc, #48]	@ (8000f3c <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3301      	adds	r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	ddda      	ble.n	8000ed4 <HAL_ADC_ConvCpltCallback+0x34>
	}
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	58020000 	.word	0x58020000
 8000f2c:	240094f2 	.word	0x240094f2
 8000f30:	240094f1 	.word	0x240094f1
 8000f34:	240094f0 	.word	0x240094f0
 8000f38:	240006dc 	.word	0x240006dc
 8000f3c:	24007054 	.word	0x24007054

08000f40 <demodulate>:

int demodulate(const uint16_t * samples, int * symbs, params_r * params) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08a      	sub	sp, #40	@ 0x28
 8000f44:	af02      	add	r7, sp, #8
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]

    normalize(samples, norm_samples);
 8000f4c:	4928      	ldr	r1, [pc, #160]	@ (8000ff0 <demodulate+0xb0>)
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f000 fac2 	bl	80014d8 <normalize>

    // Costas Loop
    costas_loop(norm_samples, samples_d, params);
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4927      	ldr	r1, [pc, #156]	@ (8000ff4 <demodulate+0xb4>)
 8000f58:	4825      	ldr	r0, [pc, #148]	@ (8000ff0 <demodulate+0xb0>)
 8000f5a:	f000 f855 	bl	8001008 <costas_loop>
    // filter w SRRC
    arm_conv_f32(samples_d, ADC_BUF_LEN, RRC, RRC_LEN, filtered_samps);
 8000f5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <demodulate+0xb8>)
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	23fb      	movs	r3, #251	@ 0xfb
 8000f64:	4a25      	ldr	r2, [pc, #148]	@ (8000ffc <demodulate+0xbc>)
 8000f66:	f241 1194 	movw	r1, #4500	@ 0x1194
 8000f6a:	4822      	ldr	r0, [pc, #136]	@ (8000ff4 <demodulate+0xb4>)
 8000f6c:	f00c f84c 	bl	800d008 <arm_conv_f32>
    // readjust window
    float shift = RRC_LEN/2. - 0.5;
 8000f70:	4b23      	ldr	r3, [pc, #140]	@ (8001000 <demodulate+0xc0>)
 8000f72:	61bb      	str	r3, [r7, #24]
    int k;
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 8000f74:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f7c:	ee17 3a90 	vmov	r3, s15
 8000f80:	61fb      	str	r3, [r7, #28]
 8000f82:	e01a      	b.n	8000fba <demodulate+0x7a>
        k = i - shift;
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	ee07 3a90 	vmov	s15, r3
 8000f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f9a:	ee17 3a90 	vmov	r3, s15
 8000f9e:	613b      	str	r3, [r7, #16]
        filtered_samps[k] = filtered_samps[i];
 8000fa0:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <demodulate+0xb8>)
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	4913      	ldr	r1, [pc, #76]	@ (8000ff8 <demodulate+0xb8>)
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	601a      	str	r2, [r3, #0]
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fc4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001004 <demodulate+0xc4>
 8000fc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fcc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd8:	d4d4      	bmi.n	8000f84 <demodulate+0x44>
    }

    // timing recovery
    int bit_len = timing_recovery(filtered_samps, symbs, params);
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <demodulate+0xb8>)
 8000fe0:	f000 fb12 	bl	8001608 <timing_recovery>
 8000fe4:	6178      	str	r0, [r7, #20]

    return bit_len;
 8000fe6:	697b      	ldr	r3, [r7, #20]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	24009508 	.word	0x24009508
 8000ff4:	2400db58 	.word	0x2400db58
 8000ff8:	240121a8 	.word	0x240121a8
 8000ffc:	24000000 	.word	0x24000000
 8001000:	42fa0000 	.word	0x42fa0000
 8001004:	45947000 	.word	0x45947000

08001008 <costas_loop>:

void costas_loop(float * norm_samples, float * samples_d, params_r * params) {
 8001008:	b580      	push	{r7, lr}
 800100a:	ed2d 8b02 	vpush	{d8}
 800100e:	b0b2      	sub	sp, #200	@ 0xc8
 8001010:	af02      	add	r7, sp, #8
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
    float phase = params->CL_phase;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    float inph[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001020:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001024:	222c      	movs	r2, #44	@ 0x2c
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f00c fa87 	bl	800d53c <memset>
    float quad[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 800102e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001032:	222c      	movs	r2, #44	@ 0x2c
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f00c fa80 	bl	800d53c <memset>
    float inph_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 800103c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
 800104c:	615a      	str	r2, [r3, #20]
    float quad_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
    double error = 0;
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    float integrator = 0; //params->CL_integrator;
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    float kp = 8.5;
 8001074:	4b90      	ldr	r3, [pc, #576]	@ (80012b8 <costas_loop+0x2b0>)
 8001076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    float ki = 0.1;
 800107a:	4b90      	ldr	r3, [pc, #576]	@ (80012bc <costas_loop+0x2b4>)
 800107c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float dt = (float)FC / (float)FS;
 8001080:	4b8f      	ldr	r3, [pc, #572]	@ (80012c0 <costas_loop+0x2b8>)
 8001082:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 8001086:	2305      	movs	r3, #5
 8001088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800108c:	e0e0      	b.n	8001250 <costas_loop+0x248>
        // define t from microcontroller
        int k = i - ORDER;
 800108e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001092:	3b05      	subs	r3, #5
 8001094:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        inph_[ORDER] = norm_samples[k]*2*cos(2*M_PI*dt*k + phase);
 8001098:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	4413      	add	r3, r2
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010aa:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80010ae:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80010b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010b6:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 80012b0 <costas_loop+0x2a8>
 80010ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80010ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 80010ce:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80010d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010da:	eeb0 0b47 	vmov.f64	d0, d7
 80010de:	f00c fab3 	bl	800d648 <cos>
 80010e2:	eeb0 7b40 	vmov.f64	d7, d0
 80010e6:	ee28 7b07 	vmul.f64	d7, d8, d7
 80010ea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010ee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        quad_[ORDER] = norm_samples[k]*-2*sin(2*M_PI*dt*k + phase);
 80010f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001108:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800110c:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001110:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001114:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80012b0 <costas_loop+0x2a8>
 8001118:	ee27 6b06 	vmul.f64	d6, d7, d6
 800111c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001128:	ee26 6b07 	vmul.f64	d6, d6, d7
 800112c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001130:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001134:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001138:	eeb0 0b47 	vmov.f64	d0, d7
 800113c:	f00c fad0 	bl	800d6e0 <sin>
 8001140:	eeb0 7b40 	vmov.f64	d7, d0
 8001144:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001148:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800114c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        arm_conv_f32(inph_, ORDER+1, lp, ORDER+1, inph);
 8001150:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001154:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001158:	9300      	str	r3, [sp, #0]
 800115a:	2306      	movs	r3, #6
 800115c:	4a59      	ldr	r2, [pc, #356]	@ (80012c4 <costas_loop+0x2bc>)
 800115e:	2106      	movs	r1, #6
 8001160:	f00b ff52 	bl	800d008 <arm_conv_f32>
        arm_conv_f32(quad_, ORDER+1, lp, ORDER+1, quad);
 8001164:	f107 0010 	add.w	r0, r7, #16
 8001168:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2306      	movs	r3, #6
 8001170:	4a54      	ldr	r2, [pc, #336]	@ (80012c4 <costas_loop+0x2bc>)
 8001172:	2106      	movs	r1, #6
 8001174:	f00b ff48 	bl	800d008 <arm_conv_f32>

        samples_d[k] = inph[ORDER];
 8001178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	4413      	add	r3, r2
 8001182:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001186:	601a      	str	r2, [r3, #0]

        error = inph[ORDER] * quad[ORDER];
 8001188:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800118c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001194:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001198:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8
        integrator += ki*error;
 800119c:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80011a0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011a4:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80011a8:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011ac:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 80011b0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011bc:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
        phase = phase + kp*error + integrator;
 80011c0:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80011c4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80011c8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80011cc:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011d0:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 80011d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011dc:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80011e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ec:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc

        // shift the values of inph_ and quad_
        for (int jx = 1; jx < ORDER+1; jx++) {
 80011f0:	2301      	movs	r3, #1
 80011f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80011f6:	e022      	b.n	800123e <costas_loop+0x236>
            inph_[jx-1] = inph_[jx];
 80011f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80011fc:	3b01      	subs	r3, #1
 80011fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	32c0      	adds	r2, #192	@ 0xc0
 8001206:	443a      	add	r2, r7
 8001208:	3a98      	subs	r2, #152	@ 0x98
 800120a:	6812      	ldr	r2, [r2, #0]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	33c0      	adds	r3, #192	@ 0xc0
 8001210:	443b      	add	r3, r7
 8001212:	3b98      	subs	r3, #152	@ 0x98
 8001214:	601a      	str	r2, [r3, #0]
            quad_[jx-1] = quad_[jx];
 8001216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800121a:	3b01      	subs	r3, #1
 800121c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	32c0      	adds	r2, #192	@ 0xc0
 8001224:	443a      	add	r2, r7
 8001226:	3ab0      	subs	r2, #176	@ 0xb0
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	33c0      	adds	r3, #192	@ 0xc0
 800122e:	443b      	add	r3, r7
 8001230:	3bb0      	subs	r3, #176	@ 0xb0
 8001232:	601a      	str	r2, [r3, #0]
        for (int jx = 1; jx < ORDER+1; jx++) {
 8001234:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001238:	3301      	adds	r3, #1
 800123a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800123e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001242:	2b05      	cmp	r3, #5
 8001244:	ddd8      	ble.n	80011f8 <costas_loop+0x1f0>
    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 8001246:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800124a:	3301      	adds	r3, #1
 800124c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001250:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001254:	f241 1298 	movw	r2, #4504	@ 0x1198
 8001258:	4293      	cmp	r3, r2
 800125a:	f77f af18 	ble.w	800108e <costas_loop+0x86>
        }
    }
    params->CL_phase = remainder(phase, 2*M_PI);
 800125e:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001262:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001266:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 80012b0 <costas_loop+0x2a8>
 800126a:	eeb0 0b47 	vmov.f64	d0, d7
 800126e:	f00c f9ab 	bl	800d5c8 <remainder>
 8001272:	eeb0 7b40 	vmov.f64	d7, d0
 8001276:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edc3 7a01 	vstr	s15, [r3, #4]
    params->CL_integrator = remainder(integrator, 2*M_PI);
 8001280:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001284:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001288:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 80012b0 <costas_loop+0x2a8>
 800128c:	eeb0 0b47 	vmov.f64	d0, d7
 8001290:	f00c f99a 	bl	800d5c8 <remainder>
 8001294:	eeb0 7b40 	vmov.f64	d7, d0
 8001298:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	edc3 7a00 	vstr	s15, [r3]
}
 80012a2:	bf00      	nop
 80012a4:	37c0      	adds	r7, #192	@ 0xc0
 80012a6:	46bd      	mov	sp, r7
 80012a8:	ecbd 8b02 	vpop	{d8}
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	54442d18 	.word	0x54442d18
 80012b4:	401921fb 	.word	0x401921fb
 80012b8:	41080000 	.word	0x41080000
 80012bc:	3dcccccd 	.word	0x3dcccccd
 80012c0:	3e408312 	.word	0x3e408312
 80012c4:	240003ec 	.word	0x240003ec

080012c8 <find_packet>:

uint8_t find_packet(float * symbs, uint8_t * bits, const int num_symbs) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0c6      	sub	sp, #280	@ 0x118
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80012d6:	6018      	str	r0, [r3, #0]
 80012d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012e0:	6019      	str	r1, [r3, #0]
 80012e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012ea:	601a      	str	r2, [r3, #0]
    // take cross correlation
    float xcorr_out[SYMBOL_BUFF+14];
    uint8_t packet_found = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
    arm_correlate_f32(key, 15, symbs, num_symbs, xcorr_out);
 80012f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80012f6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012fa:	6819      	ldr	r1, [r3, #0]
 80012fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001300:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	460b      	mov	r3, r1
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	210f      	movs	r1, #15
 8001310:	4857      	ldr	r0, [pc, #348]	@ (8001470 <find_packet+0x1a8>)
 8001312:	f00b fbc3 	bl	800ca9c <arm_correlate_f32>

    // find packet
    int shift = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    for (int i = num_symbs-(NUM_PACKET_H-1)*15 - 1; i >= 0; i--) {
 800131c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001320:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3b01      	subs	r3, #1
 8001328:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800132c:	e05c      	b.n	80013e8 <find_packet+0x120>
        if (fabs(xcorr_out[i]) > 14) {
 800132e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001332:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8001336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eef0 7ae7 	vabs.f32	s15, s15
 8001346:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800134a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	dd44      	ble.n	80013de <find_packet+0x116>
            shift = SYMBOL_BUFF+14-i;
 8001354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001358:	f1c3 033b 	rsb	r3, r3, #59	@ 0x3b
 800135c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
            packet_found = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
            if (xcorr_out[i] < 0) {
 8001366:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800136a:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 800136e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	edd3 7a00 	vldr	s15, [r3]
 800137a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	d400      	bmi.n	8001386 <find_packet+0xbe>
				for (int j = 0; j < BITS; j++) {
					symbs[shift + j] = symbs[shift+ j]*-1;
				}
            }
            break;
 8001384:	e034      	b.n	80013f0 <find_packet+0x128>
				for (int j = 0; j < BITS; j++) {
 8001386:	2300      	movs	r3, #0
 8001388:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800138c:	e022      	b.n	80013d4 <find_packet+0x10c>
					symbs[shift + j] = symbs[shift+ j]*-1;
 800138e:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001392:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800139e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	4413      	add	r3, r2
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80013ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80013b2:	4413      	add	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80013ba:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	4413      	add	r3, r2
 80013c2:	eef1 7a67 	vneg.f32	s15, s15
 80013c6:	edc3 7a00 	vstr	s15, [r3]
				for (int j = 0; j < BITS; j++) {
 80013ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80013ce:	3301      	adds	r3, #1
 80013d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80013d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80013d8:	2b07      	cmp	r3, #7
 80013da:	ddd8      	ble.n	800138e <find_packet+0xc6>
            break;
 80013dc:	e008      	b.n	80013f0 <find_packet+0x128>
    for (int i = num_symbs-(NUM_PACKET_H-1)*15 - 1; i >= 0; i--) {
 80013de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80013e2:	3b01      	subs	r3, #1
 80013e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80013e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da9e      	bge.n	800132e <find_packet+0x66>
        }
    }

    if (!packet_found)
 80013f0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <find_packet+0x134>
        return 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	e034      	b.n	8001466 <find_packet+0x19e>

    // convert symbols to bits
    for (int i = 0; i < BITS; i++) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001402:	e02b      	b.n	800145c <find_packet+0x194>
        bits[i] = (symbs[shift+i]+1)*0.5;
 8001404:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001414:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	4413      	add	r3, r2
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001428:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800142c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8001430:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001438:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800143c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	4413      	add	r3, r2
 8001444:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001448:	edc7 7a00 	vstr	s15, [r7]
 800144c:	783a      	ldrb	r2, [r7, #0]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BITS; i++) {
 8001452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001456:	3301      	adds	r3, #1
 8001458:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800145c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001460:	2b07      	cmp	r3, #7
 8001462:	ddcf      	ble.n	8001404 <find_packet+0x13c>
    }
    return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	24000404 	.word	0x24000404

08001474 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800147a:	463b      	mov	r3, r7
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001486:	f002 fb2f 	bl	8003ae8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800148a:	2301      	movs	r3, #1
 800148c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800148e:	2300      	movs	r3, #0
 8001490:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001496:	231f      	movs	r3, #31
 8001498:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800149a:	2387      	movs	r3, #135	@ 0x87
 800149c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800149e:	2300      	movs	r3, #0
 80014a0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80014a2:	2300      	movs	r3, #0
 80014a4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80014a6:	2301      	movs	r3, #1
 80014a8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80014aa:	2301      	movs	r3, #1
 80014ac:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80014b6:	463b      	mov	r3, r7
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fb4d 	bl	8003b58 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80014be:	2004      	movs	r0, #4
 80014c0:	f002 fb2a 	bl	8003b18 <HAL_MPU_Enable>

}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <Error_Handler+0x8>

080014d8 <normalize>:
params: parameters that need to be stored intermediately
returns length of symbs array. symbs array must be
allocated for longer than samples/sps + some margin
*/

void normalize(const uint16_t * samples, float * norm_samples) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
        // Normalize signal
    float var = 0, mean = 0;
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
    // find mean
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	e011      	b.n	8001518 <normalize+0x40>
        mean += (float)samples[i];
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	4413      	add	r3, r2
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	ee07 3a90 	vmov	s15, r3
 8001502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001506:	ed97 7a06 	vldr	s14, [r7, #24]
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f241 1293 	movw	r2, #4499	@ 0x1193
 800151e:	4293      	cmp	r3, r2
 8001520:	dde8      	ble.n	80014f4 <normalize+0x1c>
    }
    mean /= ADC_BUF_LEN;
 8001522:	ed97 7a06 	vldr	s14, [r7, #24]
 8001526:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80015fc <normalize+0x124>
 800152a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152e:	edc7 7a06 	vstr	s15, [r7, #24]
    // find sample variance
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	e01b      	b.n	8001570 <normalize+0x98>
        float temp = (float)samples[i]-mean;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800154a:	edd7 7a06 	vldr	s15, [r7, #24]
 800154e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001552:	edc7 7a02 	vstr	s15, [r7, #8]
        var += temp * temp;
 8001556:	edd7 7a02 	vldr	s15, [r7, #8]
 800155a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800155e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	3301      	adds	r3, #1
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	f241 1293 	movw	r2, #4499	@ 0x1193
 8001576:	4293      	cmp	r3, r2
 8001578:	ddde      	ble.n	8001538 <normalize+0x60>
    }
    var = var / (ADC_BUF_LEN-1);
 800157a:	ed97 7a07 	vldr	s14, [r7, #28]
 800157e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001600 <normalize+0x128>
 8001582:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001586:	edc7 7a07 	vstr	s15, [r7, #28]
    var = sqrt(var)*25;
 800158a:	edd7 7a07 	vldr	s15, [r7, #28]
 800158e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001592:	eeb0 0b47 	vmov.f64	d0, d7
 8001596:	f00c f837 	bl	800d608 <sqrt>
 800159a:	eeb0 7b40 	vmov.f64	d7, d0
 800159e:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 80015a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015aa:	edc7 7a07 	vstr	s15, [r7, #28]

    // normalize
    // divide by 60 arbitrary, just done to get to an ampltiude I used to tune gain values
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e019      	b.n	80015e8 <normalize+0x110>
        norm_samples[i] = (((float)samples[i]) - mean)/var;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	ee07 3a90 	vmov	s15, r3
 80015c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80015ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80015da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015de:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f241 1293 	movw	r2, #4499	@ 0x1193
 80015ee:	4293      	cmp	r3, r2
 80015f0:	dde0      	ble.n	80015b4 <normalize+0xdc>
    }
}
 80015f2:	bf00      	nop
 80015f4:	bf00      	nop
 80015f6:	3720      	adds	r7, #32
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	458ca000 	.word	0x458ca000
 8001600:	458c9800 	.word	0x458c9800
 8001604:	00000000 	.word	0x00000000

08001608 <timing_recovery>:



int timing_recovery(float * filtered_samps, float * symbs, params_r * params) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b090      	sub	sp, #64	@ 0x40
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
    const float kp_PLL = 0.1;
 8001614:	4b96      	ldr	r3, [pc, #600]	@ (8001870 <timing_recovery+0x268>)
 8001616:	623b      	str	r3, [r7, #32]
    const float ki_PLL = 0.05;
 8001618:	4b96      	ldr	r3, [pc, #600]	@ (8001874 <timing_recovery+0x26c>)
 800161a:	61fb      	str	r3, [r7, #28]
    const float margin = 0.75;
 800161c:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8001620:	61bb      	str	r3, [r7, #24]

    float sps = params->sps;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int integrator = 0; //params->TR_integrator;
 8001628:	2300      	movs	r3, #0
 800162a:	63bb      	str	r3, [r7, #56]	@ 0x38
    int error = 0, bit_len = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	2300      	movs	r3, #0
 8001632:	637b      	str	r3, [r7, #52]	@ 0x34
    float prev_phase = 0; // params->TR_phase
 8001634:	f04f 0300 	mov.w	r3, #0
 8001638:	633b      	str	r3, [r7, #48]	@ 0x30
    float phase;

    // calculate zero crossings
    for (int i = 0; i < ADC_BUF_LEN-1; i++) {
 800163a:	2300      	movs	r3, #0
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800163e:	e02e      	b.n	800169e <timing_recovery+0x96>
        int temp = copysign(1, (filtered_samps[i+1] * filtered_samps[i]));
 8001640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001642:	3301      	adds	r3, #1
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4413      	add	r3, r2
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4413      	add	r3, r2
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800165e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001662:	eeb0 1b47 	vmov.f64	d1, d7
 8001666:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800166a:	f00b ff99 	bl	800d5a0 <copysign>
 800166e:	eeb0 7b40 	vmov.f64	d7, d0
 8001672:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001676:	ee17 3a90 	vmov	r3, s15
 800167a:	613b      	str	r3, [r7, #16]
        zc[i] = !(temp+1);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001682:	d102      	bne.n	800168a <timing_recovery+0x82>
 8001684:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001688:	e001      	b.n	800168e <timing_recovery+0x86>
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	497a      	ldr	r1, [pc, #488]	@ (8001878 <timing_recovery+0x270>)
 8001690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	440b      	add	r3, r1
 8001696:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ADC_BUF_LEN-1; i++) {
 8001698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800169a:	3301      	adds	r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800169e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a0:	f241 1292 	movw	r2, #4498	@ 0x1192
 80016a4:	4293      	cmp	r3, r2
 80016a6:	ddcb      	ble.n	8001640 <timing_recovery+0x38>
    }

    // timing recovery
    for (int i = 1; i < ADC_BUF_LEN; i++) {
 80016a8:	2301      	movs	r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ac:	e0a0      	b.n	80017f0 <timing_recovery+0x1e8>
        phase = prev_phase + 2*M_PI/sps;
 80016ae:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80016b2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016b6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80016ba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80016be:	ed9f 4b66 	vldr	d4, [pc, #408]	@ 8001858 <timing_recovery+0x250>
 80016c2:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80016c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016ce:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        phase = wrap_to_pi(phase);
 80016d2:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80016d6:	f000 f8d3 	bl	8001880 <wrap_to_pi>
 80016da:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        if (phase < -M_PI * margin && prev_phase > M_PI * margin) {
 80016de:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80016e2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016ee:	ed9f 5b5c 	vldr	d5, [pc, #368]	@ 8001860 <timing_recovery+0x258>
 80016f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	d531      	bpl.n	8001764 <timing_recovery+0x15c>
 8001700:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001704:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001708:	edd7 7a06 	vldr	s15, [r7, #24]
 800170c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001710:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 8001868 <timing_recovery+0x260>
 8001714:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001718:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800171c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001720:	dd20      	ble.n	8001764 <timing_recovery+0x15c>
            symbs[bit_len] = (int)(filtered_samps[i]/fabs(filtered_samps[i]));
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4413      	add	r3, r2
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4413      	add	r3, r2
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eef0 7ae7 	vabs.f32	s15, s15
 8001742:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001746:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800174a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800174e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	4413      	add	r3, r2
 8001756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175a:	edc3 7a00 	vstr	s15, [r3]
            bit_len++;
 800175e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001760:	3301      	adds	r3, #1
 8001762:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        if (bit_len==SYMBOL_BUFF) {
 8001764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001766:	2b2d      	cmp	r3, #45	@ 0x2d
 8001768:	d049      	beq.n	80017fe <timing_recovery+0x1f6>
            break;
        }
        if (zc[i-1]){
 800176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176c:	3b01      	subs	r3, #1
 800176e:	4a42      	ldr	r2, [pc, #264]	@ (8001878 <timing_recovery+0x270>)
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	edd3 7a00 	vldr	s15, [r3]
 8001778:	eef5 7a40 	vcmp.f32	s15, #0.0
 800177c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001780:	d031      	beq.n	80017e6 <timing_recovery+0x1de>
            error = phase;
 8001782:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001786:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800178a:	ee17 3a90 	vmov	r3, s15
 800178e:	617b      	str	r3, [r7, #20]
            integrator = integrator + error * ki_PLL;
 8001790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	ee07 3a90 	vmov	s15, r3
 80017a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80017a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80017a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b4:	ee17 3a90 	vmov	r3, s15
 80017b8:	63bb      	str	r3, [r7, #56]	@ 0x38
            sps = SPS + error*kp_PLL + integrator;
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80017c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017cc:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800187c <timing_recovery+0x274>
 80017d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80017d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        }
        prev_phase = phase;
 80017e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30
    for (int i = 1; i < ADC_BUF_LEN; i++) {
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	3301      	adds	r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f2:	f241 1293 	movw	r2, #4499	@ 0x1193
 80017f6:	4293      	cmp	r3, r2
 80017f8:	f77f af59 	ble.w	80016ae <timing_recovery+0xa6>
 80017fc:	e000      	b.n	8001800 <timing_recovery+0x1f8>
            break;
 80017fe:	bf00      	nop
    }
    params->sps = sps;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001804:	611a      	str	r2, [r3, #16]
    params->TR_phase = remainder(phase, 2*M_PI);
 8001806:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800180a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800180e:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001858 <timing_recovery+0x250>
 8001812:	eeb0 0b47 	vmov.f64	d0, d7
 8001816:	f00b fed7 	bl	800d5c8 <remainder>
 800181a:	eeb0 7b40 	vmov.f64	d7, d0
 800181e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	edc3 7a03 	vstr	s15, [r3, #12]
    params->TR_integrator = remainder(integrator, 2*M_PI);
 8001828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001832:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8001858 <timing_recovery+0x250>
 8001836:	eeb0 0b47 	vmov.f64	d0, d7
 800183a:	f00b fec5 	bl	800d5c8 <remainder>
 800183e:	eeb0 7b40 	vmov.f64	d7, d0
 8001842:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	edc3 7a02 	vstr	s15, [r3, #8]

    return bit_len;
 800184c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800184e:	4618      	mov	r0, r3
 8001850:	3740      	adds	r7, #64	@ 0x40
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	54442d18 	.word	0x54442d18
 800185c:	401921fb 	.word	0x401921fb
 8001860:	54442d18 	.word	0x54442d18
 8001864:	c00921fb 	.word	0xc00921fb
 8001868:	54442d18 	.word	0x54442d18
 800186c:	400921fb 	.word	0x400921fb
 8001870:	3dcccccd 	.word	0x3dcccccd
 8001874:	3d4ccccd 	.word	0x3d4ccccd
 8001878:	24016be0 	.word	0x24016be0
 800187c:	42c80000 	.word	0x42c80000

08001880 <wrap_to_pi>:

float wrap_to_pi(const float x) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	ed87 0a01 	vstr	s0, [r7, #4]
    float mod_x = remainder(x,2*M_PI);
 800188a:	edd7 7a01 	vldr	s15, [r7, #4]
 800188e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001892:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 80018e8 <wrap_to_pi+0x68>
 8001896:	eeb0 0b47 	vmov.f64	d0, d7
 800189a:	f00b fe95 	bl	800d5c8 <remainder>
 800189e:	eeb0 7b40 	vmov.f64	d7, d0
 80018a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018a6:	edc7 7a03 	vstr	s15, [r7, #12]
    return (mod_x > M_PI) ? mod_x - M_PI : mod_x;
 80018aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018b2:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80018f0 <wrap_to_pi+0x70>
 80018b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018be:	dd0a      	ble.n	80018d6 <wrap_to_pi+0x56>
 80018c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018c8:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80018f0 <wrap_to_pi+0x70>
 80018cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018d4:	e001      	b.n	80018da <wrap_to_pi+0x5a>
 80018d6:	edd7 7a03 	vldr	s15, [r7, #12]
}
 80018da:	eeb0 0a67 	vmov.f32	s0, s15
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	f3af 8000 	nop.w
 80018e8:	54442d18 	.word	0x54442d18
 80018ec:	401921fb 	.word	0x401921fb
 80018f0:	54442d18 	.word	0x54442d18
 80018f4:	400921fb 	.word	0x400921fb

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_MspInit+0x30>)
 8001900:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001904:	4a08      	ldr	r2, [pc, #32]	@ (8001928 <HAL_MspInit+0x30>)
 8001906:	f043 0302 	orr.w	r3, r3, #2
 800190a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_MspInit+0x30>)
 8001910:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	58024400 	.word	0x58024400

0800192c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	@ 0x30
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a59      	ldr	r2, [pc, #356]	@ (8001ab0 <HAL_ADC_MspInit+0x184>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d16c      	bne.n	8001a28 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800194e:	4b59      	ldr	r3, [pc, #356]	@ (8001ab4 <HAL_ADC_MspInit+0x188>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a57      	ldr	r2, [pc, #348]	@ (8001ab4 <HAL_ADC_MspInit+0x188>)
 8001956:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001958:	4b56      	ldr	r3, [pc, #344]	@ (8001ab4 <HAL_ADC_MspInit+0x188>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d10e      	bne.n	800197e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001960:	4b55      	ldr	r3, [pc, #340]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001962:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001966:	4a54      	ldr	r2, [pc, #336]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001968:	f043 0320 	orr.w	r3, r3, #32
 800196c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001970:	4b51      	ldr	r3, [pc, #324]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001972:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001976:	f003 0320 	and.w	r3, r3, #32
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001980:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001984:	4a4c      	ldr	r2, [pc, #304]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800198e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001990:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800199c:	2340      	movs	r3, #64	@ 0x40
 800199e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019a0:	2303      	movs	r3, #3
 80019a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	4843      	ldr	r0, [pc, #268]	@ (8001abc <HAL_ADC_MspInit+0x190>)
 80019b0:	f004 fff0 	bl	8006994 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80019b4:	4b42      	ldr	r3, [pc, #264]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019b6:	4a43      	ldr	r2, [pc, #268]	@ (8001ac4 <HAL_ADC_MspInit+0x198>)
 80019b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019ba:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019bc:	2209      	movs	r2, #9
 80019be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019cc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019d4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019dc:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80019e4:	4b36      	ldr	r3, [pc, #216]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80019ec:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f4:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019fa:	4831      	ldr	r0, [pc, #196]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 80019fc:	f002 f8ec 	bl	8003bd8 <HAL_DMA_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8001a06:	f7ff fd61 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 8001a0e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a10:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac0 <HAL_ADC_MspInit+0x194>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	2100      	movs	r1, #0
 8001a1a:	2012      	movs	r0, #18
 8001a1c:	f002 f82f 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a20:	2012      	movs	r0, #18
 8001a22:	f002 f846 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a26:	e03f      	b.n	8001aa8 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a26      	ldr	r2, [pc, #152]	@ (8001ac8 <HAL_ADC_MspInit+0x19c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d13a      	bne.n	8001aa8 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <HAL_ADC_MspInit+0x188>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	3301      	adds	r3, #1
 8001a38:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab4 <HAL_ADC_MspInit+0x188>)
 8001a3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <HAL_ADC_MspInit+0x188>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10e      	bne.n	8001a62 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a44:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001a46:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001a4c:	f043 0320 	orr.w	r3, r3, #32
 8001a50:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001a56:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001a5a:	f003 0320 	and.w	r3, r3, #32
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a68:	4a13      	ldr	r2, [pc, #76]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a72:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_ADC_MspInit+0x18c>)
 8001a74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a80:	2340      	movs	r3, #64	@ 0x40
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a84:	2303      	movs	r3, #3
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	480a      	ldr	r0, [pc, #40]	@ (8001abc <HAL_ADC_MspInit+0x190>)
 8001a94:	f004 ff7e 	bl	8006994 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2012      	movs	r0, #18
 8001a9e:	f001 ffee 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001aa2:	2012      	movs	r0, #18
 8001aa4:	f002 f805 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	@ 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40022000 	.word	0x40022000
 8001ab4:	2401b22c 	.word	0x2401b22c
 8001ab8:	58024400 	.word	0x58024400
 8001abc:	58020000 	.word	0x58020000
 8001ac0:	24000584 	.word	0x24000584
 8001ac4:	40020010 	.word	0x40020010
 8001ac8:	40022100 	.word	0x40022100

08001acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001adc:	d10e      	bne.n	8001afc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <HAL_TIM_Base_MspInit+0x3c>)
 8001ae0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001ae4:	4a08      	ldr	r2, [pc, #32]	@ (8001b08 <HAL_TIM_Base_MspInit+0x3c>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_TIM_Base_MspInit+0x3c>)
 8001af0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	58024400 	.word	0x58024400

08001b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0ba      	sub	sp, #232	@ 0xe8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	22c0      	movs	r2, #192	@ 0xc0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00b fd05 	bl	800d53c <memset>
  if(huart->Instance==USART3)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a2b      	ldr	r2, [pc, #172]	@ (8001be4 <HAL_UART_MspInit+0xd8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d14e      	bne.n	8001bda <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b3c:	f04f 0202 	mov.w	r2, #2
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	4618      	mov	r0, r3
 8001b54:	f006 f97a 	bl	8007e4c <HAL_RCCEx_PeriphCLKConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b5e:	f7ff fcb5 	bl	80014cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b62:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <HAL_UART_MspInit+0xdc>)
 8001b64:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b68:	4a1f      	ldr	r2, [pc, #124]	@ (8001be8 <HAL_UART_MspInit+0xdc>)
 8001b6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b6e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001b72:	4b1d      	ldr	r3, [pc, #116]	@ (8001be8 <HAL_UART_MspInit+0xdc>)
 8001b74:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b80:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_UART_MspInit+0xdc>)
 8001b82:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b86:	4a18      	ldr	r2, [pc, #96]	@ (8001be8 <HAL_UART_MspInit+0xdc>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b90:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <HAL_UART_MspInit+0xdc>)
 8001b92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b9e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bb8:	2307      	movs	r3, #7
 8001bba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bbe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4809      	ldr	r0, [pc, #36]	@ (8001bec <HAL_UART_MspInit+0xe0>)
 8001bc6:	f004 fee5 	bl	8006994 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2027      	movs	r0, #39	@ 0x27
 8001bd0:	f001 ff55 	bl	8003a7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bd4:	2027      	movs	r0, #39	@ 0x27
 8001bd6:	f001 ff6c 	bl	8003ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	37e8      	adds	r7, #232	@ 0xe8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40004800 	.word	0x40004800
 8001be8:	58024400 	.word	0x58024400
 8001bec:	58020c00 	.word	0x58020c00

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <MemManage_Handler+0x4>

08001c08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c46:	f000 f939 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <DMA1_Stream0_IRQHandler+0x10>)
 8001c56:	f003 fb1b 	bl	8005290 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	24000584 	.word	0x24000584

08001c64 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001c68:	4803      	ldr	r0, [pc, #12]	@ (8001c78 <ADC_IRQHandler+0x14>)
 8001c6a:	f000 fd5d 	bl	8002728 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001c6e:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <ADC_IRQHandler+0x18>)
 8001c70:	f000 fd5a 	bl	8002728 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	240004bc 	.word	0x240004bc
 8001c7c:	24000520 	.word	0x24000520

08001c80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c84:	4802      	ldr	r0, [pc, #8]	@ (8001c90 <USART3_IRQHandler+0x10>)
 8001c86:	f009 f941 	bl	800af0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	24000648 	.word	0x24000648

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c98:	4b32      	ldr	r3, [pc, #200]	@ (8001d64 <SystemInit+0xd0>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a31      	ldr	r2, [pc, #196]	@ (8001d64 <SystemInit+0xd0>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ca8:	4b2f      	ldr	r3, [pc, #188]	@ (8001d68 <SystemInit+0xd4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d807      	bhi.n	8001cc4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d68 <SystemInit+0xd4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f023 030f 	bic.w	r3, r3, #15
 8001cbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d68 <SystemInit+0xd4>)
 8001cbe:	f043 0303 	orr.w	r3, r3, #3
 8001cc2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001cc4:	4b29      	ldr	r3, [pc, #164]	@ (8001d6c <SystemInit+0xd8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a28      	ldr	r2, [pc, #160]	@ (8001d6c <SystemInit+0xd8>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cd0:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <SystemInit+0xd8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cd6:	4b25      	ldr	r3, [pc, #148]	@ (8001d6c <SystemInit+0xd8>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4924      	ldr	r1, [pc, #144]	@ (8001d6c <SystemInit+0xd8>)
 8001cdc:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <SystemInit+0xdc>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ce2:	4b21      	ldr	r3, [pc, #132]	@ (8001d68 <SystemInit+0xd4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d007      	beq.n	8001cfe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cee:	4b1e      	ldr	r3, [pc, #120]	@ (8001d68 <SystemInit+0xd4>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f023 030f 	bic.w	r3, r3, #15
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d68 <SystemInit+0xd4>)
 8001cf8:	f043 0303 	orr.w	r3, r3, #3
 8001cfc:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <SystemInit+0xd8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <SystemInit+0xd8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <SystemInit+0xd8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <SystemInit+0xd8>)
 8001d12:	4a18      	ldr	r2, [pc, #96]	@ (8001d74 <SystemInit+0xe0>)
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <SystemInit+0xd8>)
 8001d18:	4a17      	ldr	r2, [pc, #92]	@ (8001d78 <SystemInit+0xe4>)
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <SystemInit+0xd8>)
 8001d1e:	4a17      	ldr	r2, [pc, #92]	@ (8001d7c <SystemInit+0xe8>)
 8001d20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d22:	4b12      	ldr	r3, [pc, #72]	@ (8001d6c <SystemInit+0xd8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d28:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <SystemInit+0xd8>)
 8001d2a:	4a14      	ldr	r2, [pc, #80]	@ (8001d7c <SystemInit+0xe8>)
 8001d2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <SystemInit+0xd8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d34:	4b0d      	ldr	r3, [pc, #52]	@ (8001d6c <SystemInit+0xd8>)
 8001d36:	4a11      	ldr	r2, [pc, #68]	@ (8001d7c <SystemInit+0xe8>)
 8001d38:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <SystemInit+0xd8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <SystemInit+0xd8>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <SystemInit+0xd8>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <SystemInit+0xd8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <SystemInit+0xec>)
 8001d54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001d58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	52002000 	.word	0x52002000
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d74:	02020200 	.word	0x02020200
 8001d78:	01ff0000 	.word	0x01ff0000
 8001d7c:	01010280 	.word	0x01010280
 8001d80:	52004000 	.word	0x52004000

08001d84 <Reset_Handler>:
 8001d84:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dbc <LoopFillZerobss+0xe>
 8001d88:	f7ff ff84 	bl	8001c94 <SystemInit>
 8001d8c:	480c      	ldr	r0, [pc, #48]	@ (8001dc0 <LoopFillZerobss+0x12>)
 8001d8e:	490d      	ldr	r1, [pc, #52]	@ (8001dc4 <LoopFillZerobss+0x16>)
 8001d90:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc8 <LoopFillZerobss+0x1a>)
 8001d92:	2300      	movs	r3, #0
 8001d94:	e002      	b.n	8001d9c <LoopCopyDataInit>

08001d96 <CopyDataInit>:
 8001d96:	58d4      	ldr	r4, [r2, r3]
 8001d98:	50c4      	str	r4, [r0, r3]
 8001d9a:	3304      	adds	r3, #4

08001d9c <LoopCopyDataInit>:
 8001d9c:	18c4      	adds	r4, r0, r3
 8001d9e:	428c      	cmp	r4, r1
 8001da0:	d3f9      	bcc.n	8001d96 <CopyDataInit>
 8001da2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <LoopFillZerobss+0x1e>)
 8001da4:	4c0a      	ldr	r4, [pc, #40]	@ (8001dd0 <LoopFillZerobss+0x22>)
 8001da6:	2300      	movs	r3, #0
 8001da8:	e001      	b.n	8001dae <LoopFillZerobss>

08001daa <FillZerobss>:
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	3204      	adds	r2, #4

08001dae <LoopFillZerobss>:
 8001dae:	42a2      	cmp	r2, r4
 8001db0:	d3fb      	bcc.n	8001daa <FillZerobss>
 8001db2:	f00b fbd1 	bl	800d558 <__libc_init_array>
 8001db6:	f7fe fc13 	bl	80005e0 <main>
 8001dba:	4770      	bx	lr
 8001dbc:	24100000 	.word	0x24100000
 8001dc0:	24000000 	.word	0x24000000
 8001dc4:	240004a0 	.word	0x240004a0
 8001dc8:	0800e7f0 	.word	0x0800e7f0
 8001dcc:	240004a0 	.word	0x240004a0
 8001dd0:	2401b36c 	.word	0x2401b36c

08001dd4 <BDMA1_IRQHandler>:
 8001dd4:	e7fe      	b.n	8001dd4 <BDMA1_IRQHandler>
	...

08001dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dde:	2003      	movs	r0, #3
 8001de0:	f001 fe42 	bl	8003a68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001de4:	f005 fe5c 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <HAL_Init+0x68>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	4913      	ldr	r1, [pc, #76]	@ (8001e44 <HAL_Init+0x6c>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001e00:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <HAL_Init+0x68>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e44 <HAL_Init+0x6c>)
 8001e0c:	5cd3      	ldrb	r3, [r2, r3]
 8001e0e:	f003 031f 	and.w	r3, r3, #31
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
 8001e18:	4a0b      	ldr	r2, [pc, #44]	@ (8001e48 <HAL_Init+0x70>)
 8001e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e4c <HAL_Init+0x74>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e22:	200f      	movs	r0, #15
 8001e24:	f000 f814 	bl	8001e50 <HAL_InitTick>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e002      	b.n	8001e38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e32:	f7ff fd61 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	58024400 	.word	0x58024400
 8001e44:	0800e5b8 	.word	0x0800e5b8
 8001e48:	24000444 	.word	0x24000444
 8001e4c:	24000440 	.word	0x24000440

08001e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e58:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_InitTick+0x60>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e021      	b.n	8001ea8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <HAL_InitTick+0x64>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_InitTick+0x60>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 fe27 	bl	8003ace <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f001 fdf1 	bl	8003a7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	@ (8001eb8 <HAL_InitTick+0x68>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2400044c 	.word	0x2400044c
 8001eb4:	24000440 	.word	0x24000440
 8001eb8:	24000448 	.word	0x24000448

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	2400044c 	.word	0x2400044c
 8001ee0:	2401b230 	.word	0x2401b230

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	2401b230 	.word	0x2401b230

08001efc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f00:	4b03      	ldr	r3, [pc, #12]	@ (8001f10 <HAL_GetREVID+0x14>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0c1b      	lsrs	r3, r3, #16
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	5c001000 	.word	0x5c001000

08001f14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	609a      	str	r2, [r3, #8]
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	3360      	adds	r3, #96	@ 0x60
 8001f8e:	461a      	mov	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	430b      	orrs	r3, r1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b087      	sub	sp, #28
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3360      	adds	r3, #96	@ 0x60
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	431a      	orrs	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	601a      	str	r2, [r3, #0]
  }
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800204a:	b480      	push	{r7}
 800204c:	b087      	sub	sp, #28
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3330      	adds	r3, #48	@ 0x30
 800205a:	461a      	mov	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	0a1b      	lsrs	r3, r3, #8
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	4413      	add	r3, r2
 8002068:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f003 031f 	and.w	r3, r3, #31
 8002074:	211f      	movs	r1, #31
 8002076:	fa01 f303 	lsl.w	r3, r1, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	401a      	ands	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	0e9b      	lsrs	r3, r3, #26
 8002082:	f003 011f 	and.w	r1, r3, #31
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	fa01 f303 	lsl.w	r3, r1, r3
 8002090:	431a      	orrs	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002096:	bf00      	nop
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ae:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3314      	adds	r3, #20
 80020d8:	461a      	mov	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	0e5b      	lsrs	r3, r3, #25
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	4413      	add	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	0d1b      	lsrs	r3, r3, #20
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	2107      	movs	r1, #7
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	401a      	ands	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	0d1b      	lsrs	r3, r3, #20
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	431a      	orrs	r2, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002138:	43db      	mvns	r3, r3
 800213a:	401a      	ands	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0318 	and.w	r3, r3, #24
 8002142:	4908      	ldr	r1, [pc, #32]	@ (8002164 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002144:	40d9      	lsrs	r1, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	400b      	ands	r3, r1
 800214a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800214e:	431a      	orrs	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	000fffff 	.word	0x000fffff

08002168 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 031f 	and.w	r3, r3, #31
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6093      	str	r3, [r2, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	5fffffc0 	.word	0x5fffffc0

080021c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80021d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021d8:	d101      	bne.n	80021de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <LL_ADC_EnableInternalRegulator+0x24>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	6fffffc0 	.word	0x6fffffc0

08002214 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002224:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002228:	d101      	bne.n	800222e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4b05      	ldr	r3, [pc, #20]	@ (8002260 <LL_ADC_Enable+0x24>)
 800224a:	4013      	ands	r3, r2
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	7fffffc0 	.word	0x7fffffc0

08002264 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <LL_ADC_IsEnabled+0x18>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <LL_ADC_IsEnabled+0x1a>
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <LL_ADC_REG_StartConversion+0x24>)
 800229a:	4013      	ands	r3, r2
 800229c:	f043 0204 	orr.w	r2, r3, #4
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	7fffffc0 	.word	0x7fffffc0

080022b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d101      	bne.n	80022cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d101      	bne.n	80022f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e138      	b.n	800258c <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff faff 	bl	800192c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff3f 	bl	80021c4 <LL_ADC_IsDeepPowerDownEnabled>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d004      	beq.n	8002356 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff25 	bl	80021a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff5a 	bl	8002214 <LL_ADC_IsInternalRegulatorEnabled>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff3e 	bl	80021ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002370:	4b88      	ldr	r3, [pc, #544]	@ (8002594 <HAL_ADC_Init+0x294>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	099b      	lsrs	r3, r3, #6
 8002376:	4a88      	ldr	r2, [pc, #544]	@ (8002598 <HAL_ADC_Init+0x298>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	099b      	lsrs	r3, r3, #6
 800237e:	3301      	adds	r3, #1
 8002380:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002382:	e002      	b.n	800238a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	3b01      	subs	r3, #1
 8002388:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f9      	bne.n	8002384 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff3d 	bl	8002214 <LL_ADC_IsInternalRegulatorEnabled>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10d      	bne.n	80023bc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023a4:	f043 0210 	orr.w	r2, r3, #16
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff77 	bl	80022b4 <LL_ADC_REG_IsConversionOngoing>
 80023c6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f040 80d2 	bne.w	800257a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 80ce 	bne.w	800257a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff36 	bl	8002264 <LL_ADC_IsEnabled>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d110      	bne.n	8002420 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023fe:	4867      	ldr	r0, [pc, #412]	@ (800259c <HAL_ADC_Init+0x29c>)
 8002400:	f7ff ff30 	bl	8002264 <LL_ADC_IsEnabled>
 8002404:	4604      	mov	r4, r0
 8002406:	4866      	ldr	r0, [pc, #408]	@ (80025a0 <HAL_ADC_Init+0x2a0>)
 8002408:	f7ff ff2c 	bl	8002264 <LL_ADC_IsEnabled>
 800240c:	4603      	mov	r3, r0
 800240e:	4323      	orrs	r3, r4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4619      	mov	r1, r3
 800241a:	4862      	ldr	r0, [pc, #392]	@ (80025a4 <HAL_ADC_Init+0x2a4>)
 800241c:	f7ff fd7a 	bl	8001f14 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7d5b      	ldrb	r3, [r3, #21]
 8002424:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800242a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002430:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	7f1b      	ldrb	r3, [r3, #28]
 8002436:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7f1b      	ldrb	r3, [r3, #28]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	3b01      	subs	r3, #1
 800244a:	045b      	lsls	r3, r3, #17
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002466:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	4b4c      	ldr	r3, [pc, #304]	@ (80025a8 <HAL_ADC_Init+0x2a8>)
 8002476:	4013      	ands	r3, r2
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6812      	ldr	r2, [r2, #0]
 800247c:	69b9      	ldr	r1, [r7, #24]
 800247e:	430b      	orrs	r3, r1
 8002480:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff14 	bl	80022b4 <LL_ADC_REG_IsConversionOngoing>
 800248c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff ff21 	bl	80022da <LL_ADC_INJ_IsConversionOngoing>
 8002498:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d14a      	bne.n	8002536 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d147      	bne.n	8002536 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	7d1b      	ldrb	r3, [r3, #20]
 80024aa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	4b3c      	ldr	r3, [pc, #240]	@ (80025ac <HAL_ADC_Init+0x2ac>)
 80024bc:	4013      	ands	r3, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6812      	ldr	r2, [r2, #0]
 80024c2:	69b9      	ldr	r1, [r7, #24]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d11b      	bne.n	800250a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691a      	ldr	r2, [r3, #16]
 80024de:	4b34      	ldr	r3, [pc, #208]	@ (80025b0 <HAL_ADC_Init+0x2b0>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024e6:	3a01      	subs	r2, #1
 80024e8:	0411      	lsls	r1, r2, #16
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024ee:	4311      	orrs	r1, r2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024f4:	4311      	orrs	r1, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024fa:	430a      	orrs	r2, r1
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	611a      	str	r2, [r3, #16]
 8002508:	e007      	b.n	800251a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 ff21 	bl	8003378 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10c      	bne.n	8002558 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	f023 010f 	bic.w	r1, r3, #15
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	631a      	str	r2, [r3, #48]	@ 0x30
 8002556:	e007      	b.n	8002568 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 020f 	bic.w	r2, r2, #15
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256c:	f023 0303 	bic.w	r3, r3, #3
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	655a      	str	r2, [r3, #84]	@ 0x54
 8002578:	e007      	b.n	800258a <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257e:	f043 0210 	orr.w	r2, r3, #16
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800258a:	7ffb      	ldrb	r3, [r7, #31]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3724      	adds	r7, #36	@ 0x24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd90      	pop	{r4, r7, pc}
 8002594:	24000440 	.word	0x24000440
 8002598:	053e2d63 	.word	0x053e2d63
 800259c:	40022000 	.word	0x40022000
 80025a0:	40022100 	.word	0x40022100
 80025a4:	40022300 	.word	0x40022300
 80025a8:	fff0c003 	.word	0xfff0c003
 80025ac:	ffffbffc 	.word	0xffffbffc
 80025b0:	fc00f81e 	.word	0xfc00f81e

080025b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025bc:	4856      	ldr	r0, [pc, #344]	@ (8002718 <HAL_ADC_Start+0x164>)
 80025be:	f7ff fdd3 	bl	8002168 <LL_ADC_GetMultimode>
 80025c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fe73 	bl	80022b4 <LL_ADC_REG_IsConversionOngoing>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 809a 	bne.w	800270a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_Start+0x30>
 80025e0:	2302      	movs	r3, #2
 80025e2:	e095      	b.n	8002710 <HAL_ADC_Start+0x15c>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f000 fdb3 	bl	8003158 <ADC_Enable>
 80025f2:	4603      	mov	r3, r0
 80025f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f040 8081 	bne.w	8002700 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002602:	4b46      	ldr	r3, [pc, #280]	@ (800271c <HAL_ADC_Start+0x168>)
 8002604:	4013      	ands	r3, r2
 8002606:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a43      	ldr	r2, [pc, #268]	@ (8002720 <HAL_ADC_Start+0x16c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d002      	beq.n	800261e <HAL_ADC_Start+0x6a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	e000      	b.n	8002620 <HAL_ADC_Start+0x6c>
 800261e:	4b41      	ldr	r3, [pc, #260]	@ (8002724 <HAL_ADC_Start+0x170>)
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	4293      	cmp	r3, r2
 8002626:	d002      	beq.n	800262e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d105      	bne.n	800263a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002632:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002646:	d106      	bne.n	8002656 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264c:	f023 0206 	bic.w	r2, r3, #6
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	659a      	str	r2, [r3, #88]	@ 0x58
 8002654:	e002      	b.n	800265c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	221c      	movs	r2, #28
 8002662:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a2b      	ldr	r2, [pc, #172]	@ (8002720 <HAL_ADC_Start+0x16c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d002      	beq.n	800267c <HAL_ADC_Start+0xc8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	e000      	b.n	800267e <HAL_ADC_Start+0xca>
 800267c:	4b29      	ldr	r3, [pc, #164]	@ (8002724 <HAL_ADC_Start+0x170>)
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4293      	cmp	r3, r2
 8002684:	d008      	beq.n	8002698 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b05      	cmp	r3, #5
 8002690:	d002      	beq.n	8002698 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b09      	cmp	r3, #9
 8002696:	d114      	bne.n	80026c2 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026aa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026ae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fde6 	bl	800228c <LL_ADC_REG_StartConversion>
 80026c0:	e025      	b.n	800270e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a13      	ldr	r2, [pc, #76]	@ (8002720 <HAL_ADC_Start+0x16c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d002      	beq.n	80026de <HAL_ADC_Start+0x12a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	e000      	b.n	80026e0 <HAL_ADC_Start+0x12c>
 80026de:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <HAL_ADC_Start+0x170>)
 80026e0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00f      	beq.n	800270e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	@ 0x54
 80026fe:	e006      	b.n	800270e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002708:	e001      	b.n	800270e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800270a:	2302      	movs	r3, #2
 800270c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800270e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40022300 	.word	0x40022300
 800271c:	fffff0fe 	.word	0xfffff0fe
 8002720:	40022100 	.word	0x40022100
 8002724:	40022000 	.word	0x40022000

08002728 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	@ 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002744:	4882      	ldr	r0, [pc, #520]	@ (8002950 <HAL_ADC_IRQHandler+0x228>)
 8002746:	f7ff fd0f 	bl	8002168 <LL_ADC_GetMultimode>
 800274a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d017      	beq.n	8002786 <HAL_ADC_IRQHandler+0x5e>
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d012      	beq.n	8002786 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002764:	f003 0310 	and.w	r3, r3, #16
 8002768:	2b00      	cmp	r3, #0
 800276a:	d105      	bne.n	8002778 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002770:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 ffff 	bl	800377c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2202      	movs	r2, #2
 8002784:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d004      	beq.n	800279a <HAL_ADC_IRQHandler+0x72>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8083 	beq.w	80028ac <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d07d      	beq.n	80028ac <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fc29 	bl	8002024 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d062      	beq.n	800289e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002954 <HAL_ADC_IRQHandler+0x22c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d002      	beq.n	80027e8 <HAL_ADC_IRQHandler+0xc0>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	e000      	b.n	80027ea <HAL_ADC_IRQHandler+0xc2>
 80027e8:	4b5b      	ldr	r3, [pc, #364]	@ (8002958 <HAL_ADC_IRQHandler+0x230>)
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d008      	beq.n	8002804 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d002      	beq.n	8002804 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b09      	cmp	r3, #9
 8002802:	d104      	bne.n	800280e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	e00c      	b.n	8002828 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a50      	ldr	r2, [pc, #320]	@ (8002954 <HAL_ADC_IRQHandler+0x22c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d002      	beq.n	800281e <HAL_ADC_IRQHandler+0xf6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	e000      	b.n	8002820 <HAL_ADC_IRQHandler+0xf8>
 800281e:	4b4e      	ldr	r3, [pc, #312]	@ (8002958 <HAL_ADC_IRQHandler+0x230>)
 8002820:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d135      	bne.n	800289e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b08      	cmp	r3, #8
 800283e:	d12e      	bne.n	800289e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fd35 	bl	80022b4 <LL_ADC_REG_IsConversionOngoing>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d11a      	bne.n	8002886 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 020c 	bic.w	r2, r2, #12
 800285e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d112      	bne.n	800289e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f043 0201 	orr.w	r2, r3, #1
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
 8002884:	e00b      	b.n	800289e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	f043 0210 	orr.w	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002896:	f043 0201 	orr.w	r2, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fe fafe 	bl	8000ea0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	220c      	movs	r2, #12
 80028aa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <HAL_ADC_IRQHandler+0x198>
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 0320 	and.w	r3, r3, #32
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 809f 	beq.w	8002a0a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 8099 	beq.w	8002a0a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fbd4 	bl	80020a2 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80028fa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fb8f 	bl	8002024 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002906:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a11      	ldr	r2, [pc, #68]	@ (8002954 <HAL_ADC_IRQHandler+0x22c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d002      	beq.n	8002918 <HAL_ADC_IRQHandler+0x1f0>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	e000      	b.n	800291a <HAL_ADC_IRQHandler+0x1f2>
 8002918:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <HAL_ADC_IRQHandler+0x230>)
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	4293      	cmp	r3, r2
 8002920:	d008      	beq.n	8002934 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d002      	beq.n	8002934 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b07      	cmp	r3, #7
 8002932:	d104      	bne.n	800293e <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	623b      	str	r3, [r7, #32]
 800293c:	e013      	b.n	8002966 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_ADC_IRQHandler+0x22c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d009      	beq.n	800295c <HAL_ADC_IRQHandler+0x234>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	e007      	b.n	800295e <HAL_ADC_IRQHandler+0x236>
 800294e:	bf00      	nop
 8002950:	40022300 	.word	0x40022300
 8002954:	40022100 	.word	0x40022100
 8002958:	40022000 	.word	0x40022000
 800295c:	4b7d      	ldr	r3, [pc, #500]	@ (8002b54 <HAL_ADC_IRQHandler+0x42c>)
 800295e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d047      	beq.n	80029fc <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d007      	beq.n	8002986 <HAL_ADC_IRQHandler+0x25e>
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d03f      	beq.n	80029fc <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d13a      	bne.n	80029fc <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002990:	2b40      	cmp	r3, #64	@ 0x40
 8002992:	d133      	bne.n	80029fc <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002994:	6a3b      	ldr	r3, [r7, #32]
 8002996:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d12e      	bne.n	80029fc <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fc99 	bl	80022da <LL_ADC_INJ_IsConversionOngoing>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11a      	bne.n	80029e4 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029bc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d112      	bne.n	80029fc <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029da:	f043 0201 	orr.w	r2, r3, #1
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80029e2:	e00b      	b.n	80029fc <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e8:	f043 0210 	orr.w	r2, r3, #16
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f4:	f043 0201 	orr.w	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fe95 	bl	800372c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2260      	movs	r2, #96	@ 0x60
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d011      	beq.n	8002a38 <HAL_ADC_IRQHandler+0x310>
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a22:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f896 	bl	8002b5c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2280      	movs	r2, #128	@ 0x80
 8002a36:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d012      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x340>
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00d      	beq.n	8002a68 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a50:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fe7b 	bl	8003754 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d012      	beq.n	8002a98 <HAL_ADC_IRQHandler+0x370>
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00d      	beq.n	8002a98 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fe6d 	bl	8003768 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a96:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d036      	beq.n	8002b10 <HAL_ADC_IRQHandler+0x3e8>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d031      	beq.n	8002b10 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab8:	e014      	b.n	8002ae4 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d008      	beq.n	8002ad2 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002ac0:	4825      	ldr	r0, [pc, #148]	@ (8002b58 <HAL_ADC_IRQHandler+0x430>)
 8002ac2:	f7ff fb5f 	bl	8002184 <LL_ADC_GetMultiDMATransfer>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00b      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002acc:	2301      	movs	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad0:	e008      	b.n	8002ae4 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d10e      	bne.n	8002b08 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aee:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afa:	f043 0202 	orr.w	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f834 	bl	8002b70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2210      	movs	r2, #16
 8002b0e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d018      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x424>
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b28:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	f043 0208 	orr.w	r2, r3, #8
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b44:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fdfa 	bl	8003740 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b4c:	bf00      	nop
 8002b4e:	3728      	adds	r7, #40	@ 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40022000 	.word	0x40022000
 8002b58:	40022300 	.word	0x40022300

08002b5c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b0a1      	sub	sp, #132	@ 0x84
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a95      	ldr	r2, [pc, #596]	@ (8002df4 <HAL_ADC_ConfigChannel+0x270>)
 8002b9e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x2a>
 8002baa:	2302      	movs	r3, #2
 8002bac:	e2c0      	b.n	8003130 <HAL_ADC_ConfigChannel+0x5ac>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fb7a 	bl	80022b4 <LL_ADC_REG_IsConversionOngoing>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 82a5 	bne.w	8003112 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	db2c      	blt.n	8002c2a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d108      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x6a>
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0e9b      	lsrs	r3, r3, #26
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	2201      	movs	r2, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	e016      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x98>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bfc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002c06:	2320      	movs	r3, #32
 8002c08:	e003      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	2201      	movs	r2, #1
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	69d1      	ldr	r1, [r2, #28]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6812      	ldr	r2, [r2, #0]
 8002c26:	430b      	orrs	r3, r1
 8002c28:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6859      	ldr	r1, [r3, #4]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f7ff fa07 	bl	800204a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fb37 	bl	80022b4 <LL_ADC_REG_IsConversionOngoing>
 8002c46:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fb44 	bl	80022da <LL_ADC_INJ_IsConversionOngoing>
 8002c52:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 80a0 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f040 809c 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6818      	ldr	r0, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6819      	ldr	r1, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	461a      	mov	r2, r3
 8002c72:	f7ff fa29 	bl	80020c8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x118>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	695a      	ldr	r2, [r3, #20]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	089b      	lsrs	r3, r3, #2
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	e00a      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x12e>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	2b04      	cmp	r3, #4
 8002cba:	d027      	beq.n	8002d0c <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6919      	ldr	r1, [r3, #16]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cca:	f7ff f957 	bl	8001f7c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6818      	ldr	r0, [r3, #0]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	6919      	ldr	r1, [r3, #16]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	7e5b      	ldrb	r3, [r3, #25]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x160>
 8002cde:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002ce2:	e000      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x162>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f7ff f981 	bl	8001fee <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6818      	ldr	r0, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	6919      	ldr	r1, [r3, #16]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	7e1b      	ldrb	r3, [r3, #24]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d102      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x17e>
 8002cfc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d00:	e000      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x180>
 8002d02:	2300      	movs	r3, #0
 8002d04:	461a      	mov	r2, r3
 8002d06:	f7ff f959 	bl	8001fbc <LL_ADC_SetDataRightShift>
 8002d0a:	e047      	b.n	8002d9c <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	069b      	lsls	r3, r3, #26
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d107      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d2e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	069b      	lsls	r3, r3, #26
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d107      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d52:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	069b      	lsls	r3, r3, #26
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d107      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d76:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	069b      	lsls	r3, r3, #26
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d107      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d9a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fa5f 	bl	8002264 <LL_ADC_IsEnabled>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f040 81bb 	bne.w	8003124 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6819      	ldr	r1, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f7ff f9b0 	bl	8002120 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8002df4 <HAL_ADC_ConfigChannel+0x270>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	f040 8130 	bne.w	800302c <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10d      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x274>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	2b09      	cmp	r3, #9
 8002dea:	bf94      	ite	ls
 8002dec:	2301      	movls	r3, #1
 8002dee:	2300      	movhi	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e01b      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x2a8>
 8002df4:	47ff0000 	.word	0x47ff0000
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002e14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	2b09      	cmp	r3, #9
 8002e24:	bf94      	ite	ls
 8002e26:	2301      	movls	r3, #1
 8002e28:	2300      	movhi	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d079      	beq.n	8002f24 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x2c8>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	0e9b      	lsrs	r3, r3, #26
 8002e42:	3301      	adds	r3, #1
 8002e44:	069b      	lsls	r3, r3, #26
 8002e46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e4a:	e015      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x2f4>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e5c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002e64:	2320      	movs	r3, #32
 8002e66:	e003      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e6a:	fab3 f383 	clz	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	3301      	adds	r3, #1
 8002e72:	069b      	lsls	r3, r3, #26
 8002e74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x314>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e9b      	lsrs	r3, r3, #26
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2101      	movs	r1, #1
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	e017      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x344>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ea8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	e003      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	ea42 0103 	orr.w	r1, r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x36a>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	051b      	lsls	r3, r3, #20
 8002eec:	e018      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x39c>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002f06:	2320      	movs	r3, #32
 8002f08:	e003      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f003 021f 	and.w	r2, r3, #31
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f20:	430b      	orrs	r3, r1
 8002f22:	e07e      	b.n	8003022 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x3bc>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	0e9b      	lsrs	r3, r3, #26
 8002f36:	3301      	adds	r3, #1
 8002f38:	069b      	lsls	r3, r3, #26
 8002f3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f3e:	e015      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x3e8>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	fa93 f3a3 	rbit	r3, r3
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002f58:	2320      	movs	r3, #32
 8002f5a:	e003      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5e:	fab3 f383 	clz	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	069b      	lsls	r3, r3, #26
 8002f68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x408>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	e017      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x438>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	61bb      	str	r3, [r7, #24]
  return result;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e003      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	ea42 0103 	orr.w	r1, r2, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x464>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0e9b      	lsrs	r3, r3, #26
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 021f 	and.w	r2, r3, #31
 8002fd8:	4613      	mov	r3, r2
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4413      	add	r3, r2
 8002fde:	3b1e      	subs	r3, #30
 8002fe0:	051b      	lsls	r3, r3, #20
 8002fe2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fe6:	e01b      	b.n	8003020 <HAL_ADC_ConfigChannel+0x49c>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	fa93 f3a3 	rbit	r3, r3
 8002ff4:	60fb      	str	r3, [r7, #12]
  return result;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003000:	2320      	movs	r3, #32
 8003002:	e003      	b.n	800300c <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fab3 f383 	clz	r3, r3
 800300a:	b2db      	uxtb	r3, r3
 800300c:	3301      	adds	r3, #1
 800300e:	f003 021f 	and.w	r2, r3, #31
 8003012:	4613      	mov	r3, r2
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	4413      	add	r3, r2
 8003018:	3b1e      	subs	r3, #30
 800301a:	051b      	lsls	r3, r3, #20
 800301c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003020:	430b      	orrs	r3, r1
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	4619      	mov	r1, r3
 8003028:	f7ff f84e 	bl	80020c8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	da77      	bge.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003034:	4840      	ldr	r0, [pc, #256]	@ (8003138 <HAL_ADC_ConfigChannel+0x5b4>)
 8003036:	f7fe ff93 	bl	8001f60 <LL_ADC_GetCommonPathInternalCh>
 800303a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800303c:	483f      	ldr	r0, [pc, #252]	@ (800313c <HAL_ADC_ConfigChannel+0x5b8>)
 800303e:	f7ff f911 	bl	8002264 <LL_ADC_IsEnabled>
 8003042:	4604      	mov	r4, r0
 8003044:	483e      	ldr	r0, [pc, #248]	@ (8003140 <HAL_ADC_ConfigChannel+0x5bc>)
 8003046:	f7ff f90d 	bl	8002264 <LL_ADC_IsEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	4323      	orrs	r3, r4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d155      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a3b      	ldr	r2, [pc, #236]	@ (8003144 <HAL_ADC_ConfigChannel+0x5c0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d122      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x51e>
 800305c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d11d      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a35      	ldr	r2, [pc, #212]	@ (8003140 <HAL_ADC_ConfigChannel+0x5bc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d159      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003072:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003076:	4619      	mov	r1, r3
 8003078:	482f      	ldr	r0, [pc, #188]	@ (8003138 <HAL_ADC_ConfigChannel+0x5b4>)
 800307a:	f7fe ff5e 	bl	8001f3a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800307e:	4b32      	ldr	r3, [pc, #200]	@ (8003148 <HAL_ADC_ConfigChannel+0x5c4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	099b      	lsrs	r3, r3, #6
 8003084:	4a31      	ldr	r2, [pc, #196]	@ (800314c <HAL_ADC_ConfigChannel+0x5c8>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	3301      	adds	r3, #1
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003092:	e002      	b.n	800309a <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3b01      	subs	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f9      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030a0:	e040      	b.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003150 <HAL_ADC_ConfigChannel+0x5cc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d111      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x54c>
 80030ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10c      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a21      	ldr	r2, [pc, #132]	@ (8003140 <HAL_ADC_ConfigChannel+0x5bc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d131      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	4619      	mov	r1, r3
 80030c8:	481b      	ldr	r0, [pc, #108]	@ (8003138 <HAL_ADC_ConfigChannel+0x5b4>)
 80030ca:	f7fe ff36 	bl	8001f3a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030ce:	e029      	b.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003154 <HAL_ADC_ConfigChannel+0x5d0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d124      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
 80030da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11f      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <HAL_ADC_ConfigChannel+0x5bc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d11a      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030f4:	4619      	mov	r1, r3
 80030f6:	4810      	ldr	r0, [pc, #64]	@ (8003138 <HAL_ADC_ConfigChannel+0x5b4>)
 80030f8:	f7fe ff1f 	bl	8001f3a <LL_ADC_SetCommonPathInternalCh>
 80030fc:	e012      	b.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003102:	f043 0220 	orr.w	r2, r3, #32
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003110:	e008      	b.n	8003124 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003116:	f043 0220 	orr.w	r2, r3, #32
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800312c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003130:	4618      	mov	r0, r3
 8003132:	3784      	adds	r7, #132	@ 0x84
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}
 8003138:	40022300 	.word	0x40022300
 800313c:	40022000 	.word	0x40022000
 8003140:	40022100 	.word	0x40022100
 8003144:	cb840000 	.word	0xcb840000
 8003148:	24000440 	.word	0x24000440
 800314c:	053e2d63 	.word	0x053e2d63
 8003150:	bac04000 	.word	0xbac04000
 8003154:	cfb80000 	.word	0xcfb80000

08003158 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff f87d 	bl	8002264 <LL_ADC_IsEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d161      	bne.n	8003234 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	4b32      	ldr	r3, [pc, #200]	@ (8003240 <ADC_Enable+0xe8>)
 8003178:	4013      	ands	r3, r2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003182:	f043 0210 	orr.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e04d      	b.n	8003236 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff f84c 	bl	800223c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031a4:	f7fe fe9e 	bl	8001ee4 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031aa:	4826      	ldr	r0, [pc, #152]	@ (8003244 <ADC_Enable+0xec>)
 80031ac:	f7fe ffdc 	bl	8002168 <LL_ADC_GetMultimode>
 80031b0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a24      	ldr	r2, [pc, #144]	@ (8003248 <ADC_Enable+0xf0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d002      	beq.n	80031c2 <ADC_Enable+0x6a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	e000      	b.n	80031c4 <ADC_Enable+0x6c>
 80031c2:	4b22      	ldr	r3, [pc, #136]	@ (800324c <ADC_Enable+0xf4>)
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6812      	ldr	r2, [r2, #0]
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d02c      	beq.n	8003226 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d130      	bne.n	8003234 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031d2:	e028      	b.n	8003226 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f843 	bl	8002264 <LL_ADC_IsEnabled>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d104      	bne.n	80031ee <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f827 	bl	800223c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031ee:	f7fe fe79 	bl	8001ee4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d914      	bls.n	8003226 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b01      	cmp	r3, #1
 8003208:	d00d      	beq.n	8003226 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800320e:	f043 0210 	orr.w	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	f043 0201 	orr.w	r2, r3, #1
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e007      	b.n	8003236 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b01      	cmp	r3, #1
 8003232:	d1cf      	bne.n	80031d4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	8000003f 	.word	0x8000003f
 8003244:	40022300 	.word	0x40022300
 8003248:	40022100 	.word	0x40022100
 800324c:	40022000 	.word	0x40022000

08003250 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003266:	2b00      	cmp	r3, #0
 8003268:	d14b      	bne.n	8003302 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d021      	beq.n	80032c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7fe fecb 	bl	8002024 <LL_ADC_REG_IsTriggerSourceSWStart>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d032      	beq.n	80032fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d12b      	bne.n	80032fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d11f      	bne.n	80032fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80032c6:	e018      	b.n	80032fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d111      	bne.n	80032fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	f043 0201 	orr.w	r2, r3, #1
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f7fd fdd0 	bl	8000ea0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003300:	e00e      	b.n	8003320 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f7ff fc2e 	bl	8002b70 <HAL_ADC_ErrorCallback>
}
 8003314:	e004      	b.n	8003320 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f7fd fd6a 	bl	8000e10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800333c:	bf00      	nop
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	f043 0204 	orr.w	r2, r3, #4
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7ff fc00 	bl	8002b70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003380:	4b60      	ldr	r3, [pc, #384]	@ (8003504 <ADC_ConfigureBoostMode+0x18c>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01c      	beq.n	80033c6 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800338c:	f004 fd02 	bl	8007d94 <HAL_RCC_GetHCLKFreq>
 8003390:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800339a:	d010      	beq.n	80033be <ADC_ConfigureBoostMode+0x46>
 800339c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80033a0:	d873      	bhi.n	800348a <ADC_ConfigureBoostMode+0x112>
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a6:	d002      	beq.n	80033ae <ADC_ConfigureBoostMode+0x36>
 80033a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033ac:	d16d      	bne.n	800348a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	0c1b      	lsrs	r3, r3, #16
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ba:	60fb      	str	r3, [r7, #12]
        break;
 80033bc:	e068      	b.n	8003490 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	60fb      	str	r3, [r7, #12]
        break;
 80033c4:	e064      	b.n	8003490 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80033c6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	f005 fefb 	bl	80091c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80033d2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033dc:	d051      	beq.n	8003482 <ADC_ConfigureBoostMode+0x10a>
 80033de:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80033e2:	d854      	bhi.n	800348e <ADC_ConfigureBoostMode+0x116>
 80033e4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033e8:	d047      	beq.n	800347a <ADC_ConfigureBoostMode+0x102>
 80033ea:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80033ee:	d84e      	bhi.n	800348e <ADC_ConfigureBoostMode+0x116>
 80033f0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033f4:	d03d      	beq.n	8003472 <ADC_ConfigureBoostMode+0xfa>
 80033f6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80033fa:	d848      	bhi.n	800348e <ADC_ConfigureBoostMode+0x116>
 80033fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003400:	d033      	beq.n	800346a <ADC_ConfigureBoostMode+0xf2>
 8003402:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003406:	d842      	bhi.n	800348e <ADC_ConfigureBoostMode+0x116>
 8003408:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800340c:	d029      	beq.n	8003462 <ADC_ConfigureBoostMode+0xea>
 800340e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003412:	d83c      	bhi.n	800348e <ADC_ConfigureBoostMode+0x116>
 8003414:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003418:	d01a      	beq.n	8003450 <ADC_ConfigureBoostMode+0xd8>
 800341a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800341e:	d836      	bhi.n	800348e <ADC_ConfigureBoostMode+0x116>
 8003420:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003424:	d014      	beq.n	8003450 <ADC_ConfigureBoostMode+0xd8>
 8003426:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800342a:	d830      	bhi.n	800348e <ADC_ConfigureBoostMode+0x116>
 800342c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003430:	d00e      	beq.n	8003450 <ADC_ConfigureBoostMode+0xd8>
 8003432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003436:	d82a      	bhi.n	800348e <ADC_ConfigureBoostMode+0x116>
 8003438:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800343c:	d008      	beq.n	8003450 <ADC_ConfigureBoostMode+0xd8>
 800343e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003442:	d824      	bhi.n	800348e <ADC_ConfigureBoostMode+0x116>
 8003444:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003448:	d002      	beq.n	8003450 <ADC_ConfigureBoostMode+0xd8>
 800344a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800344e:	d11e      	bne.n	800348e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	0c9b      	lsrs	r3, r3, #18
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	60fb      	str	r3, [r7, #12]
        break;
 8003460:	e016      	b.n	8003490 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	60fb      	str	r3, [r7, #12]
        break;
 8003468:	e012      	b.n	8003490 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	60fb      	str	r3, [r7, #12]
        break;
 8003470:	e00e      	b.n	8003490 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	099b      	lsrs	r3, r3, #6
 8003476:	60fb      	str	r3, [r7, #12]
        break;
 8003478:	e00a      	b.n	8003490 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	09db      	lsrs	r3, r3, #7
 800347e:	60fb      	str	r3, [r7, #12]
        break;
 8003480:	e006      	b.n	8003490 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	60fb      	str	r3, [r7, #12]
        break;
 8003488:	e002      	b.n	8003490 <ADC_ConfigureBoostMode+0x118>
        break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800348e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	085b      	lsrs	r3, r3, #1
 8003494:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4a1b      	ldr	r2, [pc, #108]	@ (8003508 <ADC_ConfigureBoostMode+0x190>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d808      	bhi.n	80034b0 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80034ac:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80034ae:	e025      	b.n	80034fc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a16      	ldr	r2, [pc, #88]	@ (800350c <ADC_ConfigureBoostMode+0x194>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d80a      	bhi.n	80034ce <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ca:	609a      	str	r2, [r3, #8]
}
 80034cc:	e016      	b.n	80034fc <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003510 <ADC_ConfigureBoostMode+0x198>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d80a      	bhi.n	80034ec <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e8:	609a      	str	r2, [r3, #8]
}
 80034ea:	e007      	b.n	80034fc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80034fa:	609a      	str	r2, [r3, #8]
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	40022300 	.word	0x40022300
 8003508:	005f5e10 	.word	0x005f5e10
 800350c:	00bebc20 	.word	0x00bebc20
 8003510:	017d7840 	.word	0x017d7840

08003514 <LL_ADC_IsEnabled>:
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <LL_ADC_IsEnabled+0x18>
 8003528:	2301      	movs	r3, #1
 800352a:	e000      	b.n	800352e <LL_ADC_IsEnabled+0x1a>
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
	...

0800353c <LL_ADC_REG_StartConversion>:
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <LL_ADC_REG_StartConversion+0x24>)
 800354a:	4013      	ands	r3, r2
 800354c:	f043 0204 	orr.w	r2, r3, #4
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	609a      	str	r2, [r3, #8]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	7fffffc0 	.word	0x7fffffc0

08003564 <LL_ADC_REG_IsConversionOngoing>:
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b04      	cmp	r3, #4
 8003576:	d101      	bne.n	800357c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
	...

0800358c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b0a0      	sub	sp, #128	@ 0x80
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ffe1 	bl	8003564 <LL_ADC_REG_IsConversionOngoing>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 80035a8:	2302      	movs	r3, #2
 80035aa:	e0ad      	b.n	8003708 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e0a6      	b.n	8003708 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a52      	ldr	r2, [pc, #328]	@ (8003710 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d002      	beq.n	80035d2 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	e000      	b.n	80035d4 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 80035d2:	4b50      	ldr	r3, [pc, #320]	@ (8003714 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	6812      	ldr	r2, [r2, #0]
 80035d8:	4293      	cmp	r3, r2
 80035da:	d006      	beq.n	80035ea <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fdbb 	bl	8003158 <ADC_Enable>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80035e8:	e02e      	b.n	8003648 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80035ea:	2300      	movs	r3, #0
 80035ec:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80035ee:	2300      	movs	r3, #0
 80035f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a47      	ldr	r2, [pc, #284]	@ (8003714 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d102      	bne.n	8003602 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 80035fc:	4b44      	ldr	r3, [pc, #272]	@ (8003710 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e001      	b.n	8003606 <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10b      	bne.n	8003624 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e071      	b.n	8003708 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f7ff fd97 	bl	8003158 <ADC_Enable>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 8003630:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003634:	2b00      	cmp	r3, #0
 8003636:	d107      	bne.n	8003648 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fd8b 	bl	8003158 <ADC_Enable>
 8003642:	4603      	mov	r3, r0
 8003644:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8003648:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800364c:	2b00      	cmp	r3, #0
 800364e:	d155      	bne.n	80036fc <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003654:	4b30      	ldr	r3, [pc, #192]	@ (8003718 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8003656:	4013      	ands	r3, r2
 8003658:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800366a:	4a2c      	ldr	r2, [pc, #176]	@ (800371c <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 800366c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003672:	4a2b      	ldr	r2, [pc, #172]	@ (8003720 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8003674:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367a:	4a2a      	ldr	r2, [pc, #168]	@ (8003724 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 800367c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	221c      	movs	r2, #28
 8003684:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0210 	orr.w	r2, r2, #16
 800369c:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003710 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d002      	beq.n	80036ae <HAL_ADCEx_MultiModeStart_DMA+0x122>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	e000      	b.n	80036b0 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 80036ae:	4b19      	ldr	r3, [pc, #100]	@ (8003714 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00d      	beq.n	80036d4 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3340      	adds	r3, #64	@ 0x40
 80036c2:	4619      	mov	r1, r3
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f000 fe14 	bl	80042f4 <HAL_DMA_Start_IT>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80036d2:	e017      	b.n	8003704 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036d4:	4b14      	ldr	r3, [pc, #80]	@ (8003728 <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 80036d6:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80036dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80036de:	330c      	adds	r3, #12
 80036e0:	4619      	mov	r1, r3
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f000 fe05 	bl	80042f4 <HAL_DMA_Start_IT>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff ff21 	bl	800353c <LL_ADC_REG_StartConversion>
 80036fa:	e003      	b.n	8003704 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8003704:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 8003708:	4618      	mov	r0, r3
 800370a:	3780      	adds	r7, #128	@ 0x80
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40022100 	.word	0x40022100
 8003714:	40022000 	.word	0x40022000
 8003718:	fffff0fe 	.word	0xfffff0fe
 800371c:	08003251 	.word	0x08003251
 8003720:	08003329 	.word	0x08003329
 8003724:	08003345 	.word	0x08003345
 8003728:	40022300 	.word	0x40022300

0800372c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b09f      	sub	sp, #124	@ 0x7c
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e080      	b.n	80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a3d      	ldr	r2, [pc, #244]	@ (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d102      	bne.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037c8:	4b3c      	ldr	r3, [pc, #240]	@ (80038bc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	e001      	b.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037ce:	2300      	movs	r3, #0
 80037d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037dc:	f043 0220 	orr.w	r2, r3, #32
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e05f      	b.n	80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff feb6 	bl	8003564 <LL_ADC_REG_IsConversionOngoing>
 80037f8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff feb0 	bl	8003564 <LL_ADC_REG_IsConversionOngoing>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d141      	bne.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800380a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800380c:	2b00      	cmp	r3, #0
 800380e:	d13e      	bne.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003810:	4b2b      	ldr	r3, [pc, #172]	@ (80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003812:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d020      	beq.n	800385e <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800381c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	431a      	orrs	r2, r3
 800382a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800382e:	4822      	ldr	r0, [pc, #136]	@ (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003830:	f7ff fe70 	bl	8003514 <LL_ADC_IsEnabled>
 8003834:	4604      	mov	r4, r0
 8003836:	4821      	ldr	r0, [pc, #132]	@ (80038bc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003838:	f7ff fe6c 	bl	8003514 <LL_ADC_IsEnabled>
 800383c:	4603      	mov	r3, r0
 800383e:	4323      	orrs	r3, r4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d12e      	bne.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003844:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	4b1e      	ldr	r3, [pc, #120]	@ (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800384a:	4013      	ands	r3, r2
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	6811      	ldr	r1, [r2, #0]
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	6892      	ldr	r2, [r2, #8]
 8003854:	430a      	orrs	r2, r1
 8003856:	431a      	orrs	r2, r3
 8003858:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800385a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800385c:	e021      	b.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800385e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003866:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003868:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800386a:	4813      	ldr	r0, [pc, #76]	@ (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 800386c:	f7ff fe52 	bl	8003514 <LL_ADC_IsEnabled>
 8003870:	4604      	mov	r4, r0
 8003872:	4812      	ldr	r0, [pc, #72]	@ (80038bc <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003874:	f7ff fe4e 	bl	8003514 <LL_ADC_IsEnabled>
 8003878:	4603      	mov	r3, r0
 800387a:	4323      	orrs	r3, r4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d110      	bne.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003880:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	4b0f      	ldr	r3, [pc, #60]	@ (80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003886:	4013      	ands	r3, r2
 8003888:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800388a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800388c:	e009      	b.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003892:	f043 0220 	orr.w	r2, r3, #32
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80038a0:	e000      	b.n	80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80038ac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	377c      	adds	r7, #124	@ 0x7c
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd90      	pop	{r4, r7, pc}
 80038b8:	40022000 	.word	0x40022000
 80038bc:	40022100 	.word	0x40022100
 80038c0:	40022300 	.word	0x40022300
 80038c4:	fffff0e0 	.word	0xfffff0e0

080038c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003908 <__NVIC_SetPriorityGrouping+0x40>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038f0:	4b06      	ldr	r3, [pc, #24]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038f6:	4a04      	ldr	r2, [pc, #16]	@ (8003908 <__NVIC_SetPriorityGrouping+0x40>)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	60d3      	str	r3, [r2, #12]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	e000ed00 	.word	0xe000ed00
 800390c:	05fa0000 	.word	0x05fa0000

08003910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4907      	ldr	r1, [pc, #28]	@ (8003964 <__NVIC_EnableIRQ+0x38>)
 8003946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e000e100 	.word	0xe000e100

08003968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003974:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003978:	2b00      	cmp	r3, #0
 800397a:	db0a      	blt.n	8003992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b2da      	uxtb	r2, r3
 8003980:	490c      	ldr	r1, [pc, #48]	@ (80039b4 <__NVIC_SetPriority+0x4c>)
 8003982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003986:	0112      	lsls	r2, r2, #4
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	440b      	add	r3, r1
 800398c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003990:	e00a      	b.n	80039a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4908      	ldr	r1, [pc, #32]	@ (80039b8 <__NVIC_SetPriority+0x50>)
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	3b04      	subs	r3, #4
 80039a0:	0112      	lsls	r2, r2, #4
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	440b      	add	r3, r1
 80039a6:	761a      	strb	r2, [r3, #24]
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	e000e100 	.word	0xe000e100
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b089      	sub	sp, #36	@ 0x24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f1c3 0307 	rsb	r3, r3, #7
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf28      	it	cs
 80039da:	2304      	movcs	r3, #4
 80039dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2b06      	cmp	r3, #6
 80039e4:	d902      	bls.n	80039ec <NVIC_EncodePriority+0x30>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3b03      	subs	r3, #3
 80039ea:	e000      	b.n	80039ee <NVIC_EncodePriority+0x32>
 80039ec:	2300      	movs	r3, #0
 80039ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f0:	f04f 32ff 	mov.w	r2, #4294967295
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	401a      	ands	r2, r3
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a04:	f04f 31ff 	mov.w	r1, #4294967295
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0e:	43d9      	mvns	r1, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a14:	4313      	orrs	r3, r2
         );
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3724      	adds	r7, #36	@ 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
	...

08003a24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a34:	d301      	bcc.n	8003a3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a36:	2301      	movs	r3, #1
 8003a38:	e00f      	b.n	8003a5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a64 <SysTick_Config+0x40>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a42:	210f      	movs	r1, #15
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	f7ff ff8e 	bl	8003968 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a4c:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <SysTick_Config+0x40>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a52:	4b04      	ldr	r3, [pc, #16]	@ (8003a64 <SysTick_Config+0x40>)
 8003a54:	2207      	movs	r2, #7
 8003a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	e000e010 	.word	0xe000e010

08003a68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7ff ff29 	bl	80038c8 <__NVIC_SetPriorityGrouping>
}
 8003a76:	bf00      	nop
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b086      	sub	sp, #24
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	4603      	mov	r3, r0
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a8c:	f7ff ff40 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003a90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68b9      	ldr	r1, [r7, #8]
 8003a96:	6978      	ldr	r0, [r7, #20]
 8003a98:	f7ff ff90 	bl	80039bc <NVIC_EncodePriority>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff ff5f 	bl	8003968 <__NVIC_SetPriority>
}
 8003aaa:	bf00      	nop
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4603      	mov	r3, r0
 8003aba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff ff33 	bl	800392c <__NVIC_EnableIRQ>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ffa4 	bl	8003a24 <SysTick_Config>
 8003adc:	4603      	mov	r3, r0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003aec:	f3bf 8f5f 	dmb	sy
}
 8003af0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003af2:	4b07      	ldr	r3, [pc, #28]	@ (8003b10 <HAL_MPU_Disable+0x28>)
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	4a06      	ldr	r2, [pc, #24]	@ (8003b10 <HAL_MPU_Disable+0x28>)
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003afe:	4b05      	ldr	r3, [pc, #20]	@ (8003b14 <HAL_MPU_Disable+0x2c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	605a      	str	r2, [r3, #4]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	e000ed00 	.word	0xe000ed00
 8003b14:	e000ed90 	.word	0xe000ed90

08003b18 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003b20:	4a0b      	ldr	r2, [pc, #44]	@ (8003b50 <HAL_MPU_Enable+0x38>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b54 <HAL_MPU_Enable+0x3c>)
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	4a09      	ldr	r2, [pc, #36]	@ (8003b54 <HAL_MPU_Enable+0x3c>)
 8003b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b34:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003b36:	f3bf 8f4f 	dsb	sy
}
 8003b3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b3c:	f3bf 8f6f 	isb	sy
}
 8003b40:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003b42:	bf00      	nop
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	e000ed90 	.word	0xe000ed90
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	785a      	ldrb	r2, [r3, #1]
 8003b64:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b66:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003b68:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	@ (8003bd4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003b74:	4a17      	ldr	r2, [pc, #92]	@ (8003bd4 <HAL_MPU_ConfigRegion+0x7c>)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	7b1b      	ldrb	r3, [r3, #12]
 8003b80:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	7adb      	ldrb	r3, [r3, #11]
 8003b86:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003b88:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	7a9b      	ldrb	r3, [r3, #10]
 8003b8e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003b90:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7b5b      	ldrb	r3, [r3, #13]
 8003b96:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003b98:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7b9b      	ldrb	r3, [r3, #14]
 8003b9e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003ba0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7bdb      	ldrb	r3, [r3, #15]
 8003ba6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003ba8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7a5b      	ldrb	r3, [r3, #9]
 8003bae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003bb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	7a1b      	ldrb	r3, [r3, #8]
 8003bb6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003bb8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bc0:	4a04      	ldr	r2, [pc, #16]	@ (8003bd4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003bc2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bc4:	6113      	str	r3, [r2, #16]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000ed90 	.word	0xe000ed90

08003bd8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003be0:	f7fe f980 	bl	8001ee4 <HAL_GetTick>
 8003be4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e37d      	b.n	80042ec <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a66      	ldr	r2, [pc, #408]	@ (8003d90 <HAL_DMA_Init+0x1b8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d04a      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a65      	ldr	r2, [pc, #404]	@ (8003d94 <HAL_DMA_Init+0x1bc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d045      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a63      	ldr	r2, [pc, #396]	@ (8003d98 <HAL_DMA_Init+0x1c0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d040      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a62      	ldr	r2, [pc, #392]	@ (8003d9c <HAL_DMA_Init+0x1c4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d03b      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a60      	ldr	r2, [pc, #384]	@ (8003da0 <HAL_DMA_Init+0x1c8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d036      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a5f      	ldr	r2, [pc, #380]	@ (8003da4 <HAL_DMA_Init+0x1cc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d031      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a5d      	ldr	r2, [pc, #372]	@ (8003da8 <HAL_DMA_Init+0x1d0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d02c      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8003dac <HAL_DMA_Init+0x1d4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d027      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a5a      	ldr	r2, [pc, #360]	@ (8003db0 <HAL_DMA_Init+0x1d8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d022      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a59      	ldr	r2, [pc, #356]	@ (8003db4 <HAL_DMA_Init+0x1dc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d01d      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a57      	ldr	r2, [pc, #348]	@ (8003db8 <HAL_DMA_Init+0x1e0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d018      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a56      	ldr	r2, [pc, #344]	@ (8003dbc <HAL_DMA_Init+0x1e4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d013      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a54      	ldr	r2, [pc, #336]	@ (8003dc0 <HAL_DMA_Init+0x1e8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00e      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a53      	ldr	r2, [pc, #332]	@ (8003dc4 <HAL_DMA_Init+0x1ec>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d009      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a51      	ldr	r2, [pc, #324]	@ (8003dc8 <HAL_DMA_Init+0x1f0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <HAL_DMA_Init+0xb8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a50      	ldr	r2, [pc, #320]	@ (8003dcc <HAL_DMA_Init+0x1f4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d101      	bne.n	8003c94 <HAL_DMA_Init+0xbc>
 8003c90:	2301      	movs	r3, #1
 8003c92:	e000      	b.n	8003c96 <HAL_DMA_Init+0xbe>
 8003c94:	2300      	movs	r3, #0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	f000 813c 	beq.w	8003f14 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a37      	ldr	r2, [pc, #220]	@ (8003d90 <HAL_DMA_Init+0x1b8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d04a      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a36      	ldr	r2, [pc, #216]	@ (8003d94 <HAL_DMA_Init+0x1bc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d045      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a34      	ldr	r2, [pc, #208]	@ (8003d98 <HAL_DMA_Init+0x1c0>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d040      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a33      	ldr	r2, [pc, #204]	@ (8003d9c <HAL_DMA_Init+0x1c4>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d03b      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a31      	ldr	r2, [pc, #196]	@ (8003da0 <HAL_DMA_Init+0x1c8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d036      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a30      	ldr	r2, [pc, #192]	@ (8003da4 <HAL_DMA_Init+0x1cc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d031      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2e      	ldr	r2, [pc, #184]	@ (8003da8 <HAL_DMA_Init+0x1d0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d02c      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8003dac <HAL_DMA_Init+0x1d4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d027      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a2b      	ldr	r2, [pc, #172]	@ (8003db0 <HAL_DMA_Init+0x1d8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d022      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	@ (8003db4 <HAL_DMA_Init+0x1dc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d01d      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a28      	ldr	r2, [pc, #160]	@ (8003db8 <HAL_DMA_Init+0x1e0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d018      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a27      	ldr	r2, [pc, #156]	@ (8003dbc <HAL_DMA_Init+0x1e4>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d013      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a25      	ldr	r2, [pc, #148]	@ (8003dc0 <HAL_DMA_Init+0x1e8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00e      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a24      	ldr	r2, [pc, #144]	@ (8003dc4 <HAL_DMA_Init+0x1ec>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d009      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	@ (8003dc8 <HAL_DMA_Init+0x1f0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d004      	beq.n	8003d4c <HAL_DMA_Init+0x174>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a21      	ldr	r2, [pc, #132]	@ (8003dcc <HAL_DMA_Init+0x1f4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d108      	bne.n	8003d5e <HAL_DMA_Init+0x186>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0201 	bic.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	e007      	b.n	8003d6e <HAL_DMA_Init+0x196>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0201 	bic.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d6e:	e02f      	b.n	8003dd0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d70:	f7fe f8b8 	bl	8001ee4 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d928      	bls.n	8003dd0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2203      	movs	r2, #3
 8003d88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e2ad      	b.n	80042ec <HAL_DMA_Init+0x714>
 8003d90:	40020010 	.word	0x40020010
 8003d94:	40020028 	.word	0x40020028
 8003d98:	40020040 	.word	0x40020040
 8003d9c:	40020058 	.word	0x40020058
 8003da0:	40020070 	.word	0x40020070
 8003da4:	40020088 	.word	0x40020088
 8003da8:	400200a0 	.word	0x400200a0
 8003dac:	400200b8 	.word	0x400200b8
 8003db0:	40020410 	.word	0x40020410
 8003db4:	40020428 	.word	0x40020428
 8003db8:	40020440 	.word	0x40020440
 8003dbc:	40020458 	.word	0x40020458
 8003dc0:	40020470 	.word	0x40020470
 8003dc4:	40020488 	.word	0x40020488
 8003dc8:	400204a0 	.word	0x400204a0
 8003dcc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1c8      	bne.n	8003d70 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	4b73      	ldr	r3, [pc, #460]	@ (8003fb8 <HAL_DMA_Init+0x3e0>)
 8003dea:	4013      	ands	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003df6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e02:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e0e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d107      	bne.n	8003e34 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b28      	cmp	r3, #40	@ 0x28
 8003e3a:	d903      	bls.n	8003e44 <HAL_DMA_Init+0x26c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e42:	d91f      	bls.n	8003e84 <HAL_DMA_Init+0x2ac>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b3e      	cmp	r3, #62	@ 0x3e
 8003e4a:	d903      	bls.n	8003e54 <HAL_DMA_Init+0x27c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b42      	cmp	r3, #66	@ 0x42
 8003e52:	d917      	bls.n	8003e84 <HAL_DMA_Init+0x2ac>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b46      	cmp	r3, #70	@ 0x46
 8003e5a:	d903      	bls.n	8003e64 <HAL_DMA_Init+0x28c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b48      	cmp	r3, #72	@ 0x48
 8003e62:	d90f      	bls.n	8003e84 <HAL_DMA_Init+0x2ac>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b4e      	cmp	r3, #78	@ 0x4e
 8003e6a:	d903      	bls.n	8003e74 <HAL_DMA_Init+0x29c>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b52      	cmp	r3, #82	@ 0x52
 8003e72:	d907      	bls.n	8003e84 <HAL_DMA_Init+0x2ac>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b73      	cmp	r3, #115	@ 0x73
 8003e7a:	d905      	bls.n	8003e88 <HAL_DMA_Init+0x2b0>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b77      	cmp	r3, #119	@ 0x77
 8003e82:	d801      	bhi.n	8003e88 <HAL_DMA_Init+0x2b0>
 8003e84:	2301      	movs	r3, #1
 8003e86:	e000      	b.n	8003e8a <HAL_DMA_Init+0x2b2>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e94:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	697a      	ldr	r2, [r7, #20]
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 0307 	bic.w	r3, r3, #7
 8003eac:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d117      	bne.n	8003ef0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f002 fbd4 	bl	8006680 <DMA_CheckFifoParam>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2240      	movs	r2, #64	@ 0x40
 8003ee2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e1fd      	b.n	80042ec <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f002 fb0f 	bl	800651c <DMA_CalcBaseAndBitshift>
 8003efe:	4603      	mov	r3, r0
 8003f00:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	223f      	movs	r2, #63	@ 0x3f
 8003f0c:	409a      	lsls	r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	609a      	str	r2, [r3, #8]
 8003f12:	e0fd      	b.n	8004110 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a28      	ldr	r2, [pc, #160]	@ (8003fbc <HAL_DMA_Init+0x3e4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d04a      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a27      	ldr	r2, [pc, #156]	@ (8003fc0 <HAL_DMA_Init+0x3e8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d045      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a25      	ldr	r2, [pc, #148]	@ (8003fc4 <HAL_DMA_Init+0x3ec>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d040      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a24      	ldr	r2, [pc, #144]	@ (8003fc8 <HAL_DMA_Init+0x3f0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d03b      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a22      	ldr	r2, [pc, #136]	@ (8003fcc <HAL_DMA_Init+0x3f4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d036      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	@ (8003fd0 <HAL_DMA_Init+0x3f8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d031      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1f      	ldr	r2, [pc, #124]	@ (8003fd4 <HAL_DMA_Init+0x3fc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02c      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd8 <HAL_DMA_Init+0x400>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d027      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1c      	ldr	r2, [pc, #112]	@ (8003fdc <HAL_DMA_Init+0x404>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d022      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe0 <HAL_DMA_Init+0x408>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01d      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a19      	ldr	r2, [pc, #100]	@ (8003fe4 <HAL_DMA_Init+0x40c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d018      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a18      	ldr	r2, [pc, #96]	@ (8003fe8 <HAL_DMA_Init+0x410>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a16      	ldr	r2, [pc, #88]	@ (8003fec <HAL_DMA_Init+0x414>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00e      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a15      	ldr	r2, [pc, #84]	@ (8003ff0 <HAL_DMA_Init+0x418>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a13      	ldr	r2, [pc, #76]	@ (8003ff4 <HAL_DMA_Init+0x41c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_DMA_Init+0x3dc>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a12      	ldr	r2, [pc, #72]	@ (8003ff8 <HAL_DMA_Init+0x420>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d123      	bne.n	8003ffc <HAL_DMA_Init+0x424>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e022      	b.n	8003ffe <HAL_DMA_Init+0x426>
 8003fb8:	fe10803f 	.word	0xfe10803f
 8003fbc:	48022c08 	.word	0x48022c08
 8003fc0:	48022c1c 	.word	0x48022c1c
 8003fc4:	48022c30 	.word	0x48022c30
 8003fc8:	48022c44 	.word	0x48022c44
 8003fcc:	48022c58 	.word	0x48022c58
 8003fd0:	48022c6c 	.word	0x48022c6c
 8003fd4:	48022c80 	.word	0x48022c80
 8003fd8:	48022c94 	.word	0x48022c94
 8003fdc:	58025408 	.word	0x58025408
 8003fe0:	5802541c 	.word	0x5802541c
 8003fe4:	58025430 	.word	0x58025430
 8003fe8:	58025444 	.word	0x58025444
 8003fec:	58025458 	.word	0x58025458
 8003ff0:	5802546c 	.word	0x5802546c
 8003ff4:	58025480 	.word	0x58025480
 8003ff8:	58025494 	.word	0x58025494
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d07d      	beq.n	80040fe <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a7f      	ldr	r2, [pc, #508]	@ (8004204 <HAL_DMA_Init+0x62c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d021      	beq.n	8004050 <HAL_DMA_Init+0x478>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a7d      	ldr	r2, [pc, #500]	@ (8004208 <HAL_DMA_Init+0x630>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01c      	beq.n	8004050 <HAL_DMA_Init+0x478>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a7c      	ldr	r2, [pc, #496]	@ (800420c <HAL_DMA_Init+0x634>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d017      	beq.n	8004050 <HAL_DMA_Init+0x478>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a7a      	ldr	r2, [pc, #488]	@ (8004210 <HAL_DMA_Init+0x638>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d012      	beq.n	8004050 <HAL_DMA_Init+0x478>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a79      	ldr	r2, [pc, #484]	@ (8004214 <HAL_DMA_Init+0x63c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00d      	beq.n	8004050 <HAL_DMA_Init+0x478>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a77      	ldr	r2, [pc, #476]	@ (8004218 <HAL_DMA_Init+0x640>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d008      	beq.n	8004050 <HAL_DMA_Init+0x478>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a76      	ldr	r2, [pc, #472]	@ (800421c <HAL_DMA_Init+0x644>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <HAL_DMA_Init+0x478>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a74      	ldr	r2, [pc, #464]	@ (8004220 <HAL_DMA_Init+0x648>)
 800404e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4b6e      	ldr	r3, [pc, #440]	@ (8004224 <HAL_DMA_Init+0x64c>)
 800406c:	4013      	ands	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b40      	cmp	r3, #64	@ 0x40
 8004076:	d008      	beq.n	800408a <HAL_DMA_Init+0x4b2>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b80      	cmp	r3, #128	@ 0x80
 800407e:	d102      	bne.n	8004086 <HAL_DMA_Init+0x4ae>
 8004080:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004084:	e002      	b.n	800408c <HAL_DMA_Init+0x4b4>
 8004086:	2300      	movs	r3, #0
 8004088:	e000      	b.n	800408c <HAL_DMA_Init+0x4b4>
 800408a:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	68d2      	ldr	r2, [r2, #12]
 8004090:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004092:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800409a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80040a2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80040aa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80040b2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80040ba:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	4b55      	ldr	r3, [pc, #340]	@ (8004228 <HAL_DMA_Init+0x650>)
 80040d2:	4413      	add	r3, r2
 80040d4:	4a55      	ldr	r2, [pc, #340]	@ (800422c <HAL_DMA_Init+0x654>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	009a      	lsls	r2, r3, #2
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f002 fa1a 	bl	800651c <DMA_CalcBaseAndBitshift>
 80040e8:	4603      	mov	r3, r0
 80040ea:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	2201      	movs	r2, #1
 80040f6:	409a      	lsls	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	605a      	str	r2, [r3, #4]
 80040fc:	e008      	b.n	8004110 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2240      	movs	r2, #64	@ 0x40
 8004102:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2203      	movs	r2, #3
 8004108:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0ed      	b.n	80042ec <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a46      	ldr	r2, [pc, #280]	@ (8004230 <HAL_DMA_Init+0x658>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d072      	beq.n	8004200 <HAL_DMA_Init+0x628>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a45      	ldr	r2, [pc, #276]	@ (8004234 <HAL_DMA_Init+0x65c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d06d      	beq.n	8004200 <HAL_DMA_Init+0x628>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a43      	ldr	r2, [pc, #268]	@ (8004238 <HAL_DMA_Init+0x660>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d068      	beq.n	8004200 <HAL_DMA_Init+0x628>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a42      	ldr	r2, [pc, #264]	@ (800423c <HAL_DMA_Init+0x664>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d063      	beq.n	8004200 <HAL_DMA_Init+0x628>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a40      	ldr	r2, [pc, #256]	@ (8004240 <HAL_DMA_Init+0x668>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d05e      	beq.n	8004200 <HAL_DMA_Init+0x628>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a3f      	ldr	r2, [pc, #252]	@ (8004244 <HAL_DMA_Init+0x66c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d059      	beq.n	8004200 <HAL_DMA_Init+0x628>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a3d      	ldr	r2, [pc, #244]	@ (8004248 <HAL_DMA_Init+0x670>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d054      	beq.n	8004200 <HAL_DMA_Init+0x628>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a3c      	ldr	r2, [pc, #240]	@ (800424c <HAL_DMA_Init+0x674>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d04f      	beq.n	8004200 <HAL_DMA_Init+0x628>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a3a      	ldr	r2, [pc, #232]	@ (8004250 <HAL_DMA_Init+0x678>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d04a      	beq.n	8004200 <HAL_DMA_Init+0x628>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a39      	ldr	r2, [pc, #228]	@ (8004254 <HAL_DMA_Init+0x67c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d045      	beq.n	8004200 <HAL_DMA_Init+0x628>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a37      	ldr	r2, [pc, #220]	@ (8004258 <HAL_DMA_Init+0x680>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d040      	beq.n	8004200 <HAL_DMA_Init+0x628>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a36      	ldr	r2, [pc, #216]	@ (800425c <HAL_DMA_Init+0x684>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d03b      	beq.n	8004200 <HAL_DMA_Init+0x628>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a34      	ldr	r2, [pc, #208]	@ (8004260 <HAL_DMA_Init+0x688>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d036      	beq.n	8004200 <HAL_DMA_Init+0x628>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a33      	ldr	r2, [pc, #204]	@ (8004264 <HAL_DMA_Init+0x68c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d031      	beq.n	8004200 <HAL_DMA_Init+0x628>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a31      	ldr	r2, [pc, #196]	@ (8004268 <HAL_DMA_Init+0x690>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d02c      	beq.n	8004200 <HAL_DMA_Init+0x628>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a30      	ldr	r2, [pc, #192]	@ (800426c <HAL_DMA_Init+0x694>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d027      	beq.n	8004200 <HAL_DMA_Init+0x628>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a13      	ldr	r2, [pc, #76]	@ (8004204 <HAL_DMA_Init+0x62c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d022      	beq.n	8004200 <HAL_DMA_Init+0x628>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <HAL_DMA_Init+0x630>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d01d      	beq.n	8004200 <HAL_DMA_Init+0x628>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a10      	ldr	r2, [pc, #64]	@ (800420c <HAL_DMA_Init+0x634>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d018      	beq.n	8004200 <HAL_DMA_Init+0x628>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004210 <HAL_DMA_Init+0x638>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d013      	beq.n	8004200 <HAL_DMA_Init+0x628>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004214 <HAL_DMA_Init+0x63c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00e      	beq.n	8004200 <HAL_DMA_Init+0x628>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a0c      	ldr	r2, [pc, #48]	@ (8004218 <HAL_DMA_Init+0x640>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d009      	beq.n	8004200 <HAL_DMA_Init+0x628>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0a      	ldr	r2, [pc, #40]	@ (800421c <HAL_DMA_Init+0x644>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d004      	beq.n	8004200 <HAL_DMA_Init+0x628>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a09      	ldr	r2, [pc, #36]	@ (8004220 <HAL_DMA_Init+0x648>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d137      	bne.n	8004270 <HAL_DMA_Init+0x698>
 8004200:	2301      	movs	r3, #1
 8004202:	e036      	b.n	8004272 <HAL_DMA_Init+0x69a>
 8004204:	58025408 	.word	0x58025408
 8004208:	5802541c 	.word	0x5802541c
 800420c:	58025430 	.word	0x58025430
 8004210:	58025444 	.word	0x58025444
 8004214:	58025458 	.word	0x58025458
 8004218:	5802546c 	.word	0x5802546c
 800421c:	58025480 	.word	0x58025480
 8004220:	58025494 	.word	0x58025494
 8004224:	fffe000f 	.word	0xfffe000f
 8004228:	a7fdabf8 	.word	0xa7fdabf8
 800422c:	cccccccd 	.word	0xcccccccd
 8004230:	40020010 	.word	0x40020010
 8004234:	40020028 	.word	0x40020028
 8004238:	40020040 	.word	0x40020040
 800423c:	40020058 	.word	0x40020058
 8004240:	40020070 	.word	0x40020070
 8004244:	40020088 	.word	0x40020088
 8004248:	400200a0 	.word	0x400200a0
 800424c:	400200b8 	.word	0x400200b8
 8004250:	40020410 	.word	0x40020410
 8004254:	40020428 	.word	0x40020428
 8004258:	40020440 	.word	0x40020440
 800425c:	40020458 	.word	0x40020458
 8004260:	40020470 	.word	0x40020470
 8004264:	40020488 	.word	0x40020488
 8004268:	400204a0 	.word	0x400204a0
 800426c:	400204b8 	.word	0x400204b8
 8004270:	2300      	movs	r3, #0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d032      	beq.n	80042dc <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f002 fa7e 	bl	8006778 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b80      	cmp	r3, #128	@ 0x80
 8004282:	d102      	bne.n	800428a <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800429e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d010      	beq.n	80042ca <HAL_DMA_Init+0x6f2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d80c      	bhi.n	80042ca <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f002 fafb 	bl	80068ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	e008      	b.n	80042dc <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e226      	b.n	800475e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_DMA_Start_IT+0x2a>
 800431a:	2302      	movs	r3, #2
 800431c:	e21f      	b.n	800475e <HAL_DMA_Start_IT+0x46a>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b01      	cmp	r3, #1
 8004330:	f040 820a 	bne.w	8004748 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a68      	ldr	r2, [pc, #416]	@ (80044e8 <HAL_DMA_Start_IT+0x1f4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d04a      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a66      	ldr	r2, [pc, #408]	@ (80044ec <HAL_DMA_Start_IT+0x1f8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d045      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a65      	ldr	r2, [pc, #404]	@ (80044f0 <HAL_DMA_Start_IT+0x1fc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d040      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a63      	ldr	r2, [pc, #396]	@ (80044f4 <HAL_DMA_Start_IT+0x200>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d03b      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a62      	ldr	r2, [pc, #392]	@ (80044f8 <HAL_DMA_Start_IT+0x204>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d036      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a60      	ldr	r2, [pc, #384]	@ (80044fc <HAL_DMA_Start_IT+0x208>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d031      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a5f      	ldr	r2, [pc, #380]	@ (8004500 <HAL_DMA_Start_IT+0x20c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d02c      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a5d      	ldr	r2, [pc, #372]	@ (8004504 <HAL_DMA_Start_IT+0x210>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d027      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a5c      	ldr	r2, [pc, #368]	@ (8004508 <HAL_DMA_Start_IT+0x214>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a5a      	ldr	r2, [pc, #360]	@ (800450c <HAL_DMA_Start_IT+0x218>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01d      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a59      	ldr	r2, [pc, #356]	@ (8004510 <HAL_DMA_Start_IT+0x21c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a57      	ldr	r2, [pc, #348]	@ (8004514 <HAL_DMA_Start_IT+0x220>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a56      	ldr	r2, [pc, #344]	@ (8004518 <HAL_DMA_Start_IT+0x224>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a54      	ldr	r2, [pc, #336]	@ (800451c <HAL_DMA_Start_IT+0x228>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a53      	ldr	r2, [pc, #332]	@ (8004520 <HAL_DMA_Start_IT+0x22c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_DMA_Start_IT+0xee>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a51      	ldr	r2, [pc, #324]	@ (8004524 <HAL_DMA_Start_IT+0x230>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d108      	bne.n	80043f4 <HAL_DMA_Start_IT+0x100>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0201 	bic.w	r2, r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e007      	b.n	8004404 <HAL_DMA_Start_IT+0x110>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0201 	bic.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f001 fea2 	bl	8006154 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a34      	ldr	r2, [pc, #208]	@ (80044e8 <HAL_DMA_Start_IT+0x1f4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d04a      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a33      	ldr	r2, [pc, #204]	@ (80044ec <HAL_DMA_Start_IT+0x1f8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d045      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a31      	ldr	r2, [pc, #196]	@ (80044f0 <HAL_DMA_Start_IT+0x1fc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d040      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a30      	ldr	r2, [pc, #192]	@ (80044f4 <HAL_DMA_Start_IT+0x200>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d03b      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2e      	ldr	r2, [pc, #184]	@ (80044f8 <HAL_DMA_Start_IT+0x204>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d036      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2d      	ldr	r2, [pc, #180]	@ (80044fc <HAL_DMA_Start_IT+0x208>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d031      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2b      	ldr	r2, [pc, #172]	@ (8004500 <HAL_DMA_Start_IT+0x20c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d02c      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a2a      	ldr	r2, [pc, #168]	@ (8004504 <HAL_DMA_Start_IT+0x210>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d027      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a28      	ldr	r2, [pc, #160]	@ (8004508 <HAL_DMA_Start_IT+0x214>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a27      	ldr	r2, [pc, #156]	@ (800450c <HAL_DMA_Start_IT+0x218>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d01d      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a25      	ldr	r2, [pc, #148]	@ (8004510 <HAL_DMA_Start_IT+0x21c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a24      	ldr	r2, [pc, #144]	@ (8004514 <HAL_DMA_Start_IT+0x220>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a22      	ldr	r2, [pc, #136]	@ (8004518 <HAL_DMA_Start_IT+0x224>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a21      	ldr	r2, [pc, #132]	@ (800451c <HAL_DMA_Start_IT+0x228>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004520 <HAL_DMA_Start_IT+0x22c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_DMA_Start_IT+0x1bc>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004524 <HAL_DMA_Start_IT+0x230>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d101      	bne.n	80044b4 <HAL_DMA_Start_IT+0x1c0>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_DMA_Start_IT+0x1c2>
 80044b4:	2300      	movs	r3, #0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d036      	beq.n	8004528 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 021e 	bic.w	r2, r3, #30
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0216 	orr.w	r2, r2, #22
 80044cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d03e      	beq.n	8004554 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0208 	orr.w	r2, r2, #8
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	e035      	b.n	8004554 <HAL_DMA_Start_IT+0x260>
 80044e8:	40020010 	.word	0x40020010
 80044ec:	40020028 	.word	0x40020028
 80044f0:	40020040 	.word	0x40020040
 80044f4:	40020058 	.word	0x40020058
 80044f8:	40020070 	.word	0x40020070
 80044fc:	40020088 	.word	0x40020088
 8004500:	400200a0 	.word	0x400200a0
 8004504:	400200b8 	.word	0x400200b8
 8004508:	40020410 	.word	0x40020410
 800450c:	40020428 	.word	0x40020428
 8004510:	40020440 	.word	0x40020440
 8004514:	40020458 	.word	0x40020458
 8004518:	40020470 	.word	0x40020470
 800451c:	40020488 	.word	0x40020488
 8004520:	400204a0 	.word	0x400204a0
 8004524:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f023 020e 	bic.w	r2, r3, #14
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 020a 	orr.w	r2, r2, #10
 800453a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0204 	orr.w	r2, r2, #4
 8004552:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a83      	ldr	r2, [pc, #524]	@ (8004768 <HAL_DMA_Start_IT+0x474>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d072      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a82      	ldr	r2, [pc, #520]	@ (800476c <HAL_DMA_Start_IT+0x478>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d06d      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a80      	ldr	r2, [pc, #512]	@ (8004770 <HAL_DMA_Start_IT+0x47c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d068      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a7f      	ldr	r2, [pc, #508]	@ (8004774 <HAL_DMA_Start_IT+0x480>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d063      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a7d      	ldr	r2, [pc, #500]	@ (8004778 <HAL_DMA_Start_IT+0x484>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d05e      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a7c      	ldr	r2, [pc, #496]	@ (800477c <HAL_DMA_Start_IT+0x488>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d059      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a7a      	ldr	r2, [pc, #488]	@ (8004780 <HAL_DMA_Start_IT+0x48c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d054      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a79      	ldr	r2, [pc, #484]	@ (8004784 <HAL_DMA_Start_IT+0x490>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d04f      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a77      	ldr	r2, [pc, #476]	@ (8004788 <HAL_DMA_Start_IT+0x494>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d04a      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a76      	ldr	r2, [pc, #472]	@ (800478c <HAL_DMA_Start_IT+0x498>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d045      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a74      	ldr	r2, [pc, #464]	@ (8004790 <HAL_DMA_Start_IT+0x49c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d040      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a73      	ldr	r2, [pc, #460]	@ (8004794 <HAL_DMA_Start_IT+0x4a0>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d03b      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a71      	ldr	r2, [pc, #452]	@ (8004798 <HAL_DMA_Start_IT+0x4a4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d036      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a70      	ldr	r2, [pc, #448]	@ (800479c <HAL_DMA_Start_IT+0x4a8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d031      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a6e      	ldr	r2, [pc, #440]	@ (80047a0 <HAL_DMA_Start_IT+0x4ac>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d02c      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a6d      	ldr	r2, [pc, #436]	@ (80047a4 <HAL_DMA_Start_IT+0x4b0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d027      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a6b      	ldr	r2, [pc, #428]	@ (80047a8 <HAL_DMA_Start_IT+0x4b4>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d022      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6a      	ldr	r2, [pc, #424]	@ (80047ac <HAL_DMA_Start_IT+0x4b8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d01d      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a68      	ldr	r2, [pc, #416]	@ (80047b0 <HAL_DMA_Start_IT+0x4bc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d018      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a67      	ldr	r2, [pc, #412]	@ (80047b4 <HAL_DMA_Start_IT+0x4c0>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d013      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a65      	ldr	r2, [pc, #404]	@ (80047b8 <HAL_DMA_Start_IT+0x4c4>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d00e      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a64      	ldr	r2, [pc, #400]	@ (80047bc <HAL_DMA_Start_IT+0x4c8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d009      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a62      	ldr	r2, [pc, #392]	@ (80047c0 <HAL_DMA_Start_IT+0x4cc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_DMA_Start_IT+0x350>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a61      	ldr	r2, [pc, #388]	@ (80047c4 <HAL_DMA_Start_IT+0x4d0>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_DMA_Start_IT+0x354>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_DMA_Start_IT+0x356>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01a      	beq.n	8004684 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800466a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d007      	beq.n	8004684 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800467e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004682:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a37      	ldr	r2, [pc, #220]	@ (8004768 <HAL_DMA_Start_IT+0x474>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d04a      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a36      	ldr	r2, [pc, #216]	@ (800476c <HAL_DMA_Start_IT+0x478>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d045      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a34      	ldr	r2, [pc, #208]	@ (8004770 <HAL_DMA_Start_IT+0x47c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d040      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a33      	ldr	r2, [pc, #204]	@ (8004774 <HAL_DMA_Start_IT+0x480>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d03b      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a31      	ldr	r2, [pc, #196]	@ (8004778 <HAL_DMA_Start_IT+0x484>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d036      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a30      	ldr	r2, [pc, #192]	@ (800477c <HAL_DMA_Start_IT+0x488>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d031      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004780 <HAL_DMA_Start_IT+0x48c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d02c      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004784 <HAL_DMA_Start_IT+0x490>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d027      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004788 <HAL_DMA_Start_IT+0x494>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a2a      	ldr	r2, [pc, #168]	@ (800478c <HAL_DMA_Start_IT+0x498>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d01d      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a28      	ldr	r2, [pc, #160]	@ (8004790 <HAL_DMA_Start_IT+0x49c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a27      	ldr	r2, [pc, #156]	@ (8004794 <HAL_DMA_Start_IT+0x4a0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a25      	ldr	r2, [pc, #148]	@ (8004798 <HAL_DMA_Start_IT+0x4a4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a24      	ldr	r2, [pc, #144]	@ (800479c <HAL_DMA_Start_IT+0x4a8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a22      	ldr	r2, [pc, #136]	@ (80047a0 <HAL_DMA_Start_IT+0x4ac>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_DMA_Start_IT+0x430>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a21      	ldr	r2, [pc, #132]	@ (80047a4 <HAL_DMA_Start_IT+0x4b0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d108      	bne.n	8004736 <HAL_DMA_Start_IT+0x442>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e012      	b.n	800475c <HAL_DMA_Start_IT+0x468>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	e009      	b.n	800475c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800474e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800475c:	7dfb      	ldrb	r3, [r7, #23]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3718      	adds	r7, #24
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	40020010 	.word	0x40020010
 800476c:	40020028 	.word	0x40020028
 8004770:	40020040 	.word	0x40020040
 8004774:	40020058 	.word	0x40020058
 8004778:	40020070 	.word	0x40020070
 800477c:	40020088 	.word	0x40020088
 8004780:	400200a0 	.word	0x400200a0
 8004784:	400200b8 	.word	0x400200b8
 8004788:	40020410 	.word	0x40020410
 800478c:	40020428 	.word	0x40020428
 8004790:	40020440 	.word	0x40020440
 8004794:	40020458 	.word	0x40020458
 8004798:	40020470 	.word	0x40020470
 800479c:	40020488 	.word	0x40020488
 80047a0:	400204a0 	.word	0x400204a0
 80047a4:	400204b8 	.word	0x400204b8
 80047a8:	58025408 	.word	0x58025408
 80047ac:	5802541c 	.word	0x5802541c
 80047b0:	58025430 	.word	0x58025430
 80047b4:	58025444 	.word	0x58025444
 80047b8:	58025458 	.word	0x58025458
 80047bc:	5802546c 	.word	0x5802546c
 80047c0:	58025480 	.word	0x58025480
 80047c4:	58025494 	.word	0x58025494

080047c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80047d0:	f7fd fb88 	bl	8001ee4 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e2dc      	b.n	8004d9a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d008      	beq.n	80047fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2280      	movs	r2, #128	@ 0x80
 80047f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e2cd      	b.n	8004d9a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a76      	ldr	r2, [pc, #472]	@ (80049dc <HAL_DMA_Abort+0x214>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d04a      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a74      	ldr	r2, [pc, #464]	@ (80049e0 <HAL_DMA_Abort+0x218>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d045      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a73      	ldr	r2, [pc, #460]	@ (80049e4 <HAL_DMA_Abort+0x21c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d040      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a71      	ldr	r2, [pc, #452]	@ (80049e8 <HAL_DMA_Abort+0x220>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d03b      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a70      	ldr	r2, [pc, #448]	@ (80049ec <HAL_DMA_Abort+0x224>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d036      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a6e      	ldr	r2, [pc, #440]	@ (80049f0 <HAL_DMA_Abort+0x228>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d031      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a6d      	ldr	r2, [pc, #436]	@ (80049f4 <HAL_DMA_Abort+0x22c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d02c      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6b      	ldr	r2, [pc, #428]	@ (80049f8 <HAL_DMA_Abort+0x230>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d027      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a6a      	ldr	r2, [pc, #424]	@ (80049fc <HAL_DMA_Abort+0x234>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d022      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a68      	ldr	r2, [pc, #416]	@ (8004a00 <HAL_DMA_Abort+0x238>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d01d      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a67      	ldr	r2, [pc, #412]	@ (8004a04 <HAL_DMA_Abort+0x23c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d018      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a65      	ldr	r2, [pc, #404]	@ (8004a08 <HAL_DMA_Abort+0x240>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a64      	ldr	r2, [pc, #400]	@ (8004a0c <HAL_DMA_Abort+0x244>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a62      	ldr	r2, [pc, #392]	@ (8004a10 <HAL_DMA_Abort+0x248>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d009      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a61      	ldr	r2, [pc, #388]	@ (8004a14 <HAL_DMA_Abort+0x24c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_DMA_Abort+0xd6>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a5f      	ldr	r2, [pc, #380]	@ (8004a18 <HAL_DMA_Abort+0x250>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_DMA_Abort+0xda>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <HAL_DMA_Abort+0xdc>
 80048a2:	2300      	movs	r3, #0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d013      	beq.n	80048d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 021e 	bic.w	r2, r2, #30
 80048b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	617b      	str	r3, [r7, #20]
 80048ce:	e00a      	b.n	80048e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f022 020e 	bic.w	r2, r2, #14
 80048de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a3c      	ldr	r2, [pc, #240]	@ (80049dc <HAL_DMA_Abort+0x214>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d072      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	@ (80049e0 <HAL_DMA_Abort+0x218>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d06d      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a39      	ldr	r2, [pc, #228]	@ (80049e4 <HAL_DMA_Abort+0x21c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d068      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a37      	ldr	r2, [pc, #220]	@ (80049e8 <HAL_DMA_Abort+0x220>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d063      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a36      	ldr	r2, [pc, #216]	@ (80049ec <HAL_DMA_Abort+0x224>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d05e      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a34      	ldr	r2, [pc, #208]	@ (80049f0 <HAL_DMA_Abort+0x228>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d059      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a33      	ldr	r2, [pc, #204]	@ (80049f4 <HAL_DMA_Abort+0x22c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d054      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a31      	ldr	r2, [pc, #196]	@ (80049f8 <HAL_DMA_Abort+0x230>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d04f      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a30      	ldr	r2, [pc, #192]	@ (80049fc <HAL_DMA_Abort+0x234>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d04a      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a2e      	ldr	r2, [pc, #184]	@ (8004a00 <HAL_DMA_Abort+0x238>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d045      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a2d      	ldr	r2, [pc, #180]	@ (8004a04 <HAL_DMA_Abort+0x23c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d040      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2b      	ldr	r2, [pc, #172]	@ (8004a08 <HAL_DMA_Abort+0x240>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d03b      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2a      	ldr	r2, [pc, #168]	@ (8004a0c <HAL_DMA_Abort+0x244>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d036      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a28      	ldr	r2, [pc, #160]	@ (8004a10 <HAL_DMA_Abort+0x248>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d031      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a27      	ldr	r2, [pc, #156]	@ (8004a14 <HAL_DMA_Abort+0x24c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d02c      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a25      	ldr	r2, [pc, #148]	@ (8004a18 <HAL_DMA_Abort+0x250>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d027      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a24      	ldr	r2, [pc, #144]	@ (8004a1c <HAL_DMA_Abort+0x254>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d022      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a22      	ldr	r2, [pc, #136]	@ (8004a20 <HAL_DMA_Abort+0x258>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d01d      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a21      	ldr	r2, [pc, #132]	@ (8004a24 <HAL_DMA_Abort+0x25c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d018      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <HAL_DMA_Abort+0x260>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d013      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a2c <HAL_DMA_Abort+0x264>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00e      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004a30 <HAL_DMA_Abort+0x268>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d009      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004a34 <HAL_DMA_Abort+0x26c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d004      	beq.n	80049d6 <HAL_DMA_Abort+0x20e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a19      	ldr	r2, [pc, #100]	@ (8004a38 <HAL_DMA_Abort+0x270>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d132      	bne.n	8004a3c <HAL_DMA_Abort+0x274>
 80049d6:	2301      	movs	r3, #1
 80049d8:	e031      	b.n	8004a3e <HAL_DMA_Abort+0x276>
 80049da:	bf00      	nop
 80049dc:	40020010 	.word	0x40020010
 80049e0:	40020028 	.word	0x40020028
 80049e4:	40020040 	.word	0x40020040
 80049e8:	40020058 	.word	0x40020058
 80049ec:	40020070 	.word	0x40020070
 80049f0:	40020088 	.word	0x40020088
 80049f4:	400200a0 	.word	0x400200a0
 80049f8:	400200b8 	.word	0x400200b8
 80049fc:	40020410 	.word	0x40020410
 8004a00:	40020428 	.word	0x40020428
 8004a04:	40020440 	.word	0x40020440
 8004a08:	40020458 	.word	0x40020458
 8004a0c:	40020470 	.word	0x40020470
 8004a10:	40020488 	.word	0x40020488
 8004a14:	400204a0 	.word	0x400204a0
 8004a18:	400204b8 	.word	0x400204b8
 8004a1c:	58025408 	.word	0x58025408
 8004a20:	5802541c 	.word	0x5802541c
 8004a24:	58025430 	.word	0x58025430
 8004a28:	58025444 	.word	0x58025444
 8004a2c:	58025458 	.word	0x58025458
 8004a30:	5802546c 	.word	0x5802546c
 8004a34:	58025480 	.word	0x58025480
 8004a38:	58025494 	.word	0x58025494
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a50:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6d      	ldr	r2, [pc, #436]	@ (8004c0c <HAL_DMA_Abort+0x444>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d04a      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a6b      	ldr	r2, [pc, #428]	@ (8004c10 <HAL_DMA_Abort+0x448>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d045      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6a      	ldr	r2, [pc, #424]	@ (8004c14 <HAL_DMA_Abort+0x44c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d040      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a68      	ldr	r2, [pc, #416]	@ (8004c18 <HAL_DMA_Abort+0x450>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d03b      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a67      	ldr	r2, [pc, #412]	@ (8004c1c <HAL_DMA_Abort+0x454>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d036      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a65      	ldr	r2, [pc, #404]	@ (8004c20 <HAL_DMA_Abort+0x458>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d031      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a64      	ldr	r2, [pc, #400]	@ (8004c24 <HAL_DMA_Abort+0x45c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d02c      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a62      	ldr	r2, [pc, #392]	@ (8004c28 <HAL_DMA_Abort+0x460>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d027      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a61      	ldr	r2, [pc, #388]	@ (8004c2c <HAL_DMA_Abort+0x464>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d022      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5f      	ldr	r2, [pc, #380]	@ (8004c30 <HAL_DMA_Abort+0x468>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a5e      	ldr	r2, [pc, #376]	@ (8004c34 <HAL_DMA_Abort+0x46c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d018      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a5c      	ldr	r2, [pc, #368]	@ (8004c38 <HAL_DMA_Abort+0x470>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a5b      	ldr	r2, [pc, #364]	@ (8004c3c <HAL_DMA_Abort+0x474>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a59      	ldr	r2, [pc, #356]	@ (8004c40 <HAL_DMA_Abort+0x478>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a58      	ldr	r2, [pc, #352]	@ (8004c44 <HAL_DMA_Abort+0x47c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_DMA_Abort+0x32a>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a56      	ldr	r2, [pc, #344]	@ (8004c48 <HAL_DMA_Abort+0x480>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d108      	bne.n	8004b04 <HAL_DMA_Abort+0x33c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0201 	bic.w	r2, r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	e007      	b.n	8004b14 <HAL_DMA_Abort+0x34c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b14:	e013      	b.n	8004b3e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b16:	f7fd f9e5 	bl	8001ee4 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b05      	cmp	r3, #5
 8004b22:	d90c      	bls.n	8004b3e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e12d      	b.n	8004d9a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e5      	bne.n	8004b16 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c0c <HAL_DMA_Abort+0x444>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d04a      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a2d      	ldr	r2, [pc, #180]	@ (8004c10 <HAL_DMA_Abort+0x448>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d045      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a2c      	ldr	r2, [pc, #176]	@ (8004c14 <HAL_DMA_Abort+0x44c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d040      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	@ (8004c18 <HAL_DMA_Abort+0x450>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a29      	ldr	r2, [pc, #164]	@ (8004c1c <HAL_DMA_Abort+0x454>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d036      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a27      	ldr	r2, [pc, #156]	@ (8004c20 <HAL_DMA_Abort+0x458>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d031      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a26      	ldr	r2, [pc, #152]	@ (8004c24 <HAL_DMA_Abort+0x45c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d02c      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a24      	ldr	r2, [pc, #144]	@ (8004c28 <HAL_DMA_Abort+0x460>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d027      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a23      	ldr	r2, [pc, #140]	@ (8004c2c <HAL_DMA_Abort+0x464>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a21      	ldr	r2, [pc, #132]	@ (8004c30 <HAL_DMA_Abort+0x468>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a20      	ldr	r2, [pc, #128]	@ (8004c34 <HAL_DMA_Abort+0x46c>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1e      	ldr	r2, [pc, #120]	@ (8004c38 <HAL_DMA_Abort+0x470>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c3c <HAL_DMA_Abort+0x474>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c40 <HAL_DMA_Abort+0x478>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1a      	ldr	r2, [pc, #104]	@ (8004c44 <HAL_DMA_Abort+0x47c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_Abort+0x422>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a18      	ldr	r2, [pc, #96]	@ (8004c48 <HAL_DMA_Abort+0x480>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d101      	bne.n	8004bee <HAL_DMA_Abort+0x426>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <HAL_DMA_Abort+0x428>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02b      	beq.n	8004c4c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bfe:	f003 031f 	and.w	r3, r3, #31
 8004c02:	223f      	movs	r2, #63	@ 0x3f
 8004c04:	409a      	lsls	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	609a      	str	r2, [r3, #8]
 8004c0a:	e02a      	b.n	8004c62 <HAL_DMA_Abort+0x49a>
 8004c0c:	40020010 	.word	0x40020010
 8004c10:	40020028 	.word	0x40020028
 8004c14:	40020040 	.word	0x40020040
 8004c18:	40020058 	.word	0x40020058
 8004c1c:	40020070 	.word	0x40020070
 8004c20:	40020088 	.word	0x40020088
 8004c24:	400200a0 	.word	0x400200a0
 8004c28:	400200b8 	.word	0x400200b8
 8004c2c:	40020410 	.word	0x40020410
 8004c30:	40020428 	.word	0x40020428
 8004c34:	40020440 	.word	0x40020440
 8004c38:	40020458 	.word	0x40020458
 8004c3c:	40020470 	.word	0x40020470
 8004c40:	40020488 	.word	0x40020488
 8004c44:	400204a0 	.word	0x400204a0
 8004c48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c50:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a4f      	ldr	r2, [pc, #316]	@ (8004da4 <HAL_DMA_Abort+0x5dc>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d072      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a4d      	ldr	r2, [pc, #308]	@ (8004da8 <HAL_DMA_Abort+0x5e0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d06d      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a4c      	ldr	r2, [pc, #304]	@ (8004dac <HAL_DMA_Abort+0x5e4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d068      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a4a      	ldr	r2, [pc, #296]	@ (8004db0 <HAL_DMA_Abort+0x5e8>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d063      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a49      	ldr	r2, [pc, #292]	@ (8004db4 <HAL_DMA_Abort+0x5ec>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d05e      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a47      	ldr	r2, [pc, #284]	@ (8004db8 <HAL_DMA_Abort+0x5f0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d059      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a46      	ldr	r2, [pc, #280]	@ (8004dbc <HAL_DMA_Abort+0x5f4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d054      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a44      	ldr	r2, [pc, #272]	@ (8004dc0 <HAL_DMA_Abort+0x5f8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d04f      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a43      	ldr	r2, [pc, #268]	@ (8004dc4 <HAL_DMA_Abort+0x5fc>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d04a      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a41      	ldr	r2, [pc, #260]	@ (8004dc8 <HAL_DMA_Abort+0x600>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d045      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a40      	ldr	r2, [pc, #256]	@ (8004dcc <HAL_DMA_Abort+0x604>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d040      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a3e      	ldr	r2, [pc, #248]	@ (8004dd0 <HAL_DMA_Abort+0x608>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d03b      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a3d      	ldr	r2, [pc, #244]	@ (8004dd4 <HAL_DMA_Abort+0x60c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d036      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a3b      	ldr	r2, [pc, #236]	@ (8004dd8 <HAL_DMA_Abort+0x610>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d031      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a3a      	ldr	r2, [pc, #232]	@ (8004ddc <HAL_DMA_Abort+0x614>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d02c      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a38      	ldr	r2, [pc, #224]	@ (8004de0 <HAL_DMA_Abort+0x618>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d027      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a37      	ldr	r2, [pc, #220]	@ (8004de4 <HAL_DMA_Abort+0x61c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d022      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a35      	ldr	r2, [pc, #212]	@ (8004de8 <HAL_DMA_Abort+0x620>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01d      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a34      	ldr	r2, [pc, #208]	@ (8004dec <HAL_DMA_Abort+0x624>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d018      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a32      	ldr	r2, [pc, #200]	@ (8004df0 <HAL_DMA_Abort+0x628>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a31      	ldr	r2, [pc, #196]	@ (8004df4 <HAL_DMA_Abort+0x62c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a2f      	ldr	r2, [pc, #188]	@ (8004df8 <HAL_DMA_Abort+0x630>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a2e      	ldr	r2, [pc, #184]	@ (8004dfc <HAL_DMA_Abort+0x634>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_DMA_Abort+0x58a>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8004e00 <HAL_DMA_Abort+0x638>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d101      	bne.n	8004d56 <HAL_DMA_Abort+0x58e>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <HAL_DMA_Abort+0x590>
 8004d56:	2300      	movs	r3, #0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d015      	beq.n	8004d88 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d64:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d86:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	40020010 	.word	0x40020010
 8004da8:	40020028 	.word	0x40020028
 8004dac:	40020040 	.word	0x40020040
 8004db0:	40020058 	.word	0x40020058
 8004db4:	40020070 	.word	0x40020070
 8004db8:	40020088 	.word	0x40020088
 8004dbc:	400200a0 	.word	0x400200a0
 8004dc0:	400200b8 	.word	0x400200b8
 8004dc4:	40020410 	.word	0x40020410
 8004dc8:	40020428 	.word	0x40020428
 8004dcc:	40020440 	.word	0x40020440
 8004dd0:	40020458 	.word	0x40020458
 8004dd4:	40020470 	.word	0x40020470
 8004dd8:	40020488 	.word	0x40020488
 8004ddc:	400204a0 	.word	0x400204a0
 8004de0:	400204b8 	.word	0x400204b8
 8004de4:	58025408 	.word	0x58025408
 8004de8:	5802541c 	.word	0x5802541c
 8004dec:	58025430 	.word	0x58025430
 8004df0:	58025444 	.word	0x58025444
 8004df4:	58025458 	.word	0x58025458
 8004df8:	5802546c 	.word	0x5802546c
 8004dfc:	58025480 	.word	0x58025480
 8004e00:	58025494 	.word	0x58025494

08004e04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d101      	bne.n	8004e16 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e237      	b.n	8005286 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d004      	beq.n	8004e2c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2280      	movs	r2, #128	@ 0x80
 8004e26:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e22c      	b.n	8005286 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a5c      	ldr	r2, [pc, #368]	@ (8004fa4 <HAL_DMA_Abort_IT+0x1a0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d04a      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fa8 <HAL_DMA_Abort_IT+0x1a4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d045      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a59      	ldr	r2, [pc, #356]	@ (8004fac <HAL_DMA_Abort_IT+0x1a8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d040      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a58      	ldr	r2, [pc, #352]	@ (8004fb0 <HAL_DMA_Abort_IT+0x1ac>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d03b      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a56      	ldr	r2, [pc, #344]	@ (8004fb4 <HAL_DMA_Abort_IT+0x1b0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d036      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a55      	ldr	r2, [pc, #340]	@ (8004fb8 <HAL_DMA_Abort_IT+0x1b4>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d031      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a53      	ldr	r2, [pc, #332]	@ (8004fbc <HAL_DMA_Abort_IT+0x1b8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d02c      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a52      	ldr	r2, [pc, #328]	@ (8004fc0 <HAL_DMA_Abort_IT+0x1bc>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d027      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a50      	ldr	r2, [pc, #320]	@ (8004fc4 <HAL_DMA_Abort_IT+0x1c0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a4f      	ldr	r2, [pc, #316]	@ (8004fc8 <HAL_DMA_Abort_IT+0x1c4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01d      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a4d      	ldr	r2, [pc, #308]	@ (8004fcc <HAL_DMA_Abort_IT+0x1c8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a4c      	ldr	r2, [pc, #304]	@ (8004fd0 <HAL_DMA_Abort_IT+0x1cc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8004fd4 <HAL_DMA_Abort_IT+0x1d0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a49      	ldr	r2, [pc, #292]	@ (8004fd8 <HAL_DMA_Abort_IT+0x1d4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a47      	ldr	r2, [pc, #284]	@ (8004fdc <HAL_DMA_Abort_IT+0x1d8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_DMA_Abort_IT+0xc8>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a46      	ldr	r2, [pc, #280]	@ (8004fe0 <HAL_DMA_Abort_IT+0x1dc>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <HAL_DMA_Abort_IT+0xcc>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <HAL_DMA_Abort_IT+0xce>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8086 	beq.w	8004fe4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2204      	movs	r2, #4
 8004edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa4 <HAL_DMA_Abort_IT+0x1a0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d04a      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa8 <HAL_DMA_Abort_IT+0x1a4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d045      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8004fac <HAL_DMA_Abort_IT+0x1a8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d040      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb0 <HAL_DMA_Abort_IT+0x1ac>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d03b      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a29      	ldr	r2, [pc, #164]	@ (8004fb4 <HAL_DMA_Abort_IT+0x1b0>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d036      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a28      	ldr	r2, [pc, #160]	@ (8004fb8 <HAL_DMA_Abort_IT+0x1b4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d031      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a26      	ldr	r2, [pc, #152]	@ (8004fbc <HAL_DMA_Abort_IT+0x1b8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d02c      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a25      	ldr	r2, [pc, #148]	@ (8004fc0 <HAL_DMA_Abort_IT+0x1bc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d027      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a23      	ldr	r2, [pc, #140]	@ (8004fc4 <HAL_DMA_Abort_IT+0x1c0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d022      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a22      	ldr	r2, [pc, #136]	@ (8004fc8 <HAL_DMA_Abort_IT+0x1c4>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d01d      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a20      	ldr	r2, [pc, #128]	@ (8004fcc <HAL_DMA_Abort_IT+0x1c8>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d018      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd0 <HAL_DMA_Abort_IT+0x1cc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd4 <HAL_DMA_Abort_IT+0x1d0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00e      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1c      	ldr	r2, [pc, #112]	@ (8004fd8 <HAL_DMA_Abort_IT+0x1d4>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d009      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1a      	ldr	r2, [pc, #104]	@ (8004fdc <HAL_DMA_Abort_IT+0x1d8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x17c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <HAL_DMA_Abort_IT+0x1dc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d108      	bne.n	8004f92 <HAL_DMA_Abort_IT+0x18e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	e178      	b.n	8005284 <HAL_DMA_Abort_IT+0x480>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0201 	bic.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e16f      	b.n	8005284 <HAL_DMA_Abort_IT+0x480>
 8004fa4:	40020010 	.word	0x40020010
 8004fa8:	40020028 	.word	0x40020028
 8004fac:	40020040 	.word	0x40020040
 8004fb0:	40020058 	.word	0x40020058
 8004fb4:	40020070 	.word	0x40020070
 8004fb8:	40020088 	.word	0x40020088
 8004fbc:	400200a0 	.word	0x400200a0
 8004fc0:	400200b8 	.word	0x400200b8
 8004fc4:	40020410 	.word	0x40020410
 8004fc8:	40020428 	.word	0x40020428
 8004fcc:	40020440 	.word	0x40020440
 8004fd0:	40020458 	.word	0x40020458
 8004fd4:	40020470 	.word	0x40020470
 8004fd8:	40020488 	.word	0x40020488
 8004fdc:	400204a0 	.word	0x400204a0
 8004fe0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f022 020e 	bic.w	r2, r2, #14
 8004ff2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a6c      	ldr	r2, [pc, #432]	@ (80051ac <HAL_DMA_Abort_IT+0x3a8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d04a      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a6b      	ldr	r2, [pc, #428]	@ (80051b0 <HAL_DMA_Abort_IT+0x3ac>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d045      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a69      	ldr	r2, [pc, #420]	@ (80051b4 <HAL_DMA_Abort_IT+0x3b0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d040      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a68      	ldr	r2, [pc, #416]	@ (80051b8 <HAL_DMA_Abort_IT+0x3b4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d03b      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a66      	ldr	r2, [pc, #408]	@ (80051bc <HAL_DMA_Abort_IT+0x3b8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d036      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a65      	ldr	r2, [pc, #404]	@ (80051c0 <HAL_DMA_Abort_IT+0x3bc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d031      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a63      	ldr	r2, [pc, #396]	@ (80051c4 <HAL_DMA_Abort_IT+0x3c0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d02c      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a62      	ldr	r2, [pc, #392]	@ (80051c8 <HAL_DMA_Abort_IT+0x3c4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d027      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a60      	ldr	r2, [pc, #384]	@ (80051cc <HAL_DMA_Abort_IT+0x3c8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d022      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a5f      	ldr	r2, [pc, #380]	@ (80051d0 <HAL_DMA_Abort_IT+0x3cc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d01d      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a5d      	ldr	r2, [pc, #372]	@ (80051d4 <HAL_DMA_Abort_IT+0x3d0>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d018      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a5c      	ldr	r2, [pc, #368]	@ (80051d8 <HAL_DMA_Abort_IT+0x3d4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d013      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a5a      	ldr	r2, [pc, #360]	@ (80051dc <HAL_DMA_Abort_IT+0x3d8>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00e      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a59      	ldr	r2, [pc, #356]	@ (80051e0 <HAL_DMA_Abort_IT+0x3dc>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d009      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a57      	ldr	r2, [pc, #348]	@ (80051e4 <HAL_DMA_Abort_IT+0x3e0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_DMA_Abort_IT+0x290>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a56      	ldr	r2, [pc, #344]	@ (80051e8 <HAL_DMA_Abort_IT+0x3e4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d108      	bne.n	80050a6 <HAL_DMA_Abort_IT+0x2a2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0201 	bic.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	e007      	b.n	80050b6 <HAL_DMA_Abort_IT+0x2b2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a3c      	ldr	r2, [pc, #240]	@ (80051ac <HAL_DMA_Abort_IT+0x3a8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d072      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a3a      	ldr	r2, [pc, #232]	@ (80051b0 <HAL_DMA_Abort_IT+0x3ac>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d06d      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a39      	ldr	r2, [pc, #228]	@ (80051b4 <HAL_DMA_Abort_IT+0x3b0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d068      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a37      	ldr	r2, [pc, #220]	@ (80051b8 <HAL_DMA_Abort_IT+0x3b4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d063      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a36      	ldr	r2, [pc, #216]	@ (80051bc <HAL_DMA_Abort_IT+0x3b8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d05e      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a34      	ldr	r2, [pc, #208]	@ (80051c0 <HAL_DMA_Abort_IT+0x3bc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d059      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a33      	ldr	r2, [pc, #204]	@ (80051c4 <HAL_DMA_Abort_IT+0x3c0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d054      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a31      	ldr	r2, [pc, #196]	@ (80051c8 <HAL_DMA_Abort_IT+0x3c4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d04f      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a30      	ldr	r2, [pc, #192]	@ (80051cc <HAL_DMA_Abort_IT+0x3c8>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d04a      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2e      	ldr	r2, [pc, #184]	@ (80051d0 <HAL_DMA_Abort_IT+0x3cc>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d045      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2d      	ldr	r2, [pc, #180]	@ (80051d4 <HAL_DMA_Abort_IT+0x3d0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d040      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a2b      	ldr	r2, [pc, #172]	@ (80051d8 <HAL_DMA_Abort_IT+0x3d4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d03b      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a2a      	ldr	r2, [pc, #168]	@ (80051dc <HAL_DMA_Abort_IT+0x3d8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d036      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a28      	ldr	r2, [pc, #160]	@ (80051e0 <HAL_DMA_Abort_IT+0x3dc>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d031      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a27      	ldr	r2, [pc, #156]	@ (80051e4 <HAL_DMA_Abort_IT+0x3e0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d02c      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a25      	ldr	r2, [pc, #148]	@ (80051e8 <HAL_DMA_Abort_IT+0x3e4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d027      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a24      	ldr	r2, [pc, #144]	@ (80051ec <HAL_DMA_Abort_IT+0x3e8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d022      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a22      	ldr	r2, [pc, #136]	@ (80051f0 <HAL_DMA_Abort_IT+0x3ec>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d01d      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a21      	ldr	r2, [pc, #132]	@ (80051f4 <HAL_DMA_Abort_IT+0x3f0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d018      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1f      	ldr	r2, [pc, #124]	@ (80051f8 <HAL_DMA_Abort_IT+0x3f4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1e      	ldr	r2, [pc, #120]	@ (80051fc <HAL_DMA_Abort_IT+0x3f8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1c      	ldr	r2, [pc, #112]	@ (8005200 <HAL_DMA_Abort_IT+0x3fc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1b      	ldr	r2, [pc, #108]	@ (8005204 <HAL_DMA_Abort_IT+0x400>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_DMA_Abort_IT+0x3a2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <HAL_DMA_Abort_IT+0x404>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d132      	bne.n	800520c <HAL_DMA_Abort_IT+0x408>
 80051a6:	2301      	movs	r3, #1
 80051a8:	e031      	b.n	800520e <HAL_DMA_Abort_IT+0x40a>
 80051aa:	bf00      	nop
 80051ac:	40020010 	.word	0x40020010
 80051b0:	40020028 	.word	0x40020028
 80051b4:	40020040 	.word	0x40020040
 80051b8:	40020058 	.word	0x40020058
 80051bc:	40020070 	.word	0x40020070
 80051c0:	40020088 	.word	0x40020088
 80051c4:	400200a0 	.word	0x400200a0
 80051c8:	400200b8 	.word	0x400200b8
 80051cc:	40020410 	.word	0x40020410
 80051d0:	40020428 	.word	0x40020428
 80051d4:	40020440 	.word	0x40020440
 80051d8:	40020458 	.word	0x40020458
 80051dc:	40020470 	.word	0x40020470
 80051e0:	40020488 	.word	0x40020488
 80051e4:	400204a0 	.word	0x400204a0
 80051e8:	400204b8 	.word	0x400204b8
 80051ec:	58025408 	.word	0x58025408
 80051f0:	5802541c 	.word	0x5802541c
 80051f4:	58025430 	.word	0x58025430
 80051f8:	58025444 	.word	0x58025444
 80051fc:	58025458 	.word	0x58025458
 8005200:	5802546c 	.word	0x5802546c
 8005204:	58025480 	.word	0x58025480
 8005208:	58025494 	.word	0x58025494
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d028      	beq.n	8005264 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005220:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005226:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	2201      	movs	r2, #1
 8005232:	409a      	lsls	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005240:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00c      	beq.n	8005264 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005254:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005258:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005262:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop

08005290 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08a      	sub	sp, #40	@ 0x28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800529c:	4b67      	ldr	r3, [pc, #412]	@ (800543c <HAL_DMA_IRQHandler+0x1ac>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a67      	ldr	r2, [pc, #412]	@ (8005440 <HAL_DMA_IRQHandler+0x1b0>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	0a9b      	lsrs	r3, r3, #10
 80052a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ae:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052b4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a5f      	ldr	r2, [pc, #380]	@ (8005444 <HAL_DMA_IRQHandler+0x1b4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d04a      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a5d      	ldr	r2, [pc, #372]	@ (8005448 <HAL_DMA_IRQHandler+0x1b8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d045      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a5c      	ldr	r2, [pc, #368]	@ (800544c <HAL_DMA_IRQHandler+0x1bc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d040      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a5a      	ldr	r2, [pc, #360]	@ (8005450 <HAL_DMA_IRQHandler+0x1c0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d03b      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a59      	ldr	r2, [pc, #356]	@ (8005454 <HAL_DMA_IRQHandler+0x1c4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d036      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a57      	ldr	r2, [pc, #348]	@ (8005458 <HAL_DMA_IRQHandler+0x1c8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d031      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a56      	ldr	r2, [pc, #344]	@ (800545c <HAL_DMA_IRQHandler+0x1cc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d02c      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a54      	ldr	r2, [pc, #336]	@ (8005460 <HAL_DMA_IRQHandler+0x1d0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d027      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a53      	ldr	r2, [pc, #332]	@ (8005464 <HAL_DMA_IRQHandler+0x1d4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d022      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a51      	ldr	r2, [pc, #324]	@ (8005468 <HAL_DMA_IRQHandler+0x1d8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01d      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a50      	ldr	r2, [pc, #320]	@ (800546c <HAL_DMA_IRQHandler+0x1dc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d018      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a4e      	ldr	r2, [pc, #312]	@ (8005470 <HAL_DMA_IRQHandler+0x1e0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a4d      	ldr	r2, [pc, #308]	@ (8005474 <HAL_DMA_IRQHandler+0x1e4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a4b      	ldr	r2, [pc, #300]	@ (8005478 <HAL_DMA_IRQHandler+0x1e8>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a4a      	ldr	r2, [pc, #296]	@ (800547c <HAL_DMA_IRQHandler+0x1ec>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_DMA_IRQHandler+0xd2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a48      	ldr	r2, [pc, #288]	@ (8005480 <HAL_DMA_IRQHandler+0x1f0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d101      	bne.n	8005366 <HAL_DMA_IRQHandler+0xd6>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <HAL_DMA_IRQHandler+0xd8>
 8005366:	2300      	movs	r3, #0
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 842b 	beq.w	8005bc4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005372:	f003 031f 	and.w	r3, r3, #31
 8005376:	2208      	movs	r2, #8
 8005378:	409a      	lsls	r2, r3
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 80a2 	beq.w	80054c8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a2e      	ldr	r2, [pc, #184]	@ (8005444 <HAL_DMA_IRQHandler+0x1b4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d04a      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a2d      	ldr	r2, [pc, #180]	@ (8005448 <HAL_DMA_IRQHandler+0x1b8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d045      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a2b      	ldr	r2, [pc, #172]	@ (800544c <HAL_DMA_IRQHandler+0x1bc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d040      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a2a      	ldr	r2, [pc, #168]	@ (8005450 <HAL_DMA_IRQHandler+0x1c0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d03b      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a28      	ldr	r2, [pc, #160]	@ (8005454 <HAL_DMA_IRQHandler+0x1c4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d036      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a27      	ldr	r2, [pc, #156]	@ (8005458 <HAL_DMA_IRQHandler+0x1c8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d031      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a25      	ldr	r2, [pc, #148]	@ (800545c <HAL_DMA_IRQHandler+0x1cc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d02c      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a24      	ldr	r2, [pc, #144]	@ (8005460 <HAL_DMA_IRQHandler+0x1d0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d027      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a22      	ldr	r2, [pc, #136]	@ (8005464 <HAL_DMA_IRQHandler+0x1d4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d022      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a21      	ldr	r2, [pc, #132]	@ (8005468 <HAL_DMA_IRQHandler+0x1d8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d01d      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	@ (800546c <HAL_DMA_IRQHandler+0x1dc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d018      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <HAL_DMA_IRQHandler+0x1e0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d013      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1c      	ldr	r2, [pc, #112]	@ (8005474 <HAL_DMA_IRQHandler+0x1e4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00e      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <HAL_DMA_IRQHandler+0x1e8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a19      	ldr	r2, [pc, #100]	@ (800547c <HAL_DMA_IRQHandler+0x1ec>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d004      	beq.n	8005424 <HAL_DMA_IRQHandler+0x194>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a18      	ldr	r2, [pc, #96]	@ (8005480 <HAL_DMA_IRQHandler+0x1f0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d12f      	bne.n	8005484 <HAL_DMA_IRQHandler+0x1f4>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b00      	cmp	r3, #0
 8005430:	bf14      	ite	ne
 8005432:	2301      	movne	r3, #1
 8005434:	2300      	moveq	r3, #0
 8005436:	b2db      	uxtb	r3, r3
 8005438:	e02e      	b.n	8005498 <HAL_DMA_IRQHandler+0x208>
 800543a:	bf00      	nop
 800543c:	24000440 	.word	0x24000440
 8005440:	1b4e81b5 	.word	0x1b4e81b5
 8005444:	40020010 	.word	0x40020010
 8005448:	40020028 	.word	0x40020028
 800544c:	40020040 	.word	0x40020040
 8005450:	40020058 	.word	0x40020058
 8005454:	40020070 	.word	0x40020070
 8005458:	40020088 	.word	0x40020088
 800545c:	400200a0 	.word	0x400200a0
 8005460:	400200b8 	.word	0x400200b8
 8005464:	40020410 	.word	0x40020410
 8005468:	40020428 	.word	0x40020428
 800546c:	40020440 	.word	0x40020440
 8005470:	40020458 	.word	0x40020458
 8005474:	40020470 	.word	0x40020470
 8005478:	40020488 	.word	0x40020488
 800547c:	400204a0 	.word	0x400204a0
 8005480:	400204b8 	.word	0x400204b8
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	bf14      	ite	ne
 8005492:	2301      	movne	r3, #1
 8005494:	2300      	moveq	r3, #0
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d015      	beq.n	80054c8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0204 	bic.w	r2, r2, #4
 80054aa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	2208      	movs	r2, #8
 80054b6:	409a      	lsls	r2, r3
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c0:	f043 0201 	orr.w	r2, r3, #1
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054cc:	f003 031f 	and.w	r3, r3, #31
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	fa22 f303 	lsr.w	r3, r2, r3
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d06e      	beq.n	80055bc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a69      	ldr	r2, [pc, #420]	@ (8005688 <HAL_DMA_IRQHandler+0x3f8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d04a      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a67      	ldr	r2, [pc, #412]	@ (800568c <HAL_DMA_IRQHandler+0x3fc>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d045      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a66      	ldr	r2, [pc, #408]	@ (8005690 <HAL_DMA_IRQHandler+0x400>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d040      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a64      	ldr	r2, [pc, #400]	@ (8005694 <HAL_DMA_IRQHandler+0x404>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d03b      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a63      	ldr	r2, [pc, #396]	@ (8005698 <HAL_DMA_IRQHandler+0x408>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d036      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a61      	ldr	r2, [pc, #388]	@ (800569c <HAL_DMA_IRQHandler+0x40c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d031      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a60      	ldr	r2, [pc, #384]	@ (80056a0 <HAL_DMA_IRQHandler+0x410>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d02c      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a5e      	ldr	r2, [pc, #376]	@ (80056a4 <HAL_DMA_IRQHandler+0x414>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d027      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a5d      	ldr	r2, [pc, #372]	@ (80056a8 <HAL_DMA_IRQHandler+0x418>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d022      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a5b      	ldr	r2, [pc, #364]	@ (80056ac <HAL_DMA_IRQHandler+0x41c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01d      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a5a      	ldr	r2, [pc, #360]	@ (80056b0 <HAL_DMA_IRQHandler+0x420>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d018      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a58      	ldr	r2, [pc, #352]	@ (80056b4 <HAL_DMA_IRQHandler+0x424>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a57      	ldr	r2, [pc, #348]	@ (80056b8 <HAL_DMA_IRQHandler+0x428>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d00e      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a55      	ldr	r2, [pc, #340]	@ (80056bc <HAL_DMA_IRQHandler+0x42c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d009      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a54      	ldr	r2, [pc, #336]	@ (80056c0 <HAL_DMA_IRQHandler+0x430>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d004      	beq.n	800557e <HAL_DMA_IRQHandler+0x2ee>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a52      	ldr	r2, [pc, #328]	@ (80056c4 <HAL_DMA_IRQHandler+0x434>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10a      	bne.n	8005594 <HAL_DMA_IRQHandler+0x304>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	e003      	b.n	800559c <HAL_DMA_IRQHandler+0x30c>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2201      	movs	r2, #1
 80055aa:	409a      	lsls	r2, r3
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b4:	f043 0202 	orr.w	r2, r3, #2
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	2204      	movs	r2, #4
 80055c6:	409a      	lsls	r2, r3
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 808f 	beq.w	80056f0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005688 <HAL_DMA_IRQHandler+0x3f8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a2a      	ldr	r2, [pc, #168]	@ (800568c <HAL_DMA_IRQHandler+0x3fc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a29      	ldr	r2, [pc, #164]	@ (8005690 <HAL_DMA_IRQHandler+0x400>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a27      	ldr	r2, [pc, #156]	@ (8005694 <HAL_DMA_IRQHandler+0x404>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a26      	ldr	r2, [pc, #152]	@ (8005698 <HAL_DMA_IRQHandler+0x408>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a24      	ldr	r2, [pc, #144]	@ (800569c <HAL_DMA_IRQHandler+0x40c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a23      	ldr	r2, [pc, #140]	@ (80056a0 <HAL_DMA_IRQHandler+0x410>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a21      	ldr	r2, [pc, #132]	@ (80056a4 <HAL_DMA_IRQHandler+0x414>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a20      	ldr	r2, [pc, #128]	@ (80056a8 <HAL_DMA_IRQHandler+0x418>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1e      	ldr	r2, [pc, #120]	@ (80056ac <HAL_DMA_IRQHandler+0x41c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <HAL_DMA_IRQHandler+0x420>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1b      	ldr	r2, [pc, #108]	@ (80056b4 <HAL_DMA_IRQHandler+0x424>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1a      	ldr	r2, [pc, #104]	@ (80056b8 <HAL_DMA_IRQHandler+0x428>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a18      	ldr	r2, [pc, #96]	@ (80056bc <HAL_DMA_IRQHandler+0x42c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a17      	ldr	r2, [pc, #92]	@ (80056c0 <HAL_DMA_IRQHandler+0x430>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_DMA_IRQHandler+0x3e2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a15      	ldr	r2, [pc, #84]	@ (80056c4 <HAL_DMA_IRQHandler+0x434>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d12a      	bne.n	80056c8 <HAL_DMA_IRQHandler+0x438>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	e023      	b.n	80056d0 <HAL_DMA_IRQHandler+0x440>
 8005688:	40020010 	.word	0x40020010
 800568c:	40020028 	.word	0x40020028
 8005690:	40020040 	.word	0x40020040
 8005694:	40020058 	.word	0x40020058
 8005698:	40020070 	.word	0x40020070
 800569c:	40020088 	.word	0x40020088
 80056a0:	400200a0 	.word	0x400200a0
 80056a4:	400200b8 	.word	0x400200b8
 80056a8:	40020410 	.word	0x40020410
 80056ac:	40020428 	.word	0x40020428
 80056b0:	40020440 	.word	0x40020440
 80056b4:	40020458 	.word	0x40020458
 80056b8:	40020470 	.word	0x40020470
 80056bc:	40020488 	.word	0x40020488
 80056c0:	400204a0 	.word	0x400204a0
 80056c4:	400204b8 	.word	0x400204b8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2300      	movs	r3, #0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00d      	beq.n	80056f0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2204      	movs	r2, #4
 80056de:	409a      	lsls	r2, r3
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e8:	f043 0204 	orr.w	r2, r3, #4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	2210      	movs	r2, #16
 80056fa:	409a      	lsls	r2, r3
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	4013      	ands	r3, r2
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80a6 	beq.w	8005852 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a85      	ldr	r2, [pc, #532]	@ (8005920 <HAL_DMA_IRQHandler+0x690>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d04a      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a83      	ldr	r2, [pc, #524]	@ (8005924 <HAL_DMA_IRQHandler+0x694>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d045      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a82      	ldr	r2, [pc, #520]	@ (8005928 <HAL_DMA_IRQHandler+0x698>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d040      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a80      	ldr	r2, [pc, #512]	@ (800592c <HAL_DMA_IRQHandler+0x69c>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d03b      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a7f      	ldr	r2, [pc, #508]	@ (8005930 <HAL_DMA_IRQHandler+0x6a0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d036      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a7d      	ldr	r2, [pc, #500]	@ (8005934 <HAL_DMA_IRQHandler+0x6a4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d031      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a7c      	ldr	r2, [pc, #496]	@ (8005938 <HAL_DMA_IRQHandler+0x6a8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d02c      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a7a      	ldr	r2, [pc, #488]	@ (800593c <HAL_DMA_IRQHandler+0x6ac>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d027      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a79      	ldr	r2, [pc, #484]	@ (8005940 <HAL_DMA_IRQHandler+0x6b0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d022      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a77      	ldr	r2, [pc, #476]	@ (8005944 <HAL_DMA_IRQHandler+0x6b4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01d      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a76      	ldr	r2, [pc, #472]	@ (8005948 <HAL_DMA_IRQHandler+0x6b8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d018      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a74      	ldr	r2, [pc, #464]	@ (800594c <HAL_DMA_IRQHandler+0x6bc>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a73      	ldr	r2, [pc, #460]	@ (8005950 <HAL_DMA_IRQHandler+0x6c0>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a71      	ldr	r2, [pc, #452]	@ (8005954 <HAL_DMA_IRQHandler+0x6c4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a70      	ldr	r2, [pc, #448]	@ (8005958 <HAL_DMA_IRQHandler+0x6c8>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_DMA_IRQHandler+0x516>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a6e      	ldr	r2, [pc, #440]	@ (800595c <HAL_DMA_IRQHandler+0x6cc>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10a      	bne.n	80057bc <HAL_DMA_IRQHandler+0x52c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0308 	and.w	r3, r3, #8
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e009      	b.n	80057d0 <HAL_DMA_IRQHandler+0x540>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0304 	and.w	r3, r3, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bf14      	ite	ne
 80057ca:	2301      	movne	r3, #1
 80057cc:	2300      	moveq	r3, #0
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d03e      	beq.n	8005852 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d8:	f003 031f 	and.w	r3, r3, #31
 80057dc:	2210      	movs	r2, #16
 80057de:	409a      	lsls	r2, r3
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d018      	beq.n	8005824 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d108      	bne.n	8005812 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d024      	beq.n	8005852 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	4798      	blx	r3
 8005810:	e01f      	b.n	8005852 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01b      	beq.n	8005852 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
 8005822:	e016      	b.n	8005852 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582e:	2b00      	cmp	r3, #0
 8005830:	d107      	bne.n	8005842 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0208 	bic.w	r2, r2, #8
 8005840:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	2220      	movs	r2, #32
 800585c:	409a      	lsls	r2, r3
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 8110 	beq.w	8005a88 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2c      	ldr	r2, [pc, #176]	@ (8005920 <HAL_DMA_IRQHandler+0x690>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d04a      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a2b      	ldr	r2, [pc, #172]	@ (8005924 <HAL_DMA_IRQHandler+0x694>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d045      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a29      	ldr	r2, [pc, #164]	@ (8005928 <HAL_DMA_IRQHandler+0x698>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d040      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a28      	ldr	r2, [pc, #160]	@ (800592c <HAL_DMA_IRQHandler+0x69c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d03b      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a26      	ldr	r2, [pc, #152]	@ (8005930 <HAL_DMA_IRQHandler+0x6a0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d036      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a25      	ldr	r2, [pc, #148]	@ (8005934 <HAL_DMA_IRQHandler+0x6a4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d031      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a23      	ldr	r2, [pc, #140]	@ (8005938 <HAL_DMA_IRQHandler+0x6a8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d02c      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a22      	ldr	r2, [pc, #136]	@ (800593c <HAL_DMA_IRQHandler+0x6ac>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d027      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a20      	ldr	r2, [pc, #128]	@ (8005940 <HAL_DMA_IRQHandler+0x6b0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d022      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1f      	ldr	r2, [pc, #124]	@ (8005944 <HAL_DMA_IRQHandler+0x6b4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d01d      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005948 <HAL_DMA_IRQHandler+0x6b8>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d018      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1c      	ldr	r2, [pc, #112]	@ (800594c <HAL_DMA_IRQHandler+0x6bc>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d013      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005950 <HAL_DMA_IRQHandler+0x6c0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00e      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a19      	ldr	r2, [pc, #100]	@ (8005954 <HAL_DMA_IRQHandler+0x6c4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d009      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a17      	ldr	r2, [pc, #92]	@ (8005958 <HAL_DMA_IRQHandler+0x6c8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_DMA_IRQHandler+0x678>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a16      	ldr	r2, [pc, #88]	@ (800595c <HAL_DMA_IRQHandler+0x6cc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d12b      	bne.n	8005960 <HAL_DMA_IRQHandler+0x6d0>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0310 	and.w	r3, r3, #16
 8005912:	2b00      	cmp	r3, #0
 8005914:	bf14      	ite	ne
 8005916:	2301      	movne	r3, #1
 8005918:	2300      	moveq	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	e02a      	b.n	8005974 <HAL_DMA_IRQHandler+0x6e4>
 800591e:	bf00      	nop
 8005920:	40020010 	.word	0x40020010
 8005924:	40020028 	.word	0x40020028
 8005928:	40020040 	.word	0x40020040
 800592c:	40020058 	.word	0x40020058
 8005930:	40020070 	.word	0x40020070
 8005934:	40020088 	.word	0x40020088
 8005938:	400200a0 	.word	0x400200a0
 800593c:	400200b8 	.word	0x400200b8
 8005940:	40020410 	.word	0x40020410
 8005944:	40020428 	.word	0x40020428
 8005948:	40020440 	.word	0x40020440
 800594c:	40020458 	.word	0x40020458
 8005950:	40020470 	.word	0x40020470
 8005954:	40020488 	.word	0x40020488
 8005958:	400204a0 	.word	0x400204a0
 800595c:	400204b8 	.word	0x400204b8
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	bf14      	ite	ne
 800596e:	2301      	movne	r3, #1
 8005970:	2300      	moveq	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 8087 	beq.w	8005a88 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2220      	movs	r2, #32
 8005984:	409a      	lsls	r2, r3
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b04      	cmp	r3, #4
 8005994:	d139      	bne.n	8005a0a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0216 	bic.w	r2, r2, #22
 80059a4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80059b4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d103      	bne.n	80059c6 <HAL_DMA_IRQHandler+0x736>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0208 	bic.w	r2, r2, #8
 80059d4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	223f      	movs	r2, #63	@ 0x3f
 80059e0:	409a      	lsls	r2, r3
 80059e2:	6a3b      	ldr	r3, [r7, #32]
 80059e4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8382 	beq.w	8006104 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	4798      	blx	r3
          }
          return;
 8005a08:	e37c      	b.n	8006104 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d018      	beq.n	8005a4a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d108      	bne.n	8005a38 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d02c      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	4798      	blx	r3
 8005a36:	e027      	b.n	8005a88 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d023      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	4798      	blx	r3
 8005a48:	e01e      	b.n	8005a88 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10f      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0210 	bic.w	r2, r2, #16
 8005a66:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 833e 	beq.w	800610e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8088 	beq.w	8005bb0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a89      	ldr	r2, [pc, #548]	@ (8005cd4 <HAL_DMA_IRQHandler+0xa44>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d04a      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a88      	ldr	r2, [pc, #544]	@ (8005cd8 <HAL_DMA_IRQHandler+0xa48>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d045      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a86      	ldr	r2, [pc, #536]	@ (8005cdc <HAL_DMA_IRQHandler+0xa4c>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d040      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a85      	ldr	r2, [pc, #532]	@ (8005ce0 <HAL_DMA_IRQHandler+0xa50>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d03b      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a83      	ldr	r2, [pc, #524]	@ (8005ce4 <HAL_DMA_IRQHandler+0xa54>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d036      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a82      	ldr	r2, [pc, #520]	@ (8005ce8 <HAL_DMA_IRQHandler+0xa58>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d031      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a80      	ldr	r2, [pc, #512]	@ (8005cec <HAL_DMA_IRQHandler+0xa5c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d02c      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a7f      	ldr	r2, [pc, #508]	@ (8005cf0 <HAL_DMA_IRQHandler+0xa60>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d027      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7d      	ldr	r2, [pc, #500]	@ (8005cf4 <HAL_DMA_IRQHandler+0xa64>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d022      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a7c      	ldr	r2, [pc, #496]	@ (8005cf8 <HAL_DMA_IRQHandler+0xa68>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d01d      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a7a      	ldr	r2, [pc, #488]	@ (8005cfc <HAL_DMA_IRQHandler+0xa6c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d018      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a79      	ldr	r2, [pc, #484]	@ (8005d00 <HAL_DMA_IRQHandler+0xa70>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d013      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a77      	ldr	r2, [pc, #476]	@ (8005d04 <HAL_DMA_IRQHandler+0xa74>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d00e      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a76      	ldr	r2, [pc, #472]	@ (8005d08 <HAL_DMA_IRQHandler+0xa78>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d009      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a74      	ldr	r2, [pc, #464]	@ (8005d0c <HAL_DMA_IRQHandler+0xa7c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x8b8>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a73      	ldr	r2, [pc, #460]	@ (8005d10 <HAL_DMA_IRQHandler+0xa80>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d108      	bne.n	8005b5a <HAL_DMA_IRQHandler+0x8ca>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0201 	bic.w	r2, r2, #1
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e007      	b.n	8005b6a <HAL_DMA_IRQHandler+0x8da>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d307      	bcc.n	8005b86 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1f2      	bne.n	8005b6a <HAL_DMA_IRQHandler+0x8da>
 8005b84:	e000      	b.n	8005b88 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005b86:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2203      	movs	r2, #3
 8005b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005b9e:	e003      	b.n	8005ba8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 82aa 	beq.w	800610e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
 8005bc2:	e2a4      	b.n	800610e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a52      	ldr	r2, [pc, #328]	@ (8005d14 <HAL_DMA_IRQHandler+0xa84>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d04a      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a51      	ldr	r2, [pc, #324]	@ (8005d18 <HAL_DMA_IRQHandler+0xa88>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d045      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a4f      	ldr	r2, [pc, #316]	@ (8005d1c <HAL_DMA_IRQHandler+0xa8c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d040      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a4e      	ldr	r2, [pc, #312]	@ (8005d20 <HAL_DMA_IRQHandler+0xa90>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d03b      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8005d24 <HAL_DMA_IRQHandler+0xa94>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d036      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a4b      	ldr	r2, [pc, #300]	@ (8005d28 <HAL_DMA_IRQHandler+0xa98>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d031      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a49      	ldr	r2, [pc, #292]	@ (8005d2c <HAL_DMA_IRQHandler+0xa9c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d02c      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a48      	ldr	r2, [pc, #288]	@ (8005d30 <HAL_DMA_IRQHandler+0xaa0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d027      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a46      	ldr	r2, [pc, #280]	@ (8005d34 <HAL_DMA_IRQHandler+0xaa4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d022      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a45      	ldr	r2, [pc, #276]	@ (8005d38 <HAL_DMA_IRQHandler+0xaa8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d01d      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a43      	ldr	r2, [pc, #268]	@ (8005d3c <HAL_DMA_IRQHandler+0xaac>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d018      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a42      	ldr	r2, [pc, #264]	@ (8005d40 <HAL_DMA_IRQHandler+0xab0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a40      	ldr	r2, [pc, #256]	@ (8005d44 <HAL_DMA_IRQHandler+0xab4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d00e      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8005d48 <HAL_DMA_IRQHandler+0xab8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d009      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a3d      	ldr	r2, [pc, #244]	@ (8005d4c <HAL_DMA_IRQHandler+0xabc>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d004      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x9d4>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a3c      	ldr	r2, [pc, #240]	@ (8005d50 <HAL_DMA_IRQHandler+0xac0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d101      	bne.n	8005c68 <HAL_DMA_IRQHandler+0x9d8>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <HAL_DMA_IRQHandler+0x9da>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 824f 	beq.w	800610e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7c:	f003 031f 	and.w	r3, r3, #31
 8005c80:	2204      	movs	r2, #4
 8005c82:	409a      	lsls	r2, r3
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	4013      	ands	r3, r2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 80dd 	beq.w	8005e48 <HAL_DMA_IRQHandler+0xbb8>
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80d7 	beq.w	8005e48 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c9e:	f003 031f 	and.w	r3, r3, #31
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	409a      	lsls	r2, r3
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d059      	beq.n	8005d68 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d14a      	bne.n	8005d54 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 8220 	beq.w	8006108 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005cd0:	e21a      	b.n	8006108 <HAL_DMA_IRQHandler+0xe78>
 8005cd2:	bf00      	nop
 8005cd4:	40020010 	.word	0x40020010
 8005cd8:	40020028 	.word	0x40020028
 8005cdc:	40020040 	.word	0x40020040
 8005ce0:	40020058 	.word	0x40020058
 8005ce4:	40020070 	.word	0x40020070
 8005ce8:	40020088 	.word	0x40020088
 8005cec:	400200a0 	.word	0x400200a0
 8005cf0:	400200b8 	.word	0x400200b8
 8005cf4:	40020410 	.word	0x40020410
 8005cf8:	40020428 	.word	0x40020428
 8005cfc:	40020440 	.word	0x40020440
 8005d00:	40020458 	.word	0x40020458
 8005d04:	40020470 	.word	0x40020470
 8005d08:	40020488 	.word	0x40020488
 8005d0c:	400204a0 	.word	0x400204a0
 8005d10:	400204b8 	.word	0x400204b8
 8005d14:	48022c08 	.word	0x48022c08
 8005d18:	48022c1c 	.word	0x48022c1c
 8005d1c:	48022c30 	.word	0x48022c30
 8005d20:	48022c44 	.word	0x48022c44
 8005d24:	48022c58 	.word	0x48022c58
 8005d28:	48022c6c 	.word	0x48022c6c
 8005d2c:	48022c80 	.word	0x48022c80
 8005d30:	48022c94 	.word	0x48022c94
 8005d34:	58025408 	.word	0x58025408
 8005d38:	5802541c 	.word	0x5802541c
 8005d3c:	58025430 	.word	0x58025430
 8005d40:	58025444 	.word	0x58025444
 8005d44:	58025458 	.word	0x58025458
 8005d48:	5802546c 	.word	0x5802546c
 8005d4c:	58025480 	.word	0x58025480
 8005d50:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 81d5 	beq.w	8006108 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d66:	e1cf      	b.n	8006108 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d160      	bne.n	8005e34 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a7f      	ldr	r2, [pc, #508]	@ (8005f74 <HAL_DMA_IRQHandler+0xce4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d04a      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a7d      	ldr	r2, [pc, #500]	@ (8005f78 <HAL_DMA_IRQHandler+0xce8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d045      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a7c      	ldr	r2, [pc, #496]	@ (8005f7c <HAL_DMA_IRQHandler+0xcec>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d040      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a7a      	ldr	r2, [pc, #488]	@ (8005f80 <HAL_DMA_IRQHandler+0xcf0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d03b      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a79      	ldr	r2, [pc, #484]	@ (8005f84 <HAL_DMA_IRQHandler+0xcf4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d036      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a77      	ldr	r2, [pc, #476]	@ (8005f88 <HAL_DMA_IRQHandler+0xcf8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d031      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a76      	ldr	r2, [pc, #472]	@ (8005f8c <HAL_DMA_IRQHandler+0xcfc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d02c      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a74      	ldr	r2, [pc, #464]	@ (8005f90 <HAL_DMA_IRQHandler+0xd00>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d027      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a73      	ldr	r2, [pc, #460]	@ (8005f94 <HAL_DMA_IRQHandler+0xd04>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d022      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a71      	ldr	r2, [pc, #452]	@ (8005f98 <HAL_DMA_IRQHandler+0xd08>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01d      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a70      	ldr	r2, [pc, #448]	@ (8005f9c <HAL_DMA_IRQHandler+0xd0c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d018      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a6e      	ldr	r2, [pc, #440]	@ (8005fa0 <HAL_DMA_IRQHandler+0xd10>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a6d      	ldr	r2, [pc, #436]	@ (8005fa4 <HAL_DMA_IRQHandler+0xd14>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a6b      	ldr	r2, [pc, #428]	@ (8005fa8 <HAL_DMA_IRQHandler+0xd18>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a6a      	ldr	r2, [pc, #424]	@ (8005fac <HAL_DMA_IRQHandler+0xd1c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xb82>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a68      	ldr	r2, [pc, #416]	@ (8005fb0 <HAL_DMA_IRQHandler+0xd20>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d108      	bne.n	8005e24 <HAL_DMA_IRQHandler+0xb94>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0208 	bic.w	r2, r2, #8
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e007      	b.n	8005e34 <HAL_DMA_IRQHandler+0xba4>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0204 	bic.w	r2, r2, #4
 8005e32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8165 	beq.w	8006108 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e46:	e15f      	b.n	8006108 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e4c:	f003 031f 	and.w	r3, r3, #31
 8005e50:	2202      	movs	r2, #2
 8005e52:	409a      	lsls	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 80c5 	beq.w	8005fe8 <HAL_DMA_IRQHandler+0xd58>
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 80bf 	beq.w	8005fe8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	2202      	movs	r2, #2
 8005e74:	409a      	lsls	r2, r3
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d018      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 813a 	beq.w	800610c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ea0:	e134      	b.n	800610c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 8130 	beq.w	800610c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eb4:	e12a      	b.n	800610c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	f003 0320 	and.w	r3, r3, #32
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f040 8089 	bne.w	8005fd4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2b      	ldr	r2, [pc, #172]	@ (8005f74 <HAL_DMA_IRQHandler+0xce4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d04a      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a29      	ldr	r2, [pc, #164]	@ (8005f78 <HAL_DMA_IRQHandler+0xce8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d045      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a28      	ldr	r2, [pc, #160]	@ (8005f7c <HAL_DMA_IRQHandler+0xcec>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d040      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a26      	ldr	r2, [pc, #152]	@ (8005f80 <HAL_DMA_IRQHandler+0xcf0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d03b      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a25      	ldr	r2, [pc, #148]	@ (8005f84 <HAL_DMA_IRQHandler+0xcf4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d036      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a23      	ldr	r2, [pc, #140]	@ (8005f88 <HAL_DMA_IRQHandler+0xcf8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d031      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a22      	ldr	r2, [pc, #136]	@ (8005f8c <HAL_DMA_IRQHandler+0xcfc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d02c      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a20      	ldr	r2, [pc, #128]	@ (8005f90 <HAL_DMA_IRQHandler+0xd00>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d027      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1f      	ldr	r2, [pc, #124]	@ (8005f94 <HAL_DMA_IRQHandler+0xd04>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d022      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1d      	ldr	r2, [pc, #116]	@ (8005f98 <HAL_DMA_IRQHandler+0xd08>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01d      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005f9c <HAL_DMA_IRQHandler+0xd0c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d018      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa0 <HAL_DMA_IRQHandler+0xd10>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d013      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a19      	ldr	r2, [pc, #100]	@ (8005fa4 <HAL_DMA_IRQHandler+0xd14>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d00e      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <HAL_DMA_IRQHandler+0xd18>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d009      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <HAL_DMA_IRQHandler+0xd1c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_DMA_IRQHandler+0xcd2>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a14      	ldr	r2, [pc, #80]	@ (8005fb0 <HAL_DMA_IRQHandler+0xd20>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d128      	bne.n	8005fb4 <HAL_DMA_IRQHandler+0xd24>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 0214 	bic.w	r2, r2, #20
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e027      	b.n	8005fc4 <HAL_DMA_IRQHandler+0xd34>
 8005f74:	40020010 	.word	0x40020010
 8005f78:	40020028 	.word	0x40020028
 8005f7c:	40020040 	.word	0x40020040
 8005f80:	40020058 	.word	0x40020058
 8005f84:	40020070 	.word	0x40020070
 8005f88:	40020088 	.word	0x40020088
 8005f8c:	400200a0 	.word	0x400200a0
 8005f90:	400200b8 	.word	0x400200b8
 8005f94:	40020410 	.word	0x40020410
 8005f98:	40020428 	.word	0x40020428
 8005f9c:	40020440 	.word	0x40020440
 8005fa0:	40020458 	.word	0x40020458
 8005fa4:	40020470 	.word	0x40020470
 8005fa8:	40020488 	.word	0x40020488
 8005fac:	400204a0 	.word	0x400204a0
 8005fb0:	400204b8 	.word	0x400204b8
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 020a 	bic.w	r2, r2, #10
 8005fc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8097 	beq.w	800610c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fe6:	e091      	b.n	800610c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8088 	beq.w	800610e <HAL_DMA_IRQHandler+0xe7e>
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8082 	beq.w	800610e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a41      	ldr	r2, [pc, #260]	@ (8006114 <HAL_DMA_IRQHandler+0xe84>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d04a      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a3f      	ldr	r2, [pc, #252]	@ (8006118 <HAL_DMA_IRQHandler+0xe88>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d045      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a3e      	ldr	r2, [pc, #248]	@ (800611c <HAL_DMA_IRQHandler+0xe8c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d040      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a3c      	ldr	r2, [pc, #240]	@ (8006120 <HAL_DMA_IRQHandler+0xe90>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d03b      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a3b      	ldr	r2, [pc, #236]	@ (8006124 <HAL_DMA_IRQHandler+0xe94>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d036      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a39      	ldr	r2, [pc, #228]	@ (8006128 <HAL_DMA_IRQHandler+0xe98>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d031      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a38      	ldr	r2, [pc, #224]	@ (800612c <HAL_DMA_IRQHandler+0xe9c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d02c      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a36      	ldr	r2, [pc, #216]	@ (8006130 <HAL_DMA_IRQHandler+0xea0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d027      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a35      	ldr	r2, [pc, #212]	@ (8006134 <HAL_DMA_IRQHandler+0xea4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d022      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a33      	ldr	r2, [pc, #204]	@ (8006138 <HAL_DMA_IRQHandler+0xea8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d01d      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a32      	ldr	r2, [pc, #200]	@ (800613c <HAL_DMA_IRQHandler+0xeac>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d018      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a30      	ldr	r2, [pc, #192]	@ (8006140 <HAL_DMA_IRQHandler+0xeb0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a2f      	ldr	r2, [pc, #188]	@ (8006144 <HAL_DMA_IRQHandler+0xeb4>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a2d      	ldr	r2, [pc, #180]	@ (8006148 <HAL_DMA_IRQHandler+0xeb8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2c      	ldr	r2, [pc, #176]	@ (800614c <HAL_DMA_IRQHandler+0xebc>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_DMA_IRQHandler+0xe1a>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006150 <HAL_DMA_IRQHandler+0xec0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d108      	bne.n	80060bc <HAL_DMA_IRQHandler+0xe2c>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 021c 	bic.w	r2, r2, #28
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e007      	b.n	80060cc <HAL_DMA_IRQHandler+0xe3c>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 020e 	bic.w	r2, r2, #14
 80060ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060d0:	f003 031f 	and.w	r3, r3, #31
 80060d4:	2201      	movs	r2, #1
 80060d6:	409a      	lsls	r2, r3
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d009      	beq.n	800610e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	4798      	blx	r3
 8006102:	e004      	b.n	800610e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006104:	bf00      	nop
 8006106:	e002      	b.n	800610e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006108:	bf00      	nop
 800610a:	e000      	b.n	800610e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800610c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800610e:	3728      	adds	r7, #40	@ 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	40020010 	.word	0x40020010
 8006118:	40020028 	.word	0x40020028
 800611c:	40020040 	.word	0x40020040
 8006120:	40020058 	.word	0x40020058
 8006124:	40020070 	.word	0x40020070
 8006128:	40020088 	.word	0x40020088
 800612c:	400200a0 	.word	0x400200a0
 8006130:	400200b8 	.word	0x400200b8
 8006134:	40020410 	.word	0x40020410
 8006138:	40020428 	.word	0x40020428
 800613c:	40020440 	.word	0x40020440
 8006140:	40020458 	.word	0x40020458
 8006144:	40020470 	.word	0x40020470
 8006148:	40020488 	.word	0x40020488
 800614c:	400204a0 	.word	0x400204a0
 8006150:	400204b8 	.word	0x400204b8

08006154 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006166:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800616c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7f      	ldr	r2, [pc, #508]	@ (8006370 <DMA_SetConfig+0x21c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d072      	beq.n	800625e <DMA_SetConfig+0x10a>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7d      	ldr	r2, [pc, #500]	@ (8006374 <DMA_SetConfig+0x220>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d06d      	beq.n	800625e <DMA_SetConfig+0x10a>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7c      	ldr	r2, [pc, #496]	@ (8006378 <DMA_SetConfig+0x224>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d068      	beq.n	800625e <DMA_SetConfig+0x10a>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7a      	ldr	r2, [pc, #488]	@ (800637c <DMA_SetConfig+0x228>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d063      	beq.n	800625e <DMA_SetConfig+0x10a>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a79      	ldr	r2, [pc, #484]	@ (8006380 <DMA_SetConfig+0x22c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d05e      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a77      	ldr	r2, [pc, #476]	@ (8006384 <DMA_SetConfig+0x230>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d059      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a76      	ldr	r2, [pc, #472]	@ (8006388 <DMA_SetConfig+0x234>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d054      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a74      	ldr	r2, [pc, #464]	@ (800638c <DMA_SetConfig+0x238>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d04f      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a73      	ldr	r2, [pc, #460]	@ (8006390 <DMA_SetConfig+0x23c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d04a      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a71      	ldr	r2, [pc, #452]	@ (8006394 <DMA_SetConfig+0x240>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d045      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a70      	ldr	r2, [pc, #448]	@ (8006398 <DMA_SetConfig+0x244>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d040      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a6e      	ldr	r2, [pc, #440]	@ (800639c <DMA_SetConfig+0x248>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d03b      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6d      	ldr	r2, [pc, #436]	@ (80063a0 <DMA_SetConfig+0x24c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d036      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6b      	ldr	r2, [pc, #428]	@ (80063a4 <DMA_SetConfig+0x250>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d031      	beq.n	800625e <DMA_SetConfig+0x10a>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6a      	ldr	r2, [pc, #424]	@ (80063a8 <DMA_SetConfig+0x254>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d02c      	beq.n	800625e <DMA_SetConfig+0x10a>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a68      	ldr	r2, [pc, #416]	@ (80063ac <DMA_SetConfig+0x258>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d027      	beq.n	800625e <DMA_SetConfig+0x10a>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a67      	ldr	r2, [pc, #412]	@ (80063b0 <DMA_SetConfig+0x25c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d022      	beq.n	800625e <DMA_SetConfig+0x10a>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a65      	ldr	r2, [pc, #404]	@ (80063b4 <DMA_SetConfig+0x260>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01d      	beq.n	800625e <DMA_SetConfig+0x10a>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a64      	ldr	r2, [pc, #400]	@ (80063b8 <DMA_SetConfig+0x264>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d018      	beq.n	800625e <DMA_SetConfig+0x10a>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a62      	ldr	r2, [pc, #392]	@ (80063bc <DMA_SetConfig+0x268>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <DMA_SetConfig+0x10a>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a61      	ldr	r2, [pc, #388]	@ (80063c0 <DMA_SetConfig+0x26c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <DMA_SetConfig+0x10a>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a5f      	ldr	r2, [pc, #380]	@ (80063c4 <DMA_SetConfig+0x270>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <DMA_SetConfig+0x10a>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a5e      	ldr	r2, [pc, #376]	@ (80063c8 <DMA_SetConfig+0x274>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <DMA_SetConfig+0x10a>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a5c      	ldr	r2, [pc, #368]	@ (80063cc <DMA_SetConfig+0x278>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d101      	bne.n	8006262 <DMA_SetConfig+0x10e>
 800625e:	2301      	movs	r3, #1
 8006260:	e000      	b.n	8006264 <DMA_SetConfig+0x110>
 8006262:	2300      	movs	r3, #0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00d      	beq.n	8006284 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006270:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006282:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a39      	ldr	r2, [pc, #228]	@ (8006370 <DMA_SetConfig+0x21c>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d04a      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a38      	ldr	r2, [pc, #224]	@ (8006374 <DMA_SetConfig+0x220>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d045      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a36      	ldr	r2, [pc, #216]	@ (8006378 <DMA_SetConfig+0x224>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d040      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a35      	ldr	r2, [pc, #212]	@ (800637c <DMA_SetConfig+0x228>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d03b      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a33      	ldr	r2, [pc, #204]	@ (8006380 <DMA_SetConfig+0x22c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d036      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a32      	ldr	r2, [pc, #200]	@ (8006384 <DMA_SetConfig+0x230>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d031      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a30      	ldr	r2, [pc, #192]	@ (8006388 <DMA_SetConfig+0x234>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d02c      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2f      	ldr	r2, [pc, #188]	@ (800638c <DMA_SetConfig+0x238>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d027      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006390 <DMA_SetConfig+0x23c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d022      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006394 <DMA_SetConfig+0x240>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d01d      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006398 <DMA_SetConfig+0x244>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d018      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a29      	ldr	r2, [pc, #164]	@ (800639c <DMA_SetConfig+0x248>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a27      	ldr	r2, [pc, #156]	@ (80063a0 <DMA_SetConfig+0x24c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00e      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a26      	ldr	r2, [pc, #152]	@ (80063a4 <DMA_SetConfig+0x250>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a24      	ldr	r2, [pc, #144]	@ (80063a8 <DMA_SetConfig+0x254>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <DMA_SetConfig+0x1d0>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a23      	ldr	r2, [pc, #140]	@ (80063ac <DMA_SetConfig+0x258>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d101      	bne.n	8006328 <DMA_SetConfig+0x1d4>
 8006324:	2301      	movs	r3, #1
 8006326:	e000      	b.n	800632a <DMA_SetConfig+0x1d6>
 8006328:	2300      	movs	r3, #0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d059      	beq.n	80063e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	223f      	movs	r2, #63	@ 0x3f
 8006338:	409a      	lsls	r2, r3
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800634c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	2b40      	cmp	r3, #64	@ 0x40
 800635c:	d138      	bne.n	80063d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800636e:	e0ae      	b.n	80064ce <DMA_SetConfig+0x37a>
 8006370:	40020010 	.word	0x40020010
 8006374:	40020028 	.word	0x40020028
 8006378:	40020040 	.word	0x40020040
 800637c:	40020058 	.word	0x40020058
 8006380:	40020070 	.word	0x40020070
 8006384:	40020088 	.word	0x40020088
 8006388:	400200a0 	.word	0x400200a0
 800638c:	400200b8 	.word	0x400200b8
 8006390:	40020410 	.word	0x40020410
 8006394:	40020428 	.word	0x40020428
 8006398:	40020440 	.word	0x40020440
 800639c:	40020458 	.word	0x40020458
 80063a0:	40020470 	.word	0x40020470
 80063a4:	40020488 	.word	0x40020488
 80063a8:	400204a0 	.word	0x400204a0
 80063ac:	400204b8 	.word	0x400204b8
 80063b0:	58025408 	.word	0x58025408
 80063b4:	5802541c 	.word	0x5802541c
 80063b8:	58025430 	.word	0x58025430
 80063bc:	58025444 	.word	0x58025444
 80063c0:	58025458 	.word	0x58025458
 80063c4:	5802546c 	.word	0x5802546c
 80063c8:	58025480 	.word	0x58025480
 80063cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	60da      	str	r2, [r3, #12]
}
 80063e0:	e075      	b.n	80064ce <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a3d      	ldr	r2, [pc, #244]	@ (80064dc <DMA_SetConfig+0x388>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d04a      	beq.n	8006482 <DMA_SetConfig+0x32e>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a3b      	ldr	r2, [pc, #236]	@ (80064e0 <DMA_SetConfig+0x38c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d045      	beq.n	8006482 <DMA_SetConfig+0x32e>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a3a      	ldr	r2, [pc, #232]	@ (80064e4 <DMA_SetConfig+0x390>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d040      	beq.n	8006482 <DMA_SetConfig+0x32e>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a38      	ldr	r2, [pc, #224]	@ (80064e8 <DMA_SetConfig+0x394>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d03b      	beq.n	8006482 <DMA_SetConfig+0x32e>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a37      	ldr	r2, [pc, #220]	@ (80064ec <DMA_SetConfig+0x398>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d036      	beq.n	8006482 <DMA_SetConfig+0x32e>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a35      	ldr	r2, [pc, #212]	@ (80064f0 <DMA_SetConfig+0x39c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d031      	beq.n	8006482 <DMA_SetConfig+0x32e>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a34      	ldr	r2, [pc, #208]	@ (80064f4 <DMA_SetConfig+0x3a0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d02c      	beq.n	8006482 <DMA_SetConfig+0x32e>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a32      	ldr	r2, [pc, #200]	@ (80064f8 <DMA_SetConfig+0x3a4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d027      	beq.n	8006482 <DMA_SetConfig+0x32e>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a31      	ldr	r2, [pc, #196]	@ (80064fc <DMA_SetConfig+0x3a8>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d022      	beq.n	8006482 <DMA_SetConfig+0x32e>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2f      	ldr	r2, [pc, #188]	@ (8006500 <DMA_SetConfig+0x3ac>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d01d      	beq.n	8006482 <DMA_SetConfig+0x32e>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a2e      	ldr	r2, [pc, #184]	@ (8006504 <DMA_SetConfig+0x3b0>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d018      	beq.n	8006482 <DMA_SetConfig+0x32e>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a2c      	ldr	r2, [pc, #176]	@ (8006508 <DMA_SetConfig+0x3b4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <DMA_SetConfig+0x32e>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a2b      	ldr	r2, [pc, #172]	@ (800650c <DMA_SetConfig+0x3b8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00e      	beq.n	8006482 <DMA_SetConfig+0x32e>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a29      	ldr	r2, [pc, #164]	@ (8006510 <DMA_SetConfig+0x3bc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d009      	beq.n	8006482 <DMA_SetConfig+0x32e>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a28      	ldr	r2, [pc, #160]	@ (8006514 <DMA_SetConfig+0x3c0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d004      	beq.n	8006482 <DMA_SetConfig+0x32e>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a26      	ldr	r2, [pc, #152]	@ (8006518 <DMA_SetConfig+0x3c4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d101      	bne.n	8006486 <DMA_SetConfig+0x332>
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <DMA_SetConfig+0x334>
 8006486:	2300      	movs	r3, #0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d020      	beq.n	80064ce <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006490:	f003 031f 	and.w	r3, r3, #31
 8006494:	2201      	movs	r2, #1
 8006496:	409a      	lsls	r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	683a      	ldr	r2, [r7, #0]
 80064a2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b40      	cmp	r3, #64	@ 0x40
 80064aa:	d108      	bne.n	80064be <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	60da      	str	r2, [r3, #12]
}
 80064bc:	e007      	b.n	80064ce <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	60da      	str	r2, [r3, #12]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	48022c08 	.word	0x48022c08
 80064e0:	48022c1c 	.word	0x48022c1c
 80064e4:	48022c30 	.word	0x48022c30
 80064e8:	48022c44 	.word	0x48022c44
 80064ec:	48022c58 	.word	0x48022c58
 80064f0:	48022c6c 	.word	0x48022c6c
 80064f4:	48022c80 	.word	0x48022c80
 80064f8:	48022c94 	.word	0x48022c94
 80064fc:	58025408 	.word	0x58025408
 8006500:	5802541c 	.word	0x5802541c
 8006504:	58025430 	.word	0x58025430
 8006508:	58025444 	.word	0x58025444
 800650c:	58025458 	.word	0x58025458
 8006510:	5802546c 	.word	0x5802546c
 8006514:	58025480 	.word	0x58025480
 8006518:	58025494 	.word	0x58025494

0800651c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a42      	ldr	r2, [pc, #264]	@ (8006634 <DMA_CalcBaseAndBitshift+0x118>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d04a      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a41      	ldr	r2, [pc, #260]	@ (8006638 <DMA_CalcBaseAndBitshift+0x11c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d045      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a3f      	ldr	r2, [pc, #252]	@ (800663c <DMA_CalcBaseAndBitshift+0x120>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d040      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a3e      	ldr	r2, [pc, #248]	@ (8006640 <DMA_CalcBaseAndBitshift+0x124>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d03b      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a3c      	ldr	r2, [pc, #240]	@ (8006644 <DMA_CalcBaseAndBitshift+0x128>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d036      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3b      	ldr	r2, [pc, #236]	@ (8006648 <DMA_CalcBaseAndBitshift+0x12c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d031      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a39      	ldr	r2, [pc, #228]	@ (800664c <DMA_CalcBaseAndBitshift+0x130>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d02c      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a38      	ldr	r2, [pc, #224]	@ (8006650 <DMA_CalcBaseAndBitshift+0x134>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d027      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a36      	ldr	r2, [pc, #216]	@ (8006654 <DMA_CalcBaseAndBitshift+0x138>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d022      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a35      	ldr	r2, [pc, #212]	@ (8006658 <DMA_CalcBaseAndBitshift+0x13c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d01d      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a33      	ldr	r2, [pc, #204]	@ (800665c <DMA_CalcBaseAndBitshift+0x140>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d018      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a32      	ldr	r2, [pc, #200]	@ (8006660 <DMA_CalcBaseAndBitshift+0x144>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a30      	ldr	r2, [pc, #192]	@ (8006664 <DMA_CalcBaseAndBitshift+0x148>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a2f      	ldr	r2, [pc, #188]	@ (8006668 <DMA_CalcBaseAndBitshift+0x14c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d009      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a2d      	ldr	r2, [pc, #180]	@ (800666c <DMA_CalcBaseAndBitshift+0x150>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <DMA_CalcBaseAndBitshift+0xa8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2c      	ldr	r2, [pc, #176]	@ (8006670 <DMA_CalcBaseAndBitshift+0x154>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d101      	bne.n	80065c8 <DMA_CalcBaseAndBitshift+0xac>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <DMA_CalcBaseAndBitshift+0xae>
 80065c8:	2300      	movs	r3, #0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d024      	beq.n	8006618 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	3b10      	subs	r3, #16
 80065d6:	4a27      	ldr	r2, [pc, #156]	@ (8006674 <DMA_CalcBaseAndBitshift+0x158>)
 80065d8:	fba2 2303 	umull	r2, r3, r2, r3
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	4a24      	ldr	r2, [pc, #144]	@ (8006678 <DMA_CalcBaseAndBitshift+0x15c>)
 80065e8:	5cd3      	ldrb	r3, [r2, r3]
 80065ea:	461a      	mov	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d908      	bls.n	8006608 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	461a      	mov	r2, r3
 80065fc:	4b1f      	ldr	r3, [pc, #124]	@ (800667c <DMA_CalcBaseAndBitshift+0x160>)
 80065fe:	4013      	ands	r3, r2
 8006600:	1d1a      	adds	r2, r3, #4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	659a      	str	r2, [r3, #88]	@ 0x58
 8006606:	e00d      	b.n	8006624 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	4b1b      	ldr	r3, [pc, #108]	@ (800667c <DMA_CalcBaseAndBitshift+0x160>)
 8006610:	4013      	ands	r3, r2
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	6593      	str	r3, [r2, #88]	@ 0x58
 8006616:	e005      	b.n	8006624 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	40020010 	.word	0x40020010
 8006638:	40020028 	.word	0x40020028
 800663c:	40020040 	.word	0x40020040
 8006640:	40020058 	.word	0x40020058
 8006644:	40020070 	.word	0x40020070
 8006648:	40020088 	.word	0x40020088
 800664c:	400200a0 	.word	0x400200a0
 8006650:	400200b8 	.word	0x400200b8
 8006654:	40020410 	.word	0x40020410
 8006658:	40020428 	.word	0x40020428
 800665c:	40020440 	.word	0x40020440
 8006660:	40020458 	.word	0x40020458
 8006664:	40020470 	.word	0x40020470
 8006668:	40020488 	.word	0x40020488
 800666c:	400204a0 	.word	0x400204a0
 8006670:	400204b8 	.word	0x400204b8
 8006674:	aaaaaaab 	.word	0xaaaaaaab
 8006678:	0800e5c8 	.word	0x0800e5c8
 800667c:	fffffc00 	.word	0xfffffc00

08006680 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	699b      	ldr	r3, [r3, #24]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d120      	bne.n	80066d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	2b03      	cmp	r3, #3
 800669a:	d858      	bhi.n	800674e <DMA_CheckFifoParam+0xce>
 800669c:	a201      	add	r2, pc, #4	@ (adr r2, 80066a4 <DMA_CheckFifoParam+0x24>)
 800669e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a2:	bf00      	nop
 80066a4:	080066b5 	.word	0x080066b5
 80066a8:	080066c7 	.word	0x080066c7
 80066ac:	080066b5 	.word	0x080066b5
 80066b0:	0800674f 	.word	0x0800674f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d048      	beq.n	8006752 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066c4:	e045      	b.n	8006752 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80066ce:	d142      	bne.n	8006756 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066d4:	e03f      	b.n	8006756 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066de:	d123      	bne.n	8006728 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d838      	bhi.n	800675a <DMA_CheckFifoParam+0xda>
 80066e8:	a201      	add	r2, pc, #4	@ (adr r2, 80066f0 <DMA_CheckFifoParam+0x70>)
 80066ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ee:	bf00      	nop
 80066f0:	08006701 	.word	0x08006701
 80066f4:	08006707 	.word	0x08006707
 80066f8:	08006701 	.word	0x08006701
 80066fc:	08006719 	.word	0x08006719
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
        break;
 8006704:	e030      	b.n	8006768 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d025      	beq.n	800675e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006716:	e022      	b.n	800675e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006720:	d11f      	bne.n	8006762 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006726:	e01c      	b.n	8006762 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672c:	2b02      	cmp	r3, #2
 800672e:	d902      	bls.n	8006736 <DMA_CheckFifoParam+0xb6>
 8006730:	2b03      	cmp	r3, #3
 8006732:	d003      	beq.n	800673c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006734:	e018      	b.n	8006768 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
        break;
 800673a:	e015      	b.n	8006768 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006740:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00e      	beq.n	8006766 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	73fb      	strb	r3, [r7, #15]
    break;
 800674c:	e00b      	b.n	8006766 <DMA_CheckFifoParam+0xe6>
        break;
 800674e:	bf00      	nop
 8006750:	e00a      	b.n	8006768 <DMA_CheckFifoParam+0xe8>
        break;
 8006752:	bf00      	nop
 8006754:	e008      	b.n	8006768 <DMA_CheckFifoParam+0xe8>
        break;
 8006756:	bf00      	nop
 8006758:	e006      	b.n	8006768 <DMA_CheckFifoParam+0xe8>
        break;
 800675a:	bf00      	nop
 800675c:	e004      	b.n	8006768 <DMA_CheckFifoParam+0xe8>
        break;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <DMA_CheckFifoParam+0xe8>
        break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <DMA_CheckFifoParam+0xe8>
    break;
 8006766:	bf00      	nop
    }
  }

  return status;
 8006768:	7bfb      	ldrb	r3, [r7, #15]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop

08006778 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a38      	ldr	r2, [pc, #224]	@ (800686c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d022      	beq.n	80067d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a36      	ldr	r2, [pc, #216]	@ (8006870 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d01d      	beq.n	80067d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a35      	ldr	r2, [pc, #212]	@ (8006874 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d018      	beq.n	80067d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a33      	ldr	r2, [pc, #204]	@ (8006878 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d013      	beq.n	80067d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a32      	ldr	r2, [pc, #200]	@ (800687c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d00e      	beq.n	80067d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a30      	ldr	r2, [pc, #192]	@ (8006880 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d009      	beq.n	80067d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a2f      	ldr	r2, [pc, #188]	@ (8006884 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d004      	beq.n	80067d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a2d      	ldr	r2, [pc, #180]	@ (8006888 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d101      	bne.n	80067da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80067da:	2300      	movs	r3, #0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01a      	beq.n	8006816 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	3b08      	subs	r3, #8
 80067e8:	4a28      	ldr	r2, [pc, #160]	@ (800688c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4b26      	ldr	r3, [pc, #152]	@ (8006890 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	461a      	mov	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a24      	ldr	r2, [pc, #144]	@ (8006894 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006804:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f003 031f 	and.w	r3, r3, #31
 800680c:	2201      	movs	r2, #1
 800680e:	409a      	lsls	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006814:	e024      	b.n	8006860 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	3b10      	subs	r3, #16
 800681e:	4a1e      	ldr	r2, [pc, #120]	@ (8006898 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006820:	fba2 2303 	umull	r2, r3, r2, r3
 8006824:	091b      	lsrs	r3, r3, #4
 8006826:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4a1c      	ldr	r2, [pc, #112]	@ (800689c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d806      	bhi.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4a1b      	ldr	r2, [pc, #108]	@ (80068a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d902      	bls.n	800683e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3308      	adds	r3, #8
 800683c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4b18      	ldr	r3, [pc, #96]	@ (80068a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006842:	4413      	add	r3, r2
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	461a      	mov	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a16      	ldr	r2, [pc, #88]	@ (80068a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006850:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	2201      	movs	r2, #1
 800685a:	409a      	lsls	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	58025408 	.word	0x58025408
 8006870:	5802541c 	.word	0x5802541c
 8006874:	58025430 	.word	0x58025430
 8006878:	58025444 	.word	0x58025444
 800687c:	58025458 	.word	0x58025458
 8006880:	5802546c 	.word	0x5802546c
 8006884:	58025480 	.word	0x58025480
 8006888:	58025494 	.word	0x58025494
 800688c:	cccccccd 	.word	0xcccccccd
 8006890:	16009600 	.word	0x16009600
 8006894:	58025880 	.word	0x58025880
 8006898:	aaaaaaab 	.word	0xaaaaaaab
 800689c:	400204b8 	.word	0x400204b8
 80068a0:	4002040f 	.word	0x4002040f
 80068a4:	10008200 	.word	0x10008200
 80068a8:	40020880 	.word	0x40020880

080068ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d04a      	beq.n	8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d847      	bhi.n	8006958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a25      	ldr	r2, [pc, #148]	@ (8006964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d022      	beq.n	8006918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a24      	ldr	r2, [pc, #144]	@ (8006968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d01d      	beq.n	8006918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a22      	ldr	r2, [pc, #136]	@ (800696c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d018      	beq.n	8006918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a21      	ldr	r2, [pc, #132]	@ (8006970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00e      	beq.n	8006918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d009      	beq.n	8006918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1c      	ldr	r2, [pc, #112]	@ (800697c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1b      	ldr	r2, [pc, #108]	@ (8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d101      	bne.n	800691c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006918:	2301      	movs	r3, #1
 800691a:	e000      	b.n	800691e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800691c:	2300      	movs	r3, #0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	4b17      	ldr	r3, [pc, #92]	@ (8006984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a15      	ldr	r2, [pc, #84]	@ (8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006934:	671a      	str	r2, [r3, #112]	@ 0x70
 8006936:	e009      	b.n	800694c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4b14      	ldr	r3, [pc, #80]	@ (800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	461a      	mov	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a11      	ldr	r2, [pc, #68]	@ (8006990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800694a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3b01      	subs	r3, #1
 8006950:	2201      	movs	r2, #1
 8006952:	409a      	lsls	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006958:	bf00      	nop
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	58025408 	.word	0x58025408
 8006968:	5802541c 	.word	0x5802541c
 800696c:	58025430 	.word	0x58025430
 8006970:	58025444 	.word	0x58025444
 8006974:	58025458 	.word	0x58025458
 8006978:	5802546c 	.word	0x5802546c
 800697c:	58025480 	.word	0x58025480
 8006980:	58025494 	.word	0x58025494
 8006984:	1600963f 	.word	0x1600963f
 8006988:	58025940 	.word	0x58025940
 800698c:	1000823f 	.word	0x1000823f
 8006990:	40020940 	.word	0x40020940

08006994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006994:	b480      	push	{r7}
 8006996:	b089      	sub	sp, #36	@ 0x24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800699e:	2300      	movs	r3, #0
 80069a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80069a2:	4b89      	ldr	r3, [pc, #548]	@ (8006bc8 <HAL_GPIO_Init+0x234>)
 80069a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80069a6:	e194      	b.n	8006cd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	2101      	movs	r1, #1
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	fa01 f303 	lsl.w	r3, r1, r3
 80069b4:	4013      	ands	r3, r2
 80069b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8186 	beq.w	8006ccc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f003 0303 	and.w	r3, r3, #3
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d005      	beq.n	80069d8 <HAL_GPIO_Init+0x44>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d130      	bne.n	8006a3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	2203      	movs	r2, #3
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	43db      	mvns	r3, r3
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	4013      	ands	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a0e:	2201      	movs	r2, #1
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	fa02 f303 	lsl.w	r3, r2, r3
 8006a16:	43db      	mvns	r3, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	091b      	lsrs	r3, r3, #4
 8006a24:	f003 0201 	and.w	r2, r3, #1
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2e:	69ba      	ldr	r2, [r7, #24]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	2b03      	cmp	r3, #3
 8006a44:	d017      	beq.n	8006a76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	005b      	lsls	r3, r3, #1
 8006a50:	2203      	movs	r2, #3
 8006a52:	fa02 f303 	lsl.w	r3, r2, r3
 8006a56:	43db      	mvns	r3, r3
 8006a58:	69ba      	ldr	r2, [r7, #24]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	69ba      	ldr	r2, [r7, #24]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d123      	bne.n	8006aca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	08da      	lsrs	r2, r3, #3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	3208      	adds	r2, #8
 8006a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	220f      	movs	r2, #15
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	43db      	mvns	r3, r3
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	08da      	lsrs	r2, r3, #3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	3208      	adds	r2, #8
 8006ac4:	69b9      	ldr	r1, [r7, #24]
 8006ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	2203      	movs	r2, #3
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	43db      	mvns	r3, r3
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f003 0203 	and.w	r2, r3, #3
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 80e0 	beq.w	8006ccc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8006bcc <HAL_GPIO_Init+0x238>)
 8006b0e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b12:	4a2e      	ldr	r2, [pc, #184]	@ (8006bcc <HAL_GPIO_Init+0x238>)
 8006b14:	f043 0302 	orr.w	r3, r3, #2
 8006b18:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8006bcc <HAL_GPIO_Init+0x238>)
 8006b1e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b2a:	4a29      	ldr	r2, [pc, #164]	@ (8006bd0 <HAL_GPIO_Init+0x23c>)
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	089b      	lsrs	r3, r3, #2
 8006b30:	3302      	adds	r3, #2
 8006b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	220f      	movs	r2, #15
 8006b42:	fa02 f303 	lsl.w	r3, r2, r3
 8006b46:	43db      	mvns	r3, r3
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a20      	ldr	r2, [pc, #128]	@ (8006bd4 <HAL_GPIO_Init+0x240>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d052      	beq.n	8006bfc <HAL_GPIO_Init+0x268>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd8 <HAL_GPIO_Init+0x244>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d031      	beq.n	8006bc2 <HAL_GPIO_Init+0x22e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1e      	ldr	r2, [pc, #120]	@ (8006bdc <HAL_GPIO_Init+0x248>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d02b      	beq.n	8006bbe <HAL_GPIO_Init+0x22a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a1d      	ldr	r2, [pc, #116]	@ (8006be0 <HAL_GPIO_Init+0x24c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d025      	beq.n	8006bba <HAL_GPIO_Init+0x226>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a1c      	ldr	r2, [pc, #112]	@ (8006be4 <HAL_GPIO_Init+0x250>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d01f      	beq.n	8006bb6 <HAL_GPIO_Init+0x222>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a1b      	ldr	r2, [pc, #108]	@ (8006be8 <HAL_GPIO_Init+0x254>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d019      	beq.n	8006bb2 <HAL_GPIO_Init+0x21e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a1a      	ldr	r2, [pc, #104]	@ (8006bec <HAL_GPIO_Init+0x258>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <HAL_GPIO_Init+0x21a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a19      	ldr	r2, [pc, #100]	@ (8006bf0 <HAL_GPIO_Init+0x25c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00d      	beq.n	8006baa <HAL_GPIO_Init+0x216>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a18      	ldr	r2, [pc, #96]	@ (8006bf4 <HAL_GPIO_Init+0x260>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d007      	beq.n	8006ba6 <HAL_GPIO_Init+0x212>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a17      	ldr	r2, [pc, #92]	@ (8006bf8 <HAL_GPIO_Init+0x264>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d101      	bne.n	8006ba2 <HAL_GPIO_Init+0x20e>
 8006b9e:	2309      	movs	r3, #9
 8006ba0:	e02d      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006ba2:	230a      	movs	r3, #10
 8006ba4:	e02b      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006ba6:	2308      	movs	r3, #8
 8006ba8:	e029      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006baa:	2307      	movs	r3, #7
 8006bac:	e027      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006bae:	2306      	movs	r3, #6
 8006bb0:	e025      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006bb2:	2305      	movs	r3, #5
 8006bb4:	e023      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	e021      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e01f      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e01d      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e01b      	b.n	8006bfe <HAL_GPIO_Init+0x26a>
 8006bc6:	bf00      	nop
 8006bc8:	58000080 	.word	0x58000080
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	58000400 	.word	0x58000400
 8006bd4:	58020000 	.word	0x58020000
 8006bd8:	58020400 	.word	0x58020400
 8006bdc:	58020800 	.word	0x58020800
 8006be0:	58020c00 	.word	0x58020c00
 8006be4:	58021000 	.word	0x58021000
 8006be8:	58021400 	.word	0x58021400
 8006bec:	58021800 	.word	0x58021800
 8006bf0:	58021c00 	.word	0x58021c00
 8006bf4:	58022000 	.word	0x58022000
 8006bf8:	58022400 	.word	0x58022400
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	69fa      	ldr	r2, [r7, #28]
 8006c00:	f002 0203 	and.w	r2, r2, #3
 8006c04:	0092      	lsls	r2, r2, #2
 8006c06:	4093      	lsls	r3, r2
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c0e:	4938      	ldr	r1, [pc, #224]	@ (8006cf0 <HAL_GPIO_Init+0x35c>)
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	089b      	lsrs	r3, r3, #2
 8006c14:	3302      	adds	r3, #2
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	43db      	mvns	r3, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c3a:	69ba      	ldr	r2, [r7, #24]
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	43db      	mvns	r3, r3
 8006c56:	69ba      	ldr	r2, [r7, #24]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	43db      	mvns	r3, r3
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	4013      	ands	r3, r2
 8006c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	43db      	mvns	r3, r3
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f47f ae63 	bne.w	80069a8 <HAL_GPIO_Init+0x14>
  }
}
 8006ce2:	bf00      	nop
 8006ce4:	bf00      	nop
 8006ce6:	3724      	adds	r7, #36	@ 0x24
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	58000400 	.word	0x58000400

08006cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	807b      	strh	r3, [r7, #2]
 8006d00:	4613      	mov	r3, r2
 8006d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d04:	787b      	ldrb	r3, [r7, #1]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d0a:	887a      	ldrh	r2, [r7, #2]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d10:	e003      	b.n	8006d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d12:	887b      	ldrh	r3, [r7, #2]
 8006d14:	041a      	lsls	r2, r3, #16
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	619a      	str	r2, [r3, #24]
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
	...

08006d28 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006d2c:	4b05      	ldr	r3, [pc, #20]	@ (8006d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a04      	ldr	r2, [pc, #16]	@ (8006d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d36:	6013      	str	r3, [r2, #0]
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	58024800 	.word	0x58024800

08006d48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006d50:	4b29      	ldr	r3, [pc, #164]	@ (8006df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	2b06      	cmp	r3, #6
 8006d5a:	d00a      	beq.n	8006d72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006d5c:	4b26      	ldr	r3, [pc, #152]	@ (8006df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d001      	beq.n	8006d6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e040      	b.n	8006df0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	e03e      	b.n	8006df0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006d72:	4b21      	ldr	r3, [pc, #132]	@ (8006df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006d7a:	491f      	ldr	r1, [pc, #124]	@ (8006df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006d82:	f7fb f8af 	bl	8001ee4 <HAL_GetTick>
 8006d86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d88:	e009      	b.n	8006d9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006d8a:	f7fb f8ab 	bl	8001ee4 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d98:	d901      	bls.n	8006d9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e028      	b.n	8006df0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d9e:	4b16      	ldr	r3, [pc, #88]	@ (8006df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006daa:	d1ee      	bne.n	8006d8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b1e      	cmp	r3, #30
 8006db0:	d008      	beq.n	8006dc4 <HAL_PWREx_ConfigSupply+0x7c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b2e      	cmp	r3, #46	@ 0x2e
 8006db6:	d005      	beq.n	8006dc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b1d      	cmp	r3, #29
 8006dbc:	d002      	beq.n	8006dc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b2d      	cmp	r3, #45	@ 0x2d
 8006dc2:	d114      	bne.n	8006dee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006dc4:	f7fb f88e 	bl	8001ee4 <HAL_GetTick>
 8006dc8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006dca:	e009      	b.n	8006de0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006dcc:	f7fb f88a 	bl	8001ee4 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dda:	d901      	bls.n	8006de0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e007      	b.n	8006df0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006de0:	4b05      	ldr	r3, [pc, #20]	@ (8006df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dec:	d1ee      	bne.n	8006dcc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	58024800 	.word	0x58024800

08006dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b08c      	sub	sp, #48	@ 0x30
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d102      	bne.n	8006e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f000 bc1f 	b.w	800764e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 80b3 	beq.w	8006f84 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e1e:	4b95      	ldr	r3, [pc, #596]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e28:	4b92      	ldr	r3, [pc, #584]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e30:	2b10      	cmp	r3, #16
 8006e32:	d007      	beq.n	8006e44 <HAL_RCC_OscConfig+0x48>
 8006e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e36:	2b18      	cmp	r3, #24
 8006e38:	d112      	bne.n	8006e60 <HAL_RCC_OscConfig+0x64>
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d10d      	bne.n	8006e60 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e44:	4b8b      	ldr	r3, [pc, #556]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8098 	beq.w	8006f82 <HAL_RCC_OscConfig+0x186>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f040 8093 	bne.w	8006f82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e3f6      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e68:	d106      	bne.n	8006e78 <HAL_RCC_OscConfig+0x7c>
 8006e6a:	4b82      	ldr	r3, [pc, #520]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a81      	ldr	r2, [pc, #516]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e058      	b.n	8006f2a <HAL_RCC_OscConfig+0x12e>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d112      	bne.n	8006ea6 <HAL_RCC_OscConfig+0xaa>
 8006e80:	4b7c      	ldr	r3, [pc, #496]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a7b      	ldr	r2, [pc, #492]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	4b79      	ldr	r3, [pc, #484]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a78      	ldr	r2, [pc, #480]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e92:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e96:	6013      	str	r3, [r2, #0]
 8006e98:	4b76      	ldr	r3, [pc, #472]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a75      	ldr	r2, [pc, #468]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	e041      	b.n	8006f2a <HAL_RCC_OscConfig+0x12e>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006eae:	d112      	bne.n	8006ed6 <HAL_RCC_OscConfig+0xda>
 8006eb0:	4b70      	ldr	r3, [pc, #448]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a6f      	ldr	r2, [pc, #444]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006eb6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	4b6d      	ldr	r3, [pc, #436]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a6c      	ldr	r2, [pc, #432]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006ec2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a69      	ldr	r2, [pc, #420]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	e029      	b.n	8006f2a <HAL_RCC_OscConfig+0x12e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006ede:	d112      	bne.n	8006f06 <HAL_RCC_OscConfig+0x10a>
 8006ee0:	4b64      	ldr	r3, [pc, #400]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a63      	ldr	r2, [pc, #396]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006ee6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	4b61      	ldr	r3, [pc, #388]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a60      	ldr	r2, [pc, #384]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	4b5e      	ldr	r3, [pc, #376]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a5d      	ldr	r2, [pc, #372]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006efe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f02:	6013      	str	r3, [r2, #0]
 8006f04:	e011      	b.n	8006f2a <HAL_RCC_OscConfig+0x12e>
 8006f06:	4b5b      	ldr	r3, [pc, #364]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a5a      	ldr	r2, [pc, #360]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	4b58      	ldr	r3, [pc, #352]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a57      	ldr	r2, [pc, #348]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	4b55      	ldr	r3, [pc, #340]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a54      	ldr	r2, [pc, #336]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d013      	beq.n	8006f5a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f32:	f7fa ffd7 	bl	8001ee4 <HAL_GetTick>
 8006f36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f38:	e008      	b.n	8006f4c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f3a:	f7fa ffd3 	bl	8001ee4 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b64      	cmp	r3, #100	@ 0x64
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e380      	b.n	800764e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f4c:	4b49      	ldr	r3, [pc, #292]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <HAL_RCC_OscConfig+0x13e>
 8006f58:	e014      	b.n	8006f84 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f5a:	f7fa ffc3 	bl	8001ee4 <HAL_GetTick>
 8006f5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f60:	e008      	b.n	8006f74 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f62:	f7fa ffbf 	bl	8001ee4 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b64      	cmp	r3, #100	@ 0x64
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e36c      	b.n	800764e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f74:	4b3f      	ldr	r3, [pc, #252]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1f0      	bne.n	8006f62 <HAL_RCC_OscConfig+0x166>
 8006f80:	e000      	b.n	8006f84 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 808c 	beq.w	80070aa <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f92:	4b38      	ldr	r3, [pc, #224]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f9a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f9c:	4b35      	ldr	r3, [pc, #212]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa0:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d007      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x1bc>
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	2b18      	cmp	r3, #24
 8006fac:	d137      	bne.n	800701e <HAL_RCC_OscConfig+0x222>
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d132      	bne.n	800701e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <HAL_RCC_OscConfig+0x1d4>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e33e      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006fd0:	4b28      	ldr	r3, [pc, #160]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f023 0219 	bic.w	r2, r3, #25
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	4925      	ldr	r1, [pc, #148]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe2:	f7fa ff7f 	bl	8001ee4 <HAL_GetTick>
 8006fe6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006fe8:	e008      	b.n	8006ffc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fea:	f7fa ff7b 	bl	8001ee4 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d901      	bls.n	8006ffc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e328      	b.n	800764e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	d0f0      	beq.n	8006fea <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007008:	4b1a      	ldr	r3, [pc, #104]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	061b      	lsls	r3, r3, #24
 8007016:	4917      	ldr	r1, [pc, #92]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8007018:	4313      	orrs	r3, r2
 800701a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800701c:	e045      	b.n	80070aa <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d028      	beq.n	8007078 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007026:	4b13      	ldr	r3, [pc, #76]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f023 0219 	bic.w	r2, r3, #25
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	4910      	ldr	r1, [pc, #64]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8007034:	4313      	orrs	r3, r2
 8007036:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007038:	f7fa ff54 	bl	8001ee4 <HAL_GetTick>
 800703c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800703e:	e008      	b.n	8007052 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007040:	f7fa ff50 	bl	8001ee4 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	2b02      	cmp	r3, #2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e2fd      	b.n	800764e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007052:	4b08      	ldr	r3, [pc, #32]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0304 	and.w	r3, r3, #4
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0f0      	beq.n	8007040 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800705e:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	061b      	lsls	r3, r3, #24
 800706c:	4901      	ldr	r1, [pc, #4]	@ (8007074 <HAL_RCC_OscConfig+0x278>)
 800706e:	4313      	orrs	r3, r2
 8007070:	604b      	str	r3, [r1, #4]
 8007072:	e01a      	b.n	80070aa <HAL_RCC_OscConfig+0x2ae>
 8007074:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007078:	4b97      	ldr	r3, [pc, #604]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a96      	ldr	r2, [pc, #600]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 800707e:	f023 0301 	bic.w	r3, r3, #1
 8007082:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007084:	f7fa ff2e 	bl	8001ee4 <HAL_GetTick>
 8007088:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800708a:	e008      	b.n	800709e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800708c:	f7fa ff2a 	bl	8001ee4 <HAL_GetTick>
 8007090:	4602      	mov	r2, r0
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	1ad3      	subs	r3, r2, r3
 8007096:	2b02      	cmp	r3, #2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e2d7      	b.n	800764e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800709e:	4b8e      	ldr	r3, [pc, #568]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1f0      	bne.n	800708c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0310 	and.w	r3, r3, #16
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d06a      	beq.n	800718c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070b6:	4b88      	ldr	r3, [pc, #544]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80070be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070c0:	4b85      	ldr	r3, [pc, #532]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80070c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d007      	beq.n	80070dc <HAL_RCC_OscConfig+0x2e0>
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b18      	cmp	r3, #24
 80070d0:	d11b      	bne.n	800710a <HAL_RCC_OscConfig+0x30e>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d116      	bne.n	800710a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070dc:	4b7e      	ldr	r3, [pc, #504]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_RCC_OscConfig+0x2f8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	2b80      	cmp	r3, #128	@ 0x80
 80070ee:	d001      	beq.n	80070f4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e2ac      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070f4:	4b78      	ldr	r3, [pc, #480]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	061b      	lsls	r3, r3, #24
 8007102:	4975      	ldr	r1, [pc, #468]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007104:	4313      	orrs	r3, r2
 8007106:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007108:	e040      	b.n	800718c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d023      	beq.n	800715a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007112:	4b71      	ldr	r3, [pc, #452]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a70      	ldr	r2, [pc, #448]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800711c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800711e:	f7fa fee1 	bl	8001ee4 <HAL_GetTick>
 8007122:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007124:	e008      	b.n	8007138 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007126:	f7fa fedd 	bl	8001ee4 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d901      	bls.n	8007138 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e28a      	b.n	800764e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007138:	4b67      	ldr	r3, [pc, #412]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007140:	2b00      	cmp	r3, #0
 8007142:	d0f0      	beq.n	8007126 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007144:	4b64      	ldr	r3, [pc, #400]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	061b      	lsls	r3, r3, #24
 8007152:	4961      	ldr	r1, [pc, #388]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007154:	4313      	orrs	r3, r2
 8007156:	60cb      	str	r3, [r1, #12]
 8007158:	e018      	b.n	800718c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800715a:	4b5f      	ldr	r3, [pc, #380]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a5e      	ldr	r2, [pc, #376]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007160:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007166:	f7fa febd 	bl	8001ee4 <HAL_GetTick>
 800716a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800716e:	f7fa feb9 	bl	8001ee4 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e266      	b.n	800764e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007180:	4b55      	ldr	r3, [pc, #340]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1f0      	bne.n	800716e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f003 0308 	and.w	r3, r3, #8
 8007194:	2b00      	cmp	r3, #0
 8007196:	d036      	beq.n	8007206 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d019      	beq.n	80071d4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071a0:	4b4d      	ldr	r3, [pc, #308]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80071a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a4:	4a4c      	ldr	r2, [pc, #304]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ac:	f7fa fe9a 	bl	8001ee4 <HAL_GetTick>
 80071b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071b2:	e008      	b.n	80071c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b4:	f7fa fe96 	bl	8001ee4 <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d901      	bls.n	80071c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e243      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071c6:	4b44      	ldr	r3, [pc, #272]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80071c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0f0      	beq.n	80071b4 <HAL_RCC_OscConfig+0x3b8>
 80071d2:	e018      	b.n	8007206 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071d4:	4b40      	ldr	r3, [pc, #256]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80071d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071d8:	4a3f      	ldr	r2, [pc, #252]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80071da:	f023 0301 	bic.w	r3, r3, #1
 80071de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e0:	f7fa fe80 	bl	8001ee4 <HAL_GetTick>
 80071e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071e8:	f7fa fe7c 	bl	8001ee4 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e229      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071fa:	4b37      	ldr	r3, [pc, #220]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80071fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f0      	bne.n	80071e8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d036      	beq.n	8007280 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d019      	beq.n	800724e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800721a:	4b2f      	ldr	r3, [pc, #188]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2e      	ldr	r2, [pc, #184]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007220:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007224:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007226:	f7fa fe5d 	bl	8001ee4 <HAL_GetTick>
 800722a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800722c:	e008      	b.n	8007240 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800722e:	f7fa fe59 	bl	8001ee4 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	2b02      	cmp	r3, #2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e206      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007240:	4b25      	ldr	r3, [pc, #148]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0f0      	beq.n	800722e <HAL_RCC_OscConfig+0x432>
 800724c:	e018      	b.n	8007280 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800724e:	4b22      	ldr	r3, [pc, #136]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a21      	ldr	r2, [pc, #132]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007258:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800725a:	f7fa fe43 	bl	8001ee4 <HAL_GetTick>
 800725e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007260:	e008      	b.n	8007274 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007262:	f7fa fe3f 	bl	8001ee4 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e1ec      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007274:	4b18      	ldr	r3, [pc, #96]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1f0      	bne.n	8007262 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	f000 80af 	beq.w	80073ec <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800728e:	4b13      	ldr	r3, [pc, #76]	@ (80072dc <HAL_RCC_OscConfig+0x4e0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a12      	ldr	r2, [pc, #72]	@ (80072dc <HAL_RCC_OscConfig+0x4e0>)
 8007294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800729a:	f7fa fe23 	bl	8001ee4 <HAL_GetTick>
 800729e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a2:	f7fa fe1f 	bl	8001ee4 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b64      	cmp	r3, #100	@ 0x64
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e1cc      	b.n	800764e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072b4:	4b09      	ldr	r3, [pc, #36]	@ (80072dc <HAL_RCC_OscConfig+0x4e0>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0f0      	beq.n	80072a2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d10b      	bne.n	80072e0 <HAL_RCC_OscConfig+0x4e4>
 80072c8:	4b03      	ldr	r3, [pc, #12]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80072ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072cc:	4a02      	ldr	r2, [pc, #8]	@ (80072d8 <HAL_RCC_OscConfig+0x4dc>)
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d4:	e05b      	b.n	800738e <HAL_RCC_OscConfig+0x592>
 80072d6:	bf00      	nop
 80072d8:	58024400 	.word	0x58024400
 80072dc:	58024800 	.word	0x58024800
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d112      	bne.n	800730e <HAL_RCC_OscConfig+0x512>
 80072e8:	4b9d      	ldr	r3, [pc, #628]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ec:	4a9c      	ldr	r2, [pc, #624]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80072ee:	f023 0301 	bic.w	r3, r3, #1
 80072f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072f4:	4b9a      	ldr	r3, [pc, #616]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80072f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f8:	4a99      	ldr	r2, [pc, #612]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80072fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8007300:	4b97      	ldr	r3, [pc, #604]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007304:	4a96      	ldr	r2, [pc, #600]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007306:	f023 0304 	bic.w	r3, r3, #4
 800730a:	6713      	str	r3, [r2, #112]	@ 0x70
 800730c:	e03f      	b.n	800738e <HAL_RCC_OscConfig+0x592>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	2b05      	cmp	r3, #5
 8007314:	d112      	bne.n	800733c <HAL_RCC_OscConfig+0x540>
 8007316:	4b92      	ldr	r3, [pc, #584]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800731a:	4a91      	ldr	r2, [pc, #580]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800731c:	f043 0304 	orr.w	r3, r3, #4
 8007320:	6713      	str	r3, [r2, #112]	@ 0x70
 8007322:	4b8f      	ldr	r3, [pc, #572]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007326:	4a8e      	ldr	r2, [pc, #568]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800732c:	6713      	str	r3, [r2, #112]	@ 0x70
 800732e:	4b8c      	ldr	r3, [pc, #560]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007332:	4a8b      	ldr	r2, [pc, #556]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007334:	f043 0301 	orr.w	r3, r3, #1
 8007338:	6713      	str	r3, [r2, #112]	@ 0x70
 800733a:	e028      	b.n	800738e <HAL_RCC_OscConfig+0x592>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	2b85      	cmp	r3, #133	@ 0x85
 8007342:	d112      	bne.n	800736a <HAL_RCC_OscConfig+0x56e>
 8007344:	4b86      	ldr	r3, [pc, #536]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007348:	4a85      	ldr	r2, [pc, #532]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800734a:	f043 0304 	orr.w	r3, r3, #4
 800734e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007350:	4b83      	ldr	r3, [pc, #524]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007354:	4a82      	ldr	r2, [pc, #520]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800735a:	6713      	str	r3, [r2, #112]	@ 0x70
 800735c:	4b80      	ldr	r3, [pc, #512]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800735e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007360:	4a7f      	ldr	r2, [pc, #508]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007362:	f043 0301 	orr.w	r3, r3, #1
 8007366:	6713      	str	r3, [r2, #112]	@ 0x70
 8007368:	e011      	b.n	800738e <HAL_RCC_OscConfig+0x592>
 800736a:	4b7d      	ldr	r3, [pc, #500]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800736c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800736e:	4a7c      	ldr	r2, [pc, #496]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007370:	f023 0301 	bic.w	r3, r3, #1
 8007374:	6713      	str	r3, [r2, #112]	@ 0x70
 8007376:	4b7a      	ldr	r3, [pc, #488]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737a:	4a79      	ldr	r2, [pc, #484]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800737c:	f023 0304 	bic.w	r3, r3, #4
 8007380:	6713      	str	r3, [r2, #112]	@ 0x70
 8007382:	4b77      	ldr	r3, [pc, #476]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007386:	4a76      	ldr	r2, [pc, #472]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800738c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d015      	beq.n	80073c2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007396:	f7fa fda5 	bl	8001ee4 <HAL_GetTick>
 800739a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800739c:	e00a      	b.n	80073b4 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739e:	f7fa fda1 	bl	8001ee4 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d901      	bls.n	80073b4 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e14c      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073b4:	4b6a      	ldr	r3, [pc, #424]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0ee      	beq.n	800739e <HAL_RCC_OscConfig+0x5a2>
 80073c0:	e014      	b.n	80073ec <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c2:	f7fa fd8f 	bl	8001ee4 <HAL_GetTick>
 80073c6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073c8:	e00a      	b.n	80073e0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ca:	f7fa fd8b 	bl	8001ee4 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073d8:	4293      	cmp	r3, r2
 80073da:	d901      	bls.n	80073e0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80073dc:	2303      	movs	r3, #3
 80073de:	e136      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073e0:	4b5f      	ldr	r3, [pc, #380]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80073e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1ee      	bne.n	80073ca <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 812b 	beq.w	800764c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073f6:	4b5a      	ldr	r3, [pc, #360]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80073fe:	2b18      	cmp	r3, #24
 8007400:	f000 80bb 	beq.w	800757a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007408:	2b02      	cmp	r3, #2
 800740a:	f040 8095 	bne.w	8007538 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740e:	4b54      	ldr	r3, [pc, #336]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a53      	ldr	r2, [pc, #332]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007414:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800741a:	f7fa fd63 	bl	8001ee4 <HAL_GetTick>
 800741e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007420:	e008      	b.n	8007434 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007422:	f7fa fd5f 	bl	8001ee4 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d901      	bls.n	8007434 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e10c      	b.n	800764e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007434:	4b4a      	ldr	r3, [pc, #296]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1f0      	bne.n	8007422 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007440:	4b47      	ldr	r3, [pc, #284]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007442:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007444:	4b47      	ldr	r3, [pc, #284]	@ (8007564 <HAL_RCC_OscConfig+0x768>)
 8007446:	4013      	ands	r3, r2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007450:	0112      	lsls	r2, r2, #4
 8007452:	430a      	orrs	r2, r1
 8007454:	4942      	ldr	r1, [pc, #264]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007456:	4313      	orrs	r3, r2
 8007458:	628b      	str	r3, [r1, #40]	@ 0x28
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745e:	3b01      	subs	r3, #1
 8007460:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007468:	3b01      	subs	r3, #1
 800746a:	025b      	lsls	r3, r3, #9
 800746c:	b29b      	uxth	r3, r3
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007474:	3b01      	subs	r3, #1
 8007476:	041b      	lsls	r3, r3, #16
 8007478:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007482:	3b01      	subs	r3, #1
 8007484:	061b      	lsls	r3, r3, #24
 8007486:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800748a:	4935      	ldr	r1, [pc, #212]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800748c:	4313      	orrs	r3, r2
 800748e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007490:	4b33      	ldr	r3, [pc, #204]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007494:	4a32      	ldr	r2, [pc, #200]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800749c:	4b30      	ldr	r3, [pc, #192]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800749e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074a0:	4b31      	ldr	r3, [pc, #196]	@ (8007568 <HAL_RCC_OscConfig+0x76c>)
 80074a2:	4013      	ands	r3, r2
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80074a8:	00d2      	lsls	r2, r2, #3
 80074aa:	492d      	ldr	r1, [pc, #180]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80074b0:	4b2b      	ldr	r3, [pc, #172]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b4:	f023 020c 	bic.w	r2, r3, #12
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074bc:	4928      	ldr	r1, [pc, #160]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80074c2:	4b27      	ldr	r3, [pc, #156]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c6:	f023 0202 	bic.w	r2, r3, #2
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ce:	4924      	ldr	r1, [pc, #144]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80074d4:	4b22      	ldr	r3, [pc, #136]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d8:	4a21      	ldr	r2, [pc, #132]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074e0:	4b1f      	ldr	r3, [pc, #124]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074e4:	4a1e      	ldr	r2, [pc, #120]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80074ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074f0:	4a1b      	ldr	r2, [pc, #108]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80074f8:	4b19      	ldr	r3, [pc, #100]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fc:	4a18      	ldr	r2, [pc, #96]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 80074fe:	f043 0301 	orr.w	r3, r3, #1
 8007502:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007504:	4b16      	ldr	r3, [pc, #88]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a15      	ldr	r2, [pc, #84]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800750a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800750e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fa fce8 	bl	8001ee4 <HAL_GetTick>
 8007514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007518:	f7fa fce4 	bl	8001ee4 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e091      	b.n	800764e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800752a:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0f0      	beq.n	8007518 <HAL_RCC_OscConfig+0x71c>
 8007536:	e089      	b.n	800764c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007538:	4b09      	ldr	r3, [pc, #36]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a08      	ldr	r2, [pc, #32]	@ (8007560 <HAL_RCC_OscConfig+0x764>)
 800753e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007544:	f7fa fcce 	bl	8001ee4 <HAL_GetTick>
 8007548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800754a:	e00f      	b.n	800756c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800754c:	f7fa fcca 	bl	8001ee4 <HAL_GetTick>
 8007550:	4602      	mov	r2, r0
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	2b02      	cmp	r3, #2
 8007558:	d908      	bls.n	800756c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e077      	b.n	800764e <HAL_RCC_OscConfig+0x852>
 800755e:	bf00      	nop
 8007560:	58024400 	.word	0x58024400
 8007564:	fffffc0c 	.word	0xfffffc0c
 8007568:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800756c:	4b3a      	ldr	r3, [pc, #232]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e9      	bne.n	800754c <HAL_RCC_OscConfig+0x750>
 8007578:	e068      	b.n	800764c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800757a:	4b37      	ldr	r3, [pc, #220]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 800757c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007580:	4b35      	ldr	r3, [pc, #212]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 8007582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007584:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800758a:	2b01      	cmp	r3, #1
 800758c:	d031      	beq.n	80075f2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f003 0203 	and.w	r2, r3, #3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007598:	429a      	cmp	r2, r3
 800759a:	d12a      	bne.n	80075f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	091b      	lsrs	r3, r3, #4
 80075a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d122      	bne.n	80075f2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d11a      	bne.n	80075f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	0a5b      	lsrs	r3, r3, #9
 80075c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d111      	bne.n	80075f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	0c1b      	lsrs	r3, r3, #16
 80075d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075dc:	429a      	cmp	r2, r3
 80075de:	d108      	bne.n	80075f2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	0e1b      	lsrs	r3, r3, #24
 80075e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d001      	beq.n	80075f6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e02b      	b.n	800764e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80075f6:	4b18      	ldr	r3, [pc, #96]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 80075f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075fa:	08db      	lsrs	r3, r3, #3
 80075fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007600:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	429a      	cmp	r2, r3
 800760a:	d01f      	beq.n	800764c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800760c:	4b12      	ldr	r3, [pc, #72]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 800760e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007610:	4a11      	ldr	r2, [pc, #68]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007618:	f7fa fc64 	bl	8001ee4 <HAL_GetTick>
 800761c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800761e:	bf00      	nop
 8007620:	f7fa fc60 	bl	8001ee4 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	4293      	cmp	r3, r2
 800762a:	d0f9      	beq.n	8007620 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800762c:	4b0a      	ldr	r3, [pc, #40]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 800762e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007630:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <HAL_RCC_OscConfig+0x860>)
 8007632:	4013      	ands	r3, r2
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007638:	00d2      	lsls	r2, r2, #3
 800763a:	4907      	ldr	r1, [pc, #28]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 800763c:	4313      	orrs	r3, r2
 800763e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007640:	4b05      	ldr	r3, [pc, #20]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 8007642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007644:	4a04      	ldr	r2, [pc, #16]	@ (8007658 <HAL_RCC_OscConfig+0x85c>)
 8007646:	f043 0301 	orr.w	r3, r3, #1
 800764a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3730      	adds	r7, #48	@ 0x30
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	58024400 	.word	0x58024400
 800765c:	ffff0007 	.word	0xffff0007

08007660 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e19c      	b.n	80079ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007674:	4b8a      	ldr	r3, [pc, #552]	@ (80078a0 <HAL_RCC_ClockConfig+0x240>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 030f 	and.w	r3, r3, #15
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d910      	bls.n	80076a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007682:	4b87      	ldr	r3, [pc, #540]	@ (80078a0 <HAL_RCC_ClockConfig+0x240>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f023 020f 	bic.w	r2, r3, #15
 800768a:	4985      	ldr	r1, [pc, #532]	@ (80078a0 <HAL_RCC_ClockConfig+0x240>)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	4313      	orrs	r3, r2
 8007690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007692:	4b83      	ldr	r3, [pc, #524]	@ (80078a0 <HAL_RCC_ClockConfig+0x240>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 030f 	and.w	r3, r3, #15
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	429a      	cmp	r2, r3
 800769e:	d001      	beq.n	80076a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e184      	b.n	80079ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d010      	beq.n	80076d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	4b7b      	ldr	r3, [pc, #492]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076bc:	429a      	cmp	r2, r3
 80076be:	d908      	bls.n	80076d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076c0:	4b78      	ldr	r3, [pc, #480]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	4975      	ldr	r1, [pc, #468]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d010      	beq.n	8007700 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	695a      	ldr	r2, [r3, #20]
 80076e2:	4b70      	ldr	r3, [pc, #448]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d908      	bls.n	8007700 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076ee:	4b6d      	ldr	r3, [pc, #436]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80076f0:	69db      	ldr	r3, [r3, #28]
 80076f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	496a      	ldr	r1, [pc, #424]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0310 	and.w	r3, r3, #16
 8007708:	2b00      	cmp	r3, #0
 800770a:	d010      	beq.n	800772e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	699a      	ldr	r2, [r3, #24]
 8007710:	4b64      	ldr	r3, [pc, #400]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 8007712:	69db      	ldr	r3, [r3, #28]
 8007714:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007718:	429a      	cmp	r2, r3
 800771a:	d908      	bls.n	800772e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800771c:	4b61      	ldr	r3, [pc, #388]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	495e      	ldr	r1, [pc, #376]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 800772a:	4313      	orrs	r3, r2
 800772c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b00      	cmp	r3, #0
 8007738:	d010      	beq.n	800775c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69da      	ldr	r2, [r3, #28]
 800773e:	4b59      	ldr	r3, [pc, #356]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 8007740:	6a1b      	ldr	r3, [r3, #32]
 8007742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007746:	429a      	cmp	r2, r3
 8007748:	d908      	bls.n	800775c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800774a:	4b56      	ldr	r3, [pc, #344]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	4953      	ldr	r1, [pc, #332]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 8007758:	4313      	orrs	r3, r2
 800775a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d010      	beq.n	800778a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68da      	ldr	r2, [r3, #12]
 800776c:	4b4d      	ldr	r3, [pc, #308]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	f003 030f 	and.w	r3, r3, #15
 8007774:	429a      	cmp	r2, r3
 8007776:	d908      	bls.n	800778a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007778:	4b4a      	ldr	r3, [pc, #296]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	f023 020f 	bic.w	r2, r3, #15
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	4947      	ldr	r1, [pc, #284]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 8007786:	4313      	orrs	r3, r2
 8007788:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	d055      	beq.n	8007842 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007796:	4b43      	ldr	r3, [pc, #268]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	4940      	ldr	r1, [pc, #256]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d107      	bne.n	80077c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80077b0:	4b3c      	ldr	r3, [pc, #240]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d121      	bne.n	8007800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e0f6      	b.n	80079ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d107      	bne.n	80077d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077c8:	4b36      	ldr	r3, [pc, #216]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d115      	bne.n	8007800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0ea      	b.n	80079ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d107      	bne.n	80077f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077e0:	4b30      	ldr	r3, [pc, #192]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d109      	bne.n	8007800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e0de      	b.n	80079ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077f0:	4b2c      	ldr	r3, [pc, #176]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 0304 	and.w	r3, r3, #4
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0d6      	b.n	80079ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007800:	4b28      	ldr	r3, [pc, #160]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	f023 0207 	bic.w	r2, r3, #7
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	4925      	ldr	r1, [pc, #148]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 800780e:	4313      	orrs	r3, r2
 8007810:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007812:	f7fa fb67 	bl	8001ee4 <HAL_GetTick>
 8007816:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007818:	e00a      	b.n	8007830 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800781a:	f7fa fb63 	bl	8001ee4 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007828:	4293      	cmp	r3, r2
 800782a:	d901      	bls.n	8007830 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e0be      	b.n	80079ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007830:	4b1c      	ldr	r3, [pc, #112]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	429a      	cmp	r2, r3
 8007840:	d1eb      	bne.n	800781a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d010      	beq.n	8007870 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	4b14      	ldr	r3, [pc, #80]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	f003 030f 	and.w	r3, r3, #15
 800785a:	429a      	cmp	r2, r3
 800785c:	d208      	bcs.n	8007870 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800785e:	4b11      	ldr	r3, [pc, #68]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	f023 020f 	bic.w	r2, r3, #15
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	490e      	ldr	r1, [pc, #56]	@ (80078a4 <HAL_RCC_ClockConfig+0x244>)
 800786c:	4313      	orrs	r3, r2
 800786e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007870:	4b0b      	ldr	r3, [pc, #44]	@ (80078a0 <HAL_RCC_ClockConfig+0x240>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 030f 	and.w	r3, r3, #15
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d214      	bcs.n	80078a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800787e:	4b08      	ldr	r3, [pc, #32]	@ (80078a0 <HAL_RCC_ClockConfig+0x240>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f023 020f 	bic.w	r2, r3, #15
 8007886:	4906      	ldr	r1, [pc, #24]	@ (80078a0 <HAL_RCC_ClockConfig+0x240>)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	4313      	orrs	r3, r2
 800788c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800788e:	4b04      	ldr	r3, [pc, #16]	@ (80078a0 <HAL_RCC_ClockConfig+0x240>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 030f 	and.w	r3, r3, #15
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	429a      	cmp	r2, r3
 800789a:	d005      	beq.n	80078a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e086      	b.n	80079ae <HAL_RCC_ClockConfig+0x34e>
 80078a0:	52002000 	.word	0x52002000
 80078a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d010      	beq.n	80078d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	4b3f      	ldr	r3, [pc, #252]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 80078ba:	699b      	ldr	r3, [r3, #24]
 80078bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d208      	bcs.n	80078d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078c4:	4b3c      	ldr	r3, [pc, #240]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	4939      	ldr	r1, [pc, #228]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d010      	beq.n	8007904 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695a      	ldr	r2, [r3, #20]
 80078e6:	4b34      	ldr	r3, [pc, #208]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d208      	bcs.n	8007904 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078f2:	4b31      	ldr	r3, [pc, #196]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	492e      	ldr	r1, [pc, #184]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 8007900:	4313      	orrs	r3, r2
 8007902:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0310 	and.w	r3, r3, #16
 800790c:	2b00      	cmp	r3, #0
 800790e:	d010      	beq.n	8007932 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	699a      	ldr	r2, [r3, #24]
 8007914:	4b28      	ldr	r3, [pc, #160]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800791c:	429a      	cmp	r2, r3
 800791e:	d208      	bcs.n	8007932 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007920:	4b25      	ldr	r3, [pc, #148]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	4922      	ldr	r1, [pc, #136]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 800792e:	4313      	orrs	r3, r2
 8007930:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b00      	cmp	r3, #0
 800793c:	d010      	beq.n	8007960 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	69da      	ldr	r2, [r3, #28]
 8007942:	4b1d      	ldr	r3, [pc, #116]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800794a:	429a      	cmp	r2, r3
 800794c:	d208      	bcs.n	8007960 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800794e:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	4917      	ldr	r1, [pc, #92]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 800795c:	4313      	orrs	r3, r2
 800795e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007960:	f000 f89e 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
 8007964:	4602      	mov	r2, r0
 8007966:	4b14      	ldr	r3, [pc, #80]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	0a1b      	lsrs	r3, r3, #8
 800796c:	f003 030f 	and.w	r3, r3, #15
 8007970:	4912      	ldr	r1, [pc, #72]	@ (80079bc <HAL_RCC_ClockConfig+0x35c>)
 8007972:	5ccb      	ldrb	r3, [r1, r3]
 8007974:	f003 031f 	and.w	r3, r3, #31
 8007978:	fa22 f303 	lsr.w	r3, r2, r3
 800797c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800797e:	4b0e      	ldr	r3, [pc, #56]	@ (80079b8 <HAL_RCC_ClockConfig+0x358>)
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	4a0d      	ldr	r2, [pc, #52]	@ (80079bc <HAL_RCC_ClockConfig+0x35c>)
 8007988:	5cd3      	ldrb	r3, [r2, r3]
 800798a:	f003 031f 	and.w	r3, r3, #31
 800798e:	693a      	ldr	r2, [r7, #16]
 8007990:	fa22 f303 	lsr.w	r3, r2, r3
 8007994:	4a0a      	ldr	r2, [pc, #40]	@ (80079c0 <HAL_RCC_ClockConfig+0x360>)
 8007996:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007998:	4a0a      	ldr	r2, [pc, #40]	@ (80079c4 <HAL_RCC_ClockConfig+0x364>)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800799e:	4b0a      	ldr	r3, [pc, #40]	@ (80079c8 <HAL_RCC_ClockConfig+0x368>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fa fa54 	bl	8001e50 <HAL_InitTick>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3718      	adds	r7, #24
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	58024400 	.word	0x58024400
 80079bc:	0800e5b8 	.word	0x0800e5b8
 80079c0:	24000444 	.word	0x24000444
 80079c4:	24000440 	.word	0x24000440
 80079c8:	24000448 	.word	0x24000448

080079cc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08c      	sub	sp, #48	@ 0x30
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d12a      	bne.n	8007a34 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80079de:	4b2d      	ldr	r3, [pc, #180]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 80079e0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80079e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80079ee:	4b29      	ldr	r3, [pc, #164]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 80079f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80079fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a02:	2302      	movs	r3, #2
 8007a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a06:	2303      	movs	r3, #3
 8007a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007a12:	f107 031c 	add.w	r3, r7, #28
 8007a16:	4619      	mov	r1, r3
 8007a18:	481f      	ldr	r0, [pc, #124]	@ (8007a98 <HAL_RCC_MCOConfig+0xcc>)
 8007a1a:	f7fe ffbb 	bl	8006994 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	430b      	orrs	r3, r1
 8007a2c:	4919      	ldr	r1, [pc, #100]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007a32:	e02a      	b.n	8007a8a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007a34:	4b17      	ldr	r3, [pc, #92]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 8007a36:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007a3a:	4a16      	ldr	r2, [pc, #88]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 8007a3c:	f043 0304 	orr.w	r3, r3, #4
 8007a40:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007a44:	4b13      	ldr	r3, [pc, #76]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 8007a46:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007a4a:	f003 0304 	and.w	r3, r3, #4
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007a52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a58:	2302      	movs	r3, #2
 8007a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007a64:	2300      	movs	r3, #0
 8007a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007a68:	f107 031c 	add.w	r3, r7, #28
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	480b      	ldr	r0, [pc, #44]	@ (8007a9c <HAL_RCC_MCOConfig+0xd0>)
 8007a70:	f7fe ff90 	bl	8006994 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007a74:	4b07      	ldr	r3, [pc, #28]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	01d9      	lsls	r1, r3, #7
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	430b      	orrs	r3, r1
 8007a84:	4903      	ldr	r1, [pc, #12]	@ (8007a94 <HAL_RCC_MCOConfig+0xc8>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	610b      	str	r3, [r1, #16]
}
 8007a8a:	bf00      	nop
 8007a8c:	3730      	adds	r7, #48	@ 0x30
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	58024400 	.word	0x58024400
 8007a98:	58020000 	.word	0x58020000
 8007a9c:	58020800 	.word	0x58020800

08007aa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b089      	sub	sp, #36	@ 0x24
 8007aa4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007aa6:	4bb3      	ldr	r3, [pc, #716]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aae:	2b18      	cmp	r3, #24
 8007ab0:	f200 8155 	bhi.w	8007d5e <HAL_RCC_GetSysClockFreq+0x2be>
 8007ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aba:	bf00      	nop
 8007abc:	08007b21 	.word	0x08007b21
 8007ac0:	08007d5f 	.word	0x08007d5f
 8007ac4:	08007d5f 	.word	0x08007d5f
 8007ac8:	08007d5f 	.word	0x08007d5f
 8007acc:	08007d5f 	.word	0x08007d5f
 8007ad0:	08007d5f 	.word	0x08007d5f
 8007ad4:	08007d5f 	.word	0x08007d5f
 8007ad8:	08007d5f 	.word	0x08007d5f
 8007adc:	08007b47 	.word	0x08007b47
 8007ae0:	08007d5f 	.word	0x08007d5f
 8007ae4:	08007d5f 	.word	0x08007d5f
 8007ae8:	08007d5f 	.word	0x08007d5f
 8007aec:	08007d5f 	.word	0x08007d5f
 8007af0:	08007d5f 	.word	0x08007d5f
 8007af4:	08007d5f 	.word	0x08007d5f
 8007af8:	08007d5f 	.word	0x08007d5f
 8007afc:	08007b4d 	.word	0x08007b4d
 8007b00:	08007d5f 	.word	0x08007d5f
 8007b04:	08007d5f 	.word	0x08007d5f
 8007b08:	08007d5f 	.word	0x08007d5f
 8007b0c:	08007d5f 	.word	0x08007d5f
 8007b10:	08007d5f 	.word	0x08007d5f
 8007b14:	08007d5f 	.word	0x08007d5f
 8007b18:	08007d5f 	.word	0x08007d5f
 8007b1c:	08007b53 	.word	0x08007b53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b20:	4b94      	ldr	r3, [pc, #592]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d009      	beq.n	8007b40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b2c:	4b91      	ldr	r3, [pc, #580]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	08db      	lsrs	r3, r3, #3
 8007b32:	f003 0303 	and.w	r3, r3, #3
 8007b36:	4a90      	ldr	r2, [pc, #576]	@ (8007d78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b38:	fa22 f303 	lsr.w	r3, r2, r3
 8007b3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007b3e:	e111      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b40:	4b8d      	ldr	r3, [pc, #564]	@ (8007d78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b42:	61bb      	str	r3, [r7, #24]
      break;
 8007b44:	e10e      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007b46:	4b8d      	ldr	r3, [pc, #564]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b48:	61bb      	str	r3, [r7, #24]
      break;
 8007b4a:	e10b      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8007d80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b4e:	61bb      	str	r3, [r7, #24]
      break;
 8007b50:	e108      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b52:	4b88      	ldr	r3, [pc, #544]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b56:	f003 0303 	and.w	r3, r3, #3
 8007b5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007b5c:	4b85      	ldr	r3, [pc, #532]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b60:	091b      	lsrs	r3, r3, #4
 8007b62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b68:	4b82      	ldr	r3, [pc, #520]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b72:	4b80      	ldr	r3, [pc, #512]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b76:	08db      	lsrs	r3, r3, #3
 8007b78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	fb02 f303 	mul.w	r3, r2, r3
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f000 80e1 	beq.w	8007d58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	f000 8083 	beq.w	8007ca4 <HAL_RCC_GetSysClockFreq+0x204>
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	f200 80a1 	bhi.w	8007ce8 <HAL_RCC_GetSysClockFreq+0x248>
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d003      	beq.n	8007bb4 <HAL_RCC_GetSysClockFreq+0x114>
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d056      	beq.n	8007c60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007bb2:	e099      	b.n	8007ce8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bb4:	4b6f      	ldr	r3, [pc, #444]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0320 	and.w	r3, r3, #32
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d02d      	beq.n	8007c1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	08db      	lsrs	r3, r3, #3
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	4a6b      	ldr	r2, [pc, #428]	@ (8007d78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	ee07 3a90 	vmov	s15, r3
 8007bd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bea:	4b62      	ldr	r3, [pc, #392]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bfe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c1a:	e087      	b.n	8007d2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c26:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007d88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2e:	4b51      	ldr	r3, [pc, #324]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c36:	ee07 3a90 	vmov	s15, r3
 8007c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c42:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c5e:	e065      	b.n	8007d2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c6a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007d8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c72:	4b40      	ldr	r3, [pc, #256]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7a:	ee07 3a90 	vmov	s15, r3
 8007c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c86:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ca2:	e043      	b.n	8007d2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007d90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ce6:	e021      	b.n	8007d2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007d8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d02:	ee07 3a90 	vmov	s15, r3
 8007d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d0e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007d84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d2c:	4b11      	ldr	r3, [pc, #68]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d30:	0a5b      	lsrs	r3, r3, #9
 8007d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d36:	3301      	adds	r3, #1
 8007d38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d44:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d50:	ee17 3a90 	vmov	r3, s15
 8007d54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007d56:	e005      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61bb      	str	r3, [r7, #24]
      break;
 8007d5c:	e002      	b.n	8007d64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007d5e:	4b07      	ldr	r3, [pc, #28]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d60:	61bb      	str	r3, [r7, #24]
      break;
 8007d62:	bf00      	nop
  }

  return sysclockfreq;
 8007d64:	69bb      	ldr	r3, [r7, #24]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3724      	adds	r7, #36	@ 0x24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	58024400 	.word	0x58024400
 8007d78:	03d09000 	.word	0x03d09000
 8007d7c:	003d0900 	.word	0x003d0900
 8007d80:	007a1200 	.word	0x007a1200
 8007d84:	46000000 	.word	0x46000000
 8007d88:	4c742400 	.word	0x4c742400
 8007d8c:	4a742400 	.word	0x4a742400
 8007d90:	4af42400 	.word	0x4af42400

08007d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007d9a:	f7ff fe81 	bl	8007aa0 <HAL_RCC_GetSysClockFreq>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	4b10      	ldr	r3, [pc, #64]	@ (8007de4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	0a1b      	lsrs	r3, r3, #8
 8007da6:	f003 030f 	and.w	r3, r3, #15
 8007daa:	490f      	ldr	r1, [pc, #60]	@ (8007de8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dac:	5ccb      	ldrb	r3, [r1, r3]
 8007dae:	f003 031f 	and.w	r3, r3, #31
 8007db2:	fa22 f303 	lsr.w	r3, r2, r3
 8007db6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007db8:	4b0a      	ldr	r3, [pc, #40]	@ (8007de4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	4a09      	ldr	r2, [pc, #36]	@ (8007de8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dc2:	5cd3      	ldrb	r3, [r2, r3]
 8007dc4:	f003 031f 	and.w	r3, r3, #31
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	fa22 f303 	lsr.w	r3, r2, r3
 8007dce:	4a07      	ldr	r2, [pc, #28]	@ (8007dec <HAL_RCC_GetHCLKFreq+0x58>)
 8007dd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007dd2:	4a07      	ldr	r2, [pc, #28]	@ (8007df0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007dd8:	4b04      	ldr	r3, [pc, #16]	@ (8007dec <HAL_RCC_GetHCLKFreq+0x58>)
 8007dda:	681b      	ldr	r3, [r3, #0]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	58024400 	.word	0x58024400
 8007de8:	0800e5b8 	.word	0x0800e5b8
 8007dec:	24000444 	.word	0x24000444
 8007df0:	24000440 	.word	0x24000440

08007df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007df8:	f7ff ffcc 	bl	8007d94 <HAL_RCC_GetHCLKFreq>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	4b06      	ldr	r3, [pc, #24]	@ (8007e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	091b      	lsrs	r3, r3, #4
 8007e04:	f003 0307 	and.w	r3, r3, #7
 8007e08:	4904      	ldr	r1, [pc, #16]	@ (8007e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e0a:	5ccb      	ldrb	r3, [r1, r3]
 8007e0c:	f003 031f 	and.w	r3, r3, #31
 8007e10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	58024400 	.word	0x58024400
 8007e1c:	0800e5b8 	.word	0x0800e5b8

08007e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007e24:	f7ff ffb6 	bl	8007d94 <HAL_RCC_GetHCLKFreq>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	4b06      	ldr	r3, [pc, #24]	@ (8007e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	0a1b      	lsrs	r3, r3, #8
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	4904      	ldr	r1, [pc, #16]	@ (8007e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e36:	5ccb      	ldrb	r3, [r1, r3]
 8007e38:	f003 031f 	and.w	r3, r3, #31
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	58024400 	.word	0x58024400
 8007e48:	0800e5b8 	.word	0x0800e5b8

08007e4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e50:	b0c8      	sub	sp, #288	@ 0x120
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e58:	2300      	movs	r3, #0
 8007e5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007e70:	2500      	movs	r5, #0
 8007e72:	ea54 0305 	orrs.w	r3, r4, r5
 8007e76:	d049      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007e78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e82:	d02f      	beq.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007e84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e88:	d828      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e8e:	d01a      	beq.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007e90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e94:	d822      	bhi.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e9e:	d007      	beq.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ea0:	e01c      	b.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea2:	4ba7      	ldr	r3, [pc, #668]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea6:	4aa6      	ldr	r2, [pc, #664]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007eae:	e01a      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	2102      	movs	r1, #2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f002 fac3 	bl	800a444 <RCCEx_PLL2_Config>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ec4:	e00f      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eca:	3328      	adds	r3, #40	@ 0x28
 8007ecc:	2102      	movs	r1, #2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f002 fb6a 	bl	800a5a8 <RCCEx_PLL3_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007eda:	e004      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ee2:	e000      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007eee:	4b94      	ldr	r3, [pc, #592]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007efc:	4a90      	ldr	r2, [pc, #576]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007efe:	430b      	orrs	r3, r1
 8007f00:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f02:	e003      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007f18:	f04f 0900 	mov.w	r9, #0
 8007f1c:	ea58 0309 	orrs.w	r3, r8, r9
 8007f20:	d047      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007f22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	d82a      	bhi.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08007f49 	.word	0x08007f49
 8007f38:	08007f57 	.word	0x08007f57
 8007f3c:	08007f6d 	.word	0x08007f6d
 8007f40:	08007f8b 	.word	0x08007f8b
 8007f44:	08007f8b 	.word	0x08007f8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f48:	4b7d      	ldr	r3, [pc, #500]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	4a7c      	ldr	r2, [pc, #496]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f54:	e01a      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f002 fa70 	bl	800a444 <RCCEx_PLL2_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f6a:	e00f      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f70:	3328      	adds	r3, #40	@ 0x28
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f002 fb17 	bl	800a5a8 <RCCEx_PLL3_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f80:	e004      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f88:	e000      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10a      	bne.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f94:	4b6a      	ldr	r3, [pc, #424]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f98:	f023 0107 	bic.w	r1, r3, #7
 8007f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fa2:	4a67      	ldr	r2, [pc, #412]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fa8:	e003      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007faa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007fbe:	f04f 0b00 	mov.w	fp, #0
 8007fc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8007fc6:	d054      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8007fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007fd2:	d036      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8007fd4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007fd8:	d82f      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fde:	d032      	beq.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fe4:	d829      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fe6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fe8:	d02f      	beq.n	800804a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007fea:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fec:	d825      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fee:	2b80      	cmp	r3, #128	@ 0x80
 8007ff0:	d018      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8007ff2:	2b80      	cmp	r3, #128	@ 0x80
 8007ff4:	d821      	bhi.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007ffa:	2b40      	cmp	r3, #64	@ 0x40
 8007ffc:	d007      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007ffe:	e01c      	b.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008000:	4b4f      	ldr	r3, [pc, #316]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008004:	4a4e      	ldr	r2, [pc, #312]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800800a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800800c:	e01e      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800800e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008012:	3308      	adds	r3, #8
 8008014:	2100      	movs	r1, #0
 8008016:	4618      	mov	r0, r3
 8008018:	f002 fa14 	bl	800a444 <RCCEx_PLL2_Config>
 800801c:	4603      	mov	r3, r0
 800801e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008022:	e013      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008028:	3328      	adds	r3, #40	@ 0x28
 800802a:	2100      	movs	r1, #0
 800802c:	4618      	mov	r0, r3
 800802e:	f002 fabb 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008032:	4603      	mov	r3, r0
 8008034:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008038:	e008      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008040:	e004      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008042:	bf00      	nop
 8008044:	e002      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008046:	bf00      	nop
 8008048:	e000      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800804a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008054:	4b3a      	ldr	r3, [pc, #232]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008058:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800805c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008062:	4a37      	ldr	r2, [pc, #220]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008064:	430b      	orrs	r3, r1
 8008066:	6513      	str	r3, [r2, #80]	@ 0x50
 8008068:	e003      	b.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800806e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008072:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800807e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008082:	2300      	movs	r3, #0
 8008084:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008088:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800808c:	460b      	mov	r3, r1
 800808e:	4313      	orrs	r3, r2
 8008090:	d05c      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008098:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800809c:	d03b      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800809e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80080a2:	d834      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080a8:	d037      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80080aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080ae:	d82e      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080b4:	d033      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80080b6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80080ba:	d828      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080c0:	d01a      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80080c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080c6:	d822      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80080cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080d0:	d007      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80080d2:	e01c      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d8:	4a19      	ldr	r2, [pc, #100]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80080e0:	e01e      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e6:	3308      	adds	r3, #8
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f002 f9aa 	bl	800a444 <RCCEx_PLL2_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80080f6:	e013      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fc:	3328      	adds	r3, #40	@ 0x28
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f002 fa51 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008106:	4603      	mov	r3, r0
 8008108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800810c:	e008      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008114:	e004      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008116:	bf00      	nop
 8008118:	e002      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800811e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10d      	bne.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008128:	4b05      	ldr	r3, [pc, #20]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800812a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008136:	4a02      	ldr	r2, [pc, #8]	@ (8008140 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008138:	430b      	orrs	r3, r1
 800813a:	6513      	str	r3, [r2, #80]	@ 0x50
 800813c:	e006      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x300>
 800813e:	bf00      	nop
 8008140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008144:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008148:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800814c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008158:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800815c:	2300      	movs	r3, #0
 800815e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008162:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008166:	460b      	mov	r3, r1
 8008168:	4313      	orrs	r3, r2
 800816a:	d03a      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800816c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008172:	2b30      	cmp	r3, #48	@ 0x30
 8008174:	d01f      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8008176:	2b30      	cmp	r3, #48	@ 0x30
 8008178:	d819      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 800817a:	2b20      	cmp	r3, #32
 800817c:	d00c      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800817e:	2b20      	cmp	r3, #32
 8008180:	d815      	bhi.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d019      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008186:	2b10      	cmp	r3, #16
 8008188:	d111      	bne.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800818a:	4bae      	ldr	r3, [pc, #696]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800818c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818e:	4aad      	ldr	r2, [pc, #692]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008190:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008196:	e011      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800819c:	3308      	adds	r3, #8
 800819e:	2102      	movs	r1, #2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 f94f 	bl	800a444 <RCCEx_PLL2_Config>
 80081a6:	4603      	mov	r3, r0
 80081a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80081ac:	e006      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081b4:	e002      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80081b6:	bf00      	nop
 80081b8:	e000      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80081ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80081c4:	4b9f      	ldr	r3, [pc, #636]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80081cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081d2:	4a9c      	ldr	r2, [pc, #624]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081d4:	430b      	orrs	r3, r1
 80081d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081d8:	e003      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80081ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081f2:	2300      	movs	r3, #0
 80081f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80081f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4313      	orrs	r3, r2
 8008200:	d051      	beq.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008202:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008206:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008208:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800820c:	d035      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800820e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008212:	d82e      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008214:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008218:	d031      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800821a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800821e:	d828      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008224:	d01a      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800822a:	d822      	bhi.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008230:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008234:	d007      	beq.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8008236:	e01c      	b.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008238:	4b82      	ldr	r3, [pc, #520]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800823a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823c:	4a81      	ldr	r2, [pc, #516]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800823e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008244:	e01c      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008246:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800824a:	3308      	adds	r3, #8
 800824c:	2100      	movs	r1, #0
 800824e:	4618      	mov	r0, r3
 8008250:	f002 f8f8 	bl	800a444 <RCCEx_PLL2_Config>
 8008254:	4603      	mov	r3, r0
 8008256:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800825a:	e011      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800825c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008260:	3328      	adds	r3, #40	@ 0x28
 8008262:	2100      	movs	r1, #0
 8008264:	4618      	mov	r0, r3
 8008266:	f002 f99f 	bl	800a5a8 <RCCEx_PLL3_Config>
 800826a:	4603      	mov	r3, r0
 800826c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008270:	e006      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008278:	e002      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800827a:	bf00      	nop
 800827c:	e000      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800827e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008280:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008288:	4b6e      	ldr	r3, [pc, #440]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800828a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800828c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008296:	4a6b      	ldr	r2, [pc, #428]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008298:	430b      	orrs	r3, r1
 800829a:	6513      	str	r3, [r2, #80]	@ 0x50
 800829c:	e003      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800829e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082a2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80082a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80082b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082b6:	2300      	movs	r3, #0
 80082b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80082bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80082c0:	460b      	mov	r3, r1
 80082c2:	4313      	orrs	r3, r2
 80082c4:	d053      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80082c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80082cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082d0:	d033      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80082d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082d6:	d82c      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082dc:	d02f      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80082de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082e2:	d826      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082e8:	d02b      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80082ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082ee:	d820      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082f4:	d012      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80082f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082fa:	d81a      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d022      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008304:	d115      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008306:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830a:	3308      	adds	r3, #8
 800830c:	2101      	movs	r1, #1
 800830e:	4618      	mov	r0, r3
 8008310:	f002 f898 	bl	800a444 <RCCEx_PLL2_Config>
 8008314:	4603      	mov	r3, r0
 8008316:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800831a:	e015      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800831c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008320:	3328      	adds	r3, #40	@ 0x28
 8008322:	2101      	movs	r1, #1
 8008324:	4618      	mov	r0, r3
 8008326:	f002 f93f 	bl	800a5a8 <RCCEx_PLL3_Config>
 800832a:	4603      	mov	r3, r0
 800832c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008330:	e00a      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008338:	e006      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800833a:	bf00      	nop
 800833c:	e004      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800833e:	bf00      	nop
 8008340:	e002      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008342:	bf00      	nop
 8008344:	e000      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008346:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008348:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008350:	4b3c      	ldr	r3, [pc, #240]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008354:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800835c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800835e:	4a39      	ldr	r2, [pc, #228]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008360:	430b      	orrs	r3, r1
 8008362:	6513      	str	r3, [r2, #80]	@ 0x50
 8008364:	e003      	b.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008366:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800836a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800836e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800837a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800837e:	2300      	movs	r3, #0
 8008380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008384:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008388:	460b      	mov	r3, r1
 800838a:	4313      	orrs	r3, r2
 800838c:	d060      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800838e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008392:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008396:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800839a:	d039      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800839c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80083a0:	d832      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083a6:	d035      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80083a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80083ac:	d82c      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b2:	d031      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80083b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083b8:	d826      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083be:	d02d      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80083c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80083c4:	d820      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083ca:	d012      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80083cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083d0:	d81a      	bhi.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d024      	beq.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80083d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083da:	d115      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e0:	3308      	adds	r3, #8
 80083e2:	2101      	movs	r1, #1
 80083e4:	4618      	mov	r0, r3
 80083e6:	f002 f82d 	bl	800a444 <RCCEx_PLL2_Config>
 80083ea:	4603      	mov	r3, r0
 80083ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083f0:	e017      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f6:	3328      	adds	r3, #40	@ 0x28
 80083f8:	2101      	movs	r1, #1
 80083fa:	4618      	mov	r0, r3
 80083fc:	f002 f8d4 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008400:	4603      	mov	r3, r0
 8008402:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008406:	e00c      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800840e:	e008      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008410:	bf00      	nop
 8008412:	e006      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008414:	bf00      	nop
 8008416:	e004      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008418:	bf00      	nop
 800841a:	e002      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800841c:	bf00      	nop
 800841e:	e000      	b.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008422:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10e      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800842a:	4b06      	ldr	r3, [pc, #24]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800842c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800842e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008432:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800843a:	4a02      	ldr	r2, [pc, #8]	@ (8008444 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800843c:	430b      	orrs	r3, r1
 800843e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008440:	e006      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008442:	bf00      	nop
 8008444:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008448:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800844c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008450:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800845c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008460:	2300      	movs	r3, #0
 8008462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800846a:	460b      	mov	r3, r1
 800846c:	4313      	orrs	r3, r2
 800846e:	d037      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008474:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008476:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800847a:	d00e      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800847c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008480:	d816      	bhi.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008482:	2b00      	cmp	r3, #0
 8008484:	d018      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008486:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800848a:	d111      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800848c:	4bc4      	ldr	r3, [pc, #784]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800848e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008490:	4ac3      	ldr	r2, [pc, #780]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008492:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008496:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008498:	e00f      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800849a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800849e:	3308      	adds	r3, #8
 80084a0:	2101      	movs	r1, #1
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 ffce 	bl	800a444 <RCCEx_PLL2_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80084ae:	e004      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084b6:	e000      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80084b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084c2:	4bb7      	ldr	r3, [pc, #732]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80084ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084d0:	4ab3      	ldr	r2, [pc, #716]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084d2:	430b      	orrs	r3, r1
 80084d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80084d6:	e003      	b.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80084ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084f0:	2300      	movs	r3, #0
 80084f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80084f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80084fa:	460b      	mov	r3, r1
 80084fc:	4313      	orrs	r3, r2
 80084fe:	d039      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008500:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008506:	2b03      	cmp	r3, #3
 8008508:	d81c      	bhi.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800850a:	a201      	add	r2, pc, #4	@ (adr r2, 8008510 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800850c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008510:	0800854d 	.word	0x0800854d
 8008514:	08008521 	.word	0x08008521
 8008518:	0800852f 	.word	0x0800852f
 800851c:	0800854d 	.word	0x0800854d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008520:	4b9f      	ldr	r3, [pc, #636]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008524:	4a9e      	ldr	r2, [pc, #632]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800852a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800852c:	e00f      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800852e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008532:	3308      	adds	r3, #8
 8008534:	2102      	movs	r1, #2
 8008536:	4618      	mov	r0, r3
 8008538:	f001 ff84 	bl	800a444 <RCCEx_PLL2_Config>
 800853c:	4603      	mov	r3, r0
 800853e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008542:	e004      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800854a:	e000      	b.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800854c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800854e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10a      	bne.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008556:	4b92      	ldr	r3, [pc, #584]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855a:	f023 0103 	bic.w	r1, r3, #3
 800855e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008562:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008564:	4a8e      	ldr	r2, [pc, #568]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008566:	430b      	orrs	r3, r1
 8008568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800856a:	e003      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800856c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008570:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008574:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008580:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008584:	2300      	movs	r3, #0
 8008586:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800858a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800858e:	460b      	mov	r3, r1
 8008590:	4313      	orrs	r3, r2
 8008592:	f000 8099 	beq.w	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008596:	4b83      	ldr	r3, [pc, #524]	@ (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a82      	ldr	r2, [pc, #520]	@ (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800859c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80085a2:	f7f9 fc9f 	bl	8001ee4 <HAL_GetTick>
 80085a6:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085aa:	e00b      	b.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085ac:	f7f9 fc9a 	bl	8001ee4 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b64      	cmp	r3, #100	@ 0x64
 80085ba:	d903      	bls.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085c2:	e005      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085c4:	4b77      	ldr	r3, [pc, #476]	@ (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0ed      	beq.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80085d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d173      	bne.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80085d8:	4b71      	ldr	r3, [pc, #452]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80085dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085e4:	4053      	eors	r3, r2
 80085e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d015      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085ee:	4b6c      	ldr	r3, [pc, #432]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085fa:	4b69      	ldr	r3, [pc, #420]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085fe:	4a68      	ldr	r2, [pc, #416]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008604:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008606:	4b66      	ldr	r3, [pc, #408]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860a:	4a65      	ldr	r2, [pc, #404]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800860c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008610:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008612:	4a63      	ldr	r2, [pc, #396]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008618:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800861a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800861e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008626:	d118      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008628:	f7f9 fc5c 	bl	8001ee4 <HAL_GetTick>
 800862c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008630:	e00d      	b.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008632:	f7f9 fc57 	bl	8001ee4 <HAL_GetTick>
 8008636:	4602      	mov	r2, r0
 8008638:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800863c:	1ad2      	subs	r2, r2, r3
 800863e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008642:	429a      	cmp	r2, r3
 8008644:	d903      	bls.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800864c:	e005      	b.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800864e:	4b54      	ldr	r3, [pc, #336]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0eb      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800865a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800865e:	2b00      	cmp	r3, #0
 8008660:	d129      	bne.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800866a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800866e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008672:	d10e      	bne.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008674:	4b4a      	ldr	r3, [pc, #296]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800867c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008680:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008684:	091a      	lsrs	r2, r3, #4
 8008686:	4b48      	ldr	r3, [pc, #288]	@ (80087a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008688:	4013      	ands	r3, r2
 800868a:	4a45      	ldr	r2, [pc, #276]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800868c:	430b      	orrs	r3, r1
 800868e:	6113      	str	r3, [r2, #16]
 8008690:	e005      	b.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008692:	4b43      	ldr	r3, [pc, #268]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	4a42      	ldr	r2, [pc, #264]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008698:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800869c:	6113      	str	r3, [r2, #16]
 800869e:	4b40      	ldr	r3, [pc, #256]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80086a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ae:	4a3c      	ldr	r2, [pc, #240]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086b0:	430b      	orrs	r3, r1
 80086b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80086b4:	e008      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80086b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80086be:	e003      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80086c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f002 0301 	and.w	r3, r2, #1
 80086d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f000 8090 	beq.w	800880a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80086ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086f2:	2b28      	cmp	r3, #40	@ 0x28
 80086f4:	d870      	bhi.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80086f6:	a201      	add	r2, pc, #4	@ (adr r2, 80086fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80086f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fc:	080087e1 	.word	0x080087e1
 8008700:	080087d9 	.word	0x080087d9
 8008704:	080087d9 	.word	0x080087d9
 8008708:	080087d9 	.word	0x080087d9
 800870c:	080087d9 	.word	0x080087d9
 8008710:	080087d9 	.word	0x080087d9
 8008714:	080087d9 	.word	0x080087d9
 8008718:	080087d9 	.word	0x080087d9
 800871c:	080087ad 	.word	0x080087ad
 8008720:	080087d9 	.word	0x080087d9
 8008724:	080087d9 	.word	0x080087d9
 8008728:	080087d9 	.word	0x080087d9
 800872c:	080087d9 	.word	0x080087d9
 8008730:	080087d9 	.word	0x080087d9
 8008734:	080087d9 	.word	0x080087d9
 8008738:	080087d9 	.word	0x080087d9
 800873c:	080087c3 	.word	0x080087c3
 8008740:	080087d9 	.word	0x080087d9
 8008744:	080087d9 	.word	0x080087d9
 8008748:	080087d9 	.word	0x080087d9
 800874c:	080087d9 	.word	0x080087d9
 8008750:	080087d9 	.word	0x080087d9
 8008754:	080087d9 	.word	0x080087d9
 8008758:	080087d9 	.word	0x080087d9
 800875c:	080087e1 	.word	0x080087e1
 8008760:	080087d9 	.word	0x080087d9
 8008764:	080087d9 	.word	0x080087d9
 8008768:	080087d9 	.word	0x080087d9
 800876c:	080087d9 	.word	0x080087d9
 8008770:	080087d9 	.word	0x080087d9
 8008774:	080087d9 	.word	0x080087d9
 8008778:	080087d9 	.word	0x080087d9
 800877c:	080087e1 	.word	0x080087e1
 8008780:	080087d9 	.word	0x080087d9
 8008784:	080087d9 	.word	0x080087d9
 8008788:	080087d9 	.word	0x080087d9
 800878c:	080087d9 	.word	0x080087d9
 8008790:	080087d9 	.word	0x080087d9
 8008794:	080087d9 	.word	0x080087d9
 8008798:	080087d9 	.word	0x080087d9
 800879c:	080087e1 	.word	0x080087e1
 80087a0:	58024400 	.word	0x58024400
 80087a4:	58024800 	.word	0x58024800
 80087a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087b0:	3308      	adds	r3, #8
 80087b2:	2101      	movs	r1, #1
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 fe45 	bl	800a444 <RCCEx_PLL2_Config>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80087c0:	e00f      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c6:	3328      	adds	r3, #40	@ 0x28
 80087c8:	2101      	movs	r1, #1
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 feec 	bl	800a5a8 <RCCEx_PLL3_Config>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80087d6:	e004      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80087de:	e000      	b.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80087e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d10b      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087ea:	4bc0      	ldr	r3, [pc, #768]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80087f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087fa:	4abc      	ldr	r2, [pc, #752]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80087fc:	430b      	orrs	r3, r1
 80087fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8008800:	e003      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008802:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008806:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800880a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800880e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008812:	f002 0302 	and.w	r3, r2, #2
 8008816:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800881a:	2300      	movs	r3, #0
 800881c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008820:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008824:	460b      	mov	r3, r1
 8008826:	4313      	orrs	r3, r2
 8008828:	d043      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800882a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800882e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008832:	2b05      	cmp	r3, #5
 8008834:	d824      	bhi.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8008836:	a201      	add	r2, pc, #4	@ (adr r2, 800883c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	08008889 	.word	0x08008889
 8008840:	08008855 	.word	0x08008855
 8008844:	0800886b 	.word	0x0800886b
 8008848:	08008889 	.word	0x08008889
 800884c:	08008889 	.word	0x08008889
 8008850:	08008889 	.word	0x08008889
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008858:	3308      	adds	r3, #8
 800885a:	2101      	movs	r1, #1
 800885c:	4618      	mov	r0, r3
 800885e:	f001 fdf1 	bl	800a444 <RCCEx_PLL2_Config>
 8008862:	4603      	mov	r3, r0
 8008864:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008868:	e00f      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800886a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800886e:	3328      	adds	r3, #40	@ 0x28
 8008870:	2101      	movs	r1, #1
 8008872:	4618      	mov	r0, r3
 8008874:	f001 fe98 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800887e:	e004      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008886:	e000      	b.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8008888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800888a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008892:	4b96      	ldr	r3, [pc, #600]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008896:	f023 0107 	bic.w	r1, r3, #7
 800889a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a2:	4a92      	ldr	r2, [pc, #584]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80088a8:	e003      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088aa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f002 0304 	and.w	r3, r2, #4
 80088be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80088c2:	2300      	movs	r3, #0
 80088c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80088c8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80088cc:	460b      	mov	r3, r1
 80088ce:	4313      	orrs	r3, r2
 80088d0:	d043      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80088d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80088da:	2b05      	cmp	r3, #5
 80088dc:	d824      	bhi.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80088de:	a201      	add	r2, pc, #4	@ (adr r2, 80088e4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	08008931 	.word	0x08008931
 80088e8:	080088fd 	.word	0x080088fd
 80088ec:	08008913 	.word	0x08008913
 80088f0:	08008931 	.word	0x08008931
 80088f4:	08008931 	.word	0x08008931
 80088f8:	08008931 	.word	0x08008931
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008900:	3308      	adds	r3, #8
 8008902:	2101      	movs	r1, #1
 8008904:	4618      	mov	r0, r3
 8008906:	f001 fd9d 	bl	800a444 <RCCEx_PLL2_Config>
 800890a:	4603      	mov	r3, r0
 800890c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008910:	e00f      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008916:	3328      	adds	r3, #40	@ 0x28
 8008918:	2101      	movs	r1, #1
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fe44 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008926:	e004      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800892e:	e000      	b.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008930:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008932:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800893a:	4b6c      	ldr	r3, [pc, #432]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800893c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800893e:	f023 0107 	bic.w	r1, r3, #7
 8008942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008946:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800894a:	4a68      	ldr	r2, [pc, #416]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800894c:	430b      	orrs	r3, r1
 800894e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008950:	e003      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008952:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008956:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800895a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f002 0320 	and.w	r3, r2, #32
 8008966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800896a:	2300      	movs	r3, #0
 800896c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008970:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008974:	460b      	mov	r3, r1
 8008976:	4313      	orrs	r3, r2
 8008978:	d055      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800897a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800897e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008986:	d033      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800898c:	d82c      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800898e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008992:	d02f      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008998:	d826      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800899a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800899e:	d02b      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80089a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80089a4:	d820      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80089a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089aa:	d012      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80089ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b0:	d81a      	bhi.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d022      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80089b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ba:	d115      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089c0:	3308      	adds	r3, #8
 80089c2:	2100      	movs	r1, #0
 80089c4:	4618      	mov	r0, r3
 80089c6:	f001 fd3d 	bl	800a444 <RCCEx_PLL2_Config>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089d0:	e015      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d6:	3328      	adds	r3, #40	@ 0x28
 80089d8:	2102      	movs	r1, #2
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 fde4 	bl	800a5a8 <RCCEx_PLL3_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089e6:	e00a      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80089ee:	e006      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089f0:	bf00      	nop
 80089f2:	e004      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089f4:	bf00      	nop
 80089f6:	e002      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089f8:	bf00      	nop
 80089fa:	e000      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80089fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10b      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a06:	4b39      	ldr	r3, [pc, #228]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a0a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a16:	4a35      	ldr	r2, [pc, #212]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a1c:	e003      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008a36:	2300      	movs	r3, #0
 8008a38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4313      	orrs	r3, r2
 8008a44:	d058      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008a46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a4e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a52:	d033      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008a54:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a58:	d82c      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5e:	d02f      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008a60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a64:	d826      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a6a:	d02b      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008a6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a70:	d820      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a76:	d012      	beq.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a7c:	d81a      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d022      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a86:	d115      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	2100      	movs	r1, #0
 8008a90:	4618      	mov	r0, r3
 8008a92:	f001 fcd7 	bl	800a444 <RCCEx_PLL2_Config>
 8008a96:	4603      	mov	r3, r0
 8008a98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a9c:	e015      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aa2:	3328      	adds	r3, #40	@ 0x28
 8008aa4:	2102      	movs	r1, #2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f001 fd7e 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008aac:	4603      	mov	r3, r0
 8008aae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008ab2:	e00a      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008aba:	e006      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008abc:	bf00      	nop
 8008abe:	e004      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ac0:	bf00      	nop
 8008ac2:	e002      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ac4:	bf00      	nop
 8008ac6:	e000      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10e      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ad2:	4b06      	ldr	r3, [pc, #24]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ade:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ae2:	4a02      	ldr	r2, [pc, #8]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008ae8:	e006      	b.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008aea:	bf00      	nop
 8008aec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008af4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b00:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b12:	460b      	mov	r3, r1
 8008b14:	4313      	orrs	r3, r2
 8008b16:	d055      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b20:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b24:	d033      	beq.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008b26:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b2a:	d82c      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b30:	d02f      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008b32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b36:	d826      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b38:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b3c:	d02b      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008b3e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008b42:	d820      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b48:	d012      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008b4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b4e:	d81a      	bhi.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d022      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b58:	d115      	bne.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b5e:	3308      	adds	r3, #8
 8008b60:	2100      	movs	r1, #0
 8008b62:	4618      	mov	r0, r3
 8008b64:	f001 fc6e 	bl	800a444 <RCCEx_PLL2_Config>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b6e:	e015      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b74:	3328      	adds	r3, #40	@ 0x28
 8008b76:	2102      	movs	r1, #2
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 fd15 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b84:	e00a      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b8c:	e006      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b8e:	bf00      	nop
 8008b90:	e004      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b92:	bf00      	nop
 8008b94:	e002      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b96:	bf00      	nop
 8008b98:	e000      	b.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008b9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b9c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10b      	bne.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008ba4:	4ba1      	ldr	r3, [pc, #644]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008bb4:	4a9d      	ldr	r2, [pc, #628]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008bb6:	430b      	orrs	r3, r1
 8008bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bba:	e003      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bc0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	f002 0308 	and.w	r3, r2, #8
 8008bd0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008bda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008bde:	460b      	mov	r3, r1
 8008be0:	4313      	orrs	r3, r2
 8008be2:	d01e      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bf0:	d10c      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf6:	3328      	adds	r3, #40	@ 0x28
 8008bf8:	2102      	movs	r1, #2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f001 fcd4 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d002      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c0c:	4b87      	ldr	r3, [pc, #540]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c10:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c1c:	4a83      	ldr	r2, [pc, #524]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f002 0310 	and.w	r3, r2, #16
 8008c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c32:	2300      	movs	r3, #0
 8008c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008c38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	d01e      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008c42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c4e:	d10c      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c54:	3328      	adds	r3, #40	@ 0x28
 8008c56:	2102      	movs	r1, #2
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f001 fca5 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d002      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c6a:	4b70      	ldr	r3, [pc, #448]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c7a:	4a6c      	ldr	r2, [pc, #432]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c88:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c90:	2300      	movs	r3, #0
 8008c92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	d03e      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008ca0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ca4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cac:	d022      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008cae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cb2:	d81b      	bhi.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cbc:	d00b      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008cbe:	e015      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 fbbb 	bl	800a444 <RCCEx_PLL2_Config>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008cd4:	e00f      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cda:	3328      	adds	r3, #40	@ 0x28
 8008cdc:	2102      	movs	r1, #2
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 fc62 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008cea:	e004      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008cf2:	e000      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10b      	bne.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008d06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d0e:	4a47      	ldr	r2, [pc, #284]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d10:	430b      	orrs	r3, r1
 8008d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d14:	e003      	b.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d16:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008d34:	460b      	mov	r3, r1
 8008d36:	4313      	orrs	r3, r2
 8008d38:	d03b      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d46:	d01f      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008d48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d4c:	d818      	bhi.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d52:	d003      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008d54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d58:	d007      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008d5a:	e011      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d5c:	4b33      	ldr	r3, [pc, #204]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d60:	4a32      	ldr	r2, [pc, #200]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d68:	e00f      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d6e:	3328      	adds	r3, #40	@ 0x28
 8008d70:	2101      	movs	r1, #1
 8008d72:	4618      	mov	r0, r3
 8008d74:	f001 fc18 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d7e:	e004      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d86:	e000      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d92:	4b26      	ldr	r3, [pc, #152]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da2:	4a22      	ldr	r2, [pc, #136]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008da4:	430b      	orrs	r3, r1
 8008da6:	6553      	str	r3, [r2, #84]	@ 0x54
 8008da8:	e003      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008daa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dae:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008dbe:	673b      	str	r3, [r7, #112]	@ 0x70
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008dc4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	d034      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d003      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008dd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ddc:	d007      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008dde:	e011      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de0:	4b12      	ldr	r3, [pc, #72]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	4a11      	ldr	r2, [pc, #68]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008dec:	e00e      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df2:	3308      	adds	r3, #8
 8008df4:	2102      	movs	r1, #2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 fb24 	bl	800a444 <RCCEx_PLL2_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e02:	e003      	b.n	8008e0c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10d      	bne.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008e14:	4b05      	ldr	r3, [pc, #20]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e22:	4a02      	ldr	r2, [pc, #8]	@ (8008e2c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e24:	430b      	orrs	r3, r1
 8008e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e28:	e006      	b.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008e2a:	bf00      	nop
 8008e2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e46:	2300      	movs	r3, #0
 8008e48:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e4a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4313      	orrs	r3, r2
 8008e52:	d00c      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e58:	3328      	adds	r3, #40	@ 0x28
 8008e5a:	2102      	movs	r1, #2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f001 fba3 	bl	800a5a8 <RCCEx_PLL3_Config>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d002      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008e7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e80:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008e84:	460b      	mov	r3, r1
 8008e86:	4313      	orrs	r3, r2
 8008e88:	d038      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e96:	d018      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008e98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e9c:	d811      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008e9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea2:	d014      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008ea4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ea8:	d80b      	bhi.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d011      	beq.n	8008ed2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb2:	d106      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb4:	4bc3      	ldr	r3, [pc, #780]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	4ac2      	ldr	r2, [pc, #776]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008ec0:	e008      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ec8:	e004      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008eca:	bf00      	nop
 8008ecc:	e002      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008ece:	bf00      	nop
 8008ed0:	e000      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ed4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10b      	bne.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008edc:	4bb9      	ldr	r3, [pc, #740]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ee0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008eec:	4ab5      	ldr	r2, [pc, #724]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008eee:	430b      	orrs	r3, r1
 8008ef0:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ef2:	e003      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ef8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f0e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f12:	460b      	mov	r3, r1
 8008f14:	4313      	orrs	r3, r2
 8008f16:	d009      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f18:	4baa      	ldr	r3, [pc, #680]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f26:	4aa7      	ldr	r2, [pc, #668]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f34:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008f38:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f3e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008f42:	460b      	mov	r3, r1
 8008f44:	4313      	orrs	r3, r2
 8008f46:	d009      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f48:	4b9e      	ldr	r3, [pc, #632]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f4c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f56:	4a9b      	ldr	r2, [pc, #620]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f64:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008f72:	460b      	mov	r3, r1
 8008f74:	4313      	orrs	r3, r2
 8008f76:	d009      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008f78:	4b92      	ldr	r3, [pc, #584]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f7c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008f80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008f86:	4a8f      	ldr	r2, [pc, #572]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f88:	430b      	orrs	r3, r1
 8008f8a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f9e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	d00e      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008fa8:	4b86      	ldr	r3, [pc, #536]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	4a85      	ldr	r2, [pc, #532]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fb2:	6113      	str	r3, [r2, #16]
 8008fb4:	4b83      	ldr	r3, [pc, #524]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fb6:	6919      	ldr	r1, [r3, #16]
 8008fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008fc0:	4a80      	ldr	r2, [pc, #512]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008fd8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	d009      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008fe2:	4b78      	ldr	r3, [pc, #480]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fe6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff0:	4a74      	ldr	r2, [pc, #464]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ff2:	430b      	orrs	r3, r1
 8008ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009002:	633b      	str	r3, [r7, #48]	@ 0x30
 8009004:	2300      	movs	r3, #0
 8009006:	637b      	str	r3, [r7, #52]	@ 0x34
 8009008:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800900c:	460b      	mov	r3, r1
 800900e:	4313      	orrs	r3, r2
 8009010:	d00a      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009012:	4b6c      	ldr	r3, [pc, #432]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009016:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800901a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800901e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009022:	4a68      	ldr	r2, [pc, #416]	@ (80091c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009024:	430b      	orrs	r3, r1
 8009026:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	2100      	movs	r1, #0
 8009032:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800903a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800903e:	460b      	mov	r3, r1
 8009040:	4313      	orrs	r3, r2
 8009042:	d011      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009048:	3308      	adds	r3, #8
 800904a:	2100      	movs	r1, #0
 800904c:	4618      	mov	r0, r3
 800904e:	f001 f9f9 	bl	800a444 <RCCEx_PLL2_Config>
 8009052:	4603      	mov	r3, r0
 8009054:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009058:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009060:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009064:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009068:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	2100      	movs	r1, #0
 8009072:	6239      	str	r1, [r7, #32]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	627b      	str	r3, [r7, #36]	@ 0x24
 800907a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800907e:	460b      	mov	r3, r1
 8009080:	4313      	orrs	r3, r2
 8009082:	d011      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009084:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009088:	3308      	adds	r3, #8
 800908a:	2101      	movs	r1, #1
 800908c:	4618      	mov	r0, r3
 800908e:	f001 f9d9 	bl	800a444 <RCCEx_PLL2_Config>
 8009092:	4603      	mov	r3, r0
 8009094:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009098:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80090a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b0:	2100      	movs	r1, #0
 80090b2:	61b9      	str	r1, [r7, #24]
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	61fb      	str	r3, [r7, #28]
 80090ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80090be:	460b      	mov	r3, r1
 80090c0:	4313      	orrs	r3, r2
 80090c2:	d011      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80090c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090c8:	3308      	adds	r3, #8
 80090ca:	2102      	movs	r1, #2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f001 f9b9 	bl	800a444 <RCCEx_PLL2_Config>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80090d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d003      	beq.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80090e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f0:	2100      	movs	r1, #0
 80090f2:	6139      	str	r1, [r7, #16]
 80090f4:	f003 0308 	and.w	r3, r3, #8
 80090f8:	617b      	str	r3, [r7, #20]
 80090fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80090fe:	460b      	mov	r3, r1
 8009100:	4313      	orrs	r3, r2
 8009102:	d011      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009108:	3328      	adds	r3, #40	@ 0x28
 800910a:	2100      	movs	r1, #0
 800910c:	4618      	mov	r0, r3
 800910e:	f001 fa4b 	bl	800a5a8 <RCCEx_PLL3_Config>
 8009112:	4603      	mov	r3, r0
 8009114:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009118:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009124:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800912c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009130:	2100      	movs	r1, #0
 8009132:	60b9      	str	r1, [r7, #8]
 8009134:	f003 0310 	and.w	r3, r3, #16
 8009138:	60fb      	str	r3, [r7, #12]
 800913a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800913e:	460b      	mov	r3, r1
 8009140:	4313      	orrs	r3, r2
 8009142:	d011      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009148:	3328      	adds	r3, #40	@ 0x28
 800914a:	2101      	movs	r1, #1
 800914c:	4618      	mov	r0, r3
 800914e:	f001 fa2b 	bl	800a5a8 <RCCEx_PLL3_Config>
 8009152:	4603      	mov	r3, r0
 8009154:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009158:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009160:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009164:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800916c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009170:	2100      	movs	r1, #0
 8009172:	6039      	str	r1, [r7, #0]
 8009174:	f003 0320 	and.w	r3, r3, #32
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800917e:	460b      	mov	r3, r1
 8009180:	4313      	orrs	r3, r2
 8009182:	d011      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009188:	3328      	adds	r3, #40	@ 0x28
 800918a:	2102      	movs	r1, #2
 800918c:	4618      	mov	r0, r3
 800918e:	f001 fa0b 	bl	800a5a8 <RCCEx_PLL3_Config>
 8009192:	4603      	mov	r3, r0
 8009194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009198:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800919c:	2b00      	cmp	r3, #0
 800919e:	d003      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091a4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80091a8:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	e000      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80091bc:	46bd      	mov	sp, r7
 80091be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091c2:	bf00      	nop
 80091c4:	58024400 	.word	0x58024400

080091c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b090      	sub	sp, #64	@ 0x40
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80091d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80091da:	430b      	orrs	r3, r1
 80091dc:	f040 8094 	bne.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80091e0:	4b97      	ldr	r3, [pc, #604]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80091e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091e4:	f003 0307 	and.w	r3, r3, #7
 80091e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80091ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ec:	2b04      	cmp	r3, #4
 80091ee:	f200 8087 	bhi.w	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80091f2:	a201      	add	r2, pc, #4	@ (adr r2, 80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80091f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f8:	0800920d 	.word	0x0800920d
 80091fc:	08009235 	.word	0x08009235
 8009200:	0800925d 	.word	0x0800925d
 8009204:	080092f9 	.word	0x080092f9
 8009208:	08009285 	.word	0x08009285
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800920c:	4b8c      	ldr	r3, [pc, #560]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009218:	d108      	bne.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800921a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800921e:	4618      	mov	r0, r3
 8009220:	f000 ff68 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009228:	f000 bc97 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009230:	f000 bc93 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009234:	4b82      	ldr	r3, [pc, #520]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800923c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009240:	d108      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009242:	f107 0318 	add.w	r3, r7, #24
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fcac 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009250:	f000 bc83 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009258:	f000 bc7f 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800925c:	4b78      	ldr	r3, [pc, #480]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009268:	d108      	bne.n	800927c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800926a:	f107 030c 	add.w	r3, r7, #12
 800926e:	4618      	mov	r0, r3
 8009270:	f000 fdec 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009278:	f000 bc6f 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800927c:	2300      	movs	r3, #0
 800927e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009280:	f000 bc6b 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009284:	4b6e      	ldr	r3, [pc, #440]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009288:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800928c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800928e:	4b6c      	ldr	r3, [pc, #432]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0304 	and.w	r3, r3, #4
 8009296:	2b04      	cmp	r3, #4
 8009298:	d10c      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800929a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092a0:	4b67      	ldr	r3, [pc, #412]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	08db      	lsrs	r3, r3, #3
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	4a66      	ldr	r2, [pc, #408]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80092ac:	fa22 f303 	lsr.w	r3, r2, r3
 80092b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092b2:	e01f      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092b4:	4b62      	ldr	r3, [pc, #392]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092c0:	d106      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80092c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092c8:	d102      	bne.n	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092ca:	4b5f      	ldr	r3, [pc, #380]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80092cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092ce:	e011      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092d0:	4b5b      	ldr	r3, [pc, #364]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092dc:	d106      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80092de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092e4:	d102      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092e6:	4b59      	ldr	r3, [pc, #356]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80092e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092ea:	e003      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80092f0:	f000 bc33 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80092f4:	f000 bc31 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092f8:	4b55      	ldr	r3, [pc, #340]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092fc:	f000 bc2d 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009304:	f000 bc29 	b.w	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8009308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800930c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009310:	430b      	orrs	r3, r1
 8009312:	f040 809f 	bne.w	8009454 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8009316:	4b4a      	ldr	r3, [pc, #296]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800931a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800931e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009326:	d04d      	beq.n	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800932e:	f200 8084 	bhi.w	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009334:	2bc0      	cmp	r3, #192	@ 0xc0
 8009336:	d07d      	beq.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8009338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800933a:	2bc0      	cmp	r3, #192	@ 0xc0
 800933c:	d87d      	bhi.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800933e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009340:	2b80      	cmp	r3, #128	@ 0x80
 8009342:	d02d      	beq.n	80093a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009346:	2b80      	cmp	r3, #128	@ 0x80
 8009348:	d877      	bhi.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800934a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934c:	2b00      	cmp	r3, #0
 800934e:	d003      	beq.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8009350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009352:	2b40      	cmp	r3, #64	@ 0x40
 8009354:	d012      	beq.n	800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8009356:	e070      	b.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009358:	4b39      	ldr	r3, [pc, #228]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009360:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009364:	d107      	bne.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800936a:	4618      	mov	r0, r3
 800936c:	f000 fec2 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009374:	e3f1      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800937a:	e3ee      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800937c:	4b30      	ldr	r3, [pc, #192]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009384:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009388:	d107      	bne.n	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800938a:	f107 0318 	add.w	r3, r7, #24
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fc08 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009394:	69bb      	ldr	r3, [r7, #24]
 8009396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009398:	e3df      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800939e:	e3dc      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093a0:	4b27      	ldr	r3, [pc, #156]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80093a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093ac:	d107      	bne.n	80093be <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ae:	f107 030c 	add.w	r3, r7, #12
 80093b2:	4618      	mov	r0, r3
 80093b4:	f000 fd4a 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093bc:	e3cd      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093c2:	e3ca      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093c4:	4b1e      	ldr	r3, [pc, #120]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093c8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80093cc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0304 	and.w	r3, r3, #4
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d10c      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80093da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093e0:	4b17      	ldr	r3, [pc, #92]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	08db      	lsrs	r3, r3, #3
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	4a16      	ldr	r2, [pc, #88]	@ (8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80093ec:	fa22 f303 	lsr.w	r3, r2, r3
 80093f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093f2:	e01e      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093f4:	4b12      	ldr	r3, [pc, #72]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009400:	d106      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009408:	d102      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800940a:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800940c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800940e:	e010      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009410:	4b0b      	ldr	r3, [pc, #44]	@ (8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800941c:	d106      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800941e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009424:	d102      	bne.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009426:	4b09      	ldr	r3, [pc, #36]	@ (800944c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800942a:	e002      	b.n	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009430:	e393      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009432:	e392      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009434:	4b06      	ldr	r3, [pc, #24]	@ (8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009438:	e38f      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800943a:	2300      	movs	r3, #0
 800943c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800943e:	e38c      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009440:	58024400 	.word	0x58024400
 8009444:	03d09000 	.word	0x03d09000
 8009448:	003d0900 	.word	0x003d0900
 800944c:	007a1200 	.word	0x007a1200
 8009450:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009458:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800945c:	430b      	orrs	r3, r1
 800945e:	f040 809c 	bne.w	800959a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8009462:	4b9e      	ldr	r3, [pc, #632]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009466:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800946a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800946c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800946e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009472:	d054      	beq.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8009474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800947a:	f200 808b 	bhi.w	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009484:	f000 8083 	beq.w	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8009488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800948e:	f200 8081 	bhi.w	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009498:	d02f      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800949a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094a0:	d878      	bhi.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80094a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d004      	beq.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ae:	d012      	beq.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80094b0:	e070      	b.n	8009594 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094b2:	4b8a      	ldr	r3, [pc, #552]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094be:	d107      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 fe15 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ce:	e344      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d4:	e341      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094d6:	4b81      	ldr	r3, [pc, #516]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094e2:	d107      	bne.n	80094f4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e4:	f107 0318 	add.w	r3, r7, #24
 80094e8:	4618      	mov	r0, r3
 80094ea:	f000 fb5b 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094f2:	e332      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094f8:	e32f      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094fa:	4b78      	ldr	r3, [pc, #480]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009506:	d107      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009508:	f107 030c 	add.w	r3, r7, #12
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fc9d 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009516:	e320      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800951c:	e31d      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800951e:	4b6f      	ldr	r3, [pc, #444]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009522:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009526:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009528:	4b6c      	ldr	r3, [pc, #432]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	2b04      	cmp	r3, #4
 8009532:	d10c      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800953a:	4b68      	ldr	r3, [pc, #416]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	08db      	lsrs	r3, r3, #3
 8009540:	f003 0303 	and.w	r3, r3, #3
 8009544:	4a66      	ldr	r2, [pc, #408]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009546:	fa22 f303 	lsr.w	r3, r2, r3
 800954a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800954c:	e01e      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800954e:	4b63      	ldr	r3, [pc, #396]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009556:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800955a:	d106      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800955c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800955e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009562:	d102      	bne.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009564:	4b5f      	ldr	r3, [pc, #380]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009568:	e010      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800956a:	4b5c      	ldr	r3, [pc, #368]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009576:	d106      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800957a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800957e:	d102      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009580:	4b59      	ldr	r3, [pc, #356]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009584:	e002      	b.n	800958c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009586:	2300      	movs	r3, #0
 8009588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800958a:	e2e6      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800958c:	e2e5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800958e:	4b57      	ldr	r3, [pc, #348]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009592:	e2e2      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009594:	2300      	movs	r3, #0
 8009596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009598:	e2df      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800959a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800959e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80095a2:	430b      	orrs	r3, r1
 80095a4:	f040 80a7 	bne.w	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80095a8:	4b4c      	ldr	r3, [pc, #304]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80095b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80095b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095b8:	d055      	beq.n	8009666 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80095ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095c0:	f200 8096 	bhi.w	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80095c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095ca:	f000 8084 	beq.w	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80095ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095d4:	f200 808c 	bhi.w	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80095d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095de:	d030      	beq.n	8009642 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80095e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095e6:	f200 8083 	bhi.w	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80095ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80095f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095f6:	d012      	beq.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80095f8:	e07a      	b.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095fa:	4b38      	ldr	r3, [pc, #224]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009602:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009606:	d107      	bne.n	8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800960c:	4618      	mov	r0, r3
 800960e:	f000 fd71 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009616:	e2a0      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009618:	2300      	movs	r3, #0
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800961c:	e29d      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800961e:	4b2f      	ldr	r3, [pc, #188]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009626:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800962a:	d107      	bne.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800962c:	f107 0318 	add.w	r3, r7, #24
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fab7 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800963a:	e28e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009640:	e28b      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009642:	4b26      	ldr	r3, [pc, #152]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800964a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800964e:	d107      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009650:	f107 030c 	add.w	r3, r7, #12
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fbf9 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800965e:	e27c      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009664:	e279      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009666:	4b1d      	ldr	r3, [pc, #116]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800966e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009670:	4b1a      	ldr	r3, [pc, #104]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0304 	and.w	r3, r3, #4
 8009678:	2b04      	cmp	r3, #4
 800967a:	d10c      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800967c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009682:	4b16      	ldr	r3, [pc, #88]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	08db      	lsrs	r3, r3, #3
 8009688:	f003 0303 	and.w	r3, r3, #3
 800968c:	4a14      	ldr	r2, [pc, #80]	@ (80096e0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800968e:	fa22 f303 	lsr.w	r3, r2, r3
 8009692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009694:	e01e      	b.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009696:	4b11      	ldr	r3, [pc, #68]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800969e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a2:	d106      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80096a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096aa:	d102      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80096ac:	4b0d      	ldr	r3, [pc, #52]	@ (80096e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b0:	e010      	b.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096b2:	4b0a      	ldr	r3, [pc, #40]	@ (80096dc <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096be:	d106      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80096c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096c6:	d102      	bne.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80096c8:	4b07      	ldr	r3, [pc, #28]	@ (80096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80096ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096cc:	e002      	b.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80096ce:	2300      	movs	r3, #0
 80096d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80096d2:	e242      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80096d4:	e241      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80096d6:	4b05      	ldr	r3, [pc, #20]	@ (80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096da:	e23e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80096dc:	58024400 	.word	0x58024400
 80096e0:	03d09000 	.word	0x03d09000
 80096e4:	003d0900 	.word	0x003d0900
 80096e8:	007a1200 	.word	0x007a1200
 80096ec:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80096f0:	2300      	movs	r3, #0
 80096f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f4:	e231      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80096f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096fa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80096fe:	430b      	orrs	r3, r1
 8009700:	f040 8085 	bne.w	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009704:	4b9c      	ldr	r3, [pc, #624]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009708:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800970c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800970e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009714:	d06b      	beq.n	80097ee <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800971c:	d874      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800971e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009720:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009724:	d056      	beq.n	80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009728:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800972c:	d86c      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800972e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009730:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009734:	d03b      	beq.n	80097ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8009736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009738:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800973c:	d864      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009744:	d021      	beq.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8009746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009748:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800974c:	d85c      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800974e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009750:	2b00      	cmp	r3, #0
 8009752:	d004      	beq.n	800975e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800975a:	d004      	beq.n	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800975c:	e054      	b.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800975e:	f7fe fb49 	bl	8007df4 <HAL_RCC_GetPCLK1Freq>
 8009762:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009764:	e1f9      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009766:	4b84      	ldr	r3, [pc, #528]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800976e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009772:	d107      	bne.n	8009784 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009774:	f107 0318 	add.w	r3, r7, #24
 8009778:	4618      	mov	r0, r3
 800977a:	f000 fa13 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009782:	e1ea      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009784:	2300      	movs	r3, #0
 8009786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009788:	e1e7      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800978a:	4b7b      	ldr	r3, [pc, #492]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009792:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009796:	d107      	bne.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009798:	f107 030c 	add.w	r3, r7, #12
 800979c:	4618      	mov	r0, r3
 800979e:	f000 fb55 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097a6:	e1d8      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097a8:	2300      	movs	r3, #0
 80097aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ac:	e1d5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80097ae:	4b72      	ldr	r3, [pc, #456]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0304 	and.w	r3, r3, #4
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d109      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80097ba:	4b6f      	ldr	r3, [pc, #444]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	08db      	lsrs	r3, r3, #3
 80097c0:	f003 0303 	and.w	r3, r3, #3
 80097c4:	4a6d      	ldr	r2, [pc, #436]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80097c6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097cc:	e1c5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097ce:	2300      	movs	r3, #0
 80097d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097d2:	e1c2      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80097d4:	4b68      	ldr	r3, [pc, #416]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097e0:	d102      	bne.n	80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80097e2:	4b67      	ldr	r3, [pc, #412]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80097e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097e6:	e1b8      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097e8:	2300      	movs	r3, #0
 80097ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ec:	e1b5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80097ee:	4b62      	ldr	r3, [pc, #392]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097fa:	d102      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80097fc:	4b61      	ldr	r3, [pc, #388]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80097fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009800:	e1ab      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009806:	e1a8      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800980c:	e1a5      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800980e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009812:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009816:	430b      	orrs	r3, r1
 8009818:	d173      	bne.n	8009902 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800981a:	4b57      	ldr	r3, [pc, #348]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800981c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800981e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009822:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800982a:	d02f      	beq.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800982c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009832:	d863      	bhi.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	2b00      	cmp	r3, #0
 8009838:	d004      	beq.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800983a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009840:	d012      	beq.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009842:	e05b      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009844:	4b4c      	ldr	r3, [pc, #304]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800984c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009850:	d107      	bne.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009852:	f107 0318 	add.w	r3, r7, #24
 8009856:	4618      	mov	r0, r3
 8009858:	f000 f9a4 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009860:	e17b      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009862:	2300      	movs	r3, #0
 8009864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009866:	e178      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009868:	4b43      	ldr	r3, [pc, #268]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009870:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009874:	d107      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009876:	f107 030c 	add.w	r3, r7, #12
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fae6 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009884:	e169      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800988a:	e166      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800988c:	4b3a      	ldr	r3, [pc, #232]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800988e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009890:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009894:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009896:	4b38      	ldr	r3, [pc, #224]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0304 	and.w	r3, r3, #4
 800989e:	2b04      	cmp	r3, #4
 80098a0:	d10c      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80098a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d109      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098a8:	4b33      	ldr	r3, [pc, #204]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	08db      	lsrs	r3, r3, #3
 80098ae:	f003 0303 	and.w	r3, r3, #3
 80098b2:	4a32      	ldr	r2, [pc, #200]	@ (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80098b4:	fa22 f303 	lsr.w	r3, r2, r3
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098ba:	e01e      	b.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098bc:	4b2e      	ldr	r3, [pc, #184]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098c8:	d106      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80098ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098d0:	d102      	bne.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80098d2:	4b2b      	ldr	r3, [pc, #172]	@ (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80098d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098d6:	e010      	b.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098d8:	4b27      	ldr	r3, [pc, #156]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098e4:	d106      	bne.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80098e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ec:	d102      	bne.n	80098f4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80098ee:	4b25      	ldr	r3, [pc, #148]	@ (8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80098f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098f2:	e002      	b.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80098f8:	e12f      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80098fa:	e12e      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009900:	e12b      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009906:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800990a:	430b      	orrs	r3, r1
 800990c:	d13c      	bne.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800990e:	4b1a      	ldr	r3, [pc, #104]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009916:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991a:	2b00      	cmp	r3, #0
 800991c:	d004      	beq.n	8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800991e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009924:	d012      	beq.n	800994c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009926:	e023      	b.n	8009970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009928:	4b13      	ldr	r3, [pc, #76]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009934:	d107      	bne.n	8009946 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009936:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800993a:	4618      	mov	r0, r3
 800993c:	f000 fbda 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009944:	e109      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009946:	2300      	movs	r3, #0
 8009948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800994a:	e106      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800994c:	4b0a      	ldr	r3, [pc, #40]	@ (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009958:	d107      	bne.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800995a:	f107 0318 	add.w	r3, r7, #24
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f920 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009968:	e0f7      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800996a:	2300      	movs	r3, #0
 800996c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800996e:	e0f4      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009974:	e0f1      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009976:	bf00      	nop
 8009978:	58024400 	.word	0x58024400
 800997c:	03d09000 	.word	0x03d09000
 8009980:	003d0900 	.word	0x003d0900
 8009984:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800998c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009990:	430b      	orrs	r3, r1
 8009992:	f040 8091 	bne.w	8009ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009996:	4b73      	ldr	r3, [pc, #460]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800999a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800999e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80099a6:	f000 8081 	beq.w	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80099aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ac:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80099b0:	d87f      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099b8:	d06b      	beq.n	8009a92 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80099ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80099c0:	d877      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c8:	d056      	beq.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80099ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d0:	d86f      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099d8:	d03b      	beq.n	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80099da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099e0:	d867      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099e8:	d021      	beq.n	8009a2e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80099ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099f0:	d85f      	bhi.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80099f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80099f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099fe:	d004      	beq.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009a00:	e057      	b.n	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a02:	f000 f8b9 	bl	8009b78 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a08:	e0a7      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a0a:	4b56      	ldr	r3, [pc, #344]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a16:	d107      	bne.n	8009a28 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a18:	f107 0318 	add.w	r3, r7, #24
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f000 f8c1 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a22:	69fb      	ldr	r3, [r7, #28]
 8009a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a26:	e098      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a2c:	e095      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a2e:	4b4d      	ldr	r3, [pc, #308]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a3a:	d107      	bne.n	8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a3c:	f107 030c 	add.w	r3, r7, #12
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fa03 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a4a:	e086      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a50:	e083      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009a52:	4b44      	ldr	r3, [pc, #272]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f003 0304 	and.w	r3, r3, #4
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d109      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a5e:	4b41      	ldr	r3, [pc, #260]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	08db      	lsrs	r3, r3, #3
 8009a64:	f003 0303 	and.w	r3, r3, #3
 8009a68:	4a3f      	ldr	r2, [pc, #252]	@ (8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a70:	e073      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a76:	e070      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009a78:	4b3a      	ldr	r3, [pc, #232]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a84:	d102      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8009a86:	4b39      	ldr	r3, [pc, #228]	@ (8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8009a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a8a:	e066      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a90:	e063      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009a92:	4b34      	ldr	r3, [pc, #208]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a9e:	d102      	bne.n	8009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8009aa0:	4b33      	ldr	r3, [pc, #204]	@ (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aa4:	e059      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009aaa:	e056      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009aac:	4b31      	ldr	r3, [pc, #196]	@ (8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab0:	e053      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ab6:	e050      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009abc:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009ac0:	430b      	orrs	r3, r1
 8009ac2:	d148      	bne.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009ac4:	4b27      	ldr	r3, [pc, #156]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009acc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ad4:	d02a      	beq.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009adc:	d838      	bhi.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d004      	beq.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009aea:	d00d      	beq.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009aec:	e030      	b.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009aee:	4b1d      	ldr	r3, [pc, #116]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009af6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009afa:	d102      	bne.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009afc:	4b1c      	ldr	r3, [pc, #112]	@ (8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b00:	e02b      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b06:	e028      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b08:	4b16      	ldr	r3, [pc, #88]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b14:	d107      	bne.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 faea 	bl	800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b24:	e019      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b26:	2300      	movs	r3, #0
 8009b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b2a:	e016      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b38:	d107      	bne.n	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b3a:	f107 0318 	add.w	r3, r7, #24
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f830 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b48:	e007      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b4e:	e004      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b54:	e001      	b.n	8009b5a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009b56:	2300      	movs	r3, #0
 8009b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3740      	adds	r7, #64	@ 0x40
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	58024400 	.word	0x58024400
 8009b68:	03d09000 	.word	0x03d09000
 8009b6c:	003d0900 	.word	0x003d0900
 8009b70:	007a1200 	.word	0x007a1200
 8009b74:	00bb8000 	.word	0x00bb8000

08009b78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009b7c:	f7fe f90a 	bl	8007d94 <HAL_RCC_GetHCLKFreq>
 8009b80:	4602      	mov	r2, r0
 8009b82:	4b06      	ldr	r3, [pc, #24]	@ (8009b9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	091b      	lsrs	r3, r3, #4
 8009b88:	f003 0307 	and.w	r3, r3, #7
 8009b8c:	4904      	ldr	r1, [pc, #16]	@ (8009ba0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b8e:	5ccb      	ldrb	r3, [r1, r3]
 8009b90:	f003 031f 	and.w	r3, r3, #31
 8009b94:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	58024400 	.word	0x58024400
 8009ba0:	0800e5b8 	.word	0x0800e5b8

08009ba4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b089      	sub	sp, #36	@ 0x24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bac:	4ba1      	ldr	r3, [pc, #644]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009bb6:	4b9f      	ldr	r3, [pc, #636]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bba:	0b1b      	lsrs	r3, r3, #12
 8009bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009bc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009bc2:	4b9c      	ldr	r3, [pc, #624]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bc6:	091b      	lsrs	r3, r3, #4
 8009bc8:	f003 0301 	and.w	r3, r3, #1
 8009bcc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009bce:	4b99      	ldr	r3, [pc, #612]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd2:	08db      	lsrs	r3, r3, #3
 8009bd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	fb02 f303 	mul.w	r3, r2, r3
 8009bde:	ee07 3a90 	vmov	s15, r3
 8009be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009be6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 8111 	beq.w	8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	f000 8083 	beq.w	8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	f200 80a1 	bhi.w	8009d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d056      	beq.n	8009cbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c0e:	e099      	b.n	8009d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c10:	4b88      	ldr	r3, [pc, #544]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 0320 	and.w	r3, r3, #32
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d02d      	beq.n	8009c78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c1c:	4b85      	ldr	r3, [pc, #532]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	08db      	lsrs	r3, r3, #3
 8009c22:	f003 0303 	and.w	r3, r3, #3
 8009c26:	4a84      	ldr	r2, [pc, #528]	@ (8009e38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c28:	fa22 f303 	lsr.w	r3, r2, r3
 8009c2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	ee07 3a90 	vmov	s15, r3
 8009c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	ee07 3a90 	vmov	s15, r3
 8009c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c46:	4b7b      	ldr	r3, [pc, #492]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c76:	e087      	b.n	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	ee07 3a90 	vmov	s15, r3
 8009c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009e40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c8a:	4b6a      	ldr	r3, [pc, #424]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c92:	ee07 3a90 	vmov	s15, r3
 8009c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cba:	e065      	b.n	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cce:	4b59      	ldr	r3, [pc, #356]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cd6:	ee07 3a90 	vmov	s15, r3
 8009cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ce2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cfe:	e043      	b.n	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009e48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d12:	4b48      	ldr	r3, [pc, #288]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d42:	e021      	b.n	8009d88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d56:	4b37      	ldr	r3, [pc, #220]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009e3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009d88:	4b2a      	ldr	r3, [pc, #168]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8c:	0a5b      	lsrs	r3, r3, #9
 8009d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d92:	ee07 3a90 	vmov	s15, r3
 8009d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009da2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009daa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dae:	ee17 2a90 	vmov	r2, s15
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009db6:	4b1f      	ldr	r3, [pc, #124]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dba:	0c1b      	lsrs	r3, r3, #16
 8009dbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dc0:	ee07 3a90 	vmov	s15, r3
 8009dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009dcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ddc:	ee17 2a90 	vmov	r2, s15
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009de4:	4b13      	ldr	r3, [pc, #76]	@ (8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009de8:	0e1b      	lsrs	r3, r3, #24
 8009dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e0a:	ee17 2a90 	vmov	r2, s15
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e12:	e008      	b.n	8009e26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	609a      	str	r2, [r3, #8]
}
 8009e26:	bf00      	nop
 8009e28:	3724      	adds	r7, #36	@ 0x24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	58024400 	.word	0x58024400
 8009e38:	03d09000 	.word	0x03d09000
 8009e3c:	46000000 	.word	0x46000000
 8009e40:	4c742400 	.word	0x4c742400
 8009e44:	4a742400 	.word	0x4a742400
 8009e48:	4af42400 	.word	0x4af42400

08009e4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b089      	sub	sp, #36	@ 0x24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e54:	4ba1      	ldr	r3, [pc, #644]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e58:	f003 0303 	and.w	r3, r3, #3
 8009e5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009e5e:	4b9f      	ldr	r3, [pc, #636]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e62:	0d1b      	lsrs	r3, r3, #20
 8009e64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e6a:	4b9c      	ldr	r3, [pc, #624]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6e:	0a1b      	lsrs	r3, r3, #8
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009e76:	4b99      	ldr	r3, [pc, #612]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e7a:	08db      	lsrs	r3, r3, #3
 8009e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	fb02 f303 	mul.w	r3, r2, r3
 8009e86:	ee07 3a90 	vmov	s15, r3
 8009e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 8111 	beq.w	800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	f000 8083 	beq.w	8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	f200 80a1 	bhi.w	8009fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d003      	beq.n	8009eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d056      	beq.n	8009f64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009eb6:	e099      	b.n	8009fec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009eb8:	4b88      	ldr	r3, [pc, #544]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0320 	and.w	r3, r3, #32
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d02d      	beq.n	8009f20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ec4:	4b85      	ldr	r3, [pc, #532]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	08db      	lsrs	r3, r3, #3
 8009eca:	f003 0303 	and.w	r3, r3, #3
 8009ece:	4a84      	ldr	r2, [pc, #528]	@ (800a0e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8009ed4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	ee07 3a90 	vmov	s15, r3
 8009edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	ee07 3a90 	vmov	s15, r3
 8009ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eee:	4b7b      	ldr	r3, [pc, #492]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f02:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f1e:	e087      	b.n	800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	ee07 3a90 	vmov	s15, r3
 8009f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f2a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a0e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f32:	4b6a      	ldr	r3, [pc, #424]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f46:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f62:	e065      	b.n	800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f6e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f76:	4b59      	ldr	r3, [pc, #356]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f7e:	ee07 3a90 	vmov	s15, r3
 8009f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f8a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fa6:	e043      	b.n	800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fb2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fba:	4b48      	ldr	r3, [pc, #288]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fc2:	ee07 3a90 	vmov	s15, r3
 8009fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fea:	e021      	b.n	800a030 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ff6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a0ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ffe:	4b37      	ldr	r3, [pc, #220]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a012:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a0e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a01e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a02a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a02e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a030:	4b2a      	ldr	r3, [pc, #168]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a034:	0a5b      	lsrs	r3, r3, #9
 800a036:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a042:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a046:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a04a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a04e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a052:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a056:	ee17 2a90 	vmov	r2, s15
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a05e:	4b1f      	ldr	r3, [pc, #124]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a062:	0c1b      	lsrs	r3, r3, #16
 800a064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a068:	ee07 3a90 	vmov	s15, r3
 800a06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a074:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a078:	edd7 6a07 	vldr	s13, [r7, #28]
 800a07c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a084:	ee17 2a90 	vmov	r2, s15
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a08c:	4b13      	ldr	r3, [pc, #76]	@ (800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a08e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a090:	0e1b      	lsrs	r3, r3, #24
 800a092:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a09e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0b2:	ee17 2a90 	vmov	r2, s15
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a0ba:	e008      	b.n	800a0ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	609a      	str	r2, [r3, #8]
}
 800a0ce:	bf00      	nop
 800a0d0:	3724      	adds	r7, #36	@ 0x24
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	58024400 	.word	0x58024400
 800a0e0:	03d09000 	.word	0x03d09000
 800a0e4:	46000000 	.word	0x46000000
 800a0e8:	4c742400 	.word	0x4c742400
 800a0ec:	4a742400 	.word	0x4a742400
 800a0f0:	4af42400 	.word	0x4af42400

0800a0f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b089      	sub	sp, #36	@ 0x24
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a0fc:	4ba0      	ldr	r3, [pc, #640]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a106:	4b9e      	ldr	r3, [pc, #632]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a10a:	091b      	lsrs	r3, r3, #4
 800a10c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a110:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a112:	4b9b      	ldr	r3, [pc, #620]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a116:	f003 0301 	and.w	r3, r3, #1
 800a11a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a11c:	4b98      	ldr	r3, [pc, #608]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a11e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a120:	08db      	lsrs	r3, r3, #3
 800a122:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	fb02 f303 	mul.w	r3, r2, r3
 800a12c:	ee07 3a90 	vmov	s15, r3
 800a130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a134:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	f000 8111 	beq.w	800a362 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	2b02      	cmp	r3, #2
 800a144:	f000 8083 	beq.w	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	f200 80a1 	bhi.w	800a292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d056      	beq.n	800a20a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a15c:	e099      	b.n	800a292 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a15e:	4b88      	ldr	r3, [pc, #544]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d02d      	beq.n	800a1c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a16a:	4b85      	ldr	r3, [pc, #532]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	08db      	lsrs	r3, r3, #3
 800a170:	f003 0303 	and.w	r3, r3, #3
 800a174:	4a83      	ldr	r2, [pc, #524]	@ (800a384 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a176:	fa22 f303 	lsr.w	r3, r2, r3
 800a17a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	ee07 3a90 	vmov	s15, r3
 800a182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	ee07 3a90 	vmov	s15, r3
 800a18c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a194:	4b7a      	ldr	r3, [pc, #488]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a19c:	ee07 3a90 	vmov	s15, r3
 800a1a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a1c4:	e087      	b.n	800a2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	ee07 3a90 	vmov	s15, r3
 800a1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a1d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1d8:	4b69      	ldr	r3, [pc, #420]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e0:	ee07 3a90 	vmov	s15, r3
 800a1e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a1f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a1fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a200:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a204:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a208:	e065      	b.n	800a2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	ee07 3a90 	vmov	s15, r3
 800a210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a214:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a390 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a218:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a21c:	4b58      	ldr	r3, [pc, #352]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a224:	ee07 3a90 	vmov	s15, r3
 800a228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a22c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a230:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a234:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a238:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a23c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a248:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a24c:	e043      	b.n	800a2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	ee07 3a90 	vmov	s15, r3
 800a254:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a258:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a394 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a25c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a260:	4b47      	ldr	r3, [pc, #284]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a268:	ee07 3a90 	vmov	s15, r3
 800a26c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a270:	ed97 6a03 	vldr	s12, [r7, #12]
 800a274:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a278:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a27c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a280:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a284:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a288:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a28c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a290:	e021      	b.n	800a2d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	ee07 3a90 	vmov	s15, r3
 800a298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a29c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a38c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2a4:	4b36      	ldr	r3, [pc, #216]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ac:	ee07 3a90 	vmov	s15, r3
 800a2b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a388 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a2d6:	4b2a      	ldr	r3, [pc, #168]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2da:	0a5b      	lsrs	r3, r3, #9
 800a2dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2e0:	ee07 3a90 	vmov	s15, r3
 800a2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a2ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a2f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a2f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a2fc:	ee17 2a90 	vmov	r2, s15
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a304:	4b1e      	ldr	r3, [pc, #120]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a308:	0c1b      	lsrs	r3, r3, #16
 800a30a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a31a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a31e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a32a:	ee17 2a90 	vmov	r2, s15
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a332:	4b13      	ldr	r3, [pc, #76]	@ (800a380 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a336:	0e1b      	lsrs	r3, r3, #24
 800a338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a33c:	ee07 3a90 	vmov	s15, r3
 800a340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a34c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a358:	ee17 2a90 	vmov	r2, s15
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a360:	e008      	b.n	800a374 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2200      	movs	r2, #0
 800a366:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	609a      	str	r2, [r3, #8]
}
 800a374:	bf00      	nop
 800a376:	3724      	adds	r7, #36	@ 0x24
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	58024400 	.word	0x58024400
 800a384:	03d09000 	.word	0x03d09000
 800a388:	46000000 	.word	0x46000000
 800a38c:	4c742400 	.word	0x4c742400
 800a390:	4a742400 	.word	0x4a742400
 800a394:	4af42400 	.word	0x4af42400

0800a398 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800a3a0:	4b26      	ldr	r3, [pc, #152]	@ (800a43c <HAL_RCCEx_CRSConfig+0xa4>)
 800a3a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3a6:	4a25      	ldr	r2, [pc, #148]	@ (800a43c <HAL_RCCEx_CRSConfig+0xa4>)
 800a3a8:	f043 0302 	orr.w	r3, r3, #2
 800a3ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800a3b0:	4b22      	ldr	r3, [pc, #136]	@ (800a43c <HAL_RCCEx_CRSConfig+0xa4>)
 800a3b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3b6:	4a21      	ldr	r2, [pc, #132]	@ (800a43c <HAL_RCCEx_CRSConfig+0xa4>)
 800a3b8:	f023 0302 	bic.w	r3, r3, #2
 800a3bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800a3c0:	f7f7 fd9c 	bl	8001efc <HAL_GetREVID>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d80b      	bhi.n	800a3e6 <HAL_RCCEx_CRSConfig+0x4e>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a3d6:	d106      	bne.n	800a3e6 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e008      	b.n	800a3f8 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	431a      	orrs	r2, r3
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	691b      	ldr	r3, [r3, #16]
 800a406:	041b      	lsls	r3, r3, #16
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800a40e:	4a0c      	ldr	r2, [pc, #48]	@ (800a440 <HAL_RCCEx_CRSConfig+0xa8>)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800a414:	4b0a      	ldr	r3, [pc, #40]	@ (800a440 <HAL_RCCEx_CRSConfig+0xa8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	695b      	ldr	r3, [r3, #20]
 800a420:	021b      	lsls	r3, r3, #8
 800a422:	4907      	ldr	r1, [pc, #28]	@ (800a440 <HAL_RCCEx_CRSConfig+0xa8>)
 800a424:	4313      	orrs	r3, r2
 800a426:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800a428:	4b05      	ldr	r3, [pc, #20]	@ (800a440 <HAL_RCCEx_CRSConfig+0xa8>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a04      	ldr	r2, [pc, #16]	@ (800a440 <HAL_RCCEx_CRSConfig+0xa8>)
 800a42e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a432:	6013      	str	r3, [r2, #0]
}
 800a434:	bf00      	nop
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	58024400 	.word	0x58024400
 800a440:	40008400 	.word	0x40008400

0800a444 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a452:	4b53      	ldr	r3, [pc, #332]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a456:	f003 0303 	and.w	r3, r3, #3
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d101      	bne.n	800a462 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	e099      	b.n	800a596 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a462:	4b4f      	ldr	r3, [pc, #316]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	4a4e      	ldr	r2, [pc, #312]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a468:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a46c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a46e:	f7f7 fd39 	bl	8001ee4 <HAL_GetTick>
 800a472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a474:	e008      	b.n	800a488 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a476:	f7f7 fd35 	bl	8001ee4 <HAL_GetTick>
 800a47a:	4602      	mov	r2, r0
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	2b02      	cmp	r3, #2
 800a482:	d901      	bls.n	800a488 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a484:	2303      	movs	r3, #3
 800a486:	e086      	b.n	800a596 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a488:	4b45      	ldr	r3, [pc, #276]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a490:	2b00      	cmp	r3, #0
 800a492:	d1f0      	bne.n	800a476 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a494:	4b42      	ldr	r3, [pc, #264]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a498:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	031b      	lsls	r3, r3, #12
 800a4a2:	493f      	ldr	r1, [pc, #252]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	628b      	str	r3, [r1, #40]	@ 0x28
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	025b      	lsls	r3, r3, #9
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	431a      	orrs	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	3b01      	subs	r3, #1
 800a4c4:	041b      	lsls	r3, r3, #16
 800a4c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	061b      	lsls	r3, r3, #24
 800a4d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a4d8:	4931      	ldr	r1, [pc, #196]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a4de:	4b30      	ldr	r3, [pc, #192]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	695b      	ldr	r3, [r3, #20]
 800a4ea:	492d      	ldr	r1, [pc, #180]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a4f0:	4b2b      	ldr	r3, [pc, #172]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4f4:	f023 0220 	bic.w	r2, r3, #32
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	4928      	ldr	r1, [pc, #160]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a502:	4b27      	ldr	r3, [pc, #156]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a506:	4a26      	ldr	r2, [pc, #152]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a508:	f023 0310 	bic.w	r3, r3, #16
 800a50c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a50e:	4b24      	ldr	r3, [pc, #144]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a510:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a512:	4b24      	ldr	r3, [pc, #144]	@ (800a5a4 <RCCEx_PLL2_Config+0x160>)
 800a514:	4013      	ands	r3, r2
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	69d2      	ldr	r2, [r2, #28]
 800a51a:	00d2      	lsls	r2, r2, #3
 800a51c:	4920      	ldr	r1, [pc, #128]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a522:	4b1f      	ldr	r3, [pc, #124]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a526:	4a1e      	ldr	r2, [pc, #120]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a528:	f043 0310 	orr.w	r3, r3, #16
 800a52c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d106      	bne.n	800a542 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a534:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a538:	4a19      	ldr	r2, [pc, #100]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a53a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a53e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a540:	e00f      	b.n	800a562 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d106      	bne.n	800a556 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a548:	4b15      	ldr	r3, [pc, #84]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54c:	4a14      	ldr	r2, [pc, #80]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a54e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a552:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a554:	e005      	b.n	800a562 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a556:	4b12      	ldr	r3, [pc, #72]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a55a:	4a11      	ldr	r2, [pc, #68]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a55c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a560:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a562:	4b0f      	ldr	r3, [pc, #60]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a0e      	ldr	r2, [pc, #56]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a568:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a56c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a56e:	f7f7 fcb9 	bl	8001ee4 <HAL_GetTick>
 800a572:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a574:	e008      	b.n	800a588 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a576:	f7f7 fcb5 	bl	8001ee4 <HAL_GetTick>
 800a57a:	4602      	mov	r2, r0
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	1ad3      	subs	r3, r2, r3
 800a580:	2b02      	cmp	r3, #2
 800a582:	d901      	bls.n	800a588 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e006      	b.n	800a596 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a588:	4b05      	ldr	r3, [pc, #20]	@ (800a5a0 <RCCEx_PLL2_Config+0x15c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d0f0      	beq.n	800a576 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a594:	7bfb      	ldrb	r3, [r7, #15]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	58024400 	.word	0x58024400
 800a5a4:	ffff0007 	.word	0xffff0007

0800a5a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5b6:	4b53      	ldr	r3, [pc, #332]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5ba:	f003 0303 	and.w	r3, r3, #3
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d101      	bne.n	800a5c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e099      	b.n	800a6fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a5c6:	4b4f      	ldr	r3, [pc, #316]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a4e      	ldr	r2, [pc, #312]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a5cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5d2:	f7f7 fc87 	bl	8001ee4 <HAL_GetTick>
 800a5d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5d8:	e008      	b.n	800a5ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a5da:	f7f7 fc83 	bl	8001ee4 <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d901      	bls.n	800a5ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e086      	b.n	800a6fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5ec:	4b45      	ldr	r3, [pc, #276]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1f0      	bne.n	800a5da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a5f8:	4b42      	ldr	r3, [pc, #264]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	051b      	lsls	r3, r3, #20
 800a606:	493f      	ldr	r1, [pc, #252]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	3b01      	subs	r3, #1
 800a612:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	3b01      	subs	r3, #1
 800a61c:	025b      	lsls	r3, r3, #9
 800a61e:	b29b      	uxth	r3, r3
 800a620:	431a      	orrs	r2, r3
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	68db      	ldr	r3, [r3, #12]
 800a626:	3b01      	subs	r3, #1
 800a628:	041b      	lsls	r3, r3, #16
 800a62a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a62e:	431a      	orrs	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	3b01      	subs	r3, #1
 800a636:	061b      	lsls	r3, r3, #24
 800a638:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a63c:	4931      	ldr	r1, [pc, #196]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a642:	4b30      	ldr	r3, [pc, #192]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a646:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	492d      	ldr	r1, [pc, #180]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a650:	4313      	orrs	r3, r2
 800a652:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a654:	4b2b      	ldr	r3, [pc, #172]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a658:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	4928      	ldr	r1, [pc, #160]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a662:	4313      	orrs	r3, r2
 800a664:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a666:	4b27      	ldr	r3, [pc, #156]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a66a:	4a26      	ldr	r2, [pc, #152]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a66c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a670:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a672:	4b24      	ldr	r3, [pc, #144]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a674:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a676:	4b24      	ldr	r3, [pc, #144]	@ (800a708 <RCCEx_PLL3_Config+0x160>)
 800a678:	4013      	ands	r3, r2
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	69d2      	ldr	r2, [r2, #28]
 800a67e:	00d2      	lsls	r2, r2, #3
 800a680:	4920      	ldr	r1, [pc, #128]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a682:	4313      	orrs	r3, r2
 800a684:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a686:	4b1f      	ldr	r3, [pc, #124]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68a:	4a1e      	ldr	r2, [pc, #120]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a68c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a690:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d106      	bne.n	800a6a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a698:	4b1a      	ldr	r3, [pc, #104]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69c:	4a19      	ldr	r2, [pc, #100]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a69e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a6a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a6a4:	e00f      	b.n	800a6c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d106      	bne.n	800a6ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a6ac:	4b15      	ldr	r3, [pc, #84]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b0:	4a14      	ldr	r2, [pc, #80]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a6b2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a6b8:	e005      	b.n	800a6c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a6ba:	4b12      	ldr	r3, [pc, #72]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6be:	4a11      	ldr	r2, [pc, #68]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a6c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a6c6:	4b0f      	ldr	r3, [pc, #60]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a0e      	ldr	r2, [pc, #56]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a6cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6d2:	f7f7 fc07 	bl	8001ee4 <HAL_GetTick>
 800a6d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6d8:	e008      	b.n	800a6ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a6da:	f7f7 fc03 	bl	8001ee4 <HAL_GetTick>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	1ad3      	subs	r3, r2, r3
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d901      	bls.n	800a6ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e006      	b.n	800a6fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a6ec:	4b05      	ldr	r3, [pc, #20]	@ (800a704 <RCCEx_PLL3_Config+0x15c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d0f0      	beq.n	800a6da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	58024400 	.word	0x58024400
 800a708:	ffff0007 	.word	0xffff0007

0800a70c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d101      	bne.n	800a71e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e049      	b.n	800a7b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a724:	b2db      	uxtb	r3, r3
 800a726:	2b00      	cmp	r3, #0
 800a728:	d106      	bne.n	800a738 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2200      	movs	r2, #0
 800a72e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f7f7 f9ca 	bl	8001acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2202      	movs	r2, #2
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	3304      	adds	r3, #4
 800a748:	4619      	mov	r1, r3
 800a74a:	4610      	mov	r0, r2
 800a74c:	f000 f92e 	bl	800a9ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
	...

0800a7bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b084      	sub	sp, #16
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d101      	bne.n	800a7d8 <HAL_TIM_ConfigClockSource+0x1c>
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	e0dc      	b.n	800a992 <HAL_TIM_ConfigClockSource+0x1d6>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	4b6a      	ldr	r3, [pc, #424]	@ (800a99c <HAL_TIM_ConfigClockSource+0x1e0>)
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a64      	ldr	r2, [pc, #400]	@ (800a9a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	f000 80a9 	beq.w	800a966 <HAL_TIM_ConfigClockSource+0x1aa>
 800a814:	4a62      	ldr	r2, [pc, #392]	@ (800a9a0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a816:	4293      	cmp	r3, r2
 800a818:	f200 80ae 	bhi.w	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a81c:	4a61      	ldr	r2, [pc, #388]	@ (800a9a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	f000 80a1 	beq.w	800a966 <HAL_TIM_ConfigClockSource+0x1aa>
 800a824:	4a5f      	ldr	r2, [pc, #380]	@ (800a9a4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a826:	4293      	cmp	r3, r2
 800a828:	f200 80a6 	bhi.w	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a82c:	4a5e      	ldr	r2, [pc, #376]	@ (800a9a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	f000 8099 	beq.w	800a966 <HAL_TIM_ConfigClockSource+0x1aa>
 800a834:	4a5c      	ldr	r2, [pc, #368]	@ (800a9a8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a836:	4293      	cmp	r3, r2
 800a838:	f200 809e 	bhi.w	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a83c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a840:	f000 8091 	beq.w	800a966 <HAL_TIM_ConfigClockSource+0x1aa>
 800a844:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a848:	f200 8096 	bhi.w	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a84c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a850:	f000 8089 	beq.w	800a966 <HAL_TIM_ConfigClockSource+0x1aa>
 800a854:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a858:	f200 808e 	bhi.w	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a85c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a860:	d03e      	beq.n	800a8e0 <HAL_TIM_ConfigClockSource+0x124>
 800a862:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a866:	f200 8087 	bhi.w	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a86a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a86e:	f000 8086 	beq.w	800a97e <HAL_TIM_ConfigClockSource+0x1c2>
 800a872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a876:	d87f      	bhi.n	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a878:	2b70      	cmp	r3, #112	@ 0x70
 800a87a:	d01a      	beq.n	800a8b2 <HAL_TIM_ConfigClockSource+0xf6>
 800a87c:	2b70      	cmp	r3, #112	@ 0x70
 800a87e:	d87b      	bhi.n	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a880:	2b60      	cmp	r3, #96	@ 0x60
 800a882:	d050      	beq.n	800a926 <HAL_TIM_ConfigClockSource+0x16a>
 800a884:	2b60      	cmp	r3, #96	@ 0x60
 800a886:	d877      	bhi.n	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a888:	2b50      	cmp	r3, #80	@ 0x50
 800a88a:	d03c      	beq.n	800a906 <HAL_TIM_ConfigClockSource+0x14a>
 800a88c:	2b50      	cmp	r3, #80	@ 0x50
 800a88e:	d873      	bhi.n	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a890:	2b40      	cmp	r3, #64	@ 0x40
 800a892:	d058      	beq.n	800a946 <HAL_TIM_ConfigClockSource+0x18a>
 800a894:	2b40      	cmp	r3, #64	@ 0x40
 800a896:	d86f      	bhi.n	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a898:	2b30      	cmp	r3, #48	@ 0x30
 800a89a:	d064      	beq.n	800a966 <HAL_TIM_ConfigClockSource+0x1aa>
 800a89c:	2b30      	cmp	r3, #48	@ 0x30
 800a89e:	d86b      	bhi.n	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8a0:	2b20      	cmp	r3, #32
 800a8a2:	d060      	beq.n	800a966 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8a4:	2b20      	cmp	r3, #32
 800a8a6:	d867      	bhi.n	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d05c      	beq.n	800a966 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8ac:	2b10      	cmp	r3, #16
 800a8ae:	d05a      	beq.n	800a966 <HAL_TIM_ConfigClockSource+0x1aa>
 800a8b0:	e062      	b.n	800a978 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8c2:	f000 f997 	bl	800abf4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a8d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68ba      	ldr	r2, [r7, #8]
 800a8dc:	609a      	str	r2, [r3, #8]
      break;
 800a8de:	e04f      	b.n	800a980 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8f0:	f000 f980 	bl	800abf4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	689a      	ldr	r2, [r3, #8]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a902:	609a      	str	r2, [r3, #8]
      break;
 800a904:	e03c      	b.n	800a980 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a912:	461a      	mov	r2, r3
 800a914:	f000 f8f0 	bl	800aaf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2150      	movs	r1, #80	@ 0x50
 800a91e:	4618      	mov	r0, r3
 800a920:	f000 f94a 	bl	800abb8 <TIM_ITRx_SetConfig>
      break;
 800a924:	e02c      	b.n	800a980 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a932:	461a      	mov	r2, r3
 800a934:	f000 f90f 	bl	800ab56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2160      	movs	r1, #96	@ 0x60
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 f93a 	bl	800abb8 <TIM_ITRx_SetConfig>
      break;
 800a944:	e01c      	b.n	800a980 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a952:	461a      	mov	r2, r3
 800a954:	f000 f8d0 	bl	800aaf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2140      	movs	r1, #64	@ 0x40
 800a95e:	4618      	mov	r0, r3
 800a960:	f000 f92a 	bl	800abb8 <TIM_ITRx_SetConfig>
      break;
 800a964:	e00c      	b.n	800a980 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4619      	mov	r1, r3
 800a970:	4610      	mov	r0, r2
 800a972:	f000 f921 	bl	800abb8 <TIM_ITRx_SetConfig>
      break;
 800a976:	e003      	b.n	800a980 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	73fb      	strb	r3, [r7, #15]
      break;
 800a97c:	e000      	b.n	800a980 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a97e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2201      	movs	r2, #1
 800a984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	ffceff88 	.word	0xffceff88
 800a9a0:	00100040 	.word	0x00100040
 800a9a4:	00100030 	.word	0x00100030
 800a9a8:	00100020 	.word	0x00100020

0800a9ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	4a46      	ldr	r2, [pc, #280]	@ (800aad8 <TIM_Base_SetConfig+0x12c>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d013      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ca:	d00f      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	4a43      	ldr	r2, [pc, #268]	@ (800aadc <TIM_Base_SetConfig+0x130>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d00b      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a42      	ldr	r2, [pc, #264]	@ (800aae0 <TIM_Base_SetConfig+0x134>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d007      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a41      	ldr	r2, [pc, #260]	@ (800aae4 <TIM_Base_SetConfig+0x138>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d003      	beq.n	800a9ec <TIM_Base_SetConfig+0x40>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a40      	ldr	r2, [pc, #256]	@ (800aae8 <TIM_Base_SetConfig+0x13c>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d108      	bne.n	800a9fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a35      	ldr	r2, [pc, #212]	@ (800aad8 <TIM_Base_SetConfig+0x12c>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d01f      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa0c:	d01b      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a32      	ldr	r2, [pc, #200]	@ (800aadc <TIM_Base_SetConfig+0x130>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d017      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a31      	ldr	r2, [pc, #196]	@ (800aae0 <TIM_Base_SetConfig+0x134>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d013      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a30      	ldr	r2, [pc, #192]	@ (800aae4 <TIM_Base_SetConfig+0x138>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d00f      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a2f      	ldr	r2, [pc, #188]	@ (800aae8 <TIM_Base_SetConfig+0x13c>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00b      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a2e      	ldr	r2, [pc, #184]	@ (800aaec <TIM_Base_SetConfig+0x140>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d007      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a2d      	ldr	r2, [pc, #180]	@ (800aaf0 <TIM_Base_SetConfig+0x144>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d003      	beq.n	800aa46 <TIM_Base_SetConfig+0x9a>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a2c      	ldr	r2, [pc, #176]	@ (800aaf4 <TIM_Base_SetConfig+0x148>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d108      	bne.n	800aa58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	689a      	ldr	r2, [r3, #8]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a16      	ldr	r2, [pc, #88]	@ (800aad8 <TIM_Base_SetConfig+0x12c>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d00f      	beq.n	800aaa4 <TIM_Base_SetConfig+0xf8>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a18      	ldr	r2, [pc, #96]	@ (800aae8 <TIM_Base_SetConfig+0x13c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d00b      	beq.n	800aaa4 <TIM_Base_SetConfig+0xf8>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a17      	ldr	r2, [pc, #92]	@ (800aaec <TIM_Base_SetConfig+0x140>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d007      	beq.n	800aaa4 <TIM_Base_SetConfig+0xf8>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	4a16      	ldr	r2, [pc, #88]	@ (800aaf0 <TIM_Base_SetConfig+0x144>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d003      	beq.n	800aaa4 <TIM_Base_SetConfig+0xf8>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	4a15      	ldr	r2, [pc, #84]	@ (800aaf4 <TIM_Base_SetConfig+0x148>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d103      	bne.n	800aaac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	691a      	ldr	r2, [r3, #16]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	f003 0301 	and.w	r3, r3, #1
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d105      	bne.n	800aaca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	691b      	ldr	r3, [r3, #16]
 800aac2:	f023 0201 	bic.w	r2, r3, #1
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	611a      	str	r2, [r3, #16]
  }
}
 800aaca:	bf00      	nop
 800aacc:	3714      	adds	r7, #20
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr
 800aad6:	bf00      	nop
 800aad8:	40010000 	.word	0x40010000
 800aadc:	40000400 	.word	0x40000400
 800aae0:	40000800 	.word	0x40000800
 800aae4:	40000c00 	.word	0x40000c00
 800aae8:	40010400 	.word	0x40010400
 800aaec:	40014000 	.word	0x40014000
 800aaf0:	40014400 	.word	0x40014400
 800aaf4:	40014800 	.word	0x40014800

0800aaf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b087      	sub	sp, #28
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	f023 0201 	bic.w	r2, r3, #1
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	011b      	lsls	r3, r3, #4
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f023 030a 	bic.w	r3, r3, #10
 800ab34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	621a      	str	r2, [r3, #32]
}
 800ab4a:	bf00      	nop
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b087      	sub	sp, #28
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a1b      	ldr	r3, [r3, #32]
 800ab6c:	f023 0210 	bic.w	r2, r3, #16
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ab80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	031b      	lsls	r3, r3, #12
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ab92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	693a      	ldr	r2, [r7, #16]
 800aba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	697a      	ldr	r2, [r7, #20]
 800aba8:	621a      	str	r2, [r3, #32]
}
 800abaa:	bf00      	nop
 800abac:	371c      	adds	r7, #28
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
	...

0800abb8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	4b09      	ldr	r3, [pc, #36]	@ (800abf0 <TIM_ITRx_SetConfig+0x38>)
 800abcc:	4013      	ands	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abd0:	683a      	ldr	r2, [r7, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	f043 0307 	orr.w	r3, r3, #7
 800abda:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	609a      	str	r2, [r3, #8]
}
 800abe2:	bf00      	nop
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	ffcfff8f 	.word	0xffcfff8f

0800abf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b087      	sub	sp, #28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
 800ac00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	021a      	lsls	r2, r3, #8
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	431a      	orrs	r2, r3
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	609a      	str	r2, [r3, #8]
}
 800ac28:	bf00      	nop
 800ac2a:	371c      	adds	r7, #28
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr

0800ac34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d101      	bne.n	800ac4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac48:	2302      	movs	r3, #2
 800ac4a:	e06d      	b.n	800ad28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2202      	movs	r2, #2
 800ac58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a30      	ldr	r2, [pc, #192]	@ (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d004      	beq.n	800ac80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a2f      	ldr	r2, [pc, #188]	@ (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d108      	bne.n	800ac92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ac86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68fa      	ldr	r2, [r7, #12]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a20      	ldr	r2, [pc, #128]	@ (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d022      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acbe:	d01d      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a1d      	ldr	r2, [pc, #116]	@ (800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d018      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a1c      	ldr	r2, [pc, #112]	@ (800ad40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d013      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a1a      	ldr	r2, [pc, #104]	@ (800ad44 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d00e      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a15      	ldr	r2, [pc, #84]	@ (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d009      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4a16      	ldr	r2, [pc, #88]	@ (800ad48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800acee:	4293      	cmp	r3, r2
 800acf0:	d004      	beq.n	800acfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a15      	ldr	r2, [pc, #84]	@ (800ad4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d10c      	bne.n	800ad16 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	689b      	ldr	r3, [r3, #8]
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr
 800ad34:	40010000 	.word	0x40010000
 800ad38:	40010400 	.word	0x40010400
 800ad3c:	40000400 	.word	0x40000400
 800ad40:	40000800 	.word	0x40000800
 800ad44:	40000c00 	.word	0x40000c00
 800ad48:	40001800 	.word	0x40001800
 800ad4c:	40014000 	.word	0x40014000

0800ad50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d101      	bne.n	800ad62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e042      	b.n	800ade8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d106      	bne.n	800ad7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7f6 fec9 	bl	8001b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2224      	movs	r2, #36	@ 0x24
 800ad7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0201 	bic.w	r2, r2, #1
 800ad90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d002      	beq.n	800ada0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f001 fafc 	bl	800c398 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 fc8d 	bl	800b6c0 <UART_SetConfig>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d101      	bne.n	800adb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e01b      	b.n	800ade8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685a      	ldr	r2, [r3, #4]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800adbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	689a      	ldr	r2, [r3, #8]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f042 0201 	orr.w	r2, r2, #1
 800adde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f001 fb7b 	bl	800c4dc <UART_CheckIdleState>
 800ade6:	4603      	mov	r3, r0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b08a      	sub	sp, #40	@ 0x28
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	60b9      	str	r1, [r7, #8]
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	4613      	mov	r3, r2
 800adfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae06:	2b20      	cmp	r3, #32
 800ae08:	d17b      	bne.n	800af02 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d002      	beq.n	800ae16 <HAL_UART_Transmit+0x26>
 800ae10:	88fb      	ldrh	r3, [r7, #6]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d101      	bne.n	800ae1a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e074      	b.n	800af04 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2221      	movs	r2, #33	@ 0x21
 800ae26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ae2a:	f7f7 f85b 	bl	8001ee4 <HAL_GetTick>
 800ae2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	88fa      	ldrh	r2, [r7, #6]
 800ae34:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	88fa      	ldrh	r2, [r7, #6]
 800ae3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae48:	d108      	bne.n	800ae5c <HAL_UART_Transmit+0x6c>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d104      	bne.n	800ae5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	61bb      	str	r3, [r7, #24]
 800ae5a:	e003      	b.n	800ae64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae60:	2300      	movs	r3, #0
 800ae62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ae64:	e030      	b.n	800aec8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	9300      	str	r3, [sp, #0]
 800ae6a:	697b      	ldr	r3, [r7, #20]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	2180      	movs	r1, #128	@ 0x80
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f001 fbdd 	bl	800c630 <UART_WaitOnFlagUntilTimeout>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d005      	beq.n	800ae88 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ae84:	2303      	movs	r3, #3
 800ae86:	e03d      	b.n	800af04 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ae88:	69fb      	ldr	r3, [r7, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d10b      	bne.n	800aea6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	461a      	mov	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	3302      	adds	r3, #2
 800aea2:	61bb      	str	r3, [r7, #24]
 800aea4:	e007      	b.n	800aeb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	781a      	ldrb	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800aeb0:	69fb      	ldr	r3, [r7, #28]
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	3b01      	subs	r3, #1
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800aece:	b29b      	uxth	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1c8      	bne.n	800ae66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2200      	movs	r2, #0
 800aedc:	2140      	movs	r1, #64	@ 0x40
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f001 fba6 	bl	800c630 <UART_WaitOnFlagUntilTimeout>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d005      	beq.n	800aef6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2220      	movs	r2, #32
 800aeee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	e006      	b.n	800af04 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	e000      	b.n	800af04 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800af02:	2302      	movs	r3, #2
  }
}
 800af04:	4618      	mov	r0, r3
 800af06:	3720      	adds	r7, #32
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b0ba      	sub	sp, #232	@ 0xe8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	69db      	ldr	r3, [r3, #28]
 800af1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800af32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800af36:	f640 030f 	movw	r3, #2063	@ 0x80f
 800af3a:	4013      	ands	r3, r2
 800af3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800af40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af44:	2b00      	cmp	r3, #0
 800af46:	d11b      	bne.n	800af80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af4c:	f003 0320 	and.w	r3, r3, #32
 800af50:	2b00      	cmp	r3, #0
 800af52:	d015      	beq.n	800af80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af58:	f003 0320 	and.w	r3, r3, #32
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d105      	bne.n	800af6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d009      	beq.n	800af80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af70:	2b00      	cmp	r3, #0
 800af72:	f000 8377 	beq.w	800b664 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	4798      	blx	r3
      }
      return;
 800af7e:	e371      	b.n	800b664 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 8123 	beq.w	800b1d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800af8e:	4b8d      	ldr	r3, [pc, #564]	@ (800b1c4 <HAL_UART_IRQHandler+0x2b8>)
 800af90:	4013      	ands	r3, r2
 800af92:	2b00      	cmp	r3, #0
 800af94:	d106      	bne.n	800afa4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800af9a:	4b8b      	ldr	r3, [pc, #556]	@ (800b1c8 <HAL_UART_IRQHandler+0x2bc>)
 800af9c:	4013      	ands	r3, r2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 8116 	beq.w	800b1d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800afa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	d011      	beq.n	800afd4 <HAL_UART_IRQHandler+0xc8>
 800afb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00b      	beq.n	800afd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2201      	movs	r2, #1
 800afc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afca:	f043 0201 	orr.w	r2, r3, #1
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afd8:	f003 0302 	and.w	r3, r3, #2
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d011      	beq.n	800b004 <HAL_UART_IRQHandler+0xf8>
 800afe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afe4:	f003 0301 	and.w	r3, r3, #1
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00b      	beq.n	800b004 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2202      	movs	r2, #2
 800aff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800affa:	f043 0204 	orr.w	r2, r3, #4
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d011      	beq.n	800b034 <HAL_UART_IRQHandler+0x128>
 800b010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00b      	beq.n	800b034 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2204      	movs	r2, #4
 800b022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b02a:	f043 0202 	orr.w	r2, r3, #2
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b038:	f003 0308 	and.w	r3, r3, #8
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d017      	beq.n	800b070 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b044:	f003 0320 	and.w	r3, r3, #32
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d105      	bne.n	800b058 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b04c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b050:	4b5c      	ldr	r3, [pc, #368]	@ (800b1c4 <HAL_UART_IRQHandler+0x2b8>)
 800b052:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b054:	2b00      	cmp	r3, #0
 800b056:	d00b      	beq.n	800b070 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2208      	movs	r2, #8
 800b05e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b066:	f043 0208 	orr.w	r2, r3, #8
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d012      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x196>
 800b07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b080:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00c      	beq.n	800b0a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b098:	f043 0220 	orr.w	r2, r3, #32
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	f000 82dd 	beq.w	800b668 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0b2:	f003 0320 	and.w	r3, r3, #32
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d013      	beq.n	800b0e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0be:	f003 0320 	and.w	r3, r3, #32
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d105      	bne.n	800b0d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d007      	beq.n	800b0e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d003      	beq.n	800b0e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	689b      	ldr	r3, [r3, #8]
 800b0f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0f6:	2b40      	cmp	r3, #64	@ 0x40
 800b0f8:	d005      	beq.n	800b106 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b0fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b0fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b102:	2b00      	cmp	r3, #0
 800b104:	d054      	beq.n	800b1b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f001 fb00 	bl	800c70c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b116:	2b40      	cmp	r3, #64	@ 0x40
 800b118:	d146      	bne.n	800b1a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	3308      	adds	r3, #8
 800b120:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b128:	e853 3f00 	ldrex	r3, [r3]
 800b12c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b130:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b134:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3308      	adds	r3, #8
 800b142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b146:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b14a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b15e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d1d9      	bne.n	800b11a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d017      	beq.n	800b1a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b176:	4a15      	ldr	r2, [pc, #84]	@ (800b1cc <HAL_UART_IRQHandler+0x2c0>)
 800b178:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b180:	4618      	mov	r0, r3
 800b182:	f7f9 fe3f 	bl	8004e04 <HAL_DMA_Abort_IT>
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d019      	beq.n	800b1c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b19a:	4610      	mov	r0, r2
 800b19c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b19e:	e00f      	b.n	800b1c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fa77 	bl	800b694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1a6:	e00b      	b.n	800b1c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fa73 	bl	800b694 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ae:	e007      	b.n	800b1c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fa6f 	bl	800b694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b1be:	e253      	b.n	800b668 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c0:	bf00      	nop
    return;
 800b1c2:	e251      	b.n	800b668 <HAL_UART_IRQHandler+0x75c>
 800b1c4:	10000001 	.word	0x10000001
 800b1c8:	04000120 	.word	0x04000120
 800b1cc:	0800c7d9 	.word	0x0800c7d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	f040 81e7 	bne.w	800b5a8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1de:	f003 0310 	and.w	r3, r3, #16
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	f000 81e0 	beq.w	800b5a8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1ec:	f003 0310 	and.w	r3, r3, #16
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f000 81d9 	beq.w	800b5a8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2210      	movs	r2, #16
 800b1fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b208:	2b40      	cmp	r3, #64	@ 0x40
 800b20a:	f040 8151 	bne.w	800b4b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a96      	ldr	r2, [pc, #600]	@ (800b470 <HAL_UART_IRQHandler+0x564>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d068      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a93      	ldr	r2, [pc, #588]	@ (800b474 <HAL_UART_IRQHandler+0x568>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d061      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a91      	ldr	r2, [pc, #580]	@ (800b478 <HAL_UART_IRQHandler+0x56c>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d05a      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a8e      	ldr	r2, [pc, #568]	@ (800b47c <HAL_UART_IRQHandler+0x570>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d053      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a8c      	ldr	r2, [pc, #560]	@ (800b480 <HAL_UART_IRQHandler+0x574>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d04c      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a89      	ldr	r2, [pc, #548]	@ (800b484 <HAL_UART_IRQHandler+0x578>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d045      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a87      	ldr	r2, [pc, #540]	@ (800b488 <HAL_UART_IRQHandler+0x57c>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d03e      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a84      	ldr	r2, [pc, #528]	@ (800b48c <HAL_UART_IRQHandler+0x580>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d037      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a82      	ldr	r2, [pc, #520]	@ (800b490 <HAL_UART_IRQHandler+0x584>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d030      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a7f      	ldr	r2, [pc, #508]	@ (800b494 <HAL_UART_IRQHandler+0x588>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d029      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a7d      	ldr	r2, [pc, #500]	@ (800b498 <HAL_UART_IRQHandler+0x58c>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d022      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a7a      	ldr	r2, [pc, #488]	@ (800b49c <HAL_UART_IRQHandler+0x590>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d01b      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4a78      	ldr	r2, [pc, #480]	@ (800b4a0 <HAL_UART_IRQHandler+0x594>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d014      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a75      	ldr	r2, [pc, #468]	@ (800b4a4 <HAL_UART_IRQHandler+0x598>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d00d      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a73      	ldr	r2, [pc, #460]	@ (800b4a8 <HAL_UART_IRQHandler+0x59c>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d006      	beq.n	800b2ee <HAL_UART_IRQHandler+0x3e2>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	4a70      	ldr	r2, [pc, #448]	@ (800b4ac <HAL_UART_IRQHandler+0x5a0>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d106      	bne.n	800b2fc <HAL_UART_IRQHandler+0x3f0>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	e005      	b.n	800b308 <HAL_UART_IRQHandler+0x3fc>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	b29b      	uxth	r3, r3
 800b308:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b30c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 81ab 	beq.w	800b66c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b31c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b320:	429a      	cmp	r2, r3
 800b322:	f080 81a3 	bcs.w	800b66c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b32c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b336:	69db      	ldr	r3, [r3, #28]
 800b338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b33c:	f000 8087 	beq.w	800b44e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b34c:	e853 3f00 	ldrex	r3, [r3]
 800b350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b35c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	461a      	mov	r2, r3
 800b366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b36a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b36e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b372:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1da      	bne.n	800b340 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3308      	adds	r3, #8
 800b390:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b39a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b39c:	f023 0301 	bic.w	r3, r3, #1
 800b3a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3308      	adds	r3, #8
 800b3aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b3ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b3b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b3b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b3ba:	e841 2300 	strex	r3, r2, [r1]
 800b3be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b3c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1e1      	bne.n	800b38a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b3d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b3ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b3ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b3f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b3f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e3      	bne.n	800b3c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2220      	movs	r2, #32
 800b402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b41a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b41c:	f023 0310 	bic.w	r3, r3, #16
 800b420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	461a      	mov	r2, r3
 800b42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b42e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b430:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b432:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b436:	e841 2300 	strex	r3, r2, [r1]
 800b43a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b43c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1e4      	bne.n	800b40c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b448:	4618      	mov	r0, r3
 800b44a:	f7f9 f9bd 	bl	80047c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2202      	movs	r2, #2
 800b452:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b460:	b29b      	uxth	r3, r3
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	b29b      	uxth	r3, r3
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f91d 	bl	800b6a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b46e:	e0fd      	b.n	800b66c <HAL_UART_IRQHandler+0x760>
 800b470:	40020010 	.word	0x40020010
 800b474:	40020028 	.word	0x40020028
 800b478:	40020040 	.word	0x40020040
 800b47c:	40020058 	.word	0x40020058
 800b480:	40020070 	.word	0x40020070
 800b484:	40020088 	.word	0x40020088
 800b488:	400200a0 	.word	0x400200a0
 800b48c:	400200b8 	.word	0x400200b8
 800b490:	40020410 	.word	0x40020410
 800b494:	40020428 	.word	0x40020428
 800b498:	40020440 	.word	0x40020440
 800b49c:	40020458 	.word	0x40020458
 800b4a0:	40020470 	.word	0x40020470
 800b4a4:	40020488 	.word	0x40020488
 800b4a8:	400204a0 	.word	0x400204a0
 800b4ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	1ad3      	subs	r3, r2, r3
 800b4c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	f000 80cf 	beq.w	800b670 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b4d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 80ca 	beq.w	800b670 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b4fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800b500:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b502:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b504:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b506:	e841 2300 	strex	r3, r2, [r1]
 800b50a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d1e4      	bne.n	800b4dc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3308      	adds	r3, #8
 800b518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51c:	e853 3f00 	ldrex	r3, [r3]
 800b520:	623b      	str	r3, [r7, #32]
   return(result);
 800b522:	6a3a      	ldr	r2, [r7, #32]
 800b524:	4b55      	ldr	r3, [pc, #340]	@ (800b67c <HAL_UART_IRQHandler+0x770>)
 800b526:	4013      	ands	r3, r2
 800b528:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	3308      	adds	r3, #8
 800b532:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b536:	633a      	str	r2, [r7, #48]	@ 0x30
 800b538:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b53c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b53e:	e841 2300 	strex	r3, r2, [r1]
 800b542:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b546:	2b00      	cmp	r3, #0
 800b548:	d1e3      	bne.n	800b512 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2220      	movs	r2, #32
 800b54e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	e853 3f00 	ldrex	r3, [r3]
 800b56a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f023 0310 	bic.w	r3, r3, #16
 800b572:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	461a      	mov	r2, r3
 800b57c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b580:	61fb      	str	r3, [r7, #28]
 800b582:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b584:	69b9      	ldr	r1, [r7, #24]
 800b586:	69fa      	ldr	r2, [r7, #28]
 800b588:	e841 2300 	strex	r3, r2, [r1]
 800b58c:	617b      	str	r3, [r7, #20]
   return(result);
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1e4      	bne.n	800b55e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b59a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f881 	bl	800b6a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5a6:	e063      	b.n	800b670 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d00e      	beq.n	800b5d2 <HAL_UART_IRQHandler+0x6c6>
 800b5b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d008      	beq.n	800b5d2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b5c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f001 f945 	bl	800c85a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5d0:	e051      	b.n	800b676 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d014      	beq.n	800b608 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d105      	bne.n	800b5f6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b5ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d008      	beq.n	800b608 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d03a      	beq.n	800b674 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	4798      	blx	r3
    }
    return;
 800b606:	e035      	b.n	800b674 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b60c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b610:	2b00      	cmp	r3, #0
 800b612:	d009      	beq.n	800b628 <HAL_UART_IRQHandler+0x71c>
 800b614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f001 f8ef 	bl	800c804 <UART_EndTransmit_IT>
    return;
 800b626:	e026      	b.n	800b676 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b62c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b630:	2b00      	cmp	r3, #0
 800b632:	d009      	beq.n	800b648 <HAL_UART_IRQHandler+0x73c>
 800b634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b638:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d003      	beq.n	800b648 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f001 f91e 	bl	800c882 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b646:	e016      	b.n	800b676 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b64c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d010      	beq.n	800b676 <HAL_UART_IRQHandler+0x76a>
 800b654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b658:	2b00      	cmp	r3, #0
 800b65a:	da0c      	bge.n	800b676 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f001 f906 	bl	800c86e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b662:	e008      	b.n	800b676 <HAL_UART_IRQHandler+0x76a>
      return;
 800b664:	bf00      	nop
 800b666:	e006      	b.n	800b676 <HAL_UART_IRQHandler+0x76a>
    return;
 800b668:	bf00      	nop
 800b66a:	e004      	b.n	800b676 <HAL_UART_IRQHandler+0x76a>
      return;
 800b66c:	bf00      	nop
 800b66e:	e002      	b.n	800b676 <HAL_UART_IRQHandler+0x76a>
      return;
 800b670:	bf00      	nop
 800b672:	e000      	b.n	800b676 <HAL_UART_IRQHandler+0x76a>
    return;
 800b674:	bf00      	nop
  }
}
 800b676:	37e8      	adds	r7, #232	@ 0xe8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	effffffe 	.word	0xeffffffe

0800b680 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6c4:	b092      	sub	sp, #72	@ 0x48
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	689a      	ldr	r2, [r3, #8]
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	691b      	ldr	r3, [r3, #16]
 800b6d8:	431a      	orrs	r2, r3
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	431a      	orrs	r2, r3
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	69db      	ldr	r3, [r3, #28]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	4bbe      	ldr	r3, [pc, #760]	@ (800b9e8 <UART_SetConfig+0x328>)
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	6812      	ldr	r2, [r2, #0]
 800b6f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b6f8:	430b      	orrs	r3, r1
 800b6fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	68da      	ldr	r2, [r3, #12]
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	430a      	orrs	r2, r1
 800b710:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	699b      	ldr	r3, [r3, #24]
 800b716:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4ab3      	ldr	r2, [pc, #716]	@ (800b9ec <UART_SetConfig+0x32c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d004      	beq.n	800b72c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	6a1b      	ldr	r3, [r3, #32]
 800b726:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b728:	4313      	orrs	r3, r2
 800b72a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689a      	ldr	r2, [r3, #8]
 800b732:	4baf      	ldr	r3, [pc, #700]	@ (800b9f0 <UART_SetConfig+0x330>)
 800b734:	4013      	ands	r3, r2
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	6812      	ldr	r2, [r2, #0]
 800b73a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b73c:	430b      	orrs	r3, r1
 800b73e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b746:	f023 010f 	bic.w	r1, r3, #15
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	430a      	orrs	r2, r1
 800b754:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4aa6      	ldr	r2, [pc, #664]	@ (800b9f4 <UART_SetConfig+0x334>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d177      	bne.n	800b850 <UART_SetConfig+0x190>
 800b760:	4ba5      	ldr	r3, [pc, #660]	@ (800b9f8 <UART_SetConfig+0x338>)
 800b762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b764:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b768:	2b28      	cmp	r3, #40	@ 0x28
 800b76a:	d86d      	bhi.n	800b848 <UART_SetConfig+0x188>
 800b76c:	a201      	add	r2, pc, #4	@ (adr r2, 800b774 <UART_SetConfig+0xb4>)
 800b76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b772:	bf00      	nop
 800b774:	0800b819 	.word	0x0800b819
 800b778:	0800b849 	.word	0x0800b849
 800b77c:	0800b849 	.word	0x0800b849
 800b780:	0800b849 	.word	0x0800b849
 800b784:	0800b849 	.word	0x0800b849
 800b788:	0800b849 	.word	0x0800b849
 800b78c:	0800b849 	.word	0x0800b849
 800b790:	0800b849 	.word	0x0800b849
 800b794:	0800b821 	.word	0x0800b821
 800b798:	0800b849 	.word	0x0800b849
 800b79c:	0800b849 	.word	0x0800b849
 800b7a0:	0800b849 	.word	0x0800b849
 800b7a4:	0800b849 	.word	0x0800b849
 800b7a8:	0800b849 	.word	0x0800b849
 800b7ac:	0800b849 	.word	0x0800b849
 800b7b0:	0800b849 	.word	0x0800b849
 800b7b4:	0800b829 	.word	0x0800b829
 800b7b8:	0800b849 	.word	0x0800b849
 800b7bc:	0800b849 	.word	0x0800b849
 800b7c0:	0800b849 	.word	0x0800b849
 800b7c4:	0800b849 	.word	0x0800b849
 800b7c8:	0800b849 	.word	0x0800b849
 800b7cc:	0800b849 	.word	0x0800b849
 800b7d0:	0800b849 	.word	0x0800b849
 800b7d4:	0800b831 	.word	0x0800b831
 800b7d8:	0800b849 	.word	0x0800b849
 800b7dc:	0800b849 	.word	0x0800b849
 800b7e0:	0800b849 	.word	0x0800b849
 800b7e4:	0800b849 	.word	0x0800b849
 800b7e8:	0800b849 	.word	0x0800b849
 800b7ec:	0800b849 	.word	0x0800b849
 800b7f0:	0800b849 	.word	0x0800b849
 800b7f4:	0800b839 	.word	0x0800b839
 800b7f8:	0800b849 	.word	0x0800b849
 800b7fc:	0800b849 	.word	0x0800b849
 800b800:	0800b849 	.word	0x0800b849
 800b804:	0800b849 	.word	0x0800b849
 800b808:	0800b849 	.word	0x0800b849
 800b80c:	0800b849 	.word	0x0800b849
 800b810:	0800b849 	.word	0x0800b849
 800b814:	0800b841 	.word	0x0800b841
 800b818:	2301      	movs	r3, #1
 800b81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b81e:	e326      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b820:	2304      	movs	r3, #4
 800b822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b826:	e322      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b828:	2308      	movs	r3, #8
 800b82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b82e:	e31e      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b830:	2310      	movs	r3, #16
 800b832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b836:	e31a      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b838:	2320      	movs	r3, #32
 800b83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b83e:	e316      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b840:	2340      	movs	r3, #64	@ 0x40
 800b842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b846:	e312      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b848:	2380      	movs	r3, #128	@ 0x80
 800b84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b84e:	e30e      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a69      	ldr	r2, [pc, #420]	@ (800b9fc <UART_SetConfig+0x33c>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d130      	bne.n	800b8bc <UART_SetConfig+0x1fc>
 800b85a:	4b67      	ldr	r3, [pc, #412]	@ (800b9f8 <UART_SetConfig+0x338>)
 800b85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b85e:	f003 0307 	and.w	r3, r3, #7
 800b862:	2b05      	cmp	r3, #5
 800b864:	d826      	bhi.n	800b8b4 <UART_SetConfig+0x1f4>
 800b866:	a201      	add	r2, pc, #4	@ (adr r2, 800b86c <UART_SetConfig+0x1ac>)
 800b868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86c:	0800b885 	.word	0x0800b885
 800b870:	0800b88d 	.word	0x0800b88d
 800b874:	0800b895 	.word	0x0800b895
 800b878:	0800b89d 	.word	0x0800b89d
 800b87c:	0800b8a5 	.word	0x0800b8a5
 800b880:	0800b8ad 	.word	0x0800b8ad
 800b884:	2300      	movs	r3, #0
 800b886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b88a:	e2f0      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b88c:	2304      	movs	r3, #4
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b892:	e2ec      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b894:	2308      	movs	r3, #8
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b89a:	e2e8      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b89c:	2310      	movs	r3, #16
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8a2:	e2e4      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b8a4:	2320      	movs	r3, #32
 800b8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8aa:	e2e0      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b8ac:	2340      	movs	r3, #64	@ 0x40
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8b2:	e2dc      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b8b4:	2380      	movs	r3, #128	@ 0x80
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8ba:	e2d8      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a4f      	ldr	r2, [pc, #316]	@ (800ba00 <UART_SetConfig+0x340>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d130      	bne.n	800b928 <UART_SetConfig+0x268>
 800b8c6:	4b4c      	ldr	r3, [pc, #304]	@ (800b9f8 <UART_SetConfig+0x338>)
 800b8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ca:	f003 0307 	and.w	r3, r3, #7
 800b8ce:	2b05      	cmp	r3, #5
 800b8d0:	d826      	bhi.n	800b920 <UART_SetConfig+0x260>
 800b8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800b8d8 <UART_SetConfig+0x218>)
 800b8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d8:	0800b8f1 	.word	0x0800b8f1
 800b8dc:	0800b8f9 	.word	0x0800b8f9
 800b8e0:	0800b901 	.word	0x0800b901
 800b8e4:	0800b909 	.word	0x0800b909
 800b8e8:	0800b911 	.word	0x0800b911
 800b8ec:	0800b919 	.word	0x0800b919
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8f6:	e2ba      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b8f8:	2304      	movs	r3, #4
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b8fe:	e2b6      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b900:	2308      	movs	r3, #8
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b906:	e2b2      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b908:	2310      	movs	r3, #16
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b90e:	e2ae      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b910:	2320      	movs	r3, #32
 800b912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b916:	e2aa      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b918:	2340      	movs	r3, #64	@ 0x40
 800b91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b91e:	e2a6      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b920:	2380      	movs	r3, #128	@ 0x80
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b926:	e2a2      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a35      	ldr	r2, [pc, #212]	@ (800ba04 <UART_SetConfig+0x344>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d130      	bne.n	800b994 <UART_SetConfig+0x2d4>
 800b932:	4b31      	ldr	r3, [pc, #196]	@ (800b9f8 <UART_SetConfig+0x338>)
 800b934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b936:	f003 0307 	and.w	r3, r3, #7
 800b93a:	2b05      	cmp	r3, #5
 800b93c:	d826      	bhi.n	800b98c <UART_SetConfig+0x2cc>
 800b93e:	a201      	add	r2, pc, #4	@ (adr r2, 800b944 <UART_SetConfig+0x284>)
 800b940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b944:	0800b95d 	.word	0x0800b95d
 800b948:	0800b965 	.word	0x0800b965
 800b94c:	0800b96d 	.word	0x0800b96d
 800b950:	0800b975 	.word	0x0800b975
 800b954:	0800b97d 	.word	0x0800b97d
 800b958:	0800b985 	.word	0x0800b985
 800b95c:	2300      	movs	r3, #0
 800b95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b962:	e284      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b964:	2304      	movs	r3, #4
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96a:	e280      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b96c:	2308      	movs	r3, #8
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b972:	e27c      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b974:	2310      	movs	r3, #16
 800b976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97a:	e278      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b97c:	2320      	movs	r3, #32
 800b97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b982:	e274      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b984:	2340      	movs	r3, #64	@ 0x40
 800b986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98a:	e270      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b98c:	2380      	movs	r3, #128	@ 0x80
 800b98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b992:	e26c      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a1b      	ldr	r2, [pc, #108]	@ (800ba08 <UART_SetConfig+0x348>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d142      	bne.n	800ba24 <UART_SetConfig+0x364>
 800b99e:	4b16      	ldr	r3, [pc, #88]	@ (800b9f8 <UART_SetConfig+0x338>)
 800b9a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9a2:	f003 0307 	and.w	r3, r3, #7
 800b9a6:	2b05      	cmp	r3, #5
 800b9a8:	d838      	bhi.n	800ba1c <UART_SetConfig+0x35c>
 800b9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b0 <UART_SetConfig+0x2f0>)
 800b9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b0:	0800b9c9 	.word	0x0800b9c9
 800b9b4:	0800b9d1 	.word	0x0800b9d1
 800b9b8:	0800b9d9 	.word	0x0800b9d9
 800b9bc:	0800b9e1 	.word	0x0800b9e1
 800b9c0:	0800ba0d 	.word	0x0800ba0d
 800b9c4:	0800ba15 	.word	0x0800ba15
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ce:	e24e      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b9d0:	2304      	movs	r3, #4
 800b9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d6:	e24a      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b9d8:	2308      	movs	r3, #8
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9de:	e246      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b9e0:	2310      	movs	r3, #16
 800b9e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e6:	e242      	b.n	800be6e <UART_SetConfig+0x7ae>
 800b9e8:	cfff69f3 	.word	0xcfff69f3
 800b9ec:	58000c00 	.word	0x58000c00
 800b9f0:	11fff4ff 	.word	0x11fff4ff
 800b9f4:	40011000 	.word	0x40011000
 800b9f8:	58024400 	.word	0x58024400
 800b9fc:	40004400 	.word	0x40004400
 800ba00:	40004800 	.word	0x40004800
 800ba04:	40004c00 	.word	0x40004c00
 800ba08:	40005000 	.word	0x40005000
 800ba0c:	2320      	movs	r3, #32
 800ba0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba12:	e22c      	b.n	800be6e <UART_SetConfig+0x7ae>
 800ba14:	2340      	movs	r3, #64	@ 0x40
 800ba16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba1a:	e228      	b.n	800be6e <UART_SetConfig+0x7ae>
 800ba1c:	2380      	movs	r3, #128	@ 0x80
 800ba1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba22:	e224      	b.n	800be6e <UART_SetConfig+0x7ae>
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4ab1      	ldr	r2, [pc, #708]	@ (800bcf0 <UART_SetConfig+0x630>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d176      	bne.n	800bb1c <UART_SetConfig+0x45c>
 800ba2e:	4bb1      	ldr	r3, [pc, #708]	@ (800bcf4 <UART_SetConfig+0x634>)
 800ba30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ba36:	2b28      	cmp	r3, #40	@ 0x28
 800ba38:	d86c      	bhi.n	800bb14 <UART_SetConfig+0x454>
 800ba3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba40 <UART_SetConfig+0x380>)
 800ba3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba40:	0800bae5 	.word	0x0800bae5
 800ba44:	0800bb15 	.word	0x0800bb15
 800ba48:	0800bb15 	.word	0x0800bb15
 800ba4c:	0800bb15 	.word	0x0800bb15
 800ba50:	0800bb15 	.word	0x0800bb15
 800ba54:	0800bb15 	.word	0x0800bb15
 800ba58:	0800bb15 	.word	0x0800bb15
 800ba5c:	0800bb15 	.word	0x0800bb15
 800ba60:	0800baed 	.word	0x0800baed
 800ba64:	0800bb15 	.word	0x0800bb15
 800ba68:	0800bb15 	.word	0x0800bb15
 800ba6c:	0800bb15 	.word	0x0800bb15
 800ba70:	0800bb15 	.word	0x0800bb15
 800ba74:	0800bb15 	.word	0x0800bb15
 800ba78:	0800bb15 	.word	0x0800bb15
 800ba7c:	0800bb15 	.word	0x0800bb15
 800ba80:	0800baf5 	.word	0x0800baf5
 800ba84:	0800bb15 	.word	0x0800bb15
 800ba88:	0800bb15 	.word	0x0800bb15
 800ba8c:	0800bb15 	.word	0x0800bb15
 800ba90:	0800bb15 	.word	0x0800bb15
 800ba94:	0800bb15 	.word	0x0800bb15
 800ba98:	0800bb15 	.word	0x0800bb15
 800ba9c:	0800bb15 	.word	0x0800bb15
 800baa0:	0800bafd 	.word	0x0800bafd
 800baa4:	0800bb15 	.word	0x0800bb15
 800baa8:	0800bb15 	.word	0x0800bb15
 800baac:	0800bb15 	.word	0x0800bb15
 800bab0:	0800bb15 	.word	0x0800bb15
 800bab4:	0800bb15 	.word	0x0800bb15
 800bab8:	0800bb15 	.word	0x0800bb15
 800babc:	0800bb15 	.word	0x0800bb15
 800bac0:	0800bb05 	.word	0x0800bb05
 800bac4:	0800bb15 	.word	0x0800bb15
 800bac8:	0800bb15 	.word	0x0800bb15
 800bacc:	0800bb15 	.word	0x0800bb15
 800bad0:	0800bb15 	.word	0x0800bb15
 800bad4:	0800bb15 	.word	0x0800bb15
 800bad8:	0800bb15 	.word	0x0800bb15
 800badc:	0800bb15 	.word	0x0800bb15
 800bae0:	0800bb0d 	.word	0x0800bb0d
 800bae4:	2301      	movs	r3, #1
 800bae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baea:	e1c0      	b.n	800be6e <UART_SetConfig+0x7ae>
 800baec:	2304      	movs	r3, #4
 800baee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baf2:	e1bc      	b.n	800be6e <UART_SetConfig+0x7ae>
 800baf4:	2308      	movs	r3, #8
 800baf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bafa:	e1b8      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bafc:	2310      	movs	r3, #16
 800bafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb02:	e1b4      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb04:	2320      	movs	r3, #32
 800bb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb0a:	e1b0      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb0c:	2340      	movs	r3, #64	@ 0x40
 800bb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb12:	e1ac      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb14:	2380      	movs	r3, #128	@ 0x80
 800bb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1a:	e1a8      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a75      	ldr	r2, [pc, #468]	@ (800bcf8 <UART_SetConfig+0x638>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d130      	bne.n	800bb88 <UART_SetConfig+0x4c8>
 800bb26:	4b73      	ldr	r3, [pc, #460]	@ (800bcf4 <UART_SetConfig+0x634>)
 800bb28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb2a:	f003 0307 	and.w	r3, r3, #7
 800bb2e:	2b05      	cmp	r3, #5
 800bb30:	d826      	bhi.n	800bb80 <UART_SetConfig+0x4c0>
 800bb32:	a201      	add	r2, pc, #4	@ (adr r2, 800bb38 <UART_SetConfig+0x478>)
 800bb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb38:	0800bb51 	.word	0x0800bb51
 800bb3c:	0800bb59 	.word	0x0800bb59
 800bb40:	0800bb61 	.word	0x0800bb61
 800bb44:	0800bb69 	.word	0x0800bb69
 800bb48:	0800bb71 	.word	0x0800bb71
 800bb4c:	0800bb79 	.word	0x0800bb79
 800bb50:	2300      	movs	r3, #0
 800bb52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb56:	e18a      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb58:	2304      	movs	r3, #4
 800bb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb5e:	e186      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb60:	2308      	movs	r3, #8
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb66:	e182      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb68:	2310      	movs	r3, #16
 800bb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6e:	e17e      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb70:	2320      	movs	r3, #32
 800bb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb76:	e17a      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb78:	2340      	movs	r3, #64	@ 0x40
 800bb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb7e:	e176      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb80:	2380      	movs	r3, #128	@ 0x80
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb86:	e172      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a5b      	ldr	r2, [pc, #364]	@ (800bcfc <UART_SetConfig+0x63c>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d130      	bne.n	800bbf4 <UART_SetConfig+0x534>
 800bb92:	4b58      	ldr	r3, [pc, #352]	@ (800bcf4 <UART_SetConfig+0x634>)
 800bb94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb96:	f003 0307 	and.w	r3, r3, #7
 800bb9a:	2b05      	cmp	r3, #5
 800bb9c:	d826      	bhi.n	800bbec <UART_SetConfig+0x52c>
 800bb9e:	a201      	add	r2, pc, #4	@ (adr r2, 800bba4 <UART_SetConfig+0x4e4>)
 800bba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba4:	0800bbbd 	.word	0x0800bbbd
 800bba8:	0800bbc5 	.word	0x0800bbc5
 800bbac:	0800bbcd 	.word	0x0800bbcd
 800bbb0:	0800bbd5 	.word	0x0800bbd5
 800bbb4:	0800bbdd 	.word	0x0800bbdd
 800bbb8:	0800bbe5 	.word	0x0800bbe5
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc2:	e154      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bbc4:	2304      	movs	r3, #4
 800bbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbca:	e150      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bbcc:	2308      	movs	r3, #8
 800bbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd2:	e14c      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bbd4:	2310      	movs	r3, #16
 800bbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbda:	e148      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bbdc:	2320      	movs	r3, #32
 800bbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbe2:	e144      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bbe4:	2340      	movs	r3, #64	@ 0x40
 800bbe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbea:	e140      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bbec:	2380      	movs	r3, #128	@ 0x80
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbf2:	e13c      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a41      	ldr	r2, [pc, #260]	@ (800bd00 <UART_SetConfig+0x640>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	f040 8082 	bne.w	800bd04 <UART_SetConfig+0x644>
 800bc00:	4b3c      	ldr	r3, [pc, #240]	@ (800bcf4 <UART_SetConfig+0x634>)
 800bc02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc08:	2b28      	cmp	r3, #40	@ 0x28
 800bc0a:	d86d      	bhi.n	800bce8 <UART_SetConfig+0x628>
 800bc0c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc14 <UART_SetConfig+0x554>)
 800bc0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc12:	bf00      	nop
 800bc14:	0800bcb9 	.word	0x0800bcb9
 800bc18:	0800bce9 	.word	0x0800bce9
 800bc1c:	0800bce9 	.word	0x0800bce9
 800bc20:	0800bce9 	.word	0x0800bce9
 800bc24:	0800bce9 	.word	0x0800bce9
 800bc28:	0800bce9 	.word	0x0800bce9
 800bc2c:	0800bce9 	.word	0x0800bce9
 800bc30:	0800bce9 	.word	0x0800bce9
 800bc34:	0800bcc1 	.word	0x0800bcc1
 800bc38:	0800bce9 	.word	0x0800bce9
 800bc3c:	0800bce9 	.word	0x0800bce9
 800bc40:	0800bce9 	.word	0x0800bce9
 800bc44:	0800bce9 	.word	0x0800bce9
 800bc48:	0800bce9 	.word	0x0800bce9
 800bc4c:	0800bce9 	.word	0x0800bce9
 800bc50:	0800bce9 	.word	0x0800bce9
 800bc54:	0800bcc9 	.word	0x0800bcc9
 800bc58:	0800bce9 	.word	0x0800bce9
 800bc5c:	0800bce9 	.word	0x0800bce9
 800bc60:	0800bce9 	.word	0x0800bce9
 800bc64:	0800bce9 	.word	0x0800bce9
 800bc68:	0800bce9 	.word	0x0800bce9
 800bc6c:	0800bce9 	.word	0x0800bce9
 800bc70:	0800bce9 	.word	0x0800bce9
 800bc74:	0800bcd1 	.word	0x0800bcd1
 800bc78:	0800bce9 	.word	0x0800bce9
 800bc7c:	0800bce9 	.word	0x0800bce9
 800bc80:	0800bce9 	.word	0x0800bce9
 800bc84:	0800bce9 	.word	0x0800bce9
 800bc88:	0800bce9 	.word	0x0800bce9
 800bc8c:	0800bce9 	.word	0x0800bce9
 800bc90:	0800bce9 	.word	0x0800bce9
 800bc94:	0800bcd9 	.word	0x0800bcd9
 800bc98:	0800bce9 	.word	0x0800bce9
 800bc9c:	0800bce9 	.word	0x0800bce9
 800bca0:	0800bce9 	.word	0x0800bce9
 800bca4:	0800bce9 	.word	0x0800bce9
 800bca8:	0800bce9 	.word	0x0800bce9
 800bcac:	0800bce9 	.word	0x0800bce9
 800bcb0:	0800bce9 	.word	0x0800bce9
 800bcb4:	0800bce1 	.word	0x0800bce1
 800bcb8:	2301      	movs	r3, #1
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcbe:	e0d6      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bcc0:	2304      	movs	r3, #4
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc6:	e0d2      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bcc8:	2308      	movs	r3, #8
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcce:	e0ce      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bcd0:	2310      	movs	r3, #16
 800bcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd6:	e0ca      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bcd8:	2320      	movs	r3, #32
 800bcda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcde:	e0c6      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bce0:	2340      	movs	r3, #64	@ 0x40
 800bce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bce6:	e0c2      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bce8:	2380      	movs	r3, #128	@ 0x80
 800bcea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcee:	e0be      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bcf0:	40011400 	.word	0x40011400
 800bcf4:	58024400 	.word	0x58024400
 800bcf8:	40007800 	.word	0x40007800
 800bcfc:	40007c00 	.word	0x40007c00
 800bd00:	40011800 	.word	0x40011800
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4aad      	ldr	r2, [pc, #692]	@ (800bfc0 <UART_SetConfig+0x900>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d176      	bne.n	800bdfc <UART_SetConfig+0x73c>
 800bd0e:	4bad      	ldr	r3, [pc, #692]	@ (800bfc4 <UART_SetConfig+0x904>)
 800bd10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd16:	2b28      	cmp	r3, #40	@ 0x28
 800bd18:	d86c      	bhi.n	800bdf4 <UART_SetConfig+0x734>
 800bd1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd20 <UART_SetConfig+0x660>)
 800bd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd20:	0800bdc5 	.word	0x0800bdc5
 800bd24:	0800bdf5 	.word	0x0800bdf5
 800bd28:	0800bdf5 	.word	0x0800bdf5
 800bd2c:	0800bdf5 	.word	0x0800bdf5
 800bd30:	0800bdf5 	.word	0x0800bdf5
 800bd34:	0800bdf5 	.word	0x0800bdf5
 800bd38:	0800bdf5 	.word	0x0800bdf5
 800bd3c:	0800bdf5 	.word	0x0800bdf5
 800bd40:	0800bdcd 	.word	0x0800bdcd
 800bd44:	0800bdf5 	.word	0x0800bdf5
 800bd48:	0800bdf5 	.word	0x0800bdf5
 800bd4c:	0800bdf5 	.word	0x0800bdf5
 800bd50:	0800bdf5 	.word	0x0800bdf5
 800bd54:	0800bdf5 	.word	0x0800bdf5
 800bd58:	0800bdf5 	.word	0x0800bdf5
 800bd5c:	0800bdf5 	.word	0x0800bdf5
 800bd60:	0800bdd5 	.word	0x0800bdd5
 800bd64:	0800bdf5 	.word	0x0800bdf5
 800bd68:	0800bdf5 	.word	0x0800bdf5
 800bd6c:	0800bdf5 	.word	0x0800bdf5
 800bd70:	0800bdf5 	.word	0x0800bdf5
 800bd74:	0800bdf5 	.word	0x0800bdf5
 800bd78:	0800bdf5 	.word	0x0800bdf5
 800bd7c:	0800bdf5 	.word	0x0800bdf5
 800bd80:	0800bddd 	.word	0x0800bddd
 800bd84:	0800bdf5 	.word	0x0800bdf5
 800bd88:	0800bdf5 	.word	0x0800bdf5
 800bd8c:	0800bdf5 	.word	0x0800bdf5
 800bd90:	0800bdf5 	.word	0x0800bdf5
 800bd94:	0800bdf5 	.word	0x0800bdf5
 800bd98:	0800bdf5 	.word	0x0800bdf5
 800bd9c:	0800bdf5 	.word	0x0800bdf5
 800bda0:	0800bde5 	.word	0x0800bde5
 800bda4:	0800bdf5 	.word	0x0800bdf5
 800bda8:	0800bdf5 	.word	0x0800bdf5
 800bdac:	0800bdf5 	.word	0x0800bdf5
 800bdb0:	0800bdf5 	.word	0x0800bdf5
 800bdb4:	0800bdf5 	.word	0x0800bdf5
 800bdb8:	0800bdf5 	.word	0x0800bdf5
 800bdbc:	0800bdf5 	.word	0x0800bdf5
 800bdc0:	0800bded 	.word	0x0800bded
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdca:	e050      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bdcc:	2304      	movs	r3, #4
 800bdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdd2:	e04c      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bdd4:	2308      	movs	r3, #8
 800bdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdda:	e048      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bddc:	2310      	movs	r3, #16
 800bdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bde2:	e044      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bde4:	2320      	movs	r3, #32
 800bde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdea:	e040      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bdec:	2340      	movs	r3, #64	@ 0x40
 800bdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdf2:	e03c      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bdf4:	2380      	movs	r3, #128	@ 0x80
 800bdf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdfa:	e038      	b.n	800be6e <UART_SetConfig+0x7ae>
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4a71      	ldr	r2, [pc, #452]	@ (800bfc8 <UART_SetConfig+0x908>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d130      	bne.n	800be68 <UART_SetConfig+0x7a8>
 800be06:	4b6f      	ldr	r3, [pc, #444]	@ (800bfc4 <UART_SetConfig+0x904>)
 800be08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be0a:	f003 0307 	and.w	r3, r3, #7
 800be0e:	2b05      	cmp	r3, #5
 800be10:	d826      	bhi.n	800be60 <UART_SetConfig+0x7a0>
 800be12:	a201      	add	r2, pc, #4	@ (adr r2, 800be18 <UART_SetConfig+0x758>)
 800be14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be18:	0800be31 	.word	0x0800be31
 800be1c:	0800be39 	.word	0x0800be39
 800be20:	0800be41 	.word	0x0800be41
 800be24:	0800be49 	.word	0x0800be49
 800be28:	0800be51 	.word	0x0800be51
 800be2c:	0800be59 	.word	0x0800be59
 800be30:	2302      	movs	r3, #2
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be36:	e01a      	b.n	800be6e <UART_SetConfig+0x7ae>
 800be38:	2304      	movs	r3, #4
 800be3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3e:	e016      	b.n	800be6e <UART_SetConfig+0x7ae>
 800be40:	2308      	movs	r3, #8
 800be42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be46:	e012      	b.n	800be6e <UART_SetConfig+0x7ae>
 800be48:	2310      	movs	r3, #16
 800be4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be4e:	e00e      	b.n	800be6e <UART_SetConfig+0x7ae>
 800be50:	2320      	movs	r3, #32
 800be52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be56:	e00a      	b.n	800be6e <UART_SetConfig+0x7ae>
 800be58:	2340      	movs	r3, #64	@ 0x40
 800be5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5e:	e006      	b.n	800be6e <UART_SetConfig+0x7ae>
 800be60:	2380      	movs	r3, #128	@ 0x80
 800be62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be66:	e002      	b.n	800be6e <UART_SetConfig+0x7ae>
 800be68:	2380      	movs	r3, #128	@ 0x80
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a55      	ldr	r2, [pc, #340]	@ (800bfc8 <UART_SetConfig+0x908>)
 800be74:	4293      	cmp	r3, r2
 800be76:	f040 80f8 	bne.w	800c06a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800be7a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800be7e:	2b20      	cmp	r3, #32
 800be80:	dc46      	bgt.n	800bf10 <UART_SetConfig+0x850>
 800be82:	2b02      	cmp	r3, #2
 800be84:	db75      	blt.n	800bf72 <UART_SetConfig+0x8b2>
 800be86:	3b02      	subs	r3, #2
 800be88:	2b1e      	cmp	r3, #30
 800be8a:	d872      	bhi.n	800bf72 <UART_SetConfig+0x8b2>
 800be8c:	a201      	add	r2, pc, #4	@ (adr r2, 800be94 <UART_SetConfig+0x7d4>)
 800be8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be92:	bf00      	nop
 800be94:	0800bf17 	.word	0x0800bf17
 800be98:	0800bf73 	.word	0x0800bf73
 800be9c:	0800bf1f 	.word	0x0800bf1f
 800bea0:	0800bf73 	.word	0x0800bf73
 800bea4:	0800bf73 	.word	0x0800bf73
 800bea8:	0800bf73 	.word	0x0800bf73
 800beac:	0800bf2f 	.word	0x0800bf2f
 800beb0:	0800bf73 	.word	0x0800bf73
 800beb4:	0800bf73 	.word	0x0800bf73
 800beb8:	0800bf73 	.word	0x0800bf73
 800bebc:	0800bf73 	.word	0x0800bf73
 800bec0:	0800bf73 	.word	0x0800bf73
 800bec4:	0800bf73 	.word	0x0800bf73
 800bec8:	0800bf73 	.word	0x0800bf73
 800becc:	0800bf3f 	.word	0x0800bf3f
 800bed0:	0800bf73 	.word	0x0800bf73
 800bed4:	0800bf73 	.word	0x0800bf73
 800bed8:	0800bf73 	.word	0x0800bf73
 800bedc:	0800bf73 	.word	0x0800bf73
 800bee0:	0800bf73 	.word	0x0800bf73
 800bee4:	0800bf73 	.word	0x0800bf73
 800bee8:	0800bf73 	.word	0x0800bf73
 800beec:	0800bf73 	.word	0x0800bf73
 800bef0:	0800bf73 	.word	0x0800bf73
 800bef4:	0800bf73 	.word	0x0800bf73
 800bef8:	0800bf73 	.word	0x0800bf73
 800befc:	0800bf73 	.word	0x0800bf73
 800bf00:	0800bf73 	.word	0x0800bf73
 800bf04:	0800bf73 	.word	0x0800bf73
 800bf08:	0800bf73 	.word	0x0800bf73
 800bf0c:	0800bf65 	.word	0x0800bf65
 800bf10:	2b40      	cmp	r3, #64	@ 0x40
 800bf12:	d02a      	beq.n	800bf6a <UART_SetConfig+0x8aa>
 800bf14:	e02d      	b.n	800bf72 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bf16:	f7fd fe2f 	bl	8009b78 <HAL_RCCEx_GetD3PCLK1Freq>
 800bf1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800bf1c:	e02f      	b.n	800bf7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fd fe3e 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf2c:	e027      	b.n	800bf7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf2e:	f107 0318 	add.w	r3, r7, #24
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fd ff8a 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf3c:	e01f      	b.n	800bf7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf3e:	4b21      	ldr	r3, [pc, #132]	@ (800bfc4 <UART_SetConfig+0x904>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 0320 	and.w	r3, r3, #32
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d009      	beq.n	800bf5e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bf4a:	4b1e      	ldr	r3, [pc, #120]	@ (800bfc4 <UART_SetConfig+0x904>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	08db      	lsrs	r3, r3, #3
 800bf50:	f003 0303 	and.w	r3, r3, #3
 800bf54:	4a1d      	ldr	r2, [pc, #116]	@ (800bfcc <UART_SetConfig+0x90c>)
 800bf56:	fa22 f303 	lsr.w	r3, r2, r3
 800bf5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf5c:	e00f      	b.n	800bf7e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bf5e:	4b1b      	ldr	r3, [pc, #108]	@ (800bfcc <UART_SetConfig+0x90c>)
 800bf60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf62:	e00c      	b.n	800bf7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf64:	4b1a      	ldr	r3, [pc, #104]	@ (800bfd0 <UART_SetConfig+0x910>)
 800bf66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf68:	e009      	b.n	800bf7e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800bf70:	e005      	b.n	800bf7e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bf72:	2300      	movs	r3, #0
 800bf74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800bf76:	2301      	movs	r3, #1
 800bf78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800bf7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bf7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f000 81ee 	beq.w	800c362 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf8a:	4a12      	ldr	r2, [pc, #72]	@ (800bfd4 <UART_SetConfig+0x914>)
 800bf8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf90:	461a      	mov	r2, r3
 800bf92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf94:	fbb3 f3f2 	udiv	r3, r3, r2
 800bf98:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	005b      	lsls	r3, r3, #1
 800bfa2:	4413      	add	r3, r2
 800bfa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d305      	bcc.n	800bfb6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bfb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d910      	bls.n	800bfd8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800bfbc:	e1d1      	b.n	800c362 <UART_SetConfig+0xca2>
 800bfbe:	bf00      	nop
 800bfc0:	40011c00 	.word	0x40011c00
 800bfc4:	58024400 	.word	0x58024400
 800bfc8:	58000c00 	.word	0x58000c00
 800bfcc:	03d09000 	.word	0x03d09000
 800bfd0:	003d0900 	.word	0x003d0900
 800bfd4:	0800e5d0 	.word	0x0800e5d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfda:	2200      	movs	r2, #0
 800bfdc:	60bb      	str	r3, [r7, #8]
 800bfde:	60fa      	str	r2, [r7, #12]
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfe4:	4ac0      	ldr	r2, [pc, #768]	@ (800c2e8 <UART_SetConfig+0xc28>)
 800bfe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	2200      	movs	r2, #0
 800bfee:	603b      	str	r3, [r7, #0]
 800bff0:	607a      	str	r2, [r7, #4]
 800bff2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bffa:	f7f4 f979 	bl	80002f0 <__aeabi_uldivmod>
 800bffe:	4602      	mov	r2, r0
 800c000:	460b      	mov	r3, r1
 800c002:	4610      	mov	r0, r2
 800c004:	4619      	mov	r1, r3
 800c006:	f04f 0200 	mov.w	r2, #0
 800c00a:	f04f 0300 	mov.w	r3, #0
 800c00e:	020b      	lsls	r3, r1, #8
 800c010:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c014:	0202      	lsls	r2, r0, #8
 800c016:	6979      	ldr	r1, [r7, #20]
 800c018:	6849      	ldr	r1, [r1, #4]
 800c01a:	0849      	lsrs	r1, r1, #1
 800c01c:	2000      	movs	r0, #0
 800c01e:	460c      	mov	r4, r1
 800c020:	4605      	mov	r5, r0
 800c022:	eb12 0804 	adds.w	r8, r2, r4
 800c026:	eb43 0905 	adc.w	r9, r3, r5
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	469a      	mov	sl, r3
 800c032:	4693      	mov	fp, r2
 800c034:	4652      	mov	r2, sl
 800c036:	465b      	mov	r3, fp
 800c038:	4640      	mov	r0, r8
 800c03a:	4649      	mov	r1, r9
 800c03c:	f7f4 f958 	bl	80002f0 <__aeabi_uldivmod>
 800c040:	4602      	mov	r2, r0
 800c042:	460b      	mov	r3, r1
 800c044:	4613      	mov	r3, r2
 800c046:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c04a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c04e:	d308      	bcc.n	800c062 <UART_SetConfig+0x9a2>
 800c050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c056:	d204      	bcs.n	800c062 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c05e:	60da      	str	r2, [r3, #12]
 800c060:	e17f      	b.n	800c362 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c062:	2301      	movs	r3, #1
 800c064:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c068:	e17b      	b.n	800c362 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	69db      	ldr	r3, [r3, #28]
 800c06e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c072:	f040 80bd 	bne.w	800c1f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c076:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c07a:	2b20      	cmp	r3, #32
 800c07c:	dc48      	bgt.n	800c110 <UART_SetConfig+0xa50>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	db7b      	blt.n	800c17a <UART_SetConfig+0xaba>
 800c082:	2b20      	cmp	r3, #32
 800c084:	d879      	bhi.n	800c17a <UART_SetConfig+0xaba>
 800c086:	a201      	add	r2, pc, #4	@ (adr r2, 800c08c <UART_SetConfig+0x9cc>)
 800c088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08c:	0800c117 	.word	0x0800c117
 800c090:	0800c11f 	.word	0x0800c11f
 800c094:	0800c17b 	.word	0x0800c17b
 800c098:	0800c17b 	.word	0x0800c17b
 800c09c:	0800c127 	.word	0x0800c127
 800c0a0:	0800c17b 	.word	0x0800c17b
 800c0a4:	0800c17b 	.word	0x0800c17b
 800c0a8:	0800c17b 	.word	0x0800c17b
 800c0ac:	0800c137 	.word	0x0800c137
 800c0b0:	0800c17b 	.word	0x0800c17b
 800c0b4:	0800c17b 	.word	0x0800c17b
 800c0b8:	0800c17b 	.word	0x0800c17b
 800c0bc:	0800c17b 	.word	0x0800c17b
 800c0c0:	0800c17b 	.word	0x0800c17b
 800c0c4:	0800c17b 	.word	0x0800c17b
 800c0c8:	0800c17b 	.word	0x0800c17b
 800c0cc:	0800c147 	.word	0x0800c147
 800c0d0:	0800c17b 	.word	0x0800c17b
 800c0d4:	0800c17b 	.word	0x0800c17b
 800c0d8:	0800c17b 	.word	0x0800c17b
 800c0dc:	0800c17b 	.word	0x0800c17b
 800c0e0:	0800c17b 	.word	0x0800c17b
 800c0e4:	0800c17b 	.word	0x0800c17b
 800c0e8:	0800c17b 	.word	0x0800c17b
 800c0ec:	0800c17b 	.word	0x0800c17b
 800c0f0:	0800c17b 	.word	0x0800c17b
 800c0f4:	0800c17b 	.word	0x0800c17b
 800c0f8:	0800c17b 	.word	0x0800c17b
 800c0fc:	0800c17b 	.word	0x0800c17b
 800c100:	0800c17b 	.word	0x0800c17b
 800c104:	0800c17b 	.word	0x0800c17b
 800c108:	0800c17b 	.word	0x0800c17b
 800c10c:	0800c16d 	.word	0x0800c16d
 800c110:	2b40      	cmp	r3, #64	@ 0x40
 800c112:	d02e      	beq.n	800c172 <UART_SetConfig+0xab2>
 800c114:	e031      	b.n	800c17a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c116:	f7fb fe6d 	bl	8007df4 <HAL_RCC_GetPCLK1Freq>
 800c11a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c11c:	e033      	b.n	800c186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c11e:	f7fb fe7f 	bl	8007e20 <HAL_RCC_GetPCLK2Freq>
 800c122:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c124:	e02f      	b.n	800c186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c126:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7fd fd3a 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c134:	e027      	b.n	800c186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c136:	f107 0318 	add.w	r3, r7, #24
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fd fe86 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c144:	e01f      	b.n	800c186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c146:	4b69      	ldr	r3, [pc, #420]	@ (800c2ec <UART_SetConfig+0xc2c>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0320 	and.w	r3, r3, #32
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d009      	beq.n	800c166 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c152:	4b66      	ldr	r3, [pc, #408]	@ (800c2ec <UART_SetConfig+0xc2c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	08db      	lsrs	r3, r3, #3
 800c158:	f003 0303 	and.w	r3, r3, #3
 800c15c:	4a64      	ldr	r2, [pc, #400]	@ (800c2f0 <UART_SetConfig+0xc30>)
 800c15e:	fa22 f303 	lsr.w	r3, r2, r3
 800c162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c164:	e00f      	b.n	800c186 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c166:	4b62      	ldr	r3, [pc, #392]	@ (800c2f0 <UART_SetConfig+0xc30>)
 800c168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c16a:	e00c      	b.n	800c186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c16c:	4b61      	ldr	r3, [pc, #388]	@ (800c2f4 <UART_SetConfig+0xc34>)
 800c16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c170:	e009      	b.n	800c186 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c178:	e005      	b.n	800c186 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c17a:	2300      	movs	r3, #0
 800c17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 80ea 	beq.w	800c362 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c192:	4a55      	ldr	r2, [pc, #340]	@ (800c2e8 <UART_SetConfig+0xc28>)
 800c194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c198:	461a      	mov	r2, r3
 800c19a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c1a0:	005a      	lsls	r2, r3, #1
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	085b      	lsrs	r3, r3, #1
 800c1a8:	441a      	add	r2, r3
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b6:	2b0f      	cmp	r3, #15
 800c1b8:	d916      	bls.n	800c1e8 <UART_SetConfig+0xb28>
 800c1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1c0:	d212      	bcs.n	800c1e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	f023 030f 	bic.w	r3, r3, #15
 800c1ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1ce:	085b      	lsrs	r3, r3, #1
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	f003 0307 	and.w	r3, r3, #7
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c1e4:	60da      	str	r2, [r3, #12]
 800c1e6:	e0bc      	b.n	800c362 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c1ee:	e0b8      	b.n	800c362 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c1f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1f4:	2b20      	cmp	r3, #32
 800c1f6:	dc4b      	bgt.n	800c290 <UART_SetConfig+0xbd0>
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f2c0 8087 	blt.w	800c30c <UART_SetConfig+0xc4c>
 800c1fe:	2b20      	cmp	r3, #32
 800c200:	f200 8084 	bhi.w	800c30c <UART_SetConfig+0xc4c>
 800c204:	a201      	add	r2, pc, #4	@ (adr r2, 800c20c <UART_SetConfig+0xb4c>)
 800c206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20a:	bf00      	nop
 800c20c:	0800c297 	.word	0x0800c297
 800c210:	0800c29f 	.word	0x0800c29f
 800c214:	0800c30d 	.word	0x0800c30d
 800c218:	0800c30d 	.word	0x0800c30d
 800c21c:	0800c2a7 	.word	0x0800c2a7
 800c220:	0800c30d 	.word	0x0800c30d
 800c224:	0800c30d 	.word	0x0800c30d
 800c228:	0800c30d 	.word	0x0800c30d
 800c22c:	0800c2b7 	.word	0x0800c2b7
 800c230:	0800c30d 	.word	0x0800c30d
 800c234:	0800c30d 	.word	0x0800c30d
 800c238:	0800c30d 	.word	0x0800c30d
 800c23c:	0800c30d 	.word	0x0800c30d
 800c240:	0800c30d 	.word	0x0800c30d
 800c244:	0800c30d 	.word	0x0800c30d
 800c248:	0800c30d 	.word	0x0800c30d
 800c24c:	0800c2c7 	.word	0x0800c2c7
 800c250:	0800c30d 	.word	0x0800c30d
 800c254:	0800c30d 	.word	0x0800c30d
 800c258:	0800c30d 	.word	0x0800c30d
 800c25c:	0800c30d 	.word	0x0800c30d
 800c260:	0800c30d 	.word	0x0800c30d
 800c264:	0800c30d 	.word	0x0800c30d
 800c268:	0800c30d 	.word	0x0800c30d
 800c26c:	0800c30d 	.word	0x0800c30d
 800c270:	0800c30d 	.word	0x0800c30d
 800c274:	0800c30d 	.word	0x0800c30d
 800c278:	0800c30d 	.word	0x0800c30d
 800c27c:	0800c30d 	.word	0x0800c30d
 800c280:	0800c30d 	.word	0x0800c30d
 800c284:	0800c30d 	.word	0x0800c30d
 800c288:	0800c30d 	.word	0x0800c30d
 800c28c:	0800c2ff 	.word	0x0800c2ff
 800c290:	2b40      	cmp	r3, #64	@ 0x40
 800c292:	d037      	beq.n	800c304 <UART_SetConfig+0xc44>
 800c294:	e03a      	b.n	800c30c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c296:	f7fb fdad 	bl	8007df4 <HAL_RCC_GetPCLK1Freq>
 800c29a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c29c:	e03c      	b.n	800c318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c29e:	f7fb fdbf 	bl	8007e20 <HAL_RCC_GetPCLK2Freq>
 800c2a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c2a4:	e038      	b.n	800c318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fd fc7a 	bl	8009ba4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2b4:	e030      	b.n	800c318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2b6:	f107 0318 	add.w	r3, r7, #24
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fd fdc6 	bl	8009e4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c4:	e028      	b.n	800c318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2c6:	4b09      	ldr	r3, [pc, #36]	@ (800c2ec <UART_SetConfig+0xc2c>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0320 	and.w	r3, r3, #32
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d012      	beq.n	800c2f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2d2:	4b06      	ldr	r3, [pc, #24]	@ (800c2ec <UART_SetConfig+0xc2c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	08db      	lsrs	r3, r3, #3
 800c2d8:	f003 0303 	and.w	r3, r3, #3
 800c2dc:	4a04      	ldr	r2, [pc, #16]	@ (800c2f0 <UART_SetConfig+0xc30>)
 800c2de:	fa22 f303 	lsr.w	r3, r2, r3
 800c2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2e4:	e018      	b.n	800c318 <UART_SetConfig+0xc58>
 800c2e6:	bf00      	nop
 800c2e8:	0800e5d0 	.word	0x0800e5d0
 800c2ec:	58024400 	.word	0x58024400
 800c2f0:	03d09000 	.word	0x03d09000
 800c2f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c2f8:	4b24      	ldr	r3, [pc, #144]	@ (800c38c <UART_SetConfig+0xccc>)
 800c2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2fc:	e00c      	b.n	800c318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2fe:	4b24      	ldr	r3, [pc, #144]	@ (800c390 <UART_SetConfig+0xcd0>)
 800c300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c302:	e009      	b.n	800c318 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c304:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c30a:	e005      	b.n	800c318 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c30c:	2300      	movs	r3, #0
 800c30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c316:	bf00      	nop
    }

    if (pclk != 0U)
 800c318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d021      	beq.n	800c362 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c322:	4a1c      	ldr	r2, [pc, #112]	@ (800c394 <UART_SetConfig+0xcd4>)
 800c324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c328:	461a      	mov	r2, r3
 800c32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c32c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	085b      	lsrs	r3, r3, #1
 800c336:	441a      	add	r2, r3
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c340:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c344:	2b0f      	cmp	r3, #15
 800c346:	d909      	bls.n	800c35c <UART_SetConfig+0xc9c>
 800c348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c34a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c34e:	d205      	bcs.n	800c35c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c352:	b29a      	uxth	r2, r3
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	60da      	str	r2, [r3, #12]
 800c35a:	e002      	b.n	800c362 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	2201      	movs	r2, #1
 800c366:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	2200      	movs	r2, #0
 800c376:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	2200      	movs	r2, #0
 800c37c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c37e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c382:	4618      	mov	r0, r3
 800c384:	3748      	adds	r7, #72	@ 0x48
 800c386:	46bd      	mov	sp, r7
 800c388:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c38c:	03d09000 	.word	0x03d09000
 800c390:	003d0900 	.word	0x003d0900
 800c394:	0800e5d0 	.word	0x0800e5d0

0800c398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3a4:	f003 0308 	and.w	r3, r3, #8
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d00a      	beq.n	800c3c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	430a      	orrs	r2, r1
 800c3c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d00a      	beq.n	800c3e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e8:	f003 0302 	and.w	r3, r3, #2
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d00a      	beq.n	800c406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	430a      	orrs	r2, r1
 800c404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c40a:	f003 0304 	and.w	r3, r3, #4
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00a      	beq.n	800c428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	430a      	orrs	r2, r1
 800c426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c42c:	f003 0310 	and.w	r3, r3, #16
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00a      	beq.n	800c44a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	689b      	ldr	r3, [r3, #8]
 800c43a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	430a      	orrs	r2, r1
 800c448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c44e:	f003 0320 	and.w	r3, r3, #32
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00a      	beq.n	800c46c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	430a      	orrs	r2, r1
 800c46a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c474:	2b00      	cmp	r3, #0
 800c476:	d01a      	beq.n	800c4ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	685b      	ldr	r3, [r3, #4]
 800c47e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	430a      	orrs	r2, r1
 800c48c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c492:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c496:	d10a      	bne.n	800c4ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	430a      	orrs	r2, r1
 800c4ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00a      	beq.n	800c4d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	430a      	orrs	r2, r1
 800c4ce:	605a      	str	r2, [r3, #4]
  }
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b098      	sub	sp, #96	@ 0x60
 800c4e0:	af02      	add	r7, sp, #8
 800c4e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4ec:	f7f5 fcfa 	bl	8001ee4 <HAL_GetTick>
 800c4f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 0308 	and.w	r3, r3, #8
 800c4fc:	2b08      	cmp	r3, #8
 800c4fe:	d12f      	bne.n	800c560 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c500:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c504:	9300      	str	r3, [sp, #0]
 800c506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c508:	2200      	movs	r2, #0
 800c50a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f000 f88e 	bl	800c630 <UART_WaitOnFlagUntilTimeout>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d022      	beq.n	800c560 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c522:	e853 3f00 	ldrex	r3, [r3]
 800c526:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c52a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c52e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	461a      	mov	r2, r3
 800c536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c538:	647b      	str	r3, [r7, #68]	@ 0x44
 800c53a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c53e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e6      	bne.n	800c51a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2220      	movs	r2, #32
 800c550:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c55c:	2303      	movs	r3, #3
 800c55e:	e063      	b.n	800c628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 0304 	and.w	r3, r3, #4
 800c56a:	2b04      	cmp	r3, #4
 800c56c:	d149      	bne.n	800c602 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c56e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c576:	2200      	movs	r2, #0
 800c578:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f857 	bl	800c630 <UART_WaitOnFlagUntilTimeout>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d03c      	beq.n	800c602 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	e853 3f00 	ldrex	r3, [r3]
 800c594:	623b      	str	r3, [r7, #32]
   return(result);
 800c596:	6a3b      	ldr	r3, [r7, #32]
 800c598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c59c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c5ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5ae:	e841 2300 	strex	r3, r2, [r1]
 800c5b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d1e6      	bne.n	800c588 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	3308      	adds	r3, #8
 800c5c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	e853 3f00 	ldrex	r3, [r3]
 800c5c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f023 0301 	bic.w	r3, r3, #1
 800c5d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3308      	adds	r3, #8
 800c5d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c5da:	61fa      	str	r2, [r7, #28]
 800c5dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5de:	69b9      	ldr	r1, [r7, #24]
 800c5e0:	69fa      	ldr	r2, [r7, #28]
 800c5e2:	e841 2300 	strex	r3, r2, [r1]
 800c5e6:	617b      	str	r3, [r7, #20]
   return(result);
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1e5      	bne.n	800c5ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2220      	movs	r2, #32
 800c5f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5fe:	2303      	movs	r3, #3
 800c600:	e012      	b.n	800c628 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2220      	movs	r2, #32
 800c606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2220      	movs	r2, #32
 800c60e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2200      	movs	r2, #0
 800c616:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2200      	movs	r2, #0
 800c622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3758      	adds	r7, #88	@ 0x58
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b084      	sub	sp, #16
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	603b      	str	r3, [r7, #0]
 800c63c:	4613      	mov	r3, r2
 800c63e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c640:	e04f      	b.n	800c6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c642:	69bb      	ldr	r3, [r7, #24]
 800c644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c648:	d04b      	beq.n	800c6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c64a:	f7f5 fc4b 	bl	8001ee4 <HAL_GetTick>
 800c64e:	4602      	mov	r2, r0
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	69ba      	ldr	r2, [r7, #24]
 800c656:	429a      	cmp	r2, r3
 800c658:	d302      	bcc.n	800c660 <UART_WaitOnFlagUntilTimeout+0x30>
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d101      	bne.n	800c664 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c660:	2303      	movs	r3, #3
 800c662:	e04e      	b.n	800c702 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f003 0304 	and.w	r3, r3, #4
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d037      	beq.n	800c6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2b80      	cmp	r3, #128	@ 0x80
 800c676:	d034      	beq.n	800c6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2b40      	cmp	r3, #64	@ 0x40
 800c67c:	d031      	beq.n	800c6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	69db      	ldr	r3, [r3, #28]
 800c684:	f003 0308 	and.w	r3, r3, #8
 800c688:	2b08      	cmp	r3, #8
 800c68a:	d110      	bne.n	800c6ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2208      	movs	r2, #8
 800c692:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c694:	68f8      	ldr	r0, [r7, #12]
 800c696:	f000 f839 	bl	800c70c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	2208      	movs	r2, #8
 800c69e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e029      	b.n	800c702 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	69db      	ldr	r3, [r3, #28]
 800c6b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c6b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6bc:	d111      	bne.n	800c6e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c6c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f000 f81f 	bl	800c70c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2220      	movs	r2, #32
 800c6d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c6de:	2303      	movs	r3, #3
 800c6e0:	e00f      	b.n	800c702 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	69da      	ldr	r2, [r3, #28]
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	bf0c      	ite	eq
 800c6f2:	2301      	moveq	r3, #1
 800c6f4:	2300      	movne	r3, #0
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	79fb      	ldrb	r3, [r7, #7]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d0a0      	beq.n	800c642 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3710      	adds	r7, #16
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
	...

0800c70c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b095      	sub	sp, #84	@ 0x54
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c71c:	e853 3f00 	ldrex	r3, [r3]
 800c720:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c724:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	461a      	mov	r2, r3
 800c730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c732:	643b      	str	r3, [r7, #64]	@ 0x40
 800c734:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c736:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c738:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e6      	bne.n	800c714 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3308      	adds	r3, #8
 800c74c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	6a3b      	ldr	r3, [r7, #32]
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	61fb      	str	r3, [r7, #28]
   return(result);
 800c756:	69fa      	ldr	r2, [r7, #28]
 800c758:	4b1e      	ldr	r3, [pc, #120]	@ (800c7d4 <UART_EndRxTransfer+0xc8>)
 800c75a:	4013      	ands	r3, r2
 800c75c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	3308      	adds	r3, #8
 800c764:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c768:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c76c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c76e:	e841 2300 	strex	r3, r2, [r1]
 800c772:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e5      	bne.n	800c746 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d118      	bne.n	800c7b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	e853 3f00 	ldrex	r3, [r3]
 800c78e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	f023 0310 	bic.w	r3, r3, #16
 800c796:	647b      	str	r3, [r7, #68]	@ 0x44
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	461a      	mov	r2, r3
 800c79e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c7a0:	61bb      	str	r3, [r7, #24]
 800c7a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7a4:	6979      	ldr	r1, [r7, #20]
 800c7a6:	69ba      	ldr	r2, [r7, #24]
 800c7a8:	e841 2300 	strex	r3, r2, [r1]
 800c7ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1e6      	bne.n	800c782 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2220      	movs	r2, #32
 800c7b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c7c8:	bf00      	nop
 800c7ca:	3754      	adds	r7, #84	@ 0x54
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr
 800c7d4:	effffffe 	.word	0xeffffffe

0800c7d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f7fe ff4c 	bl	800b694 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	e853 3f00 	ldrex	r3, [r3]
 800c818:	60bb      	str	r3, [r7, #8]
   return(result);
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c820:	61fb      	str	r3, [r7, #28]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	61bb      	str	r3, [r7, #24]
 800c82c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c82e:	6979      	ldr	r1, [r7, #20]
 800c830:	69ba      	ldr	r2, [r7, #24]
 800c832:	e841 2300 	strex	r3, r2, [r1]
 800c836:	613b      	str	r3, [r7, #16]
   return(result);
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1e6      	bne.n	800c80c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2220      	movs	r2, #32
 800c842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7fe ff17 	bl	800b680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c852:	bf00      	nop
 800c854:	3720      	adds	r7, #32
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c85a:	b480      	push	{r7}
 800c85c:	b083      	sub	sp, #12
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c862:	bf00      	nop
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c86e:	b480      	push	{r7}
 800c870:	b083      	sub	sp, #12
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c876:	bf00      	nop
 800c878:	370c      	adds	r7, #12
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c88a:	bf00      	nop
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c896:	b480      	push	{r7}
 800c898:	b085      	sub	sp, #20
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d101      	bne.n	800c8ac <HAL_UARTEx_DisableFifoMode+0x16>
 800c8a8:	2302      	movs	r3, #2
 800c8aa:	e027      	b.n	800c8fc <HAL_UARTEx_DisableFifoMode+0x66>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2224      	movs	r2, #36	@ 0x24
 800c8b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 0201 	bic.w	r2, r2, #1
 800c8d2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c8da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2220      	movs	r2, #32
 800c8ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3714      	adds	r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d101      	bne.n	800c920 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c91c:	2302      	movs	r3, #2
 800c91e:	e02d      	b.n	800c97c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2224      	movs	r2, #36	@ 0x24
 800c92c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f022 0201 	bic.w	r2, r2, #1
 800c946:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	683a      	ldr	r2, [r7, #0]
 800c958:	430a      	orrs	r2, r1
 800c95a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f84f 	bl	800ca00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2220      	movs	r2, #32
 800c96e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2200      	movs	r2, #0
 800c976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c97a:	2300      	movs	r3, #0
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c994:	2b01      	cmp	r3, #1
 800c996:	d101      	bne.n	800c99c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c998:	2302      	movs	r3, #2
 800c99a:	e02d      	b.n	800c9f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2224      	movs	r2, #36	@ 0x24
 800c9a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681a      	ldr	r2, [r3, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f022 0201 	bic.w	r2, r2, #1
 800c9c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	683a      	ldr	r2, [r7, #0]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 f811 	bl	800ca00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2220      	movs	r2, #32
 800c9ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c9f6:	2300      	movs	r3, #0
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d108      	bne.n	800ca22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2201      	movs	r2, #1
 800ca14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ca20:	e031      	b.n	800ca86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ca22:	2310      	movs	r3, #16
 800ca24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ca26:	2310      	movs	r3, #16
 800ca28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	0e5b      	lsrs	r3, r3, #25
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	f003 0307 	and.w	r3, r3, #7
 800ca38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	0f5b      	lsrs	r3, r3, #29
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	f003 0307 	and.w	r3, r3, #7
 800ca48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca4a:	7bbb      	ldrb	r3, [r7, #14]
 800ca4c:	7b3a      	ldrb	r2, [r7, #12]
 800ca4e:	4911      	ldr	r1, [pc, #68]	@ (800ca94 <UARTEx_SetNbDataToProcess+0x94>)
 800ca50:	5c8a      	ldrb	r2, [r1, r2]
 800ca52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca56:	7b3a      	ldrb	r2, [r7, #12]
 800ca58:	490f      	ldr	r1, [pc, #60]	@ (800ca98 <UARTEx_SetNbDataToProcess+0x98>)
 800ca5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca60:	b29a      	uxth	r2, r3
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca68:	7bfb      	ldrb	r3, [r7, #15]
 800ca6a:	7b7a      	ldrb	r2, [r7, #13]
 800ca6c:	4909      	ldr	r1, [pc, #36]	@ (800ca94 <UARTEx_SetNbDataToProcess+0x94>)
 800ca6e:	5c8a      	ldrb	r2, [r1, r2]
 800ca70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca74:	7b7a      	ldrb	r2, [r7, #13]
 800ca76:	4908      	ldr	r1, [pc, #32]	@ (800ca98 <UARTEx_SetNbDataToProcess+0x98>)
 800ca78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ca86:	bf00      	nop
 800ca88:	3714      	adds	r7, #20
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	0800e5e8 	.word	0x0800e5e8
 800ca98:	0800e5f0 	.word	0x0800e5f0

0800ca9c <arm_correlate_f32>:
 800ca9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa0:	4299      	cmp	r1, r3
 800caa2:	b08d      	sub	sp, #52	@ 0x34
 800caa4:	f0c0 824c 	bcc.w	800cf40 <arm_correlate_f32+0x4a4>
 800caa8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800caaa:	eba1 0c03 	sub.w	ip, r1, r3
 800caae:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800cab2:	f04f 0e04 	mov.w	lr, #4
 800cab6:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 800caba:	3101      	adds	r1, #1
 800cabc:	1ac9      	subs	r1, r1, r3
 800cabe:	3c01      	subs	r4, #1
 800cac0:	1e5e      	subs	r6, r3, #1
 800cac2:	9102      	str	r1, [sp, #8]
 800cac4:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800cac8:	f000 8294 	beq.w	800cff4 <arm_correlate_f32+0x558>
 800cacc:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800cc1c <arm_correlate_f32+0x180>
 800cad0:	f1a1 0804 	sub.w	r8, r1, #4
 800cad4:	46e1      	mov	r9, ip
 800cad6:	4605      	mov	r5, r0
 800cad8:	2401      	movs	r4, #1
 800cada:	f014 0703 	ands.w	r7, r4, #3
 800cade:	d01b      	beq.n	800cb18 <arm_correlate_f32+0x7c>
 800cae0:	ed91 7a00 	vldr	s14, [r1]
 800cae4:	edd5 6a00 	vldr	s13, [r5]
 800cae8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800caec:	3f01      	subs	r7, #1
 800caee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800caf2:	d011      	beq.n	800cb18 <arm_correlate_f32+0x7c>
 800caf4:	ed91 7a01 	vldr	s14, [r1, #4]
 800caf8:	edd5 6a01 	vldr	s13, [r5, #4]
 800cafc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cb00:	2f01      	cmp	r7, #1
 800cb02:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb06:	d007      	beq.n	800cb18 <arm_correlate_f32+0x7c>
 800cb08:	ed95 7a02 	vldr	s14, [r5, #8]
 800cb0c:	edd1 6a02 	vldr	s13, [r1, #8]
 800cb10:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cb14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cb18:	1c67      	adds	r7, r4, #1
 800cb1a:	42bb      	cmp	r3, r7
 800cb1c:	edc9 7a00 	vstr	s15, [r9]
 800cb20:	4641      	mov	r1, r8
 800cb22:	44f1      	add	r9, lr
 800cb24:	d03a      	beq.n	800cb9c <arm_correlate_f32+0x100>
 800cb26:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 800cb2a:	f000 8267 	beq.w	800cffc <arm_correlate_f32+0x560>
 800cb2e:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800cb32:	f100 0110 	add.w	r1, r0, #16
 800cb36:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800cc1c <arm_correlate_f32+0x180>
 800cb3a:	eb01 050a 	add.w	r5, r1, sl
 800cb3e:	f108 0410 	add.w	r4, r8, #16
 800cb42:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cb46:	ed54 3a04 	vldr	s7, [r4, #-16]
 800cb4a:	ed11 6a03 	vldr	s12, [r1, #-12]
 800cb4e:	ed14 4a03 	vldr	s8, [r4, #-12]
 800cb52:	ed51 6a02 	vldr	s13, [r1, #-8]
 800cb56:	ed54 4a02 	vldr	s9, [r4, #-8]
 800cb5a:	ed51 5a01 	vldr	s11, [r1, #-4]
 800cb5e:	ed14 5a01 	vldr	s10, [r4, #-4]
 800cb62:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cb66:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cb6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb6e:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800cb72:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cb76:	ee65 6a85 	vmul.f32	s13, s11, s10
 800cb7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb7e:	3110      	adds	r1, #16
 800cb80:	428d      	cmp	r5, r1
 800cb82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb86:	f104 0410 	add.w	r4, r4, #16
 800cb8a:	d1da      	bne.n	800cb42 <arm_correlate_f32+0xa6>
 800cb8c:	eb00 050a 	add.w	r5, r0, sl
 800cb90:	eb08 010a 	add.w	r1, r8, sl
 800cb94:	f1a8 0804 	sub.w	r8, r8, #4
 800cb98:	463c      	mov	r4, r7
 800cb9a:	e79e      	b.n	800cada <arm_correlate_f32+0x3e>
 800cb9c:	2b03      	cmp	r3, #3
 800cb9e:	fb0e cc04 	mla	ip, lr, r4, ip
 800cba2:	f240 81dd 	bls.w	800cf60 <arm_correlate_f32+0x4c4>
 800cba6:	9b02      	ldr	r3, [sp, #8]
 800cba8:	0899      	lsrs	r1, r3, #2
 800cbaa:	9103      	str	r1, [sp, #12]
 800cbac:	f000 8220 	beq.w	800cff0 <arm_correlate_f32+0x554>
 800cbb0:	08bb      	lsrs	r3, r7, #2
 800cbb2:	f007 0403 	and.w	r4, r7, #3
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	011b      	lsls	r3, r3, #4
 800cbba:	f103 0b0c 	add.w	fp, r3, #12
 800cbbe:	18d5      	adds	r5, r2, r3
 800cbc0:	1e63      	subs	r3, r4, #1
 800cbc2:	0109      	lsls	r1, r1, #4
 800cbc4:	9306      	str	r3, [sp, #24]
 800cbc6:	f100 080c 	add.w	r8, r0, #12
 800cbca:	9401      	str	r4, [sp, #4]
 800cbcc:	9104      	str	r1, [sp, #16]
 800cbce:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800cbd2:	4441      	add	r1, r8
 800cbd4:	f102 0310 	add.w	r3, r2, #16
 800cbd8:	e9cd 6009 	strd	r6, r0, [sp, #36]	@ 0x24
 800cbdc:	9e06      	ldr	r6, [sp, #24]
 800cbde:	9405      	str	r4, [sp, #20]
 800cbe0:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 800cbe4:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 800cbe8:	46e1      	mov	r9, ip
 800cbea:	4483      	add	fp, r0
 800cbec:	460f      	mov	r7, r1
 800cbee:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cbf0:	469c      	mov	ip, r3
 800cbf2:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800cc1c <arm_correlate_f32+0x180>
 800cbf6:	ed58 1a03 	vldr	s3, [r8, #-12]
 800cbfa:	ed18 2a02 	vldr	s4, [r8, #-8]
 800cbfe:	ed58 2a01 	vldr	s5, [r8, #-4]
 800cc02:	ed98 0a00 	vldr	s0, [r8]
 800cc06:	9900      	ldr	r1, [sp, #0]
 800cc08:	eef0 5a46 	vmov.f32	s11, s12
 800cc0c:	eeb0 5a46 	vmov.f32	s10, s12
 800cc10:	eef0 4a46 	vmov.f32	s9, s12
 800cc14:	4663      	mov	r3, ip
 800cc16:	4642      	mov	r2, r8
 800cc18:	e005      	b.n	800cc26 <arm_correlate_f32+0x18a>
 800cc1a:	bf00      	nop
 800cc1c:	00000000 	.word	0x00000000
 800cc20:	ed90 0a04 	vldr	s0, [r0, #16]
 800cc24:	3210      	adds	r2, #16
 800cc26:	ed53 6a04 	vldr	s13, [r3, #-16]
 800cc2a:	ed13 7a03 	vldr	s14, [r3, #-12]
 800cc2e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cc32:	ed13 1a01 	vldr	s2, [r3, #-4]
 800cc36:	ee62 3a26 	vmul.f32	s7, s4, s13
 800cc3a:	ee22 4aa6 	vmul.f32	s8, s5, s13
 800cc3e:	ee61 0aa6 	vmul.f32	s1, s3, s13
 800cc42:	edd2 1a01 	vldr	s3, [r2, #4]
 800cc46:	ee66 6a80 	vmul.f32	s13, s13, s0
 800cc4a:	ee22 3a07 	vmul.f32	s6, s4, s14
 800cc4e:	ee33 5a85 	vadd.f32	s10, s7, s10
 800cc52:	ee74 5a25 	vadd.f32	s11, s8, s11
 800cc56:	ee62 3a87 	vmul.f32	s7, s5, s14
 800cc5a:	ee20 4a07 	vmul.f32	s8, s0, s14
 800cc5e:	ee70 4aa4 	vadd.f32	s9, s1, s9
 800cc62:	ee36 6a86 	vadd.f32	s12, s13, s12
 800cc66:	ed92 2a02 	vldr	s4, [r2, #8]
 800cc6a:	ee27 7a21 	vmul.f32	s14, s14, s3
 800cc6e:	ee73 3a85 	vadd.f32	s7, s7, s10
 800cc72:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cc76:	ee20 5a27 	vmul.f32	s10, s0, s15
 800cc7a:	ee33 3a24 	vadd.f32	s6, s6, s9
 800cc7e:	ee34 4a25 	vadd.f32	s8, s8, s11
 800cc82:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800cc86:	ee61 5aa7 	vmul.f32	s11, s3, s15
 800cc8a:	edd2 2a03 	vldr	s5, [r2, #12]
 800cc8e:	ee67 7a82 	vmul.f32	s15, s15, s4
 800cc92:	ee35 5a23 	vadd.f32	s10, s10, s7
 800cc96:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc9a:	ee74 4a83 	vadd.f32	s9, s9, s6
 800cc9e:	ee20 0a01 	vmul.f32	s0, s0, s2
 800cca2:	ee61 3a81 	vmul.f32	s7, s3, s2
 800cca6:	ee75 5a84 	vadd.f32	s11, s11, s8
 800ccaa:	ee22 7a01 	vmul.f32	s14, s4, s2
 800ccae:	ee21 6a22 	vmul.f32	s12, s2, s5
 800ccb2:	3901      	subs	r1, #1
 800ccb4:	f103 0310 	add.w	r3, r3, #16
 800ccb8:	ee70 4a24 	vadd.f32	s9, s0, s9
 800ccbc:	ee33 5a85 	vadd.f32	s10, s7, s10
 800ccc0:	ee77 5a25 	vadd.f32	s11, s14, s11
 800ccc4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ccc8:	4610      	mov	r0, r2
 800ccca:	d1a9      	bne.n	800cc20 <arm_correlate_f32+0x184>
 800cccc:	9b01      	ldr	r3, [sp, #4]
 800ccce:	b3f3      	cbz	r3, 800cd4e <arm_correlate_f32+0x2b2>
 800ccd0:	edd5 7a00 	vldr	s15, [r5]
 800ccd4:	ed9b 4a00 	vldr	s8, [fp]
 800ccd8:	ee61 6aa7 	vmul.f32	s13, s3, s15
 800ccdc:	ee62 3a27 	vmul.f32	s7, s4, s15
 800cce0:	ee22 7aa7 	vmul.f32	s14, s5, s15
 800cce4:	ee64 7a27 	vmul.f32	s15, s8, s15
 800cce8:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800ccec:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ccf0:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ccf4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ccf8:	b34e      	cbz	r6, 800cd4e <arm_correlate_f32+0x2b2>
 800ccfa:	edd5 7a01 	vldr	s15, [r5, #4]
 800ccfe:	eddb 6a01 	vldr	s13, [fp, #4]
 800cd02:	ee22 7a27 	vmul.f32	s14, s4, s15
 800cd06:	ee22 3aa7 	vmul.f32	s6, s5, s15
 800cd0a:	ee67 3a84 	vmul.f32	s7, s15, s8
 800cd0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd12:	2e01      	cmp	r6, #1
 800cd14:	ee74 4a87 	vadd.f32	s9, s9, s14
 800cd18:	ee35 5a03 	vadd.f32	s10, s10, s6
 800cd1c:	ee75 5aa3 	vadd.f32	s11, s11, s7
 800cd20:	ee36 6a27 	vadd.f32	s12, s12, s15
 800cd24:	d013      	beq.n	800cd4e <arm_correlate_f32+0x2b2>
 800cd26:	ed95 7a02 	vldr	s14, [r5, #8]
 800cd2a:	eddb 3a02 	vldr	s7, [fp, #8]
 800cd2e:	ee62 7a87 	vmul.f32	s15, s5, s14
 800cd32:	ee27 4a04 	vmul.f32	s8, s14, s8
 800cd36:	ee67 6a26 	vmul.f32	s13, s14, s13
 800cd3a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cd3e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800cd42:	ee35 5a04 	vadd.f32	s10, s10, s8
 800cd46:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800cd4a:	ee36 6a07 	vadd.f32	s12, s12, s14
 800cd4e:	f108 0810 	add.w	r8, r8, #16
 800cd52:	eb09 020e 	add.w	r2, r9, lr
 800cd56:	eb0a 030e 	add.w	r3, sl, lr
 800cd5a:	4547      	cmp	r7, r8
 800cd5c:	edc9 4a00 	vstr	s9, [r9]
 800cd60:	f10b 0b10 	add.w	fp, fp, #16
 800cd64:	ed82 5a00 	vstr	s10, [r2]
 800cd68:	44a1      	add	r9, r4
 800cd6a:	edca 5a00 	vstr	s11, [sl]
 800cd6e:	ed83 6a00 	vstr	s12, [r3]
 800cd72:	44a2      	add	sl, r4
 800cd74:	f47f af3d 	bne.w	800cbf2 <arm_correlate_f32+0x156>
 800cd78:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 800cd7c:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	@ 0x24
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	9c05      	ldr	r4, [sp, #20]
 800cd84:	9904      	ldr	r1, [sp, #16]
 800cd86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cd88:	fb04 cc03 	mla	ip, r4, r3, ip
 800cd8c:	4401      	add	r1, r0
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	460d      	mov	r5, r1
 800cd92:	9303      	str	r3, [sp, #12]
 800cd94:	9b02      	ldr	r3, [sp, #8]
 800cd96:	f013 0303 	ands.w	r3, r3, #3
 800cd9a:	9301      	str	r3, [sp, #4]
 800cd9c:	d071      	beq.n	800ce82 <arm_correlate_f32+0x3e6>
 800cd9e:	9903      	ldr	r1, [sp, #12]
 800cda0:	9205      	str	r2, [sp, #20]
 800cda2:	f007 0403 	and.w	r4, r7, #3
 800cda6:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 800cdaa:	1c4f      	adds	r7, r1, #1
 800cdac:	1859      	adds	r1, r3, r1
 800cdae:	1d03      	adds	r3, r0, #4
 800cdb0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cdb4:	9400      	str	r4, [sp, #0]
 800cdb6:	f102 0110 	add.w	r1, r2, #16
 800cdba:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 800cdbe:	3c01      	subs	r4, #1
 800cdc0:	e9cd 6003 	strd	r6, r0, [sp, #12]
 800cdc4:	eb02 090a 	add.w	r9, r2, sl
 800cdc8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800cdcc:	46e0      	mov	r8, ip
 800cdce:	4618      	mov	r0, r3
 800cdd0:	460e      	mov	r6, r1
 800cdd2:	4622      	mov	r2, r4
 800cdd4:	ed5f 7a6f 	vldr	s15, [pc, #-444]	@ 800cc1c <arm_correlate_f32+0x180>
 800cdd8:	f105 0110 	add.w	r1, r5, #16
 800cddc:	4633      	mov	r3, r6
 800cdde:	465c      	mov	r4, fp
 800cde0:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cde4:	ed53 3a04 	vldr	s7, [r3, #-16]
 800cde8:	ed11 6a03 	vldr	s12, [r1, #-12]
 800cdec:	ed13 4a03 	vldr	s8, [r3, #-12]
 800cdf0:	ed51 6a02 	vldr	s13, [r1, #-8]
 800cdf4:	ed53 4a02 	vldr	s9, [r3, #-8]
 800cdf8:	ed51 5a01 	vldr	s11, [r1, #-4]
 800cdfc:	ed13 5a01 	vldr	s10, [r3, #-4]
 800ce00:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ce04:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ce08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce0c:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800ce10:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ce14:	ee65 6a85 	vmul.f32	s13, s11, s10
 800ce18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce1c:	3c01      	subs	r4, #1
 800ce1e:	f101 0110 	add.w	r1, r1, #16
 800ce22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce26:	f103 0310 	add.w	r3, r3, #16
 800ce2a:	d1d9      	bne.n	800cde0 <arm_correlate_f32+0x344>
 800ce2c:	9b00      	ldr	r3, [sp, #0]
 800ce2e:	4455      	add	r5, sl
 800ce30:	b1d3      	cbz	r3, 800ce68 <arm_correlate_f32+0x3cc>
 800ce32:	ed99 7a00 	vldr	s14, [r9]
 800ce36:	edd5 6a00 	vldr	s13, [r5]
 800ce3a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce42:	b18a      	cbz	r2, 800ce68 <arm_correlate_f32+0x3cc>
 800ce44:	ed99 7a01 	vldr	s14, [r9, #4]
 800ce48:	edd5 6a01 	vldr	s13, [r5, #4]
 800ce4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce50:	2a01      	cmp	r2, #1
 800ce52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce56:	d007      	beq.n	800ce68 <arm_correlate_f32+0x3cc>
 800ce58:	ed95 7a02 	vldr	s14, [r5, #8]
 800ce5c:	edd9 6a02 	vldr	s13, [r9, #8]
 800ce60:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce68:	463d      	mov	r5, r7
 800ce6a:	3704      	adds	r7, #4
 800ce6c:	42b8      	cmp	r0, r7
 800ce6e:	edc8 7a00 	vstr	s15, [r8]
 800ce72:	44f0      	add	r8, lr
 800ce74:	d1ae      	bne.n	800cdd4 <arm_correlate_f32+0x338>
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	9a05      	ldr	r2, [sp, #20]
 800ce7a:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 800ce7e:	fb0e cc03 	mla	ip, lr, r3, ip
 800ce82:	9b02      	ldr	r3, [sp, #8]
 800ce84:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ce88:	08b5      	lsrs	r5, r6, #2
 800ce8a:	ed5f 5a9c 	vldr	s11, [pc, #-624]	@ 800cc1c <arm_correlate_f32+0x180>
 800ce8e:	f000 80ac 	beq.w	800cfea <arm_correlate_f32+0x54e>
 800ce92:	f100 0110 	add.w	r1, r0, #16
 800ce96:	f102 0310 	add.w	r3, r2, #16
 800ce9a:	462c      	mov	r4, r5
 800ce9c:	ed51 6a04 	vldr	s13, [r1, #-16]
 800cea0:	ed53 3a04 	vldr	s7, [r3, #-16]
 800cea4:	ed11 7a03 	vldr	s14, [r1, #-12]
 800cea8:	ed13 4a03 	vldr	s8, [r3, #-12]
 800ceac:	ed51 7a02 	vldr	s15, [r1, #-8]
 800ceb0:	ed53 4a02 	vldr	s9, [r3, #-8]
 800ceb4:	ed11 6a01 	vldr	s12, [r1, #-4]
 800ceb8:	ed13 5a01 	vldr	s10, [r3, #-4]
 800cebc:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800cec0:	ee27 7a04 	vmul.f32	s14, s14, s8
 800cec4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800cec8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800cecc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ced0:	ee66 6a05 	vmul.f32	s13, s12, s10
 800ced4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ced8:	3c01      	subs	r4, #1
 800ceda:	f101 0110 	add.w	r1, r1, #16
 800cede:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800cee2:	f103 0310 	add.w	r3, r3, #16
 800cee6:	d1d9      	bne.n	800ce9c <arm_correlate_f32+0x400>
 800cee8:	012d      	lsls	r5, r5, #4
 800ceea:	1941      	adds	r1, r0, r5
 800ceec:	4415      	add	r5, r2
 800ceee:	f016 0303 	ands.w	r3, r6, #3
 800cef2:	d01b      	beq.n	800cf2c <arm_correlate_f32+0x490>
 800cef4:	edd5 7a00 	vldr	s15, [r5]
 800cef8:	ed91 7a00 	vldr	s14, [r1]
 800cefc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf00:	3b01      	subs	r3, #1
 800cf02:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800cf06:	d011      	beq.n	800cf2c <arm_correlate_f32+0x490>
 800cf08:	edd5 7a01 	vldr	s15, [r5, #4]
 800cf0c:	ed91 7a01 	vldr	s14, [r1, #4]
 800cf10:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800cf1a:	d007      	beq.n	800cf2c <arm_correlate_f32+0x490>
 800cf1c:	edd1 7a02 	vldr	s15, [r1, #8]
 800cf20:	ed95 7a02 	vldr	s14, [r5, #8]
 800cf24:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf28:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800cf2c:	3e01      	subs	r6, #1
 800cf2e:	edcc 5a00 	vstr	s11, [ip]
 800cf32:	f100 0004 	add.w	r0, r0, #4
 800cf36:	44f4      	add	ip, lr
 800cf38:	d1a6      	bne.n	800ce88 <arm_correlate_f32+0x3ec>
 800cf3a:	b00d      	add	sp, #52	@ 0x34
 800cf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf40:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 800cf44:	4606      	mov	r6, r0
 800cf46:	3c02      	subs	r4, #2
 800cf48:	4610      	mov	r0, r2
 800cf4a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cf4c:	440c      	add	r4, r1
 800cf4e:	460d      	mov	r5, r1
 800cf50:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 800cf54:	4619      	mov	r1, r3
 800cf56:	4632      	mov	r2, r6
 800cf58:	f06f 0e03 	mvn.w	lr, #3
 800cf5c:	462b      	mov	r3, r5
 800cf5e:	e5aa      	b.n	800cab6 <arm_correlate_f32+0x1a>
 800cf60:	9902      	ldr	r1, [sp, #8]
 800cf62:	2900      	cmp	r1, #0
 800cf64:	d090      	beq.n	800ce88 <arm_correlate_f32+0x3ec>
 800cf66:	9902      	ldr	r1, [sp, #8]
 800cf68:	ed1f 6ad4 	vldr	s12, [pc, #-848]	@ 800cc1c <arm_correlate_f32+0x180>
 800cf6c:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800cf70:	eb00 0708 	add.w	r7, r0, r8
 800cf74:	4601      	mov	r1, r0
 800cf76:	4665      	mov	r5, ip
 800cf78:	e020      	b.n	800cfbc <arm_correlate_f32+0x520>
 800cf7a:	edd2 7a00 	vldr	s15, [r2]
 800cf7e:	ecb4 7a01 	vldmia	r4!, {s14}
 800cf82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf86:	ee77 7a86 	vadd.f32	s15, s15, s12
 800cf8a:	b18e      	cbz	r6, 800cfb0 <arm_correlate_f32+0x514>
 800cf8c:	ed92 7a01 	vldr	s14, [r2, #4]
 800cf90:	edd1 6a01 	vldr	s13, [r1, #4]
 800cf94:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cf98:	2b02      	cmp	r3, #2
 800cf9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf9e:	d007      	beq.n	800cfb0 <arm_correlate_f32+0x514>
 800cfa0:	ed91 7a02 	vldr	s14, [r1, #8]
 800cfa4:	edd2 6a02 	vldr	s13, [r2, #8]
 800cfa8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cfac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfb0:	42bc      	cmp	r4, r7
 800cfb2:	edc5 7a00 	vstr	s15, [r5]
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	4475      	add	r5, lr
 800cfba:	d00b      	beq.n	800cfd4 <arm_correlate_f32+0x538>
 800cfbc:	460c      	mov	r4, r1
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1db      	bne.n	800cf7a <arm_correlate_f32+0x4de>
 800cfc2:	1d0c      	adds	r4, r1, #4
 800cfc4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800d004 <arm_correlate_f32+0x568>
 800cfc8:	42bc      	cmp	r4, r7
 800cfca:	edc5 7a00 	vstr	s15, [r5]
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4475      	add	r5, lr
 800cfd2:	d1f3      	bne.n	800cfbc <arm_correlate_f32+0x520>
 800cfd4:	9b02      	ldr	r3, [sp, #8]
 800cfd6:	4440      	add	r0, r8
 800cfd8:	fb0e cc03 	mla	ip, lr, r3, ip
 800cfdc:	2e00      	cmp	r6, #0
 800cfde:	d0ac      	beq.n	800cf3a <arm_correlate_f32+0x49e>
 800cfe0:	08b5      	lsrs	r5, r6, #2
 800cfe2:	eddf 5a08 	vldr	s11, [pc, #32]	@ 800d004 <arm_correlate_f32+0x568>
 800cfe6:	f47f af54 	bne.w	800ce92 <arm_correlate_f32+0x3f6>
 800cfea:	4615      	mov	r5, r2
 800cfec:	4601      	mov	r1, r0
 800cfee:	e77e      	b.n	800ceee <arm_correlate_f32+0x452>
 800cff0:	4605      	mov	r5, r0
 800cff2:	e6cf      	b.n	800cd94 <arm_correlate_f32+0x2f8>
 800cff4:	9902      	ldr	r1, [sp, #8]
 800cff6:	2900      	cmp	r1, #0
 800cff8:	d1b5      	bne.n	800cf66 <arm_correlate_f32+0x4ca>
 800cffa:	e79e      	b.n	800cf3a <arm_correlate_f32+0x49e>
 800cffc:	eddf 7a01 	vldr	s15, [pc, #4]	@ 800d004 <arm_correlate_f32+0x568>
 800d000:	4605      	mov	r5, r0
 800d002:	e5c7      	b.n	800cb94 <arm_correlate_f32+0xf8>
 800d004:	00000000 	.word	0x00000000

0800d008 <arm_conv_f32>:
 800d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	b08b      	sub	sp, #44	@ 0x2c
 800d00e:	4299      	cmp	r1, r3
 800d010:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d012:	d205      	bcs.n	800d020 <arm_conv_f32+0x18>
 800d014:	4606      	mov	r6, r0
 800d016:	460c      	mov	r4, r1
 800d018:	4610      	mov	r0, r2
 800d01a:	4619      	mov	r1, r3
 800d01c:	4632      	mov	r2, r6
 800d01e:	4623      	mov	r3, r4
 800d020:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 800d024:	3101      	adds	r1, #1
 800d026:	1ac9      	subs	r1, r1, r3
 800d028:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d02c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800d030:	9101      	str	r1, [sp, #4]
 800d032:	1e59      	subs	r1, r3, #1
 800d034:	eb02 070b 	add.w	r7, r2, fp
 800d038:	f000 8277 	beq.w	800d52a <arm_conv_f32+0x522>
 800d03c:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800d2fc <arm_conv_f32+0x2f4>
 800d040:	f102 0904 	add.w	r9, r2, #4
 800d044:	46aa      	mov	sl, r5
 800d046:	4680      	mov	r8, r0
 800d048:	2401      	movs	r4, #1
 800d04a:	f014 0603 	ands.w	r6, r4, #3
 800d04e:	d01b      	beq.n	800d088 <arm_conv_f32+0x80>
 800d050:	ed92 7a00 	vldr	s14, [r2]
 800d054:	edd8 6a00 	vldr	s13, [r8]
 800d058:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d05c:	3e01      	subs	r6, #1
 800d05e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d062:	d011      	beq.n	800d088 <arm_conv_f32+0x80>
 800d064:	ed12 7a01 	vldr	s14, [r2, #-4]
 800d068:	edd8 6a01 	vldr	s13, [r8, #4]
 800d06c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d070:	2e01      	cmp	r6, #1
 800d072:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d076:	d007      	beq.n	800d088 <arm_conv_f32+0x80>
 800d078:	ed98 7a02 	vldr	s14, [r8, #8]
 800d07c:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d080:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d084:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d088:	3401      	adds	r4, #1
 800d08a:	42a3      	cmp	r3, r4
 800d08c:	ecea 7a01 	vstmia	sl!, {s15}
 800d090:	464a      	mov	r2, r9
 800d092:	d03a      	beq.n	800d10a <arm_conv_f32+0x102>
 800d094:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800d098:	f000 824c 	beq.w	800d534 <arm_conv_f32+0x52c>
 800d09c:	f100 0210 	add.w	r2, r0, #16
 800d0a0:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800d0a4:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800d2fc <arm_conv_f32+0x2f4>
 800d0a8:	eb02 0c08 	add.w	ip, r2, r8
 800d0ac:	f1a9 0610 	sub.w	r6, r9, #16
 800d0b0:	ed12 7a04 	vldr	s14, [r2, #-16]
 800d0b4:	edd6 3a04 	vldr	s7, [r6, #16]
 800d0b8:	ed12 6a03 	vldr	s12, [r2, #-12]
 800d0bc:	ed96 4a03 	vldr	s8, [r6, #12]
 800d0c0:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d0c4:	edd6 4a02 	vldr	s9, [r6, #8]
 800d0c8:	ed52 5a01 	vldr	s11, [r2, #-4]
 800d0cc:	ed96 5a01 	vldr	s10, [r6, #4]
 800d0d0:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d0d4:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d0d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0dc:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800d0e0:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d0e4:	ee65 6a85 	vmul.f32	s13, s11, s10
 800d0e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0ec:	3210      	adds	r2, #16
 800d0ee:	4594      	cmp	ip, r2
 800d0f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0f4:	f1a6 0610 	sub.w	r6, r6, #16
 800d0f8:	d1da      	bne.n	800d0b0 <arm_conv_f32+0xa8>
 800d0fa:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 800d0fe:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800d102:	4480      	add	r8, r0
 800d104:	f109 0904 	add.w	r9, r9, #4
 800d108:	e79f      	b.n	800d04a <arm_conv_f32+0x42>
 800d10a:	2b03      	cmp	r3, #3
 800d10c:	445d      	add	r5, fp
 800d10e:	f240 80e9 	bls.w	800d2e4 <arm_conv_f32+0x2dc>
 800d112:	9b01      	ldr	r3, [sp, #4]
 800d114:	089a      	lsrs	r2, r3, #2
 800d116:	9202      	str	r2, [sp, #8]
 800d118:	f000 8203 	beq.w	800d522 <arm_conv_f32+0x51a>
 800d11c:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800d120:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800d124:	0112      	lsls	r2, r2, #4
 800d126:	f004 0603 	and.w	r6, r4, #3
 800d12a:	9203      	str	r2, [sp, #12]
 800d12c:	f1a3 0a10 	sub.w	sl, r3, #16
 800d130:	f1a3 020c 	sub.w	r2, r3, #12
 800d134:	3b08      	subs	r3, #8
 800d136:	9204      	str	r2, [sp, #16]
 800d138:	9305      	str	r3, [sp, #20]
 800d13a:	f106 39ff 	add.w	r9, r6, #4294967295
 800d13e:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800d142:	9a03      	ldr	r2, [sp, #12]
 800d144:	f100 0c1c 	add.w	ip, r0, #28
 800d148:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800d14c:	464c      	mov	r4, r9
 800d14e:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800d152:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800d156:	f1a7 0310 	sub.w	r3, r7, #16
 800d15a:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800d15e:	eb05 0b02 	add.w	fp, r5, r2
 800d162:	461f      	mov	r7, r3
 800d164:	3510      	adds	r5, #16
 800d166:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800d2fc <arm_conv_f32+0x2f4>
 800d16a:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 800d16e:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 800d172:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 800d176:	eeb0 5a46 	vmov.f32	s10, s12
 800d17a:	eef0 4a46 	vmov.f32	s9, s12
 800d17e:	eef0 5a46 	vmov.f32	s11, s12
 800d182:	463a      	mov	r2, r7
 800d184:	4663      	mov	r3, ip
 800d186:	4641      	mov	r1, r8
 800d188:	edd2 6a04 	vldr	s13, [r2, #16]
 800d18c:	ed13 0a04 	vldr	s0, [r3, #-16]
 800d190:	ed92 7a03 	vldr	s14, [r2, #12]
 800d194:	edd2 7a02 	vldr	s15, [r2, #8]
 800d198:	edd2 0a01 	vldr	s1, [r2, #4]
 800d19c:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800d1a0:	ee62 3a26 	vmul.f32	s7, s4, s13
 800d1a4:	ee61 2a26 	vmul.f32	s5, s2, s13
 800d1a8:	ed13 1a03 	vldr	s2, [r3, #-12]
 800d1ac:	ee66 6a80 	vmul.f32	s13, s13, s0
 800d1b0:	ee21 4a87 	vmul.f32	s8, s3, s14
 800d1b4:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d1b8:	ee33 5a85 	vadd.f32	s10, s7, s10
 800d1bc:	ee22 3a07 	vmul.f32	s6, s4, s14
 800d1c0:	ed53 1a02 	vldr	s3, [r3, #-8]
 800d1c4:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800d1c8:	ee36 6a86 	vadd.f32	s12, s13, s12
 800d1cc:	ee60 3a07 	vmul.f32	s7, s0, s14
 800d1d0:	ee27 7a01 	vmul.f32	s14, s14, s2
 800d1d4:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d1d8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d1dc:	ee74 2a22 	vadd.f32	s5, s8, s5
 800d1e0:	ee60 4a27 	vmul.f32	s9, s0, s15
 800d1e4:	ee22 4a27 	vmul.f32	s8, s4, s15
 800d1e8:	ee73 3a85 	vadd.f32	s7, s7, s10
 800d1ec:	ed13 2a01 	vldr	s4, [r3, #-4]
 800d1f0:	ee21 5a27 	vmul.f32	s10, s2, s15
 800d1f4:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800d1f8:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d1fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d200:	ee34 4a22 	vadd.f32	s8, s8, s5
 800d204:	ee60 5a20 	vmul.f32	s11, s0, s1
 800d208:	ee21 3a20 	vmul.f32	s6, s2, s1
 800d20c:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d210:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800d214:	ee20 6a82 	vmul.f32	s12, s1, s4
 800d218:	3901      	subs	r1, #1
 800d21a:	f1a2 0210 	sub.w	r2, r2, #16
 800d21e:	ee75 5a84 	vadd.f32	s11, s11, s8
 800d222:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d226:	ee37 5a05 	vadd.f32	s10, s14, s10
 800d22a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d22e:	f103 0310 	add.w	r3, r3, #16
 800d232:	d1a9      	bne.n	800d188 <arm_conv_f32+0x180>
 800d234:	eb0a 030c 	add.w	r3, sl, ip
 800d238:	2e00      	cmp	r6, #0
 800d23a:	d042      	beq.n	800d2c2 <arm_conv_f32+0x2ba>
 800d23c:	edde 7a00 	vldr	s15, [lr]
 800d240:	ed93 4a00 	vldr	s8, [r3]
 800d244:	ee61 6a27 	vmul.f32	s13, s2, s15
 800d248:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800d24c:	ee22 7a27 	vmul.f32	s14, s4, s15
 800d250:	ee64 7a27 	vmul.f32	s15, s8, s15
 800d254:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800d258:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d25c:	ee35 5a07 	vadd.f32	s10, s10, s14
 800d260:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d264:	eb09 030c 	add.w	r3, r9, ip
 800d268:	b35c      	cbz	r4, 800d2c2 <arm_conv_f32+0x2ba>
 800d26a:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800d26e:	edd3 6a00 	vldr	s13, [r3]
 800d272:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800d276:	ee22 3a27 	vmul.f32	s6, s4, s15
 800d27a:	ee67 3a84 	vmul.f32	s7, s15, s8
 800d27e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d282:	2c01      	cmp	r4, #1
 800d284:	ee75 5a87 	vadd.f32	s11, s11, s14
 800d288:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d28c:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d290:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d294:	eb00 030c 	add.w	r3, r0, ip
 800d298:	d013      	beq.n	800d2c2 <arm_conv_f32+0x2ba>
 800d29a:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800d29e:	edd3 3a00 	vldr	s7, [r3]
 800d2a2:	ee62 7a07 	vmul.f32	s15, s4, s14
 800d2a6:	ee27 4a04 	vmul.f32	s8, s14, s8
 800d2aa:	ee67 6a26 	vmul.f32	s13, s14, s13
 800d2ae:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d2b2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d2b6:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d2ba:	ee35 5a26 	vadd.f32	s10, s10, s13
 800d2be:	ee36 6a07 	vadd.f32	s12, s12, s14
 800d2c2:	45ab      	cmp	fp, r5
 800d2c4:	ed45 5a04 	vstr	s11, [r5, #-16]
 800d2c8:	ed45 4a03 	vstr	s9, [r5, #-12]
 800d2cc:	ed05 5a02 	vstr	s10, [r5, #-8]
 800d2d0:	ed05 6a01 	vstr	s12, [r5, #-4]
 800d2d4:	f10c 0c10 	add.w	ip, ip, #16
 800d2d8:	f105 0310 	add.w	r3, r5, #16
 800d2dc:	f000 809e 	beq.w	800d41c <arm_conv_f32+0x414>
 800d2e0:	461d      	mov	r5, r3
 800d2e2:	e740      	b.n	800d166 <arm_conv_f32+0x15e>
 800d2e4:	9a01      	ldr	r2, [sp, #4]
 800d2e6:	46ac      	mov	ip, r5
 800d2e8:	2a00      	cmp	r2, #0
 800d2ea:	d037      	beq.n	800d35c <arm_conv_f32+0x354>
 800d2ec:	9a01      	ldr	r2, [sp, #4]
 800d2ee:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800d2fc <arm_conv_f32+0x2f4>
 800d2f2:	0096      	lsls	r6, r2, #2
 800d2f4:	eb05 0c06 	add.w	ip, r5, r6
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	e021      	b.n	800d340 <arm_conv_f32+0x338>
 800d2fc:	00000000 	.word	0x00000000
 800d300:	edd7 7a00 	vldr	s15, [r7]
 800d304:	ecb2 7a01 	vldmia	r2!, {s14}
 800d308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d30c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d310:	b189      	cbz	r1, 800d336 <arm_conv_f32+0x32e>
 800d312:	ed17 7a01 	vldr	s14, [r7, #-4]
 800d316:	edd4 6a01 	vldr	s13, [r4, #4]
 800d31a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d31e:	2b02      	cmp	r3, #2
 800d320:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d324:	d007      	beq.n	800d336 <arm_conv_f32+0x32e>
 800d326:	ed94 7a02 	vldr	s14, [r4, #8]
 800d32a:	ed57 6a02 	vldr	s13, [r7, #-8]
 800d32e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d332:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d336:	ece5 7a01 	vstmia	r5!, {s15}
 800d33a:	4565      	cmp	r5, ip
 800d33c:	4614      	mov	r4, r2
 800d33e:	d00a      	beq.n	800d356 <arm_conv_f32+0x34e>
 800d340:	4622      	mov	r2, r4
 800d342:	2b00      	cmp	r3, #0
 800d344:	d1dc      	bne.n	800d300 <arm_conv_f32+0x2f8>
 800d346:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800d2fc <arm_conv_f32+0x2f4>
 800d34a:	ece5 7a01 	vstmia	r5!, {s15}
 800d34e:	1d22      	adds	r2, r4, #4
 800d350:	4565      	cmp	r5, ip
 800d352:	4614      	mov	r4, r2
 800d354:	d1f4      	bne.n	800d340 <arm_conv_f32+0x338>
 800d356:	4430      	add	r0, r6
 800d358:	2900      	cmp	r1, #0
 800d35a:	d059      	beq.n	800d410 <arm_conv_f32+0x408>
 800d35c:	088d      	lsrs	r5, r1, #2
 800d35e:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 800d2fc <arm_conv_f32+0x2f4>
 800d362:	d058      	beq.n	800d416 <arm_conv_f32+0x40e>
 800d364:	f100 0210 	add.w	r2, r0, #16
 800d368:	f1a7 0310 	sub.w	r3, r7, #16
 800d36c:	462c      	mov	r4, r5
 800d36e:	ed52 6a04 	vldr	s13, [r2, #-16]
 800d372:	edd3 3a04 	vldr	s7, [r3, #16]
 800d376:	ed12 7a03 	vldr	s14, [r2, #-12]
 800d37a:	ed93 4a03 	vldr	s8, [r3, #12]
 800d37e:	ed52 7a02 	vldr	s15, [r2, #-8]
 800d382:	edd3 4a02 	vldr	s9, [r3, #8]
 800d386:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d38a:	ed93 5a01 	vldr	s10, [r3, #4]
 800d38e:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d392:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d396:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d39a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d39e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d3a2:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d3a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3aa:	3c01      	subs	r4, #1
 800d3ac:	f102 0210 	add.w	r2, r2, #16
 800d3b0:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800d3b4:	f1a3 0310 	sub.w	r3, r3, #16
 800d3b8:	d1d9      	bne.n	800d36e <arm_conv_f32+0x366>
 800d3ba:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800d3be:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800d3c2:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800d3c6:	f011 0203 	ands.w	r2, r1, #3
 800d3ca:	d01b      	beq.n	800d404 <arm_conv_f32+0x3fc>
 800d3cc:	edd3 7a00 	vldr	s15, [r3]
 800d3d0:	ed95 7a00 	vldr	s14, [r5]
 800d3d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3d8:	3a01      	subs	r2, #1
 800d3da:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d3de:	d011      	beq.n	800d404 <arm_conv_f32+0x3fc>
 800d3e0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d3e4:	ed95 7a01 	vldr	s14, [r5, #4]
 800d3e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d3ec:	2a01      	cmp	r2, #1
 800d3ee:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d3f2:	d007      	beq.n	800d404 <arm_conv_f32+0x3fc>
 800d3f4:	edd5 7a02 	vldr	s15, [r5, #8]
 800d3f8:	ed13 7a02 	vldr	s14, [r3, #-8]
 800d3fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d400:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d404:	3901      	subs	r1, #1
 800d406:	ecec 5a01 	vstmia	ip!, {s11}
 800d40a:	f100 0004 	add.w	r0, r0, #4
 800d40e:	d1a5      	bne.n	800d35c <arm_conv_f32+0x354>
 800d410:	b00b      	add	sp, #44	@ 0x2c
 800d412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d416:	463b      	mov	r3, r7
 800d418:	4605      	mov	r5, r0
 800d41a:	e7d4      	b.n	800d3c6 <arm_conv_f32+0x3be>
 800d41c:	9b02      	ldr	r3, [sp, #8]
 800d41e:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800d422:	009b      	lsls	r3, r3, #2
 800d424:	9302      	str	r3, [sp, #8]
 800d426:	9b03      	ldr	r3, [sp, #12]
 800d428:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800d42c:	4403      	add	r3, r0
 800d42e:	465d      	mov	r5, fp
 800d430:	469e      	mov	lr, r3
 800d432:	9b01      	ldr	r3, [sp, #4]
 800d434:	f013 0c03 	ands.w	ip, r3, #3
 800d438:	d075      	beq.n	800d526 <arm_conv_f32+0x51e>
 800d43a:	9b02      	ldr	r3, [sp, #8]
 800d43c:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800d440:	f004 0403 	and.w	r4, r4, #3
 800d444:	f104 3bff 	add.w	fp, r4, #4294967295
 800d448:	f103 0801 	add.w	r8, r3, #1
 800d44c:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800d450:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800d454:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800d458:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800d45c:	f1a7 0210 	sub.w	r2, r7, #16
 800d460:	4618      	mov	r0, r3
 800d462:	465b      	mov	r3, fp
 800d464:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800d468:	468b      	mov	fp, r1
 800d46a:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800d46e:	4621      	mov	r1, r4
 800d470:	4617      	mov	r7, r2
 800d472:	461c      	mov	r4, r3
 800d474:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 800d2fc <arm_conv_f32+0x2f4>
 800d478:	f10e 0210 	add.w	r2, lr, #16
 800d47c:	463b      	mov	r3, r7
 800d47e:	4656      	mov	r6, sl
 800d480:	ed12 7a04 	vldr	s14, [r2, #-16]
 800d484:	edd3 3a04 	vldr	s7, [r3, #16]
 800d488:	ed12 6a03 	vldr	s12, [r2, #-12]
 800d48c:	ed93 4a03 	vldr	s8, [r3, #12]
 800d490:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d494:	edd3 4a02 	vldr	s9, [r3, #8]
 800d498:	ed52 5a01 	vldr	s11, [r2, #-4]
 800d49c:	ed93 5a01 	vldr	s10, [r3, #4]
 800d4a0:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d4a4:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d4a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4ac:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800d4b0:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d4b4:	ee65 6a85 	vmul.f32	s13, s11, s10
 800d4b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4bc:	3e01      	subs	r6, #1
 800d4be:	f102 0210 	add.w	r2, r2, #16
 800d4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4c6:	f1a3 0310 	sub.w	r3, r3, #16
 800d4ca:	d1d9      	bne.n	800d480 <arm_conv_f32+0x478>
 800d4cc:	4486      	add	lr, r0
 800d4ce:	b1d1      	cbz	r1, 800d506 <arm_conv_f32+0x4fe>
 800d4d0:	ed99 7a00 	vldr	s14, [r9]
 800d4d4:	edde 6a00 	vldr	s13, [lr]
 800d4d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d4dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4e0:	b18c      	cbz	r4, 800d506 <arm_conv_f32+0x4fe>
 800d4e2:	ed19 7a01 	vldr	s14, [r9, #-4]
 800d4e6:	edde 6a01 	vldr	s13, [lr, #4]
 800d4ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d4ee:	2c01      	cmp	r4, #1
 800d4f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4f4:	d007      	beq.n	800d506 <arm_conv_f32+0x4fe>
 800d4f6:	ed9e 7a02 	vldr	s14, [lr, #8]
 800d4fa:	ed59 6a02 	vldr	s13, [r9, #-8]
 800d4fe:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d502:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d506:	ece5 7a01 	vstmia	r5!, {s15}
 800d50a:	4565      	cmp	r5, ip
 800d50c:	46c6      	mov	lr, r8
 800d50e:	f108 0804 	add.w	r8, r8, #4
 800d512:	d1af      	bne.n	800d474 <arm_conv_f32+0x46c>
 800d514:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800d518:	4659      	mov	r1, fp
 800d51a:	9b01      	ldr	r3, [sp, #4]
 800d51c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d520:	e71c      	b.n	800d35c <arm_conv_f32+0x354>
 800d522:	4686      	mov	lr, r0
 800d524:	e785      	b.n	800d432 <arm_conv_f32+0x42a>
 800d526:	46ac      	mov	ip, r5
 800d528:	e7f7      	b.n	800d51a <arm_conv_f32+0x512>
 800d52a:	9a01      	ldr	r2, [sp, #4]
 800d52c:	2a00      	cmp	r2, #0
 800d52e:	f47f aedd 	bne.w	800d2ec <arm_conv_f32+0x2e4>
 800d532:	e76d      	b.n	800d410 <arm_conv_f32+0x408>
 800d534:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 800d2fc <arm_conv_f32+0x2f4>
 800d538:	4680      	mov	r8, r0
 800d53a:	e5e3      	b.n	800d104 <arm_conv_f32+0xfc>

0800d53c <memset>:
 800d53c:	4402      	add	r2, r0
 800d53e:	4603      	mov	r3, r0
 800d540:	4293      	cmp	r3, r2
 800d542:	d100      	bne.n	800d546 <memset+0xa>
 800d544:	4770      	bx	lr
 800d546:	f803 1b01 	strb.w	r1, [r3], #1
 800d54a:	e7f9      	b.n	800d540 <memset+0x4>

0800d54c <__errno>:
 800d54c:	4b01      	ldr	r3, [pc, #4]	@ (800d554 <__errno+0x8>)
 800d54e:	6818      	ldr	r0, [r3, #0]
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	24000450 	.word	0x24000450

0800d558 <__libc_init_array>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	4d0d      	ldr	r5, [pc, #52]	@ (800d590 <__libc_init_array+0x38>)
 800d55c:	4c0d      	ldr	r4, [pc, #52]	@ (800d594 <__libc_init_array+0x3c>)
 800d55e:	1b64      	subs	r4, r4, r5
 800d560:	10a4      	asrs	r4, r4, #2
 800d562:	2600      	movs	r6, #0
 800d564:	42a6      	cmp	r6, r4
 800d566:	d109      	bne.n	800d57c <__libc_init_array+0x24>
 800d568:	4d0b      	ldr	r5, [pc, #44]	@ (800d598 <__libc_init_array+0x40>)
 800d56a:	4c0c      	ldr	r4, [pc, #48]	@ (800d59c <__libc_init_array+0x44>)
 800d56c:	f001 f818 	bl	800e5a0 <_init>
 800d570:	1b64      	subs	r4, r4, r5
 800d572:	10a4      	asrs	r4, r4, #2
 800d574:	2600      	movs	r6, #0
 800d576:	42a6      	cmp	r6, r4
 800d578:	d105      	bne.n	800d586 <__libc_init_array+0x2e>
 800d57a:	bd70      	pop	{r4, r5, r6, pc}
 800d57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d580:	4798      	blx	r3
 800d582:	3601      	adds	r6, #1
 800d584:	e7ee      	b.n	800d564 <__libc_init_array+0xc>
 800d586:	f855 3b04 	ldr.w	r3, [r5], #4
 800d58a:	4798      	blx	r3
 800d58c:	3601      	adds	r6, #1
 800d58e:	e7f2      	b.n	800d576 <__libc_init_array+0x1e>
 800d590:	0800e7e8 	.word	0x0800e7e8
 800d594:	0800e7e8 	.word	0x0800e7e8
 800d598:	0800e7e8 	.word	0x0800e7e8
 800d59c:	0800e7ec 	.word	0x0800e7ec

0800d5a0 <copysign>:
 800d5a0:	b082      	sub	sp, #8
 800d5a2:	ec51 0b10 	vmov	r0, r1, d0
 800d5a6:	ed8d 1b00 	vstr	d1, [sp]
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800d5b0:	9901      	ldr	r1, [sp, #4]
 800d5b2:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800d5b6:	ea40 0301 	orr.w	r3, r0, r1
 800d5ba:	ec43 2b10 	vmov	d0, r2, r3
 800d5be:	b002      	add	sp, #8
 800d5c0:	4770      	bx	lr
 800d5c2:	0000      	movs	r0, r0
 800d5c4:	0000      	movs	r0, r0
	...

0800d5c8 <remainder>:
 800d5c8:	b508      	push	{r3, lr}
 800d5ca:	ed2d 8b04 	vpush	{d8-d9}
 800d5ce:	eeb0 8b41 	vmov.f64	d8, d1
 800d5d2:	f000 fad9 	bl	800db88 <__ieee754_remainder>
 800d5d6:	eeb4 8b48 	vcmp.f64	d8, d8
 800d5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5de:	d60c      	bvs.n	800d5fa <remainder+0x32>
 800d5e0:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800d600 <remainder+0x38>
 800d5e4:	eeb4 8b49 	vcmp.f64	d8, d9
 800d5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ec:	d105      	bne.n	800d5fa <remainder+0x32>
 800d5ee:	f7ff ffad 	bl	800d54c <__errno>
 800d5f2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d5f6:	2321      	movs	r3, #33	@ 0x21
 800d5f8:	6003      	str	r3, [r0, #0]
 800d5fa:	ecbd 8b04 	vpop	{d8-d9}
 800d5fe:	bd08      	pop	{r3, pc}
	...

0800d608 <sqrt>:
 800d608:	b508      	push	{r3, lr}
 800d60a:	ed2d 8b04 	vpush	{d8-d9}
 800d60e:	eeb0 8b40 	vmov.f64	d8, d0
 800d612:	f000 f8b1 	bl	800d778 <__ieee754_sqrt>
 800d616:	eeb4 8b48 	vcmp.f64	d8, d8
 800d61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d61e:	d60c      	bvs.n	800d63a <sqrt+0x32>
 800d620:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800d640 <sqrt+0x38>
 800d624:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62c:	d505      	bpl.n	800d63a <sqrt+0x32>
 800d62e:	f7ff ff8d 	bl	800d54c <__errno>
 800d632:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d636:	2321      	movs	r3, #33	@ 0x21
 800d638:	6003      	str	r3, [r0, #0]
 800d63a:	ecbd 8b04 	vpop	{d8-d9}
 800d63e:	bd08      	pop	{r3, pc}
	...

0800d648 <cos>:
 800d648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d64a:	eeb0 7b40 	vmov.f64	d7, d0
 800d64e:	ee17 3a90 	vmov	r3, s15
 800d652:	4a21      	ldr	r2, [pc, #132]	@ (800d6d8 <cos+0x90>)
 800d654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d658:	4293      	cmp	r3, r2
 800d65a:	d806      	bhi.n	800d66a <cos+0x22>
 800d65c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d6d0 <cos+0x88>
 800d660:	b005      	add	sp, #20
 800d662:	f85d eb04 	ldr.w	lr, [sp], #4
 800d666:	f000 b88b 	b.w	800d780 <__kernel_cos>
 800d66a:	4a1c      	ldr	r2, [pc, #112]	@ (800d6dc <cos+0x94>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d904      	bls.n	800d67a <cos+0x32>
 800d670:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d674:	b005      	add	sp, #20
 800d676:	f85d fb04 	ldr.w	pc, [sp], #4
 800d67a:	4668      	mov	r0, sp
 800d67c:	f000 f940 	bl	800d900 <__ieee754_rem_pio2>
 800d680:	f000 0003 	and.w	r0, r0, #3
 800d684:	2801      	cmp	r0, #1
 800d686:	d009      	beq.n	800d69c <cos+0x54>
 800d688:	2802      	cmp	r0, #2
 800d68a:	d010      	beq.n	800d6ae <cos+0x66>
 800d68c:	b9b0      	cbnz	r0, 800d6bc <cos+0x74>
 800d68e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d692:	ed9d 0b00 	vldr	d0, [sp]
 800d696:	f000 f873 	bl	800d780 <__kernel_cos>
 800d69a:	e7eb      	b.n	800d674 <cos+0x2c>
 800d69c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6a0:	ed9d 0b00 	vldr	d0, [sp]
 800d6a4:	f000 f8d4 	bl	800d850 <__kernel_sin>
 800d6a8:	eeb1 0b40 	vneg.f64	d0, d0
 800d6ac:	e7e2      	b.n	800d674 <cos+0x2c>
 800d6ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6b2:	ed9d 0b00 	vldr	d0, [sp]
 800d6b6:	f000 f863 	bl	800d780 <__kernel_cos>
 800d6ba:	e7f5      	b.n	800d6a8 <cos+0x60>
 800d6bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6c0:	ed9d 0b00 	vldr	d0, [sp]
 800d6c4:	2001      	movs	r0, #1
 800d6c6:	f000 f8c3 	bl	800d850 <__kernel_sin>
 800d6ca:	e7d3      	b.n	800d674 <cos+0x2c>
 800d6cc:	f3af 8000 	nop.w
	...
 800d6d8:	3fe921fb 	.word	0x3fe921fb
 800d6dc:	7fefffff 	.word	0x7fefffff

0800d6e0 <sin>:
 800d6e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6e2:	eeb0 7b40 	vmov.f64	d7, d0
 800d6e6:	ee17 3a90 	vmov	r3, s15
 800d6ea:	4a21      	ldr	r2, [pc, #132]	@ (800d770 <sin+0x90>)
 800d6ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d6f0:	4293      	cmp	r3, r2
 800d6f2:	d807      	bhi.n	800d704 <sin+0x24>
 800d6f4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d768 <sin+0x88>
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	b005      	add	sp, #20
 800d6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d700:	f000 b8a6 	b.w	800d850 <__kernel_sin>
 800d704:	4a1b      	ldr	r2, [pc, #108]	@ (800d774 <sin+0x94>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d904      	bls.n	800d714 <sin+0x34>
 800d70a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d70e:	b005      	add	sp, #20
 800d710:	f85d fb04 	ldr.w	pc, [sp], #4
 800d714:	4668      	mov	r0, sp
 800d716:	f000 f8f3 	bl	800d900 <__ieee754_rem_pio2>
 800d71a:	f000 0003 	and.w	r0, r0, #3
 800d71e:	2801      	cmp	r0, #1
 800d720:	d00a      	beq.n	800d738 <sin+0x58>
 800d722:	2802      	cmp	r0, #2
 800d724:	d00f      	beq.n	800d746 <sin+0x66>
 800d726:	b9c0      	cbnz	r0, 800d75a <sin+0x7a>
 800d728:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d72c:	ed9d 0b00 	vldr	d0, [sp]
 800d730:	2001      	movs	r0, #1
 800d732:	f000 f88d 	bl	800d850 <__kernel_sin>
 800d736:	e7ea      	b.n	800d70e <sin+0x2e>
 800d738:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d73c:	ed9d 0b00 	vldr	d0, [sp]
 800d740:	f000 f81e 	bl	800d780 <__kernel_cos>
 800d744:	e7e3      	b.n	800d70e <sin+0x2e>
 800d746:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d74a:	ed9d 0b00 	vldr	d0, [sp]
 800d74e:	2001      	movs	r0, #1
 800d750:	f000 f87e 	bl	800d850 <__kernel_sin>
 800d754:	eeb1 0b40 	vneg.f64	d0, d0
 800d758:	e7d9      	b.n	800d70e <sin+0x2e>
 800d75a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d75e:	ed9d 0b00 	vldr	d0, [sp]
 800d762:	f000 f80d 	bl	800d780 <__kernel_cos>
 800d766:	e7f5      	b.n	800d754 <sin+0x74>
	...
 800d770:	3fe921fb 	.word	0x3fe921fb
 800d774:	7fefffff 	.word	0x7fefffff

0800d778 <__ieee754_sqrt>:
 800d778:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d77c:	4770      	bx	lr
	...

0800d780 <__kernel_cos>:
 800d780:	eeb0 5b40 	vmov.f64	d5, d0
 800d784:	ee15 1a90 	vmov	r1, s11
 800d788:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d78c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d790:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800d794:	d204      	bcs.n	800d7a0 <__kernel_cos+0x20>
 800d796:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800d79a:	ee17 3a90 	vmov	r3, s15
 800d79e:	b343      	cbz	r3, 800d7f2 <__kernel_cos+0x72>
 800d7a0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800d7a4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800d7a8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800d818 <__kernel_cos+0x98>
 800d7ac:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d820 <__kernel_cos+0xa0>
 800d7b0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d7b4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d828 <__kernel_cos+0xa8>
 800d7b8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d7bc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d830 <__kernel_cos+0xb0>
 800d7c0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d7c4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d838 <__kernel_cos+0xb8>
 800d7c8:	4b1f      	ldr	r3, [pc, #124]	@ (800d848 <__kernel_cos+0xc8>)
 800d7ca:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d7ce:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d840 <__kernel_cos+0xc0>
 800d7d2:	4299      	cmp	r1, r3
 800d7d4:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d7d8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d7dc:	ee24 4b06 	vmul.f64	d4, d4, d6
 800d7e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d7e4:	eea6 1b04 	vfma.f64	d1, d6, d4
 800d7e8:	d804      	bhi.n	800d7f4 <__kernel_cos+0x74>
 800d7ea:	ee37 7b41 	vsub.f64	d7, d7, d1
 800d7ee:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d7f2:	4770      	bx	lr
 800d7f4:	4b15      	ldr	r3, [pc, #84]	@ (800d84c <__kernel_cos+0xcc>)
 800d7f6:	4299      	cmp	r1, r3
 800d7f8:	d809      	bhi.n	800d80e <__kernel_cos+0x8e>
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800d800:	ec43 2b16 	vmov	d6, r2, r3
 800d804:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d808:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d80c:	e7ed      	b.n	800d7ea <__kernel_cos+0x6a>
 800d80e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800d812:	e7f7      	b.n	800d804 <__kernel_cos+0x84>
 800d814:	f3af 8000 	nop.w
 800d818:	be8838d4 	.word	0xbe8838d4
 800d81c:	bda8fae9 	.word	0xbda8fae9
 800d820:	bdb4b1c4 	.word	0xbdb4b1c4
 800d824:	3e21ee9e 	.word	0x3e21ee9e
 800d828:	809c52ad 	.word	0x809c52ad
 800d82c:	be927e4f 	.word	0xbe927e4f
 800d830:	19cb1590 	.word	0x19cb1590
 800d834:	3efa01a0 	.word	0x3efa01a0
 800d838:	16c15177 	.word	0x16c15177
 800d83c:	bf56c16c 	.word	0xbf56c16c
 800d840:	5555554c 	.word	0x5555554c
 800d844:	3fa55555 	.word	0x3fa55555
 800d848:	3fd33332 	.word	0x3fd33332
 800d84c:	3fe90000 	.word	0x3fe90000

0800d850 <__kernel_sin>:
 800d850:	ee10 3a90 	vmov	r3, s1
 800d854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d858:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d85c:	d204      	bcs.n	800d868 <__kernel_sin+0x18>
 800d85e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800d862:	ee17 3a90 	vmov	r3, s15
 800d866:	b35b      	cbz	r3, 800d8c0 <__kernel_sin+0x70>
 800d868:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d86c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800d870:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800d8c8 <__kernel_sin+0x78>
 800d874:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800d8d0 <__kernel_sin+0x80>
 800d878:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d87c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800d8d8 <__kernel_sin+0x88>
 800d880:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d884:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800d8e0 <__kernel_sin+0x90>
 800d888:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d88c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800d8e8 <__kernel_sin+0x98>
 800d890:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d894:	b930      	cbnz	r0, 800d8a4 <__kernel_sin+0x54>
 800d896:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800d8f0 <__kernel_sin+0xa0>
 800d89a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d89e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800d8a2:	4770      	bx	lr
 800d8a4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800d8a8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800d8ac:	eea1 7b04 	vfma.f64	d7, d1, d4
 800d8b0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800d8b4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800d8f8 <__kernel_sin+0xa8>
 800d8b8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800d8bc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	f3af 8000 	nop.w
 800d8c8:	5acfd57c 	.word	0x5acfd57c
 800d8cc:	3de5d93a 	.word	0x3de5d93a
 800d8d0:	8a2b9ceb 	.word	0x8a2b9ceb
 800d8d4:	be5ae5e6 	.word	0xbe5ae5e6
 800d8d8:	57b1fe7d 	.word	0x57b1fe7d
 800d8dc:	3ec71de3 	.word	0x3ec71de3
 800d8e0:	19c161d5 	.word	0x19c161d5
 800d8e4:	bf2a01a0 	.word	0xbf2a01a0
 800d8e8:	1110f8a6 	.word	0x1110f8a6
 800d8ec:	3f811111 	.word	0x3f811111
 800d8f0:	55555549 	.word	0x55555549
 800d8f4:	bfc55555 	.word	0xbfc55555
 800d8f8:	55555549 	.word	0x55555549
 800d8fc:	3fc55555 	.word	0x3fc55555

0800d900 <__ieee754_rem_pio2>:
 800d900:	b570      	push	{r4, r5, r6, lr}
 800d902:	eeb0 7b40 	vmov.f64	d7, d0
 800d906:	ee17 5a90 	vmov	r5, s15
 800d90a:	4b99      	ldr	r3, [pc, #612]	@ (800db70 <__ieee754_rem_pio2+0x270>)
 800d90c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d910:	429e      	cmp	r6, r3
 800d912:	b088      	sub	sp, #32
 800d914:	4604      	mov	r4, r0
 800d916:	d807      	bhi.n	800d928 <__ieee754_rem_pio2+0x28>
 800d918:	2200      	movs	r2, #0
 800d91a:	2300      	movs	r3, #0
 800d91c:	ed84 0b00 	vstr	d0, [r4]
 800d920:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d924:	2000      	movs	r0, #0
 800d926:	e01b      	b.n	800d960 <__ieee754_rem_pio2+0x60>
 800d928:	4b92      	ldr	r3, [pc, #584]	@ (800db74 <__ieee754_rem_pio2+0x274>)
 800d92a:	429e      	cmp	r6, r3
 800d92c:	d83b      	bhi.n	800d9a6 <__ieee754_rem_pio2+0xa6>
 800d92e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800d932:	2d00      	cmp	r5, #0
 800d934:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800db30 <__ieee754_rem_pio2+0x230>
 800d938:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800d93c:	dd19      	ble.n	800d972 <__ieee754_rem_pio2+0x72>
 800d93e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800d942:	429e      	cmp	r6, r3
 800d944:	d00e      	beq.n	800d964 <__ieee754_rem_pio2+0x64>
 800d946:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800db38 <__ieee754_rem_pio2+0x238>
 800d94a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800d94e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d952:	ed84 6b00 	vstr	d6, [r4]
 800d956:	ee37 7b45 	vsub.f64	d7, d7, d5
 800d95a:	ed84 7b02 	vstr	d7, [r4, #8]
 800d95e:	2001      	movs	r0, #1
 800d960:	b008      	add	sp, #32
 800d962:	bd70      	pop	{r4, r5, r6, pc}
 800d964:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800db40 <__ieee754_rem_pio2+0x240>
 800d968:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800db48 <__ieee754_rem_pio2+0x248>
 800d96c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d970:	e7eb      	b.n	800d94a <__ieee754_rem_pio2+0x4a>
 800d972:	429e      	cmp	r6, r3
 800d974:	ee30 7b06 	vadd.f64	d7, d0, d6
 800d978:	d00e      	beq.n	800d998 <__ieee754_rem_pio2+0x98>
 800d97a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800db38 <__ieee754_rem_pio2+0x238>
 800d97e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800d982:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d986:	ed84 6b00 	vstr	d6, [r4]
 800d98a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800d98e:	f04f 30ff 	mov.w	r0, #4294967295
 800d992:	ed84 7b02 	vstr	d7, [r4, #8]
 800d996:	e7e3      	b.n	800d960 <__ieee754_rem_pio2+0x60>
 800d998:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800db40 <__ieee754_rem_pio2+0x240>
 800d99c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800db48 <__ieee754_rem_pio2+0x248>
 800d9a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d9a4:	e7eb      	b.n	800d97e <__ieee754_rem_pio2+0x7e>
 800d9a6:	4b74      	ldr	r3, [pc, #464]	@ (800db78 <__ieee754_rem_pio2+0x278>)
 800d9a8:	429e      	cmp	r6, r3
 800d9aa:	d870      	bhi.n	800da8e <__ieee754_rem_pio2+0x18e>
 800d9ac:	f000 f96e 	bl	800dc8c <fabs>
 800d9b0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d9b4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800db50 <__ieee754_rem_pio2+0x250>
 800d9b8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800d9bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800d9c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800d9c4:	ee17 0a90 	vmov	r0, s15
 800d9c8:	eeb1 4b45 	vneg.f64	d4, d5
 800d9cc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800db30 <__ieee754_rem_pio2+0x230>
 800d9d0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800d9d4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800db38 <__ieee754_rem_pio2+0x238>
 800d9d8:	281f      	cmp	r0, #31
 800d9da:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d9de:	ee30 6b47 	vsub.f64	d6, d0, d7
 800d9e2:	dc05      	bgt.n	800d9f0 <__ieee754_rem_pio2+0xf0>
 800d9e4:	4b65      	ldr	r3, [pc, #404]	@ (800db7c <__ieee754_rem_pio2+0x27c>)
 800d9e6:	1e42      	subs	r2, r0, #1
 800d9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ec:	42b3      	cmp	r3, r6
 800d9ee:	d109      	bne.n	800da04 <__ieee754_rem_pio2+0x104>
 800d9f0:	ee16 3a90 	vmov	r3, s13
 800d9f4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800d9f8:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800d9fc:	2b10      	cmp	r3, #16
 800d9fe:	ea4f 5226 	mov.w	r2, r6, asr #20
 800da02:	dc02      	bgt.n	800da0a <__ieee754_rem_pio2+0x10a>
 800da04:	ed84 6b00 	vstr	d6, [r4]
 800da08:	e01a      	b.n	800da40 <__ieee754_rem_pio2+0x140>
 800da0a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800db40 <__ieee754_rem_pio2+0x240>
 800da0e:	eeb0 6b40 	vmov.f64	d6, d0
 800da12:	eea4 6b03 	vfma.f64	d6, d4, d3
 800da16:	ee30 7b46 	vsub.f64	d7, d0, d6
 800da1a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800da1e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800db48 <__ieee754_rem_pio2+0x248>
 800da22:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800da26:	ee36 3b47 	vsub.f64	d3, d6, d7
 800da2a:	ee13 3a90 	vmov	r3, s7
 800da2e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800da32:	1ad3      	subs	r3, r2, r3
 800da34:	2b31      	cmp	r3, #49	@ 0x31
 800da36:	dc17      	bgt.n	800da68 <__ieee754_rem_pio2+0x168>
 800da38:	eeb0 0b46 	vmov.f64	d0, d6
 800da3c:	ed84 3b00 	vstr	d3, [r4]
 800da40:	ed94 6b00 	vldr	d6, [r4]
 800da44:	2d00      	cmp	r5, #0
 800da46:	ee30 0b46 	vsub.f64	d0, d0, d6
 800da4a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800da4e:	ed84 0b02 	vstr	d0, [r4, #8]
 800da52:	da85      	bge.n	800d960 <__ieee754_rem_pio2+0x60>
 800da54:	eeb1 6b46 	vneg.f64	d6, d6
 800da58:	eeb1 0b40 	vneg.f64	d0, d0
 800da5c:	ed84 6b00 	vstr	d6, [r4]
 800da60:	ed84 0b02 	vstr	d0, [r4, #8]
 800da64:	4240      	negs	r0, r0
 800da66:	e77b      	b.n	800d960 <__ieee754_rem_pio2+0x60>
 800da68:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800db58 <__ieee754_rem_pio2+0x258>
 800da6c:	eeb0 0b46 	vmov.f64	d0, d6
 800da70:	eea4 0b07 	vfma.f64	d0, d4, d7
 800da74:	ee36 6b40 	vsub.f64	d6, d6, d0
 800da78:	eea4 6b07 	vfma.f64	d6, d4, d7
 800da7c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800db60 <__ieee754_rem_pio2+0x260>
 800da80:	eeb0 7b46 	vmov.f64	d7, d6
 800da84:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800da88:	ee30 6b47 	vsub.f64	d6, d0, d7
 800da8c:	e7ba      	b.n	800da04 <__ieee754_rem_pio2+0x104>
 800da8e:	4b3c      	ldr	r3, [pc, #240]	@ (800db80 <__ieee754_rem_pio2+0x280>)
 800da90:	429e      	cmp	r6, r3
 800da92:	d906      	bls.n	800daa2 <__ieee754_rem_pio2+0x1a2>
 800da94:	ee30 7b40 	vsub.f64	d7, d0, d0
 800da98:	ed80 7b02 	vstr	d7, [r0, #8]
 800da9c:	ed80 7b00 	vstr	d7, [r0]
 800daa0:	e740      	b.n	800d924 <__ieee754_rem_pio2+0x24>
 800daa2:	ee10 3a10 	vmov	r3, s0
 800daa6:	1532      	asrs	r2, r6, #20
 800daa8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800daac:	4618      	mov	r0, r3
 800daae:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800dab2:	ec41 0b17 	vmov	d7, r0, r1
 800dab6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800daba:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800db68 <__ieee754_rem_pio2+0x268>
 800dabe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dac2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dac6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800daca:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dace:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dad2:	a808      	add	r0, sp, #32
 800dad4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dad8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dadc:	ed8d 6b04 	vstr	d6, [sp, #16]
 800dae0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dae4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dae8:	2103      	movs	r1, #3
 800daea:	ed30 7b02 	vldmdb	r0!, {d7}
 800daee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800daf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf6:	460b      	mov	r3, r1
 800daf8:	f101 31ff 	add.w	r1, r1, #4294967295
 800dafc:	d0f5      	beq.n	800daea <__ieee754_rem_pio2+0x1ea>
 800dafe:	4921      	ldr	r1, [pc, #132]	@ (800db84 <__ieee754_rem_pio2+0x284>)
 800db00:	9101      	str	r1, [sp, #4]
 800db02:	2102      	movs	r1, #2
 800db04:	9100      	str	r1, [sp, #0]
 800db06:	a802      	add	r0, sp, #8
 800db08:	4621      	mov	r1, r4
 800db0a:	f000 f8c9 	bl	800dca0 <__kernel_rem_pio2>
 800db0e:	2d00      	cmp	r5, #0
 800db10:	f6bf af26 	bge.w	800d960 <__ieee754_rem_pio2+0x60>
 800db14:	ed94 7b00 	vldr	d7, [r4]
 800db18:	eeb1 7b47 	vneg.f64	d7, d7
 800db1c:	ed84 7b00 	vstr	d7, [r4]
 800db20:	ed94 7b02 	vldr	d7, [r4, #8]
 800db24:	eeb1 7b47 	vneg.f64	d7, d7
 800db28:	ed84 7b02 	vstr	d7, [r4, #8]
 800db2c:	e79a      	b.n	800da64 <__ieee754_rem_pio2+0x164>
 800db2e:	bf00      	nop
 800db30:	54400000 	.word	0x54400000
 800db34:	3ff921fb 	.word	0x3ff921fb
 800db38:	1a626331 	.word	0x1a626331
 800db3c:	3dd0b461 	.word	0x3dd0b461
 800db40:	1a600000 	.word	0x1a600000
 800db44:	3dd0b461 	.word	0x3dd0b461
 800db48:	2e037073 	.word	0x2e037073
 800db4c:	3ba3198a 	.word	0x3ba3198a
 800db50:	6dc9c883 	.word	0x6dc9c883
 800db54:	3fe45f30 	.word	0x3fe45f30
 800db58:	2e000000 	.word	0x2e000000
 800db5c:	3ba3198a 	.word	0x3ba3198a
 800db60:	252049c1 	.word	0x252049c1
 800db64:	397b839a 	.word	0x397b839a
 800db68:	00000000 	.word	0x00000000
 800db6c:	41700000 	.word	0x41700000
 800db70:	3fe921fb 	.word	0x3fe921fb
 800db74:	4002d97b 	.word	0x4002d97b
 800db78:	413921fb 	.word	0x413921fb
 800db7c:	0800e5f8 	.word	0x0800e5f8
 800db80:	7fefffff 	.word	0x7fefffff
 800db84:	0800e678 	.word	0x0800e678

0800db88 <__ieee754_remainder>:
 800db88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db8c:	ed2d 8b04 	vpush	{d8-d9}
 800db90:	eeb0 9b41 	vmov.f64	d9, d1
 800db94:	eeb0 8b40 	vmov.f64	d8, d0
 800db98:	ee19 7a90 	vmov	r7, s19
 800db9c:	ee11 8a10 	vmov	r8, s2
 800dba0:	f027 4600 	bic.w	r6, r7, #2147483648	@ 0x80000000
 800dba4:	ea56 0308 	orrs.w	r3, r6, r8
 800dba8:	d107      	bne.n	800dbba <__ieee754_remainder+0x32>
 800dbaa:	ee28 8b09 	vmul.f64	d8, d8, d9
 800dbae:	ee88 0b08 	vdiv.f64	d0, d8, d8
 800dbb2:	ecbd 8b04 	vpop	{d8-d9}
 800dbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbba:	ee18 5a90 	vmov	r5, s17
 800dbbe:	4b30      	ldr	r3, [pc, #192]	@ (800dc80 <__ieee754_remainder+0xf8>)
 800dbc0:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800dbc4:	429c      	cmp	r4, r3
 800dbc6:	d8f0      	bhi.n	800dbaa <__ieee754_remainder+0x22>
 800dbc8:	429e      	cmp	r6, r3
 800dbca:	d909      	bls.n	800dbe0 <__ieee754_remainder+0x58>
 800dbcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dbd0:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800dbd4:	ea53 0308 	orrs.w	r3, r3, r8
 800dbd8:	d1e7      	bne.n	800dbaa <__ieee754_remainder+0x22>
 800dbda:	eeb0 0b48 	vmov.f64	d0, d8
 800dbde:	e006      	b.n	800dbee <__ieee754_remainder+0x66>
 800dbe0:	4b28      	ldr	r3, [pc, #160]	@ (800dc84 <__ieee754_remainder+0xfc>)
 800dbe2:	429e      	cmp	r6, r3
 800dbe4:	d8f9      	bhi.n	800dbda <__ieee754_remainder+0x52>
 800dbe6:	ee31 1b01 	vadd.f64	d1, d1, d1
 800dbea:	f000 fad5 	bl	800e198 <__ieee754_fmod>
 800dbee:	ee18 3a10 	vmov	r3, s16
 800dbf2:	1ba4      	subs	r4, r4, r6
 800dbf4:	eba3 0308 	sub.w	r3, r3, r8
 800dbf8:	431c      	orrs	r4, r3
 800dbfa:	d104      	bne.n	800dc06 <__ieee754_remainder+0x7e>
 800dbfc:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 800dc78 <__ieee754_remainder+0xf0>
 800dc00:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dc04:	e7d5      	b.n	800dbb2 <__ieee754_remainder+0x2a>
 800dc06:	f000 f841 	bl	800dc8c <fabs>
 800dc0a:	eeb0 8b40 	vmov.f64	d8, d0
 800dc0e:	eeb0 0b49 	vmov.f64	d0, d9
 800dc12:	f000 f83b 	bl	800dc8c <fabs>
 800dc16:	4b1c      	ldr	r3, [pc, #112]	@ (800dc88 <__ieee754_remainder+0x100>)
 800dc18:	403b      	ands	r3, r7
 800dc1a:	b993      	cbnz	r3, 800dc42 <__ieee754_remainder+0xba>
 800dc1c:	ee38 7b08 	vadd.f64	d7, d8, d8
 800dc20:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800dc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc28:	dd1b      	ble.n	800dc62 <__ieee754_remainder+0xda>
 800dc2a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dc2e:	ee38 7b08 	vadd.f64	d7, d8, d8
 800dc32:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800dc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc3a:	db12      	blt.n	800dc62 <__ieee754_remainder+0xda>
 800dc3c:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dc40:	e00f      	b.n	800dc62 <__ieee754_remainder+0xda>
 800dc42:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800dc46:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dc4a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc52:	dd06      	ble.n	800dc62 <__ieee754_remainder+0xda>
 800dc54:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dc58:	eeb4 7bc8 	vcmpe.f64	d7, d8
 800dc5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc60:	d9ec      	bls.n	800dc3c <__ieee754_remainder+0xb4>
 800dc62:	ee18 1a90 	vmov	r1, s17
 800dc66:	ec53 2b18 	vmov	r2, r3, d8
 800dc6a:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 800dc6e:	ea85 0301 	eor.w	r3, r5, r1
 800dc72:	ec43 2b10 	vmov	d0, r2, r3
 800dc76:	e79c      	b.n	800dbb2 <__ieee754_remainder+0x2a>
	...
 800dc80:	7fefffff 	.word	0x7fefffff
 800dc84:	7fdfffff 	.word	0x7fdfffff
 800dc88:	7fe00000 	.word	0x7fe00000

0800dc8c <fabs>:
 800dc8c:	ec51 0b10 	vmov	r0, r1, d0
 800dc90:	4602      	mov	r2, r0
 800dc92:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dc96:	ec43 2b10 	vmov	d0, r2, r3
 800dc9a:	4770      	bx	lr
 800dc9c:	0000      	movs	r0, r0
	...

0800dca0 <__kernel_rem_pio2>:
 800dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca4:	ed2d 8b06 	vpush	{d8-d10}
 800dca8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800dcac:	469b      	mov	fp, r3
 800dcae:	9001      	str	r0, [sp, #4]
 800dcb0:	4bbb      	ldr	r3, [pc, #748]	@ (800dfa0 <__kernel_rem_pio2+0x300>)
 800dcb2:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800dcb4:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800dcb8:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800dcbc:	f112 0f14 	cmn.w	r2, #20
 800dcc0:	bfa8      	it	ge
 800dcc2:	1ed3      	subge	r3, r2, #3
 800dcc4:	f10b 3aff 	add.w	sl, fp, #4294967295
 800dcc8:	bfb8      	it	lt
 800dcca:	2300      	movlt	r3, #0
 800dccc:	f06f 0517 	mvn.w	r5, #23
 800dcd0:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800df88 <__kernel_rem_pio2+0x2e8>
 800dcd4:	bfa4      	itt	ge
 800dcd6:	2018      	movge	r0, #24
 800dcd8:	fb93 f3f0 	sdivge	r3, r3, r0
 800dcdc:	fb03 5505 	mla	r5, r3, r5, r5
 800dce0:	eba3 040a 	sub.w	r4, r3, sl
 800dce4:	4415      	add	r5, r2
 800dce6:	460f      	mov	r7, r1
 800dce8:	eb09 060a 	add.w	r6, r9, sl
 800dcec:	a81a      	add	r0, sp, #104	@ 0x68
 800dcee:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	42b2      	cmp	r2, r6
 800dcf6:	dd0e      	ble.n	800dd16 <__kernel_rem_pio2+0x76>
 800dcf8:	aa1a      	add	r2, sp, #104	@ 0x68
 800dcfa:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800dcfe:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800dd02:	2600      	movs	r6, #0
 800dd04:	454e      	cmp	r6, r9
 800dd06:	dc25      	bgt.n	800dd54 <__kernel_rem_pio2+0xb4>
 800dd08:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800df88 <__kernel_rem_pio2+0x2e8>
 800dd0c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800dd10:	4614      	mov	r4, r2
 800dd12:	2000      	movs	r0, #0
 800dd14:	e015      	b.n	800dd42 <__kernel_rem_pio2+0xa2>
 800dd16:	42d4      	cmn	r4, r2
 800dd18:	d409      	bmi.n	800dd2e <__kernel_rem_pio2+0x8e>
 800dd1a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800dd1e:	ee07 1a90 	vmov	s15, r1
 800dd22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800dd26:	eca0 7b02 	vstmia	r0!, {d7}
 800dd2a:	3201      	adds	r2, #1
 800dd2c:	e7e2      	b.n	800dcf4 <__kernel_rem_pio2+0x54>
 800dd2e:	eeb0 7b46 	vmov.f64	d7, d6
 800dd32:	e7f8      	b.n	800dd26 <__kernel_rem_pio2+0x86>
 800dd34:	ecbc 5b02 	vldmia	ip!, {d5}
 800dd38:	ed94 6b00 	vldr	d6, [r4]
 800dd3c:	3001      	adds	r0, #1
 800dd3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dd42:	4550      	cmp	r0, sl
 800dd44:	f1a4 0408 	sub.w	r4, r4, #8
 800dd48:	ddf4      	ble.n	800dd34 <__kernel_rem_pio2+0x94>
 800dd4a:	ecae 7b02 	vstmia	lr!, {d7}
 800dd4e:	3601      	adds	r6, #1
 800dd50:	3208      	adds	r2, #8
 800dd52:	e7d7      	b.n	800dd04 <__kernel_rem_pio2+0x64>
 800dd54:	aa06      	add	r2, sp, #24
 800dd56:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800df90 <__kernel_rem_pio2+0x2f0>
 800dd5a:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800df98 <__kernel_rem_pio2+0x2f8>
 800dd5e:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800dd62:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800dd66:	9203      	str	r2, [sp, #12]
 800dd68:	9302      	str	r3, [sp, #8]
 800dd6a:	464c      	mov	r4, r9
 800dd6c:	00e3      	lsls	r3, r4, #3
 800dd6e:	9304      	str	r3, [sp, #16]
 800dd70:	ab92      	add	r3, sp, #584	@ 0x248
 800dd72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dd76:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800dd7a:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800dd7c:	ab06      	add	r3, sp, #24
 800dd7e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800dd82:	461e      	mov	r6, r3
 800dd84:	4620      	mov	r0, r4
 800dd86:	2800      	cmp	r0, #0
 800dd88:	f1a2 0208 	sub.w	r2, r2, #8
 800dd8c:	dc4a      	bgt.n	800de24 <__kernel_rem_pio2+0x184>
 800dd8e:	4628      	mov	r0, r5
 800dd90:	9305      	str	r3, [sp, #20]
 800dd92:	f000 fb0d 	bl	800e3b0 <scalbn>
 800dd96:	eeb0 8b40 	vmov.f64	d8, d0
 800dd9a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800dd9e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800dda2:	f000 fb85 	bl	800e4b0 <floor>
 800dda6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800ddaa:	eea0 8b47 	vfms.f64	d8, d0, d7
 800ddae:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800ddb2:	2d00      	cmp	r5, #0
 800ddb4:	ee17 8a90 	vmov	r8, s15
 800ddb8:	9b05      	ldr	r3, [sp, #20]
 800ddba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ddbe:	ee38 8b47 	vsub.f64	d8, d8, d7
 800ddc2:	dd41      	ble.n	800de48 <__kernel_rem_pio2+0x1a8>
 800ddc4:	1e60      	subs	r0, r4, #1
 800ddc6:	aa06      	add	r2, sp, #24
 800ddc8:	f1c5 0c18 	rsb	ip, r5, #24
 800ddcc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800ddd0:	fa46 f20c 	asr.w	r2, r6, ip
 800ddd4:	4490      	add	r8, r2
 800ddd6:	fa02 f20c 	lsl.w	r2, r2, ip
 800ddda:	1ab6      	subs	r6, r6, r2
 800dddc:	aa06      	add	r2, sp, #24
 800ddde:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800dde2:	f1c5 0217 	rsb	r2, r5, #23
 800dde6:	4116      	asrs	r6, r2
 800dde8:	2e00      	cmp	r6, #0
 800ddea:	dd3c      	ble.n	800de66 <__kernel_rem_pio2+0x1c6>
 800ddec:	f04f 0c00 	mov.w	ip, #0
 800ddf0:	f108 0801 	add.w	r8, r8, #1
 800ddf4:	4660      	mov	r0, ip
 800ddf6:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800ddfa:	4564      	cmp	r4, ip
 800ddfc:	dc66      	bgt.n	800decc <__kernel_rem_pio2+0x22c>
 800ddfe:	2d00      	cmp	r5, #0
 800de00:	dd03      	ble.n	800de0a <__kernel_rem_pio2+0x16a>
 800de02:	2d01      	cmp	r5, #1
 800de04:	d072      	beq.n	800deec <__kernel_rem_pio2+0x24c>
 800de06:	2d02      	cmp	r5, #2
 800de08:	d07a      	beq.n	800df00 <__kernel_rem_pio2+0x260>
 800de0a:	2e02      	cmp	r6, #2
 800de0c:	d12b      	bne.n	800de66 <__kernel_rem_pio2+0x1c6>
 800de0e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800de12:	ee30 8b48 	vsub.f64	d8, d0, d8
 800de16:	b330      	cbz	r0, 800de66 <__kernel_rem_pio2+0x1c6>
 800de18:	4628      	mov	r0, r5
 800de1a:	f000 fac9 	bl	800e3b0 <scalbn>
 800de1e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800de22:	e020      	b.n	800de66 <__kernel_rem_pio2+0x1c6>
 800de24:	ee20 7b09 	vmul.f64	d7, d0, d9
 800de28:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800de2c:	3801      	subs	r0, #1
 800de2e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800de32:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800de36:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800de3a:	eca6 0a01 	vstmia	r6!, {s0}
 800de3e:	ed92 0b00 	vldr	d0, [r2]
 800de42:	ee37 0b00 	vadd.f64	d0, d7, d0
 800de46:	e79e      	b.n	800dd86 <__kernel_rem_pio2+0xe6>
 800de48:	d105      	bne.n	800de56 <__kernel_rem_pio2+0x1b6>
 800de4a:	1e62      	subs	r2, r4, #1
 800de4c:	a906      	add	r1, sp, #24
 800de4e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800de52:	15f6      	asrs	r6, r6, #23
 800de54:	e7c8      	b.n	800dde8 <__kernel_rem_pio2+0x148>
 800de56:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800de5a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800de5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de62:	da31      	bge.n	800dec8 <__kernel_rem_pio2+0x228>
 800de64:	2600      	movs	r6, #0
 800de66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800de6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6e:	f040 809b 	bne.w	800dfa8 <__kernel_rem_pio2+0x308>
 800de72:	1e62      	subs	r2, r4, #1
 800de74:	2000      	movs	r0, #0
 800de76:	454a      	cmp	r2, r9
 800de78:	da49      	bge.n	800df0e <__kernel_rem_pio2+0x26e>
 800de7a:	2800      	cmp	r0, #0
 800de7c:	d062      	beq.n	800df44 <__kernel_rem_pio2+0x2a4>
 800de7e:	3c01      	subs	r4, #1
 800de80:	ab06      	add	r3, sp, #24
 800de82:	3d18      	subs	r5, #24
 800de84:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d0f8      	beq.n	800de7e <__kernel_rem_pio2+0x1de>
 800de8c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800de90:	4628      	mov	r0, r5
 800de92:	f000 fa8d 	bl	800e3b0 <scalbn>
 800de96:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800df90 <__kernel_rem_pio2+0x2f0>
 800de9a:	1c62      	adds	r2, r4, #1
 800de9c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800de9e:	00d3      	lsls	r3, r2, #3
 800dea0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dea4:	4622      	mov	r2, r4
 800dea6:	2a00      	cmp	r2, #0
 800dea8:	f280 80a8 	bge.w	800dffc <__kernel_rem_pio2+0x35c>
 800deac:	4622      	mov	r2, r4
 800deae:	2a00      	cmp	r2, #0
 800deb0:	f2c0 80c6 	blt.w	800e040 <__kernel_rem_pio2+0x3a0>
 800deb4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800deb6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800deba:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800df88 <__kernel_rem_pio2+0x2e8>
 800debe:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800dfa4 <__kernel_rem_pio2+0x304>
 800dec2:	2000      	movs	r0, #0
 800dec4:	1aa1      	subs	r1, r4, r2
 800dec6:	e0b0      	b.n	800e02a <__kernel_rem_pio2+0x38a>
 800dec8:	2602      	movs	r6, #2
 800deca:	e78f      	b.n	800ddec <__kernel_rem_pio2+0x14c>
 800decc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ded0:	b948      	cbnz	r0, 800dee6 <__kernel_rem_pio2+0x246>
 800ded2:	b122      	cbz	r2, 800dede <__kernel_rem_pio2+0x23e>
 800ded4:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800ded8:	f843 2c04 	str.w	r2, [r3, #-4]
 800dedc:	2201      	movs	r2, #1
 800dede:	f10c 0c01 	add.w	ip, ip, #1
 800dee2:	4610      	mov	r0, r2
 800dee4:	e789      	b.n	800ddfa <__kernel_rem_pio2+0x15a>
 800dee6:	ebae 0202 	sub.w	r2, lr, r2
 800deea:	e7f5      	b.n	800ded8 <__kernel_rem_pio2+0x238>
 800deec:	1e62      	subs	r2, r4, #1
 800deee:	ab06      	add	r3, sp, #24
 800def0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800def4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800def8:	a906      	add	r1, sp, #24
 800defa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800defe:	e784      	b.n	800de0a <__kernel_rem_pio2+0x16a>
 800df00:	1e62      	subs	r2, r4, #1
 800df02:	ab06      	add	r3, sp, #24
 800df04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800df0c:	e7f4      	b.n	800def8 <__kernel_rem_pio2+0x258>
 800df0e:	ab06      	add	r3, sp, #24
 800df10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df14:	3a01      	subs	r2, #1
 800df16:	4318      	orrs	r0, r3
 800df18:	e7ad      	b.n	800de76 <__kernel_rem_pio2+0x1d6>
 800df1a:	3301      	adds	r3, #1
 800df1c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800df20:	2800      	cmp	r0, #0
 800df22:	d0fa      	beq.n	800df1a <__kernel_rem_pio2+0x27a>
 800df24:	9a04      	ldr	r2, [sp, #16]
 800df26:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800df2a:	446a      	add	r2, sp
 800df2c:	eb04 000b 	add.w	r0, r4, fp
 800df30:	a91a      	add	r1, sp, #104	@ 0x68
 800df32:	1c66      	adds	r6, r4, #1
 800df34:	3a98      	subs	r2, #152	@ 0x98
 800df36:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800df3a:	4423      	add	r3, r4
 800df3c:	42b3      	cmp	r3, r6
 800df3e:	da04      	bge.n	800df4a <__kernel_rem_pio2+0x2aa>
 800df40:	461c      	mov	r4, r3
 800df42:	e713      	b.n	800dd6c <__kernel_rem_pio2+0xcc>
 800df44:	9a03      	ldr	r2, [sp, #12]
 800df46:	2301      	movs	r3, #1
 800df48:	e7e8      	b.n	800df1c <__kernel_rem_pio2+0x27c>
 800df4a:	9902      	ldr	r1, [sp, #8]
 800df4c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800df50:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800df54:	9104      	str	r1, [sp, #16]
 800df56:	ee07 1a90 	vmov	s15, r1
 800df5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800df5e:	2400      	movs	r4, #0
 800df60:	eca0 7b02 	vstmia	r0!, {d7}
 800df64:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800df88 <__kernel_rem_pio2+0x2e8>
 800df68:	4686      	mov	lr, r0
 800df6a:	4554      	cmp	r4, sl
 800df6c:	dd03      	ble.n	800df76 <__kernel_rem_pio2+0x2d6>
 800df6e:	eca2 7b02 	vstmia	r2!, {d7}
 800df72:	3601      	adds	r6, #1
 800df74:	e7e2      	b.n	800df3c <__kernel_rem_pio2+0x29c>
 800df76:	ecbc 5b02 	vldmia	ip!, {d5}
 800df7a:	ed3e 6b02 	vldmdb	lr!, {d6}
 800df7e:	3401      	adds	r4, #1
 800df80:	eea5 7b06 	vfma.f64	d7, d5, d6
 800df84:	e7f1      	b.n	800df6a <__kernel_rem_pio2+0x2ca>
 800df86:	bf00      	nop
	...
 800df94:	3e700000 	.word	0x3e700000
 800df98:	00000000 	.word	0x00000000
 800df9c:	41700000 	.word	0x41700000
 800dfa0:	0800e7c0 	.word	0x0800e7c0
 800dfa4:	0800e780 	.word	0x0800e780
 800dfa8:	4268      	negs	r0, r5
 800dfaa:	eeb0 0b48 	vmov.f64	d0, d8
 800dfae:	f000 f9ff 	bl	800e3b0 <scalbn>
 800dfb2:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800e180 <__kernel_rem_pio2+0x4e0>
 800dfb6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800dfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfbe:	db17      	blt.n	800dff0 <__kernel_rem_pio2+0x350>
 800dfc0:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800e188 <__kernel_rem_pio2+0x4e8>
 800dfc4:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dfc8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800dfcc:	aa06      	add	r2, sp, #24
 800dfce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800dfd2:	eea5 0b46 	vfms.f64	d0, d5, d6
 800dfd6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800dfda:	3518      	adds	r5, #24
 800dfdc:	ee10 3a10 	vmov	r3, s0
 800dfe0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dfe4:	ee17 3a10 	vmov	r3, s14
 800dfe8:	3401      	adds	r4, #1
 800dfea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800dfee:	e74d      	b.n	800de8c <__kernel_rem_pio2+0x1ec>
 800dff0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800dff4:	aa06      	add	r2, sp, #24
 800dff6:	ee10 3a10 	vmov	r3, s0
 800dffa:	e7f6      	b.n	800dfea <__kernel_rem_pio2+0x34a>
 800dffc:	a806      	add	r0, sp, #24
 800dffe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e002:	9001      	str	r0, [sp, #4]
 800e004:	ee07 0a90 	vmov	s15, r0
 800e008:	3a01      	subs	r2, #1
 800e00a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e00e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e012:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e016:	ed21 7b02 	vstmdb	r1!, {d7}
 800e01a:	e744      	b.n	800dea6 <__kernel_rem_pio2+0x206>
 800e01c:	ecbc 5b02 	vldmia	ip!, {d5}
 800e020:	ecb5 6b02 	vldmia	r5!, {d6}
 800e024:	3001      	adds	r0, #1
 800e026:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e02a:	4548      	cmp	r0, r9
 800e02c:	dc01      	bgt.n	800e032 <__kernel_rem_pio2+0x392>
 800e02e:	4281      	cmp	r1, r0
 800e030:	daf4      	bge.n	800e01c <__kernel_rem_pio2+0x37c>
 800e032:	a842      	add	r0, sp, #264	@ 0x108
 800e034:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e038:	ed81 7b00 	vstr	d7, [r1]
 800e03c:	3a01      	subs	r2, #1
 800e03e:	e736      	b.n	800deae <__kernel_rem_pio2+0x20e>
 800e040:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e042:	2a02      	cmp	r2, #2
 800e044:	dc0a      	bgt.n	800e05c <__kernel_rem_pio2+0x3bc>
 800e046:	2a00      	cmp	r2, #0
 800e048:	dc2d      	bgt.n	800e0a6 <__kernel_rem_pio2+0x406>
 800e04a:	d046      	beq.n	800e0da <__kernel_rem_pio2+0x43a>
 800e04c:	f008 0007 	and.w	r0, r8, #7
 800e050:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800e054:	ecbd 8b06 	vpop	{d8-d10}
 800e058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e05e:	2a03      	cmp	r2, #3
 800e060:	d1f4      	bne.n	800e04c <__kernel_rem_pio2+0x3ac>
 800e062:	a942      	add	r1, sp, #264	@ 0x108
 800e064:	f1a3 0208 	sub.w	r2, r3, #8
 800e068:	440a      	add	r2, r1
 800e06a:	4611      	mov	r1, r2
 800e06c:	4620      	mov	r0, r4
 800e06e:	2800      	cmp	r0, #0
 800e070:	f1a1 0108 	sub.w	r1, r1, #8
 800e074:	dc52      	bgt.n	800e11c <__kernel_rem_pio2+0x47c>
 800e076:	4621      	mov	r1, r4
 800e078:	2901      	cmp	r1, #1
 800e07a:	f1a2 0208 	sub.w	r2, r2, #8
 800e07e:	dc5d      	bgt.n	800e13c <__kernel_rem_pio2+0x49c>
 800e080:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800e190 <__kernel_rem_pio2+0x4f0>
 800e084:	aa42      	add	r2, sp, #264	@ 0x108
 800e086:	4413      	add	r3, r2
 800e088:	2c01      	cmp	r4, #1
 800e08a:	dc67      	bgt.n	800e15c <__kernel_rem_pio2+0x4bc>
 800e08c:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800e090:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800e094:	2e00      	cmp	r6, #0
 800e096:	d167      	bne.n	800e168 <__kernel_rem_pio2+0x4c8>
 800e098:	ed87 5b00 	vstr	d5, [r7]
 800e09c:	ed87 6b02 	vstr	d6, [r7, #8]
 800e0a0:	ed87 7b04 	vstr	d7, [r7, #16]
 800e0a4:	e7d2      	b.n	800e04c <__kernel_rem_pio2+0x3ac>
 800e0a6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800e190 <__kernel_rem_pio2+0x4f0>
 800e0aa:	aa42      	add	r2, sp, #264	@ 0x108
 800e0ac:	4413      	add	r3, r2
 800e0ae:	4622      	mov	r2, r4
 800e0b0:	2a00      	cmp	r2, #0
 800e0b2:	da24      	bge.n	800e0fe <__kernel_rem_pio2+0x45e>
 800e0b4:	b34e      	cbz	r6, 800e10a <__kernel_rem_pio2+0x46a>
 800e0b6:	eeb1 7b46 	vneg.f64	d7, d6
 800e0ba:	ed87 7b00 	vstr	d7, [r7]
 800e0be:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800e0c2:	aa44      	add	r2, sp, #272	@ 0x110
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e0ca:	429c      	cmp	r4, r3
 800e0cc:	da20      	bge.n	800e110 <__kernel_rem_pio2+0x470>
 800e0ce:	b10e      	cbz	r6, 800e0d4 <__kernel_rem_pio2+0x434>
 800e0d0:	eeb1 7b47 	vneg.f64	d7, d7
 800e0d4:	ed87 7b02 	vstr	d7, [r7, #8]
 800e0d8:	e7b8      	b.n	800e04c <__kernel_rem_pio2+0x3ac>
 800e0da:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800e190 <__kernel_rem_pio2+0x4f0>
 800e0de:	aa42      	add	r2, sp, #264	@ 0x108
 800e0e0:	4413      	add	r3, r2
 800e0e2:	2c00      	cmp	r4, #0
 800e0e4:	da05      	bge.n	800e0f2 <__kernel_rem_pio2+0x452>
 800e0e6:	b10e      	cbz	r6, 800e0ec <__kernel_rem_pio2+0x44c>
 800e0e8:	eeb1 7b47 	vneg.f64	d7, d7
 800e0ec:	ed87 7b00 	vstr	d7, [r7]
 800e0f0:	e7ac      	b.n	800e04c <__kernel_rem_pio2+0x3ac>
 800e0f2:	ed33 6b02 	vldmdb	r3!, {d6}
 800e0f6:	3c01      	subs	r4, #1
 800e0f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e0fc:	e7f1      	b.n	800e0e2 <__kernel_rem_pio2+0x442>
 800e0fe:	ed33 7b02 	vldmdb	r3!, {d7}
 800e102:	3a01      	subs	r2, #1
 800e104:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e108:	e7d2      	b.n	800e0b0 <__kernel_rem_pio2+0x410>
 800e10a:	eeb0 7b46 	vmov.f64	d7, d6
 800e10e:	e7d4      	b.n	800e0ba <__kernel_rem_pio2+0x41a>
 800e110:	ecb2 6b02 	vldmia	r2!, {d6}
 800e114:	3301      	adds	r3, #1
 800e116:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e11a:	e7d6      	b.n	800e0ca <__kernel_rem_pio2+0x42a>
 800e11c:	ed91 7b00 	vldr	d7, [r1]
 800e120:	ed91 5b02 	vldr	d5, [r1, #8]
 800e124:	3801      	subs	r0, #1
 800e126:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e12a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e12e:	ed81 6b00 	vstr	d6, [r1]
 800e132:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e136:	ed81 7b02 	vstr	d7, [r1, #8]
 800e13a:	e798      	b.n	800e06e <__kernel_rem_pio2+0x3ce>
 800e13c:	ed92 7b00 	vldr	d7, [r2]
 800e140:	ed92 5b02 	vldr	d5, [r2, #8]
 800e144:	3901      	subs	r1, #1
 800e146:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e14a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e14e:	ed82 6b00 	vstr	d6, [r2]
 800e152:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e156:	ed82 7b02 	vstr	d7, [r2, #8]
 800e15a:	e78d      	b.n	800e078 <__kernel_rem_pio2+0x3d8>
 800e15c:	ed33 6b02 	vldmdb	r3!, {d6}
 800e160:	3c01      	subs	r4, #1
 800e162:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e166:	e78f      	b.n	800e088 <__kernel_rem_pio2+0x3e8>
 800e168:	eeb1 5b45 	vneg.f64	d5, d5
 800e16c:	eeb1 6b46 	vneg.f64	d6, d6
 800e170:	ed87 5b00 	vstr	d5, [r7]
 800e174:	eeb1 7b47 	vneg.f64	d7, d7
 800e178:	ed87 6b02 	vstr	d6, [r7, #8]
 800e17c:	e790      	b.n	800e0a0 <__kernel_rem_pio2+0x400>
 800e17e:	bf00      	nop
 800e180:	00000000 	.word	0x00000000
 800e184:	41700000 	.word	0x41700000
 800e188:	00000000 	.word	0x00000000
 800e18c:	3e700000 	.word	0x3e700000
	...

0800e198 <__ieee754_fmod>:
 800e198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e19c:	ed8d 1b00 	vstr	d1, [sp]
 800e1a0:	e9dd 6500 	ldrd	r6, r5, [sp]
 800e1a4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800e1a8:	ea56 0307 	orrs.w	r3, r6, r7
 800e1ac:	46b6      	mov	lr, r6
 800e1ae:	d00d      	beq.n	800e1cc <__ieee754_fmod+0x34>
 800e1b0:	ee10 ca90 	vmov	ip, s1
 800e1b4:	4b78      	ldr	r3, [pc, #480]	@ (800e398 <__ieee754_fmod+0x200>)
 800e1b6:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800e1ba:	4598      	cmp	r8, r3
 800e1bc:	d806      	bhi.n	800e1cc <__ieee754_fmod+0x34>
 800e1be:	4273      	negs	r3, r6
 800e1c0:	4a76      	ldr	r2, [pc, #472]	@ (800e39c <__ieee754_fmod+0x204>)
 800e1c2:	4333      	orrs	r3, r6
 800e1c4:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d908      	bls.n	800e1de <__ieee754_fmod+0x46>
 800e1cc:	ed9d 7b00 	vldr	d7, [sp]
 800e1d0:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e1d4:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800e1d8:	b003      	add	sp, #12
 800e1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1de:	ee10 9a10 	vmov	r9, s0
 800e1e2:	45b8      	cmp	r8, r7
 800e1e4:	4649      	mov	r1, r9
 800e1e6:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800e1ea:	dc09      	bgt.n	800e200 <__ieee754_fmod+0x68>
 800e1ec:	dbf4      	blt.n	800e1d8 <__ieee754_fmod+0x40>
 800e1ee:	454e      	cmp	r6, r9
 800e1f0:	d8f2      	bhi.n	800e1d8 <__ieee754_fmod+0x40>
 800e1f2:	d105      	bne.n	800e200 <__ieee754_fmod+0x68>
 800e1f4:	4b6a      	ldr	r3, [pc, #424]	@ (800e3a0 <__ieee754_fmod+0x208>)
 800e1f6:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800e1fa:	ed93 0b00 	vldr	d0, [r3]
 800e1fe:	e7eb      	b.n	800e1d8 <__ieee754_fmod+0x40>
 800e200:	4a66      	ldr	r2, [pc, #408]	@ (800e39c <__ieee754_fmod+0x204>)
 800e202:	ea1c 0f02 	tst.w	ip, r2
 800e206:	d14a      	bne.n	800e29e <__ieee754_fmod+0x106>
 800e208:	f1b8 0f00 	cmp.w	r8, #0
 800e20c:	d13f      	bne.n	800e28e <__ieee754_fmod+0xf6>
 800e20e:	4865      	ldr	r0, [pc, #404]	@ (800e3a4 <__ieee754_fmod+0x20c>)
 800e210:	464b      	mov	r3, r9
 800e212:	2b00      	cmp	r3, #0
 800e214:	dc38      	bgt.n	800e288 <__ieee754_fmod+0xf0>
 800e216:	4215      	tst	r5, r2
 800e218:	d150      	bne.n	800e2bc <__ieee754_fmod+0x124>
 800e21a:	2f00      	cmp	r7, #0
 800e21c:	d147      	bne.n	800e2ae <__ieee754_fmod+0x116>
 800e21e:	4a61      	ldr	r2, [pc, #388]	@ (800e3a4 <__ieee754_fmod+0x20c>)
 800e220:	4633      	mov	r3, r6
 800e222:	2b00      	cmp	r3, #0
 800e224:	dc40      	bgt.n	800e2a8 <__ieee754_fmod+0x110>
 800e226:	4b60      	ldr	r3, [pc, #384]	@ (800e3a8 <__ieee754_fmod+0x210>)
 800e228:	4298      	cmp	r0, r3
 800e22a:	db4b      	blt.n	800e2c4 <__ieee754_fmod+0x12c>
 800e22c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800e230:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e234:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800e3a8 <__ieee754_fmod+0x210>
 800e238:	4562      	cmp	r2, ip
 800e23a:	db58      	blt.n	800e2ee <__ieee754_fmod+0x156>
 800e23c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e240:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800e244:	1a80      	subs	r0, r0, r2
 800e246:	1b5e      	subs	r6, r3, r5
 800e248:	eba1 070e 	sub.w	r7, r1, lr
 800e24c:	2800      	cmp	r0, #0
 800e24e:	d164      	bne.n	800e31a <__ieee754_fmod+0x182>
 800e250:	4571      	cmp	r1, lr
 800e252:	bf38      	it	cc
 800e254:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800e258:	2e00      	cmp	r6, #0
 800e25a:	bfa4      	itt	ge
 800e25c:	4639      	movge	r1, r7
 800e25e:	4633      	movge	r3, r6
 800e260:	ea53 0001 	orrs.w	r0, r3, r1
 800e264:	d0c6      	beq.n	800e1f4 <__ieee754_fmod+0x5c>
 800e266:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e26a:	db6b      	blt.n	800e344 <__ieee754_fmod+0x1ac>
 800e26c:	484e      	ldr	r0, [pc, #312]	@ (800e3a8 <__ieee754_fmod+0x210>)
 800e26e:	4282      	cmp	r2, r0
 800e270:	db6e      	blt.n	800e350 <__ieee754_fmod+0x1b8>
 800e272:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e276:	4323      	orrs	r3, r4
 800e278:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800e27c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e280:	460c      	mov	r4, r1
 800e282:	ec45 4b10 	vmov	d0, r4, r5
 800e286:	e7a7      	b.n	800e1d8 <__ieee754_fmod+0x40>
 800e288:	3801      	subs	r0, #1
 800e28a:	005b      	lsls	r3, r3, #1
 800e28c:	e7c1      	b.n	800e212 <__ieee754_fmod+0x7a>
 800e28e:	4846      	ldr	r0, [pc, #280]	@ (800e3a8 <__ieee754_fmod+0x210>)
 800e290:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e294:	2b00      	cmp	r3, #0
 800e296:	ddbe      	ble.n	800e216 <__ieee754_fmod+0x7e>
 800e298:	3801      	subs	r0, #1
 800e29a:	005b      	lsls	r3, r3, #1
 800e29c:	e7fa      	b.n	800e294 <__ieee754_fmod+0xfc>
 800e29e:	ea4f 5028 	mov.w	r0, r8, asr #20
 800e2a2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800e2a6:	e7b6      	b.n	800e216 <__ieee754_fmod+0x7e>
 800e2a8:	3a01      	subs	r2, #1
 800e2aa:	005b      	lsls	r3, r3, #1
 800e2ac:	e7b9      	b.n	800e222 <__ieee754_fmod+0x8a>
 800e2ae:	4a3e      	ldr	r2, [pc, #248]	@ (800e3a8 <__ieee754_fmod+0x210>)
 800e2b0:	02fb      	lsls	r3, r7, #11
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	ddb7      	ble.n	800e226 <__ieee754_fmod+0x8e>
 800e2b6:	3a01      	subs	r2, #1
 800e2b8:	005b      	lsls	r3, r3, #1
 800e2ba:	e7fa      	b.n	800e2b2 <__ieee754_fmod+0x11a>
 800e2bc:	153a      	asrs	r2, r7, #20
 800e2be:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e2c2:	e7b0      	b.n	800e226 <__ieee754_fmod+0x8e>
 800e2c4:	eba3 0c00 	sub.w	ip, r3, r0
 800e2c8:	f1bc 0f1f 	cmp.w	ip, #31
 800e2cc:	dc09      	bgt.n	800e2e2 <__ieee754_fmod+0x14a>
 800e2ce:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800e2d2:	fa08 f10c 	lsl.w	r1, r8, ip
 800e2d6:	fa29 f303 	lsr.w	r3, r9, r3
 800e2da:	430b      	orrs	r3, r1
 800e2dc:	fa09 f10c 	lsl.w	r1, r9, ip
 800e2e0:	e7a8      	b.n	800e234 <__ieee754_fmod+0x9c>
 800e2e2:	4b32      	ldr	r3, [pc, #200]	@ (800e3ac <__ieee754_fmod+0x214>)
 800e2e4:	1a1b      	subs	r3, r3, r0
 800e2e6:	fa09 f303 	lsl.w	r3, r9, r3
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	e7a2      	b.n	800e234 <__ieee754_fmod+0x9c>
 800e2ee:	ebac 0c02 	sub.w	ip, ip, r2
 800e2f2:	f1bc 0f1f 	cmp.w	ip, #31
 800e2f6:	dc09      	bgt.n	800e30c <__ieee754_fmod+0x174>
 800e2f8:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800e2fc:	fa07 f70c 	lsl.w	r7, r7, ip
 800e300:	fa26 f505 	lsr.w	r5, r6, r5
 800e304:	433d      	orrs	r5, r7
 800e306:	fa06 fe0c 	lsl.w	lr, r6, ip
 800e30a:	e79b      	b.n	800e244 <__ieee754_fmod+0xac>
 800e30c:	4d27      	ldr	r5, [pc, #156]	@ (800e3ac <__ieee754_fmod+0x214>)
 800e30e:	1aad      	subs	r5, r5, r2
 800e310:	fa06 f505 	lsl.w	r5, r6, r5
 800e314:	f04f 0e00 	mov.w	lr, #0
 800e318:	e794      	b.n	800e244 <__ieee754_fmod+0xac>
 800e31a:	4571      	cmp	r1, lr
 800e31c:	bf38      	it	cc
 800e31e:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800e322:	2e00      	cmp	r6, #0
 800e324:	da05      	bge.n	800e332 <__ieee754_fmod+0x19a>
 800e326:	0fce      	lsrs	r6, r1, #31
 800e328:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800e32c:	0049      	lsls	r1, r1, #1
 800e32e:	3801      	subs	r0, #1
 800e330:	e789      	b.n	800e246 <__ieee754_fmod+0xae>
 800e332:	ea56 0307 	orrs.w	r3, r6, r7
 800e336:	f43f af5d 	beq.w	800e1f4 <__ieee754_fmod+0x5c>
 800e33a:	0ffb      	lsrs	r3, r7, #31
 800e33c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800e340:	0079      	lsls	r1, r7, #1
 800e342:	e7f4      	b.n	800e32e <__ieee754_fmod+0x196>
 800e344:	0fc8      	lsrs	r0, r1, #31
 800e346:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e34a:	0049      	lsls	r1, r1, #1
 800e34c:	3a01      	subs	r2, #1
 800e34e:	e78a      	b.n	800e266 <__ieee754_fmod+0xce>
 800e350:	1a80      	subs	r0, r0, r2
 800e352:	2814      	cmp	r0, #20
 800e354:	dc0c      	bgt.n	800e370 <__ieee754_fmod+0x1d8>
 800e356:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800e35a:	fa03 f202 	lsl.w	r2, r3, r2
 800e35e:	40c1      	lsrs	r1, r0
 800e360:	430a      	orrs	r2, r1
 800e362:	4103      	asrs	r3, r0
 800e364:	ea43 0104 	orr.w	r1, r3, r4
 800e368:	4610      	mov	r0, r2
 800e36a:	ec41 0b10 	vmov	d0, r0, r1
 800e36e:	e733      	b.n	800e1d8 <__ieee754_fmod+0x40>
 800e370:	281f      	cmp	r0, #31
 800e372:	dc07      	bgt.n	800e384 <__ieee754_fmod+0x1ec>
 800e374:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800e378:	40c1      	lsrs	r1, r0
 800e37a:	fa03 f202 	lsl.w	r2, r3, r2
 800e37e:	430a      	orrs	r2, r1
 800e380:	4623      	mov	r3, r4
 800e382:	e7ef      	b.n	800e364 <__ieee754_fmod+0x1cc>
 800e384:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800e388:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800e38c:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800e390:	32e2      	adds	r2, #226	@ 0xe2
 800e392:	fa43 f202 	asr.w	r2, r3, r2
 800e396:	e7f3      	b.n	800e380 <__ieee754_fmod+0x1e8>
 800e398:	7fefffff 	.word	0x7fefffff
 800e39c:	7ff00000 	.word	0x7ff00000
 800e3a0:	0800e7d0 	.word	0x0800e7d0
 800e3a4:	fffffbed 	.word	0xfffffbed
 800e3a8:	fffffc02 	.word	0xfffffc02
 800e3ac:	fffffbe2 	.word	0xfffffbe2

0800e3b0 <scalbn>:
 800e3b0:	ee10 1a90 	vmov	r1, s1
 800e3b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e3b8:	b98b      	cbnz	r3, 800e3de <scalbn+0x2e>
 800e3ba:	ee10 3a10 	vmov	r3, s0
 800e3be:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e3c2:	4319      	orrs	r1, r3
 800e3c4:	d00a      	beq.n	800e3dc <scalbn+0x2c>
 800e3c6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e478 <scalbn+0xc8>
 800e3ca:	4b37      	ldr	r3, [pc, #220]	@ (800e4a8 <scalbn+0xf8>)
 800e3cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e3d0:	4298      	cmp	r0, r3
 800e3d2:	da0b      	bge.n	800e3ec <scalbn+0x3c>
 800e3d4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e480 <scalbn+0xd0>
 800e3d8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e3dc:	4770      	bx	lr
 800e3de:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d107      	bne.n	800e3f6 <scalbn+0x46>
 800e3e6:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e3ea:	4770      	bx	lr
 800e3ec:	ee10 1a90 	vmov	r1, s1
 800e3f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e3f4:	3b36      	subs	r3, #54	@ 0x36
 800e3f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e3fa:	4290      	cmp	r0, r2
 800e3fc:	dd0d      	ble.n	800e41a <scalbn+0x6a>
 800e3fe:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e488 <scalbn+0xd8>
 800e402:	ee10 3a90 	vmov	r3, s1
 800e406:	eeb0 6b47 	vmov.f64	d6, d7
 800e40a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800e490 <scalbn+0xe0>
 800e40e:	2b00      	cmp	r3, #0
 800e410:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e414:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e418:	4770      	bx	lr
 800e41a:	4418      	add	r0, r3
 800e41c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800e420:	4298      	cmp	r0, r3
 800e422:	dcec      	bgt.n	800e3fe <scalbn+0x4e>
 800e424:	2800      	cmp	r0, #0
 800e426:	dd0a      	ble.n	800e43e <scalbn+0x8e>
 800e428:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800e42c:	ec53 2b10 	vmov	r2, r3, d0
 800e430:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800e434:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e438:	ec43 2b10 	vmov	d0, r2, r3
 800e43c:	4770      	bx	lr
 800e43e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800e442:	da09      	bge.n	800e458 <scalbn+0xa8>
 800e444:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800e480 <scalbn+0xd0>
 800e448:	ee10 3a90 	vmov	r3, s1
 800e44c:	eeb0 6b47 	vmov.f64	d6, d7
 800e450:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800e498 <scalbn+0xe8>
 800e454:	2b00      	cmp	r3, #0
 800e456:	e7db      	b.n	800e410 <scalbn+0x60>
 800e458:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800e45c:	ec53 2b10 	vmov	r2, r3, d0
 800e460:	3036      	adds	r0, #54	@ 0x36
 800e462:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800e466:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e46a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e4a0 <scalbn+0xf0>
 800e46e:	ec43 2b10 	vmov	d0, r2, r3
 800e472:	e7b1      	b.n	800e3d8 <scalbn+0x28>
 800e474:	f3af 8000 	nop.w
 800e478:	00000000 	.word	0x00000000
 800e47c:	43500000 	.word	0x43500000
 800e480:	c2f8f359 	.word	0xc2f8f359
 800e484:	01a56e1f 	.word	0x01a56e1f
 800e488:	8800759c 	.word	0x8800759c
 800e48c:	7e37e43c 	.word	0x7e37e43c
 800e490:	8800759c 	.word	0x8800759c
 800e494:	fe37e43c 	.word	0xfe37e43c
 800e498:	c2f8f359 	.word	0xc2f8f359
 800e49c:	81a56e1f 	.word	0x81a56e1f
 800e4a0:	00000000 	.word	0x00000000
 800e4a4:	3c900000 	.word	0x3c900000
 800e4a8:	ffff3cb0 	.word	0xffff3cb0
 800e4ac:	00000000 	.word	0x00000000

0800e4b0 <floor>:
 800e4b0:	ee10 3a90 	vmov	r3, s1
 800e4b4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800e4b8:	ee10 2a10 	vmov	r2, s0
 800e4bc:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800e4c0:	2913      	cmp	r1, #19
 800e4c2:	b530      	push	{r4, r5, lr}
 800e4c4:	4615      	mov	r5, r2
 800e4c6:	dc33      	bgt.n	800e530 <floor+0x80>
 800e4c8:	2900      	cmp	r1, #0
 800e4ca:	da18      	bge.n	800e4fe <floor+0x4e>
 800e4cc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800e590 <floor+0xe0>
 800e4d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e4d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4dc:	dd0a      	ble.n	800e4f4 <floor+0x44>
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	da50      	bge.n	800e584 <floor+0xd4>
 800e4e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4e6:	4313      	orrs	r3, r2
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	4b2a      	ldr	r3, [pc, #168]	@ (800e598 <floor+0xe8>)
 800e4ee:	bf08      	it	eq
 800e4f0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	ec41 0b10 	vmov	d0, r0, r1
 800e4fc:	e01f      	b.n	800e53e <floor+0x8e>
 800e4fe:	4827      	ldr	r0, [pc, #156]	@ (800e59c <floor+0xec>)
 800e500:	4108      	asrs	r0, r1
 800e502:	ea03 0400 	and.w	r4, r3, r0
 800e506:	4314      	orrs	r4, r2
 800e508:	d019      	beq.n	800e53e <floor+0x8e>
 800e50a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e590 <floor+0xe0>
 800e50e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e512:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e51a:	ddeb      	ble.n	800e4f4 <floor+0x44>
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	bfbe      	ittt	lt
 800e520:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800e524:	410a      	asrlt	r2, r1
 800e526:	189b      	addlt	r3, r3, r2
 800e528:	ea23 0300 	bic.w	r3, r3, r0
 800e52c:	2200      	movs	r2, #0
 800e52e:	e7e1      	b.n	800e4f4 <floor+0x44>
 800e530:	2933      	cmp	r1, #51	@ 0x33
 800e532:	dd05      	ble.n	800e540 <floor+0x90>
 800e534:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e538:	d101      	bne.n	800e53e <floor+0x8e>
 800e53a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e53e:	bd30      	pop	{r4, r5, pc}
 800e540:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800e544:	f04f 30ff 	mov.w	r0, #4294967295
 800e548:	40e0      	lsrs	r0, r4
 800e54a:	4210      	tst	r0, r2
 800e54c:	d0f7      	beq.n	800e53e <floor+0x8e>
 800e54e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e590 <floor+0xe0>
 800e552:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e556:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e55e:	ddc9      	ble.n	800e4f4 <floor+0x44>
 800e560:	2b00      	cmp	r3, #0
 800e562:	da02      	bge.n	800e56a <floor+0xba>
 800e564:	2914      	cmp	r1, #20
 800e566:	d103      	bne.n	800e570 <floor+0xc0>
 800e568:	3301      	adds	r3, #1
 800e56a:	ea22 0200 	bic.w	r2, r2, r0
 800e56e:	e7c1      	b.n	800e4f4 <floor+0x44>
 800e570:	2401      	movs	r4, #1
 800e572:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800e576:	fa04 f101 	lsl.w	r1, r4, r1
 800e57a:	440a      	add	r2, r1
 800e57c:	42aa      	cmp	r2, r5
 800e57e:	bf38      	it	cc
 800e580:	191b      	addcc	r3, r3, r4
 800e582:	e7f2      	b.n	800e56a <floor+0xba>
 800e584:	2200      	movs	r2, #0
 800e586:	4613      	mov	r3, r2
 800e588:	e7b4      	b.n	800e4f4 <floor+0x44>
 800e58a:	bf00      	nop
 800e58c:	f3af 8000 	nop.w
 800e590:	8800759c 	.word	0x8800759c
 800e594:	7e37e43c 	.word	0x7e37e43c
 800e598:	bff00000 	.word	0xbff00000
 800e59c:	000fffff 	.word	0x000fffff

0800e5a0 <_init>:
 800e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a2:	bf00      	nop
 800e5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5a6:	bc08      	pop	{r3}
 800e5a8:	469e      	mov	lr, r3
 800e5aa:	4770      	bx	lr

0800e5ac <_fini>:
 800e5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ae:	bf00      	nop
 800e5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e5b2:	bc08      	pop	{r3}
 800e5b4:	469e      	mov	lr, r3
 800e5b6:	4770      	bx	lr
