
WRAP_RX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3d4  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b680  0800b680  0000c680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b6c0  0800b6c0  0000c6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b6c8  0800b6c8  0000c6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b6cc  0800b6cc  0000c6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800b6d0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002fc  24000010  0800b6e0  0000d010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400030c  0800b6e0  0000d30c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015d64  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000282a  00000000  00000000  00022da2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fd0  00000000  00000000  000255d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c31  00000000  00000000  000265a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003121f  00000000  00000000  000271d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001597a  00000000  00000000  000583f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001471a6  00000000  00000000  0006dd6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b4f10  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004300  00000000  00000000  001b4f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001b9254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b668 	.word	0x0800b668

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800b668 	.word	0x0800b668

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e0:	f000 fae2 	bl	8000ba8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fd62 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f82a 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fa36 	bl	8000a5c <MX_GPIO_Init>
  MX_DMA_Init();
 80005f0:	f000 fa14 	bl	8000a1c <MX_DMA_Init>
  MX_ADC1_Init();
 80005f4:	f000 f8e6 	bl	80007c4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f8:	f000 f964 	bl	80008c4 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f9c2 	bl	8000984 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
	HAL_ADC_Start(&hadc2);
 8000600:	480a      	ldr	r0, [pc, #40]	@ (800062c <main+0x50>)
 8000602:	f001 f941 	bl	8001888 <HAL_ADC_Start>

	// Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
	HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)adcbuf,ADC_BUF_SIZE);
 8000606:	2240      	movs	r2, #64	@ 0x40
 8000608:	4909      	ldr	r1, [pc, #36]	@ (8000630 <main+0x54>)
 800060a:	480a      	ldr	r0, [pc, #40]	@ (8000634 <main+0x58>)
 800060c:	f002 f928 	bl	8002860 <HAL_ADCEx_MultiModeStart_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  adc1value = (adcbuf[0]&0x0000FFFF);
 8000610:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <main+0x54>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <main+0x5c>)
 8000618:	801a      	strh	r2, [r3, #0]
	  adc2value = (adcbuf[0] >> 16);
 800061a:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <main+0x54>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	0c1b      	lsrs	r3, r3, #16
 8000620:	b29a      	uxth	r2, r3
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <main+0x60>)
 8000624:	801a      	strh	r2, [r3, #0]
	  adc1value = (adcbuf[0]&0x0000FFFF);
 8000626:	bf00      	nop
 8000628:	e7f2      	b.n	8000610 <main+0x34>
 800062a:	bf00      	nop
 800062c:	24000090 	.word	0x24000090
 8000630:	24000200 	.word	0x24000200
 8000634:	2400002c 	.word	0x2400002c
 8000638:	24000300 	.word	0x24000300
 800063c:	24000302 	.word	0x24000302

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0a4      	sub	sp, #144	@ 0x90
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800064a:	224c      	movs	r2, #76	@ 0x4c
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f00a ffde 	bl	800b610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000658:	2220      	movs	r2, #32
 800065a:	2100      	movs	r1, #0
 800065c:	4618      	mov	r0, r3
 800065e:	f00a ffd7 	bl	800b610 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000662:	f107 030c 	add.w	r3, r7, #12
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]
 8000672:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000674:	4b51      	ldr	r3, [pc, #324]	@ (80007bc <SystemClock_Config+0x17c>)
 8000676:	f04f 32ff 	mov.w	r2, #4294967295
 800067a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800067e:	2004      	movs	r0, #4
 8000680:	f005 fccc 	bl	800601c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b4d      	ldr	r3, [pc, #308]	@ (80007c0 <SystemClock_Config+0x180>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a4c      	ldr	r2, [pc, #304]	@ (80007c0 <SystemClock_Config+0x180>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b4a      	ldr	r3, [pc, #296]	@ (80007c0 <SystemClock_Config+0x180>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a0:	bf00      	nop
 80006a2:	4b47      	ldr	r3, [pc, #284]	@ (80007c0 <SystemClock_Config+0x180>)
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ae:	d1f8      	bne.n	80006a2 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b0:	f005 fca4 	bl	8005ffc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b4:	4b41      	ldr	r3, [pc, #260]	@ (80007bc <SystemClock_Config+0x17c>)
 80006b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80006b8:	4a40      	ldr	r2, [pc, #256]	@ (80007bc <SystemClock_Config+0x17c>)
 80006ba:	f023 0318 	bic.w	r3, r3, #24
 80006be:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006c0:	2327      	movs	r3, #39	@ 0x27
 80006c2:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006de:	2302      	movs	r3, #2
 80006e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80006e6:	2346      	movs	r3, #70	@ 0x46
 80006e8:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ee:	2304      	movs	r3, #4
 80006f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f8:	230c      	movs	r3, #12
 80006fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006fe:	2300      	movs	r3, #0
 8000700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800070e:	4618      	mov	r0, r3
 8000710:	f005 fcde 	bl	80060d0 <HAL_RCC_OscConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800071a:	f000 fa71 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	233f      	movs	r3, #63	@ 0x3f
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2303      	movs	r3, #3
 8000724:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800072e:	2340      	movs	r3, #64	@ 0x40
 8000730:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000732:	2340      	movs	r3, #64	@ 0x40
 8000734:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000736:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800073c:	2340      	movs	r3, #64	@ 0x40
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000744:	2106      	movs	r1, #6
 8000746:	4618      	mov	r0, r3
 8000748:	f006 f8f4 	bl	8006934 <HAL_RCC_ClockConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000752:	f000 fa55 	bl	8000c00 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000756:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f006 fa9f 	bl	8006ca0 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000762:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000766:	2100      	movs	r1, #0
 8000768:	2001      	movs	r0, #1
 800076a:	f006 fa99 	bl	8006ca0 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <SystemClock_Config+0x17c>)
 8000770:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000774:	4a11      	ldr	r2, [pc, #68]	@ (80007bc <SystemClock_Config+0x17c>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <SystemClock_Config+0x17c>)
 8000780:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000790:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000794:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800079a:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80007a0:	2322      	movs	r3, #34	@ 0x22
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80007a4:	2320      	movs	r3, #32
 80007a6:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4618      	mov	r0, r3
 80007ae:	f008 ff5d 	bl	800966c <HAL_RCCEx_CRSConfig>
}
 80007b2:	bf00      	nop
 80007b4:	3790      	adds	r7, #144	@ 0x90
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	58024400 	.word	0x58024400
 80007c0:	58024800 	.word	0x58024800

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	@ 0x28
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
 80007e4:	615a      	str	r2, [r3, #20]
 80007e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e8:	4b33      	ldr	r3, [pc, #204]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 80007ea:	4a34      	ldr	r2, [pc, #208]	@ (80008bc <MX_ADC1_Init+0xf8>)
 80007ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ee:	4b32      	ldr	r3, [pc, #200]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 80007f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007f6:	4b30      	ldr	r3, [pc, #192]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fc:	4b2e      	ldr	r3, [pc, #184]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000802:	4b2d      	ldr	r3, [pc, #180]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 8000804:	2204      	movs	r2, #4
 8000806:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000808:	4b2b      	ldr	r3, [pc, #172]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 800080a:	2200      	movs	r2, #0
 800080c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800080e:	4b2a      	ldr	r3, [pc, #168]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 8000810:	2201      	movs	r2, #1
 8000812:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000814:	4b28      	ldr	r3, [pc, #160]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 8000816:	2201      	movs	r2, #1
 8000818:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800081a:	4b27      	ldr	r3, [pc, #156]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 800081c:	2200      	movs	r2, #0
 800081e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000820:	4b25      	ldr	r3, [pc, #148]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 8000828:	2200      	movs	r2, #0
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800082c:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 800082e:	2203      	movs	r2, #3
 8000830:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000832:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 8000834:	2200      	movs	r2, #0
 8000836:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000838:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 800083a:	2200      	movs	r2, #0
 800083c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800083e:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000846:	481c      	ldr	r0, [pc, #112]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 8000848:	f000 fec4 	bl	80015d4 <HAL_ADC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000852:	f000 f9d5 	bl	8000c00 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000856:	2307      	movs	r3, #7
 8000858:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 800085a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800085e:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 8000860:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4812      	ldr	r0, [pc, #72]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 800086e:	f002 f8f9 	bl	8002a64 <HAL_ADCEx_MultiModeConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8000878:	f000 f9c2 	bl	8000c00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800087c:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_ADC1_Init+0xfc>)
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000880:	2306      	movs	r3, #6
 8000882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000888:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800088c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800088e:	2304      	movs	r3, #4
 8000890:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	@ (80008b8 <MX_ADC1_Init+0xf4>)
 80008a0:	f001 fada 	bl	8001e58 <HAL_ADC_ConfigChannel>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80008aa:	f000 f9a9 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	@ 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2400002c 	.word	0x2400002c
 80008bc:	40022000 	.word	0x40022000
 80008c0:	0c900008 	.word	0x0c900008

080008c4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
 80008d8:	615a      	str	r2, [r3, #20]
 80008da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008dc:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <MX_ADC2_Init+0xb4>)
 80008de:	4a27      	ldr	r2, [pc, #156]	@ (800097c <MX_ADC2_Init+0xb8>)
 80008e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008e2:	4b25      	ldr	r3, [pc, #148]	@ (8000978 <MX_ADC2_Init+0xb4>)
 80008e4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008e8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008ea:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <MX_ADC2_Init+0xb4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008f0:	4b21      	ldr	r3, [pc, #132]	@ (8000978 <MX_ADC2_Init+0xb4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008f6:	4b20      	ldr	r3, [pc, #128]	@ (8000978 <MX_ADC2_Init+0xb4>)
 80008f8:	2204      	movs	r2, #4
 80008fa:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <MX_ADC2_Init+0xb4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_ADC2_Init+0xb4>)
 8000904:	2201      	movs	r2, #1
 8000906:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_ADC2_Init+0xb4>)
 800090a:	2201      	movs	r2, #1
 800090c:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_ADC2_Init+0xb4>)
 8000910:	2200      	movs	r2, #0
 8000912:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_ADC2_Init+0xb4>)
 8000916:	2200      	movs	r2, #0
 8000918:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_ADC2_Init+0xb4>)
 800091c:	2200      	movs	r2, #0
 800091e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_ADC2_Init+0xb4>)
 8000922:	2200      	movs	r2, #0
 8000924:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_ADC2_Init+0xb4>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800092e:	4812      	ldr	r0, [pc, #72]	@ (8000978 <MX_ADC2_Init+0xb4>)
 8000930:	f000 fe50 	bl	80015d4 <HAL_ADC_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 800093a:	f000 f961 	bl	8000c00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_ADC2_Init+0xbc>)
 8000940:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000942:	2306      	movs	r3, #6
 8000944:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800094a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800094e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000950:	2304      	movs	r3, #4
 8000952:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_ADC2_Init+0xb4>)
 8000962:	f001 fa79 	bl	8001e58 <HAL_ADC_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800096c:	f000 f948 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000090 	.word	0x24000090
 800097c:	40022100 	.word	0x40022100
 8000980:	0c900008 	.word	0x0c900008

08000984 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000988:	4b22      	ldr	r3, [pc, #136]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 800098a:	4a23      	ldr	r2, [pc, #140]	@ (8000a18 <MX_USART3_UART_Init+0x94>)
 800098c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098e:	4b21      	ldr	r3, [pc, #132]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b1f      	ldr	r3, [pc, #124]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009cc:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009ce:	f009 f807 	bl	80099e0 <HAL_UART_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d8:	f000 f912 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009e0:	f00a fd4c 	bl	800b47c <HAL_UARTEx_SetTxFifoThreshold>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009ea:	f000 f909 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4808      	ldr	r0, [pc, #32]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 80009f2:	f00a fd81 	bl	800b4f8 <HAL_UARTEx_SetRxFifoThreshold>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009fc:	f000 f900 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a00:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_USART3_UART_Init+0x90>)
 8000a02:	f00a fd02 	bl	800b40a <HAL_UARTEx_DisableFifoMode>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a0c:	f000 f8f8 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2400016c 	.word	0x2400016c
 8000a18:	40004800 	.word	0x40004800

08000a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a22:	4b0d      	ldr	r3, [pc, #52]	@ (8000a58 <MX_DMA_Init+0x3c>)
 8000a24:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a28:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <MX_DMA_Init+0x3c>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <MX_DMA_Init+0x3c>)
 8000a34:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	200b      	movs	r0, #11
 8000a46:	f002 f984 	bl	8002d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a4a:	200b      	movs	r0, #11
 8000a4c:	f002 f99b 	bl	8002d86 <HAL_NVIC_EnableIRQ>

}
 8000a50:	bf00      	nop
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	58024400 	.word	0x58024400

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b3a      	ldr	r3, [pc, #232]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000a74:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a78:	4a38      	ldr	r2, [pc, #224]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a82:	4b36      	ldr	r3, [pc, #216]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000a84:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a90:	4b32      	ldr	r3, [pc, #200]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000a92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a96:	4a31      	ldr	r2, [pc, #196]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a9c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000aa2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000ab0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ab4:	4a29      	ldr	r2, [pc, #164]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000ab6:	f043 0301 	orr.w	r3, r3, #1
 8000aba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000abe:	4b27      	ldr	r3, [pc, #156]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000ac0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000acc:	4b23      	ldr	r3, [pc, #140]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000ace:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ad2:	4a22      	ldr	r2, [pc, #136]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_GPIO_Init+0x100>)
 8000ade:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ae2:	f003 0308 	and.w	r3, r3, #8
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	4816      	ldr	r0, [pc, #88]	@ (8000b60 <MX_GPIO_Init+0x104>)
 8000b08:	f005 f8ae 	bl	8005c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	480e      	ldr	r0, [pc, #56]	@ (8000b64 <MX_GPIO_Init+0x108>)
 8000b2a:	f005 f89d 	bl	8005c68 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */

  // For some reason STM32 didn't autogenerate this for me?

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2120      	movs	r1, #32
 8000b32:	480c      	ldr	r0, [pc, #48]	@ (8000b64 <MX_GPIO_Init+0x108>)
 8000b34:	f005 fa48 	bl	8005fc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b38:	2320      	movs	r3, #32
 8000b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_GPIO_Init+0x108>)
 8000b50:	f005 f88a 	bl	8005c68 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	@ 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000

08000b68 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
//  // copies ADC/DMA temp buffer into sample buffer
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	2120      	movs	r1, #32
 8000b74:	4803      	ldr	r0, [pc, #12]	@ (8000b84 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000b76:	f005 fa27 	bl	8005fc8 <HAL_GPIO_WritePin>
//  for(int j = 0; j < ADC_BUF_SIZE/2; j++)
//  {
//	  samples[i] = adcbuf[j];
//	  i++;
//  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	58020000 	.word	0x58020000

08000b88 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
//
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2120      	movs	r1, #32
 8000b94:	4803      	ldr	r0, [pc, #12]	@ (8000ba4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b96:	f005 fa17 	bl	8005fc8 <HAL_GPIO_WritePin>
//  if(i >= SAMPLE_BUF_MULTIPLE * ADC_BUF_SIZE)
//  {
//	  adcflag = SET;
//	  HAL_ADCEx_MultiModeStop_DMA(hadc);
//  }
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	58020000 	.word	0x58020000

08000ba8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bba:	f002 f8ff 	bl	8002dbc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bca:	231f      	movs	r3, #31
 8000bcc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bce:	2387      	movs	r3, #135	@ 0x87
 8000bd0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bea:	463b      	mov	r3, r7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 f91d 	bl	8002e2c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bf2:	2004      	movs	r0, #4
 8000bf4:	f002 f8fa 	bl	8002dec <HAL_MPU_Enable>

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_MspInit+0x30>)
 8000c14:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c18:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x30>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x30>)
 8000c24:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	58024400 	.word	0x58024400

08000c40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a59      	ldr	r2, [pc, #356]	@ (8000dc4 <HAL_ADC_MspInit+0x184>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d16c      	bne.n	8000d3c <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c62:	4b59      	ldr	r3, [pc, #356]	@ (8000dc8 <HAL_ADC_MspInit+0x188>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a57      	ldr	r2, [pc, #348]	@ (8000dc8 <HAL_ADC_MspInit+0x188>)
 8000c6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c6c:	4b56      	ldr	r3, [pc, #344]	@ (8000dc8 <HAL_ADC_MspInit+0x188>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10e      	bne.n	8000c92 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c74:	4b55      	ldr	r3, [pc, #340]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000c76:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c7a:	4a54      	ldr	r2, [pc, #336]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000c7c:	f043 0320 	orr.w	r3, r3, #32
 8000c80:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000c84:	4b51      	ldr	r3, [pc, #324]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000c86:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000c8a:	f003 0320 	and.w	r3, r3, #32
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b4e      	ldr	r3, [pc, #312]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000c94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c98:	4a4c      	ldr	r2, [pc, #304]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000ca4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb0:	2340      	movs	r3, #64	@ 0x40
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4843      	ldr	r0, [pc, #268]	@ (8000dd0 <HAL_ADC_MspInit+0x190>)
 8000cc4:	f004 ffd0 	bl	8005c68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cc8:	4b42      	ldr	r3, [pc, #264]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000cca:	4a43      	ldr	r2, [pc, #268]	@ (8000dd8 <HAL_ADC_MspInit+0x198>)
 8000ccc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cce:	4b41      	ldr	r3, [pc, #260]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000cd0:	2209      	movs	r2, #9
 8000cd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cda:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce0:	4b3c      	ldr	r3, [pc, #240]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000ce2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ce6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000cea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cf0:	4b38      	ldr	r3, [pc, #224]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000cf2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000cf6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cf8:	4b36      	ldr	r3, [pc, #216]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000cfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cfe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000d00:	4b34      	ldr	r3, [pc, #208]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000d02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d06:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d08:	4b32      	ldr	r3, [pc, #200]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d0e:	4831      	ldr	r0, [pc, #196]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000d10:	f002 f8cc 	bl	8002eac <HAL_DMA_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000d1a:	f7ff ff71 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000d22:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d24:	4a2b      	ldr	r2, [pc, #172]	@ (8000dd4 <HAL_ADC_MspInit+0x194>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2012      	movs	r0, #18
 8000d30:	f002 f80f 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d34:	2012      	movs	r0, #18
 8000d36:	f002 f826 	bl	8002d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d3a:	e03f      	b.n	8000dbc <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a26      	ldr	r2, [pc, #152]	@ (8000ddc <HAL_ADC_MspInit+0x19c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d13a      	bne.n	8000dbc <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d46:	4b20      	ldr	r3, [pc, #128]	@ (8000dc8 <HAL_ADC_MspInit+0x188>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8000dc8 <HAL_ADC_MspInit+0x188>)
 8000d4e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d50:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <HAL_ADC_MspInit+0x188>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d10e      	bne.n	8000d76 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d58:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000d5a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000d6a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d6e:	f003 0320 	and.w	r3, r3, #32
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000d78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d7c:	4a13      	ldr	r2, [pc, #76]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <HAL_ADC_MspInit+0x18c>)
 8000d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d94:	2340      	movs	r3, #64	@ 0x40
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	480a      	ldr	r0, [pc, #40]	@ (8000dd0 <HAL_ADC_MspInit+0x190>)
 8000da8:	f004 ff5e 	bl	8005c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2100      	movs	r1, #0
 8000db0:	2012      	movs	r0, #18
 8000db2:	f001 ffce 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000db6:	2012      	movs	r0, #18
 8000db8:	f001 ffe5 	bl	8002d86 <HAL_NVIC_EnableIRQ>
}
 8000dbc:	bf00      	nop
 8000dbe:	3730      	adds	r7, #48	@ 0x30
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40022000 	.word	0x40022000
 8000dc8:	24000304 	.word	0x24000304
 8000dcc:	58024400 	.word	0x58024400
 8000dd0:	58020000 	.word	0x58020000
 8000dd4:	240000f4 	.word	0x240000f4
 8000dd8:	40020010 	.word	0x40020010
 8000ddc:	40022100 	.word	0x40022100

08000de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b0ba      	sub	sp, #232	@ 0xe8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	22c0      	movs	r2, #192	@ 0xc0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00a fc05 	bl	800b610 <memset>
  if(huart->Instance==USART3)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8000eb8 <HAL_UART_MspInit+0xd8>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d14e      	bne.n	8000eae <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e10:	f04f 0202 	mov.w	r2, #2
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4618      	mov	r0, r3
 8000e28:	f006 f97a 	bl	8007120 <HAL_RCCEx_PeriphCLKConfig>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e32:	f7ff fee5 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e36:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <HAL_UART_MspInit+0xdc>)
 8000e38:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000ebc <HAL_UART_MspInit+0xdc>)
 8000e3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e42:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e46:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_UART_MspInit+0xdc>)
 8000e48:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e54:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <HAL_UART_MspInit+0xdc>)
 8000e56:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e5a:	4a18      	ldr	r2, [pc, #96]	@ (8000ebc <HAL_UART_MspInit+0xdc>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e64:	4b15      	ldr	r3, [pc, #84]	@ (8000ebc <HAL_UART_MspInit+0xdc>)
 8000e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e92:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <HAL_UART_MspInit+0xe0>)
 8000e9a:	f004 fee5 	bl	8005c68 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2027      	movs	r0, #39	@ 0x27
 8000ea4:	f001 ff55 	bl	8002d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ea8:	2027      	movs	r0, #39	@ 0x27
 8000eaa:	f001 ff6c 	bl	8002d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eae:	bf00      	nop
 8000eb0:	37e8      	adds	r7, #232	@ 0xe8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	58024400 	.word	0x58024400
 8000ec0:	58020c00 	.word	0x58020c00

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <MemManage_Handler+0x4>

08000edc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	bf00      	nop
 8000eea:	e7fd      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1a:	f000 f939 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <DMA1_Stream0_IRQHandler+0x10>)
 8000f2a:	f003 fb1b 	bl	8004564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	240000f4 	.word	0x240000f4

08000f38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f3c:	4803      	ldr	r0, [pc, #12]	@ (8000f4c <ADC_IRQHandler+0x14>)
 8000f3e:	f000 fd5d 	bl	80019fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f42:	4803      	ldr	r0, [pc, #12]	@ (8000f50 <ADC_IRQHandler+0x18>)
 8000f44:	f000 fd5a 	bl	80019fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2400002c 	.word	0x2400002c
 8000f50:	24000090 	.word	0x24000090

08000f54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <USART3_IRQHandler+0x10>)
 8000f5a:	f008 fd91 	bl	8009a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2400016c 	.word	0x2400016c

08000f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f6c:	4b32      	ldr	r3, [pc, #200]	@ (8001038 <SystemInit+0xd0>)
 8000f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f72:	4a31      	ldr	r2, [pc, #196]	@ (8001038 <SystemInit+0xd0>)
 8000f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800103c <SystemInit+0xd4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d807      	bhi.n	8000f98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f88:	4b2c      	ldr	r3, [pc, #176]	@ (800103c <SystemInit+0xd4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f023 030f 	bic.w	r3, r3, #15
 8000f90:	4a2a      	ldr	r2, [pc, #168]	@ (800103c <SystemInit+0xd4>)
 8000f92:	f043 0303 	orr.w	r3, r3, #3
 8000f96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f98:	4b29      	ldr	r3, [pc, #164]	@ (8001040 <SystemInit+0xd8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a28      	ldr	r2, [pc, #160]	@ (8001040 <SystemInit+0xd8>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fa4:	4b26      	ldr	r3, [pc, #152]	@ (8001040 <SystemInit+0xd8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000faa:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <SystemInit+0xd8>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4924      	ldr	r1, [pc, #144]	@ (8001040 <SystemInit+0xd8>)
 8000fb0:	4b24      	ldr	r3, [pc, #144]	@ (8001044 <SystemInit+0xdc>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fb6:	4b21      	ldr	r3, [pc, #132]	@ (800103c <SystemInit+0xd4>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 030c 	and.w	r3, r3, #12
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d007      	beq.n	8000fd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800103c <SystemInit+0xd4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f023 030f 	bic.w	r3, r3, #15
 8000fca:	4a1c      	ldr	r2, [pc, #112]	@ (800103c <SystemInit+0xd4>)
 8000fcc:	f043 0303 	orr.w	r3, r3, #3
 8000fd0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001040 <SystemInit+0xd8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <SystemInit+0xd8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000fde:	4b18      	ldr	r3, [pc, #96]	@ (8001040 <SystemInit+0xd8>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <SystemInit+0xd8>)
 8000fe6:	4a18      	ldr	r2, [pc, #96]	@ (8001048 <SystemInit+0xe0>)
 8000fe8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fea:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <SystemInit+0xd8>)
 8000fec:	4a17      	ldr	r2, [pc, #92]	@ (800104c <SystemInit+0xe4>)
 8000fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ff0:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <SystemInit+0xd8>)
 8000ff2:	4a17      	ldr	r2, [pc, #92]	@ (8001050 <SystemInit+0xe8>)
 8000ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ff6:	4b12      	ldr	r3, [pc, #72]	@ (8001040 <SystemInit+0xd8>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ffc:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <SystemInit+0xd8>)
 8000ffe:	4a14      	ldr	r2, [pc, #80]	@ (8001050 <SystemInit+0xe8>)
 8001000:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <SystemInit+0xd8>)
 8001004:	2200      	movs	r2, #0
 8001006:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001008:	4b0d      	ldr	r3, [pc, #52]	@ (8001040 <SystemInit+0xd8>)
 800100a:	4a11      	ldr	r2, [pc, #68]	@ (8001050 <SystemInit+0xe8>)
 800100c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <SystemInit+0xd8>)
 8001010:	2200      	movs	r2, #0
 8001012:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001014:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <SystemInit+0xd8>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <SystemInit+0xd8>)
 800101a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800101e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <SystemInit+0xd8>)
 8001022:	2200      	movs	r2, #0
 8001024:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <SystemInit+0xec>)
 8001028:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800102c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00
 800103c:	52002000 	.word	0x52002000
 8001040:	58024400 	.word	0x58024400
 8001044:	eaf6ed7f 	.word	0xeaf6ed7f
 8001048:	02020200 	.word	0x02020200
 800104c:	01ff0000 	.word	0x01ff0000
 8001050:	01010280 	.word	0x01010280
 8001054:	52004000 	.word	0x52004000

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001090 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800105c:	f7ff ff84 	bl	8000f68 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001060:	480c      	ldr	r0, [pc, #48]	@ (8001094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001062:	490d      	ldr	r1, [pc, #52]	@ (8001098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001064:	4a0d      	ldr	r2, [pc, #52]	@ (800109c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001068:	e002      	b.n	8001070 <LoopCopyDataInit>

0800106a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800106c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106e:	3304      	adds	r3, #4

08001070 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001074:	d3f9      	bcc.n	800106a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001076:	4a0a      	ldr	r2, [pc, #40]	@ (80010a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001078:	4c0a      	ldr	r4, [pc, #40]	@ (80010a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800107c:	e001      	b.n	8001082 <LoopFillZerobss>

0800107e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001080:	3204      	adds	r2, #4

08001082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001084:	d3fb      	bcc.n	800107e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001086:	f00a facb 	bl	800b620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff faa7 	bl	80005dc <main>
  bx  lr
 800108e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001090:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001094:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001098:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800109c:	0800b6d0 	.word	0x0800b6d0
  ldr r2, =_sbss
 80010a0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80010a4:	2400030c 	.word	0x2400030c

080010a8 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <BDMA1_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b2:	2003      	movs	r0, #3
 80010b4:	f001 fe42 	bl	8002d3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010b8:	f005 fe5c 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 80010bc:	4602      	mov	r2, r0
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_Init+0x68>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	4913      	ldr	r1, [pc, #76]	@ (8001118 <HAL_Init+0x6c>)
 80010ca:	5ccb      	ldrb	r3, [r1, r3]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	fa22 f303 	lsr.w	r3, r2, r3
 80010d4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <HAL_Init+0x68>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	4a0e      	ldr	r2, [pc, #56]	@ (8001118 <HAL_Init+0x6c>)
 80010e0:	5cd3      	ldrb	r3, [r2, r3]
 80010e2:	f003 031f 	and.w	r3, r3, #31
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ec:	4a0b      	ldr	r2, [pc, #44]	@ (800111c <HAL_Init+0x70>)
 80010ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001120 <HAL_Init+0x74>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010f6:	200f      	movs	r0, #15
 80010f8:	f000 f814 	bl	8001124 <HAL_InitTick>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e002      	b.n	800110c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001106:	f7ff fd81 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	58024400 	.word	0x58024400
 8001118:	0800b680 	.word	0x0800b680
 800111c:	24000004 	.word	0x24000004
 8001120:	24000000 	.word	0x24000000

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_InitTick+0x60>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d101      	bne.n	8001138 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e021      	b.n	800117c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001138:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <HAL_InitTick+0x64>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_InitTick+0x60>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f001 fe27 	bl	8002da2 <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f001 fdf1 	bl	8002d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	@ (800118c <HAL_InitTick+0x68>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2400000c 	.word	0x2400000c
 8001188:	24000000 	.word	0x24000000
 800118c:	24000008 	.word	0x24000008

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	@ (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	@ (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2400000c 	.word	0x2400000c
 80011b4:	24000308 	.word	0x24000308

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	@ (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	24000308 	.word	0x24000308

080011d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_GetREVID+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0c1b      	lsrs	r3, r3, #16
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	5c001000 	.word	0x5c001000

080011e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	609a      	str	r2, [r3, #8]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001250:	b480      	push	{r7}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3360      	adds	r3, #96	@ 0x60
 8001262:	461a      	mov	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	430b      	orrs	r3, r1
 800127e:	431a      	orrs	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001284:	bf00      	nop
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	431a      	orrs	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	611a      	str	r2, [r3, #16]
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3360      	adds	r3, #96	@ 0x60
 80012d2:	461a      	mov	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	431a      	orrs	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	601a      	str	r2, [r3, #0]
  }
}
 80012ec:	bf00      	nop
 80012ee:	371c      	adds	r7, #28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001308:	2b00      	cmp	r3, #0
 800130a:	d101      	bne.n	8001310 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800131e:	b480      	push	{r7}
 8001320:	b087      	sub	sp, #28
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3330      	adds	r3, #48	@ 0x30
 800132e:	461a      	mov	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	4413      	add	r3, r2
 800133c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f003 031f 	and.w	r3, r3, #31
 8001348:	211f      	movs	r1, #31
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	401a      	ands	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	0e9b      	lsrs	r3, r3, #26
 8001356:	f003 011f 	and.w	r1, r3, #31
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800136a:	bf00      	nop
 800136c:	371c      	adds	r7, #28
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001382:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800139c:	b480      	push	{r7}
 800139e:	b087      	sub	sp, #28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3314      	adds	r3, #20
 80013ac:	461a      	mov	r2, r3
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	0e5b      	lsrs	r3, r3, #25
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	4413      	add	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	0d1b      	lsrs	r3, r3, #20
 80013c4:	f003 031f 	and.w	r3, r3, #31
 80013c8:	2107      	movs	r1, #7
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	401a      	ands	r2, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	0d1b      	lsrs	r3, r3, #20
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	fa01 f303 	lsl.w	r3, r1, r3
 80013e0:	431a      	orrs	r2, r3
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0318 	and.w	r3, r3, #24
 8001416:	4908      	ldr	r1, [pc, #32]	@ (8001438 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001418:	40d9      	lsrs	r1, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	400b      	ands	r3, r1
 800141e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001422:	431a      	orrs	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	000fffff 	.word	0x000fffff

0800143c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 031f 	and.w	r3, r3, #31
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001468:	4618      	mov	r0, r3
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001482:	4013      	ands	r3, r2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6093      	str	r3, [r2, #8]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	5fffffc0 	.word	0x5fffffc0

08001498 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014ac:	d101      	bne.n	80014b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689a      	ldr	r2, [r3, #8]
 80014cc:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	6fffffc0 	.word	0x6fffffc0

080014e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014fc:	d101      	bne.n	8001502 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <LL_ADC_Enable+0x24>)
 800151e:	4013      	ands	r3, r2
 8001520:	f043 0201 	orr.w	r2, r3, #1
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	7fffffc0 	.word	0x7fffffc0

08001538 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b01      	cmp	r3, #1
 800154a:	d101      	bne.n	8001550 <LL_ADC_IsEnabled+0x18>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <LL_ADC_IsEnabled+0x1a>
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <LL_ADC_REG_StartConversion+0x24>)
 800156e:	4013      	ands	r3, r2
 8001570:	f043 0204 	orr.w	r2, r3, #4
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	7fffffc0 	.word	0x7fffffc0

08001588 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b04      	cmp	r3, #4
 800159a:	d101      	bne.n	80015a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d101      	bne.n	80015c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d4:	b590      	push	{r4, r7, lr}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e138      	b.n	8001860 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fb1f 	bl	8000c40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff3f 	bl	8001498 <LL_ADC_IsDeepPowerDownEnabled>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d004      	beq.n	800162a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff25 	bl	8001474 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff5a 	bl	80014e8 <LL_ADC_IsInternalRegulatorEnabled>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d114      	bne.n	8001664 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff3e 	bl	80014c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001644:	4b88      	ldr	r3, [pc, #544]	@ (8001868 <HAL_ADC_Init+0x294>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	4a88      	ldr	r2, [pc, #544]	@ (800186c <HAL_ADC_Init+0x298>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	3301      	adds	r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001656:	e002      	b.n	800165e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3b01      	subs	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f9      	bne.n	8001658 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff3d 	bl	80014e8 <LL_ADC_IsInternalRegulatorEnabled>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10d      	bne.n	8001690 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001678:	f043 0210 	orr.w	r2, r3, #16
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff77 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 800169a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a0:	f003 0310 	and.w	r3, r3, #16
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 80d2 	bne.w	800184e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f040 80ce 	bne.w	800184e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016ba:	f043 0202 	orr.w	r2, r3, #2
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff36 	bl	8001538 <LL_ADC_IsEnabled>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d110      	bne.n	80016f4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016d2:	4867      	ldr	r0, [pc, #412]	@ (8001870 <HAL_ADC_Init+0x29c>)
 80016d4:	f7ff ff30 	bl	8001538 <LL_ADC_IsEnabled>
 80016d8:	4604      	mov	r4, r0
 80016da:	4866      	ldr	r0, [pc, #408]	@ (8001874 <HAL_ADC_Init+0x2a0>)
 80016dc:	f7ff ff2c 	bl	8001538 <LL_ADC_IsEnabled>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4323      	orrs	r3, r4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4619      	mov	r1, r3
 80016ee:	4862      	ldr	r0, [pc, #392]	@ (8001878 <HAL_ADC_Init+0x2a4>)
 80016f0:	f7ff fd7a 	bl	80011e8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7d5b      	ldrb	r3, [r3, #21]
 80016f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016fe:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001704:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	7f1b      	ldrb	r3, [r3, #28]
 800170a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7f1b      	ldrb	r3, [r3, #28]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d106      	bne.n	8001726 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	3b01      	subs	r3, #1
 800171e:	045b      	lsls	r3, r3, #17
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	4b4c      	ldr	r3, [pc, #304]	@ (800187c <HAL_ADC_Init+0x2a8>)
 800174a:	4013      	ands	r3, r2
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	69b9      	ldr	r1, [r7, #24]
 8001752:	430b      	orrs	r3, r1
 8001754:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff14 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001760:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff21 	bl	80015ae <LL_ADC_INJ_IsConversionOngoing>
 800176c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d14a      	bne.n	800180a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d147      	bne.n	800180a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	7d1b      	ldrb	r3, [r3, #20]
 800177e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	4b3c      	ldr	r3, [pc, #240]	@ (8001880 <HAL_ADC_Init+0x2ac>)
 8001790:	4013      	ands	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	69b9      	ldr	r1, [r7, #24]
 8001798:	430b      	orrs	r3, r1
 800179a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d11b      	bne.n	80017de <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017aa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <HAL_ADC_Init+0x2b0>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017ba:	3a01      	subs	r2, #1
 80017bc:	0411      	lsls	r1, r2, #16
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017c2:	4311      	orrs	r1, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017c8:	4311      	orrs	r1, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017ce:	430a      	orrs	r2, r1
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0201 	orr.w	r2, r2, #1
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	e007      	b.n	80017ee <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 ff21 	bl	800264c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10c      	bne.n	800182c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001818:	f023 010f 	bic.w	r1, r3, #15
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	631a      	str	r2, [r3, #48]	@ 0x30
 800182a:	e007      	b.n	800183c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 020f 	bic.w	r2, r2, #15
 800183a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	f023 0303 	bic.w	r3, r3, #3
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	655a      	str	r2, [r3, #84]	@ 0x54
 800184c:	e007      	b.n	800185e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001852:	f043 0210 	orr.w	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800185e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3724      	adds	r7, #36	@ 0x24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}
 8001868:	24000000 	.word	0x24000000
 800186c:	053e2d63 	.word	0x053e2d63
 8001870:	40022000 	.word	0x40022000
 8001874:	40022100 	.word	0x40022100
 8001878:	40022300 	.word	0x40022300
 800187c:	fff0c003 	.word	0xfff0c003
 8001880:	ffffbffc 	.word	0xffffbffc
 8001884:	fc00f81e 	.word	0xfc00f81e

08001888 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001890:	4856      	ldr	r0, [pc, #344]	@ (80019ec <HAL_ADC_Start+0x164>)
 8001892:	f7ff fdd3 	bl	800143c <LL_ADC_GetMultimode>
 8001896:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fe73 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f040 809a 	bne.w	80019de <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_ADC_Start+0x30>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e095      	b.n	80019e4 <HAL_ADC_Start+0x15c>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 fdb3 	bl	800242c <ADC_Enable>
 80018c6:	4603      	mov	r3, r0
 80018c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 8081 	bne.w	80019d4 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80018d6:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <HAL_ADC_Start+0x168>)
 80018d8:	4013      	ands	r3, r2
 80018da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a43      	ldr	r2, [pc, #268]	@ (80019f4 <HAL_ADC_Start+0x16c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d002      	beq.n	80018f2 <HAL_ADC_Start+0x6a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	e000      	b.n	80018f4 <HAL_ADC_Start+0x6c>
 80018f2:	4b41      	ldr	r3, [pc, #260]	@ (80019f8 <HAL_ADC_Start+0x170>)
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d002      	beq.n	8001902 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001906:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001912:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001916:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800191a:	d106      	bne.n	800192a <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001920:	f023 0206 	bic.w	r2, r3, #6
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	659a      	str	r2, [r3, #88]	@ 0x58
 8001928:	e002      	b.n	8001930 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	221c      	movs	r2, #28
 8001936:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a2b      	ldr	r2, [pc, #172]	@ (80019f4 <HAL_ADC_Start+0x16c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d002      	beq.n	8001950 <HAL_ADC_Start+0xc8>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	e000      	b.n	8001952 <HAL_ADC_Start+0xca>
 8001950:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <HAL_ADC_Start+0x170>)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	4293      	cmp	r3, r2
 8001958:	d008      	beq.n	800196c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	2b05      	cmp	r3, #5
 8001964:	d002      	beq.n	800196c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	2b09      	cmp	r3, #9
 800196a:	d114      	bne.n	8001996 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800197e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001982:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fde6 	bl	8001560 <LL_ADC_REG_StartConversion>
 8001994:	e025      	b.n	80019e2 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800199a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a13      	ldr	r2, [pc, #76]	@ (80019f4 <HAL_ADC_Start+0x16c>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d002      	beq.n	80019b2 <HAL_ADC_Start+0x12a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	e000      	b.n	80019b4 <HAL_ADC_Start+0x12c>
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <HAL_ADC_Start+0x170>)
 80019b4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00f      	beq.n	80019e2 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80019d2:	e006      	b.n	80019e2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80019dc:	e001      	b.n	80019e2 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019de:	2302      	movs	r3, #2
 80019e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3718      	adds	r7, #24
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40022300 	.word	0x40022300
 80019f0:	fffff0fe 	.word	0xfffff0fe
 80019f4:	40022100 	.word	0x40022100
 80019f8:	40022000 	.word	0x40022000

080019fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b08a      	sub	sp, #40	@ 0x28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a04:	2300      	movs	r3, #0
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a18:	4882      	ldr	r0, [pc, #520]	@ (8001c24 <HAL_ADC_IRQHandler+0x228>)
 8001a1a:	f7ff fd0f 	bl	800143c <LL_ADC_GetMultimode>
 8001a1e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d017      	beq.n	8001a5a <HAL_ADC_IRQHandler+0x5e>
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d012      	beq.n	8001a5a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a38:	f003 0310 	and.w	r3, r3, #16
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a44:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 ffff 	bl	8002a50 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2202      	movs	r2, #2
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x72>
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10a      	bne.n	8001a84 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8083 	beq.w	8001b80 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d07d      	beq.n	8001b80 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fc29 	bl	80012f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d062      	beq.n	8001b72 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c28 <HAL_ADC_IRQHandler+0x22c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d002      	beq.n	8001abc <HAL_ADC_IRQHandler+0xc0>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	e000      	b.n	8001abe <HAL_ADC_IRQHandler+0xc2>
 8001abc:	4b5b      	ldr	r3, [pc, #364]	@ (8001c2c <HAL_ADC_IRQHandler+0x230>)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6812      	ldr	r2, [r2, #0]
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d008      	beq.n	8001ad8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b05      	cmp	r3, #5
 8001ad0:	d002      	beq.n	8001ad8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d104      	bne.n	8001ae2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	e00c      	b.n	8001afc <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a50      	ldr	r2, [pc, #320]	@ (8001c28 <HAL_ADC_IRQHandler+0x22c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d002      	beq.n	8001af2 <HAL_ADC_IRQHandler+0xf6>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e000      	b.n	8001af4 <HAL_ADC_IRQHandler+0xf8>
 8001af2:	4b4e      	ldr	r3, [pc, #312]	@ (8001c2c <HAL_ADC_IRQHandler+0x230>)
 8001af4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d135      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d12e      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fd35 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d11a      	bne.n	8001b5a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 020c 	bic.w	r2, r2, #12
 8001b32:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d112      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b50:	f043 0201 	orr.w	r2, r3, #1
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b58:	e00b      	b.n	8001b72 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5e:	f043 0210 	orr.w	r2, r3, #16
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff f808 	bl	8000b88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	220c      	movs	r2, #12
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d004      	beq.n	8001b94 <HAL_ADC_IRQHandler+0x198>
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10b      	bne.n	8001bac <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 809f 	beq.w	8001cde <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 8099 	beq.w	8001cde <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bbc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fbd4 	bl	8001376 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001bce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff fb8f 	bl	80012f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001bda:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <HAL_ADC_IRQHandler+0x22c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d002      	beq.n	8001bec <HAL_ADC_IRQHandler+0x1f0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	e000      	b.n	8001bee <HAL_ADC_IRQHandler+0x1f2>
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_ADC_IRQHandler+0x230>)
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d008      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d002      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b07      	cmp	r3, #7
 8001c06:	d104      	bne.n	8001c12 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	623b      	str	r3, [r7, #32]
 8001c10:	e013      	b.n	8001c3a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <HAL_ADC_IRQHandler+0x22c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_ADC_IRQHandler+0x234>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	e007      	b.n	8001c32 <HAL_ADC_IRQHandler+0x236>
 8001c22:	bf00      	nop
 8001c24:	40022300 	.word	0x40022300
 8001c28:	40022100 	.word	0x40022100
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	4b7d      	ldr	r3, [pc, #500]	@ (8001e28 <HAL_ADC_IRQHandler+0x42c>)
 8001c32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d047      	beq.n	8001cd0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_ADC_IRQHandler+0x25e>
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d03f      	beq.n	8001cd0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d13a      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c64:	2b40      	cmp	r3, #64	@ 0x40
 8001c66:	d133      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d12e      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff fc99 	bl	80015ae <LL_ADC_INJ_IsConversionOngoing>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d11a      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d112      	bne.n	8001cd0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cae:	f043 0201 	orr.w	r2, r3, #1
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	655a      	str	r2, [r3, #84]	@ 0x54
 8001cb6:	e00b      	b.n	8001cd0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cbc:	f043 0210 	orr.w	r2, r3, #16
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fe95 	bl	8002a00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2260      	movs	r2, #96	@ 0x60
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d011      	beq.n	8001d0c <HAL_ADC_IRQHandler+0x310>
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d00c      	beq.n	8001d0c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f000 f896 	bl	8001e30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2280      	movs	r2, #128	@ 0x80
 8001d0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d012      	beq.n	8001d3c <HAL_ADC_IRQHandler+0x340>
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00d      	beq.n	8001d3c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fe7b 	bl	8002a28 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d012      	beq.n	8001d6c <HAL_ADC_IRQHandler+0x370>
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00d      	beq.n	8001d6c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 fe6d 	bl	8002a3c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d036      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x3e8>
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d031      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d102      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8c:	e014      	b.n	8001db8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d94:	4825      	ldr	r0, [pc, #148]	@ (8001e2c <HAL_ADC_IRQHandler+0x430>)
 8001d96:	f7ff fb5f 	bl	8001458 <LL_ADC_GetMultiDMATransfer>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001da0:	2301      	movs	r3, #1
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da4:	e008      	b.n	8001db8 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001db4:	2301      	movs	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d10e      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dce:	f043 0202 	orr.w	r2, r3, #2
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f834 	bl	8001e44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2210      	movs	r2, #16
 8001de2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d018      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x424>
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	f043 0208 	orr.w	r2, r3, #8
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e18:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fdfa 	bl	8002a14 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e20:	bf00      	nop
 8001e22:	3728      	adds	r7, #40	@ 0x28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40022300 	.word	0x40022300

08001e30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b0a1      	sub	sp, #132	@ 0x84
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a95      	ldr	r2, [pc, #596]	@ (80020c8 <HAL_ADC_ConfigChannel+0x270>)
 8001e72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x2a>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e2c0      	b.n	8002404 <HAL_ADC_ConfigChannel+0x5ac>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fb7a 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 82a5 	bne.w	80023e6 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db2c      	blt.n	8001efe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d108      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x6a>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	f003 031f 	and.w	r3, r3, #31
 8001eba:	2201      	movs	r2, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	e016      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x98>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ed0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ed2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ed4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001eda:	2320      	movs	r3, #32
 8001edc:	e003      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001ede:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ee0:	fab3 f383 	clz	r3, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2201      	movs	r2, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	69d1      	ldr	r1, [r2, #28]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	430b      	orrs	r3, r1
 8001efc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f7ff fa07 	bl	800131e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fb37 	bl	8001588 <LL_ADC_REG_IsConversionOngoing>
 8001f1a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fb44 	bl	80015ae <LL_ADC_INJ_IsConversionOngoing>
 8001f26:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f040 80a0 	bne.w	8002070 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f040 809c 	bne.w	8002070 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	461a      	mov	r2, r3
 8001f46:	f7ff fa29 	bl	800139c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10b      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x118>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	695a      	ldr	r2, [r3, #20]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	e00a      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x12e>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d027      	beq.n	8001fe0 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6919      	ldr	r1, [r3, #16]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f9e:	f7ff f957 	bl	8001250 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	6919      	ldr	r1, [r3, #16]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	7e5b      	ldrb	r3, [r3, #25]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d102      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x160>
 8001fb2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001fb6:	e000      	b.n	8001fba <HAL_ADC_ConfigChannel+0x162>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f7ff f981 	bl	80012c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6919      	ldr	r1, [r3, #16]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	7e1b      	ldrb	r3, [r3, #24]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d102      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x17e>
 8001fd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001fd4:	e000      	b.n	8001fd8 <HAL_ADC_ConfigChannel+0x180>
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	461a      	mov	r2, r3
 8001fda:	f7ff f959 	bl	8001290 <LL_ADC_SetDataRightShift>
 8001fde:	e047      	b.n	8002070 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fe6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	069b      	lsls	r3, r3, #26
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d107      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002002:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800200a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	069b      	lsls	r3, r3, #26
 8002014:	429a      	cmp	r2, r3
 8002016:	d107      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002026:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800202e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	069b      	lsls	r3, r3, #26
 8002038:	429a      	cmp	r2, r3
 800203a:	d107      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800204a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	069b      	lsls	r3, r3, #26
 800205c:	429a      	cmp	r2, r3
 800205e:	d107      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800206e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fa5f 	bl	8001538 <LL_ADC_IsEnabled>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 81bb 	bne.w	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	461a      	mov	r2, r3
 8002090:	f7ff f9b0 	bl	80013f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	4a0b      	ldr	r2, [pc, #44]	@ (80020c8 <HAL_ADC_ConfigChannel+0x270>)
 800209a:	4293      	cmp	r3, r2
 800209c:	f040 8130 	bne.w	8002300 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10d      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x274>
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0e9b      	lsrs	r3, r3, #26
 80020b6:	3301      	adds	r3, #1
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	2b09      	cmp	r3, #9
 80020be:	bf94      	ite	ls
 80020c0:	2301      	movls	r3, #1
 80020c2:	2300      	movhi	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e01b      	b.n	8002100 <HAL_ADC_ConfigChannel+0x2a8>
 80020c8:	47ff0000 	.word	0x47ff0000
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80020da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80020de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 80020e4:	2320      	movs	r3, #32
 80020e6:	e003      	b.n	80020f0 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 80020e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020ea:	fab3 f383 	clz	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2b09      	cmp	r3, #9
 80020f8:	bf94      	ite	ls
 80020fa:	2301      	movls	r3, #1
 80020fc:	2300      	movhi	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002100:	2b00      	cmp	r3, #0
 8002102:	d079      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800210c:	2b00      	cmp	r3, #0
 800210e:	d107      	bne.n	8002120 <HAL_ADC_ConfigChannel+0x2c8>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	0e9b      	lsrs	r3, r3, #26
 8002116:	3301      	adds	r3, #1
 8002118:	069b      	lsls	r3, r3, #26
 800211a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800211e:	e015      	b.n	800214c <HAL_ADC_ConfigChannel+0x2f4>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800212e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002130:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002132:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002138:	2320      	movs	r3, #32
 800213a:	e003      	b.n	8002144 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 800213c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	069b      	lsls	r3, r3, #26
 8002148:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <HAL_ADC_ConfigChannel+0x314>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0e9b      	lsrs	r3, r3, #26
 800215e:	3301      	adds	r3, #1
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2101      	movs	r1, #1
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	e017      	b.n	800219c <HAL_ADC_ConfigChannel+0x344>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002174:	fa93 f3a3 	rbit	r3, r3
 8002178:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800217a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800217e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002184:	2320      	movs	r3, #32
 8002186:	e003      	b.n	8002190 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	3301      	adds	r3, #1
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	ea42 0103 	orr.w	r1, r2, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x36a>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0e9b      	lsrs	r3, r3, #26
 80021b2:	3301      	adds	r3, #1
 80021b4:	f003 021f 	and.w	r2, r3, #31
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	051b      	lsls	r3, r3, #20
 80021c0:	e018      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x39c>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ca:	fa93 f3a3 	rbit	r3, r3
 80021ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80021d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80021d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 80021da:	2320      	movs	r3, #32
 80021dc:	e003      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80021de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	3301      	adds	r3, #1
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4613      	mov	r3, r2
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	4413      	add	r3, r2
 80021f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f4:	430b      	orrs	r3, r1
 80021f6:	e07e      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002200:	2b00      	cmp	r3, #0
 8002202:	d107      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x3bc>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	3301      	adds	r3, #1
 800220c:	069b      	lsls	r3, r3, #26
 800220e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002212:	e015      	b.n	8002240 <HAL_ADC_ConfigChannel+0x3e8>
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221c:	fa93 f3a3 	rbit	r3, r3
 8002220:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 800222c:	2320      	movs	r3, #32
 800222e:	e003      	b.n	8002238 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	3301      	adds	r3, #1
 800223a:	069b      	lsls	r3, r3, #26
 800223c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002248:	2b00      	cmp	r3, #0
 800224a:	d109      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x408>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	3301      	adds	r3, #1
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	e017      	b.n	8002290 <HAL_ADC_ConfigChannel+0x438>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa93 f3a3 	rbit	r3, r3
 800226c:	61bb      	str	r3, [r7, #24]
  return result;
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8002278:	2320      	movs	r3, #32
 800227a:	e003      	b.n	8002284 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	fab3 f383 	clz	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	3301      	adds	r3, #1
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2101      	movs	r1, #1
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	ea42 0103 	orr.w	r1, r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10d      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x464>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0e9b      	lsrs	r3, r3, #26
 80022a6:	3301      	adds	r3, #1
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	3b1e      	subs	r3, #30
 80022b4:	051b      	lsls	r3, r3, #20
 80022b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	e01b      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x49c>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	60fb      	str	r3, [r7, #12]
  return result;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80022d4:	2320      	movs	r3, #32
 80022d6:	e003      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fab3 f383 	clz	r3, r3
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	3301      	adds	r3, #1
 80022e2:	f003 021f 	and.w	r2, r3, #31
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	3b1e      	subs	r3, #30
 80022ee:	051b      	lsls	r3, r3, #20
 80022f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022f4:	430b      	orrs	r3, r1
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	6892      	ldr	r2, [r2, #8]
 80022fa:	4619      	mov	r1, r3
 80022fc:	f7ff f84e 	bl	800139c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	da77      	bge.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002308:	4840      	ldr	r0, [pc, #256]	@ (800240c <HAL_ADC_ConfigChannel+0x5b4>)
 800230a:	f7fe ff93 	bl	8001234 <LL_ADC_GetCommonPathInternalCh>
 800230e:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002310:	483f      	ldr	r0, [pc, #252]	@ (8002410 <HAL_ADC_ConfigChannel+0x5b8>)
 8002312:	f7ff f911 	bl	8001538 <LL_ADC_IsEnabled>
 8002316:	4604      	mov	r4, r0
 8002318:	483e      	ldr	r0, [pc, #248]	@ (8002414 <HAL_ADC_ConfigChannel+0x5bc>)
 800231a:	f7ff f90d 	bl	8001538 <LL_ADC_IsEnabled>
 800231e:	4603      	mov	r3, r0
 8002320:	4323      	orrs	r3, r4
 8002322:	2b00      	cmp	r3, #0
 8002324:	d155      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a3b      	ldr	r2, [pc, #236]	@ (8002418 <HAL_ADC_ConfigChannel+0x5c0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d122      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x51e>
 8002330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002332:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d11d      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a35      	ldr	r2, [pc, #212]	@ (8002414 <HAL_ADC_ConfigChannel+0x5bc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d159      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002346:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800234a:	4619      	mov	r1, r3
 800234c:	482f      	ldr	r0, [pc, #188]	@ (800240c <HAL_ADC_ConfigChannel+0x5b4>)
 800234e:	f7fe ff5e 	bl	800120e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002352:	4b32      	ldr	r3, [pc, #200]	@ (800241c <HAL_ADC_ConfigChannel+0x5c4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	4a31      	ldr	r2, [pc, #196]	@ (8002420 <HAL_ADC_ConfigChannel+0x5c8>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	3301      	adds	r3, #1
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002366:	e002      	b.n	800236e <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	3b01      	subs	r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f9      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002374:	e040      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a2a      	ldr	r2, [pc, #168]	@ (8002424 <HAL_ADC_ConfigChannel+0x5cc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d111      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x54c>
 8002380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002382:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10c      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a21      	ldr	r2, [pc, #132]	@ (8002414 <HAL_ADC_ConfigChannel+0x5bc>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d131      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800239a:	4619      	mov	r1, r3
 800239c:	481b      	ldr	r0, [pc, #108]	@ (800240c <HAL_ADC_ConfigChannel+0x5b4>)
 800239e:	f7fe ff36 	bl	800120e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023a2:	e029      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002428 <HAL_ADC_ConfigChannel+0x5d0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d124      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
 80023ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d11f      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a15      	ldr	r2, [pc, #84]	@ (8002414 <HAL_ADC_ConfigChannel+0x5bc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11a      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80023c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023c8:	4619      	mov	r1, r3
 80023ca:	4810      	ldr	r0, [pc, #64]	@ (800240c <HAL_ADC_ConfigChannel+0x5b4>)
 80023cc:	f7fe ff1f 	bl	800120e <LL_ADC_SetCommonPathInternalCh>
 80023d0:	e012      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80023e4:	e008      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ea:	f043 0220 	orr.w	r2, r3, #32
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002400:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002404:	4618      	mov	r0, r3
 8002406:	3784      	adds	r7, #132	@ 0x84
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	40022300 	.word	0x40022300
 8002410:	40022000 	.word	0x40022000
 8002414:	40022100 	.word	0x40022100
 8002418:	cb840000 	.word	0xcb840000
 800241c:	24000000 	.word	0x24000000
 8002420:	053e2d63 	.word	0x053e2d63
 8002424:	bac04000 	.word	0xbac04000
 8002428:	cfb80000 	.word	0xcfb80000

0800242c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff f87d 	bl	8001538 <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d161      	bne.n	8002508 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689a      	ldr	r2, [r3, #8]
 800244a:	4b32      	ldr	r3, [pc, #200]	@ (8002514 <ADC_Enable+0xe8>)
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e04d      	b.n	800250a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff f84c 	bl	8001510 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002478:	f7fe fe9e 	bl	80011b8 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247e:	4826      	ldr	r0, [pc, #152]	@ (8002518 <ADC_Enable+0xec>)
 8002480:	f7fe ffdc 	bl	800143c <LL_ADC_GetMultimode>
 8002484:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a24      	ldr	r2, [pc, #144]	@ (800251c <ADC_Enable+0xf0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d002      	beq.n	8002496 <ADC_Enable+0x6a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	e000      	b.n	8002498 <ADC_Enable+0x6c>
 8002496:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <ADC_Enable+0xf4>)
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	4293      	cmp	r3, r2
 800249e:	d02c      	beq.n	80024fa <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d130      	bne.n	8002508 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a6:	e028      	b.n	80024fa <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff f843 	bl	8001538 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d104      	bne.n	80024c2 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f827 	bl	8001510 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024c2:	f7fe fe79 	bl	80011b8 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d914      	bls.n	80024fa <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d00d      	beq.n	80024fa <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e2:	f043 0210 	orr.w	r2, r3, #16
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e007      	b.n	800250a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b01      	cmp	r3, #1
 8002506:	d1cf      	bne.n	80024a8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	8000003f 	.word	0x8000003f
 8002518:	40022300 	.word	0x40022300
 800251c:	40022100 	.word	0x40022100
 8002520:	40022000 	.word	0x40022000

08002524 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002530:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002536:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800253a:	2b00      	cmp	r3, #0
 800253c:	d14b      	bne.n	80025d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d021      	beq.n	800259c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe fecb 	bl	80012f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d032      	beq.n	80025ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d12b      	bne.n	80025ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d11f      	bne.n	80025ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	655a      	str	r2, [r3, #84]	@ 0x54
 800259a:	e018      	b.n	80025ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d111      	bne.n	80025ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d105      	bne.n	80025ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7fe fada 	bl	8000b88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025d4:	e00e      	b.n	80025f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff fc2e 	bl	8001e44 <HAL_ADC_ErrorCallback>
}
 80025e8:	e004      	b.n	80025f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002608:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7fe faac 	bl	8000b68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002624:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	f043 0204 	orr.w	r2, r3, #4
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff fc00 	bl	8001e44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002654:	4b60      	ldr	r3, [pc, #384]	@ (80027d8 <ADC_ConfigureBoostMode+0x18c>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01c      	beq.n	800269a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002660:	f004 fd02 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 8002664:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800266e:	d010      	beq.n	8002692 <ADC_ConfigureBoostMode+0x46>
 8002670:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002674:	d873      	bhi.n	800275e <ADC_ConfigureBoostMode+0x112>
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267a:	d002      	beq.n	8002682 <ADC_ConfigureBoostMode+0x36>
 800267c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002680:	d16d      	bne.n	800275e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	fbb2 f3f3 	udiv	r3, r2, r3
 800268e:	60fb      	str	r3, [r7, #12]
        break;
 8002690:	e068      	b.n	8002764 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	60fb      	str	r3, [r7, #12]
        break;
 8002698:	e064      	b.n	8002764 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800269a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	f005 fefb 	bl	800849c <HAL_RCCEx_GetPeriphCLKFreq>
 80026a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80026b0:	d051      	beq.n	8002756 <ADC_ConfigureBoostMode+0x10a>
 80026b2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80026b6:	d854      	bhi.n	8002762 <ADC_ConfigureBoostMode+0x116>
 80026b8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80026bc:	d047      	beq.n	800274e <ADC_ConfigureBoostMode+0x102>
 80026be:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80026c2:	d84e      	bhi.n	8002762 <ADC_ConfigureBoostMode+0x116>
 80026c4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80026c8:	d03d      	beq.n	8002746 <ADC_ConfigureBoostMode+0xfa>
 80026ca:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80026ce:	d848      	bhi.n	8002762 <ADC_ConfigureBoostMode+0x116>
 80026d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026d4:	d033      	beq.n	800273e <ADC_ConfigureBoostMode+0xf2>
 80026d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026da:	d842      	bhi.n	8002762 <ADC_ConfigureBoostMode+0x116>
 80026dc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026e0:	d029      	beq.n	8002736 <ADC_ConfigureBoostMode+0xea>
 80026e2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80026e6:	d83c      	bhi.n	8002762 <ADC_ConfigureBoostMode+0x116>
 80026e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026ec:	d01a      	beq.n	8002724 <ADC_ConfigureBoostMode+0xd8>
 80026ee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80026f2:	d836      	bhi.n	8002762 <ADC_ConfigureBoostMode+0x116>
 80026f4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026f8:	d014      	beq.n	8002724 <ADC_ConfigureBoostMode+0xd8>
 80026fa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80026fe:	d830      	bhi.n	8002762 <ADC_ConfigureBoostMode+0x116>
 8002700:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002704:	d00e      	beq.n	8002724 <ADC_ConfigureBoostMode+0xd8>
 8002706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800270a:	d82a      	bhi.n	8002762 <ADC_ConfigureBoostMode+0x116>
 800270c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002710:	d008      	beq.n	8002724 <ADC_ConfigureBoostMode+0xd8>
 8002712:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002716:	d824      	bhi.n	8002762 <ADC_ConfigureBoostMode+0x116>
 8002718:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800271c:	d002      	beq.n	8002724 <ADC_ConfigureBoostMode+0xd8>
 800271e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002722:	d11e      	bne.n	8002762 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002732:	60fb      	str	r3, [r7, #12]
        break;
 8002734:	e016      	b.n	8002764 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
        break;
 800273c:	e012      	b.n	8002764 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	60fb      	str	r3, [r7, #12]
        break;
 8002744:	e00e      	b.n	8002764 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	60fb      	str	r3, [r7, #12]
        break;
 800274c:	e00a      	b.n	8002764 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	09db      	lsrs	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]
        break;
 8002754:	e006      	b.n	8002764 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	0a1b      	lsrs	r3, r3, #8
 800275a:	60fb      	str	r3, [r7, #12]
        break;
 800275c:	e002      	b.n	8002764 <ADC_ConfigureBoostMode+0x118>
        break;
 800275e:	bf00      	nop
 8002760:	e000      	b.n	8002764 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002762:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a1b      	ldr	r2, [pc, #108]	@ (80027dc <ADC_ConfigureBoostMode+0x190>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d808      	bhi.n	8002784 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002780:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002782:	e025      	b.n	80027d0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a16      	ldr	r2, [pc, #88]	@ (80027e0 <ADC_ConfigureBoostMode+0x194>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d80a      	bhi.n	80027a2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	e016      	b.n	80027d0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <ADC_ConfigureBoostMode+0x198>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d80a      	bhi.n	80027c0 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027bc:	609a      	str	r2, [r3, #8]
}
 80027be:	e007      	b.n	80027d0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40022300 	.word	0x40022300
 80027dc:	005f5e10 	.word	0x005f5e10
 80027e0:	00bebc20 	.word	0x00bebc20
 80027e4:	017d7840 	.word	0x017d7840

080027e8 <LL_ADC_IsEnabled>:
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <LL_ADC_IsEnabled+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_ADC_IsEnabled+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <LL_ADC_REG_StartConversion>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	4b05      	ldr	r3, [pc, #20]	@ (8002834 <LL_ADC_REG_StartConversion+0x24>)
 800281e:	4013      	ands	r3, r2
 8002820:	f043 0204 	orr.w	r2, r3, #4
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	7fffffc0 	.word	0x7fffffc0

08002838 <LL_ADC_REG_IsConversionOngoing>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b04      	cmp	r3, #4
 800284a:	d101      	bne.n	8002850 <LL_ADC_REG_IsConversionOngoing+0x18>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
	...

08002860 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b0a0      	sub	sp, #128	@ 0x80
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ffe1 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
 800287e:	e0ad      	b.n	80029dc <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800288a:	2302      	movs	r3, #2
 800288c:	e0a6      	b.n	80029dc <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a52      	ldr	r2, [pc, #328]	@ (80029e4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d002      	beq.n	80028a6 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	e000      	b.n	80028a8 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 80028a6:	4b50      	ldr	r3, [pc, #320]	@ (80029e8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d006      	beq.n	80028be <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff fdbb 	bl	800242c <ADC_Enable>
 80028b6:	4603      	mov	r3, r0
 80028b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80028bc:	e02e      	b.n	800291c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a47      	ldr	r2, [pc, #284]	@ (80029e8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d102      	bne.n	80028d6 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 80028d0:	4b44      	ldr	r3, [pc, #272]	@ (80029e4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	e001      	b.n	80028da <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e071      	b.n	80029dc <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff fd97 	bl	800242c <ADC_Enable>
 80028fe:	4603      	mov	r3, r0
 8002900:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 8002904:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fd8b 	bl	800242c <ADC_Enable>
 8002916:	4603      	mov	r3, r0
 8002918:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 800291c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002920:	2b00      	cmp	r3, #0
 8002922:	d155      	bne.n	80029d0 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002928:	4b30      	ldr	r3, [pc, #192]	@ (80029ec <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 800292a:	4013      	ands	r3, r2
 800292c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293e:	4a2c      	ldr	r2, [pc, #176]	@ (80029f0 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8002940:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002946:	4a2b      	ldr	r2, [pc, #172]	@ (80029f4 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8002948:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800294e:	4a2a      	ldr	r2, [pc, #168]	@ (80029f8 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 8002950:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	221c      	movs	r2, #28
 8002958:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0210 	orr.w	r2, r2, #16
 8002970:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d002      	beq.n	8002982 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	e000      	b.n	8002984 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 8002982:	4b19      	ldr	r3, [pc, #100]	@ (80029e8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	4293      	cmp	r3, r2
 800298a:	d00d      	beq.n	80029a8 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3340      	adds	r3, #64	@ 0x40
 8002996:	4619      	mov	r1, r3
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f000 fe14 	bl	80035c8 <HAL_DMA_Start_IT>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80029a6:	e017      	b.n	80029d8 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029a8:	4b14      	ldr	r3, [pc, #80]	@ (80029fc <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 80029aa:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80029b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029b2:	330c      	adds	r3, #12
 80029b4:	4619      	mov	r1, r3
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f000 fe05 	bl	80035c8 <HAL_DMA_Start_IT>
 80029be:	4603      	mov	r3, r0
 80029c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff21 	bl	8002810 <LL_ADC_REG_StartConversion>
 80029ce:	e003      	b.n	80029d8 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 80029d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3780      	adds	r7, #128	@ 0x80
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40022100 	.word	0x40022100
 80029e8:	40022000 	.word	0x40022000
 80029ec:	fffff0fe 	.word	0xfffff0fe
 80029f0:	08002525 	.word	0x08002525
 80029f4:	080025fd 	.word	0x080025fd
 80029f8:	08002619 	.word	0x08002619
 80029fc:	40022300 	.word	0x40022300

08002a00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b09f      	sub	sp, #124	@ 0x7c
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e080      	b.n	8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a3d      	ldr	r2, [pc, #244]	@ (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d102      	bne.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	e001      	b.n	8002aa6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab0:	f043 0220 	orr.w	r2, r3, #32
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e05f      	b.n	8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff feb6 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 8002acc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff feb0 	bl	8002838 <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d141      	bne.n	8002b62 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d13e      	bne.n	8002b62 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002ae6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b00:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b02:	4822      	ldr	r0, [pc, #136]	@ (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b04:	f7ff fe70 	bl	80027e8 <LL_ADC_IsEnabled>
 8002b08:	4604      	mov	r4, r0
 8002b0a:	4821      	ldr	r0, [pc, #132]	@ (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b0c:	f7ff fe6c 	bl	80027e8 <LL_ADC_IsEnabled>
 8002b10:	4603      	mov	r3, r0
 8002b12:	4323      	orrs	r3, r4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d12e      	bne.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	6811      	ldr	r1, [r2, #0]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b2e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b30:	e021      	b.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b3e:	4813      	ldr	r0, [pc, #76]	@ (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002b40:	f7ff fe52 	bl	80027e8 <LL_ADC_IsEnabled>
 8002b44:	4604      	mov	r4, r0
 8002b46:	4812      	ldr	r0, [pc, #72]	@ (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002b48:	f7ff fe4e 	bl	80027e8 <LL_ADC_IsEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4323      	orrs	r3, r4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d110      	bne.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	4b0f      	ldr	r3, [pc, #60]	@ (8002b98 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b5e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b60:	e009      	b.n	8002b76 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002b74:	e000      	b.n	8002b78 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b76:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b80:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	377c      	adds	r7, #124	@ 0x7c
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd90      	pop	{r4, r7, pc}
 8002b8c:	40022000 	.word	0x40022000
 8002b90:	40022100 	.word	0x40022100
 8002b94:	40022300 	.word	0x40022300
 8002b98:	fffff0e0 	.word	0xfffff0e0

08002b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <__NVIC_SetPriorityGrouping+0x40>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bb8:	4013      	ands	r3, r2
 8002bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002bc4:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bca:	4a04      	ldr	r2, [pc, #16]	@ (8002bdc <__NVIC_SetPriorityGrouping+0x40>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	60d3      	str	r3, [r2, #12]
}
 8002bd0:	bf00      	nop
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00
 8002be0:	05fa0000 	.word	0x05fa0000

08002be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be8:	4b04      	ldr	r3, [pc, #16]	@ (8002bfc <__NVIC_GetPriorityGrouping+0x18>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	f003 0307 	and.w	r3, r3, #7
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	db0b      	blt.n	8002c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	f003 021f 	and.w	r2, r3, #31
 8002c18:	4907      	ldr	r1, [pc, #28]	@ (8002c38 <__NVIC_EnableIRQ+0x38>)
 8002c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c1e:	095b      	lsrs	r3, r3, #5
 8002c20:	2001      	movs	r0, #1
 8002c22:	fa00 f202 	lsl.w	r2, r0, r2
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000e100 	.word	0xe000e100

08002c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	6039      	str	r1, [r7, #0]
 8002c46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	db0a      	blt.n	8002c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	b2da      	uxtb	r2, r3
 8002c54:	490c      	ldr	r1, [pc, #48]	@ (8002c88 <__NVIC_SetPriority+0x4c>)
 8002c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c5a:	0112      	lsls	r2, r2, #4
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c64:	e00a      	b.n	8002c7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	4908      	ldr	r1, [pc, #32]	@ (8002c8c <__NVIC_SetPriority+0x50>)
 8002c6c:	88fb      	ldrh	r3, [r7, #6]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	3b04      	subs	r3, #4
 8002c74:	0112      	lsls	r2, r2, #4
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	440b      	add	r3, r1
 8002c7a:	761a      	strb	r2, [r3, #24]
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	e000e100 	.word	0xe000e100
 8002c8c:	e000ed00 	.word	0xe000ed00

08002c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b089      	sub	sp, #36	@ 0x24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f1c3 0307 	rsb	r3, r3, #7
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	bf28      	it	cs
 8002cae:	2304      	movcs	r3, #4
 8002cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d902      	bls.n	8002cc0 <NVIC_EncodePriority+0x30>
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3b03      	subs	r3, #3
 8002cbe:	e000      	b.n	8002cc2 <NVIC_EncodePriority+0x32>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	401a      	ands	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce2:	43d9      	mvns	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	4313      	orrs	r3, r2
         );
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3724      	adds	r7, #36	@ 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
	...

08002cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d08:	d301      	bcc.n	8002d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00f      	b.n	8002d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <SysTick_Config+0x40>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d16:	210f      	movs	r1, #15
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f7ff ff8e 	bl	8002c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d20:	4b05      	ldr	r3, [pc, #20]	@ (8002d38 <SysTick_Config+0x40>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d26:	4b04      	ldr	r3, [pc, #16]	@ (8002d38 <SysTick_Config+0x40>)
 8002d28:	2207      	movs	r2, #7
 8002d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	e000e010 	.word	0xe000e010

08002d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff ff29 	bl	8002b9c <__NVIC_SetPriorityGrouping>
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b086      	sub	sp, #24
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	60b9      	str	r1, [r7, #8]
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d60:	f7ff ff40 	bl	8002be4 <__NVIC_GetPriorityGrouping>
 8002d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	6978      	ldr	r0, [r7, #20]
 8002d6c:	f7ff ff90 	bl	8002c90 <NVIC_EncodePriority>
 8002d70:	4602      	mov	r2, r0
 8002d72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff ff5f 	bl	8002c3c <__NVIC_SetPriority>
}
 8002d7e:	bf00      	nop
 8002d80:	3718      	adds	r7, #24
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff33 	bl	8002c00 <__NVIC_EnableIRQ>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f7ff ffa4 	bl	8002cf8 <SysTick_Config>
 8002db0:	4603      	mov	r3, r0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002dc0:	f3bf 8f5f 	dmb	sy
}
 8002dc4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002dc6:	4b07      	ldr	r3, [pc, #28]	@ (8002de4 <HAL_MPU_Disable+0x28>)
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	4a06      	ldr	r2, [pc, #24]	@ (8002de4 <HAL_MPU_Disable+0x28>)
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002dd2:	4b05      	ldr	r3, [pc, #20]	@ (8002de8 <HAL_MPU_Disable+0x2c>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	605a      	str	r2, [r3, #4]
}
 8002dd8:	bf00      	nop
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	e000ed00 	.word	0xe000ed00
 8002de8:	e000ed90 	.word	0xe000ed90

08002dec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002df4:	4a0b      	ldr	r2, [pc, #44]	@ (8002e24 <HAL_MPU_Enable+0x38>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <HAL_MPU_Enable+0x3c>)
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	4a09      	ldr	r2, [pc, #36]	@ (8002e28 <HAL_MPU_Enable+0x3c>)
 8002e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e08:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002e0a:	f3bf 8f4f 	dsb	sy
}
 8002e0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002e10:	f3bf 8f6f 	isb	sy
}
 8002e14:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	e000ed90 	.word	0xe000ed90
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	785a      	ldrb	r2, [r3, #1]
 8002e38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea8 <HAL_MPU_ConfigRegion+0x7c>)
 8002e3a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <HAL_MPU_ConfigRegion+0x7c>)
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4a19      	ldr	r2, [pc, #100]	@ (8002ea8 <HAL_MPU_ConfigRegion+0x7c>)
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002e48:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <HAL_MPU_ConfigRegion+0x7c>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7b1b      	ldrb	r3, [r3, #12]
 8002e54:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7adb      	ldrb	r3, [r3, #11]
 8002e5a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	7a9b      	ldrb	r3, [r3, #10]
 8002e62:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002e64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7b5b      	ldrb	r3, [r3, #13]
 8002e6a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002e6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	7b9b      	ldrb	r3, [r3, #14]
 8002e72:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002e74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7bdb      	ldrb	r3, [r3, #15]
 8002e7a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002e7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	7a5b      	ldrb	r3, [r3, #9]
 8002e82:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002e84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7a1b      	ldrb	r3, [r3, #8]
 8002e8a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002e8c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	7812      	ldrb	r2, [r2, #0]
 8002e92:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e94:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002e96:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e98:	6113      	str	r3, [r2, #16]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	e000ed90 	.word	0xe000ed90

08002eac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7fe f980 	bl	80011b8 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e37d      	b.n	80035c0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a66      	ldr	r2, [pc, #408]	@ (8003064 <HAL_DMA_Init+0x1b8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04a      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a65      	ldr	r2, [pc, #404]	@ (8003068 <HAL_DMA_Init+0x1bc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d045      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a63      	ldr	r2, [pc, #396]	@ (800306c <HAL_DMA_Init+0x1c0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d040      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a62      	ldr	r2, [pc, #392]	@ (8003070 <HAL_DMA_Init+0x1c4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03b      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a60      	ldr	r2, [pc, #384]	@ (8003074 <HAL_DMA_Init+0x1c8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d036      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a5f      	ldr	r2, [pc, #380]	@ (8003078 <HAL_DMA_Init+0x1cc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d031      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a5d      	ldr	r2, [pc, #372]	@ (800307c <HAL_DMA_Init+0x1d0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02c      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003080 <HAL_DMA_Init+0x1d4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d027      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a5a      	ldr	r2, [pc, #360]	@ (8003084 <HAL_DMA_Init+0x1d8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d022      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a59      	ldr	r2, [pc, #356]	@ (8003088 <HAL_DMA_Init+0x1dc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a57      	ldr	r2, [pc, #348]	@ (800308c <HAL_DMA_Init+0x1e0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d018      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a56      	ldr	r2, [pc, #344]	@ (8003090 <HAL_DMA_Init+0x1e4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a54      	ldr	r2, [pc, #336]	@ (8003094 <HAL_DMA_Init+0x1e8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a53      	ldr	r2, [pc, #332]	@ (8003098 <HAL_DMA_Init+0x1ec>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a51      	ldr	r2, [pc, #324]	@ (800309c <HAL_DMA_Init+0x1f0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_DMA_Init+0xb8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a50      	ldr	r2, [pc, #320]	@ (80030a0 <HAL_DMA_Init+0x1f4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d101      	bne.n	8002f68 <HAL_DMA_Init+0xbc>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e000      	b.n	8002f6a <HAL_DMA_Init+0xbe>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 813c 	beq.w	80031e8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a37      	ldr	r2, [pc, #220]	@ (8003064 <HAL_DMA_Init+0x1b8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d04a      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a36      	ldr	r2, [pc, #216]	@ (8003068 <HAL_DMA_Init+0x1bc>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d045      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a34      	ldr	r2, [pc, #208]	@ (800306c <HAL_DMA_Init+0x1c0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d040      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a33      	ldr	r2, [pc, #204]	@ (8003070 <HAL_DMA_Init+0x1c4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d03b      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a31      	ldr	r2, [pc, #196]	@ (8003074 <HAL_DMA_Init+0x1c8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d036      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a30      	ldr	r2, [pc, #192]	@ (8003078 <HAL_DMA_Init+0x1cc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d031      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a2e      	ldr	r2, [pc, #184]	@ (800307c <HAL_DMA_Init+0x1d0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d02c      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2d      	ldr	r2, [pc, #180]	@ (8003080 <HAL_DMA_Init+0x1d4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d027      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003084 <HAL_DMA_Init+0x1d8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d022      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a2a      	ldr	r2, [pc, #168]	@ (8003088 <HAL_DMA_Init+0x1dc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d01d      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a28      	ldr	r2, [pc, #160]	@ (800308c <HAL_DMA_Init+0x1e0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d018      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a27      	ldr	r2, [pc, #156]	@ (8003090 <HAL_DMA_Init+0x1e4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <HAL_DMA_Init+0x1e8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00e      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a24      	ldr	r2, [pc, #144]	@ (8003098 <HAL_DMA_Init+0x1ec>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_DMA_Init+0x174>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_DMA_Init+0x1f0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <HAL_DMA_Init+0x174>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a21      	ldr	r2, [pc, #132]	@ (80030a0 <HAL_DMA_Init+0x1f4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d108      	bne.n	8003032 <HAL_DMA_Init+0x186>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	e007      	b.n	8003042 <HAL_DMA_Init+0x196>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0201 	bic.w	r2, r2, #1
 8003040:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003042:	e02f      	b.n	80030a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003044:	f7fe f8b8 	bl	80011b8 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b05      	cmp	r3, #5
 8003050:	d928      	bls.n	80030a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2220      	movs	r2, #32
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2203      	movs	r2, #3
 800305c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e2ad      	b.n	80035c0 <HAL_DMA_Init+0x714>
 8003064:	40020010 	.word	0x40020010
 8003068:	40020028 	.word	0x40020028
 800306c:	40020040 	.word	0x40020040
 8003070:	40020058 	.word	0x40020058
 8003074:	40020070 	.word	0x40020070
 8003078:	40020088 	.word	0x40020088
 800307c:	400200a0 	.word	0x400200a0
 8003080:	400200b8 	.word	0x400200b8
 8003084:	40020410 	.word	0x40020410
 8003088:	40020428 	.word	0x40020428
 800308c:	40020440 	.word	0x40020440
 8003090:	40020458 	.word	0x40020458
 8003094:	40020470 	.word	0x40020470
 8003098:	40020488 	.word	0x40020488
 800309c:	400204a0 	.word	0x400204a0
 80030a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1c8      	bne.n	8003044 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	4b73      	ldr	r3, [pc, #460]	@ (800328c <HAL_DMA_Init+0x3e0>)
 80030be:	4013      	ands	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80030ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d107      	bne.n	8003108 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003100:	4313      	orrs	r3, r2
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b28      	cmp	r3, #40	@ 0x28
 800310e:	d903      	bls.n	8003118 <HAL_DMA_Init+0x26c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	2b2e      	cmp	r3, #46	@ 0x2e
 8003116:	d91f      	bls.n	8003158 <HAL_DMA_Init+0x2ac>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b3e      	cmp	r3, #62	@ 0x3e
 800311e:	d903      	bls.n	8003128 <HAL_DMA_Init+0x27c>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	2b42      	cmp	r3, #66	@ 0x42
 8003126:	d917      	bls.n	8003158 <HAL_DMA_Init+0x2ac>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	2b46      	cmp	r3, #70	@ 0x46
 800312e:	d903      	bls.n	8003138 <HAL_DMA_Init+0x28c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b48      	cmp	r3, #72	@ 0x48
 8003136:	d90f      	bls.n	8003158 <HAL_DMA_Init+0x2ac>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b4e      	cmp	r3, #78	@ 0x4e
 800313e:	d903      	bls.n	8003148 <HAL_DMA_Init+0x29c>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b52      	cmp	r3, #82	@ 0x52
 8003146:	d907      	bls.n	8003158 <HAL_DMA_Init+0x2ac>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b73      	cmp	r3, #115	@ 0x73
 800314e:	d905      	bls.n	800315c <HAL_DMA_Init+0x2b0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b77      	cmp	r3, #119	@ 0x77
 8003156:	d801      	bhi.n	800315c <HAL_DMA_Init+0x2b0>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_DMA_Init+0x2b2>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003168:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f023 0307 	bic.w	r3, r3, #7
 8003180:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	2b04      	cmp	r3, #4
 8003192:	d117      	bne.n	80031c4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	4313      	orrs	r3, r2
 800319c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00e      	beq.n	80031c4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f002 fbd4 	bl	8005954 <DMA_CheckFifoParam>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2240      	movs	r2, #64	@ 0x40
 80031b6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e1fd      	b.n	80035c0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f002 fb0f 	bl	80057f0 <DMA_CalcBaseAndBitshift>
 80031d2:	4603      	mov	r3, r0
 80031d4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	223f      	movs	r2, #63	@ 0x3f
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	e0fd      	b.n	80033e4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a28      	ldr	r2, [pc, #160]	@ (8003290 <HAL_DMA_Init+0x3e4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d04a      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a27      	ldr	r2, [pc, #156]	@ (8003294 <HAL_DMA_Init+0x3e8>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d045      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a25      	ldr	r2, [pc, #148]	@ (8003298 <HAL_DMA_Init+0x3ec>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d040      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a24      	ldr	r2, [pc, #144]	@ (800329c <HAL_DMA_Init+0x3f0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d03b      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a22      	ldr	r2, [pc, #136]	@ (80032a0 <HAL_DMA_Init+0x3f4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d036      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a21      	ldr	r2, [pc, #132]	@ (80032a4 <HAL_DMA_Init+0x3f8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d031      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1f      	ldr	r2, [pc, #124]	@ (80032a8 <HAL_DMA_Init+0x3fc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d02c      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1e      	ldr	r2, [pc, #120]	@ (80032ac <HAL_DMA_Init+0x400>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d027      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1c      	ldr	r2, [pc, #112]	@ (80032b0 <HAL_DMA_Init+0x404>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d022      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1b      	ldr	r2, [pc, #108]	@ (80032b4 <HAL_DMA_Init+0x408>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d01d      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a19      	ldr	r2, [pc, #100]	@ (80032b8 <HAL_DMA_Init+0x40c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d018      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a18      	ldr	r2, [pc, #96]	@ (80032bc <HAL_DMA_Init+0x410>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a16      	ldr	r2, [pc, #88]	@ (80032c0 <HAL_DMA_Init+0x414>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00e      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a15      	ldr	r2, [pc, #84]	@ (80032c4 <HAL_DMA_Init+0x418>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a13      	ldr	r2, [pc, #76]	@ (80032c8 <HAL_DMA_Init+0x41c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_DMA_Init+0x3dc>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a12      	ldr	r2, [pc, #72]	@ (80032cc <HAL_DMA_Init+0x420>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d123      	bne.n	80032d0 <HAL_DMA_Init+0x424>
 8003288:	2301      	movs	r3, #1
 800328a:	e022      	b.n	80032d2 <HAL_DMA_Init+0x426>
 800328c:	fe10803f 	.word	0xfe10803f
 8003290:	48022c08 	.word	0x48022c08
 8003294:	48022c1c 	.word	0x48022c1c
 8003298:	48022c30 	.word	0x48022c30
 800329c:	48022c44 	.word	0x48022c44
 80032a0:	48022c58 	.word	0x48022c58
 80032a4:	48022c6c 	.word	0x48022c6c
 80032a8:	48022c80 	.word	0x48022c80
 80032ac:	48022c94 	.word	0x48022c94
 80032b0:	58025408 	.word	0x58025408
 80032b4:	5802541c 	.word	0x5802541c
 80032b8:	58025430 	.word	0x58025430
 80032bc:	58025444 	.word	0x58025444
 80032c0:	58025458 	.word	0x58025458
 80032c4:	5802546c 	.word	0x5802546c
 80032c8:	58025480 	.word	0x58025480
 80032cc:	58025494 	.word	0x58025494
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d07d      	beq.n	80033d2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a7f      	ldr	r2, [pc, #508]	@ (80034d8 <HAL_DMA_Init+0x62c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d021      	beq.n	8003324 <HAL_DMA_Init+0x478>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a7d      	ldr	r2, [pc, #500]	@ (80034dc <HAL_DMA_Init+0x630>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01c      	beq.n	8003324 <HAL_DMA_Init+0x478>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7c      	ldr	r2, [pc, #496]	@ (80034e0 <HAL_DMA_Init+0x634>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d017      	beq.n	8003324 <HAL_DMA_Init+0x478>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7a      	ldr	r2, [pc, #488]	@ (80034e4 <HAL_DMA_Init+0x638>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d012      	beq.n	8003324 <HAL_DMA_Init+0x478>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a79      	ldr	r2, [pc, #484]	@ (80034e8 <HAL_DMA_Init+0x63c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00d      	beq.n	8003324 <HAL_DMA_Init+0x478>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a77      	ldr	r2, [pc, #476]	@ (80034ec <HAL_DMA_Init+0x640>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d008      	beq.n	8003324 <HAL_DMA_Init+0x478>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a76      	ldr	r2, [pc, #472]	@ (80034f0 <HAL_DMA_Init+0x644>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d003      	beq.n	8003324 <HAL_DMA_Init+0x478>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a74      	ldr	r2, [pc, #464]	@ (80034f4 <HAL_DMA_Init+0x648>)
 8003322:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4b6e      	ldr	r3, [pc, #440]	@ (80034f8 <HAL_DMA_Init+0x64c>)
 8003340:	4013      	ands	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b40      	cmp	r3, #64	@ 0x40
 800334a:	d008      	beq.n	800335e <HAL_DMA_Init+0x4b2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b80      	cmp	r3, #128	@ 0x80
 8003352:	d102      	bne.n	800335a <HAL_DMA_Init+0x4ae>
 8003354:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003358:	e002      	b.n	8003360 <HAL_DMA_Init+0x4b4>
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <HAL_DMA_Init+0x4b4>
 800335e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	68d2      	ldr	r2, [r2, #12]
 8003364:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003366:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800336e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003376:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800337e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69db      	ldr	r3, [r3, #28]
 8003384:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003386:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800338e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b55      	ldr	r3, [pc, #340]	@ (80034fc <HAL_DMA_Init+0x650>)
 80033a6:	4413      	add	r3, r2
 80033a8:	4a55      	ldr	r2, [pc, #340]	@ (8003500 <HAL_DMA_Init+0x654>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	009a      	lsls	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f002 fa1a 	bl	80057f0 <DMA_CalcBaseAndBitshift>
 80033bc:	4603      	mov	r3, r0
 80033be:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]
 80033d0:	e008      	b.n	80033e4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2240      	movs	r2, #64	@ 0x40
 80033d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2203      	movs	r2, #3
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0ed      	b.n	80035c0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a46      	ldr	r2, [pc, #280]	@ (8003504 <HAL_DMA_Init+0x658>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d072      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a45      	ldr	r2, [pc, #276]	@ (8003508 <HAL_DMA_Init+0x65c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d06d      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a43      	ldr	r2, [pc, #268]	@ (800350c <HAL_DMA_Init+0x660>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d068      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a42      	ldr	r2, [pc, #264]	@ (8003510 <HAL_DMA_Init+0x664>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d063      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a40      	ldr	r2, [pc, #256]	@ (8003514 <HAL_DMA_Init+0x668>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d05e      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a3f      	ldr	r2, [pc, #252]	@ (8003518 <HAL_DMA_Init+0x66c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d059      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a3d      	ldr	r2, [pc, #244]	@ (800351c <HAL_DMA_Init+0x670>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d054      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a3c      	ldr	r2, [pc, #240]	@ (8003520 <HAL_DMA_Init+0x674>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d04f      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a3a      	ldr	r2, [pc, #232]	@ (8003524 <HAL_DMA_Init+0x678>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d04a      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a39      	ldr	r2, [pc, #228]	@ (8003528 <HAL_DMA_Init+0x67c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d045      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a37      	ldr	r2, [pc, #220]	@ (800352c <HAL_DMA_Init+0x680>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d040      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a36      	ldr	r2, [pc, #216]	@ (8003530 <HAL_DMA_Init+0x684>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d03b      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a34      	ldr	r2, [pc, #208]	@ (8003534 <HAL_DMA_Init+0x688>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d036      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a33      	ldr	r2, [pc, #204]	@ (8003538 <HAL_DMA_Init+0x68c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d031      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a31      	ldr	r2, [pc, #196]	@ (800353c <HAL_DMA_Init+0x690>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02c      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a30      	ldr	r2, [pc, #192]	@ (8003540 <HAL_DMA_Init+0x694>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d027      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a13      	ldr	r2, [pc, #76]	@ (80034d8 <HAL_DMA_Init+0x62c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a12      	ldr	r2, [pc, #72]	@ (80034dc <HAL_DMA_Init+0x630>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d01d      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a10      	ldr	r2, [pc, #64]	@ (80034e0 <HAL_DMA_Init+0x634>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	@ (80034e4 <HAL_DMA_Init+0x638>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a0d      	ldr	r2, [pc, #52]	@ (80034e8 <HAL_DMA_Init+0x63c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a0c      	ldr	r2, [pc, #48]	@ (80034ec <HAL_DMA_Init+0x640>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0a      	ldr	r2, [pc, #40]	@ (80034f0 <HAL_DMA_Init+0x644>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_DMA_Init+0x628>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <HAL_DMA_Init+0x648>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d137      	bne.n	8003544 <HAL_DMA_Init+0x698>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e036      	b.n	8003546 <HAL_DMA_Init+0x69a>
 80034d8:	58025408 	.word	0x58025408
 80034dc:	5802541c 	.word	0x5802541c
 80034e0:	58025430 	.word	0x58025430
 80034e4:	58025444 	.word	0x58025444
 80034e8:	58025458 	.word	0x58025458
 80034ec:	5802546c 	.word	0x5802546c
 80034f0:	58025480 	.word	0x58025480
 80034f4:	58025494 	.word	0x58025494
 80034f8:	fffe000f 	.word	0xfffe000f
 80034fc:	a7fdabf8 	.word	0xa7fdabf8
 8003500:	cccccccd 	.word	0xcccccccd
 8003504:	40020010 	.word	0x40020010
 8003508:	40020028 	.word	0x40020028
 800350c:	40020040 	.word	0x40020040
 8003510:	40020058 	.word	0x40020058
 8003514:	40020070 	.word	0x40020070
 8003518:	40020088 	.word	0x40020088
 800351c:	400200a0 	.word	0x400200a0
 8003520:	400200b8 	.word	0x400200b8
 8003524:	40020410 	.word	0x40020410
 8003528:	40020428 	.word	0x40020428
 800352c:	40020440 	.word	0x40020440
 8003530:	40020458 	.word	0x40020458
 8003534:	40020470 	.word	0x40020470
 8003538:	40020488 	.word	0x40020488
 800353c:	400204a0 	.word	0x400204a0
 8003540:	400204b8 	.word	0x400204b8
 8003544:	2300      	movs	r3, #0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d032      	beq.n	80035b0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f002 fa7e 	bl	8005a4c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b80      	cmp	r3, #128	@ 0x80
 8003556:	d102      	bne.n	800355e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003572:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_DMA_Init+0x6f2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d80c      	bhi.n	800359e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f002 fafb 	bl	8005b80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	e008      	b.n	80035b0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e226      	b.n	8003a32 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d101      	bne.n	80035f2 <HAL_DMA_Start_IT+0x2a>
 80035ee:	2302      	movs	r3, #2
 80035f0:	e21f      	b.n	8003a32 <HAL_DMA_Start_IT+0x46a>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b01      	cmp	r3, #1
 8003604:	f040 820a 	bne.w	8003a1c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a68      	ldr	r2, [pc, #416]	@ (80037bc <HAL_DMA_Start_IT+0x1f4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d04a      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a66      	ldr	r2, [pc, #408]	@ (80037c0 <HAL_DMA_Start_IT+0x1f8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d045      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a65      	ldr	r2, [pc, #404]	@ (80037c4 <HAL_DMA_Start_IT+0x1fc>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d040      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a63      	ldr	r2, [pc, #396]	@ (80037c8 <HAL_DMA_Start_IT+0x200>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d03b      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a62      	ldr	r2, [pc, #392]	@ (80037cc <HAL_DMA_Start_IT+0x204>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d036      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a60      	ldr	r2, [pc, #384]	@ (80037d0 <HAL_DMA_Start_IT+0x208>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d031      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a5f      	ldr	r2, [pc, #380]	@ (80037d4 <HAL_DMA_Start_IT+0x20c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d02c      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a5d      	ldr	r2, [pc, #372]	@ (80037d8 <HAL_DMA_Start_IT+0x210>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d027      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a5c      	ldr	r2, [pc, #368]	@ (80037dc <HAL_DMA_Start_IT+0x214>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d022      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a5a      	ldr	r2, [pc, #360]	@ (80037e0 <HAL_DMA_Start_IT+0x218>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01d      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a59      	ldr	r2, [pc, #356]	@ (80037e4 <HAL_DMA_Start_IT+0x21c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d018      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a57      	ldr	r2, [pc, #348]	@ (80037e8 <HAL_DMA_Start_IT+0x220>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a56      	ldr	r2, [pc, #344]	@ (80037ec <HAL_DMA_Start_IT+0x224>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a54      	ldr	r2, [pc, #336]	@ (80037f0 <HAL_DMA_Start_IT+0x228>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a53      	ldr	r2, [pc, #332]	@ (80037f4 <HAL_DMA_Start_IT+0x22c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_DMA_Start_IT+0xee>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a51      	ldr	r2, [pc, #324]	@ (80037f8 <HAL_DMA_Start_IT+0x230>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d108      	bne.n	80036c8 <HAL_DMA_Start_IT+0x100>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e007      	b.n	80036d8 <HAL_DMA_Start_IT+0x110>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f001 fea2 	bl	8005428 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a34      	ldr	r2, [pc, #208]	@ (80037bc <HAL_DMA_Start_IT+0x1f4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d04a      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a33      	ldr	r2, [pc, #204]	@ (80037c0 <HAL_DMA_Start_IT+0x1f8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d045      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a31      	ldr	r2, [pc, #196]	@ (80037c4 <HAL_DMA_Start_IT+0x1fc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d040      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a30      	ldr	r2, [pc, #192]	@ (80037c8 <HAL_DMA_Start_IT+0x200>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d03b      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a2e      	ldr	r2, [pc, #184]	@ (80037cc <HAL_DMA_Start_IT+0x204>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d036      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a2d      	ldr	r2, [pc, #180]	@ (80037d0 <HAL_DMA_Start_IT+0x208>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d031      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a2b      	ldr	r2, [pc, #172]	@ (80037d4 <HAL_DMA_Start_IT+0x20c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d02c      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a2a      	ldr	r2, [pc, #168]	@ (80037d8 <HAL_DMA_Start_IT+0x210>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d027      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a28      	ldr	r2, [pc, #160]	@ (80037dc <HAL_DMA_Start_IT+0x214>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d022      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a27      	ldr	r2, [pc, #156]	@ (80037e0 <HAL_DMA_Start_IT+0x218>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d01d      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a25      	ldr	r2, [pc, #148]	@ (80037e4 <HAL_DMA_Start_IT+0x21c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d018      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a24      	ldr	r2, [pc, #144]	@ (80037e8 <HAL_DMA_Start_IT+0x220>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a22      	ldr	r2, [pc, #136]	@ (80037ec <HAL_DMA_Start_IT+0x224>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00e      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a21      	ldr	r2, [pc, #132]	@ (80037f0 <HAL_DMA_Start_IT+0x228>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a1f      	ldr	r2, [pc, #124]	@ (80037f4 <HAL_DMA_Start_IT+0x22c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_DMA_Start_IT+0x1bc>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1e      	ldr	r2, [pc, #120]	@ (80037f8 <HAL_DMA_Start_IT+0x230>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_DMA_Start_IT+0x1c0>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <HAL_DMA_Start_IT+0x1c2>
 8003788:	2300      	movs	r3, #0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d036      	beq.n	80037fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 021e 	bic.w	r2, r3, #30
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0216 	orr.w	r2, r2, #22
 80037a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d03e      	beq.n	8003828 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0208 	orr.w	r2, r2, #8
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e035      	b.n	8003828 <HAL_DMA_Start_IT+0x260>
 80037bc:	40020010 	.word	0x40020010
 80037c0:	40020028 	.word	0x40020028
 80037c4:	40020040 	.word	0x40020040
 80037c8:	40020058 	.word	0x40020058
 80037cc:	40020070 	.word	0x40020070
 80037d0:	40020088 	.word	0x40020088
 80037d4:	400200a0 	.word	0x400200a0
 80037d8:	400200b8 	.word	0x400200b8
 80037dc:	40020410 	.word	0x40020410
 80037e0:	40020428 	.word	0x40020428
 80037e4:	40020440 	.word	0x40020440
 80037e8:	40020458 	.word	0x40020458
 80037ec:	40020470 	.word	0x40020470
 80037f0:	40020488 	.word	0x40020488
 80037f4:	400204a0 	.word	0x400204a0
 80037f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 020e 	bic.w	r2, r3, #14
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 020a 	orr.w	r2, r2, #10
 800380e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0204 	orr.w	r2, r2, #4
 8003826:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a83      	ldr	r2, [pc, #524]	@ (8003a3c <HAL_DMA_Start_IT+0x474>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d072      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a82      	ldr	r2, [pc, #520]	@ (8003a40 <HAL_DMA_Start_IT+0x478>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d06d      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a80      	ldr	r2, [pc, #512]	@ (8003a44 <HAL_DMA_Start_IT+0x47c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d068      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a7f      	ldr	r2, [pc, #508]	@ (8003a48 <HAL_DMA_Start_IT+0x480>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d063      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a7d      	ldr	r2, [pc, #500]	@ (8003a4c <HAL_DMA_Start_IT+0x484>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d05e      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a50 <HAL_DMA_Start_IT+0x488>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d059      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a7a      	ldr	r2, [pc, #488]	@ (8003a54 <HAL_DMA_Start_IT+0x48c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d054      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a79      	ldr	r2, [pc, #484]	@ (8003a58 <HAL_DMA_Start_IT+0x490>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d04f      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a77      	ldr	r2, [pc, #476]	@ (8003a5c <HAL_DMA_Start_IT+0x494>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d04a      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a76      	ldr	r2, [pc, #472]	@ (8003a60 <HAL_DMA_Start_IT+0x498>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d045      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a74      	ldr	r2, [pc, #464]	@ (8003a64 <HAL_DMA_Start_IT+0x49c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d040      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a73      	ldr	r2, [pc, #460]	@ (8003a68 <HAL_DMA_Start_IT+0x4a0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d03b      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a71      	ldr	r2, [pc, #452]	@ (8003a6c <HAL_DMA_Start_IT+0x4a4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d036      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a70      	ldr	r2, [pc, #448]	@ (8003a70 <HAL_DMA_Start_IT+0x4a8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d031      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003a74 <HAL_DMA_Start_IT+0x4ac>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d02c      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6d      	ldr	r2, [pc, #436]	@ (8003a78 <HAL_DMA_Start_IT+0x4b0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d027      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a6b      	ldr	r2, [pc, #428]	@ (8003a7c <HAL_DMA_Start_IT+0x4b4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d022      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a6a      	ldr	r2, [pc, #424]	@ (8003a80 <HAL_DMA_Start_IT+0x4b8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d01d      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a68      	ldr	r2, [pc, #416]	@ (8003a84 <HAL_DMA_Start_IT+0x4bc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d018      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a67      	ldr	r2, [pc, #412]	@ (8003a88 <HAL_DMA_Start_IT+0x4c0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d013      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_DMA_Start_IT+0x4c4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00e      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a64      	ldr	r2, [pc, #400]	@ (8003a90 <HAL_DMA_Start_IT+0x4c8>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d009      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a62      	ldr	r2, [pc, #392]	@ (8003a94 <HAL_DMA_Start_IT+0x4cc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d004      	beq.n	8003918 <HAL_DMA_Start_IT+0x350>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a61      	ldr	r2, [pc, #388]	@ (8003a98 <HAL_DMA_Start_IT+0x4d0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d101      	bne.n	800391c <HAL_DMA_Start_IT+0x354>
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <HAL_DMA_Start_IT+0x356>
 800391c:	2300      	movs	r3, #0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d01a      	beq.n	8003958 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800393a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800393e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003952:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003956:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a37      	ldr	r2, [pc, #220]	@ (8003a3c <HAL_DMA_Start_IT+0x474>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d04a      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a36      	ldr	r2, [pc, #216]	@ (8003a40 <HAL_DMA_Start_IT+0x478>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d045      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a34      	ldr	r2, [pc, #208]	@ (8003a44 <HAL_DMA_Start_IT+0x47c>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d040      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a33      	ldr	r2, [pc, #204]	@ (8003a48 <HAL_DMA_Start_IT+0x480>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d03b      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a31      	ldr	r2, [pc, #196]	@ (8003a4c <HAL_DMA_Start_IT+0x484>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d036      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a30      	ldr	r2, [pc, #192]	@ (8003a50 <HAL_DMA_Start_IT+0x488>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d031      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a2e      	ldr	r2, [pc, #184]	@ (8003a54 <HAL_DMA_Start_IT+0x48c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d02c      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003a58 <HAL_DMA_Start_IT+0x490>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d027      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a2b      	ldr	r2, [pc, #172]	@ (8003a5c <HAL_DMA_Start_IT+0x494>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d022      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a60 <HAL_DMA_Start_IT+0x498>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d01d      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a28      	ldr	r2, [pc, #160]	@ (8003a64 <HAL_DMA_Start_IT+0x49c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d018      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a27      	ldr	r2, [pc, #156]	@ (8003a68 <HAL_DMA_Start_IT+0x4a0>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d013      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a25      	ldr	r2, [pc, #148]	@ (8003a6c <HAL_DMA_Start_IT+0x4a4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00e      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a24      	ldr	r2, [pc, #144]	@ (8003a70 <HAL_DMA_Start_IT+0x4a8>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d009      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a22      	ldr	r2, [pc, #136]	@ (8003a74 <HAL_DMA_Start_IT+0x4ac>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d004      	beq.n	80039f8 <HAL_DMA_Start_IT+0x430>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a21      	ldr	r2, [pc, #132]	@ (8003a78 <HAL_DMA_Start_IT+0x4b0>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d108      	bne.n	8003a0a <HAL_DMA_Start_IT+0x442>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	e012      	b.n	8003a30 <HAL_DMA_Start_IT+0x468>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0201 	orr.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e009      	b.n	8003a30 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40020010 	.word	0x40020010
 8003a40:	40020028 	.word	0x40020028
 8003a44:	40020040 	.word	0x40020040
 8003a48:	40020058 	.word	0x40020058
 8003a4c:	40020070 	.word	0x40020070
 8003a50:	40020088 	.word	0x40020088
 8003a54:	400200a0 	.word	0x400200a0
 8003a58:	400200b8 	.word	0x400200b8
 8003a5c:	40020410 	.word	0x40020410
 8003a60:	40020428 	.word	0x40020428
 8003a64:	40020440 	.word	0x40020440
 8003a68:	40020458 	.word	0x40020458
 8003a6c:	40020470 	.word	0x40020470
 8003a70:	40020488 	.word	0x40020488
 8003a74:	400204a0 	.word	0x400204a0
 8003a78:	400204b8 	.word	0x400204b8
 8003a7c:	58025408 	.word	0x58025408
 8003a80:	5802541c 	.word	0x5802541c
 8003a84:	58025430 	.word	0x58025430
 8003a88:	58025444 	.word	0x58025444
 8003a8c:	58025458 	.word	0x58025458
 8003a90:	5802546c 	.word	0x5802546c
 8003a94:	58025480 	.word	0x58025480
 8003a98:	58025494 	.word	0x58025494

08003a9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7fd fb88 	bl	80011b8 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e2dc      	b.n	800406e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d008      	beq.n	8003ad2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2280      	movs	r2, #128	@ 0x80
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e2cd      	b.n	800406e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a76      	ldr	r2, [pc, #472]	@ (8003cb0 <HAL_DMA_Abort+0x214>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d04a      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a74      	ldr	r2, [pc, #464]	@ (8003cb4 <HAL_DMA_Abort+0x218>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d045      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a73      	ldr	r2, [pc, #460]	@ (8003cb8 <HAL_DMA_Abort+0x21c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d040      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a71      	ldr	r2, [pc, #452]	@ (8003cbc <HAL_DMA_Abort+0x220>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d03b      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a70      	ldr	r2, [pc, #448]	@ (8003cc0 <HAL_DMA_Abort+0x224>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d036      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a6e      	ldr	r2, [pc, #440]	@ (8003cc4 <HAL_DMA_Abort+0x228>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d031      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6d      	ldr	r2, [pc, #436]	@ (8003cc8 <HAL_DMA_Abort+0x22c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d02c      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ccc <HAL_DMA_Abort+0x230>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d027      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6a      	ldr	r2, [pc, #424]	@ (8003cd0 <HAL_DMA_Abort+0x234>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d022      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a68      	ldr	r2, [pc, #416]	@ (8003cd4 <HAL_DMA_Abort+0x238>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d01d      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a67      	ldr	r2, [pc, #412]	@ (8003cd8 <HAL_DMA_Abort+0x23c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d018      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a65      	ldr	r2, [pc, #404]	@ (8003cdc <HAL_DMA_Abort+0x240>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a64      	ldr	r2, [pc, #400]	@ (8003ce0 <HAL_DMA_Abort+0x244>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00e      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a62      	ldr	r2, [pc, #392]	@ (8003ce4 <HAL_DMA_Abort+0x248>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d009      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a61      	ldr	r2, [pc, #388]	@ (8003ce8 <HAL_DMA_Abort+0x24c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d004      	beq.n	8003b72 <HAL_DMA_Abort+0xd6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a5f      	ldr	r2, [pc, #380]	@ (8003cec <HAL_DMA_Abort+0x250>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_DMA_Abort+0xda>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_DMA_Abort+0xdc>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d013      	beq.n	8003ba4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 021e 	bic.w	r2, r2, #30
 8003b8a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b9a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e00a      	b.n	8003bba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 020e 	bic.w	r2, r2, #14
 8003bb2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a3c      	ldr	r2, [pc, #240]	@ (8003cb0 <HAL_DMA_Abort+0x214>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d072      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003cb4 <HAL_DMA_Abort+0x218>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d06d      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a39      	ldr	r2, [pc, #228]	@ (8003cb8 <HAL_DMA_Abort+0x21c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d068      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a37      	ldr	r2, [pc, #220]	@ (8003cbc <HAL_DMA_Abort+0x220>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d063      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a36      	ldr	r2, [pc, #216]	@ (8003cc0 <HAL_DMA_Abort+0x224>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d05e      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a34      	ldr	r2, [pc, #208]	@ (8003cc4 <HAL_DMA_Abort+0x228>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d059      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a33      	ldr	r2, [pc, #204]	@ (8003cc8 <HAL_DMA_Abort+0x22c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d054      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a31      	ldr	r2, [pc, #196]	@ (8003ccc <HAL_DMA_Abort+0x230>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d04f      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a30      	ldr	r2, [pc, #192]	@ (8003cd0 <HAL_DMA_Abort+0x234>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d04a      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a2e      	ldr	r2, [pc, #184]	@ (8003cd4 <HAL_DMA_Abort+0x238>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d045      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd8 <HAL_DMA_Abort+0x23c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d040      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cdc <HAL_DMA_Abort+0x240>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d03b      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a2a      	ldr	r2, [pc, #168]	@ (8003ce0 <HAL_DMA_Abort+0x244>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d036      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a28      	ldr	r2, [pc, #160]	@ (8003ce4 <HAL_DMA_Abort+0x248>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d031      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a27      	ldr	r2, [pc, #156]	@ (8003ce8 <HAL_DMA_Abort+0x24c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d02c      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a25      	ldr	r2, [pc, #148]	@ (8003cec <HAL_DMA_Abort+0x250>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d027      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a24      	ldr	r2, [pc, #144]	@ (8003cf0 <HAL_DMA_Abort+0x254>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d022      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a22      	ldr	r2, [pc, #136]	@ (8003cf4 <HAL_DMA_Abort+0x258>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d01d      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a21      	ldr	r2, [pc, #132]	@ (8003cf8 <HAL_DMA_Abort+0x25c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d018      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cfc <HAL_DMA_Abort+0x260>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d013      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a1e      	ldr	r2, [pc, #120]	@ (8003d00 <HAL_DMA_Abort+0x264>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00e      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <HAL_DMA_Abort+0x268>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003d08 <HAL_DMA_Abort+0x26c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d004      	beq.n	8003caa <HAL_DMA_Abort+0x20e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	@ (8003d0c <HAL_DMA_Abort+0x270>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d132      	bne.n	8003d10 <HAL_DMA_Abort+0x274>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e031      	b.n	8003d12 <HAL_DMA_Abort+0x276>
 8003cae:	bf00      	nop
 8003cb0:	40020010 	.word	0x40020010
 8003cb4:	40020028 	.word	0x40020028
 8003cb8:	40020040 	.word	0x40020040
 8003cbc:	40020058 	.word	0x40020058
 8003cc0:	40020070 	.word	0x40020070
 8003cc4:	40020088 	.word	0x40020088
 8003cc8:	400200a0 	.word	0x400200a0
 8003ccc:	400200b8 	.word	0x400200b8
 8003cd0:	40020410 	.word	0x40020410
 8003cd4:	40020428 	.word	0x40020428
 8003cd8:	40020440 	.word	0x40020440
 8003cdc:	40020458 	.word	0x40020458
 8003ce0:	40020470 	.word	0x40020470
 8003ce4:	40020488 	.word	0x40020488
 8003ce8:	400204a0 	.word	0x400204a0
 8003cec:	400204b8 	.word	0x400204b8
 8003cf0:	58025408 	.word	0x58025408
 8003cf4:	5802541c 	.word	0x5802541c
 8003cf8:	58025430 	.word	0x58025430
 8003cfc:	58025444 	.word	0x58025444
 8003d00:	58025458 	.word	0x58025458
 8003d04:	5802546c 	.word	0x5802546c
 8003d08:	58025480 	.word	0x58025480
 8003d0c:	58025494 	.word	0x58025494
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ee0 <HAL_DMA_Abort+0x444>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d04a      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a6b      	ldr	r2, [pc, #428]	@ (8003ee4 <HAL_DMA_Abort+0x448>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d045      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ee8 <HAL_DMA_Abort+0x44c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d040      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a68      	ldr	r2, [pc, #416]	@ (8003eec <HAL_DMA_Abort+0x450>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d03b      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a67      	ldr	r2, [pc, #412]	@ (8003ef0 <HAL_DMA_Abort+0x454>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d036      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a65      	ldr	r2, [pc, #404]	@ (8003ef4 <HAL_DMA_Abort+0x458>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d031      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a64      	ldr	r2, [pc, #400]	@ (8003ef8 <HAL_DMA_Abort+0x45c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d02c      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a62      	ldr	r2, [pc, #392]	@ (8003efc <HAL_DMA_Abort+0x460>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d027      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a61      	ldr	r2, [pc, #388]	@ (8003f00 <HAL_DMA_Abort+0x464>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5f      	ldr	r2, [pc, #380]	@ (8003f04 <HAL_DMA_Abort+0x468>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01d      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f08 <HAL_DMA_Abort+0x46c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d018      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a5c      	ldr	r2, [pc, #368]	@ (8003f0c <HAL_DMA_Abort+0x470>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a5b      	ldr	r2, [pc, #364]	@ (8003f10 <HAL_DMA_Abort+0x474>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a59      	ldr	r2, [pc, #356]	@ (8003f14 <HAL_DMA_Abort+0x478>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a58      	ldr	r2, [pc, #352]	@ (8003f18 <HAL_DMA_Abort+0x47c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_DMA_Abort+0x32a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a56      	ldr	r2, [pc, #344]	@ (8003f1c <HAL_DMA_Abort+0x480>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <HAL_DMA_Abort+0x33c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0201 	bic.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	e007      	b.n	8003de8 <HAL_DMA_Abort+0x34c>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003de8:	e013      	b.n	8003e12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dea:	f7fd f9e5 	bl	80011b8 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b05      	cmp	r3, #5
 8003df6:	d90c      	bls.n	8003e12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2203      	movs	r2, #3
 8003e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e12d      	b.n	800406e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e5      	bne.n	8003dea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2f      	ldr	r2, [pc, #188]	@ (8003ee0 <HAL_DMA_Abort+0x444>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d04a      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee4 <HAL_DMA_Abort+0x448>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d045      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee8 <HAL_DMA_Abort+0x44c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d040      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a2a      	ldr	r2, [pc, #168]	@ (8003eec <HAL_DMA_Abort+0x450>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d03b      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a29      	ldr	r2, [pc, #164]	@ (8003ef0 <HAL_DMA_Abort+0x454>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d036      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a27      	ldr	r2, [pc, #156]	@ (8003ef4 <HAL_DMA_Abort+0x458>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d031      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a26      	ldr	r2, [pc, #152]	@ (8003ef8 <HAL_DMA_Abort+0x45c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d02c      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a24      	ldr	r2, [pc, #144]	@ (8003efc <HAL_DMA_Abort+0x460>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d027      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a23      	ldr	r2, [pc, #140]	@ (8003f00 <HAL_DMA_Abort+0x464>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d022      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a21      	ldr	r2, [pc, #132]	@ (8003f04 <HAL_DMA_Abort+0x468>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d01d      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a20      	ldr	r2, [pc, #128]	@ (8003f08 <HAL_DMA_Abort+0x46c>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d018      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1e      	ldr	r2, [pc, #120]	@ (8003f0c <HAL_DMA_Abort+0x470>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d013      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <HAL_DMA_Abort+0x474>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d00e      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8003f14 <HAL_DMA_Abort+0x478>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1a      	ldr	r2, [pc, #104]	@ (8003f18 <HAL_DMA_Abort+0x47c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d004      	beq.n	8003ebe <HAL_DMA_Abort+0x422>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a18      	ldr	r2, [pc, #96]	@ (8003f1c <HAL_DMA_Abort+0x480>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_DMA_Abort+0x426>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_DMA_Abort+0x428>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d02b      	beq.n	8003f20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ecc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed2:	f003 031f 	and.w	r3, r3, #31
 8003ed6:	223f      	movs	r2, #63	@ 0x3f
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	609a      	str	r2, [r3, #8]
 8003ede:	e02a      	b.n	8003f36 <HAL_DMA_Abort+0x49a>
 8003ee0:	40020010 	.word	0x40020010
 8003ee4:	40020028 	.word	0x40020028
 8003ee8:	40020040 	.word	0x40020040
 8003eec:	40020058 	.word	0x40020058
 8003ef0:	40020070 	.word	0x40020070
 8003ef4:	40020088 	.word	0x40020088
 8003ef8:	400200a0 	.word	0x400200a0
 8003efc:	400200b8 	.word	0x400200b8
 8003f00:	40020410 	.word	0x40020410
 8003f04:	40020428 	.word	0x40020428
 8003f08:	40020440 	.word	0x40020440
 8003f0c:	40020458 	.word	0x40020458
 8003f10:	40020470 	.word	0x40020470
 8003f14:	40020488 	.word	0x40020488
 8003f18:	400204a0 	.word	0x400204a0
 8003f1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	2201      	movs	r2, #1
 8003f30:	409a      	lsls	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8004078 <HAL_DMA_Abort+0x5dc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d072      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a4d      	ldr	r2, [pc, #308]	@ (800407c <HAL_DMA_Abort+0x5e0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d06d      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004080 <HAL_DMA_Abort+0x5e4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d068      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a4a      	ldr	r2, [pc, #296]	@ (8004084 <HAL_DMA_Abort+0x5e8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d063      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a49      	ldr	r2, [pc, #292]	@ (8004088 <HAL_DMA_Abort+0x5ec>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d05e      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a47      	ldr	r2, [pc, #284]	@ (800408c <HAL_DMA_Abort+0x5f0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d059      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a46      	ldr	r2, [pc, #280]	@ (8004090 <HAL_DMA_Abort+0x5f4>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d054      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a44      	ldr	r2, [pc, #272]	@ (8004094 <HAL_DMA_Abort+0x5f8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d04f      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a43      	ldr	r2, [pc, #268]	@ (8004098 <HAL_DMA_Abort+0x5fc>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d04a      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a41      	ldr	r2, [pc, #260]	@ (800409c <HAL_DMA_Abort+0x600>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d045      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a40      	ldr	r2, [pc, #256]	@ (80040a0 <HAL_DMA_Abort+0x604>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d040      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80040a4 <HAL_DMA_Abort+0x608>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d03b      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a3d      	ldr	r2, [pc, #244]	@ (80040a8 <HAL_DMA_Abort+0x60c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d036      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80040ac <HAL_DMA_Abort+0x610>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d031      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80040b0 <HAL_DMA_Abort+0x614>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d02c      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a38      	ldr	r2, [pc, #224]	@ (80040b4 <HAL_DMA_Abort+0x618>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d027      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a37      	ldr	r2, [pc, #220]	@ (80040b8 <HAL_DMA_Abort+0x61c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d022      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a35      	ldr	r2, [pc, #212]	@ (80040bc <HAL_DMA_Abort+0x620>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d01d      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a34      	ldr	r2, [pc, #208]	@ (80040c0 <HAL_DMA_Abort+0x624>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d018      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a32      	ldr	r2, [pc, #200]	@ (80040c4 <HAL_DMA_Abort+0x628>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a31      	ldr	r2, [pc, #196]	@ (80040c8 <HAL_DMA_Abort+0x62c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d00e      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2f      	ldr	r2, [pc, #188]	@ (80040cc <HAL_DMA_Abort+0x630>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d009      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2e      	ldr	r2, [pc, #184]	@ (80040d0 <HAL_DMA_Abort+0x634>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d004      	beq.n	8004026 <HAL_DMA_Abort+0x58a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2c      	ldr	r2, [pc, #176]	@ (80040d4 <HAL_DMA_Abort+0x638>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d101      	bne.n	800402a <HAL_DMA_Abort+0x58e>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_DMA_Abort+0x590>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004038:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800404c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004050:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800405a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40020010 	.word	0x40020010
 800407c:	40020028 	.word	0x40020028
 8004080:	40020040 	.word	0x40020040
 8004084:	40020058 	.word	0x40020058
 8004088:	40020070 	.word	0x40020070
 800408c:	40020088 	.word	0x40020088
 8004090:	400200a0 	.word	0x400200a0
 8004094:	400200b8 	.word	0x400200b8
 8004098:	40020410 	.word	0x40020410
 800409c:	40020428 	.word	0x40020428
 80040a0:	40020440 	.word	0x40020440
 80040a4:	40020458 	.word	0x40020458
 80040a8:	40020470 	.word	0x40020470
 80040ac:	40020488 	.word	0x40020488
 80040b0:	400204a0 	.word	0x400204a0
 80040b4:	400204b8 	.word	0x400204b8
 80040b8:	58025408 	.word	0x58025408
 80040bc:	5802541c 	.word	0x5802541c
 80040c0:	58025430 	.word	0x58025430
 80040c4:	58025444 	.word	0x58025444
 80040c8:	58025458 	.word	0x58025458
 80040cc:	5802546c 	.word	0x5802546c
 80040d0:	58025480 	.word	0x58025480
 80040d4:	58025494 	.word	0x58025494

080040d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e237      	b.n	800455a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d004      	beq.n	8004100 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2280      	movs	r2, #128	@ 0x80
 80040fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e22c      	b.n	800455a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a5c      	ldr	r2, [pc, #368]	@ (8004278 <HAL_DMA_Abort_IT+0x1a0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d04a      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5b      	ldr	r2, [pc, #364]	@ (800427c <HAL_DMA_Abort_IT+0x1a4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d045      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a59      	ldr	r2, [pc, #356]	@ (8004280 <HAL_DMA_Abort_IT+0x1a8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d040      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a58      	ldr	r2, [pc, #352]	@ (8004284 <HAL_DMA_Abort_IT+0x1ac>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d03b      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a56      	ldr	r2, [pc, #344]	@ (8004288 <HAL_DMA_Abort_IT+0x1b0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d036      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a55      	ldr	r2, [pc, #340]	@ (800428c <HAL_DMA_Abort_IT+0x1b4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d031      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a53      	ldr	r2, [pc, #332]	@ (8004290 <HAL_DMA_Abort_IT+0x1b8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d02c      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a52      	ldr	r2, [pc, #328]	@ (8004294 <HAL_DMA_Abort_IT+0x1bc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d027      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a50      	ldr	r2, [pc, #320]	@ (8004298 <HAL_DMA_Abort_IT+0x1c0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d022      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a4f      	ldr	r2, [pc, #316]	@ (800429c <HAL_DMA_Abort_IT+0x1c4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d01d      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a4d      	ldr	r2, [pc, #308]	@ (80042a0 <HAL_DMA_Abort_IT+0x1c8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d018      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a4c      	ldr	r2, [pc, #304]	@ (80042a4 <HAL_DMA_Abort_IT+0x1cc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d013      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a4a      	ldr	r2, [pc, #296]	@ (80042a8 <HAL_DMA_Abort_IT+0x1d0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00e      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a49      	ldr	r2, [pc, #292]	@ (80042ac <HAL_DMA_Abort_IT+0x1d4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d009      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a47      	ldr	r2, [pc, #284]	@ (80042b0 <HAL_DMA_Abort_IT+0x1d8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d004      	beq.n	80041a0 <HAL_DMA_Abort_IT+0xc8>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a46      	ldr	r2, [pc, #280]	@ (80042b4 <HAL_DMA_Abort_IT+0x1dc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <HAL_DMA_Abort_IT+0xcc>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_DMA_Abort_IT+0xce>
 80041a4:	2300      	movs	r3, #0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 8086 	beq.w	80042b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2204      	movs	r2, #4
 80041b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a2f      	ldr	r2, [pc, #188]	@ (8004278 <HAL_DMA_Abort_IT+0x1a0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d04a      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a2e      	ldr	r2, [pc, #184]	@ (800427c <HAL_DMA_Abort_IT+0x1a4>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d045      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a2c      	ldr	r2, [pc, #176]	@ (8004280 <HAL_DMA_Abort_IT+0x1a8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d040      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004284 <HAL_DMA_Abort_IT+0x1ac>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d03b      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a29      	ldr	r2, [pc, #164]	@ (8004288 <HAL_DMA_Abort_IT+0x1b0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d036      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a28      	ldr	r2, [pc, #160]	@ (800428c <HAL_DMA_Abort_IT+0x1b4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d031      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a26      	ldr	r2, [pc, #152]	@ (8004290 <HAL_DMA_Abort_IT+0x1b8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d02c      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a25      	ldr	r2, [pc, #148]	@ (8004294 <HAL_DMA_Abort_IT+0x1bc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d027      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a23      	ldr	r2, [pc, #140]	@ (8004298 <HAL_DMA_Abort_IT+0x1c0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d022      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a22      	ldr	r2, [pc, #136]	@ (800429c <HAL_DMA_Abort_IT+0x1c4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d01d      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a20      	ldr	r2, [pc, #128]	@ (80042a0 <HAL_DMA_Abort_IT+0x1c8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d018      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1f      	ldr	r2, [pc, #124]	@ (80042a4 <HAL_DMA_Abort_IT+0x1cc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1d      	ldr	r2, [pc, #116]	@ (80042a8 <HAL_DMA_Abort_IT+0x1d0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1c      	ldr	r2, [pc, #112]	@ (80042ac <HAL_DMA_Abort_IT+0x1d4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d009      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1a      	ldr	r2, [pc, #104]	@ (80042b0 <HAL_DMA_Abort_IT+0x1d8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_DMA_Abort_IT+0x17c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a19      	ldr	r2, [pc, #100]	@ (80042b4 <HAL_DMA_Abort_IT+0x1dc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d108      	bne.n	8004266 <HAL_DMA_Abort_IT+0x18e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0201 	bic.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e178      	b.n	8004558 <HAL_DMA_Abort_IT+0x480>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0201 	bic.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e16f      	b.n	8004558 <HAL_DMA_Abort_IT+0x480>
 8004278:	40020010 	.word	0x40020010
 800427c:	40020028 	.word	0x40020028
 8004280:	40020040 	.word	0x40020040
 8004284:	40020058 	.word	0x40020058
 8004288:	40020070 	.word	0x40020070
 800428c:	40020088 	.word	0x40020088
 8004290:	400200a0 	.word	0x400200a0
 8004294:	400200b8 	.word	0x400200b8
 8004298:	40020410 	.word	0x40020410
 800429c:	40020428 	.word	0x40020428
 80042a0:	40020440 	.word	0x40020440
 80042a4:	40020458 	.word	0x40020458
 80042a8:	40020470 	.word	0x40020470
 80042ac:	40020488 	.word	0x40020488
 80042b0:	400204a0 	.word	0x400204a0
 80042b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 020e 	bic.w	r2, r2, #14
 80042c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a6c      	ldr	r2, [pc, #432]	@ (8004480 <HAL_DMA_Abort_IT+0x3a8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d04a      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6b      	ldr	r2, [pc, #428]	@ (8004484 <HAL_DMA_Abort_IT+0x3ac>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d045      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a69      	ldr	r2, [pc, #420]	@ (8004488 <HAL_DMA_Abort_IT+0x3b0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d040      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a68      	ldr	r2, [pc, #416]	@ (800448c <HAL_DMA_Abort_IT+0x3b4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d03b      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a66      	ldr	r2, [pc, #408]	@ (8004490 <HAL_DMA_Abort_IT+0x3b8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d036      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a65      	ldr	r2, [pc, #404]	@ (8004494 <HAL_DMA_Abort_IT+0x3bc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d031      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a63      	ldr	r2, [pc, #396]	@ (8004498 <HAL_DMA_Abort_IT+0x3c0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d02c      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a62      	ldr	r2, [pc, #392]	@ (800449c <HAL_DMA_Abort_IT+0x3c4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d027      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a60      	ldr	r2, [pc, #384]	@ (80044a0 <HAL_DMA_Abort_IT+0x3c8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d022      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a5f      	ldr	r2, [pc, #380]	@ (80044a4 <HAL_DMA_Abort_IT+0x3cc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d01d      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a5d      	ldr	r2, [pc, #372]	@ (80044a8 <HAL_DMA_Abort_IT+0x3d0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d018      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a5c      	ldr	r2, [pc, #368]	@ (80044ac <HAL_DMA_Abort_IT+0x3d4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d013      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a5a      	ldr	r2, [pc, #360]	@ (80044b0 <HAL_DMA_Abort_IT+0x3d8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a59      	ldr	r2, [pc, #356]	@ (80044b4 <HAL_DMA_Abort_IT+0x3dc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d009      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a57      	ldr	r2, [pc, #348]	@ (80044b8 <HAL_DMA_Abort_IT+0x3e0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <HAL_DMA_Abort_IT+0x290>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a56      	ldr	r2, [pc, #344]	@ (80044bc <HAL_DMA_Abort_IT+0x3e4>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d108      	bne.n	800437a <HAL_DMA_Abort_IT+0x2a2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	e007      	b.n	800438a <HAL_DMA_Abort_IT+0x2b2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0201 	bic.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a3c      	ldr	r2, [pc, #240]	@ (8004480 <HAL_DMA_Abort_IT+0x3a8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d072      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a3a      	ldr	r2, [pc, #232]	@ (8004484 <HAL_DMA_Abort_IT+0x3ac>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d06d      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a39      	ldr	r2, [pc, #228]	@ (8004488 <HAL_DMA_Abort_IT+0x3b0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d068      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a37      	ldr	r2, [pc, #220]	@ (800448c <HAL_DMA_Abort_IT+0x3b4>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d063      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a36      	ldr	r2, [pc, #216]	@ (8004490 <HAL_DMA_Abort_IT+0x3b8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d05e      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a34      	ldr	r2, [pc, #208]	@ (8004494 <HAL_DMA_Abort_IT+0x3bc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d059      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a33      	ldr	r2, [pc, #204]	@ (8004498 <HAL_DMA_Abort_IT+0x3c0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d054      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a31      	ldr	r2, [pc, #196]	@ (800449c <HAL_DMA_Abort_IT+0x3c4>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d04f      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a30      	ldr	r2, [pc, #192]	@ (80044a0 <HAL_DMA_Abort_IT+0x3c8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d04a      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2e      	ldr	r2, [pc, #184]	@ (80044a4 <HAL_DMA_Abort_IT+0x3cc>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d045      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2d      	ldr	r2, [pc, #180]	@ (80044a8 <HAL_DMA_Abort_IT+0x3d0>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d040      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a2b      	ldr	r2, [pc, #172]	@ (80044ac <HAL_DMA_Abort_IT+0x3d4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d03b      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a2a      	ldr	r2, [pc, #168]	@ (80044b0 <HAL_DMA_Abort_IT+0x3d8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d036      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a28      	ldr	r2, [pc, #160]	@ (80044b4 <HAL_DMA_Abort_IT+0x3dc>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d031      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a27      	ldr	r2, [pc, #156]	@ (80044b8 <HAL_DMA_Abort_IT+0x3e0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d02c      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a25      	ldr	r2, [pc, #148]	@ (80044bc <HAL_DMA_Abort_IT+0x3e4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d027      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a24      	ldr	r2, [pc, #144]	@ (80044c0 <HAL_DMA_Abort_IT+0x3e8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d022      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a22      	ldr	r2, [pc, #136]	@ (80044c4 <HAL_DMA_Abort_IT+0x3ec>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d01d      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a21      	ldr	r2, [pc, #132]	@ (80044c8 <HAL_DMA_Abort_IT+0x3f0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d018      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	@ (80044cc <HAL_DMA_Abort_IT+0x3f4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d013      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1e      	ldr	r2, [pc, #120]	@ (80044d0 <HAL_DMA_Abort_IT+0x3f8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00e      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1c      	ldr	r2, [pc, #112]	@ (80044d4 <HAL_DMA_Abort_IT+0x3fc>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d009      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1b      	ldr	r2, [pc, #108]	@ (80044d8 <HAL_DMA_Abort_IT+0x400>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d004      	beq.n	800447a <HAL_DMA_Abort_IT+0x3a2>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a19      	ldr	r2, [pc, #100]	@ (80044dc <HAL_DMA_Abort_IT+0x404>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d132      	bne.n	80044e0 <HAL_DMA_Abort_IT+0x408>
 800447a:	2301      	movs	r3, #1
 800447c:	e031      	b.n	80044e2 <HAL_DMA_Abort_IT+0x40a>
 800447e:	bf00      	nop
 8004480:	40020010 	.word	0x40020010
 8004484:	40020028 	.word	0x40020028
 8004488:	40020040 	.word	0x40020040
 800448c:	40020058 	.word	0x40020058
 8004490:	40020070 	.word	0x40020070
 8004494:	40020088 	.word	0x40020088
 8004498:	400200a0 	.word	0x400200a0
 800449c:	400200b8 	.word	0x400200b8
 80044a0:	40020410 	.word	0x40020410
 80044a4:	40020428 	.word	0x40020428
 80044a8:	40020440 	.word	0x40020440
 80044ac:	40020458 	.word	0x40020458
 80044b0:	40020470 	.word	0x40020470
 80044b4:	40020488 	.word	0x40020488
 80044b8:	400204a0 	.word	0x400204a0
 80044bc:	400204b8 	.word	0x400204b8
 80044c0:	58025408 	.word	0x58025408
 80044c4:	5802541c 	.word	0x5802541c
 80044c8:	58025430 	.word	0x58025430
 80044cc:	58025444 	.word	0x58025444
 80044d0:	58025458 	.word	0x58025458
 80044d4:	5802546c 	.word	0x5802546c
 80044d8:	58025480 	.word	0x58025480
 80044dc:	58025494 	.word	0x58025494
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d028      	beq.n	8004538 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	2201      	movs	r2, #1
 8004506:	409a      	lsls	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004514:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00c      	beq.n	8004538 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800452c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004536:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454c:	2b00      	cmp	r3, #0
 800454e:	d003      	beq.n	8004558 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop

08004564 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08a      	sub	sp, #40	@ 0x28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004570:	4b67      	ldr	r3, [pc, #412]	@ (8004710 <HAL_DMA_IRQHandler+0x1ac>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a67      	ldr	r2, [pc, #412]	@ (8004714 <HAL_DMA_IRQHandler+0x1b0>)
 8004576:	fba2 2303 	umull	r2, r3, r2, r3
 800457a:	0a9b      	lsrs	r3, r3, #10
 800457c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004582:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5f      	ldr	r2, [pc, #380]	@ (8004718 <HAL_DMA_IRQHandler+0x1b4>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d04a      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a5d      	ldr	r2, [pc, #372]	@ (800471c <HAL_DMA_IRQHandler+0x1b8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d045      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a5c      	ldr	r2, [pc, #368]	@ (8004720 <HAL_DMA_IRQHandler+0x1bc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d040      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a5a      	ldr	r2, [pc, #360]	@ (8004724 <HAL_DMA_IRQHandler+0x1c0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d03b      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a59      	ldr	r2, [pc, #356]	@ (8004728 <HAL_DMA_IRQHandler+0x1c4>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d036      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a57      	ldr	r2, [pc, #348]	@ (800472c <HAL_DMA_IRQHandler+0x1c8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d031      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a56      	ldr	r2, [pc, #344]	@ (8004730 <HAL_DMA_IRQHandler+0x1cc>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d02c      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a54      	ldr	r2, [pc, #336]	@ (8004734 <HAL_DMA_IRQHandler+0x1d0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d027      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a53      	ldr	r2, [pc, #332]	@ (8004738 <HAL_DMA_IRQHandler+0x1d4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d022      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a51      	ldr	r2, [pc, #324]	@ (800473c <HAL_DMA_IRQHandler+0x1d8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01d      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a50      	ldr	r2, [pc, #320]	@ (8004740 <HAL_DMA_IRQHandler+0x1dc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d018      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4e      	ldr	r2, [pc, #312]	@ (8004744 <HAL_DMA_IRQHandler+0x1e0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d013      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4d      	ldr	r2, [pc, #308]	@ (8004748 <HAL_DMA_IRQHandler+0x1e4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00e      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a4b      	ldr	r2, [pc, #300]	@ (800474c <HAL_DMA_IRQHandler+0x1e8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a4a      	ldr	r2, [pc, #296]	@ (8004750 <HAL_DMA_IRQHandler+0x1ec>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d004      	beq.n	8004636 <HAL_DMA_IRQHandler+0xd2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a48      	ldr	r2, [pc, #288]	@ (8004754 <HAL_DMA_IRQHandler+0x1f0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d101      	bne.n	800463a <HAL_DMA_IRQHandler+0xd6>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <HAL_DMA_IRQHandler+0xd8>
 800463a:	2300      	movs	r3, #0
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 842b 	beq.w	8004e98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2208      	movs	r2, #8
 800464c:	409a      	lsls	r2, r3
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4013      	ands	r3, r2
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80a2 	beq.w	800479c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2e      	ldr	r2, [pc, #184]	@ (8004718 <HAL_DMA_IRQHandler+0x1b4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d04a      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2d      	ldr	r2, [pc, #180]	@ (800471c <HAL_DMA_IRQHandler+0x1b8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d045      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a2b      	ldr	r2, [pc, #172]	@ (8004720 <HAL_DMA_IRQHandler+0x1bc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d040      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2a      	ldr	r2, [pc, #168]	@ (8004724 <HAL_DMA_IRQHandler+0x1c0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d03b      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a28      	ldr	r2, [pc, #160]	@ (8004728 <HAL_DMA_IRQHandler+0x1c4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d036      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a27      	ldr	r2, [pc, #156]	@ (800472c <HAL_DMA_IRQHandler+0x1c8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d031      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a25      	ldr	r2, [pc, #148]	@ (8004730 <HAL_DMA_IRQHandler+0x1cc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d02c      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a24      	ldr	r2, [pc, #144]	@ (8004734 <HAL_DMA_IRQHandler+0x1d0>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d027      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a22      	ldr	r2, [pc, #136]	@ (8004738 <HAL_DMA_IRQHandler+0x1d4>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d022      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a21      	ldr	r2, [pc, #132]	@ (800473c <HAL_DMA_IRQHandler+0x1d8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d01d      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004740 <HAL_DMA_IRQHandler+0x1dc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004744 <HAL_DMA_IRQHandler+0x1e0>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004748 <HAL_DMA_IRQHandler+0x1e4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a1b      	ldr	r2, [pc, #108]	@ (800474c <HAL_DMA_IRQHandler+0x1e8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <HAL_DMA_IRQHandler+0x1ec>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x194>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a18      	ldr	r2, [pc, #96]	@ (8004754 <HAL_DMA_IRQHandler+0x1f0>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d12f      	bne.n	8004758 <HAL_DMA_IRQHandler+0x1f4>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	bf14      	ite	ne
 8004706:	2301      	movne	r3, #1
 8004708:	2300      	moveq	r3, #0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	e02e      	b.n	800476c <HAL_DMA_IRQHandler+0x208>
 800470e:	bf00      	nop
 8004710:	24000000 	.word	0x24000000
 8004714:	1b4e81b5 	.word	0x1b4e81b5
 8004718:	40020010 	.word	0x40020010
 800471c:	40020028 	.word	0x40020028
 8004720:	40020040 	.word	0x40020040
 8004724:	40020058 	.word	0x40020058
 8004728:	40020070 	.word	0x40020070
 800472c:	40020088 	.word	0x40020088
 8004730:	400200a0 	.word	0x400200a0
 8004734:	400200b8 	.word	0x400200b8
 8004738:	40020410 	.word	0x40020410
 800473c:	40020428 	.word	0x40020428
 8004740:	40020440 	.word	0x40020440
 8004744:	40020458 	.word	0x40020458
 8004748:	40020470 	.word	0x40020470
 800474c:	40020488 	.word	0x40020488
 8004750:	400204a0 	.word	0x400204a0
 8004754:	400204b8 	.word	0x400204b8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d015      	beq.n	800479c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0204 	bic.w	r2, r2, #4
 800477e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004784:	f003 031f 	and.w	r3, r3, #31
 8004788:	2208      	movs	r2, #8
 800478a:	409a      	lsls	r2, r3
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004794:	f043 0201 	orr.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	fa22 f303 	lsr.w	r3, r2, r3
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d06e      	beq.n	8004890 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a69      	ldr	r2, [pc, #420]	@ (800495c <HAL_DMA_IRQHandler+0x3f8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d04a      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a67      	ldr	r2, [pc, #412]	@ (8004960 <HAL_DMA_IRQHandler+0x3fc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d045      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a66      	ldr	r2, [pc, #408]	@ (8004964 <HAL_DMA_IRQHandler+0x400>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d040      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a64      	ldr	r2, [pc, #400]	@ (8004968 <HAL_DMA_IRQHandler+0x404>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d03b      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a63      	ldr	r2, [pc, #396]	@ (800496c <HAL_DMA_IRQHandler+0x408>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d036      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a61      	ldr	r2, [pc, #388]	@ (8004970 <HAL_DMA_IRQHandler+0x40c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d031      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a60      	ldr	r2, [pc, #384]	@ (8004974 <HAL_DMA_IRQHandler+0x410>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d02c      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004978 <HAL_DMA_IRQHandler+0x414>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d027      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a5d      	ldr	r2, [pc, #372]	@ (800497c <HAL_DMA_IRQHandler+0x418>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d022      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a5b      	ldr	r2, [pc, #364]	@ (8004980 <HAL_DMA_IRQHandler+0x41c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01d      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a5a      	ldr	r2, [pc, #360]	@ (8004984 <HAL_DMA_IRQHandler+0x420>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a58      	ldr	r2, [pc, #352]	@ (8004988 <HAL_DMA_IRQHandler+0x424>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d013      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a57      	ldr	r2, [pc, #348]	@ (800498c <HAL_DMA_IRQHandler+0x428>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a55      	ldr	r2, [pc, #340]	@ (8004990 <HAL_DMA_IRQHandler+0x42c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a54      	ldr	r2, [pc, #336]	@ (8004994 <HAL_DMA_IRQHandler+0x430>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_DMA_IRQHandler+0x2ee>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a52      	ldr	r2, [pc, #328]	@ (8004998 <HAL_DMA_IRQHandler+0x434>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10a      	bne.n	8004868 <HAL_DMA_IRQHandler+0x304>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	e003      	b.n	8004870 <HAL_DMA_IRQHandler+0x30c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	2201      	movs	r2, #1
 800487e:	409a      	lsls	r2, r3
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004888:	f043 0202 	orr.w	r2, r3, #2
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004894:	f003 031f 	and.w	r3, r3, #31
 8004898:	2204      	movs	r2, #4
 800489a:	409a      	lsls	r2, r3
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	4013      	ands	r3, r2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 808f 	beq.w	80049c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a2c      	ldr	r2, [pc, #176]	@ (800495c <HAL_DMA_IRQHandler+0x3f8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d04a      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a2a      	ldr	r2, [pc, #168]	@ (8004960 <HAL_DMA_IRQHandler+0x3fc>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d045      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a29      	ldr	r2, [pc, #164]	@ (8004964 <HAL_DMA_IRQHandler+0x400>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d040      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a27      	ldr	r2, [pc, #156]	@ (8004968 <HAL_DMA_IRQHandler+0x404>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d03b      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a26      	ldr	r2, [pc, #152]	@ (800496c <HAL_DMA_IRQHandler+0x408>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d036      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a24      	ldr	r2, [pc, #144]	@ (8004970 <HAL_DMA_IRQHandler+0x40c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d031      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a23      	ldr	r2, [pc, #140]	@ (8004974 <HAL_DMA_IRQHandler+0x410>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d02c      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a21      	ldr	r2, [pc, #132]	@ (8004978 <HAL_DMA_IRQHandler+0x414>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d027      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a20      	ldr	r2, [pc, #128]	@ (800497c <HAL_DMA_IRQHandler+0x418>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d022      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1e      	ldr	r2, [pc, #120]	@ (8004980 <HAL_DMA_IRQHandler+0x41c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01d      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a1d      	ldr	r2, [pc, #116]	@ (8004984 <HAL_DMA_IRQHandler+0x420>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d018      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a1b      	ldr	r2, [pc, #108]	@ (8004988 <HAL_DMA_IRQHandler+0x424>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1a      	ldr	r2, [pc, #104]	@ (800498c <HAL_DMA_IRQHandler+0x428>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d00e      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a18      	ldr	r2, [pc, #96]	@ (8004990 <HAL_DMA_IRQHandler+0x42c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d009      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a17      	ldr	r2, [pc, #92]	@ (8004994 <HAL_DMA_IRQHandler+0x430>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_DMA_IRQHandler+0x3e2>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a15      	ldr	r2, [pc, #84]	@ (8004998 <HAL_DMA_IRQHandler+0x434>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d12a      	bne.n	800499c <HAL_DMA_IRQHandler+0x438>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf14      	ite	ne
 8004954:	2301      	movne	r3, #1
 8004956:	2300      	moveq	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e023      	b.n	80049a4 <HAL_DMA_IRQHandler+0x440>
 800495c:	40020010 	.word	0x40020010
 8004960:	40020028 	.word	0x40020028
 8004964:	40020040 	.word	0x40020040
 8004968:	40020058 	.word	0x40020058
 800496c:	40020070 	.word	0x40020070
 8004970:	40020088 	.word	0x40020088
 8004974:	400200a0 	.word	0x400200a0
 8004978:	400200b8 	.word	0x400200b8
 800497c:	40020410 	.word	0x40020410
 8004980:	40020428 	.word	0x40020428
 8004984:	40020440 	.word	0x40020440
 8004988:	40020458 	.word	0x40020458
 800498c:	40020470 	.word	0x40020470
 8004990:	40020488 	.word	0x40020488
 8004994:	400204a0 	.word	0x400204a0
 8004998:	400204b8 	.word	0x400204b8
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2204      	movs	r2, #4
 80049b2:	409a      	lsls	r2, r3
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049bc:	f043 0204 	orr.w	r2, r3, #4
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	2210      	movs	r2, #16
 80049ce:	409a      	lsls	r2, r3
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80a6 	beq.w	8004b26 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a85      	ldr	r2, [pc, #532]	@ (8004bf4 <HAL_DMA_IRQHandler+0x690>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d04a      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a83      	ldr	r2, [pc, #524]	@ (8004bf8 <HAL_DMA_IRQHandler+0x694>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d045      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a82      	ldr	r2, [pc, #520]	@ (8004bfc <HAL_DMA_IRQHandler+0x698>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d040      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a80      	ldr	r2, [pc, #512]	@ (8004c00 <HAL_DMA_IRQHandler+0x69c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d03b      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a7f      	ldr	r2, [pc, #508]	@ (8004c04 <HAL_DMA_IRQHandler+0x6a0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d036      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a7d      	ldr	r2, [pc, #500]	@ (8004c08 <HAL_DMA_IRQHandler+0x6a4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d031      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c0c <HAL_DMA_IRQHandler+0x6a8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d02c      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a7a      	ldr	r2, [pc, #488]	@ (8004c10 <HAL_DMA_IRQHandler+0x6ac>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d027      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a79      	ldr	r2, [pc, #484]	@ (8004c14 <HAL_DMA_IRQHandler+0x6b0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d022      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a77      	ldr	r2, [pc, #476]	@ (8004c18 <HAL_DMA_IRQHandler+0x6b4>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d01d      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a76      	ldr	r2, [pc, #472]	@ (8004c1c <HAL_DMA_IRQHandler+0x6b8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d018      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a74      	ldr	r2, [pc, #464]	@ (8004c20 <HAL_DMA_IRQHandler+0x6bc>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d013      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a73      	ldr	r2, [pc, #460]	@ (8004c24 <HAL_DMA_IRQHandler+0x6c0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00e      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a71      	ldr	r2, [pc, #452]	@ (8004c28 <HAL_DMA_IRQHandler+0x6c4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d009      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a70      	ldr	r2, [pc, #448]	@ (8004c2c <HAL_DMA_IRQHandler+0x6c8>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_DMA_IRQHandler+0x516>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a6e      	ldr	r2, [pc, #440]	@ (8004c30 <HAL_DMA_IRQHandler+0x6cc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10a      	bne.n	8004a90 <HAL_DMA_IRQHandler+0x52c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf14      	ite	ne
 8004a88:	2301      	movne	r3, #1
 8004a8a:	2300      	moveq	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e009      	b.n	8004aa4 <HAL_DMA_IRQHandler+0x540>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d03e      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	2210      	movs	r2, #16
 8004ab2:	409a      	lsls	r2, r3
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d018      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d108      	bne.n	8004ae6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d024      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
 8004ae4:	e01f      	b.n	8004b26 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01b      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
 8004af6:	e016      	b.n	8004b26 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d107      	bne.n	8004b16 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0208 	bic.w	r2, r2, #8
 8004b14:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2220      	movs	r2, #32
 8004b30:	409a      	lsls	r2, r3
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	4013      	ands	r3, r2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8110 	beq.w	8004d5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a2c      	ldr	r2, [pc, #176]	@ (8004bf4 <HAL_DMA_IRQHandler+0x690>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d04a      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2b      	ldr	r2, [pc, #172]	@ (8004bf8 <HAL_DMA_IRQHandler+0x694>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d045      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a29      	ldr	r2, [pc, #164]	@ (8004bfc <HAL_DMA_IRQHandler+0x698>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d040      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a28      	ldr	r2, [pc, #160]	@ (8004c00 <HAL_DMA_IRQHandler+0x69c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d03b      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a26      	ldr	r2, [pc, #152]	@ (8004c04 <HAL_DMA_IRQHandler+0x6a0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d036      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a25      	ldr	r2, [pc, #148]	@ (8004c08 <HAL_DMA_IRQHandler+0x6a4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d031      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a23      	ldr	r2, [pc, #140]	@ (8004c0c <HAL_DMA_IRQHandler+0x6a8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02c      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a22      	ldr	r2, [pc, #136]	@ (8004c10 <HAL_DMA_IRQHandler+0x6ac>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d027      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a20      	ldr	r2, [pc, #128]	@ (8004c14 <HAL_DMA_IRQHandler+0x6b0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d022      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004c18 <HAL_DMA_IRQHandler+0x6b4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d01d      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c1c <HAL_DMA_IRQHandler+0x6b8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d018      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a1c      	ldr	r2, [pc, #112]	@ (8004c20 <HAL_DMA_IRQHandler+0x6bc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d013      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a1a      	ldr	r2, [pc, #104]	@ (8004c24 <HAL_DMA_IRQHandler+0x6c0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00e      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a19      	ldr	r2, [pc, #100]	@ (8004c28 <HAL_DMA_IRQHandler+0x6c4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a17      	ldr	r2, [pc, #92]	@ (8004c2c <HAL_DMA_IRQHandler+0x6c8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x678>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a16      	ldr	r2, [pc, #88]	@ (8004c30 <HAL_DMA_IRQHandler+0x6cc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d12b      	bne.n	8004c34 <HAL_DMA_IRQHandler+0x6d0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0310 	and.w	r3, r3, #16
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	bf14      	ite	ne
 8004bea:	2301      	movne	r3, #1
 8004bec:	2300      	moveq	r3, #0
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	e02a      	b.n	8004c48 <HAL_DMA_IRQHandler+0x6e4>
 8004bf2:	bf00      	nop
 8004bf4:	40020010 	.word	0x40020010
 8004bf8:	40020028 	.word	0x40020028
 8004bfc:	40020040 	.word	0x40020040
 8004c00:	40020058 	.word	0x40020058
 8004c04:	40020070 	.word	0x40020070
 8004c08:	40020088 	.word	0x40020088
 8004c0c:	400200a0 	.word	0x400200a0
 8004c10:	400200b8 	.word	0x400200b8
 8004c14:	40020410 	.word	0x40020410
 8004c18:	40020428 	.word	0x40020428
 8004c1c:	40020440 	.word	0x40020440
 8004c20:	40020458 	.word	0x40020458
 8004c24:	40020470 	.word	0x40020470
 8004c28:	40020488 	.word	0x40020488
 8004c2c:	400204a0 	.word	0x400204a0
 8004c30:	400204b8 	.word	0x400204b8
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bf14      	ite	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	2300      	moveq	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8087 	beq.w	8004d5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c52:	f003 031f 	and.w	r3, r3, #31
 8004c56:	2220      	movs	r2, #32
 8004c58:	409a      	lsls	r2, r3
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d139      	bne.n	8004cde <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0216 	bic.w	r2, r2, #22
 8004c78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <HAL_DMA_IRQHandler+0x736>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0208 	bic.w	r2, r2, #8
 8004ca8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	223f      	movs	r2, #63	@ 0x3f
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8382 	beq.w	80053d8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	4798      	blx	r3
          }
          return;
 8004cdc:	e37c      	b.n	80053d8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d018      	beq.n	8004d1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d108      	bne.n	8004d0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d02c      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
 8004d0a:	e027      	b.n	8004d5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d023      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	4798      	blx	r3
 8004d1c:	e01e      	b.n	8004d5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10f      	bne.n	8004d4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0210 	bic.w	r2, r2, #16
 8004d3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f000 833e 	beq.w	80053e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8088 	beq.w	8004e84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2204      	movs	r2, #4
 8004d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a89      	ldr	r2, [pc, #548]	@ (8004fa8 <HAL_DMA_IRQHandler+0xa44>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d04a      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a88      	ldr	r2, [pc, #544]	@ (8004fac <HAL_DMA_IRQHandler+0xa48>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d045      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a86      	ldr	r2, [pc, #536]	@ (8004fb0 <HAL_DMA_IRQHandler+0xa4c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d040      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a85      	ldr	r2, [pc, #532]	@ (8004fb4 <HAL_DMA_IRQHandler+0xa50>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d03b      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a83      	ldr	r2, [pc, #524]	@ (8004fb8 <HAL_DMA_IRQHandler+0xa54>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d036      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a82      	ldr	r2, [pc, #520]	@ (8004fbc <HAL_DMA_IRQHandler+0xa58>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d031      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a80      	ldr	r2, [pc, #512]	@ (8004fc0 <HAL_DMA_IRQHandler+0xa5c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d02c      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a7f      	ldr	r2, [pc, #508]	@ (8004fc4 <HAL_DMA_IRQHandler+0xa60>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d027      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a7d      	ldr	r2, [pc, #500]	@ (8004fc8 <HAL_DMA_IRQHandler+0xa64>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d022      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a7c      	ldr	r2, [pc, #496]	@ (8004fcc <HAL_DMA_IRQHandler+0xa68>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d01d      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7a      	ldr	r2, [pc, #488]	@ (8004fd0 <HAL_DMA_IRQHandler+0xa6c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d018      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a79      	ldr	r2, [pc, #484]	@ (8004fd4 <HAL_DMA_IRQHandler+0xa70>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a77      	ldr	r2, [pc, #476]	@ (8004fd8 <HAL_DMA_IRQHandler+0xa74>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00e      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a76      	ldr	r2, [pc, #472]	@ (8004fdc <HAL_DMA_IRQHandler+0xa78>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d009      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a74      	ldr	r2, [pc, #464]	@ (8004fe0 <HAL_DMA_IRQHandler+0xa7c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <HAL_DMA_IRQHandler+0x8b8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a73      	ldr	r2, [pc, #460]	@ (8004fe4 <HAL_DMA_IRQHandler+0xa80>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d108      	bne.n	8004e2e <HAL_DMA_IRQHandler+0x8ca>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	e007      	b.n	8004e3e <HAL_DMA_IRQHandler+0x8da>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0201 	bic.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3301      	adds	r3, #1
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d307      	bcc.n	8004e5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f2      	bne.n	8004e3e <HAL_DMA_IRQHandler+0x8da>
 8004e58:	e000      	b.n	8004e5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004e5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d004      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004e72:	e003      	b.n	8004e7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f000 82aa 	beq.w	80053e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3
 8004e96:	e2a4      	b.n	80053e2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a52      	ldr	r2, [pc, #328]	@ (8004fe8 <HAL_DMA_IRQHandler+0xa84>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d04a      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a51      	ldr	r2, [pc, #324]	@ (8004fec <HAL_DMA_IRQHandler+0xa88>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d045      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a4f      	ldr	r2, [pc, #316]	@ (8004ff0 <HAL_DMA_IRQHandler+0xa8c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d040      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a4e      	ldr	r2, [pc, #312]	@ (8004ff4 <HAL_DMA_IRQHandler+0xa90>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d03b      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8004ff8 <HAL_DMA_IRQHandler+0xa94>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d036      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a4b      	ldr	r2, [pc, #300]	@ (8004ffc <HAL_DMA_IRQHandler+0xa98>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d031      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a49      	ldr	r2, [pc, #292]	@ (8005000 <HAL_DMA_IRQHandler+0xa9c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02c      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a48      	ldr	r2, [pc, #288]	@ (8005004 <HAL_DMA_IRQHandler+0xaa0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d027      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a46      	ldr	r2, [pc, #280]	@ (8005008 <HAL_DMA_IRQHandler+0xaa4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d022      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a45      	ldr	r2, [pc, #276]	@ (800500c <HAL_DMA_IRQHandler+0xaa8>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d01d      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a43      	ldr	r2, [pc, #268]	@ (8005010 <HAL_DMA_IRQHandler+0xaac>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d018      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a42      	ldr	r2, [pc, #264]	@ (8005014 <HAL_DMA_IRQHandler+0xab0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a40      	ldr	r2, [pc, #256]	@ (8005018 <HAL_DMA_IRQHandler+0xab4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00e      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800501c <HAL_DMA_IRQHandler+0xab8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a3d      	ldr	r2, [pc, #244]	@ (8005020 <HAL_DMA_IRQHandler+0xabc>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d004      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x9d4>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a3c      	ldr	r2, [pc, #240]	@ (8005024 <HAL_DMA_IRQHandler+0xac0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d101      	bne.n	8004f3c <HAL_DMA_IRQHandler+0x9d8>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <HAL_DMA_IRQHandler+0x9da>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 824f 	beq.w	80053e2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	2204      	movs	r2, #4
 8004f56:	409a      	lsls	r2, r3
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 80dd 	beq.w	800511c <HAL_DMA_IRQHandler+0xbb8>
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80d7 	beq.w	800511c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	2204      	movs	r2, #4
 8004f78:	409a      	lsls	r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d059      	beq.n	800503c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d14a      	bne.n	8005028 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8220 	beq.w	80053dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa4:	e21a      	b.n	80053dc <HAL_DMA_IRQHandler+0xe78>
 8004fa6:	bf00      	nop
 8004fa8:	40020010 	.word	0x40020010
 8004fac:	40020028 	.word	0x40020028
 8004fb0:	40020040 	.word	0x40020040
 8004fb4:	40020058 	.word	0x40020058
 8004fb8:	40020070 	.word	0x40020070
 8004fbc:	40020088 	.word	0x40020088
 8004fc0:	400200a0 	.word	0x400200a0
 8004fc4:	400200b8 	.word	0x400200b8
 8004fc8:	40020410 	.word	0x40020410
 8004fcc:	40020428 	.word	0x40020428
 8004fd0:	40020440 	.word	0x40020440
 8004fd4:	40020458 	.word	0x40020458
 8004fd8:	40020470 	.word	0x40020470
 8004fdc:	40020488 	.word	0x40020488
 8004fe0:	400204a0 	.word	0x400204a0
 8004fe4:	400204b8 	.word	0x400204b8
 8004fe8:	48022c08 	.word	0x48022c08
 8004fec:	48022c1c 	.word	0x48022c1c
 8004ff0:	48022c30 	.word	0x48022c30
 8004ff4:	48022c44 	.word	0x48022c44
 8004ff8:	48022c58 	.word	0x48022c58
 8004ffc:	48022c6c 	.word	0x48022c6c
 8005000:	48022c80 	.word	0x48022c80
 8005004:	48022c94 	.word	0x48022c94
 8005008:	58025408 	.word	0x58025408
 800500c:	5802541c 	.word	0x5802541c
 8005010:	58025430 	.word	0x58025430
 8005014:	58025444 	.word	0x58025444
 8005018:	58025458 	.word	0x58025458
 800501c:	5802546c 	.word	0x5802546c
 8005020:	58025480 	.word	0x58025480
 8005024:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 81d5 	beq.w	80053dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800503a:	e1cf      	b.n	80053dc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f003 0320 	and.w	r3, r3, #32
 8005042:	2b00      	cmp	r3, #0
 8005044:	d160      	bne.n	8005108 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a7f      	ldr	r2, [pc, #508]	@ (8005248 <HAL_DMA_IRQHandler+0xce4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d04a      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a7d      	ldr	r2, [pc, #500]	@ (800524c <HAL_DMA_IRQHandler+0xce8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d045      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a7c      	ldr	r2, [pc, #496]	@ (8005250 <HAL_DMA_IRQHandler+0xcec>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d040      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a7a      	ldr	r2, [pc, #488]	@ (8005254 <HAL_DMA_IRQHandler+0xcf0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d03b      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a79      	ldr	r2, [pc, #484]	@ (8005258 <HAL_DMA_IRQHandler+0xcf4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d036      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a77      	ldr	r2, [pc, #476]	@ (800525c <HAL_DMA_IRQHandler+0xcf8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d031      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a76      	ldr	r2, [pc, #472]	@ (8005260 <HAL_DMA_IRQHandler+0xcfc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d02c      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a74      	ldr	r2, [pc, #464]	@ (8005264 <HAL_DMA_IRQHandler+0xd00>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d027      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a73      	ldr	r2, [pc, #460]	@ (8005268 <HAL_DMA_IRQHandler+0xd04>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d022      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a71      	ldr	r2, [pc, #452]	@ (800526c <HAL_DMA_IRQHandler+0xd08>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d01d      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a70      	ldr	r2, [pc, #448]	@ (8005270 <HAL_DMA_IRQHandler+0xd0c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d018      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a6e      	ldr	r2, [pc, #440]	@ (8005274 <HAL_DMA_IRQHandler+0xd10>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005278 <HAL_DMA_IRQHandler+0xd14>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a6b      	ldr	r2, [pc, #428]	@ (800527c <HAL_DMA_IRQHandler+0xd18>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d009      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005280 <HAL_DMA_IRQHandler+0xd1c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_DMA_IRQHandler+0xb82>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a68      	ldr	r2, [pc, #416]	@ (8005284 <HAL_DMA_IRQHandler+0xd20>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d108      	bne.n	80050f8 <HAL_DMA_IRQHandler+0xb94>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0208 	bic.w	r2, r2, #8
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e007      	b.n	8005108 <HAL_DMA_IRQHandler+0xba4>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0204 	bic.w	r2, r2, #4
 8005106:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8165 	beq.w	80053dc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800511a:	e15f      	b.n	80053dc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	2202      	movs	r2, #2
 8005126:	409a      	lsls	r2, r3
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	4013      	ands	r3, r2
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80c5 	beq.w	80052bc <HAL_DMA_IRQHandler+0xd58>
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80bf 	beq.w	80052bc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	2202      	movs	r2, #2
 8005148:	409a      	lsls	r2, r3
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d018      	beq.n	800518a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 813a 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005174:	e134      	b.n	80053e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8130 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005188:	e12a      	b.n	80053e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	f040 8089 	bne.w	80052a8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a2b      	ldr	r2, [pc, #172]	@ (8005248 <HAL_DMA_IRQHandler+0xce4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d04a      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a29      	ldr	r2, [pc, #164]	@ (800524c <HAL_DMA_IRQHandler+0xce8>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d045      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a28      	ldr	r2, [pc, #160]	@ (8005250 <HAL_DMA_IRQHandler+0xcec>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d040      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a26      	ldr	r2, [pc, #152]	@ (8005254 <HAL_DMA_IRQHandler+0xcf0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d03b      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a25      	ldr	r2, [pc, #148]	@ (8005258 <HAL_DMA_IRQHandler+0xcf4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d036      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a23      	ldr	r2, [pc, #140]	@ (800525c <HAL_DMA_IRQHandler+0xcf8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d031      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a22      	ldr	r2, [pc, #136]	@ (8005260 <HAL_DMA_IRQHandler+0xcfc>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d02c      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a20      	ldr	r2, [pc, #128]	@ (8005264 <HAL_DMA_IRQHandler+0xd00>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d027      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <HAL_DMA_IRQHandler+0xd04>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d022      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a1d      	ldr	r2, [pc, #116]	@ (800526c <HAL_DMA_IRQHandler+0xd08>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d01d      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <HAL_DMA_IRQHandler+0xd0c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d018      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a1a      	ldr	r2, [pc, #104]	@ (8005274 <HAL_DMA_IRQHandler+0xd10>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d013      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a19      	ldr	r2, [pc, #100]	@ (8005278 <HAL_DMA_IRQHandler+0xd14>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00e      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a17      	ldr	r2, [pc, #92]	@ (800527c <HAL_DMA_IRQHandler+0xd18>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d009      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a16      	ldr	r2, [pc, #88]	@ (8005280 <HAL_DMA_IRQHandler+0xd1c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d004      	beq.n	8005236 <HAL_DMA_IRQHandler+0xcd2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a14      	ldr	r2, [pc, #80]	@ (8005284 <HAL_DMA_IRQHandler+0xd20>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d128      	bne.n	8005288 <HAL_DMA_IRQHandler+0xd24>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0214 	bic.w	r2, r2, #20
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	e027      	b.n	8005298 <HAL_DMA_IRQHandler+0xd34>
 8005248:	40020010 	.word	0x40020010
 800524c:	40020028 	.word	0x40020028
 8005250:	40020040 	.word	0x40020040
 8005254:	40020058 	.word	0x40020058
 8005258:	40020070 	.word	0x40020070
 800525c:	40020088 	.word	0x40020088
 8005260:	400200a0 	.word	0x400200a0
 8005264:	400200b8 	.word	0x400200b8
 8005268:	40020410 	.word	0x40020410
 800526c:	40020428 	.word	0x40020428
 8005270:	40020440 	.word	0x40020440
 8005274:	40020458 	.word	0x40020458
 8005278:	40020470 	.word	0x40020470
 800527c:	40020488 	.word	0x40020488
 8005280:	400204a0 	.word	0x400204a0
 8005284:	400204b8 	.word	0x400204b8
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 020a 	bic.w	r2, r2, #10
 8005296:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8097 	beq.w	80053e0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052ba:	e091      	b.n	80053e0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	2208      	movs	r2, #8
 80052c6:	409a      	lsls	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8088 	beq.w	80053e2 <HAL_DMA_IRQHandler+0xe7e>
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8082 	beq.w	80053e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a41      	ldr	r2, [pc, #260]	@ (80053e8 <HAL_DMA_IRQHandler+0xe84>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d04a      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a3f      	ldr	r2, [pc, #252]	@ (80053ec <HAL_DMA_IRQHandler+0xe88>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d045      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a3e      	ldr	r2, [pc, #248]	@ (80053f0 <HAL_DMA_IRQHandler+0xe8c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d040      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a3c      	ldr	r2, [pc, #240]	@ (80053f4 <HAL_DMA_IRQHandler+0xe90>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d03b      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a3b      	ldr	r2, [pc, #236]	@ (80053f8 <HAL_DMA_IRQHandler+0xe94>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d036      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a39      	ldr	r2, [pc, #228]	@ (80053fc <HAL_DMA_IRQHandler+0xe98>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d031      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a38      	ldr	r2, [pc, #224]	@ (8005400 <HAL_DMA_IRQHandler+0xe9c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d02c      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a36      	ldr	r2, [pc, #216]	@ (8005404 <HAL_DMA_IRQHandler+0xea0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d027      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a35      	ldr	r2, [pc, #212]	@ (8005408 <HAL_DMA_IRQHandler+0xea4>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d022      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a33      	ldr	r2, [pc, #204]	@ (800540c <HAL_DMA_IRQHandler+0xea8>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d01d      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a32      	ldr	r2, [pc, #200]	@ (8005410 <HAL_DMA_IRQHandler+0xeac>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d018      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a30      	ldr	r2, [pc, #192]	@ (8005414 <HAL_DMA_IRQHandler+0xeb0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a2f      	ldr	r2, [pc, #188]	@ (8005418 <HAL_DMA_IRQHandler+0xeb4>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00e      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a2d      	ldr	r2, [pc, #180]	@ (800541c <HAL_DMA_IRQHandler+0xeb8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d009      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a2c      	ldr	r2, [pc, #176]	@ (8005420 <HAL_DMA_IRQHandler+0xebc>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d004      	beq.n	800537e <HAL_DMA_IRQHandler+0xe1a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a2a      	ldr	r2, [pc, #168]	@ (8005424 <HAL_DMA_IRQHandler+0xec0>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d108      	bne.n	8005390 <HAL_DMA_IRQHandler+0xe2c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 021c 	bic.w	r2, r2, #28
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	e007      	b.n	80053a0 <HAL_DMA_IRQHandler+0xe3c>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 020e 	bic.w	r2, r2, #14
 800539e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	2201      	movs	r2, #1
 80053aa:	409a      	lsls	r2, r3
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	4798      	blx	r3
 80053d6:	e004      	b.n	80053e2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80053d8:	bf00      	nop
 80053da:	e002      	b.n	80053e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053dc:	bf00      	nop
 80053de:	e000      	b.n	80053e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80053e2:	3728      	adds	r7, #40	@ 0x28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40020010 	.word	0x40020010
 80053ec:	40020028 	.word	0x40020028
 80053f0:	40020040 	.word	0x40020040
 80053f4:	40020058 	.word	0x40020058
 80053f8:	40020070 	.word	0x40020070
 80053fc:	40020088 	.word	0x40020088
 8005400:	400200a0 	.word	0x400200a0
 8005404:	400200b8 	.word	0x400200b8
 8005408:	40020410 	.word	0x40020410
 800540c:	40020428 	.word	0x40020428
 8005410:	40020440 	.word	0x40020440
 8005414:	40020458 	.word	0x40020458
 8005418:	40020470 	.word	0x40020470
 800541c:	40020488 	.word	0x40020488
 8005420:	400204a0 	.word	0x400204a0
 8005424:	400204b8 	.word	0x400204b8

08005428 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005440:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a7f      	ldr	r2, [pc, #508]	@ (8005644 <DMA_SetConfig+0x21c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d072      	beq.n	8005532 <DMA_SetConfig+0x10a>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a7d      	ldr	r2, [pc, #500]	@ (8005648 <DMA_SetConfig+0x220>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d06d      	beq.n	8005532 <DMA_SetConfig+0x10a>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a7c      	ldr	r2, [pc, #496]	@ (800564c <DMA_SetConfig+0x224>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d068      	beq.n	8005532 <DMA_SetConfig+0x10a>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a7a      	ldr	r2, [pc, #488]	@ (8005650 <DMA_SetConfig+0x228>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d063      	beq.n	8005532 <DMA_SetConfig+0x10a>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a79      	ldr	r2, [pc, #484]	@ (8005654 <DMA_SetConfig+0x22c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d05e      	beq.n	8005532 <DMA_SetConfig+0x10a>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a77      	ldr	r2, [pc, #476]	@ (8005658 <DMA_SetConfig+0x230>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d059      	beq.n	8005532 <DMA_SetConfig+0x10a>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a76      	ldr	r2, [pc, #472]	@ (800565c <DMA_SetConfig+0x234>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d054      	beq.n	8005532 <DMA_SetConfig+0x10a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a74      	ldr	r2, [pc, #464]	@ (8005660 <DMA_SetConfig+0x238>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d04f      	beq.n	8005532 <DMA_SetConfig+0x10a>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a73      	ldr	r2, [pc, #460]	@ (8005664 <DMA_SetConfig+0x23c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d04a      	beq.n	8005532 <DMA_SetConfig+0x10a>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a71      	ldr	r2, [pc, #452]	@ (8005668 <DMA_SetConfig+0x240>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d045      	beq.n	8005532 <DMA_SetConfig+0x10a>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a70      	ldr	r2, [pc, #448]	@ (800566c <DMA_SetConfig+0x244>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d040      	beq.n	8005532 <DMA_SetConfig+0x10a>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a6e      	ldr	r2, [pc, #440]	@ (8005670 <DMA_SetConfig+0x248>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d03b      	beq.n	8005532 <DMA_SetConfig+0x10a>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a6d      	ldr	r2, [pc, #436]	@ (8005674 <DMA_SetConfig+0x24c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d036      	beq.n	8005532 <DMA_SetConfig+0x10a>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a6b      	ldr	r2, [pc, #428]	@ (8005678 <DMA_SetConfig+0x250>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d031      	beq.n	8005532 <DMA_SetConfig+0x10a>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a6a      	ldr	r2, [pc, #424]	@ (800567c <DMA_SetConfig+0x254>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d02c      	beq.n	8005532 <DMA_SetConfig+0x10a>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a68      	ldr	r2, [pc, #416]	@ (8005680 <DMA_SetConfig+0x258>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d027      	beq.n	8005532 <DMA_SetConfig+0x10a>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a67      	ldr	r2, [pc, #412]	@ (8005684 <DMA_SetConfig+0x25c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d022      	beq.n	8005532 <DMA_SetConfig+0x10a>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a65      	ldr	r2, [pc, #404]	@ (8005688 <DMA_SetConfig+0x260>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01d      	beq.n	8005532 <DMA_SetConfig+0x10a>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a64      	ldr	r2, [pc, #400]	@ (800568c <DMA_SetConfig+0x264>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d018      	beq.n	8005532 <DMA_SetConfig+0x10a>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a62      	ldr	r2, [pc, #392]	@ (8005690 <DMA_SetConfig+0x268>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d013      	beq.n	8005532 <DMA_SetConfig+0x10a>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a61      	ldr	r2, [pc, #388]	@ (8005694 <DMA_SetConfig+0x26c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00e      	beq.n	8005532 <DMA_SetConfig+0x10a>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a5f      	ldr	r2, [pc, #380]	@ (8005698 <DMA_SetConfig+0x270>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d009      	beq.n	8005532 <DMA_SetConfig+0x10a>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a5e      	ldr	r2, [pc, #376]	@ (800569c <DMA_SetConfig+0x274>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <DMA_SetConfig+0x10a>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5c      	ldr	r2, [pc, #368]	@ (80056a0 <DMA_SetConfig+0x278>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d101      	bne.n	8005536 <DMA_SetConfig+0x10e>
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <DMA_SetConfig+0x110>
 8005536:	2300      	movs	r3, #0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005544:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d004      	beq.n	8005558 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005556:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a39      	ldr	r2, [pc, #228]	@ (8005644 <DMA_SetConfig+0x21c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d04a      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a38      	ldr	r2, [pc, #224]	@ (8005648 <DMA_SetConfig+0x220>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d045      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a36      	ldr	r2, [pc, #216]	@ (800564c <DMA_SetConfig+0x224>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d040      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a35      	ldr	r2, [pc, #212]	@ (8005650 <DMA_SetConfig+0x228>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d03b      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a33      	ldr	r2, [pc, #204]	@ (8005654 <DMA_SetConfig+0x22c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d036      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a32      	ldr	r2, [pc, #200]	@ (8005658 <DMA_SetConfig+0x230>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d031      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a30      	ldr	r2, [pc, #192]	@ (800565c <DMA_SetConfig+0x234>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d02c      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005660 <DMA_SetConfig+0x238>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d027      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005664 <DMA_SetConfig+0x23c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d022      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005668 <DMA_SetConfig+0x240>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d01d      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2a      	ldr	r2, [pc, #168]	@ (800566c <DMA_SetConfig+0x244>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d018      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a29      	ldr	r2, [pc, #164]	@ (8005670 <DMA_SetConfig+0x248>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a27      	ldr	r2, [pc, #156]	@ (8005674 <DMA_SetConfig+0x24c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00e      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a26      	ldr	r2, [pc, #152]	@ (8005678 <DMA_SetConfig+0x250>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d009      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a24      	ldr	r2, [pc, #144]	@ (800567c <DMA_SetConfig+0x254>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <DMA_SetConfig+0x1d0>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a23      	ldr	r2, [pc, #140]	@ (8005680 <DMA_SetConfig+0x258>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <DMA_SetConfig+0x1d4>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <DMA_SetConfig+0x1d6>
 80055fc:	2300      	movs	r3, #0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d059      	beq.n	80056b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005606:	f003 031f 	and.w	r3, r3, #31
 800560a:	223f      	movs	r2, #63	@ 0x3f
 800560c:	409a      	lsls	r2, r3
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005620:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b40      	cmp	r3, #64	@ 0x40
 8005630:	d138      	bne.n	80056a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005642:	e0ae      	b.n	80057a2 <DMA_SetConfig+0x37a>
 8005644:	40020010 	.word	0x40020010
 8005648:	40020028 	.word	0x40020028
 800564c:	40020040 	.word	0x40020040
 8005650:	40020058 	.word	0x40020058
 8005654:	40020070 	.word	0x40020070
 8005658:	40020088 	.word	0x40020088
 800565c:	400200a0 	.word	0x400200a0
 8005660:	400200b8 	.word	0x400200b8
 8005664:	40020410 	.word	0x40020410
 8005668:	40020428 	.word	0x40020428
 800566c:	40020440 	.word	0x40020440
 8005670:	40020458 	.word	0x40020458
 8005674:	40020470 	.word	0x40020470
 8005678:	40020488 	.word	0x40020488
 800567c:	400204a0 	.word	0x400204a0
 8005680:	400204b8 	.word	0x400204b8
 8005684:	58025408 	.word	0x58025408
 8005688:	5802541c 	.word	0x5802541c
 800568c:	58025430 	.word	0x58025430
 8005690:	58025444 	.word	0x58025444
 8005694:	58025458 	.word	0x58025458
 8005698:	5802546c 	.word	0x5802546c
 800569c:	58025480 	.word	0x58025480
 80056a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	60da      	str	r2, [r3, #12]
}
 80056b4:	e075      	b.n	80057a2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a3d      	ldr	r2, [pc, #244]	@ (80057b0 <DMA_SetConfig+0x388>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d04a      	beq.n	8005756 <DMA_SetConfig+0x32e>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a3b      	ldr	r2, [pc, #236]	@ (80057b4 <DMA_SetConfig+0x38c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d045      	beq.n	8005756 <DMA_SetConfig+0x32e>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a3a      	ldr	r2, [pc, #232]	@ (80057b8 <DMA_SetConfig+0x390>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d040      	beq.n	8005756 <DMA_SetConfig+0x32e>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a38      	ldr	r2, [pc, #224]	@ (80057bc <DMA_SetConfig+0x394>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d03b      	beq.n	8005756 <DMA_SetConfig+0x32e>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a37      	ldr	r2, [pc, #220]	@ (80057c0 <DMA_SetConfig+0x398>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d036      	beq.n	8005756 <DMA_SetConfig+0x32e>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a35      	ldr	r2, [pc, #212]	@ (80057c4 <DMA_SetConfig+0x39c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d031      	beq.n	8005756 <DMA_SetConfig+0x32e>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a34      	ldr	r2, [pc, #208]	@ (80057c8 <DMA_SetConfig+0x3a0>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d02c      	beq.n	8005756 <DMA_SetConfig+0x32e>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a32      	ldr	r2, [pc, #200]	@ (80057cc <DMA_SetConfig+0x3a4>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d027      	beq.n	8005756 <DMA_SetConfig+0x32e>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a31      	ldr	r2, [pc, #196]	@ (80057d0 <DMA_SetConfig+0x3a8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d022      	beq.n	8005756 <DMA_SetConfig+0x32e>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2f      	ldr	r2, [pc, #188]	@ (80057d4 <DMA_SetConfig+0x3ac>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01d      	beq.n	8005756 <DMA_SetConfig+0x32e>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a2e      	ldr	r2, [pc, #184]	@ (80057d8 <DMA_SetConfig+0x3b0>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d018      	beq.n	8005756 <DMA_SetConfig+0x32e>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a2c      	ldr	r2, [pc, #176]	@ (80057dc <DMA_SetConfig+0x3b4>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <DMA_SetConfig+0x32e>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a2b      	ldr	r2, [pc, #172]	@ (80057e0 <DMA_SetConfig+0x3b8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d00e      	beq.n	8005756 <DMA_SetConfig+0x32e>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a29      	ldr	r2, [pc, #164]	@ (80057e4 <DMA_SetConfig+0x3bc>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d009      	beq.n	8005756 <DMA_SetConfig+0x32e>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a28      	ldr	r2, [pc, #160]	@ (80057e8 <DMA_SetConfig+0x3c0>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d004      	beq.n	8005756 <DMA_SetConfig+0x32e>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a26      	ldr	r2, [pc, #152]	@ (80057ec <DMA_SetConfig+0x3c4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d101      	bne.n	800575a <DMA_SetConfig+0x332>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <DMA_SetConfig+0x334>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2201      	movs	r2, #1
 800576a:	409a      	lsls	r2, r3
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b40      	cmp	r3, #64	@ 0x40
 800577e:	d108      	bne.n	8005792 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	60da      	str	r2, [r3, #12]
}
 8005790:	e007      	b.n	80057a2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	60da      	str	r2, [r3, #12]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	48022c08 	.word	0x48022c08
 80057b4:	48022c1c 	.word	0x48022c1c
 80057b8:	48022c30 	.word	0x48022c30
 80057bc:	48022c44 	.word	0x48022c44
 80057c0:	48022c58 	.word	0x48022c58
 80057c4:	48022c6c 	.word	0x48022c6c
 80057c8:	48022c80 	.word	0x48022c80
 80057cc:	48022c94 	.word	0x48022c94
 80057d0:	58025408 	.word	0x58025408
 80057d4:	5802541c 	.word	0x5802541c
 80057d8:	58025430 	.word	0x58025430
 80057dc:	58025444 	.word	0x58025444
 80057e0:	58025458 	.word	0x58025458
 80057e4:	5802546c 	.word	0x5802546c
 80057e8:	58025480 	.word	0x58025480
 80057ec:	58025494 	.word	0x58025494

080057f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a42      	ldr	r2, [pc, #264]	@ (8005908 <DMA_CalcBaseAndBitshift+0x118>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d04a      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a41      	ldr	r2, [pc, #260]	@ (800590c <DMA_CalcBaseAndBitshift+0x11c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d045      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3f      	ldr	r2, [pc, #252]	@ (8005910 <DMA_CalcBaseAndBitshift+0x120>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d040      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a3e      	ldr	r2, [pc, #248]	@ (8005914 <DMA_CalcBaseAndBitshift+0x124>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d03b      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a3c      	ldr	r2, [pc, #240]	@ (8005918 <DMA_CalcBaseAndBitshift+0x128>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d036      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a3b      	ldr	r2, [pc, #236]	@ (800591c <DMA_CalcBaseAndBitshift+0x12c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d031      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a39      	ldr	r2, [pc, #228]	@ (8005920 <DMA_CalcBaseAndBitshift+0x130>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d02c      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a38      	ldr	r2, [pc, #224]	@ (8005924 <DMA_CalcBaseAndBitshift+0x134>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d027      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a36      	ldr	r2, [pc, #216]	@ (8005928 <DMA_CalcBaseAndBitshift+0x138>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d022      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a35      	ldr	r2, [pc, #212]	@ (800592c <DMA_CalcBaseAndBitshift+0x13c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d01d      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a33      	ldr	r2, [pc, #204]	@ (8005930 <DMA_CalcBaseAndBitshift+0x140>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d018      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a32      	ldr	r2, [pc, #200]	@ (8005934 <DMA_CalcBaseAndBitshift+0x144>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d013      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a30      	ldr	r2, [pc, #192]	@ (8005938 <DMA_CalcBaseAndBitshift+0x148>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d00e      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2f      	ldr	r2, [pc, #188]	@ (800593c <DMA_CalcBaseAndBitshift+0x14c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d009      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a2d      	ldr	r2, [pc, #180]	@ (8005940 <DMA_CalcBaseAndBitshift+0x150>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <DMA_CalcBaseAndBitshift+0xa8>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a2c      	ldr	r2, [pc, #176]	@ (8005944 <DMA_CalcBaseAndBitshift+0x154>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d101      	bne.n	800589c <DMA_CalcBaseAndBitshift+0xac>
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <DMA_CalcBaseAndBitshift+0xae>
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d024      	beq.n	80058ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	3b10      	subs	r3, #16
 80058aa:	4a27      	ldr	r2, [pc, #156]	@ (8005948 <DMA_CalcBaseAndBitshift+0x158>)
 80058ac:	fba2 2303 	umull	r2, r3, r2, r3
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	4a24      	ldr	r2, [pc, #144]	@ (800594c <DMA_CalcBaseAndBitshift+0x15c>)
 80058bc:	5cd3      	ldrb	r3, [r2, r3]
 80058be:	461a      	mov	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d908      	bls.n	80058dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005950 <DMA_CalcBaseAndBitshift+0x160>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	1d1a      	adds	r2, r3, #4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80058da:	e00d      	b.n	80058f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005950 <DMA_CalcBaseAndBitshift+0x160>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ea:	e005      	b.n	80058f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	40020010 	.word	0x40020010
 800590c:	40020028 	.word	0x40020028
 8005910:	40020040 	.word	0x40020040
 8005914:	40020058 	.word	0x40020058
 8005918:	40020070 	.word	0x40020070
 800591c:	40020088 	.word	0x40020088
 8005920:	400200a0 	.word	0x400200a0
 8005924:	400200b8 	.word	0x400200b8
 8005928:	40020410 	.word	0x40020410
 800592c:	40020428 	.word	0x40020428
 8005930:	40020440 	.word	0x40020440
 8005934:	40020458 	.word	0x40020458
 8005938:	40020470 	.word	0x40020470
 800593c:	40020488 	.word	0x40020488
 8005940:	400204a0 	.word	0x400204a0
 8005944:	400204b8 	.word	0x400204b8
 8005948:	aaaaaaab 	.word	0xaaaaaaab
 800594c:	0800b690 	.word	0x0800b690
 8005950:	fffffc00 	.word	0xfffffc00

08005954 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005954:	b480      	push	{r7}
 8005956:	b085      	sub	sp, #20
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800595c:	2300      	movs	r3, #0
 800595e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d120      	bne.n	80059aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	2b03      	cmp	r3, #3
 800596e:	d858      	bhi.n	8005a22 <DMA_CheckFifoParam+0xce>
 8005970:	a201      	add	r2, pc, #4	@ (adr r2, 8005978 <DMA_CheckFifoParam+0x24>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	08005989 	.word	0x08005989
 800597c:	0800599b 	.word	0x0800599b
 8005980:	08005989 	.word	0x08005989
 8005984:	08005a23 	.word	0x08005a23
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d048      	beq.n	8005a26 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005998:	e045      	b.n	8005a26 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059a2:	d142      	bne.n	8005a2a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059a8:	e03f      	b.n	8005a2a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059b2:	d123      	bne.n	80059fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d838      	bhi.n	8005a2e <DMA_CheckFifoParam+0xda>
 80059bc:	a201      	add	r2, pc, #4	@ (adr r2, 80059c4 <DMA_CheckFifoParam+0x70>)
 80059be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c2:	bf00      	nop
 80059c4:	080059d5 	.word	0x080059d5
 80059c8:	080059db 	.word	0x080059db
 80059cc:	080059d5 	.word	0x080059d5
 80059d0:	080059ed 	.word	0x080059ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	73fb      	strb	r3, [r7, #15]
        break;
 80059d8:	e030      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d025      	beq.n	8005a32 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059ea:	e022      	b.n	8005a32 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80059f4:	d11f      	bne.n	8005a36 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80059fa:	e01c      	b.n	8005a36 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d902      	bls.n	8005a0a <DMA_CheckFifoParam+0xb6>
 8005a04:	2b03      	cmp	r3, #3
 8005a06:	d003      	beq.n	8005a10 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005a08:	e018      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a0e:	e015      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00e      	beq.n	8005a3a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8005a20:	e00b      	b.n	8005a3a <DMA_CheckFifoParam+0xe6>
        break;
 8005a22:	bf00      	nop
 8005a24:	e00a      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a26:	bf00      	nop
 8005a28:	e008      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a2a:	bf00      	nop
 8005a2c:	e006      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a2e:	bf00      	nop
 8005a30:	e004      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a32:	bf00      	nop
 8005a34:	e002      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
        break;
 8005a36:	bf00      	nop
 8005a38:	e000      	b.n	8005a3c <DMA_CheckFifoParam+0xe8>
    break;
 8005a3a:	bf00      	nop
    }
  }

  return status;
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop

08005a4c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a38      	ldr	r2, [pc, #224]	@ (8005b40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a36      	ldr	r2, [pc, #216]	@ (8005b44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01d      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a35      	ldr	r2, [pc, #212]	@ (8005b48 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a33      	ldr	r2, [pc, #204]	@ (8005b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a32      	ldr	r2, [pc, #200]	@ (8005b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a30      	ldr	r2, [pc, #192]	@ (8005b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a2f      	ldr	r2, [pc, #188]	@ (8005b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d101      	bne.n	8005aae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01a      	beq.n	8005aea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	3b08      	subs	r3, #8
 8005abc:	4a28      	ldr	r2, [pc, #160]	@ (8005b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005abe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac2:	091b      	lsrs	r3, r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4b26      	ldr	r3, [pc, #152]	@ (8005b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	461a      	mov	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a24      	ldr	r2, [pc, #144]	@ (8005b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005ad8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 031f 	and.w	r3, r3, #31
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	409a      	lsls	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005ae8:	e024      	b.n	8005b34 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	3b10      	subs	r3, #16
 8005af2:	4a1e      	ldr	r2, [pc, #120]	@ (8005b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005af4:	fba2 2303 	umull	r2, r3, r2, r3
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d806      	bhi.n	8005b12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a1b      	ldr	r2, [pc, #108]	@ (8005b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d902      	bls.n	8005b12 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4b18      	ldr	r3, [pc, #96]	@ (8005b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a16      	ldr	r2, [pc, #88]	@ (8005b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005b24:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr
 8005b40:	58025408 	.word	0x58025408
 8005b44:	5802541c 	.word	0x5802541c
 8005b48:	58025430 	.word	0x58025430
 8005b4c:	58025444 	.word	0x58025444
 8005b50:	58025458 	.word	0x58025458
 8005b54:	5802546c 	.word	0x5802546c
 8005b58:	58025480 	.word	0x58025480
 8005b5c:	58025494 	.word	0x58025494
 8005b60:	cccccccd 	.word	0xcccccccd
 8005b64:	16009600 	.word	0x16009600
 8005b68:	58025880 	.word	0x58025880
 8005b6c:	aaaaaaab 	.word	0xaaaaaaab
 8005b70:	400204b8 	.word	0x400204b8
 8005b74:	4002040f 	.word	0x4002040f
 8005b78:	10008200 	.word	0x10008200
 8005b7c:	40020880 	.word	0x40020880

08005b80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d04a      	beq.n	8005c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b08      	cmp	r3, #8
 8005b9a:	d847      	bhi.n	8005c2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a25      	ldr	r2, [pc, #148]	@ (8005c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d022      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a24      	ldr	r2, [pc, #144]	@ (8005c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d01d      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	@ (8005c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a21      	ldr	r2, [pc, #132]	@ (8005c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8005c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8005c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1b      	ldr	r2, [pc, #108]	@ (8005c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d101      	bne.n	8005bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005bec:	2301      	movs	r3, #1
 8005bee:	e000      	b.n	8005bf2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4b17      	ldr	r3, [pc, #92]	@ (8005c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005bfa:	4413      	add	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	461a      	mov	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a15      	ldr	r2, [pc, #84]	@ (8005c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005c08:	671a      	str	r2, [r3, #112]	@ 0x70
 8005c0a:	e009      	b.n	8005c20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4b14      	ldr	r3, [pc, #80]	@ (8005c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	461a      	mov	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a11      	ldr	r2, [pc, #68]	@ (8005c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005c1e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	2201      	movs	r2, #1
 8005c26:	409a      	lsls	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	58025408 	.word	0x58025408
 8005c3c:	5802541c 	.word	0x5802541c
 8005c40:	58025430 	.word	0x58025430
 8005c44:	58025444 	.word	0x58025444
 8005c48:	58025458 	.word	0x58025458
 8005c4c:	5802546c 	.word	0x5802546c
 8005c50:	58025480 	.word	0x58025480
 8005c54:	58025494 	.word	0x58025494
 8005c58:	1600963f 	.word	0x1600963f
 8005c5c:	58025940 	.word	0x58025940
 8005c60:	1000823f 	.word	0x1000823f
 8005c64:	40020940 	.word	0x40020940

08005c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b089      	sub	sp, #36	@ 0x24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c76:	4b89      	ldr	r3, [pc, #548]	@ (8005e9c <HAL_GPIO_Init+0x234>)
 8005c78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c7a:	e194      	b.n	8005fa6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	2101      	movs	r1, #1
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	fa01 f303 	lsl.w	r3, r1, r3
 8005c88:	4013      	ands	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8186 	beq.w	8005fa0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d005      	beq.n	8005cac <HAL_GPIO_Init+0x44>
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d130      	bne.n	8005d0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	43db      	mvns	r3, r3
 8005cbe:	69ba      	ldr	r2, [r7, #24]
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	68da      	ldr	r2, [r3, #12]
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd0:	69ba      	ldr	r2, [r7, #24]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69ba      	ldr	r2, [r7, #24]
 8005cda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	091b      	lsrs	r3, r3, #4
 8005cf8:	f003 0201 	and.w	r2, r3, #1
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d017      	beq.n	8005d4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	005b      	lsls	r3, r3, #1
 8005d24:	2203      	movs	r2, #3
 8005d26:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2a:	43db      	mvns	r3, r3
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	689a      	ldr	r2, [r3, #8]
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	69ba      	ldr	r2, [r7, #24]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d123      	bne.n	8005d9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	08da      	lsrs	r2, r3, #3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	3208      	adds	r2, #8
 8005d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	220f      	movs	r2, #15
 8005d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d72:	43db      	mvns	r3, r3
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	4013      	ands	r3, r2
 8005d78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	691a      	ldr	r2, [r3, #16]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	08da      	lsrs	r2, r3, #3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3208      	adds	r2, #8
 8005d98:	69b9      	ldr	r1, [r7, #24]
 8005d9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	2203      	movs	r2, #3
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	43db      	mvns	r3, r3
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	4013      	ands	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f003 0203 	and.w	r2, r3, #3
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	005b      	lsls	r3, r3, #1
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	69ba      	ldr	r2, [r7, #24]
 8005dd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 80e0 	beq.w	8005fa0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005de0:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea0 <HAL_GPIO_Init+0x238>)
 8005de2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005de6:	4a2e      	ldr	r2, [pc, #184]	@ (8005ea0 <HAL_GPIO_Init+0x238>)
 8005de8:	f043 0302 	orr.w	r3, r3, #2
 8005dec:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005df0:	4b2b      	ldr	r3, [pc, #172]	@ (8005ea0 <HAL_GPIO_Init+0x238>)
 8005df2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dfe:	4a29      	ldr	r2, [pc, #164]	@ (8005ea4 <HAL_GPIO_Init+0x23c>)
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	089b      	lsrs	r3, r3, #2
 8005e04:	3302      	adds	r3, #2
 8005e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	220f      	movs	r2, #15
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a20      	ldr	r2, [pc, #128]	@ (8005ea8 <HAL_GPIO_Init+0x240>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d052      	beq.n	8005ed0 <HAL_GPIO_Init+0x268>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8005eac <HAL_GPIO_Init+0x244>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_GPIO_Init+0x22e>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb0 <HAL_GPIO_Init+0x248>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d02b      	beq.n	8005e92 <HAL_GPIO_Init+0x22a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb4 <HAL_GPIO_Init+0x24c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d025      	beq.n	8005e8e <HAL_GPIO_Init+0x226>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <HAL_GPIO_Init+0x250>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d01f      	beq.n	8005e8a <HAL_GPIO_Init+0x222>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8005ebc <HAL_GPIO_Init+0x254>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d019      	beq.n	8005e86 <HAL_GPIO_Init+0x21e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec0 <HAL_GPIO_Init+0x258>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <HAL_GPIO_Init+0x21a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ec4 <HAL_GPIO_Init+0x25c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d00d      	beq.n	8005e7e <HAL_GPIO_Init+0x216>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a18      	ldr	r2, [pc, #96]	@ (8005ec8 <HAL_GPIO_Init+0x260>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d007      	beq.n	8005e7a <HAL_GPIO_Init+0x212>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a17      	ldr	r2, [pc, #92]	@ (8005ecc <HAL_GPIO_Init+0x264>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d101      	bne.n	8005e76 <HAL_GPIO_Init+0x20e>
 8005e72:	2309      	movs	r3, #9
 8005e74:	e02d      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e76:	230a      	movs	r3, #10
 8005e78:	e02b      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e7a:	2308      	movs	r3, #8
 8005e7c:	e029      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e7e:	2307      	movs	r3, #7
 8005e80:	e027      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e82:	2306      	movs	r3, #6
 8005e84:	e025      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e86:	2305      	movs	r3, #5
 8005e88:	e023      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	e021      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e01f      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e01d      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e01b      	b.n	8005ed2 <HAL_GPIO_Init+0x26a>
 8005e9a:	bf00      	nop
 8005e9c:	58000080 	.word	0x58000080
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	58000400 	.word	0x58000400
 8005ea8:	58020000 	.word	0x58020000
 8005eac:	58020400 	.word	0x58020400
 8005eb0:	58020800 	.word	0x58020800
 8005eb4:	58020c00 	.word	0x58020c00
 8005eb8:	58021000 	.word	0x58021000
 8005ebc:	58021400 	.word	0x58021400
 8005ec0:	58021800 	.word	0x58021800
 8005ec4:	58021c00 	.word	0x58021c00
 8005ec8:	58022000 	.word	0x58022000
 8005ecc:	58022400 	.word	0x58022400
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	f002 0203 	and.w	r2, r2, #3
 8005ed8:	0092      	lsls	r2, r2, #2
 8005eda:	4093      	lsls	r3, r2
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ee2:	4938      	ldr	r1, [pc, #224]	@ (8005fc4 <HAL_GPIO_Init+0x35c>)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	089b      	lsrs	r3, r3, #2
 8005ee8:	3302      	adds	r3, #2
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	43db      	mvns	r3, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	69ba      	ldr	r2, [r7, #24]
 8005f74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	43db      	mvns	r3, r3
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	4013      	ands	r3, r2
 8005f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f47f ae63 	bne.w	8005c7c <HAL_GPIO_Init+0x14>
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	bf00      	nop
 8005fba:	3724      	adds	r7, #36	@ 0x24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	58000400 	.word	0x58000400

08005fc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	807b      	strh	r3, [r7, #2]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fd8:	787b      	ldrb	r3, [r7, #1]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fde:	887a      	ldrh	r2, [r7, #2]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005fe4:	e003      	b.n	8005fee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fe6:	887b      	ldrh	r3, [r7, #2]
 8005fe8:	041a      	lsls	r2, r3, #16
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	619a      	str	r2, [r3, #24]
}
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006000:	4b05      	ldr	r3, [pc, #20]	@ (8006018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a04      	ldr	r2, [pc, #16]	@ (8006018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800600a:	6013      	str	r3, [r2, #0]
}
 800600c:	bf00      	nop
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	58024800 	.word	0x58024800

0800601c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006024:	4b29      	ldr	r3, [pc, #164]	@ (80060cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	2b06      	cmp	r3, #6
 800602e:	d00a      	beq.n	8006046 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006030:	4b26      	ldr	r3, [pc, #152]	@ (80060cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	429a      	cmp	r2, r3
 800603c:	d001      	beq.n	8006042 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e040      	b.n	80060c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e03e      	b.n	80060c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006046:	4b21      	ldr	r3, [pc, #132]	@ (80060cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800604e:	491f      	ldr	r1, [pc, #124]	@ (80060cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4313      	orrs	r3, r2
 8006054:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006056:	f7fb f8af 	bl	80011b8 <HAL_GetTick>
 800605a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800605c:	e009      	b.n	8006072 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800605e:	f7fb f8ab 	bl	80011b8 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800606c:	d901      	bls.n	8006072 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e028      	b.n	80060c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006072:	4b16      	ldr	r3, [pc, #88]	@ (80060cc <HAL_PWREx_ConfigSupply+0xb0>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800607a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800607e:	d1ee      	bne.n	800605e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b1e      	cmp	r3, #30
 8006084:	d008      	beq.n	8006098 <HAL_PWREx_ConfigSupply+0x7c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b2e      	cmp	r3, #46	@ 0x2e
 800608a:	d005      	beq.n	8006098 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b1d      	cmp	r3, #29
 8006090:	d002      	beq.n	8006098 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b2d      	cmp	r3, #45	@ 0x2d
 8006096:	d114      	bne.n	80060c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006098:	f7fb f88e 	bl	80011b8 <HAL_GetTick>
 800609c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800609e:	e009      	b.n	80060b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80060a0:	f7fb f88a 	bl	80011b8 <HAL_GetTick>
 80060a4:	4602      	mov	r2, r0
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80060ae:	d901      	bls.n	80060b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e007      	b.n	80060c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80060b4:	4b05      	ldr	r3, [pc, #20]	@ (80060cc <HAL_PWREx_ConfigSupply+0xb0>)
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c0:	d1ee      	bne.n	80060a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	58024800 	.word	0x58024800

080060d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08c      	sub	sp, #48	@ 0x30
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d102      	bne.n	80060e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f000 bc1f 	b.w	8006922 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80b3 	beq.w	8006258 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060f2:	4b95      	ldr	r3, [pc, #596]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80060fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80060fc:	4b92      	ldr	r3, [pc, #584]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006104:	2b10      	cmp	r3, #16
 8006106:	d007      	beq.n	8006118 <HAL_RCC_OscConfig+0x48>
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	2b18      	cmp	r3, #24
 800610c:	d112      	bne.n	8006134 <HAL_RCC_OscConfig+0x64>
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	2b02      	cmp	r3, #2
 8006116:	d10d      	bne.n	8006134 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006118:	4b8b      	ldr	r3, [pc, #556]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8098 	beq.w	8006256 <HAL_RCC_OscConfig+0x186>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	f040 8093 	bne.w	8006256 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e3f6      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800613c:	d106      	bne.n	800614c <HAL_RCC_OscConfig+0x7c>
 800613e:	4b82      	ldr	r3, [pc, #520]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a81      	ldr	r2, [pc, #516]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006144:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006148:	6013      	str	r3, [r2, #0]
 800614a:	e058      	b.n	80061fe <HAL_RCC_OscConfig+0x12e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d112      	bne.n	800617a <HAL_RCC_OscConfig+0xaa>
 8006154:	4b7c      	ldr	r3, [pc, #496]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a7b      	ldr	r2, [pc, #492]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 800615a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	4b79      	ldr	r3, [pc, #484]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a78      	ldr	r2, [pc, #480]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006166:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	4b76      	ldr	r3, [pc, #472]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a75      	ldr	r2, [pc, #468]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006172:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006176:	6013      	str	r3, [r2, #0]
 8006178:	e041      	b.n	80061fe <HAL_RCC_OscConfig+0x12e>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006182:	d112      	bne.n	80061aa <HAL_RCC_OscConfig+0xda>
 8006184:	4b70      	ldr	r3, [pc, #448]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a6f      	ldr	r2, [pc, #444]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 800618a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	4b6d      	ldr	r3, [pc, #436]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a6c      	ldr	r2, [pc, #432]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006196:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	4b6a      	ldr	r3, [pc, #424]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a69      	ldr	r2, [pc, #420]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e029      	b.n	80061fe <HAL_RCC_OscConfig+0x12e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80061b2:	d112      	bne.n	80061da <HAL_RCC_OscConfig+0x10a>
 80061b4:	4b64      	ldr	r3, [pc, #400]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a63      	ldr	r2, [pc, #396]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061ba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	4b61      	ldr	r3, [pc, #388]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a60      	ldr	r2, [pc, #384]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	4b5e      	ldr	r3, [pc, #376]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a5d      	ldr	r2, [pc, #372]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	e011      	b.n	80061fe <HAL_RCC_OscConfig+0x12e>
 80061da:	4b5b      	ldr	r3, [pc, #364]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a5a      	ldr	r2, [pc, #360]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	4b58      	ldr	r3, [pc, #352]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a57      	ldr	r2, [pc, #348]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	4b55      	ldr	r3, [pc, #340]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a54      	ldr	r2, [pc, #336]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80061f8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80061fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d013      	beq.n	800622e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006206:	f7fa ffd7 	bl	80011b8 <HAL_GetTick>
 800620a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800620e:	f7fa ffd3 	bl	80011b8 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b64      	cmp	r3, #100	@ 0x64
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e380      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006220:	4b49      	ldr	r3, [pc, #292]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d0f0      	beq.n	800620e <HAL_RCC_OscConfig+0x13e>
 800622c:	e014      	b.n	8006258 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800622e:	f7fa ffc3 	bl	80011b8 <HAL_GetTick>
 8006232:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006234:	e008      	b.n	8006248 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006236:	f7fa ffbf 	bl	80011b8 <HAL_GetTick>
 800623a:	4602      	mov	r2, r0
 800623c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623e:	1ad3      	subs	r3, r2, r3
 8006240:	2b64      	cmp	r3, #100	@ 0x64
 8006242:	d901      	bls.n	8006248 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e36c      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006248:	4b3f      	ldr	r3, [pc, #252]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1f0      	bne.n	8006236 <HAL_RCC_OscConfig+0x166>
 8006254:	e000      	b.n	8006258 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006256:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	f000 808c 	beq.w	800637e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006266:	4b38      	ldr	r3, [pc, #224]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800626e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006270:	4b35      	ldr	r3, [pc, #212]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006276:	6a3b      	ldr	r3, [r7, #32]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d007      	beq.n	800628c <HAL_RCC_OscConfig+0x1bc>
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	2b18      	cmp	r3, #24
 8006280:	d137      	bne.n	80062f2 <HAL_RCC_OscConfig+0x222>
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f003 0303 	and.w	r3, r3, #3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d132      	bne.n	80062f2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800628c:	4b2e      	ldr	r3, [pc, #184]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d005      	beq.n	80062a4 <HAL_RCC_OscConfig+0x1d4>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e33e      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062a4:	4b28      	ldr	r3, [pc, #160]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f023 0219 	bic.w	r2, r3, #25
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	4925      	ldr	r1, [pc, #148]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b6:	f7fa ff7f 	bl	80011b8 <HAL_GetTick>
 80062ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062be:	f7fa ff7b 	bl	80011b8 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e328      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80062d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0f0      	beq.n	80062be <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062dc:	4b1a      	ldr	r3, [pc, #104]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	061b      	lsls	r3, r3, #24
 80062ea:	4917      	ldr	r1, [pc, #92]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062f0:	e045      	b.n	800637e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d028      	beq.n	800634c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80062fa:	4b13      	ldr	r3, [pc, #76]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f023 0219 	bic.w	r2, r3, #25
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	4910      	ldr	r1, [pc, #64]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006308:	4313      	orrs	r3, r2
 800630a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fa ff54 	bl	80011b8 <HAL_GetTick>
 8006310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006314:	f7fa ff50 	bl	80011b8 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e2fd      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006326:	4b08      	ldr	r3, [pc, #32]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0304 	and.w	r3, r3, #4
 800632e:	2b00      	cmp	r3, #0
 8006330:	d0f0      	beq.n	8006314 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006332:	4b05      	ldr	r3, [pc, #20]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	061b      	lsls	r3, r3, #24
 8006340:	4901      	ldr	r1, [pc, #4]	@ (8006348 <HAL_RCC_OscConfig+0x278>)
 8006342:	4313      	orrs	r3, r2
 8006344:	604b      	str	r3, [r1, #4]
 8006346:	e01a      	b.n	800637e <HAL_RCC_OscConfig+0x2ae>
 8006348:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800634c:	4b97      	ldr	r3, [pc, #604]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a96      	ldr	r2, [pc, #600]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fa ff2e 	bl	80011b8 <HAL_GetTick>
 800635c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006360:	f7fa ff2a 	bl	80011b8 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e2d7      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006372:	4b8e      	ldr	r3, [pc, #568]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b00      	cmp	r3, #0
 8006388:	d06a      	beq.n	8006460 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800638a:	4b88      	ldr	r3, [pc, #544]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006392:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006394:	4b85      	ldr	r3, [pc, #532]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006398:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b08      	cmp	r3, #8
 800639e:	d007      	beq.n	80063b0 <HAL_RCC_OscConfig+0x2e0>
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b18      	cmp	r3, #24
 80063a4:	d11b      	bne.n	80063de <HAL_RCC_OscConfig+0x30e>
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d116      	bne.n	80063de <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063b0:	4b7e      	ldr	r3, [pc, #504]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_OscConfig+0x2f8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	2b80      	cmp	r3, #128	@ 0x80
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e2ac      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80063c8:	4b78      	ldr	r3, [pc, #480]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	061b      	lsls	r3, r3, #24
 80063d6:	4975      	ldr	r1, [pc, #468]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80063dc:	e040      	b.n	8006460 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d023      	beq.n	800642e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80063e6:	4b71      	ldr	r3, [pc, #452]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a70      	ldr	r2, [pc, #448]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80063ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f2:	f7fa fee1 	bl	80011b8 <HAL_GetTick>
 80063f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80063f8:	e008      	b.n	800640c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80063fa:	f7fa fedd 	bl	80011b8 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	2b02      	cmp	r3, #2
 8006406:	d901      	bls.n	800640c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e28a      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800640c:	4b67      	ldr	r3, [pc, #412]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0f0      	beq.n	80063fa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006418:	4b64      	ldr	r3, [pc, #400]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	061b      	lsls	r3, r3, #24
 8006426:	4961      	ldr	r1, [pc, #388]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006428:	4313      	orrs	r3, r2
 800642a:	60cb      	str	r3, [r1, #12]
 800642c:	e018      	b.n	8006460 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800642e:	4b5f      	ldr	r3, [pc, #380]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a5e      	ldr	r2, [pc, #376]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006434:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643a:	f7fa febd 	bl	80011b8 <HAL_GetTick>
 800643e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006442:	f7fa feb9 	bl	80011b8 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e266      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006454:	4b55      	ldr	r3, [pc, #340]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1f0      	bne.n	8006442 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d036      	beq.n	80064da <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	695b      	ldr	r3, [r3, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d019      	beq.n	80064a8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006474:	4b4d      	ldr	r3, [pc, #308]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006478:	4a4c      	ldr	r2, [pc, #304]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 800647a:	f043 0301 	orr.w	r3, r3, #1
 800647e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006480:	f7fa fe9a 	bl	80011b8 <HAL_GetTick>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006486:	e008      	b.n	800649a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006488:	f7fa fe96 	bl	80011b8 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d901      	bls.n	800649a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e243      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800649a:	4b44      	ldr	r3, [pc, #272]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 800649c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0f0      	beq.n	8006488 <HAL_RCC_OscConfig+0x3b8>
 80064a6:	e018      	b.n	80064da <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064a8:	4b40      	ldr	r3, [pc, #256]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80064aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064ac:	4a3f      	ldr	r2, [pc, #252]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80064ae:	f023 0301 	bic.w	r3, r3, #1
 80064b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064b4:	f7fa fe80 	bl	80011b8 <HAL_GetTick>
 80064b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064ba:	e008      	b.n	80064ce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064bc:	f7fa fe7c 	bl	80011b8 <HAL_GetTick>
 80064c0:	4602      	mov	r2, r0
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	1ad3      	subs	r3, r2, r3
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e229      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80064ce:	4b37      	ldr	r3, [pc, #220]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80064d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1f0      	bne.n	80064bc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d036      	beq.n	8006554 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d019      	beq.n	8006522 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064ee:	4b2f      	ldr	r3, [pc, #188]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a2e      	ldr	r2, [pc, #184]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80064f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80064f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80064fa:	f7fa fe5d 	bl	80011b8 <HAL_GetTick>
 80064fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006500:	e008      	b.n	8006514 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006502:	f7fa fe59 	bl	80011b8 <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e206      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006514:	4b25      	ldr	r3, [pc, #148]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f0      	beq.n	8006502 <HAL_RCC_OscConfig+0x432>
 8006520:	e018      	b.n	8006554 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006522:	4b22      	ldr	r3, [pc, #136]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a21      	ldr	r2, [pc, #132]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 8006528:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800652c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800652e:	f7fa fe43 	bl	80011b8 <HAL_GetTick>
 8006532:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006536:	f7fa fe3f 	bl	80011b8 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e1ec      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006548:	4b18      	ldr	r3, [pc, #96]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1f0      	bne.n	8006536 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0304 	and.w	r3, r3, #4
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80af 	beq.w	80066c0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006562:	4b13      	ldr	r3, [pc, #76]	@ (80065b0 <HAL_RCC_OscConfig+0x4e0>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a12      	ldr	r2, [pc, #72]	@ (80065b0 <HAL_RCC_OscConfig+0x4e0>)
 8006568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800656c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800656e:	f7fa fe23 	bl	80011b8 <HAL_GetTick>
 8006572:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006574:	e008      	b.n	8006588 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006576:	f7fa fe1f 	bl	80011b8 <HAL_GetTick>
 800657a:	4602      	mov	r2, r0
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	1ad3      	subs	r3, r2, r3
 8006580:	2b64      	cmp	r3, #100	@ 0x64
 8006582:	d901      	bls.n	8006588 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	e1cc      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006588:	4b09      	ldr	r3, [pc, #36]	@ (80065b0 <HAL_RCC_OscConfig+0x4e0>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0f0      	beq.n	8006576 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d10b      	bne.n	80065b4 <HAL_RCC_OscConfig+0x4e4>
 800659c:	4b03      	ldr	r3, [pc, #12]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 800659e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065a0:	4a02      	ldr	r2, [pc, #8]	@ (80065ac <HAL_RCC_OscConfig+0x4dc>)
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80065a8:	e05b      	b.n	8006662 <HAL_RCC_OscConfig+0x592>
 80065aa:	bf00      	nop
 80065ac:	58024400 	.word	0x58024400
 80065b0:	58024800 	.word	0x58024800
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d112      	bne.n	80065e2 <HAL_RCC_OscConfig+0x512>
 80065bc:	4b9d      	ldr	r3, [pc, #628]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c0:	4a9c      	ldr	r2, [pc, #624]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80065c8:	4b9a      	ldr	r3, [pc, #616]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065cc:	4a99      	ldr	r2, [pc, #612]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d4:	4b97      	ldr	r3, [pc, #604]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065d8:	4a96      	ldr	r2, [pc, #600]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065da:	f023 0304 	bic.w	r3, r3, #4
 80065de:	6713      	str	r3, [r2, #112]	@ 0x70
 80065e0:	e03f      	b.n	8006662 <HAL_RCC_OscConfig+0x592>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	2b05      	cmp	r3, #5
 80065e8:	d112      	bne.n	8006610 <HAL_RCC_OscConfig+0x540>
 80065ea:	4b92      	ldr	r3, [pc, #584]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ee:	4a91      	ldr	r2, [pc, #580]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065f0:	f043 0304 	orr.w	r3, r3, #4
 80065f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f6:	4b8f      	ldr	r3, [pc, #572]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065fa:	4a8e      	ldr	r2, [pc, #568]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80065fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006600:	6713      	str	r3, [r2, #112]	@ 0x70
 8006602:	4b8c      	ldr	r3, [pc, #560]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006606:	4a8b      	ldr	r2, [pc, #556]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006608:	f043 0301 	orr.w	r3, r3, #1
 800660c:	6713      	str	r3, [r2, #112]	@ 0x70
 800660e:	e028      	b.n	8006662 <HAL_RCC_OscConfig+0x592>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b85      	cmp	r3, #133	@ 0x85
 8006616:	d112      	bne.n	800663e <HAL_RCC_OscConfig+0x56e>
 8006618:	4b86      	ldr	r3, [pc, #536]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800661a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800661c:	4a85      	ldr	r2, [pc, #532]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800661e:	f043 0304 	orr.w	r3, r3, #4
 8006622:	6713      	str	r3, [r2, #112]	@ 0x70
 8006624:	4b83      	ldr	r3, [pc, #524]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006626:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006628:	4a82      	ldr	r2, [pc, #520]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800662a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800662e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006630:	4b80      	ldr	r3, [pc, #512]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006634:	4a7f      	ldr	r2, [pc, #508]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006636:	f043 0301 	orr.w	r3, r3, #1
 800663a:	6713      	str	r3, [r2, #112]	@ 0x70
 800663c:	e011      	b.n	8006662 <HAL_RCC_OscConfig+0x592>
 800663e:	4b7d      	ldr	r3, [pc, #500]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006642:	4a7c      	ldr	r2, [pc, #496]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006644:	f023 0301 	bic.w	r3, r3, #1
 8006648:	6713      	str	r3, [r2, #112]	@ 0x70
 800664a:	4b7a      	ldr	r3, [pc, #488]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800664c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800664e:	4a79      	ldr	r2, [pc, #484]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006650:	f023 0304 	bic.w	r3, r3, #4
 8006654:	6713      	str	r3, [r2, #112]	@ 0x70
 8006656:	4b77      	ldr	r3, [pc, #476]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800665a:	4a76      	ldr	r2, [pc, #472]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800665c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006660:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d015      	beq.n	8006696 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800666a:	f7fa fda5 	bl	80011b8 <HAL_GetTick>
 800666e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006670:	e00a      	b.n	8006688 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006672:	f7fa fda1 	bl	80011b8 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006680:	4293      	cmp	r3, r2
 8006682:	d901      	bls.n	8006688 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e14c      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006688:	4b6a      	ldr	r3, [pc, #424]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800668a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668c:	f003 0302 	and.w	r3, r3, #2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d0ee      	beq.n	8006672 <HAL_RCC_OscConfig+0x5a2>
 8006694:	e014      	b.n	80066c0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006696:	f7fa fd8f 	bl	80011b8 <HAL_GetTick>
 800669a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800669c:	e00a      	b.n	80066b4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800669e:	f7fa fd8b 	bl	80011b8 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d901      	bls.n	80066b4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80066b0:	2303      	movs	r3, #3
 80066b2:	e136      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80066b4:	4b5f      	ldr	r3, [pc, #380]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80066b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066b8:	f003 0302 	and.w	r3, r3, #2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1ee      	bne.n	800669e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 812b 	beq.w	8006920 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80066ca:	4b5a      	ldr	r3, [pc, #360]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066d2:	2b18      	cmp	r3, #24
 80066d4:	f000 80bb 	beq.w	800684e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066dc:	2b02      	cmp	r3, #2
 80066de:	f040 8095 	bne.w	800680c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e2:	4b54      	ldr	r3, [pc, #336]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a53      	ldr	r2, [pc, #332]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80066e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ee:	f7fa fd63 	bl	80011b8 <HAL_GetTick>
 80066f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066f4:	e008      	b.n	8006708 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066f6:	f7fa fd5f 	bl	80011b8 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	2b02      	cmp	r3, #2
 8006702:	d901      	bls.n	8006708 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e10c      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006708:	4b4a      	ldr	r3, [pc, #296]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1f0      	bne.n	80066f6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006714:	4b47      	ldr	r3, [pc, #284]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006716:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006718:	4b47      	ldr	r3, [pc, #284]	@ (8006838 <HAL_RCC_OscConfig+0x768>)
 800671a:	4013      	ands	r3, r2
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006724:	0112      	lsls	r2, r2, #4
 8006726:	430a      	orrs	r2, r1
 8006728:	4942      	ldr	r1, [pc, #264]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800672a:	4313      	orrs	r3, r2
 800672c:	628b      	str	r3, [r1, #40]	@ 0x28
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006732:	3b01      	subs	r3, #1
 8006734:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673c:	3b01      	subs	r3, #1
 800673e:	025b      	lsls	r3, r3, #9
 8006740:	b29b      	uxth	r3, r3
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006748:	3b01      	subs	r3, #1
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006756:	3b01      	subs	r3, #1
 8006758:	061b      	lsls	r3, r3, #24
 800675a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800675e:	4935      	ldr	r1, [pc, #212]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006760:	4313      	orrs	r3, r2
 8006762:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006764:	4b33      	ldr	r3, [pc, #204]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006768:	4a32      	ldr	r2, [pc, #200]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800676a:	f023 0301 	bic.w	r3, r3, #1
 800676e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006770:	4b30      	ldr	r3, [pc, #192]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006774:	4b31      	ldr	r3, [pc, #196]	@ (800683c <HAL_RCC_OscConfig+0x76c>)
 8006776:	4013      	ands	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800677c:	00d2      	lsls	r2, r2, #3
 800677e:	492d      	ldr	r1, [pc, #180]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006780:	4313      	orrs	r3, r2
 8006782:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006784:	4b2b      	ldr	r3, [pc, #172]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	f023 020c 	bic.w	r2, r3, #12
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006790:	4928      	ldr	r1, [pc, #160]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006792:	4313      	orrs	r3, r2
 8006794:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006796:	4b27      	ldr	r3, [pc, #156]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679a:	f023 0202 	bic.w	r2, r3, #2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a2:	4924      	ldr	r1, [pc, #144]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067a8:	4b22      	ldr	r3, [pc, #136]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ac:	4a21      	ldr	r2, [pc, #132]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b8:	4a1e      	ldr	r2, [pc, #120]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80067c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80067ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80067cc:	4b19      	ldr	r3, [pc, #100]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	4a18      	ldr	r2, [pc, #96]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067d2:	f043 0301 	orr.w	r3, r3, #1
 80067d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067d8:	4b16      	ldr	r3, [pc, #88]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a15      	ldr	r2, [pc, #84]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 80067de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fa fce8 	bl	80011b8 <HAL_GetTick>
 80067e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067ec:	f7fa fce4 	bl	80011b8 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e091      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80067fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0x71c>
 800680a:	e089      	b.n	8006920 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680c:	4b09      	ldr	r3, [pc, #36]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a08      	ldr	r2, [pc, #32]	@ (8006834 <HAL_RCC_OscConfig+0x764>)
 8006812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fa fcce 	bl	80011b8 <HAL_GetTick>
 800681c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800681e:	e00f      	b.n	8006840 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006820:	f7fa fcca 	bl	80011b8 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d908      	bls.n	8006840 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e077      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
 8006832:	bf00      	nop
 8006834:	58024400 	.word	0x58024400
 8006838:	fffffc0c 	.word	0xfffffc0c
 800683c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006840:	4b3a      	ldr	r3, [pc, #232]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e9      	bne.n	8006820 <HAL_RCC_OscConfig+0x750>
 800684c:	e068      	b.n	8006920 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800684e:	4b37      	ldr	r3, [pc, #220]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 8006850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006852:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006854:	4b35      	ldr	r3, [pc, #212]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 8006856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006858:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685e:	2b01      	cmp	r3, #1
 8006860:	d031      	beq.n	80068c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f003 0203 	and.w	r2, r3, #3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800686c:	429a      	cmp	r2, r3
 800686e:	d12a      	bne.n	80068c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	091b      	lsrs	r3, r3, #4
 8006874:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687c:	429a      	cmp	r2, r3
 800687e:	d122      	bne.n	80068c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800688c:	429a      	cmp	r2, r3
 800688e:	d11a      	bne.n	80068c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	0a5b      	lsrs	r3, r3, #9
 8006894:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800689c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800689e:	429a      	cmp	r2, r3
 80068a0:	d111      	bne.n	80068c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d108      	bne.n	80068c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	0e1b      	lsrs	r3, r3, #24
 80068b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d001      	beq.n	80068ca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e02b      	b.n	8006922 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80068ca:	4b18      	ldr	r3, [pc, #96]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 80068cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ce:	08db      	lsrs	r3, r3, #3
 80068d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068d4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d01f      	beq.n	8006920 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80068e0:	4b12      	ldr	r3, [pc, #72]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	4a11      	ldr	r2, [pc, #68]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 80068e6:	f023 0301 	bic.w	r3, r3, #1
 80068ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80068ec:	f7fa fc64 	bl	80011b8 <HAL_GetTick>
 80068f0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80068f2:	bf00      	nop
 80068f4:	f7fa fc60 	bl	80011b8 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d0f9      	beq.n	80068f4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006900:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 8006902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006904:	4b0a      	ldr	r3, [pc, #40]	@ (8006930 <HAL_RCC_OscConfig+0x860>)
 8006906:	4013      	ands	r3, r2
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800690c:	00d2      	lsls	r2, r2, #3
 800690e:	4907      	ldr	r1, [pc, #28]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 8006910:	4313      	orrs	r3, r2
 8006912:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006914:	4b05      	ldr	r3, [pc, #20]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	4a04      	ldr	r2, [pc, #16]	@ (800692c <HAL_RCC_OscConfig+0x85c>)
 800691a:	f043 0301 	orr.w	r3, r3, #1
 800691e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3730      	adds	r7, #48	@ 0x30
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	58024400 	.word	0x58024400
 8006930:	ffff0007 	.word	0xffff0007

08006934 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e19c      	b.n	8006c82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006948:	4b8a      	ldr	r3, [pc, #552]	@ (8006b74 <HAL_RCC_ClockConfig+0x240>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d910      	bls.n	8006978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006956:	4b87      	ldr	r3, [pc, #540]	@ (8006b74 <HAL_RCC_ClockConfig+0x240>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f023 020f 	bic.w	r2, r3, #15
 800695e:	4985      	ldr	r1, [pc, #532]	@ (8006b74 <HAL_RCC_ClockConfig+0x240>)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	4313      	orrs	r3, r2
 8006964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006966:	4b83      	ldr	r3, [pc, #524]	@ (8006b74 <HAL_RCC_ClockConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d001      	beq.n	8006978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e184      	b.n	8006c82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	d010      	beq.n	80069a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	4b7b      	ldr	r3, [pc, #492]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006990:	429a      	cmp	r2, r3
 8006992:	d908      	bls.n	80069a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006994:	4b78      	ldr	r3, [pc, #480]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	4975      	ldr	r1, [pc, #468]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 80069a2:	4313      	orrs	r3, r2
 80069a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d010      	beq.n	80069d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695a      	ldr	r2, [r3, #20]
 80069b6:	4b70      	ldr	r3, [pc, #448]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069be:	429a      	cmp	r2, r3
 80069c0:	d908      	bls.n	80069d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069c2:	4b6d      	ldr	r3, [pc, #436]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	496a      	ldr	r1, [pc, #424]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 80069d0:	4313      	orrs	r3, r2
 80069d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d010      	beq.n	8006a02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	699a      	ldr	r2, [r3, #24]
 80069e4:	4b64      	ldr	r3, [pc, #400]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d908      	bls.n	8006a02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80069f0:	4b61      	ldr	r3, [pc, #388]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 80069f2:	69db      	ldr	r3, [r3, #28]
 80069f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	495e      	ldr	r1, [pc, #376]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0320 	and.w	r3, r3, #32
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d010      	beq.n	8006a30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69da      	ldr	r2, [r3, #28]
 8006a12:	4b59      	ldr	r3, [pc, #356]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d908      	bls.n	8006a30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a1e:	4b56      	ldr	r3, [pc, #344]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	4953      	ldr	r1, [pc, #332]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d010      	beq.n	8006a5e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	4b4d      	ldr	r3, [pc, #308]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f003 030f 	and.w	r3, r3, #15
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d908      	bls.n	8006a5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	f023 020f 	bic.w	r2, r3, #15
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	4947      	ldr	r1, [pc, #284]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d055      	beq.n	8006b16 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006a6a:	4b43      	ldr	r3, [pc, #268]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	4940      	ldr	r1, [pc, #256]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d107      	bne.n	8006a94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006a84:	4b3c      	ldr	r3, [pc, #240]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d121      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e0f6      	b.n	8006c82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d107      	bne.n	8006aac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a9c:	4b36      	ldr	r3, [pc, #216]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d115      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e0ea      	b.n	8006c82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d107      	bne.n	8006ac4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ab4:	4b30      	ldr	r3, [pc, #192]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0de      	b.n	8006c82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e0d6      	b.n	8006c82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ad4:	4b28      	ldr	r3, [pc, #160]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f023 0207 	bic.w	r2, r3, #7
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4925      	ldr	r1, [pc, #148]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae6:	f7fa fb67 	bl	80011b8 <HAL_GetTick>
 8006aea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aec:	e00a      	b.n	8006b04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006aee:	f7fa fb63 	bl	80011b8 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d901      	bls.n	8006b04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e0be      	b.n	8006c82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b04:	4b1c      	ldr	r3, [pc, #112]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d1eb      	bne.n	8006aee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d010      	beq.n	8006b44 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	4b14      	ldr	r3, [pc, #80]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f003 030f 	and.w	r3, r3, #15
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d208      	bcs.n	8006b44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b32:	4b11      	ldr	r3, [pc, #68]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	f023 020f 	bic.w	r2, r3, #15
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	490e      	ldr	r1, [pc, #56]	@ (8006b78 <HAL_RCC_ClockConfig+0x244>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b44:	4b0b      	ldr	r3, [pc, #44]	@ (8006b74 <HAL_RCC_ClockConfig+0x240>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d214      	bcs.n	8006b7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b52:	4b08      	ldr	r3, [pc, #32]	@ (8006b74 <HAL_RCC_ClockConfig+0x240>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f023 020f 	bic.w	r2, r3, #15
 8006b5a:	4906      	ldr	r1, [pc, #24]	@ (8006b74 <HAL_RCC_ClockConfig+0x240>)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b62:	4b04      	ldr	r3, [pc, #16]	@ (8006b74 <HAL_RCC_ClockConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 030f 	and.w	r3, r3, #15
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d005      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e086      	b.n	8006c82 <HAL_RCC_ClockConfig+0x34e>
 8006b74:	52002000 	.word	0x52002000
 8006b78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d010      	beq.n	8006baa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d208      	bcs.n	8006baa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006b98:	4b3c      	ldr	r3, [pc, #240]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	4939      	ldr	r1, [pc, #228]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d010      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695a      	ldr	r2, [r3, #20]
 8006bba:	4b34      	ldr	r3, [pc, #208]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d208      	bcs.n	8006bd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006bc6:	4b31      	ldr	r3, [pc, #196]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006bc8:	69db      	ldr	r3, [r3, #28]
 8006bca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	492e      	ldr	r1, [pc, #184]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	4b28      	ldr	r3, [pc, #160]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006bea:	69db      	ldr	r3, [r3, #28]
 8006bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d208      	bcs.n	8006c06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006bf4:	4b25      	ldr	r3, [pc, #148]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	4922      	ldr	r1, [pc, #136]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d010      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69da      	ldr	r2, [r3, #28]
 8006c16:	4b1d      	ldr	r3, [pc, #116]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d208      	bcs.n	8006c34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c22:	4b1a      	ldr	r3, [pc, #104]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	4917      	ldr	r1, [pc, #92]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006c34:	f000 f89e 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	4b14      	ldr	r3, [pc, #80]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	4912      	ldr	r1, [pc, #72]	@ (8006c90 <HAL_RCC_ClockConfig+0x35c>)
 8006c46:	5ccb      	ldrb	r3, [r1, r3]
 8006c48:	f003 031f 	and.w	r3, r3, #31
 8006c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c50:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006c52:	4b0e      	ldr	r3, [pc, #56]	@ (8006c8c <HAL_RCC_ClockConfig+0x358>)
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8006c90 <HAL_RCC_ClockConfig+0x35c>)
 8006c5c:	5cd3      	ldrb	r3, [r2, r3]
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	fa22 f303 	lsr.w	r3, r2, r3
 8006c68:	4a0a      	ldr	r2, [pc, #40]	@ (8006c94 <HAL_RCC_ClockConfig+0x360>)
 8006c6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c98 <HAL_RCC_ClockConfig+0x364>)
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006c72:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <HAL_RCC_ClockConfig+0x368>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fa fa54 	bl	8001124 <HAL_InitTick>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	58024400 	.word	0x58024400
 8006c90:	0800b680 	.word	0x0800b680
 8006c94:	24000004 	.word	0x24000004
 8006c98:	24000000 	.word	0x24000000
 8006c9c:	24000008 	.word	0x24000008

08006ca0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b08c      	sub	sp, #48	@ 0x30
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d12a      	bne.n	8006d08 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006cb4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8006cc2:	4b29      	ldr	r3, [pc, #164]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006cc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006cd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006ce6:	f107 031c 	add.w	r3, r7, #28
 8006cea:	4619      	mov	r1, r3
 8006cec:	481f      	ldr	r0, [pc, #124]	@ (8006d6c <HAL_RCC_MCOConfig+0xcc>)
 8006cee:	f7fe ffbb 	bl	8005c68 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	4919      	ldr	r1, [pc, #100]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006d06:	e02a      	b.n	8006d5e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006d08:	4b17      	ldr	r3, [pc, #92]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006d0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006d0e:	4a16      	ldr	r2, [pc, #88]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006d10:	f043 0304 	orr.w	r3, r3, #4
 8006d14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8006d18:	4b13      	ldr	r3, [pc, #76]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006d1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006d1e:	f003 0304 	and.w	r3, r3, #4
 8006d22:	617b      	str	r3, [r7, #20]
 8006d24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006d26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d30:	2303      	movs	r3, #3
 8006d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006d3c:	f107 031c 	add.w	r3, r7, #28
 8006d40:	4619      	mov	r1, r3
 8006d42:	480b      	ldr	r0, [pc, #44]	@ (8006d70 <HAL_RCC_MCOConfig+0xd0>)
 8006d44:	f7fe ff90 	bl	8005c68 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006d48:	4b07      	ldr	r3, [pc, #28]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	01d9      	lsls	r1, r3, #7
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	430b      	orrs	r3, r1
 8006d58:	4903      	ldr	r1, [pc, #12]	@ (8006d68 <HAL_RCC_MCOConfig+0xc8>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	610b      	str	r3, [r1, #16]
}
 8006d5e:	bf00      	nop
 8006d60:	3730      	adds	r7, #48	@ 0x30
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	58024400 	.word	0x58024400
 8006d6c:	58020000 	.word	0x58020000
 8006d70:	58020800 	.word	0x58020800

08006d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b089      	sub	sp, #36	@ 0x24
 8006d78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d7a:	4bb3      	ldr	r3, [pc, #716]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d82:	2b18      	cmp	r3, #24
 8006d84:	f200 8155 	bhi.w	8007032 <HAL_RCC_GetSysClockFreq+0x2be>
 8006d88:	a201      	add	r2, pc, #4	@ (adr r2, 8006d90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006df5 	.word	0x08006df5
 8006d94:	08007033 	.word	0x08007033
 8006d98:	08007033 	.word	0x08007033
 8006d9c:	08007033 	.word	0x08007033
 8006da0:	08007033 	.word	0x08007033
 8006da4:	08007033 	.word	0x08007033
 8006da8:	08007033 	.word	0x08007033
 8006dac:	08007033 	.word	0x08007033
 8006db0:	08006e1b 	.word	0x08006e1b
 8006db4:	08007033 	.word	0x08007033
 8006db8:	08007033 	.word	0x08007033
 8006dbc:	08007033 	.word	0x08007033
 8006dc0:	08007033 	.word	0x08007033
 8006dc4:	08007033 	.word	0x08007033
 8006dc8:	08007033 	.word	0x08007033
 8006dcc:	08007033 	.word	0x08007033
 8006dd0:	08006e21 	.word	0x08006e21
 8006dd4:	08007033 	.word	0x08007033
 8006dd8:	08007033 	.word	0x08007033
 8006ddc:	08007033 	.word	0x08007033
 8006de0:	08007033 	.word	0x08007033
 8006de4:	08007033 	.word	0x08007033
 8006de8:	08007033 	.word	0x08007033
 8006dec:	08007033 	.word	0x08007033
 8006df0:	08006e27 	.word	0x08006e27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006df4:	4b94      	ldr	r3, [pc, #592]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 0320 	and.w	r3, r3, #32
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d009      	beq.n	8006e14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e00:	4b91      	ldr	r3, [pc, #580]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	08db      	lsrs	r3, r3, #3
 8006e06:	f003 0303 	and.w	r3, r3, #3
 8006e0a:	4a90      	ldr	r2, [pc, #576]	@ (800704c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006e12:	e111      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e14:	4b8d      	ldr	r3, [pc, #564]	@ (800704c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006e16:	61bb      	str	r3, [r7, #24]
      break;
 8006e18:	e10e      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006e1a:	4b8d      	ldr	r3, [pc, #564]	@ (8007050 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006e1c:	61bb      	str	r3, [r7, #24]
      break;
 8006e1e:	e10b      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006e20:	4b8c      	ldr	r3, [pc, #560]	@ (8007054 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006e22:	61bb      	str	r3, [r7, #24]
      break;
 8006e24:	e108      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e26:	4b88      	ldr	r3, [pc, #544]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006e30:	4b85      	ldr	r3, [pc, #532]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	091b      	lsrs	r3, r3, #4
 8006e36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006e3c:	4b82      	ldr	r3, [pc, #520]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006e46:	4b80      	ldr	r3, [pc, #512]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4a:	08db      	lsrs	r3, r3, #3
 8006e4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80e1 	beq.w	800702c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b02      	cmp	r3, #2
 8006e6e:	f000 8083 	beq.w	8006f78 <HAL_RCC_GetSysClockFreq+0x204>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	f200 80a1 	bhi.w	8006fbc <HAL_RCC_GetSysClockFreq+0x248>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d003      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0x114>
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d056      	beq.n	8006f34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006e86:	e099      	b.n	8006fbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e88:	4b6f      	ldr	r3, [pc, #444]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0320 	and.w	r3, r3, #32
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d02d      	beq.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e94:	4b6c      	ldr	r3, [pc, #432]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	08db      	lsrs	r3, r3, #3
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	4a6b      	ldr	r2, [pc, #428]	@ (800704c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	ee07 3a90 	vmov	s15, r3
 8006eac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ebe:	4b62      	ldr	r3, [pc, #392]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ed2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006eee:	e087      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800705c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f02:	4b51      	ldr	r3, [pc, #324]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f32:	e065      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007060 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f46:	4b40      	ldr	r3, [pc, #256]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f76:	e043      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007064 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006fba:	e021      	b.n	8007000 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007060 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fce:	4b1e      	ldr	r3, [pc, #120]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd6:	ee07 3a90 	vmov	s15, r3
 8006fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fe2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007058 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ffe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007000:	4b11      	ldr	r3, [pc, #68]	@ (8007048 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007004:	0a5b      	lsrs	r3, r3, #9
 8007006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800700a:	3301      	adds	r3, #1
 800700c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007018:	edd7 6a07 	vldr	s13, [r7, #28]
 800701c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007024:	ee17 3a90 	vmov	r3, s15
 8007028:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800702a:	e005      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	61bb      	str	r3, [r7, #24]
      break;
 8007030:	e002      	b.n	8007038 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007032:	4b07      	ldr	r3, [pc, #28]	@ (8007050 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007034:	61bb      	str	r3, [r7, #24]
      break;
 8007036:	bf00      	nop
  }

  return sysclockfreq;
 8007038:	69bb      	ldr	r3, [r7, #24]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3724      	adds	r7, #36	@ 0x24
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	58024400 	.word	0x58024400
 800704c:	03d09000 	.word	0x03d09000
 8007050:	003d0900 	.word	0x003d0900
 8007054:	007a1200 	.word	0x007a1200
 8007058:	46000000 	.word	0x46000000
 800705c:	4c742400 	.word	0x4c742400
 8007060:	4a742400 	.word	0x4a742400
 8007064:	4af42400 	.word	0x4af42400

08007068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800706e:	f7ff fe81 	bl	8006d74 <HAL_RCC_GetSysClockFreq>
 8007072:	4602      	mov	r2, r0
 8007074:	4b10      	ldr	r3, [pc, #64]	@ (80070b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	0a1b      	lsrs	r3, r3, #8
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	490f      	ldr	r1, [pc, #60]	@ (80070bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007080:	5ccb      	ldrb	r3, [r1, r3]
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	fa22 f303 	lsr.w	r3, r2, r3
 800708a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800708c:	4b0a      	ldr	r3, [pc, #40]	@ (80070b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	4a09      	ldr	r2, [pc, #36]	@ (80070bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007096:	5cd3      	ldrb	r3, [r2, r3]
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	fa22 f303 	lsr.w	r3, r2, r3
 80070a2:	4a07      	ldr	r2, [pc, #28]	@ (80070c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070a6:	4a07      	ldr	r2, [pc, #28]	@ (80070c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80070ac:	4b04      	ldr	r3, [pc, #16]	@ (80070c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80070ae:	681b      	ldr	r3, [r3, #0]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3708      	adds	r7, #8
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	58024400 	.word	0x58024400
 80070bc:	0800b680 	.word	0x0800b680
 80070c0:	24000004 	.word	0x24000004
 80070c4:	24000000 	.word	0x24000000

080070c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 80070cc:	f7ff ffcc 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b06      	ldr	r3, [pc, #24]	@ (80070ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	091b      	lsrs	r3, r3, #4
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4904      	ldr	r1, [pc, #16]	@ (80070f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	58024400 	.word	0x58024400
 80070f0:	0800b680 	.word	0x0800b680

080070f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80070f8:	f7ff ffb6 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 80070fc:	4602      	mov	r2, r0
 80070fe:	4b06      	ldr	r3, [pc, #24]	@ (8007118 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	4904      	ldr	r1, [pc, #16]	@ (800711c <HAL_RCC_GetPCLK2Freq+0x28>)
 800710a:	5ccb      	ldrb	r3, [r1, r3]
 800710c:	f003 031f 	and.w	r3, r3, #31
 8007110:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007114:	4618      	mov	r0, r3
 8007116:	bd80      	pop	{r7, pc}
 8007118:	58024400 	.word	0x58024400
 800711c:	0800b680 	.word	0x0800b680

08007120 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007124:	b0c8      	sub	sp, #288	@ 0x120
 8007126:	af00      	add	r7, sp, #0
 8007128:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800712c:	2300      	movs	r3, #0
 800712e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007132:	2300      	movs	r3, #0
 8007134:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007138:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007144:	2500      	movs	r5, #0
 8007146:	ea54 0305 	orrs.w	r3, r4, r5
 800714a:	d049      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800714c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007150:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007152:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007156:	d02f      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007158:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800715c:	d828      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800715e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007162:	d01a      	beq.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007164:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007168:	d822      	bhi.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800716e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007172:	d007      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007174:	e01c      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007176:	4ba7      	ldr	r3, [pc, #668]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717a:	4aa6      	ldr	r2, [pc, #664]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800717c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007182:	e01a      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007184:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007188:	3308      	adds	r3, #8
 800718a:	2102      	movs	r1, #2
 800718c:	4618      	mov	r0, r3
 800718e:	f002 fac3 	bl	8009718 <RCCEx_PLL2_Config>
 8007192:	4603      	mov	r3, r0
 8007194:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007198:	e00f      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800719a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800719e:	3328      	adds	r3, #40	@ 0x28
 80071a0:	2102      	movs	r1, #2
 80071a2:	4618      	mov	r0, r3
 80071a4:	f002 fb6a 	bl	800987c <RCCEx_PLL3_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80071ae:	e004      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80071b6:	e000      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80071b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80071c2:	4b94      	ldr	r3, [pc, #592]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80071ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071d0:	4a90      	ldr	r2, [pc, #576]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071d2:	430b      	orrs	r3, r1
 80071d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80071d6:	e003      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80071ec:	f04f 0900 	mov.w	r9, #0
 80071f0:	ea58 0309 	orrs.w	r3, r8, r9
 80071f4:	d047      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80071f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d82a      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007200:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	0800721d 	.word	0x0800721d
 800720c:	0800722b 	.word	0x0800722b
 8007210:	08007241 	.word	0x08007241
 8007214:	0800725f 	.word	0x0800725f
 8007218:	0800725f 	.word	0x0800725f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800721c:	4b7d      	ldr	r3, [pc, #500]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800721e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007220:	4a7c      	ldr	r2, [pc, #496]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007222:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007226:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007228:	e01a      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800722a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800722e:	3308      	adds	r3, #8
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f002 fa70 	bl	8009718 <RCCEx_PLL2_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800723e:	e00f      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007244:	3328      	adds	r3, #40	@ 0x28
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f002 fb17 	bl	800987c <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007254:	e004      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800725c:	e000      	b.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800725e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007260:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10a      	bne.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007268:	4b6a      	ldr	r3, [pc, #424]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800726a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800726c:	f023 0107 	bic.w	r1, r3, #7
 8007270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007276:	4a67      	ldr	r2, [pc, #412]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007278:	430b      	orrs	r3, r1
 800727a:	6513      	str	r3, [r2, #80]	@ 0x50
 800727c:	e003      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800727e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007282:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8007286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007292:	f04f 0b00 	mov.w	fp, #0
 8007296:	ea5a 030b 	orrs.w	r3, sl, fp
 800729a:	d054      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800729c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80072a6:	d036      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80072a8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80072ac:	d82f      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072b2:	d032      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072b8:	d829      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80072bc:	d02f      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80072be:	2bc0      	cmp	r3, #192	@ 0xc0
 80072c0:	d825      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072c2:	2b80      	cmp	r3, #128	@ 0x80
 80072c4:	d018      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80072c6:	2b80      	cmp	r3, #128	@ 0x80
 80072c8:	d821      	bhi.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80072ce:	2b40      	cmp	r3, #64	@ 0x40
 80072d0:	d007      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80072d2:	e01c      	b.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072d4:	4b4f      	ldr	r3, [pc, #316]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d8:	4a4e      	ldr	r2, [pc, #312]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80072e0:	e01e      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072e6:	3308      	adds	r3, #8
 80072e8:	2100      	movs	r1, #0
 80072ea:	4618      	mov	r0, r3
 80072ec:	f002 fa14 	bl	8009718 <RCCEx_PLL2_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80072f6:	e013      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072fc:	3328      	adds	r3, #40	@ 0x28
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f002 fabb 	bl	800987c <RCCEx_PLL3_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800730c:	e008      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007314:	e004      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007316:	bf00      	nop
 8007318:	e002      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800731a:	bf00      	nop
 800731c:	e000      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800731e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007320:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007328:	4b3a      	ldr	r3, [pc, #232]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800732a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800732c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007336:	4a37      	ldr	r2, [pc, #220]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007338:	430b      	orrs	r3, r1
 800733a:	6513      	str	r3, [r2, #80]	@ 0x50
 800733c:	e003      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007342:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8007346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800734a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007352:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007356:	2300      	movs	r3, #0
 8007358:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800735c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007360:	460b      	mov	r3, r1
 8007362:	4313      	orrs	r3, r2
 8007364:	d05c      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8007366:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800736a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007370:	d03b      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007372:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007376:	d834      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007378:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800737c:	d037      	beq.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800737e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007382:	d82e      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007384:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007388:	d033      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800738a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800738e:	d828      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8007390:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007394:	d01a      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8007396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800739a:	d822      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80073a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073a4:	d007      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80073a6:	e01c      	b.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	4a19      	ldr	r2, [pc, #100]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80073b4:	e01e      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ba:	3308      	adds	r3, #8
 80073bc:	2100      	movs	r1, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	f002 f9aa 	bl	8009718 <RCCEx_PLL2_Config>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80073ca:	e013      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d0:	3328      	adds	r3, #40	@ 0x28
 80073d2:	2100      	movs	r1, #0
 80073d4:	4618      	mov	r0, r3
 80073d6:	f002 fa51 	bl	800987c <RCCEx_PLL3_Config>
 80073da:	4603      	mov	r3, r0
 80073dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80073e0:	e008      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073e8:	e004      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80073ea:	bf00      	nop
 80073ec:	e002      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80073ee:	bf00      	nop
 80073f0:	e000      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80073f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10d      	bne.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80073fc:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007400:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007404:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800740a:	4a02      	ldr	r2, [pc, #8]	@ (8007414 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800740c:	430b      	orrs	r3, r1
 800740e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007410:	e006      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007412:	bf00      	nop
 8007414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007418:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800741c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007420:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800742c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007430:	2300      	movs	r3, #0
 8007432:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007436:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800743a:	460b      	mov	r3, r1
 800743c:	4313      	orrs	r3, r2
 800743e:	d03a      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007440:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007446:	2b30      	cmp	r3, #48	@ 0x30
 8007448:	d01f      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800744a:	2b30      	cmp	r3, #48	@ 0x30
 800744c:	d819      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800744e:	2b20      	cmp	r3, #32
 8007450:	d00c      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007452:	2b20      	cmp	r3, #32
 8007454:	d815      	bhi.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d019      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800745a:	2b10      	cmp	r3, #16
 800745c:	d111      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800745e:	4bae      	ldr	r3, [pc, #696]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	4aad      	ldr	r2, [pc, #692]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800746a:	e011      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800746c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007470:	3308      	adds	r3, #8
 8007472:	2102      	movs	r1, #2
 8007474:	4618      	mov	r0, r3
 8007476:	f002 f94f 	bl	8009718 <RCCEx_PLL2_Config>
 800747a:	4603      	mov	r3, r0
 800747c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8007480:	e006      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007488:	e002      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800748a:	bf00      	nop
 800748c:	e000      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800748e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007490:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10a      	bne.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007498:	4b9f      	ldr	r3, [pc, #636]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800749a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800749c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80074a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074a6:	4a9c      	ldr	r2, [pc, #624]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074a8:	430b      	orrs	r3, r1
 80074aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80074ac:	e003      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80074b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80074c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80074c6:	2300      	movs	r3, #0
 80074c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80074cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4313      	orrs	r3, r2
 80074d4:	d051      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80074d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074e0:	d035      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80074e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80074e6:	d82e      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80074e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074ec:	d031      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80074ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80074f2:	d828      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80074f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f8:	d01a      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80074fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074fe:	d822      	bhi.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007500:	2b00      	cmp	r3, #0
 8007502:	d003      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007508:	d007      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800750a:	e01c      	b.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800750c:	4b82      	ldr	r3, [pc, #520]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800750e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007510:	4a81      	ldr	r2, [pc, #516]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007518:	e01c      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800751a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800751e:	3308      	adds	r3, #8
 8007520:	2100      	movs	r1, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f002 f8f8 	bl	8009718 <RCCEx_PLL2_Config>
 8007528:	4603      	mov	r3, r0
 800752a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800752e:	e011      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007534:	3328      	adds	r3, #40	@ 0x28
 8007536:	2100      	movs	r1, #0
 8007538:	4618      	mov	r0, r3
 800753a:	f002 f99f 	bl	800987c <RCCEx_PLL3_Config>
 800753e:	4603      	mov	r3, r0
 8007540:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007544:	e006      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800754c:	e002      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800754e:	bf00      	nop
 8007550:	e000      	b.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007554:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800755c:	4b6e      	ldr	r3, [pc, #440]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800755e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007560:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007564:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007568:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800756a:	4a6b      	ldr	r2, [pc, #428]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800756c:	430b      	orrs	r3, r1
 800756e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007570:	e003      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007572:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007576:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800757a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800757e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007582:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007586:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800758a:	2300      	movs	r3, #0
 800758c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007590:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007594:	460b      	mov	r3, r1
 8007596:	4313      	orrs	r3, r2
 8007598:	d053      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800759a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800759e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80075a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075a4:	d033      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80075a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075aa:	d82c      	bhi.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075b0:	d02f      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80075b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075b6:	d826      	bhi.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075bc:	d02b      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80075be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80075c2:	d820      	bhi.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075c8:	d012      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80075ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ce:	d81a      	bhi.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d022      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80075d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075d8:	d115      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075de:	3308      	adds	r3, #8
 80075e0:	2101      	movs	r1, #1
 80075e2:	4618      	mov	r0, r3
 80075e4:	f002 f898 	bl	8009718 <RCCEx_PLL2_Config>
 80075e8:	4603      	mov	r3, r0
 80075ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80075ee:	e015      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075f4:	3328      	adds	r3, #40	@ 0x28
 80075f6:	2101      	movs	r1, #1
 80075f8:	4618      	mov	r0, r3
 80075fa:	f002 f93f 	bl	800987c <RCCEx_PLL3_Config>
 80075fe:	4603      	mov	r3, r0
 8007600:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007604:	e00a      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800760c:	e006      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800760e:	bf00      	nop
 8007610:	e004      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007612:	bf00      	nop
 8007614:	e002      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007616:	bf00      	nop
 8007618:	e000      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800761a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800761c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10a      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007624:	4b3c      	ldr	r3, [pc, #240]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007628:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800762c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007632:	4a39      	ldr	r2, [pc, #228]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007634:	430b      	orrs	r3, r1
 8007636:	6513      	str	r3, [r2, #80]	@ 0x50
 8007638:	e003      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800763e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800764e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007652:	2300      	movs	r3, #0
 8007654:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007658:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800765c:	460b      	mov	r3, r1
 800765e:	4313      	orrs	r3, r2
 8007660:	d060      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007662:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800766a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800766e:	d039      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8007670:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007674:	d832      	bhi.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007676:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800767a:	d035      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800767c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007680:	d82c      	bhi.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007686:	d031      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8007688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800768c:	d826      	bhi.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800768e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007692:	d02d      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007694:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007698:	d820      	bhi.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800769a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800769e:	d012      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80076a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076a4:	d81a      	bhi.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d024      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80076aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076ae:	d115      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076b4:	3308      	adds	r3, #8
 80076b6:	2101      	movs	r1, #1
 80076b8:	4618      	mov	r0, r3
 80076ba:	f002 f82d 	bl	8009718 <RCCEx_PLL2_Config>
 80076be:	4603      	mov	r3, r0
 80076c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076c4:	e017      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ca:	3328      	adds	r3, #40	@ 0x28
 80076cc:	2101      	movs	r1, #1
 80076ce:	4618      	mov	r0, r3
 80076d0:	f002 f8d4 	bl	800987c <RCCEx_PLL3_Config>
 80076d4:	4603      	mov	r3, r0
 80076d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80076da:	e00c      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076e2:	e008      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80076e4:	bf00      	nop
 80076e6:	e006      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80076e8:	bf00      	nop
 80076ea:	e004      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80076ec:	bf00      	nop
 80076ee:	e002      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80076f0:	bf00      	nop
 80076f2:	e000      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80076f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10e      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80076fe:	4b06      	ldr	r3, [pc, #24]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007702:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007706:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800770a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800770e:	4a02      	ldr	r2, [pc, #8]	@ (8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007710:	430b      	orrs	r3, r1
 8007712:	6593      	str	r3, [r2, #88]	@ 0x58
 8007714:	e006      	b.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007716:	bf00      	nop
 8007718:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800771c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007720:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007730:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007734:	2300      	movs	r3, #0
 8007736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800773a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800773e:	460b      	mov	r3, r1
 8007740:	4313      	orrs	r3, r2
 8007742:	d037      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800774a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800774e:	d00e      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007750:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007754:	d816      	bhi.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d018      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800775a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800775e:	d111      	bne.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007760:	4bc4      	ldr	r3, [pc, #784]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007764:	4ac3      	ldr	r2, [pc, #780]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800776a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800776c:	e00f      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800776e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007772:	3308      	adds	r3, #8
 8007774:	2101      	movs	r1, #1
 8007776:	4618      	mov	r0, r3
 8007778:	f001 ffce 	bl	8009718 <RCCEx_PLL2_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007782:	e004      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800778a:	e000      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800778c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800778e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007796:	4bb7      	ldr	r3, [pc, #732]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800779a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800779e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077a4:	4ab3      	ldr	r2, [pc, #716]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077a6:	430b      	orrs	r3, r1
 80077a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80077aa:	e003      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80077b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80077c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077c4:	2300      	movs	r3, #0
 80077c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80077ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	d039      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80077d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077da:	2b03      	cmp	r3, #3
 80077dc:	d81c      	bhi.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80077de:	a201      	add	r2, pc, #4	@ (adr r2, 80077e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80077e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e4:	08007821 	.word	0x08007821
 80077e8:	080077f5 	.word	0x080077f5
 80077ec:	08007803 	.word	0x08007803
 80077f0:	08007821 	.word	0x08007821
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f4:	4b9f      	ldr	r3, [pc, #636]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f8:	4a9e      	ldr	r2, [pc, #632]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007800:	e00f      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007802:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007806:	3308      	adds	r3, #8
 8007808:	2102      	movs	r1, #2
 800780a:	4618      	mov	r0, r3
 800780c:	f001 ff84 	bl	8009718 <RCCEx_PLL2_Config>
 8007810:	4603      	mov	r3, r0
 8007812:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007816:	e004      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800781e:	e000      	b.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007820:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007822:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800782a:	4b92      	ldr	r3, [pc, #584]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800782c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800782e:	f023 0103 	bic.w	r1, r3, #3
 8007832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007838:	4a8e      	ldr	r2, [pc, #568]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800783a:	430b      	orrs	r3, r1
 800783c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800783e:	e003      	b.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007844:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007854:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007858:	2300      	movs	r3, #0
 800785a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800785e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007862:	460b      	mov	r3, r1
 8007864:	4313      	orrs	r3, r2
 8007866:	f000 8099 	beq.w	800799c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800786a:	4b83      	ldr	r3, [pc, #524]	@ (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a82      	ldr	r2, [pc, #520]	@ (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007876:	f7f9 fc9f 	bl	80011b8 <HAL_GetTick>
 800787a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800787e:	e00b      	b.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007880:	f7f9 fc9a 	bl	80011b8 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	2b64      	cmp	r3, #100	@ 0x64
 800788e:	d903      	bls.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007896:	e005      	b.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007898:	4b77      	ldr	r3, [pc, #476]	@ (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0ed      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80078a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d173      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80078ac:	4b71      	ldr	r3, [pc, #452]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80078b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078b8:	4053      	eors	r3, r2
 80078ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d015      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078c2:	4b6c      	ldr	r3, [pc, #432]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80078ce:	4b69      	ldr	r3, [pc, #420]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078d2:	4a68      	ldr	r2, [pc, #416]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80078da:	4b66      	ldr	r3, [pc, #408]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078de:	4a65      	ldr	r2, [pc, #404]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80078e6:	4a63      	ldr	r2, [pc, #396]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80078ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078fa:	d118      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078fc:	f7f9 fc5c 	bl	80011b8 <HAL_GetTick>
 8007900:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007904:	e00d      	b.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007906:	f7f9 fc57 	bl	80011b8 <HAL_GetTick>
 800790a:	4602      	mov	r2, r0
 800790c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007910:	1ad2      	subs	r2, r2, r3
 8007912:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007916:	429a      	cmp	r2, r3
 8007918:	d903      	bls.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8007920:	e005      	b.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007922:	4b54      	ldr	r3, [pc, #336]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007926:	f003 0302 	and.w	r3, r3, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d0eb      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800792e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007932:	2b00      	cmp	r3, #0
 8007934:	d129      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007936:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800793a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800793e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007946:	d10e      	bne.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007948:	4b4a      	ldr	r3, [pc, #296]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007950:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007958:	091a      	lsrs	r2, r3, #4
 800795a:	4b48      	ldr	r3, [pc, #288]	@ (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800795c:	4013      	ands	r3, r2
 800795e:	4a45      	ldr	r2, [pc, #276]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007960:	430b      	orrs	r3, r1
 8007962:	6113      	str	r3, [r2, #16]
 8007964:	e005      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007966:	4b43      	ldr	r3, [pc, #268]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	4a42      	ldr	r2, [pc, #264]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800796c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007970:	6113      	str	r3, [r2, #16]
 8007972:	4b40      	ldr	r3, [pc, #256]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007974:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007976:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800797a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800797e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007982:	4a3c      	ldr	r2, [pc, #240]	@ (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007984:	430b      	orrs	r3, r1
 8007986:	6713      	str	r3, [r2, #112]	@ 0x70
 8007988:	e008      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800798a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800798e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007992:	e003      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007994:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007998:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800799c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	f002 0301 	and.w	r3, r2, #1
 80079a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079ac:	2300      	movs	r3, #0
 80079ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f000 8090 	beq.w	8007ade <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80079be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079c6:	2b28      	cmp	r3, #40	@ 0x28
 80079c8:	d870      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80079ca:	a201      	add	r2, pc, #4	@ (adr r2, 80079d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007ab5 	.word	0x08007ab5
 80079d4:	08007aad 	.word	0x08007aad
 80079d8:	08007aad 	.word	0x08007aad
 80079dc:	08007aad 	.word	0x08007aad
 80079e0:	08007aad 	.word	0x08007aad
 80079e4:	08007aad 	.word	0x08007aad
 80079e8:	08007aad 	.word	0x08007aad
 80079ec:	08007aad 	.word	0x08007aad
 80079f0:	08007a81 	.word	0x08007a81
 80079f4:	08007aad 	.word	0x08007aad
 80079f8:	08007aad 	.word	0x08007aad
 80079fc:	08007aad 	.word	0x08007aad
 8007a00:	08007aad 	.word	0x08007aad
 8007a04:	08007aad 	.word	0x08007aad
 8007a08:	08007aad 	.word	0x08007aad
 8007a0c:	08007aad 	.word	0x08007aad
 8007a10:	08007a97 	.word	0x08007a97
 8007a14:	08007aad 	.word	0x08007aad
 8007a18:	08007aad 	.word	0x08007aad
 8007a1c:	08007aad 	.word	0x08007aad
 8007a20:	08007aad 	.word	0x08007aad
 8007a24:	08007aad 	.word	0x08007aad
 8007a28:	08007aad 	.word	0x08007aad
 8007a2c:	08007aad 	.word	0x08007aad
 8007a30:	08007ab5 	.word	0x08007ab5
 8007a34:	08007aad 	.word	0x08007aad
 8007a38:	08007aad 	.word	0x08007aad
 8007a3c:	08007aad 	.word	0x08007aad
 8007a40:	08007aad 	.word	0x08007aad
 8007a44:	08007aad 	.word	0x08007aad
 8007a48:	08007aad 	.word	0x08007aad
 8007a4c:	08007aad 	.word	0x08007aad
 8007a50:	08007ab5 	.word	0x08007ab5
 8007a54:	08007aad 	.word	0x08007aad
 8007a58:	08007aad 	.word	0x08007aad
 8007a5c:	08007aad 	.word	0x08007aad
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007aad 	.word	0x08007aad
 8007a6c:	08007aad 	.word	0x08007aad
 8007a70:	08007ab5 	.word	0x08007ab5
 8007a74:	58024400 	.word	0x58024400
 8007a78:	58024800 	.word	0x58024800
 8007a7c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a84:	3308      	adds	r3, #8
 8007a86:	2101      	movs	r1, #1
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f001 fe45 	bl	8009718 <RCCEx_PLL2_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007a94:	e00f      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a9a:	3328      	adds	r3, #40	@ 0x28
 8007a9c:	2101      	movs	r1, #1
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f001 feec 	bl	800987c <RCCEx_PLL3_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007aaa:	e004      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007abe:	4bc0      	ldr	r3, [pc, #768]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ace:	4abc      	ldr	r2, [pc, #752]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ad4:	e003      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ada:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f002 0302 	and.w	r3, r2, #2
 8007aea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007aee:	2300      	movs	r3, #0
 8007af0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007af4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007af8:	460b      	mov	r3, r1
 8007afa:	4313      	orrs	r3, r2
 8007afc:	d043      	beq.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b06:	2b05      	cmp	r3, #5
 8007b08:	d824      	bhi.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b10 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b5d 	.word	0x08007b5d
 8007b14:	08007b29 	.word	0x08007b29
 8007b18:	08007b3f 	.word	0x08007b3f
 8007b1c:	08007b5d 	.word	0x08007b5d
 8007b20:	08007b5d 	.word	0x08007b5d
 8007b24:	08007b5d 	.word	0x08007b5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	2101      	movs	r1, #1
 8007b30:	4618      	mov	r0, r3
 8007b32:	f001 fdf1 	bl	8009718 <RCCEx_PLL2_Config>
 8007b36:	4603      	mov	r3, r0
 8007b38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b3c:	e00f      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b42:	3328      	adds	r3, #40	@ 0x28
 8007b44:	2101      	movs	r1, #1
 8007b46:	4618      	mov	r0, r3
 8007b48:	f001 fe98 	bl	800987c <RCCEx_PLL3_Config>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007b52:	e004      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b5a:	e000      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d10b      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007b66:	4b96      	ldr	r3, [pc, #600]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b6a:	f023 0107 	bic.w	r1, r3, #7
 8007b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b76:	4a92      	ldr	r2, [pc, #584]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b78:	430b      	orrs	r3, r1
 8007b7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b7c:	e003      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b8e:	f002 0304 	and.w	r3, r2, #4
 8007b92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b96:	2300      	movs	r3, #0
 8007b98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b9c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	d043      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bae:	2b05      	cmp	r3, #5
 8007bb0:	d824      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bb8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007c05 	.word	0x08007c05
 8007bbc:	08007bd1 	.word	0x08007bd1
 8007bc0:	08007be7 	.word	0x08007be7
 8007bc4:	08007c05 	.word	0x08007c05
 8007bc8:	08007c05 	.word	0x08007c05
 8007bcc:	08007c05 	.word	0x08007c05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f001 fd9d 	bl	8009718 <RCCEx_PLL2_Config>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007be4:	e00f      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bea:	3328      	adds	r3, #40	@ 0x28
 8007bec:	2101      	movs	r1, #1
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f001 fe44 	bl	800987c <RCCEx_PLL3_Config>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007bfa:	e004      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007c02:	e000      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10b      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c0e:	4b6c      	ldr	r3, [pc, #432]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c12:	f023 0107 	bic.w	r1, r3, #7
 8007c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c1e:	4a68      	ldr	r2, [pc, #416]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c20:	430b      	orrs	r3, r1
 8007c22:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c24:	e003      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f002 0320 	and.w	r3, r2, #32
 8007c3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	d055      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c5a:	d033      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c60:	d82c      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c66:	d02f      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c6c:	d826      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007c6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c72:	d02b      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007c74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007c78:	d820      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007c7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c7e:	d012      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c84:	d81a      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d022      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c8e:	d115      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c94:	3308      	adds	r3, #8
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 fd3d 	bl	8009718 <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ca4:	e015      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007caa:	3328      	adds	r3, #40	@ 0x28
 8007cac:	2102      	movs	r1, #2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 fde4 	bl	800987c <RCCEx_PLL3_Config>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007cba:	e00a      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cc2:	e006      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007cc4:	bf00      	nop
 8007cc6:	e004      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007cc8:	bf00      	nop
 8007cca:	e002      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007ccc:	bf00      	nop
 8007cce:	e000      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10b      	bne.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cda:	4b39      	ldr	r3, [pc, #228]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cea:	4a35      	ldr	r2, [pc, #212]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cec:	430b      	orrs	r3, r1
 8007cee:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cf0:	e003      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cf6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007d06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007d10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007d14:	460b      	mov	r3, r1
 8007d16:	4313      	orrs	r3, r2
 8007d18:	d058      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007d1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d22:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d26:	d033      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007d28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d2c:	d82c      	bhi.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d32:	d02f      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d38:	d826      	bhi.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007d3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d3e:	d02b      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007d40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007d44:	d820      	bhi.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007d46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d4a:	d012      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d50:	d81a      	bhi.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d022      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d5a:	d115      	bne.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d60:	3308      	adds	r3, #8
 8007d62:	2100      	movs	r1, #0
 8007d64:	4618      	mov	r0, r3
 8007d66:	f001 fcd7 	bl	8009718 <RCCEx_PLL2_Config>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d70:	e015      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d76:	3328      	adds	r3, #40	@ 0x28
 8007d78:	2102      	movs	r1, #2
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fd7e 	bl	800987c <RCCEx_PLL3_Config>
 8007d80:	4603      	mov	r3, r0
 8007d82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007d86:	e00a      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d8e:	e006      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007d90:	bf00      	nop
 8007d92:	e004      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007d94:	bf00      	nop
 8007d96:	e002      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10e      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007da6:	4b06      	ldr	r3, [pc, #24]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007daa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007dae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007db6:	4a02      	ldr	r2, [pc, #8]	@ (8007dc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007db8:	430b      	orrs	r3, r1
 8007dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dbc:	e006      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007dbe:	bf00      	nop
 8007dc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007de2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007de6:	460b      	mov	r3, r1
 8007de8:	4313      	orrs	r3, r2
 8007dea:	d055      	beq.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007df4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007df8:	d033      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007dfa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007dfe:	d82c      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e04:	d02f      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e0a:	d826      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007e0c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e10:	d02b      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007e12:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007e16:	d820      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007e18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e1c:	d012      	beq.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007e1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007e22:	d81a      	bhi.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d022      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007e28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e2c:	d115      	bne.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e32:	3308      	adds	r3, #8
 8007e34:	2100      	movs	r1, #0
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 fc6e 	bl	8009718 <RCCEx_PLL2_Config>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e42:	e015      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e48:	3328      	adds	r3, #40	@ 0x28
 8007e4a:	2102      	movs	r1, #2
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f001 fd15 	bl	800987c <RCCEx_PLL3_Config>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007e58:	e00a      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e60:	e006      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007e62:	bf00      	nop
 8007e64:	e004      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007e66:	bf00      	nop
 8007e68:	e002      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007e6a:	bf00      	nop
 8007e6c:	e000      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10b      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e78:	4ba1      	ldr	r3, [pc, #644]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e7c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007e88:	4a9d      	ldr	r2, [pc, #628]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e8a:	430b      	orrs	r3, r1
 8007e8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e8e:	e003      	b.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea0:	f002 0308 	and.w	r3, r2, #8
 8007ea4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007eae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	d01e      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007eb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ec0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eca:	3328      	adds	r3, #40	@ 0x28
 8007ecc:	2102      	movs	r1, #2
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f001 fcd4 	bl	800987c <RCCEx_PLL3_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007ee0:	4b87      	ldr	r3, [pc, #540]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ee4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ef0:	4a83      	ldr	r2, [pc, #524]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007ef2:	430b      	orrs	r3, r1
 8007ef4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	f002 0310 	and.w	r3, r2, #16
 8007f02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f06:	2300      	movs	r3, #0
 8007f08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f0c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007f10:	460b      	mov	r3, r1
 8007f12:	4313      	orrs	r3, r2
 8007f14:	d01e      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f22:	d10c      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f28:	3328      	adds	r3, #40	@ 0x28
 8007f2a:	2102      	movs	r1, #2
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f001 fca5 	bl	800987c <RCCEx_PLL3_Config>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d002      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f3e:	4b70      	ldr	r3, [pc, #448]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007f4e:	4a6c      	ldr	r2, [pc, #432]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f50:	430b      	orrs	r3, r1
 8007f52:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007f60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f64:	2300      	movs	r3, #0
 8007f66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f6a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4313      	orrs	r3, r2
 8007f72:	d03e      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007f74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007f7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f80:	d022      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007f82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f86:	d81b      	bhi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f90:	d00b      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007f92:	e015      	b.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f98:	3308      	adds	r3, #8
 8007f9a:	2100      	movs	r1, #0
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f001 fbbb 	bl	8009718 <RCCEx_PLL2_Config>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fa8:	e00f      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fae:	3328      	adds	r3, #40	@ 0x28
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f001 fc62 	bl	800987c <RCCEx_PLL3_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007fbe:	e004      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fc6:	e000      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10b      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fd6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007fe2:	4a47      	ldr	r2, [pc, #284]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	6593      	str	r3, [r2, #88]	@ 0x58
 8007fe8:	e003      	b.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008000:	2300      	movs	r3, #0
 8008002:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008004:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008008:	460b      	mov	r3, r1
 800800a:	4313      	orrs	r3, r2
 800800c:	d03b      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800800e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008016:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800801a:	d01f      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800801c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008020:	d818      	bhi.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008026:	d003      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800802c:	d007      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800802e:	e011      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008030:	4b33      	ldr	r3, [pc, #204]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	4a32      	ldr	r2, [pc, #200]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800803a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800803c:	e00f      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800803e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008042:	3328      	adds	r3, #40	@ 0x28
 8008044:	2101      	movs	r1, #1
 8008046:	4618      	mov	r0, r3
 8008048:	f001 fc18 	bl	800987c <RCCEx_PLL3_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008052:	e004      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008054:	2301      	movs	r3, #1
 8008056:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800805a:	e000      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800805c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800805e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008062:	2b00      	cmp	r3, #0
 8008064:	d10b      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008066:	4b26      	ldr	r3, [pc, #152]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800806a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800806e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008076:	4a22      	ldr	r2, [pc, #136]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008078:	430b      	orrs	r3, r1
 800807a:	6553      	str	r3, [r2, #84]	@ 0x54
 800807c:	e003      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008082:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008092:	673b      	str	r3, [r7, #112]	@ 0x70
 8008094:	2300      	movs	r3, #0
 8008096:	677b      	str	r3, [r7, #116]	@ 0x74
 8008098:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800809c:	460b      	mov	r3, r1
 800809e:	4313      	orrs	r3, r2
 80080a0:	d034      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80080a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80080ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080b0:	d007      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80080b2:	e011      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b4:	4b12      	ldr	r3, [pc, #72]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b8:	4a11      	ldr	r2, [pc, #68]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080c0:	e00e      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080c6:	3308      	adds	r3, #8
 80080c8:	2102      	movs	r1, #2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fb24 	bl	8009718 <RCCEx_PLL2_Config>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80080d6:	e003      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10d      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80080e8:	4b05      	ldr	r3, [pc, #20]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80080ec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80080f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080f6:	4a02      	ldr	r2, [pc, #8]	@ (8008100 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080f8:	430b      	orrs	r3, r1
 80080fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80080fc:	e006      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80080fe:	bf00      	nop
 8008100:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008104:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008108:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800810c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800811a:	2300      	movs	r3, #0
 800811c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800811e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008122:	460b      	mov	r3, r1
 8008124:	4313      	orrs	r3, r2
 8008126:	d00c      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812c:	3328      	adds	r3, #40	@ 0x28
 800812e:	2102      	movs	r1, #2
 8008130:	4618      	mov	r0, r3
 8008132:	f001 fba3 	bl	800987c <RCCEx_PLL3_Config>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800814e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008150:	2300      	movs	r3, #0
 8008152:	667b      	str	r3, [r7, #100]	@ 0x64
 8008154:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008158:	460b      	mov	r3, r1
 800815a:	4313      	orrs	r3, r2
 800815c:	d038      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800816a:	d018      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800816c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008170:	d811      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008176:	d014      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800817c:	d80b      	bhi.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d011      	beq.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008186:	d106      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008188:	4bc3      	ldr	r3, [pc, #780]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800818a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818c:	4ac2      	ldr	r2, [pc, #776]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800818e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008194:	e008      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800819c:	e004      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800819e:	bf00      	nop
 80081a0:	e002      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80081a2:	bf00      	nop
 80081a4:	e000      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80081a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80081b0:	4bb9      	ldr	r3, [pc, #740]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80081b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081c0:	4ab5      	ldr	r2, [pc, #724]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081c2:	430b      	orrs	r3, r1
 80081c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80081c6:	e003      	b.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80081d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80081dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081de:	2300      	movs	r3, #0
 80081e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80081e6:	460b      	mov	r3, r1
 80081e8:	4313      	orrs	r3, r2
 80081ea:	d009      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80081ec:	4baa      	ldr	r3, [pc, #680]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80081f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081fa:	4aa7      	ldr	r2, [pc, #668]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008200:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800820c:	653b      	str	r3, [r7, #80]	@ 0x50
 800820e:	2300      	movs	r3, #0
 8008210:	657b      	str	r3, [r7, #84]	@ 0x54
 8008212:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008216:	460b      	mov	r3, r1
 8008218:	4313      	orrs	r3, r2
 800821a:	d009      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800821c:	4b9e      	ldr	r3, [pc, #632]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800821e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008220:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008224:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822a:	4a9b      	ldr	r2, [pc, #620]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800822c:	430b      	orrs	r3, r1
 800822e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800823c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800823e:	2300      	movs	r3, #0
 8008240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008242:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008246:	460b      	mov	r3, r1
 8008248:	4313      	orrs	r3, r2
 800824a:	d009      	beq.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800824c:	4b92      	ldr	r3, [pc, #584]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800824e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008250:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008254:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800825a:	4a8f      	ldr	r2, [pc, #572]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800825c:	430b      	orrs	r3, r1
 800825e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008268:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800826c:	643b      	str	r3, [r7, #64]	@ 0x40
 800826e:	2300      	movs	r3, #0
 8008270:	647b      	str	r3, [r7, #68]	@ 0x44
 8008272:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008276:	460b      	mov	r3, r1
 8008278:	4313      	orrs	r3, r2
 800827a:	d00e      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800827c:	4b86      	ldr	r3, [pc, #536]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	4a85      	ldr	r2, [pc, #532]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008282:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008286:	6113      	str	r3, [r2, #16]
 8008288:	4b83      	ldr	r3, [pc, #524]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800828a:	6919      	ldr	r1, [r3, #16]
 800828c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008290:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008294:	4a80      	ldr	r2, [pc, #512]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008296:	430b      	orrs	r3, r1
 8008298:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800829a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80082a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082a8:	2300      	movs	r3, #0
 80082aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80082b0:	460b      	mov	r3, r1
 80082b2:	4313      	orrs	r3, r2
 80082b4:	d009      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082b6:	4b78      	ldr	r3, [pc, #480]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80082be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c4:	4a74      	ldr	r2, [pc, #464]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082c6:	430b      	orrs	r3, r1
 80082c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80082d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80082d8:	2300      	movs	r3, #0
 80082da:	637b      	str	r3, [r7, #52]	@ 0x34
 80082dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80082e0:	460b      	mov	r3, r1
 80082e2:	4313      	orrs	r3, r2
 80082e4:	d00a      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082e6:	4b6c      	ldr	r3, [pc, #432]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80082ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082f6:	4a68      	ldr	r2, [pc, #416]	@ (8008498 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80082f8:	430b      	orrs	r3, r1
 80082fa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80082fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	2100      	movs	r1, #0
 8008306:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800830e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008312:	460b      	mov	r3, r1
 8008314:	4313      	orrs	r3, r2
 8008316:	d011      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800831c:	3308      	adds	r3, #8
 800831e:	2100      	movs	r1, #0
 8008320:	4618      	mov	r0, r3
 8008322:	f001 f9f9 	bl	8009718 <RCCEx_PLL2_Config>
 8008326:	4603      	mov	r3, r0
 8008328:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800832c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008334:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008338:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800833c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008344:	2100      	movs	r1, #0
 8008346:	6239      	str	r1, [r7, #32]
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	627b      	str	r3, [r7, #36]	@ 0x24
 800834e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008352:	460b      	mov	r3, r1
 8008354:	4313      	orrs	r3, r2
 8008356:	d011      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008358:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800835c:	3308      	adds	r3, #8
 800835e:	2101      	movs	r1, #1
 8008360:	4618      	mov	r0, r3
 8008362:	f001 f9d9 	bl	8009718 <RCCEx_PLL2_Config>
 8008366:	4603      	mov	r3, r0
 8008368:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800836c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008374:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008378:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800837c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	2100      	movs	r1, #0
 8008386:	61b9      	str	r1, [r7, #24]
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	61fb      	str	r3, [r7, #28]
 800838e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008392:	460b      	mov	r3, r1
 8008394:	4313      	orrs	r3, r2
 8008396:	d011      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008398:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839c:	3308      	adds	r3, #8
 800839e:	2102      	movs	r1, #2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f001 f9b9 	bl	8009718 <RCCEx_PLL2_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80083ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80083bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c4:	2100      	movs	r1, #0
 80083c6:	6139      	str	r1, [r7, #16]
 80083c8:	f003 0308 	and.w	r3, r3, #8
 80083cc:	617b      	str	r3, [r7, #20]
 80083ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80083d2:	460b      	mov	r3, r1
 80083d4:	4313      	orrs	r3, r2
 80083d6:	d011      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80083d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083dc:	3328      	adds	r3, #40	@ 0x28
 80083de:	2100      	movs	r1, #0
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 fa4b 	bl	800987c <RCCEx_PLL3_Config>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80083ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d003      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80083fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008404:	2100      	movs	r1, #0
 8008406:	60b9      	str	r1, [r7, #8]
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008412:	460b      	mov	r3, r1
 8008414:	4313      	orrs	r3, r2
 8008416:	d011      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800841c:	3328      	adds	r3, #40	@ 0x28
 800841e:	2101      	movs	r1, #1
 8008420:	4618      	mov	r0, r3
 8008422:	f001 fa2b 	bl	800987c <RCCEx_PLL3_Config>
 8008426:	4603      	mov	r3, r0
 8008428:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800842c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008430:	2b00      	cmp	r3, #0
 8008432:	d003      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008434:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008438:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800843c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008444:	2100      	movs	r1, #0
 8008446:	6039      	str	r1, [r7, #0]
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	607b      	str	r3, [r7, #4]
 800844e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008452:	460b      	mov	r3, r1
 8008454:	4313      	orrs	r3, r2
 8008456:	d011      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008458:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800845c:	3328      	adds	r3, #40	@ 0x28
 800845e:	2102      	movs	r1, #2
 8008460:	4618      	mov	r0, r3
 8008462:	f001 fa0b 	bl	800987c <RCCEx_PLL3_Config>
 8008466:	4603      	mov	r3, r0
 8008468:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800846c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008474:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008478:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800847c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8008484:	2300      	movs	r3, #0
 8008486:	e000      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
}
 800848a:	4618      	mov	r0, r3
 800848c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8008490:	46bd      	mov	sp, r7
 8008492:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008496:	bf00      	nop
 8008498:	58024400 	.word	0x58024400

0800849c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b090      	sub	sp, #64	@ 0x40
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80084a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084aa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80084ae:	430b      	orrs	r3, r1
 80084b0:	f040 8094 	bne.w	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80084b4:	4b97      	ldr	r3, [pc, #604]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	f200 8087 	bhi.w	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80084c6:	a201      	add	r2, pc, #4	@ (adr r2, 80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080084e1 	.word	0x080084e1
 80084d0:	08008509 	.word	0x08008509
 80084d4:	08008531 	.word	0x08008531
 80084d8:	080085cd 	.word	0x080085cd
 80084dc:	08008559 	.word	0x08008559
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084e0:	4b8c      	ldr	r3, [pc, #560]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80084ec:	d108      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 ff68 	bl	80093c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80084fc:	f000 bc97 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008504:	f000 bc93 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008508:	4b82      	ldr	r3, [pc, #520]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008510:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008514:	d108      	bne.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008516:	f107 0318 	add.w	r3, r7, #24
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fcac 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008524:	f000 bc83 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008528:	2300      	movs	r3, #0
 800852a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800852c:	f000 bc7f 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008530:	4b78      	ldr	r3, [pc, #480]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800853c:	d108      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800853e:	f107 030c 	add.w	r3, r7, #12
 8008542:	4618      	mov	r0, r3
 8008544:	f000 fdec 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800854c:	f000 bc6f 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008554:	f000 bc6b 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008558:	4b6e      	ldr	r3, [pc, #440]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800855a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800855c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008560:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008562:	4b6c      	ldr	r3, [pc, #432]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0304 	and.w	r3, r3, #4
 800856a:	2b04      	cmp	r3, #4
 800856c:	d10c      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800856e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008570:	2b00      	cmp	r3, #0
 8008572:	d109      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008574:	4b67      	ldr	r3, [pc, #412]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	08db      	lsrs	r3, r3, #3
 800857a:	f003 0303 	and.w	r3, r3, #3
 800857e:	4a66      	ldr	r2, [pc, #408]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008580:	fa22 f303 	lsr.w	r3, r2, r3
 8008584:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008586:	e01f      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008588:	4b62      	ldr	r3, [pc, #392]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008590:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008594:	d106      	bne.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008598:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800859c:	d102      	bne.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800859e:	4b5f      	ldr	r3, [pc, #380]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80085a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085a2:	e011      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085a4:	4b5b      	ldr	r3, [pc, #364]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085b0:	d106      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80085b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085b8:	d102      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085ba:	4b59      	ldr	r3, [pc, #356]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80085bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085be:	e003      	b.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085c0:	2300      	movs	r3, #0
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085c4:	f000 bc33 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80085c8:	f000 bc31 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085cc:	4b55      	ldr	r3, [pc, #340]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d0:	f000 bc2d 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80085d4:	2300      	movs	r3, #0
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d8:	f000 bc29 	b.w	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80085dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085e0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80085e4:	430b      	orrs	r3, r1
 80085e6:	f040 809f 	bne.w	8008728 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80085ea:	4b4a      	ldr	r3, [pc, #296]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ee:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80085f2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80085f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085fa:	d04d      	beq.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80085fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008602:	f200 8084 	bhi.w	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	2bc0      	cmp	r3, #192	@ 0xc0
 800860a:	d07d      	beq.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800860c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008610:	d87d      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	2b80      	cmp	r3, #128	@ 0x80
 8008616:	d02d      	beq.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861a:	2b80      	cmp	r3, #128	@ 0x80
 800861c:	d877      	bhi.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800861e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008626:	2b40      	cmp	r3, #64	@ 0x40
 8008628:	d012      	beq.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800862a:	e070      	b.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800862c:	4b39      	ldr	r3, [pc, #228]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008634:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008638:	d107      	bne.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800863a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800863e:	4618      	mov	r0, r3
 8008640:	f000 fec2 	bl	80093c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008648:	e3f1      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800864e:	e3ee      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008650:	4b30      	ldr	r3, [pc, #192]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800865c:	d107      	bne.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800865e:	f107 0318 	add.w	r3, r7, #24
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fc08 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866c:	e3df      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008672:	e3dc      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008674:	4b27      	ldr	r3, [pc, #156]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800867c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008680:	d107      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008682:	f107 030c 	add.w	r3, r7, #12
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fd4a 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008690:	e3cd      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008696:	e3ca      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008698:	4b1e      	ldr	r3, [pc, #120]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800869a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800869c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80086a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d10c      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80086ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d109      	bne.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086b4:	4b17      	ldr	r3, [pc, #92]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	08db      	lsrs	r3, r3, #3
 80086ba:	f003 0303 	and.w	r3, r3, #3
 80086be:	4a16      	ldr	r2, [pc, #88]	@ (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80086c0:	fa22 f303 	lsr.w	r3, r2, r3
 80086c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086c6:	e01e      	b.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086c8:	4b12      	ldr	r3, [pc, #72]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086d4:	d106      	bne.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086dc:	d102      	bne.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80086de:	4b0f      	ldr	r3, [pc, #60]	@ (800871c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80086e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086e2:	e010      	b.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086f0:	d106      	bne.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80086f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80086f8:	d102      	bne.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80086fa:	4b09      	ldr	r3, [pc, #36]	@ (8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80086fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086fe:	e002      	b.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008700:	2300      	movs	r3, #0
 8008702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008704:	e393      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008706:	e392      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008708:	4b06      	ldr	r3, [pc, #24]	@ (8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800870c:	e38f      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008712:	e38c      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008714:	58024400 	.word	0x58024400
 8008718:	03d09000 	.word	0x03d09000
 800871c:	003d0900 	.word	0x003d0900
 8008720:	007a1200 	.word	0x007a1200
 8008724:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800872c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008730:	430b      	orrs	r3, r1
 8008732:	f040 809c 	bne.w	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8008736:	4b9e      	ldr	r3, [pc, #632]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800873a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800873e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008746:	d054      	beq.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800874e:	f200 808b 	bhi.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008754:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008758:	f000 8083 	beq.w	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800875c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008762:	f200 8081 	bhi.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800876c:	d02f      	beq.n	80087ce <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008774:	d878      	bhi.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800877c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800877e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008782:	d012      	beq.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8008784:	e070      	b.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008786:	4b8a      	ldr	r3, [pc, #552]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800878e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008792:	d107      	bne.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008794:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fe15 	bl	80093c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800879e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a2:	e344      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a8:	e341      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087aa:	4b81      	ldr	r3, [pc, #516]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087b6:	d107      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087b8:	f107 0318 	add.w	r3, r7, #24
 80087bc:	4618      	mov	r0, r3
 80087be:	f000 fb5b 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087c6:	e332      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087cc:	e32f      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087ce:	4b78      	ldr	r3, [pc, #480]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087da:	d107      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087dc:	f107 030c 	add.w	r3, r7, #12
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fc9d 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087ea:	e320      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f0:	e31d      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087f2:	4b6f      	ldr	r3, [pc, #444]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80087f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087fc:	4b6c      	ldr	r3, [pc, #432]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b04      	cmp	r3, #4
 8008806:	d10c      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880a:	2b00      	cmp	r3, #0
 800880c:	d109      	bne.n	8008822 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800880e:	4b68      	ldr	r3, [pc, #416]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	08db      	lsrs	r3, r3, #3
 8008814:	f003 0303 	and.w	r3, r3, #3
 8008818:	4a66      	ldr	r2, [pc, #408]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800881a:	fa22 f303 	lsr.w	r3, r2, r3
 800881e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008820:	e01e      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008822:	4b63      	ldr	r3, [pc, #396]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800882a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800882e:	d106      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008832:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008836:	d102      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008838:	4b5f      	ldr	r3, [pc, #380]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800883a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800883c:	e010      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800883e:	4b5c      	ldr	r3, [pc, #368]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800884a:	d106      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800884c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008852:	d102      	bne.n	800885a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008854:	4b59      	ldr	r3, [pc, #356]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008858:	e002      	b.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800885e:	e2e6      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008860:	e2e5      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008862:	4b57      	ldr	r3, [pc, #348]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008866:	e2e2      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800886c:	e2df      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800886e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008872:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008876:	430b      	orrs	r3, r1
 8008878:	f040 80a7 	bne.w	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800887c:	4b4c      	ldr	r3, [pc, #304]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800887e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008880:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008884:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008888:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800888c:	d055      	beq.n	800893a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800888e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008894:	f200 8096 	bhi.w	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800889e:	f000 8084 	beq.w	80089aa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80088a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80088a8:	f200 808c 	bhi.w	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80088ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088b2:	d030      	beq.n	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088ba:	f200 8083 	bhi.w	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80088be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d004      	beq.n	80088ce <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ca:	d012      	beq.n	80088f2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80088cc:	e07a      	b.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088ce:	4b38      	ldr	r3, [pc, #224]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088da:	d107      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 fd71 	bl	80093c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088ea:	e2a0      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088f0:	e29d      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088f2:	4b2f      	ldr	r3, [pc, #188]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088fe:	d107      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008900:	f107 0318 	add.w	r3, r7, #24
 8008904:	4618      	mov	r0, r3
 8008906:	f000 fab7 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800890e:	e28e      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008910:	2300      	movs	r3, #0
 8008912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008914:	e28b      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008916:	4b26      	ldr	r3, [pc, #152]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800891e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008922:	d107      	bne.n	8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008924:	f107 030c 	add.w	r3, r7, #12
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fbf9 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008932:	e27c      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008938:	e279      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800893a:	4b1d      	ldr	r3, [pc, #116]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800893c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800893e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008942:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008944:	4b1a      	ldr	r3, [pc, #104]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b04      	cmp	r3, #4
 800894e:	d10c      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008952:	2b00      	cmp	r3, #0
 8008954:	d109      	bne.n	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008956:	4b16      	ldr	r3, [pc, #88]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	08db      	lsrs	r3, r3, #3
 800895c:	f003 0303 	and.w	r3, r3, #3
 8008960:	4a14      	ldr	r2, [pc, #80]	@ (80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008962:	fa22 f303 	lsr.w	r3, r2, r3
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008968:	e01e      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800896a:	4b11      	ldr	r3, [pc, #68]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008972:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008976:	d106      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800897a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800897e:	d102      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008980:	4b0d      	ldr	r3, [pc, #52]	@ (80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008984:	e010      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008986:	4b0a      	ldr	r3, [pc, #40]	@ (80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800898e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008992:	d106      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800899a:	d102      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800899c:	4b07      	ldr	r3, [pc, #28]	@ (80089bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800899e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089a0:	e002      	b.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80089a6:	e242      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80089a8:	e241      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089aa:	4b05      	ldr	r3, [pc, #20]	@ (80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80089ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ae:	e23e      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80089b0:	58024400 	.word	0x58024400
 80089b4:	03d09000 	.word	0x03d09000
 80089b8:	003d0900 	.word	0x003d0900
 80089bc:	007a1200 	.word	0x007a1200
 80089c0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80089c4:	2300      	movs	r3, #0
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089c8:	e231      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80089ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089ce:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80089d2:	430b      	orrs	r3, r1
 80089d4:	f040 8085 	bne.w	8008ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80089d8:	4b9c      	ldr	r3, [pc, #624]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80089e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089e8:	d06b      	beq.n	8008ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80089ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089f0:	d874      	bhi.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80089f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80089f8:	d056      	beq.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80089fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a00:	d86c      	bhi.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a08:	d03b      	beq.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a10:	d864      	bhi.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a18:	d021      	beq.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a20:	d85c      	bhi.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d004      	beq.n	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a2e:	d004      	beq.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008a30:	e054      	b.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008a32:	f7fe fb49 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 8008a36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008a38:	e1f9      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a3a:	4b84      	ldr	r3, [pc, #528]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a46:	d107      	bne.n	8008a58 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a48:	f107 0318 	add.w	r3, r7, #24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fa13 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a56:	e1ea      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a5c:	e1e7      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a6a:	d107      	bne.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a6c:	f107 030c 	add.w	r3, r7, #12
 8008a70:	4618      	mov	r0, r3
 8008a72:	f000 fb55 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a7a:	e1d8      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a80:	e1d5      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008a82:	4b72      	ldr	r3, [pc, #456]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 0304 	and.w	r3, r3, #4
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d109      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	08db      	lsrs	r3, r3, #3
 8008a94:	f003 0303 	and.w	r3, r3, #3
 8008a98:	4a6d      	ldr	r2, [pc, #436]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aa0:	e1c5      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aa6:	e1c2      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008aa8:	4b68      	ldr	r3, [pc, #416]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ab4:	d102      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8008ab6:	4b67      	ldr	r3, [pc, #412]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008aba:	e1b8      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008abc:	2300      	movs	r3, #0
 8008abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ac0:	e1b5      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ac2:	4b62      	ldr	r3, [pc, #392]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ace:	d102      	bne.n	8008ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8008ad0:	4b61      	ldr	r3, [pc, #388]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ad4:	e1ab      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ada:	e1a8      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008adc:	2300      	movs	r3, #0
 8008ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ae0:	e1a5      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008ae2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ae6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008aea:	430b      	orrs	r3, r1
 8008aec:	d173      	bne.n	8008bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008aee:	4b57      	ldr	r3, [pc, #348]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008af0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008af2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008af6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008afe:	d02f      	beq.n	8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8008b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b06:	d863      	bhi.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d004      	beq.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b14:	d012      	beq.n	8008b3c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008b16:	e05b      	b.n	8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b18:	4b4c      	ldr	r3, [pc, #304]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b24:	d107      	bne.n	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b26:	f107 0318 	add.w	r3, r7, #24
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f000 f9a4 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b34:	e17b      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b36:	2300      	movs	r3, #0
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b3a:	e178      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b3c:	4b43      	ldr	r3, [pc, #268]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b48:	d107      	bne.n	8008b5a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b4a:	f107 030c 	add.w	r3, r7, #12
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fae6 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b58:	e169      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5e:	e166      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b60:	4b3a      	ldr	r3, [pc, #232]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b68:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b6a:	4b38      	ldr	r3, [pc, #224]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0304 	and.w	r3, r3, #4
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d10c      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8008b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d109      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b7c:	4b33      	ldr	r3, [pc, #204]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	08db      	lsrs	r3, r3, #3
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	4a32      	ldr	r2, [pc, #200]	@ (8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b8e:	e01e      	b.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b90:	4b2e      	ldr	r3, [pc, #184]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b9c:	d106      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8008b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ba4:	d102      	bne.n	8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008baa:	e010      	b.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bac:	4b27      	ldr	r3, [pc, #156]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bb8:	d106      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bc0:	d102      	bne.n	8008bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008bc2:	4b25      	ldr	r3, [pc, #148]	@ (8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bc6:	e002      	b.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008bcc:	e12f      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008bce:	e12e      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bd4:	e12b      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008bd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bda:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008bde:	430b      	orrs	r3, r1
 8008be0:	d13c      	bne.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008be2:	4b1a      	ldr	r3, [pc, #104]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008be6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008bea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d004      	beq.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bf8:	d012      	beq.n	8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8008bfa:	e023      	b.n	8008c44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bfc:	4b13      	ldr	r3, [pc, #76]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c08:	d107      	bne.n	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fbda 	bl	80093c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c18:	e109      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c1e:	e106      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c20:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c2c:	d107      	bne.n	8008c3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c2e:	f107 0318 	add.w	r3, r7, #24
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f920 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c38:	6a3b      	ldr	r3, [r7, #32]
 8008c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c3c:	e0f7      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c42:	e0f4      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c48:	e0f1      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	03d09000 	.word	0x03d09000
 8008c54:	003d0900 	.word	0x003d0900
 8008c58:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c60:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008c64:	430b      	orrs	r3, r1
 8008c66:	f040 8091 	bne.w	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008c6a:	4b73      	ldr	r3, [pc, #460]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c6e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008c72:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c76:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008c7a:	f000 8081 	beq.w	8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c80:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008c84:	d87f      	bhi.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c8c:	d06b      	beq.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c94:	d877      	bhi.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c9c:	d056      	beq.n	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ca4:	d86f      	bhi.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ca8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cac:	d03b      	beq.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cb4:	d867      	bhi.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cbc:	d021      	beq.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cc4:	d85f      	bhi.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cd2:	d004      	beq.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008cd4:	e057      	b.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008cd6:	f000 f8b9 	bl	8008e4c <HAL_RCCEx_GetD3PCLK1Freq>
 8008cda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008cdc:	e0a7      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cde:	4b56      	ldr	r3, [pc, #344]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ce6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cea:	d107      	bne.n	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cec:	f107 0318 	add.w	r3, r7, #24
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 f8c1 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cfa:	e098      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d00:	e095      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d02:	4b4d      	ldr	r3, [pc, #308]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d0e:	d107      	bne.n	8008d20 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d10:	f107 030c 	add.w	r3, r7, #12
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fa03 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1e:	e086      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d20:	2300      	movs	r3, #0
 8008d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d24:	e083      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008d26:	4b44      	ldr	r3, [pc, #272]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0304 	and.w	r3, r3, #4
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d109      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d32:	4b41      	ldr	r3, [pc, #260]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	08db      	lsrs	r3, r3, #3
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	4a3f      	ldr	r2, [pc, #252]	@ (8008e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d44:	e073      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d4a:	e070      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d58:	d102      	bne.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8008d5a:	4b39      	ldr	r3, [pc, #228]	@ (8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d5e:	e066      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d60:	2300      	movs	r3, #0
 8008d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d64:	e063      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d66:	4b34      	ldr	r3, [pc, #208]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d72:	d102      	bne.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008d74:	4b33      	ldr	r3, [pc, #204]	@ (8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d78:	e059      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d7e:	e056      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008d80:	4b31      	ldr	r3, [pc, #196]	@ (8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d84:	e053      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d8a:	e050      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d90:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008d94:	430b      	orrs	r3, r1
 8008d96:	d148      	bne.n	8008e2a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008d98:	4b27      	ldr	r3, [pc, #156]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008da0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008da8:	d02a      	beq.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008db0:	d838      	bhi.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dbe:	d00d      	beq.n	8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8008dc0:	e030      	b.n	8008e24 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dce:	d102      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8008dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008dd4:	e02b      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dda:	e028      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008ddc:	4b16      	ldr	r3, [pc, #88]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008de4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008de8:	d107      	bne.n	8008dfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 faea 	bl	80093c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008df8:	e019      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008dfe:	e016      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e00:	4b0d      	ldr	r3, [pc, #52]	@ (8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e0c:	d107      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e0e:	f107 0318 	add.w	r3, r7, #24
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f830 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e18:	69fb      	ldr	r3, [r7, #28]
 8008e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e1c:	e007      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e22:	e004      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008e24:	2300      	movs	r3, #0
 8008e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e28:	e001      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3740      	adds	r7, #64	@ 0x40
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	58024400 	.word	0x58024400
 8008e3c:	03d09000 	.word	0x03d09000
 8008e40:	003d0900 	.word	0x003d0900
 8008e44:	007a1200 	.word	0x007a1200
 8008e48:	00bb8000 	.word	0x00bb8000

08008e4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008e50:	f7fe f90a 	bl	8007068 <HAL_RCC_GetHCLKFreq>
 8008e54:	4602      	mov	r2, r0
 8008e56:	4b06      	ldr	r3, [pc, #24]	@ (8008e70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008e58:	6a1b      	ldr	r3, [r3, #32]
 8008e5a:	091b      	lsrs	r3, r3, #4
 8008e5c:	f003 0307 	and.w	r3, r3, #7
 8008e60:	4904      	ldr	r1, [pc, #16]	@ (8008e74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008e62:	5ccb      	ldrb	r3, [r1, r3]
 8008e64:	f003 031f 	and.w	r3, r3, #31
 8008e68:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	58024400 	.word	0x58024400
 8008e74:	0800b680 	.word	0x0800b680

08008e78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b089      	sub	sp, #36	@ 0x24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e80:	4ba1      	ldr	r3, [pc, #644]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e84:	f003 0303 	and.w	r3, r3, #3
 8008e88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008e8a:	4b9f      	ldr	r3, [pc, #636]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e8e:	0b1b      	lsrs	r3, r3, #12
 8008e90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008e96:	4b9c      	ldr	r3, [pc, #624]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e9a:	091b      	lsrs	r3, r3, #4
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008ea2:	4b99      	ldr	r3, [pc, #612]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ea6:	08db      	lsrs	r3, r3, #3
 8008ea8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	fb02 f303 	mul.w	r3, r2, r3
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	f000 8111 	beq.w	80090e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	f000 8083 	beq.w	8008fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	f200 80a1 	bhi.w	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d003      	beq.n	8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d056      	beq.n	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ee2:	e099      	b.n	8009018 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ee4:	4b88      	ldr	r3, [pc, #544]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0320 	and.w	r3, r3, #32
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d02d      	beq.n	8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ef0:	4b85      	ldr	r3, [pc, #532]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	08db      	lsrs	r3, r3, #3
 8008ef6:	f003 0303 	and.w	r3, r3, #3
 8008efa:	4a84      	ldr	r2, [pc, #528]	@ (800910c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008efc:	fa22 f303 	lsr.w	r3, r2, r3
 8008f00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	ee07 3a90 	vmov	s15, r3
 8008f08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f1a:	4b7b      	ldr	r3, [pc, #492]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008f4a:	e087      	b.n	800905c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009114 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5e:	4b6a      	ldr	r3, [pc, #424]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f8e:	e065      	b.n	800905c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fa2:	4b59      	ldr	r3, [pc, #356]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008faa:	ee07 3a90 	vmov	s15, r3
 8008fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008fd2:	e043      	b.n	800905c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800911c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fe6:	4b48      	ldr	r3, [pc, #288]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fee:	ee07 3a90 	vmov	s15, r3
 8008ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ffa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800900a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800900e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009016:	e021      	b.n	800905c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009022:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009118 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800902a:	4b37      	ldr	r3, [pc, #220]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800902c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800902e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009032:	ee07 3a90 	vmov	s15, r3
 8009036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800903a:	ed97 6a03 	vldr	s12, [r7, #12]
 800903e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009110 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800904a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800904e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800905a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800905c:	4b2a      	ldr	r3, [pc, #168]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800905e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009060:	0a5b      	lsrs	r3, r3, #9
 8009062:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009066:	ee07 3a90 	vmov	s15, r3
 800906a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009072:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009076:	edd7 6a07 	vldr	s13, [r7, #28]
 800907a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800907e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009082:	ee17 2a90 	vmov	r2, s15
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800908a:	4b1f      	ldr	r3, [pc, #124]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800908c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800908e:	0c1b      	lsrs	r3, r3, #16
 8009090:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009094:	ee07 3a90 	vmov	s15, r3
 8009098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80090a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090b0:	ee17 2a90 	vmov	r2, s15
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80090b8:	4b13      	ldr	r3, [pc, #76]	@ (8009108 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090bc:	0e1b      	lsrs	r3, r3, #24
 80090be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090c2:	ee07 3a90 	vmov	s15, r3
 80090c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80090ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090de:	ee17 2a90 	vmov	r2, s15
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80090e6:	e008      	b.n	80090fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	609a      	str	r2, [r3, #8]
}
 80090fa:	bf00      	nop
 80090fc:	3724      	adds	r7, #36	@ 0x24
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	58024400 	.word	0x58024400
 800910c:	03d09000 	.word	0x03d09000
 8009110:	46000000 	.word	0x46000000
 8009114:	4c742400 	.word	0x4c742400
 8009118:	4a742400 	.word	0x4a742400
 800911c:	4af42400 	.word	0x4af42400

08009120 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009120:	b480      	push	{r7}
 8009122:	b089      	sub	sp, #36	@ 0x24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009128:	4ba1      	ldr	r3, [pc, #644]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800912a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800912c:	f003 0303 	and.w	r3, r3, #3
 8009130:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009132:	4b9f      	ldr	r3, [pc, #636]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009136:	0d1b      	lsrs	r3, r3, #20
 8009138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800913c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800913e:	4b9c      	ldr	r3, [pc, #624]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009142:	0a1b      	lsrs	r3, r3, #8
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800914a:	4b99      	ldr	r3, [pc, #612]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800914c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800914e:	08db      	lsrs	r3, r3, #3
 8009150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009154:	693a      	ldr	r2, [r7, #16]
 8009156:	fb02 f303 	mul.w	r3, r2, r3
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 8111 	beq.w	8009390 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800916e:	69bb      	ldr	r3, [r7, #24]
 8009170:	2b02      	cmp	r3, #2
 8009172:	f000 8083 	beq.w	800927c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	2b02      	cmp	r3, #2
 800917a:	f200 80a1 	bhi.w	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d003      	beq.n	800918c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d056      	beq.n	8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800918a:	e099      	b.n	80092c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800918c:	4b88      	ldr	r3, [pc, #544]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d02d      	beq.n	80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009198:	4b85      	ldr	r3, [pc, #532]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	08db      	lsrs	r3, r3, #3
 800919e:	f003 0303 	and.w	r3, r3, #3
 80091a2:	4a84      	ldr	r2, [pc, #528]	@ (80093b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80091a4:	fa22 f303 	lsr.w	r3, r2, r3
 80091a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	ee07 3a90 	vmov	s15, r3
 80091b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c2:	4b7b      	ldr	r3, [pc, #492]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80093b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80091f2:	e087      	b.n	8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80093bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009206:	4b6a      	ldr	r3, [pc, #424]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009216:	ed97 6a03 	vldr	s12, [r7, #12]
 800921a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80093b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800921e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009236:	e065      	b.n	8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	ee07 3a90 	vmov	s15, r3
 800923e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009242:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800924a:	4b59      	ldr	r3, [pc, #356]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800924c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800924e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009252:	ee07 3a90 	vmov	s15, r3
 8009256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800925a:	ed97 6a03 	vldr	s12, [r7, #12]
 800925e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80093b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800926a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800926e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800927a:	e043      	b.n	8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	ee07 3a90 	vmov	s15, r3
 8009282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009286:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80093c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800928a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928e:	4b48      	ldr	r3, [pc, #288]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009296:	ee07 3a90 	vmov	s15, r3
 800929a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800929e:	ed97 6a03 	vldr	s12, [r7, #12]
 80092a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80093b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092be:	e021      	b.n	8009304 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80093c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80092ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092d2:	4b37      	ldr	r3, [pc, #220]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80092d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092da:	ee07 3a90 	vmov	s15, r3
 80092de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80093b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80092ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009302:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009304:	4b2a      	ldr	r3, [pc, #168]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009308:	0a5b      	lsrs	r3, r3, #9
 800930a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009316:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800931a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800931e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800932a:	ee17 2a90 	vmov	r2, s15
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009332:	4b1f      	ldr	r3, [pc, #124]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009336:	0c1b      	lsrs	r3, r3, #16
 8009338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800933c:	ee07 3a90 	vmov	s15, r3
 8009340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009344:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800934c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009358:	ee17 2a90 	vmov	r2, s15
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009360:	4b13      	ldr	r3, [pc, #76]	@ (80093b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009364:	0e1b      	lsrs	r3, r3, #24
 8009366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009372:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800937a:	edd7 6a07 	vldr	s13, [r7, #28]
 800937e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009386:	ee17 2a90 	vmov	r2, s15
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800938e:	e008      	b.n	80093a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	609a      	str	r2, [r3, #8]
}
 80093a2:	bf00      	nop
 80093a4:	3724      	adds	r7, #36	@ 0x24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	58024400 	.word	0x58024400
 80093b4:	03d09000 	.word	0x03d09000
 80093b8:	46000000 	.word	0x46000000
 80093bc:	4c742400 	.word	0x4c742400
 80093c0:	4a742400 	.word	0x4a742400
 80093c4:	4af42400 	.word	0x4af42400

080093c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b089      	sub	sp, #36	@ 0x24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80093d0:	4ba0      	ldr	r3, [pc, #640]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80093da:	4b9e      	ldr	r3, [pc, #632]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093de:	091b      	lsrs	r3, r3, #4
 80093e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80093e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80093e6:	4b9b      	ldr	r3, [pc, #620]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80093f0:	4b98      	ldr	r3, [pc, #608]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093f4:	08db      	lsrs	r3, r3, #3
 80093f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	fb02 f303 	mul.w	r3, r2, r3
 8009400:	ee07 3a90 	vmov	s15, r3
 8009404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009408:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 8111 	beq.w	8009636 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	2b02      	cmp	r3, #2
 8009418:	f000 8083 	beq.w	8009522 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	2b02      	cmp	r3, #2
 8009420:	f200 80a1 	bhi.w	8009566 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d003      	beq.n	8009432 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d056      	beq.n	80094de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009430:	e099      	b.n	8009566 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009432:	4b88      	ldr	r3, [pc, #544]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0320 	and.w	r3, r3, #32
 800943a:	2b00      	cmp	r3, #0
 800943c:	d02d      	beq.n	800949a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800943e:	4b85      	ldr	r3, [pc, #532]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	08db      	lsrs	r3, r3, #3
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	4a83      	ldr	r2, [pc, #524]	@ (8009658 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800944a:	fa22 f303 	lsr.w	r3, r2, r3
 800944e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	ee07 3a90 	vmov	s15, r3
 8009456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	ee07 3a90 	vmov	s15, r3
 8009460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009468:	4b7a      	ldr	r3, [pc, #488]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800946a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009470:	ee07 3a90 	vmov	s15, r3
 8009474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009478:	ed97 6a03 	vldr	s12, [r7, #12]
 800947c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800965c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009488:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800948c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009494:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009498:	e087      	b.n	80095aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	ee07 3a90 	vmov	s15, r3
 80094a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009660 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ac:	4b69      	ldr	r3, [pc, #420]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b4:	ee07 3a90 	vmov	s15, r3
 80094b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800965c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094dc:	e065      	b.n	80095aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	ee07 3a90 	vmov	s15, r3
 80094e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009664 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80094ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094f0:	4b58      	ldr	r3, [pc, #352]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f8:	ee07 3a90 	vmov	s15, r3
 80094fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009500:	ed97 6a03 	vldr	s12, [r7, #12]
 8009504:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800965c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009508:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800950c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009510:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009514:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009520:	e043      	b.n	80095aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	ee07 3a90 	vmov	s15, r3
 8009528:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8009668 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009534:	4b47      	ldr	r3, [pc, #284]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800953c:	ee07 3a90 	vmov	s15, r3
 8009540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009544:	ed97 6a03 	vldr	s12, [r7, #12]
 8009548:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800965c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800954c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009550:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009554:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800955c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009560:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009564:	e021      	b.n	80095aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	ee07 3a90 	vmov	s15, r3
 800956c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009570:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009660 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009574:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009578:	4b36      	ldr	r3, [pc, #216]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800957a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800957c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009580:	ee07 3a90 	vmov	s15, r3
 8009584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009588:	ed97 6a03 	vldr	s12, [r7, #12]
 800958c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800965c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009590:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009594:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800959c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80095aa:	4b2a      	ldr	r3, [pc, #168]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095ae:	0a5b      	lsrs	r3, r3, #9
 80095b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095b4:	ee07 3a90 	vmov	s15, r3
 80095b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80095c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095d0:	ee17 2a90 	vmov	r2, s15
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80095d8:	4b1e      	ldr	r3, [pc, #120]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80095da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095dc:	0c1b      	lsrs	r3, r3, #16
 80095de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095e2:	ee07 3a90 	vmov	s15, r3
 80095e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80095f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095fe:	ee17 2a90 	vmov	r2, s15
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009606:	4b13      	ldr	r3, [pc, #76]	@ (8009654 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800960a:	0e1b      	lsrs	r3, r3, #24
 800960c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009610:	ee07 3a90 	vmov	s15, r3
 8009614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009618:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800961c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009620:	edd7 6a07 	vldr	s13, [r7, #28]
 8009624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800962c:	ee17 2a90 	vmov	r2, s15
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009634:	e008      	b.n	8009648 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2200      	movs	r2, #0
 8009646:	609a      	str	r2, [r3, #8]
}
 8009648:	bf00      	nop
 800964a:	3724      	adds	r7, #36	@ 0x24
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr
 8009654:	58024400 	.word	0x58024400
 8009658:	03d09000 	.word	0x03d09000
 800965c:	46000000 	.word	0x46000000
 8009660:	4c742400 	.word	0x4c742400
 8009664:	4a742400 	.word	0x4a742400
 8009668:	4af42400 	.word	0x4af42400

0800966c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009674:	4b26      	ldr	r3, [pc, #152]	@ (8009710 <HAL_RCCEx_CRSConfig+0xa4>)
 8009676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800967a:	4a25      	ldr	r2, [pc, #148]	@ (8009710 <HAL_RCCEx_CRSConfig+0xa4>)
 800967c:	f043 0302 	orr.w	r3, r3, #2
 8009680:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8009684:	4b22      	ldr	r3, [pc, #136]	@ (8009710 <HAL_RCCEx_CRSConfig+0xa4>)
 8009686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800968a:	4a21      	ldr	r2, [pc, #132]	@ (8009710 <HAL_RCCEx_CRSConfig+0xa4>)
 800968c:	f023 0302 	bic.w	r3, r3, #2
 8009690:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8009694:	f7f7 fd9c 	bl	80011d0 <HAL_GetREVID>
 8009698:	4603      	mov	r3, r0
 800969a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800969e:	4293      	cmp	r3, r2
 80096a0:	d80b      	bhi.n	80096ba <HAL_RCCEx_CRSConfig+0x4e>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80096aa:	d106      	bne.n	80096ba <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	4313      	orrs	r3, r2
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	e008      	b.n	80096cc <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	431a      	orrs	r2, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	041b      	lsls	r3, r3, #16
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80096e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009714 <HAL_RCCEx_CRSConfig+0xa8>)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80096e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009714 <HAL_RCCEx_CRSConfig+0xa8>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	021b      	lsls	r3, r3, #8
 80096f6:	4907      	ldr	r1, [pc, #28]	@ (8009714 <HAL_RCCEx_CRSConfig+0xa8>)
 80096f8:	4313      	orrs	r3, r2
 80096fa:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80096fc:	4b05      	ldr	r3, [pc, #20]	@ (8009714 <HAL_RCCEx_CRSConfig+0xa8>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a04      	ldr	r2, [pc, #16]	@ (8009714 <HAL_RCCEx_CRSConfig+0xa8>)
 8009702:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009706:	6013      	str	r3, [r2, #0]
}
 8009708:	bf00      	nop
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	58024400 	.word	0x58024400
 8009714:	40008400 	.word	0x40008400

08009718 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009726:	4b53      	ldr	r3, [pc, #332]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 8009728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800972a:	f003 0303 	and.w	r3, r3, #3
 800972e:	2b03      	cmp	r3, #3
 8009730:	d101      	bne.n	8009736 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e099      	b.n	800986a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009736:	4b4f      	ldr	r3, [pc, #316]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a4e      	ldr	r2, [pc, #312]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 800973c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009742:	f7f7 fd39 	bl	80011b8 <HAL_GetTick>
 8009746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009748:	e008      	b.n	800975c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800974a:	f7f7 fd35 	bl	80011b8 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	2b02      	cmp	r3, #2
 8009756:	d901      	bls.n	800975c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e086      	b.n	800986a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800975c:	4b45      	ldr	r3, [pc, #276]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d1f0      	bne.n	800974a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009768:	4b42      	ldr	r3, [pc, #264]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 800976a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	031b      	lsls	r3, r3, #12
 8009776:	493f      	ldr	r1, [pc, #252]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 8009778:	4313      	orrs	r3, r2
 800977a:	628b      	str	r3, [r1, #40]	@ 0x28
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	3b01      	subs	r3, #1
 8009782:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	3b01      	subs	r3, #1
 800978c:	025b      	lsls	r3, r3, #9
 800978e:	b29b      	uxth	r3, r3
 8009790:	431a      	orrs	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	3b01      	subs	r3, #1
 8009798:	041b      	lsls	r3, r3, #16
 800979a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800979e:	431a      	orrs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	061b      	lsls	r3, r3, #24
 80097a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80097ac:	4931      	ldr	r1, [pc, #196]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80097b2:	4b30      	ldr	r3, [pc, #192]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	492d      	ldr	r1, [pc, #180]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097c0:	4313      	orrs	r3, r2
 80097c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80097c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c8:	f023 0220 	bic.w	r2, r3, #32
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	4928      	ldr	r1, [pc, #160]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80097d6:	4b27      	ldr	r3, [pc, #156]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097da:	4a26      	ldr	r2, [pc, #152]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097dc:	f023 0310 	bic.w	r3, r3, #16
 80097e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80097e2:	4b24      	ldr	r3, [pc, #144]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097e6:	4b24      	ldr	r3, [pc, #144]	@ (8009878 <RCCEx_PLL2_Config+0x160>)
 80097e8:	4013      	ands	r3, r2
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	69d2      	ldr	r2, [r2, #28]
 80097ee:	00d2      	lsls	r2, r2, #3
 80097f0:	4920      	ldr	r1, [pc, #128]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097f2:	4313      	orrs	r3, r2
 80097f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80097f6:	4b1f      	ldr	r3, [pc, #124]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 80097fc:	f043 0310 	orr.w	r3, r3, #16
 8009800:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d106      	bne.n	8009816 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009808:	4b1a      	ldr	r3, [pc, #104]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 800980a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800980c:	4a19      	ldr	r2, [pc, #100]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 800980e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009812:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009814:	e00f      	b.n	8009836 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	2b01      	cmp	r3, #1
 800981a:	d106      	bne.n	800982a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800981c:	4b15      	ldr	r3, [pc, #84]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 800981e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009820:	4a14      	ldr	r2, [pc, #80]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 8009822:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009826:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009828:	e005      	b.n	8009836 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800982a:	4b12      	ldr	r3, [pc, #72]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 800982c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800982e:	4a11      	ldr	r2, [pc, #68]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 8009830:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009834:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009836:	4b0f      	ldr	r3, [pc, #60]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a0e      	ldr	r2, [pc, #56]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 800983c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009842:	f7f7 fcb9 	bl	80011b8 <HAL_GetTick>
 8009846:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009848:	e008      	b.n	800985c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800984a:	f7f7 fcb5 	bl	80011b8 <HAL_GetTick>
 800984e:	4602      	mov	r2, r0
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	1ad3      	subs	r3, r2, r3
 8009854:	2b02      	cmp	r3, #2
 8009856:	d901      	bls.n	800985c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	e006      	b.n	800986a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800985c:	4b05      	ldr	r3, [pc, #20]	@ (8009874 <RCCEx_PLL2_Config+0x15c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d0f0      	beq.n	800984a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009868:	7bfb      	ldrb	r3, [r7, #15]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	58024400 	.word	0x58024400
 8009878:	ffff0007 	.word	0xffff0007

0800987c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009886:	2300      	movs	r3, #0
 8009888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800988a:	4b53      	ldr	r3, [pc, #332]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 800988c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988e:	f003 0303 	and.w	r3, r3, #3
 8009892:	2b03      	cmp	r3, #3
 8009894:	d101      	bne.n	800989a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e099      	b.n	80099ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800989a:	4b4f      	ldr	r3, [pc, #316]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a4e      	ldr	r2, [pc, #312]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 80098a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098a6:	f7f7 fc87 	bl	80011b8 <HAL_GetTick>
 80098aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098ac:	e008      	b.n	80098c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80098ae:	f7f7 fc83 	bl	80011b8 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d901      	bls.n	80098c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e086      	b.n	80099ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098c0:	4b45      	ldr	r3, [pc, #276]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d1f0      	bne.n	80098ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80098cc:	4b42      	ldr	r3, [pc, #264]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 80098ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	051b      	lsls	r3, r3, #20
 80098da:	493f      	ldr	r1, [pc, #252]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 80098dc:	4313      	orrs	r3, r2
 80098de:	628b      	str	r3, [r1, #40]	@ 0x28
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	3b01      	subs	r3, #1
 80098f0:	025b      	lsls	r3, r3, #9
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	431a      	orrs	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	3b01      	subs	r3, #1
 80098fc:	041b      	lsls	r3, r3, #16
 80098fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009902:	431a      	orrs	r2, r3
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	3b01      	subs	r3, #1
 800990a:	061b      	lsls	r3, r3, #24
 800990c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009910:	4931      	ldr	r1, [pc, #196]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009912:	4313      	orrs	r3, r2
 8009914:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009916:	4b30      	ldr	r3, [pc, #192]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800991a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	492d      	ldr	r1, [pc, #180]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009924:	4313      	orrs	r3, r2
 8009926:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009928:	4b2b      	ldr	r3, [pc, #172]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 800992a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800992c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	4928      	ldr	r1, [pc, #160]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009936:	4313      	orrs	r3, r2
 8009938:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800993a:	4b27      	ldr	r3, [pc, #156]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 800993c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993e:	4a26      	ldr	r2, [pc, #152]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009944:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009946:	4b24      	ldr	r3, [pc, #144]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009948:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800994a:	4b24      	ldr	r3, [pc, #144]	@ (80099dc <RCCEx_PLL3_Config+0x160>)
 800994c:	4013      	ands	r3, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	69d2      	ldr	r2, [r2, #28]
 8009952:	00d2      	lsls	r2, r2, #3
 8009954:	4920      	ldr	r1, [pc, #128]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009956:	4313      	orrs	r3, r2
 8009958:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800995a:	4b1f      	ldr	r3, [pc, #124]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 800995c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995e:	4a1e      	ldr	r2, [pc, #120]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009964:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d106      	bne.n	800997a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800996c:	4b1a      	ldr	r3, [pc, #104]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 800996e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009970:	4a19      	ldr	r2, [pc, #100]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009972:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009976:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009978:	e00f      	b.n	800999a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d106      	bne.n	800998e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009980:	4b15      	ldr	r3, [pc, #84]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009984:	4a14      	ldr	r2, [pc, #80]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009986:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800998a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800998c:	e005      	b.n	800999a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800998e:	4b12      	ldr	r3, [pc, #72]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009992:	4a11      	ldr	r2, [pc, #68]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 8009994:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009998:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800999a:	4b0f      	ldr	r3, [pc, #60]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a0e      	ldr	r2, [pc, #56]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 80099a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099a6:	f7f7 fc07 	bl	80011b8 <HAL_GetTick>
 80099aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099ac:	e008      	b.n	80099c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80099ae:	f7f7 fc03 	bl	80011b8 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d901      	bls.n	80099c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e006      	b.n	80099ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099c0:	4b05      	ldr	r3, [pc, #20]	@ (80099d8 <RCCEx_PLL3_Config+0x15c>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0f0      	beq.n	80099ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3710      	adds	r7, #16
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	58024400 	.word	0x58024400
 80099dc:	ffff0007 	.word	0xffff0007

080099e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d101      	bne.n	80099f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e042      	b.n	8009a78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d106      	bne.n	8009a0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7f7 f9eb 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2224      	movs	r2, #36	@ 0x24
 8009a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f022 0201 	bic.w	r2, r2, #1
 8009a20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d002      	beq.n	8009a30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 fa6e 	bl	800af0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fbff 	bl	800a234 <UART_SetConfig>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d101      	bne.n	8009a40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e01b      	b.n	8009a78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689a      	ldr	r2, [r3, #8]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f042 0201 	orr.w	r2, r2, #1
 8009a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 faed 	bl	800b050 <UART_CheckIdleState>
 8009a76:	4603      	mov	r3, r0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b0ba      	sub	sp, #232	@ 0xe8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	69db      	ldr	r3, [r3, #28]
 8009a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009aa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009aaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009aae:	4013      	ands	r3, r2
 8009ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d11b      	bne.n	8009af4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ac0:	f003 0320 	and.w	r3, r3, #32
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d015      	beq.n	8009af4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009acc:	f003 0320 	and.w	r3, r3, #32
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d105      	bne.n	8009ae0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d009      	beq.n	8009af4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 8377 	beq.w	800a1d8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	4798      	blx	r3
      }
      return;
 8009af2:	e371      	b.n	800a1d8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 8123 	beq.w	8009d44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009afe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b02:	4b8d      	ldr	r3, [pc, #564]	@ (8009d38 <HAL_UART_IRQHandler+0x2b8>)
 8009b04:	4013      	ands	r3, r2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8009d3c <HAL_UART_IRQHandler+0x2bc>)
 8009b10:	4013      	ands	r3, r2
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f000 8116 	beq.w	8009d44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d011      	beq.n	8009b48 <HAL_UART_IRQHandler+0xc8>
 8009b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00b      	beq.n	8009b48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2201      	movs	r2, #1
 8009b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b3e:	f043 0201 	orr.w	r2, r3, #1
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d011      	beq.n	8009b78 <HAL_UART_IRQHandler+0xf8>
 8009b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00b      	beq.n	8009b78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2202      	movs	r2, #2
 8009b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b6e:	f043 0204 	orr.w	r2, r3, #4
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b7c:	f003 0304 	and.w	r3, r3, #4
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d011      	beq.n	8009ba8 <HAL_UART_IRQHandler+0x128>
 8009b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2204      	movs	r2, #4
 8009b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b9e:	f043 0202 	orr.w	r2, r3, #2
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bac:	f003 0308 	and.w	r3, r3, #8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d017      	beq.n	8009be4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bb8:	f003 0320 	and.w	r3, r3, #32
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d105      	bne.n	8009bcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009bc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009bc4:	4b5c      	ldr	r3, [pc, #368]	@ (8009d38 <HAL_UART_IRQHandler+0x2b8>)
 8009bc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00b      	beq.n	8009be4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bda:	f043 0208 	orr.w	r2, r3, #8
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d012      	beq.n	8009c16 <HAL_UART_IRQHandler+0x196>
 8009bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00c      	beq.n	8009c16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c0c:	f043 0220 	orr.w	r2, r3, #32
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 82dd 	beq.w	800a1dc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c26:	f003 0320 	and.w	r3, r3, #32
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d013      	beq.n	8009c56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d105      	bne.n	8009c46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d007      	beq.n	8009c56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d003      	beq.n	8009c56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	689b      	ldr	r3, [r3, #8]
 8009c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c6a:	2b40      	cmp	r3, #64	@ 0x40
 8009c6c:	d005      	beq.n	8009c7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009c72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d054      	beq.n	8009d24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 fb00 	bl	800b280 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c8a:	2b40      	cmp	r3, #64	@ 0x40
 8009c8c:	d146      	bne.n	8009d1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3308      	adds	r3, #8
 8009cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009cba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009cca:	e841 2300 	strex	r3, r2, [r1]
 8009cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1d9      	bne.n	8009c8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d017      	beq.n	8009d14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cea:	4a15      	ldr	r2, [pc, #84]	@ (8009d40 <HAL_UART_IRQHandler+0x2c0>)
 8009cec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fa f9ef 	bl	80040d8 <HAL_DMA_Abort_IT>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d019      	beq.n	8009d34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d0e:	4610      	mov	r0, r2
 8009d10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d12:	e00f      	b.n	8009d34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fa77 	bl	800a208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d1a:	e00b      	b.n	8009d34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fa73 	bl	800a208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d22:	e007      	b.n	8009d34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 fa6f 	bl	800a208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009d32:	e253      	b.n	800a1dc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d34:	bf00      	nop
    return;
 8009d36:	e251      	b.n	800a1dc <HAL_UART_IRQHandler+0x75c>
 8009d38:	10000001 	.word	0x10000001
 8009d3c:	04000120 	.word	0x04000120
 8009d40:	0800b34d 	.word	0x0800b34d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	f040 81e7 	bne.w	800a11c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d52:	f003 0310 	and.w	r3, r3, #16
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 81e0 	beq.w	800a11c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d60:	f003 0310 	and.w	r3, r3, #16
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 81d9 	beq.w	800a11c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	2210      	movs	r2, #16
 8009d70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d7c:	2b40      	cmp	r3, #64	@ 0x40
 8009d7e:	f040 8151 	bne.w	800a024 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a96      	ldr	r2, [pc, #600]	@ (8009fe4 <HAL_UART_IRQHandler+0x564>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d068      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a93      	ldr	r2, [pc, #588]	@ (8009fe8 <HAL_UART_IRQHandler+0x568>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d061      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a91      	ldr	r2, [pc, #580]	@ (8009fec <HAL_UART_IRQHandler+0x56c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d05a      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a8e      	ldr	r2, [pc, #568]	@ (8009ff0 <HAL_UART_IRQHandler+0x570>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d053      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a8c      	ldr	r2, [pc, #560]	@ (8009ff4 <HAL_UART_IRQHandler+0x574>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d04c      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a89      	ldr	r2, [pc, #548]	@ (8009ff8 <HAL_UART_IRQHandler+0x578>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d045      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a87      	ldr	r2, [pc, #540]	@ (8009ffc <HAL_UART_IRQHandler+0x57c>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d03e      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a84      	ldr	r2, [pc, #528]	@ (800a000 <HAL_UART_IRQHandler+0x580>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d037      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a82      	ldr	r2, [pc, #520]	@ (800a004 <HAL_UART_IRQHandler+0x584>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d030      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a7f      	ldr	r2, [pc, #508]	@ (800a008 <HAL_UART_IRQHandler+0x588>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d029      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a7d      	ldr	r2, [pc, #500]	@ (800a00c <HAL_UART_IRQHandler+0x58c>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d022      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a7a      	ldr	r2, [pc, #488]	@ (800a010 <HAL_UART_IRQHandler+0x590>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d01b      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a78      	ldr	r2, [pc, #480]	@ (800a014 <HAL_UART_IRQHandler+0x594>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d014      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a75      	ldr	r2, [pc, #468]	@ (800a018 <HAL_UART_IRQHandler+0x598>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d00d      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a73      	ldr	r2, [pc, #460]	@ (800a01c <HAL_UART_IRQHandler+0x59c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d006      	beq.n	8009e62 <HAL_UART_IRQHandler+0x3e2>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a70      	ldr	r2, [pc, #448]	@ (800a020 <HAL_UART_IRQHandler+0x5a0>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d106      	bne.n	8009e70 <HAL_UART_IRQHandler+0x3f0>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	e005      	b.n	8009e7c <HAL_UART_IRQHandler+0x3fc>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	685b      	ldr	r3, [r3, #4]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f000 81ab 	beq.w	800a1e0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e94:	429a      	cmp	r2, r3
 8009e96:	f080 81a3 	bcs.w	800a1e0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eb0:	f000 8087 	beq.w	8009fc2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009ec0:	e853 3f00 	ldrex	r3, [r3]
 8009ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	461a      	mov	r2, r3
 8009eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009ee2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1da      	bne.n	8009eb4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	3308      	adds	r3, #8
 8009f04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f08:	e853 3f00 	ldrex	r3, [r3]
 8009f0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f10:	f023 0301 	bic.w	r3, r3, #1
 8009f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009f22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f2e:	e841 2300 	strex	r3, r2, [r1]
 8009f32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1e1      	bne.n	8009efe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	3308      	adds	r3, #8
 8009f40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f44:	e853 3f00 	ldrex	r3, [r3]
 8009f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3308      	adds	r3, #8
 8009f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f66:	e841 2300 	strex	r3, r2, [r1]
 8009f6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1e3      	bne.n	8009f3a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2220      	movs	r2, #32
 8009f76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f88:	e853 3f00 	ldrex	r3, [r3]
 8009f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f90:	f023 0310 	bic.w	r3, r3, #16
 8009f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009fa4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009fa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009faa:	e841 2300 	strex	r3, r2, [r1]
 8009fae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1e4      	bne.n	8009f80 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7f9 fd6d 	bl	8003a9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f91d 	bl	800a21c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fe2:	e0fd      	b.n	800a1e0 <HAL_UART_IRQHandler+0x760>
 8009fe4:	40020010 	.word	0x40020010
 8009fe8:	40020028 	.word	0x40020028
 8009fec:	40020040 	.word	0x40020040
 8009ff0:	40020058 	.word	0x40020058
 8009ff4:	40020070 	.word	0x40020070
 8009ff8:	40020088 	.word	0x40020088
 8009ffc:	400200a0 	.word	0x400200a0
 800a000:	400200b8 	.word	0x400200b8
 800a004:	40020410 	.word	0x40020410
 800a008:	40020428 	.word	0x40020428
 800a00c:	40020440 	.word	0x40020440
 800a010:	40020458 	.word	0x40020458
 800a014:	40020470 	.word	0x40020470
 800a018:	40020488 	.word	0x40020488
 800a01c:	400204a0 	.word	0x400204a0
 800a020:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a030:	b29b      	uxth	r3, r3
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a03e:	b29b      	uxth	r3, r3
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 80cf 	beq.w	800a1e4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a046:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	f000 80ca 	beq.w	800a1e4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a058:	e853 3f00 	ldrex	r3, [r3]
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a064:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	461a      	mov	r2, r3
 800a06e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a072:	647b      	str	r3, [r7, #68]	@ 0x44
 800a074:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a076:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a07a:	e841 2300 	strex	r3, r2, [r1]
 800a07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1e4      	bne.n	800a050 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3308      	adds	r3, #8
 800a08c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	623b      	str	r3, [r7, #32]
   return(result);
 800a096:	6a3a      	ldr	r2, [r7, #32]
 800a098:	4b55      	ldr	r3, [pc, #340]	@ (800a1f0 <HAL_UART_IRQHandler+0x770>)
 800a09a:	4013      	ands	r3, r2
 800a09c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3308      	adds	r3, #8
 800a0a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a0aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0b2:	e841 2300 	strex	r3, r2, [r1]
 800a0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e3      	bne.n	800a086 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	e853 3f00 	ldrex	r3, [r3]
 800a0de:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f023 0310 	bic.w	r3, r3, #16
 800a0e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a0f4:	61fb      	str	r3, [r7, #28]
 800a0f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0f8:	69b9      	ldr	r1, [r7, #24]
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	e841 2300 	strex	r3, r2, [r1]
 800a100:	617b      	str	r3, [r7, #20]
   return(result);
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d1e4      	bne.n	800a0d2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2202      	movs	r2, #2
 800a10c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a10e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f881 	bl	800a21c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a11a:	e063      	b.n	800a1e4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a11c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a120:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00e      	beq.n	800a146 <HAL_UART_IRQHandler+0x6c6>
 800a128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a12c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a130:	2b00      	cmp	r3, #0
 800a132:	d008      	beq.n	800a146 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a13c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f001 f945 	bl	800b3ce <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a144:	e051      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a14a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d014      	beq.n	800a17c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d105      	bne.n	800a16a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a15e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d008      	beq.n	800a17c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d03a      	beq.n	800a1e8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	4798      	blx	r3
    }
    return;
 800a17a:	e035      	b.n	800a1e8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a184:	2b00      	cmp	r3, #0
 800a186:	d009      	beq.n	800a19c <HAL_UART_IRQHandler+0x71c>
 800a188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a18c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a190:	2b00      	cmp	r3, #0
 800a192:	d003      	beq.n	800a19c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 f8ef 	bl	800b378 <UART_EndTransmit_IT>
    return;
 800a19a:	e026      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d009      	beq.n	800a1bc <HAL_UART_IRQHandler+0x73c>
 800a1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d003      	beq.n	800a1bc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f001 f91e 	bl	800b3f6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1ba:	e016      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d010      	beq.n	800a1ea <HAL_UART_IRQHandler+0x76a>
 800a1c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	da0c      	bge.n	800a1ea <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f001 f906 	bl	800b3e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1d6:	e008      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
      return;
 800a1d8:	bf00      	nop
 800a1da:	e006      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
    return;
 800a1dc:	bf00      	nop
 800a1de:	e004      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
      return;
 800a1e0:	bf00      	nop
 800a1e2:	e002      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
      return;
 800a1e4:	bf00      	nop
 800a1e6:	e000      	b.n	800a1ea <HAL_UART_IRQHandler+0x76a>
    return;
 800a1e8:	bf00      	nop
  }
}
 800a1ea:	37e8      	adds	r7, #232	@ 0xe8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	effffffe 	.word	0xeffffffe

0800a1f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a238:	b092      	sub	sp, #72	@ 0x48
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a23e:	2300      	movs	r3, #0
 800a240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	689a      	ldr	r2, [r3, #8]
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	431a      	orrs	r2, r3
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	431a      	orrs	r2, r3
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	69db      	ldr	r3, [r3, #28]
 800a258:	4313      	orrs	r3, r2
 800a25a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4bbe      	ldr	r3, [pc, #760]	@ (800a55c <UART_SetConfig+0x328>)
 800a264:	4013      	ands	r3, r2
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	6812      	ldr	r2, [r2, #0]
 800a26a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a26c:	430b      	orrs	r3, r1
 800a26e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	68da      	ldr	r2, [r3, #12]
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a286:	697b      	ldr	r3, [r7, #20]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4ab3      	ldr	r2, [pc, #716]	@ (800a560 <UART_SetConfig+0x32c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d004      	beq.n	800a2a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a29c:	4313      	orrs	r3, r2
 800a29e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689a      	ldr	r2, [r3, #8]
 800a2a6:	4baf      	ldr	r3, [pc, #700]	@ (800a564 <UART_SetConfig+0x330>)
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	6812      	ldr	r2, [r2, #0]
 800a2ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ba:	f023 010f 	bic.w	r1, r3, #15
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4aa6      	ldr	r2, [pc, #664]	@ (800a568 <UART_SetConfig+0x334>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d177      	bne.n	800a3c4 <UART_SetConfig+0x190>
 800a2d4:	4ba5      	ldr	r3, [pc, #660]	@ (800a56c <UART_SetConfig+0x338>)
 800a2d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a2dc:	2b28      	cmp	r3, #40	@ 0x28
 800a2de:	d86d      	bhi.n	800a3bc <UART_SetConfig+0x188>
 800a2e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e8 <UART_SetConfig+0xb4>)
 800a2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e6:	bf00      	nop
 800a2e8:	0800a38d 	.word	0x0800a38d
 800a2ec:	0800a3bd 	.word	0x0800a3bd
 800a2f0:	0800a3bd 	.word	0x0800a3bd
 800a2f4:	0800a3bd 	.word	0x0800a3bd
 800a2f8:	0800a3bd 	.word	0x0800a3bd
 800a2fc:	0800a3bd 	.word	0x0800a3bd
 800a300:	0800a3bd 	.word	0x0800a3bd
 800a304:	0800a3bd 	.word	0x0800a3bd
 800a308:	0800a395 	.word	0x0800a395
 800a30c:	0800a3bd 	.word	0x0800a3bd
 800a310:	0800a3bd 	.word	0x0800a3bd
 800a314:	0800a3bd 	.word	0x0800a3bd
 800a318:	0800a3bd 	.word	0x0800a3bd
 800a31c:	0800a3bd 	.word	0x0800a3bd
 800a320:	0800a3bd 	.word	0x0800a3bd
 800a324:	0800a3bd 	.word	0x0800a3bd
 800a328:	0800a39d 	.word	0x0800a39d
 800a32c:	0800a3bd 	.word	0x0800a3bd
 800a330:	0800a3bd 	.word	0x0800a3bd
 800a334:	0800a3bd 	.word	0x0800a3bd
 800a338:	0800a3bd 	.word	0x0800a3bd
 800a33c:	0800a3bd 	.word	0x0800a3bd
 800a340:	0800a3bd 	.word	0x0800a3bd
 800a344:	0800a3bd 	.word	0x0800a3bd
 800a348:	0800a3a5 	.word	0x0800a3a5
 800a34c:	0800a3bd 	.word	0x0800a3bd
 800a350:	0800a3bd 	.word	0x0800a3bd
 800a354:	0800a3bd 	.word	0x0800a3bd
 800a358:	0800a3bd 	.word	0x0800a3bd
 800a35c:	0800a3bd 	.word	0x0800a3bd
 800a360:	0800a3bd 	.word	0x0800a3bd
 800a364:	0800a3bd 	.word	0x0800a3bd
 800a368:	0800a3ad 	.word	0x0800a3ad
 800a36c:	0800a3bd 	.word	0x0800a3bd
 800a370:	0800a3bd 	.word	0x0800a3bd
 800a374:	0800a3bd 	.word	0x0800a3bd
 800a378:	0800a3bd 	.word	0x0800a3bd
 800a37c:	0800a3bd 	.word	0x0800a3bd
 800a380:	0800a3bd 	.word	0x0800a3bd
 800a384:	0800a3bd 	.word	0x0800a3bd
 800a388:	0800a3b5 	.word	0x0800a3b5
 800a38c:	2301      	movs	r3, #1
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a392:	e326      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a394:	2304      	movs	r3, #4
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39a:	e322      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a39c:	2308      	movs	r3, #8
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a2:	e31e      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a3a4:	2310      	movs	r3, #16
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3aa:	e31a      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a3ac:	2320      	movs	r3, #32
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b2:	e316      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a3b4:	2340      	movs	r3, #64	@ 0x40
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ba:	e312      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a3bc:	2380      	movs	r3, #128	@ 0x80
 800a3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c2:	e30e      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a69      	ldr	r2, [pc, #420]	@ (800a570 <UART_SetConfig+0x33c>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d130      	bne.n	800a430 <UART_SetConfig+0x1fc>
 800a3ce:	4b67      	ldr	r3, [pc, #412]	@ (800a56c <UART_SetConfig+0x338>)
 800a3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	2b05      	cmp	r3, #5
 800a3d8:	d826      	bhi.n	800a428 <UART_SetConfig+0x1f4>
 800a3da:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e0 <UART_SetConfig+0x1ac>)
 800a3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e0:	0800a3f9 	.word	0x0800a3f9
 800a3e4:	0800a401 	.word	0x0800a401
 800a3e8:	0800a409 	.word	0x0800a409
 800a3ec:	0800a411 	.word	0x0800a411
 800a3f0:	0800a419 	.word	0x0800a419
 800a3f4:	0800a421 	.word	0x0800a421
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fe:	e2f0      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a400:	2304      	movs	r3, #4
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a406:	e2ec      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a408:	2308      	movs	r3, #8
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e2e8      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a410:	2310      	movs	r3, #16
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e2e4      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a418:	2320      	movs	r3, #32
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e2e0      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a420:	2340      	movs	r3, #64	@ 0x40
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e2dc      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a428:	2380      	movs	r3, #128	@ 0x80
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42e:	e2d8      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a4f      	ldr	r2, [pc, #316]	@ (800a574 <UART_SetConfig+0x340>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d130      	bne.n	800a49c <UART_SetConfig+0x268>
 800a43a:	4b4c      	ldr	r3, [pc, #304]	@ (800a56c <UART_SetConfig+0x338>)
 800a43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a43e:	f003 0307 	and.w	r3, r3, #7
 800a442:	2b05      	cmp	r3, #5
 800a444:	d826      	bhi.n	800a494 <UART_SetConfig+0x260>
 800a446:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <UART_SetConfig+0x218>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a465 	.word	0x0800a465
 800a450:	0800a46d 	.word	0x0800a46d
 800a454:	0800a475 	.word	0x0800a475
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a485 	.word	0x0800a485
 800a460:	0800a48d 	.word	0x0800a48d
 800a464:	2300      	movs	r3, #0
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46a:	e2ba      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a46c:	2304      	movs	r3, #4
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a472:	e2b6      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a474:	2308      	movs	r3, #8
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47a:	e2b2      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a47c:	2310      	movs	r3, #16
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a482:	e2ae      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a484:	2320      	movs	r3, #32
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48a:	e2aa      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a48c:	2340      	movs	r3, #64	@ 0x40
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a492:	e2a6      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a494:	2380      	movs	r3, #128	@ 0x80
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49a:	e2a2      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a35      	ldr	r2, [pc, #212]	@ (800a578 <UART_SetConfig+0x344>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d130      	bne.n	800a508 <UART_SetConfig+0x2d4>
 800a4a6:	4b31      	ldr	r3, [pc, #196]	@ (800a56c <UART_SetConfig+0x338>)
 800a4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4aa:	f003 0307 	and.w	r3, r3, #7
 800a4ae:	2b05      	cmp	r3, #5
 800a4b0:	d826      	bhi.n	800a500 <UART_SetConfig+0x2cc>
 800a4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b8 <UART_SetConfig+0x284>)
 800a4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b8:	0800a4d1 	.word	0x0800a4d1
 800a4bc:	0800a4d9 	.word	0x0800a4d9
 800a4c0:	0800a4e1 	.word	0x0800a4e1
 800a4c4:	0800a4e9 	.word	0x0800a4e9
 800a4c8:	0800a4f1 	.word	0x0800a4f1
 800a4cc:	0800a4f9 	.word	0x0800a4f9
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d6:	e284      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4de:	e280      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e6:	e27c      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a4e8:	2310      	movs	r3, #16
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ee:	e278      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a4f0:	2320      	movs	r3, #32
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e274      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a4f8:	2340      	movs	r3, #64	@ 0x40
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e270      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a500:	2380      	movs	r3, #128	@ 0x80
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e26c      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a1b      	ldr	r2, [pc, #108]	@ (800a57c <UART_SetConfig+0x348>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d142      	bne.n	800a598 <UART_SetConfig+0x364>
 800a512:	4b16      	ldr	r3, [pc, #88]	@ (800a56c <UART_SetConfig+0x338>)
 800a514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a516:	f003 0307 	and.w	r3, r3, #7
 800a51a:	2b05      	cmp	r3, #5
 800a51c:	d838      	bhi.n	800a590 <UART_SetConfig+0x35c>
 800a51e:	a201      	add	r2, pc, #4	@ (adr r2, 800a524 <UART_SetConfig+0x2f0>)
 800a520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a524:	0800a53d 	.word	0x0800a53d
 800a528:	0800a545 	.word	0x0800a545
 800a52c:	0800a54d 	.word	0x0800a54d
 800a530:	0800a555 	.word	0x0800a555
 800a534:	0800a581 	.word	0x0800a581
 800a538:	0800a589 	.word	0x0800a589
 800a53c:	2300      	movs	r3, #0
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a542:	e24e      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a544:	2304      	movs	r3, #4
 800a546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54a:	e24a      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a54c:	2308      	movs	r3, #8
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a552:	e246      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a554:	2310      	movs	r3, #16
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55a:	e242      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a55c:	cfff69f3 	.word	0xcfff69f3
 800a560:	58000c00 	.word	0x58000c00
 800a564:	11fff4ff 	.word	0x11fff4ff
 800a568:	40011000 	.word	0x40011000
 800a56c:	58024400 	.word	0x58024400
 800a570:	40004400 	.word	0x40004400
 800a574:	40004800 	.word	0x40004800
 800a578:	40004c00 	.word	0x40004c00
 800a57c:	40005000 	.word	0x40005000
 800a580:	2320      	movs	r3, #32
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a586:	e22c      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a588:	2340      	movs	r3, #64	@ 0x40
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e228      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a590:	2380      	movs	r3, #128	@ 0x80
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e224      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4ab1      	ldr	r2, [pc, #708]	@ (800a864 <UART_SetConfig+0x630>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d176      	bne.n	800a690 <UART_SetConfig+0x45c>
 800a5a2:	4bb1      	ldr	r3, [pc, #708]	@ (800a868 <UART_SetConfig+0x634>)
 800a5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5aa:	2b28      	cmp	r3, #40	@ 0x28
 800a5ac:	d86c      	bhi.n	800a688 <UART_SetConfig+0x454>
 800a5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b4 <UART_SetConfig+0x380>)
 800a5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b4:	0800a659 	.word	0x0800a659
 800a5b8:	0800a689 	.word	0x0800a689
 800a5bc:	0800a689 	.word	0x0800a689
 800a5c0:	0800a689 	.word	0x0800a689
 800a5c4:	0800a689 	.word	0x0800a689
 800a5c8:	0800a689 	.word	0x0800a689
 800a5cc:	0800a689 	.word	0x0800a689
 800a5d0:	0800a689 	.word	0x0800a689
 800a5d4:	0800a661 	.word	0x0800a661
 800a5d8:	0800a689 	.word	0x0800a689
 800a5dc:	0800a689 	.word	0x0800a689
 800a5e0:	0800a689 	.word	0x0800a689
 800a5e4:	0800a689 	.word	0x0800a689
 800a5e8:	0800a689 	.word	0x0800a689
 800a5ec:	0800a689 	.word	0x0800a689
 800a5f0:	0800a689 	.word	0x0800a689
 800a5f4:	0800a669 	.word	0x0800a669
 800a5f8:	0800a689 	.word	0x0800a689
 800a5fc:	0800a689 	.word	0x0800a689
 800a600:	0800a689 	.word	0x0800a689
 800a604:	0800a689 	.word	0x0800a689
 800a608:	0800a689 	.word	0x0800a689
 800a60c:	0800a689 	.word	0x0800a689
 800a610:	0800a689 	.word	0x0800a689
 800a614:	0800a671 	.word	0x0800a671
 800a618:	0800a689 	.word	0x0800a689
 800a61c:	0800a689 	.word	0x0800a689
 800a620:	0800a689 	.word	0x0800a689
 800a624:	0800a689 	.word	0x0800a689
 800a628:	0800a689 	.word	0x0800a689
 800a62c:	0800a689 	.word	0x0800a689
 800a630:	0800a689 	.word	0x0800a689
 800a634:	0800a679 	.word	0x0800a679
 800a638:	0800a689 	.word	0x0800a689
 800a63c:	0800a689 	.word	0x0800a689
 800a640:	0800a689 	.word	0x0800a689
 800a644:	0800a689 	.word	0x0800a689
 800a648:	0800a689 	.word	0x0800a689
 800a64c:	0800a689 	.word	0x0800a689
 800a650:	0800a689 	.word	0x0800a689
 800a654:	0800a681 	.word	0x0800a681
 800a658:	2301      	movs	r3, #1
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65e:	e1c0      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a660:	2304      	movs	r3, #4
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a666:	e1bc      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a668:	2308      	movs	r3, #8
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66e:	e1b8      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a670:	2310      	movs	r3, #16
 800a672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a676:	e1b4      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a678:	2320      	movs	r3, #32
 800a67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a67e:	e1b0      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a680:	2340      	movs	r3, #64	@ 0x40
 800a682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a686:	e1ac      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a688:	2380      	movs	r3, #128	@ 0x80
 800a68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68e:	e1a8      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a75      	ldr	r2, [pc, #468]	@ (800a86c <UART_SetConfig+0x638>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d130      	bne.n	800a6fc <UART_SetConfig+0x4c8>
 800a69a:	4b73      	ldr	r3, [pc, #460]	@ (800a868 <UART_SetConfig+0x634>)
 800a69c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	2b05      	cmp	r3, #5
 800a6a4:	d826      	bhi.n	800a6f4 <UART_SetConfig+0x4c0>
 800a6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800a6ac <UART_SetConfig+0x478>)
 800a6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ac:	0800a6c5 	.word	0x0800a6c5
 800a6b0:	0800a6cd 	.word	0x0800a6cd
 800a6b4:	0800a6d5 	.word	0x0800a6d5
 800a6b8:	0800a6dd 	.word	0x0800a6dd
 800a6bc:	0800a6e5 	.word	0x0800a6e5
 800a6c0:	0800a6ed 	.word	0x0800a6ed
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ca:	e18a      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a6cc:	2304      	movs	r3, #4
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d2:	e186      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6da:	e182      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a6dc:	2310      	movs	r3, #16
 800a6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e2:	e17e      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a6e4:	2320      	movs	r3, #32
 800a6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ea:	e17a      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a6ec:	2340      	movs	r3, #64	@ 0x40
 800a6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6f2:	e176      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a6f4:	2380      	movs	r3, #128	@ 0x80
 800a6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fa:	e172      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a5b      	ldr	r2, [pc, #364]	@ (800a870 <UART_SetConfig+0x63c>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d130      	bne.n	800a768 <UART_SetConfig+0x534>
 800a706:	4b58      	ldr	r3, [pc, #352]	@ (800a868 <UART_SetConfig+0x634>)
 800a708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a70a:	f003 0307 	and.w	r3, r3, #7
 800a70e:	2b05      	cmp	r3, #5
 800a710:	d826      	bhi.n	800a760 <UART_SetConfig+0x52c>
 800a712:	a201      	add	r2, pc, #4	@ (adr r2, 800a718 <UART_SetConfig+0x4e4>)
 800a714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a718:	0800a731 	.word	0x0800a731
 800a71c:	0800a739 	.word	0x0800a739
 800a720:	0800a741 	.word	0x0800a741
 800a724:	0800a749 	.word	0x0800a749
 800a728:	0800a751 	.word	0x0800a751
 800a72c:	0800a759 	.word	0x0800a759
 800a730:	2300      	movs	r3, #0
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a736:	e154      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a738:	2304      	movs	r3, #4
 800a73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a73e:	e150      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a740:	2308      	movs	r3, #8
 800a742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a746:	e14c      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a748:	2310      	movs	r3, #16
 800a74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74e:	e148      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a750:	2320      	movs	r3, #32
 800a752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a756:	e144      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a758:	2340      	movs	r3, #64	@ 0x40
 800a75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a75e:	e140      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a760:	2380      	movs	r3, #128	@ 0x80
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a766:	e13c      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a41      	ldr	r2, [pc, #260]	@ (800a874 <UART_SetConfig+0x640>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	f040 8082 	bne.w	800a878 <UART_SetConfig+0x644>
 800a774:	4b3c      	ldr	r3, [pc, #240]	@ (800a868 <UART_SetConfig+0x634>)
 800a776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a77c:	2b28      	cmp	r3, #40	@ 0x28
 800a77e:	d86d      	bhi.n	800a85c <UART_SetConfig+0x628>
 800a780:	a201      	add	r2, pc, #4	@ (adr r2, 800a788 <UART_SetConfig+0x554>)
 800a782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a786:	bf00      	nop
 800a788:	0800a82d 	.word	0x0800a82d
 800a78c:	0800a85d 	.word	0x0800a85d
 800a790:	0800a85d 	.word	0x0800a85d
 800a794:	0800a85d 	.word	0x0800a85d
 800a798:	0800a85d 	.word	0x0800a85d
 800a79c:	0800a85d 	.word	0x0800a85d
 800a7a0:	0800a85d 	.word	0x0800a85d
 800a7a4:	0800a85d 	.word	0x0800a85d
 800a7a8:	0800a835 	.word	0x0800a835
 800a7ac:	0800a85d 	.word	0x0800a85d
 800a7b0:	0800a85d 	.word	0x0800a85d
 800a7b4:	0800a85d 	.word	0x0800a85d
 800a7b8:	0800a85d 	.word	0x0800a85d
 800a7bc:	0800a85d 	.word	0x0800a85d
 800a7c0:	0800a85d 	.word	0x0800a85d
 800a7c4:	0800a85d 	.word	0x0800a85d
 800a7c8:	0800a83d 	.word	0x0800a83d
 800a7cc:	0800a85d 	.word	0x0800a85d
 800a7d0:	0800a85d 	.word	0x0800a85d
 800a7d4:	0800a85d 	.word	0x0800a85d
 800a7d8:	0800a85d 	.word	0x0800a85d
 800a7dc:	0800a85d 	.word	0x0800a85d
 800a7e0:	0800a85d 	.word	0x0800a85d
 800a7e4:	0800a85d 	.word	0x0800a85d
 800a7e8:	0800a845 	.word	0x0800a845
 800a7ec:	0800a85d 	.word	0x0800a85d
 800a7f0:	0800a85d 	.word	0x0800a85d
 800a7f4:	0800a85d 	.word	0x0800a85d
 800a7f8:	0800a85d 	.word	0x0800a85d
 800a7fc:	0800a85d 	.word	0x0800a85d
 800a800:	0800a85d 	.word	0x0800a85d
 800a804:	0800a85d 	.word	0x0800a85d
 800a808:	0800a84d 	.word	0x0800a84d
 800a80c:	0800a85d 	.word	0x0800a85d
 800a810:	0800a85d 	.word	0x0800a85d
 800a814:	0800a85d 	.word	0x0800a85d
 800a818:	0800a85d 	.word	0x0800a85d
 800a81c:	0800a85d 	.word	0x0800a85d
 800a820:	0800a85d 	.word	0x0800a85d
 800a824:	0800a85d 	.word	0x0800a85d
 800a828:	0800a855 	.word	0x0800a855
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a832:	e0d6      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a834:	2304      	movs	r3, #4
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83a:	e0d2      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a83c:	2308      	movs	r3, #8
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a842:	e0ce      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a844:	2310      	movs	r3, #16
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84a:	e0ca      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a84c:	2320      	movs	r3, #32
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a852:	e0c6      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a854:	2340      	movs	r3, #64	@ 0x40
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85a:	e0c2      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a85c:	2380      	movs	r3, #128	@ 0x80
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a862:	e0be      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a864:	40011400 	.word	0x40011400
 800a868:	58024400 	.word	0x58024400
 800a86c:	40007800 	.word	0x40007800
 800a870:	40007c00 	.word	0x40007c00
 800a874:	40011800 	.word	0x40011800
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4aad      	ldr	r2, [pc, #692]	@ (800ab34 <UART_SetConfig+0x900>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d176      	bne.n	800a970 <UART_SetConfig+0x73c>
 800a882:	4bad      	ldr	r3, [pc, #692]	@ (800ab38 <UART_SetConfig+0x904>)
 800a884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a88a:	2b28      	cmp	r3, #40	@ 0x28
 800a88c:	d86c      	bhi.n	800a968 <UART_SetConfig+0x734>
 800a88e:	a201      	add	r2, pc, #4	@ (adr r2, 800a894 <UART_SetConfig+0x660>)
 800a890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a894:	0800a939 	.word	0x0800a939
 800a898:	0800a969 	.word	0x0800a969
 800a89c:	0800a969 	.word	0x0800a969
 800a8a0:	0800a969 	.word	0x0800a969
 800a8a4:	0800a969 	.word	0x0800a969
 800a8a8:	0800a969 	.word	0x0800a969
 800a8ac:	0800a969 	.word	0x0800a969
 800a8b0:	0800a969 	.word	0x0800a969
 800a8b4:	0800a941 	.word	0x0800a941
 800a8b8:	0800a969 	.word	0x0800a969
 800a8bc:	0800a969 	.word	0x0800a969
 800a8c0:	0800a969 	.word	0x0800a969
 800a8c4:	0800a969 	.word	0x0800a969
 800a8c8:	0800a969 	.word	0x0800a969
 800a8cc:	0800a969 	.word	0x0800a969
 800a8d0:	0800a969 	.word	0x0800a969
 800a8d4:	0800a949 	.word	0x0800a949
 800a8d8:	0800a969 	.word	0x0800a969
 800a8dc:	0800a969 	.word	0x0800a969
 800a8e0:	0800a969 	.word	0x0800a969
 800a8e4:	0800a969 	.word	0x0800a969
 800a8e8:	0800a969 	.word	0x0800a969
 800a8ec:	0800a969 	.word	0x0800a969
 800a8f0:	0800a969 	.word	0x0800a969
 800a8f4:	0800a951 	.word	0x0800a951
 800a8f8:	0800a969 	.word	0x0800a969
 800a8fc:	0800a969 	.word	0x0800a969
 800a900:	0800a969 	.word	0x0800a969
 800a904:	0800a969 	.word	0x0800a969
 800a908:	0800a969 	.word	0x0800a969
 800a90c:	0800a969 	.word	0x0800a969
 800a910:	0800a969 	.word	0x0800a969
 800a914:	0800a959 	.word	0x0800a959
 800a918:	0800a969 	.word	0x0800a969
 800a91c:	0800a969 	.word	0x0800a969
 800a920:	0800a969 	.word	0x0800a969
 800a924:	0800a969 	.word	0x0800a969
 800a928:	0800a969 	.word	0x0800a969
 800a92c:	0800a969 	.word	0x0800a969
 800a930:	0800a969 	.word	0x0800a969
 800a934:	0800a961 	.word	0x0800a961
 800a938:	2301      	movs	r3, #1
 800a93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93e:	e050      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a940:	2304      	movs	r3, #4
 800a942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a946:	e04c      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a948:	2308      	movs	r3, #8
 800a94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a94e:	e048      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a950:	2310      	movs	r3, #16
 800a952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a956:	e044      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a958:	2320      	movs	r3, #32
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95e:	e040      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a960:	2340      	movs	r3, #64	@ 0x40
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a966:	e03c      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a968:	2380      	movs	r3, #128	@ 0x80
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96e:	e038      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a71      	ldr	r2, [pc, #452]	@ (800ab3c <UART_SetConfig+0x908>)
 800a976:	4293      	cmp	r3, r2
 800a978:	d130      	bne.n	800a9dc <UART_SetConfig+0x7a8>
 800a97a:	4b6f      	ldr	r3, [pc, #444]	@ (800ab38 <UART_SetConfig+0x904>)
 800a97c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a97e:	f003 0307 	and.w	r3, r3, #7
 800a982:	2b05      	cmp	r3, #5
 800a984:	d826      	bhi.n	800a9d4 <UART_SetConfig+0x7a0>
 800a986:	a201      	add	r2, pc, #4	@ (adr r2, 800a98c <UART_SetConfig+0x758>)
 800a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98c:	0800a9a5 	.word	0x0800a9a5
 800a990:	0800a9ad 	.word	0x0800a9ad
 800a994:	0800a9b5 	.word	0x0800a9b5
 800a998:	0800a9bd 	.word	0x0800a9bd
 800a99c:	0800a9c5 	.word	0x0800a9c5
 800a9a0:	0800a9cd 	.word	0x0800a9cd
 800a9a4:	2302      	movs	r3, #2
 800a9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9aa:	e01a      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a9ac:	2304      	movs	r3, #4
 800a9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9b2:	e016      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a9b4:	2308      	movs	r3, #8
 800a9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ba:	e012      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a9bc:	2310      	movs	r3, #16
 800a9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9c2:	e00e      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a9c4:	2320      	movs	r3, #32
 800a9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ca:	e00a      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a9cc:	2340      	movs	r3, #64	@ 0x40
 800a9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9d2:	e006      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a9d4:	2380      	movs	r3, #128	@ 0x80
 800a9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9da:	e002      	b.n	800a9e2 <UART_SetConfig+0x7ae>
 800a9dc:	2380      	movs	r3, #128	@ 0x80
 800a9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a55      	ldr	r2, [pc, #340]	@ (800ab3c <UART_SetConfig+0x908>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	f040 80f8 	bne.w	800abde <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9f2:	2b20      	cmp	r3, #32
 800a9f4:	dc46      	bgt.n	800aa84 <UART_SetConfig+0x850>
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	db75      	blt.n	800aae6 <UART_SetConfig+0x8b2>
 800a9fa:	3b02      	subs	r3, #2
 800a9fc:	2b1e      	cmp	r3, #30
 800a9fe:	d872      	bhi.n	800aae6 <UART_SetConfig+0x8b2>
 800aa00:	a201      	add	r2, pc, #4	@ (adr r2, 800aa08 <UART_SetConfig+0x7d4>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa8b 	.word	0x0800aa8b
 800aa0c:	0800aae7 	.word	0x0800aae7
 800aa10:	0800aa93 	.word	0x0800aa93
 800aa14:	0800aae7 	.word	0x0800aae7
 800aa18:	0800aae7 	.word	0x0800aae7
 800aa1c:	0800aae7 	.word	0x0800aae7
 800aa20:	0800aaa3 	.word	0x0800aaa3
 800aa24:	0800aae7 	.word	0x0800aae7
 800aa28:	0800aae7 	.word	0x0800aae7
 800aa2c:	0800aae7 	.word	0x0800aae7
 800aa30:	0800aae7 	.word	0x0800aae7
 800aa34:	0800aae7 	.word	0x0800aae7
 800aa38:	0800aae7 	.word	0x0800aae7
 800aa3c:	0800aae7 	.word	0x0800aae7
 800aa40:	0800aab3 	.word	0x0800aab3
 800aa44:	0800aae7 	.word	0x0800aae7
 800aa48:	0800aae7 	.word	0x0800aae7
 800aa4c:	0800aae7 	.word	0x0800aae7
 800aa50:	0800aae7 	.word	0x0800aae7
 800aa54:	0800aae7 	.word	0x0800aae7
 800aa58:	0800aae7 	.word	0x0800aae7
 800aa5c:	0800aae7 	.word	0x0800aae7
 800aa60:	0800aae7 	.word	0x0800aae7
 800aa64:	0800aae7 	.word	0x0800aae7
 800aa68:	0800aae7 	.word	0x0800aae7
 800aa6c:	0800aae7 	.word	0x0800aae7
 800aa70:	0800aae7 	.word	0x0800aae7
 800aa74:	0800aae7 	.word	0x0800aae7
 800aa78:	0800aae7 	.word	0x0800aae7
 800aa7c:	0800aae7 	.word	0x0800aae7
 800aa80:	0800aad9 	.word	0x0800aad9
 800aa84:	2b40      	cmp	r3, #64	@ 0x40
 800aa86:	d02a      	beq.n	800aade <UART_SetConfig+0x8aa>
 800aa88:	e02d      	b.n	800aae6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa8a:	f7fe f9df 	bl	8008e4c <HAL_RCCEx_GetD3PCLK1Freq>
 800aa8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa90:	e02f      	b.n	800aaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe f9ee 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa0:	e027      	b.n	800aaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaa2:	f107 0318 	add.w	r3, r7, #24
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fb3a 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab0:	e01f      	b.n	800aaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aab2:	4b21      	ldr	r3, [pc, #132]	@ (800ab38 <UART_SetConfig+0x904>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d009      	beq.n	800aad2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aabe:	4b1e      	ldr	r3, [pc, #120]	@ (800ab38 <UART_SetConfig+0x904>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	08db      	lsrs	r3, r3, #3
 800aac4:	f003 0303 	and.w	r3, r3, #3
 800aac8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab40 <UART_SetConfig+0x90c>)
 800aaca:	fa22 f303 	lsr.w	r3, r2, r3
 800aace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aad0:	e00f      	b.n	800aaf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aad2:	4b1b      	ldr	r3, [pc, #108]	@ (800ab40 <UART_SetConfig+0x90c>)
 800aad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad6:	e00c      	b.n	800aaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aad8:	4b1a      	ldr	r3, [pc, #104]	@ (800ab44 <UART_SetConfig+0x910>)
 800aada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aadc:	e009      	b.n	800aaf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aae4:	e005      	b.n	800aaf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aaf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aaf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	f000 81ee 	beq.w	800aed6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafe:	4a12      	ldr	r2, [pc, #72]	@ (800ab48 <UART_SetConfig+0x914>)
 800ab00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab04:	461a      	mov	r2, r3
 800ab06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab0c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	4613      	mov	r3, r2
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	4413      	add	r3, r2
 800ab18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d305      	bcc.n	800ab2a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	685b      	ldr	r3, [r3, #4]
 800ab22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d910      	bls.n	800ab4c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab30:	e1d1      	b.n	800aed6 <UART_SetConfig+0xca2>
 800ab32:	bf00      	nop
 800ab34:	40011c00 	.word	0x40011c00
 800ab38:	58024400 	.word	0x58024400
 800ab3c:	58000c00 	.word	0x58000c00
 800ab40:	03d09000 	.word	0x03d09000
 800ab44:	003d0900 	.word	0x003d0900
 800ab48:	0800b698 	.word	0x0800b698
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab4e:	2200      	movs	r2, #0
 800ab50:	60bb      	str	r3, [r7, #8]
 800ab52:	60fa      	str	r2, [r7, #12]
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab58:	4ac0      	ldr	r2, [pc, #768]	@ (800ae5c <UART_SetConfig+0xc28>)
 800ab5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	2200      	movs	r2, #0
 800ab62:	603b      	str	r3, [r7, #0]
 800ab64:	607a      	str	r2, [r7, #4]
 800ab66:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab6e:	f7f5 fbbd 	bl	80002ec <__aeabi_uldivmod>
 800ab72:	4602      	mov	r2, r0
 800ab74:	460b      	mov	r3, r1
 800ab76:	4610      	mov	r0, r2
 800ab78:	4619      	mov	r1, r3
 800ab7a:	f04f 0200 	mov.w	r2, #0
 800ab7e:	f04f 0300 	mov.w	r3, #0
 800ab82:	020b      	lsls	r3, r1, #8
 800ab84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab88:	0202      	lsls	r2, r0, #8
 800ab8a:	6979      	ldr	r1, [r7, #20]
 800ab8c:	6849      	ldr	r1, [r1, #4]
 800ab8e:	0849      	lsrs	r1, r1, #1
 800ab90:	2000      	movs	r0, #0
 800ab92:	460c      	mov	r4, r1
 800ab94:	4605      	mov	r5, r0
 800ab96:	eb12 0804 	adds.w	r8, r2, r4
 800ab9a:	eb43 0905 	adc.w	r9, r3, r5
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	469a      	mov	sl, r3
 800aba6:	4693      	mov	fp, r2
 800aba8:	4652      	mov	r2, sl
 800abaa:	465b      	mov	r3, fp
 800abac:	4640      	mov	r0, r8
 800abae:	4649      	mov	r1, r9
 800abb0:	f7f5 fb9c 	bl	80002ec <__aeabi_uldivmod>
 800abb4:	4602      	mov	r2, r0
 800abb6:	460b      	mov	r3, r1
 800abb8:	4613      	mov	r3, r2
 800abba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abc2:	d308      	bcc.n	800abd6 <UART_SetConfig+0x9a2>
 800abc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abca:	d204      	bcs.n	800abd6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800abd2:	60da      	str	r2, [r3, #12]
 800abd4:	e17f      	b.n	800aed6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800abdc:	e17b      	b.n	800aed6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	69db      	ldr	r3, [r3, #28]
 800abe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abe6:	f040 80bd 	bne.w	800ad64 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800abea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abee:	2b20      	cmp	r3, #32
 800abf0:	dc48      	bgt.n	800ac84 <UART_SetConfig+0xa50>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	db7b      	blt.n	800acee <UART_SetConfig+0xaba>
 800abf6:	2b20      	cmp	r3, #32
 800abf8:	d879      	bhi.n	800acee <UART_SetConfig+0xaba>
 800abfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ac00 <UART_SetConfig+0x9cc>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac8b 	.word	0x0800ac8b
 800ac04:	0800ac93 	.word	0x0800ac93
 800ac08:	0800acef 	.word	0x0800acef
 800ac0c:	0800acef 	.word	0x0800acef
 800ac10:	0800ac9b 	.word	0x0800ac9b
 800ac14:	0800acef 	.word	0x0800acef
 800ac18:	0800acef 	.word	0x0800acef
 800ac1c:	0800acef 	.word	0x0800acef
 800ac20:	0800acab 	.word	0x0800acab
 800ac24:	0800acef 	.word	0x0800acef
 800ac28:	0800acef 	.word	0x0800acef
 800ac2c:	0800acef 	.word	0x0800acef
 800ac30:	0800acef 	.word	0x0800acef
 800ac34:	0800acef 	.word	0x0800acef
 800ac38:	0800acef 	.word	0x0800acef
 800ac3c:	0800acef 	.word	0x0800acef
 800ac40:	0800acbb 	.word	0x0800acbb
 800ac44:	0800acef 	.word	0x0800acef
 800ac48:	0800acef 	.word	0x0800acef
 800ac4c:	0800acef 	.word	0x0800acef
 800ac50:	0800acef 	.word	0x0800acef
 800ac54:	0800acef 	.word	0x0800acef
 800ac58:	0800acef 	.word	0x0800acef
 800ac5c:	0800acef 	.word	0x0800acef
 800ac60:	0800acef 	.word	0x0800acef
 800ac64:	0800acef 	.word	0x0800acef
 800ac68:	0800acef 	.word	0x0800acef
 800ac6c:	0800acef 	.word	0x0800acef
 800ac70:	0800acef 	.word	0x0800acef
 800ac74:	0800acef 	.word	0x0800acef
 800ac78:	0800acef 	.word	0x0800acef
 800ac7c:	0800acef 	.word	0x0800acef
 800ac80:	0800ace1 	.word	0x0800ace1
 800ac84:	2b40      	cmp	r3, #64	@ 0x40
 800ac86:	d02e      	beq.n	800ace6 <UART_SetConfig+0xab2>
 800ac88:	e031      	b.n	800acee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac8a:	f7fc fa1d 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 800ac8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac90:	e033      	b.n	800acfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac92:	f7fc fa2f 	bl	80070f4 <HAL_RCC_GetPCLK2Freq>
 800ac96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac98:	e02f      	b.n	800acfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe f8ea 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca8:	e027      	b.n	800acfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acaa:	f107 0318 	add.w	r3, r7, #24
 800acae:	4618      	mov	r0, r3
 800acb0:	f7fe fa36 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb8:	e01f      	b.n	800acfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acba:	4b69      	ldr	r3, [pc, #420]	@ (800ae60 <UART_SetConfig+0xc2c>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f003 0320 	and.w	r3, r3, #32
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d009      	beq.n	800acda <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800acc6:	4b66      	ldr	r3, [pc, #408]	@ (800ae60 <UART_SetConfig+0xc2c>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	08db      	lsrs	r3, r3, #3
 800accc:	f003 0303 	and.w	r3, r3, #3
 800acd0:	4a64      	ldr	r2, [pc, #400]	@ (800ae64 <UART_SetConfig+0xc30>)
 800acd2:	fa22 f303 	lsr.w	r3, r2, r3
 800acd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acd8:	e00f      	b.n	800acfa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800acda:	4b62      	ldr	r3, [pc, #392]	@ (800ae64 <UART_SetConfig+0xc30>)
 800acdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acde:	e00c      	b.n	800acfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ace0:	4b61      	ldr	r3, [pc, #388]	@ (800ae68 <UART_SetConfig+0xc34>)
 800ace2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ace4:	e009      	b.n	800acfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ace6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acec:	e005      	b.n	800acfa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800acf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	f000 80ea 	beq.w	800aed6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad06:	4a55      	ldr	r2, [pc, #340]	@ (800ae5c <UART_SetConfig+0xc28>)
 800ad08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad14:	005a      	lsls	r2, r3, #1
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	085b      	lsrs	r3, r3, #1
 800ad1c:	441a      	add	r2, r3
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	685b      	ldr	r3, [r3, #4]
 800ad22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad26:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2a:	2b0f      	cmp	r3, #15
 800ad2c:	d916      	bls.n	800ad5c <UART_SetConfig+0xb28>
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad34:	d212      	bcs.n	800ad5c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f023 030f 	bic.w	r3, r3, #15
 800ad3e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad42:	085b      	lsrs	r3, r3, #1
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	f003 0307 	and.w	r3, r3, #7
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ad58:	60da      	str	r2, [r3, #12]
 800ad5a:	e0bc      	b.n	800aed6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad62:	e0b8      	b.n	800aed6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad64:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad68:	2b20      	cmp	r3, #32
 800ad6a:	dc4b      	bgt.n	800ae04 <UART_SetConfig+0xbd0>
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f2c0 8087 	blt.w	800ae80 <UART_SetConfig+0xc4c>
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	f200 8084 	bhi.w	800ae80 <UART_SetConfig+0xc4c>
 800ad78:	a201      	add	r2, pc, #4	@ (adr r2, 800ad80 <UART_SetConfig+0xb4c>)
 800ad7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7e:	bf00      	nop
 800ad80:	0800ae0b 	.word	0x0800ae0b
 800ad84:	0800ae13 	.word	0x0800ae13
 800ad88:	0800ae81 	.word	0x0800ae81
 800ad8c:	0800ae81 	.word	0x0800ae81
 800ad90:	0800ae1b 	.word	0x0800ae1b
 800ad94:	0800ae81 	.word	0x0800ae81
 800ad98:	0800ae81 	.word	0x0800ae81
 800ad9c:	0800ae81 	.word	0x0800ae81
 800ada0:	0800ae2b 	.word	0x0800ae2b
 800ada4:	0800ae81 	.word	0x0800ae81
 800ada8:	0800ae81 	.word	0x0800ae81
 800adac:	0800ae81 	.word	0x0800ae81
 800adb0:	0800ae81 	.word	0x0800ae81
 800adb4:	0800ae81 	.word	0x0800ae81
 800adb8:	0800ae81 	.word	0x0800ae81
 800adbc:	0800ae81 	.word	0x0800ae81
 800adc0:	0800ae3b 	.word	0x0800ae3b
 800adc4:	0800ae81 	.word	0x0800ae81
 800adc8:	0800ae81 	.word	0x0800ae81
 800adcc:	0800ae81 	.word	0x0800ae81
 800add0:	0800ae81 	.word	0x0800ae81
 800add4:	0800ae81 	.word	0x0800ae81
 800add8:	0800ae81 	.word	0x0800ae81
 800addc:	0800ae81 	.word	0x0800ae81
 800ade0:	0800ae81 	.word	0x0800ae81
 800ade4:	0800ae81 	.word	0x0800ae81
 800ade8:	0800ae81 	.word	0x0800ae81
 800adec:	0800ae81 	.word	0x0800ae81
 800adf0:	0800ae81 	.word	0x0800ae81
 800adf4:	0800ae81 	.word	0x0800ae81
 800adf8:	0800ae81 	.word	0x0800ae81
 800adfc:	0800ae81 	.word	0x0800ae81
 800ae00:	0800ae73 	.word	0x0800ae73
 800ae04:	2b40      	cmp	r3, #64	@ 0x40
 800ae06:	d037      	beq.n	800ae78 <UART_SetConfig+0xc44>
 800ae08:	e03a      	b.n	800ae80 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae0a:	f7fc f95d 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 800ae0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae10:	e03c      	b.n	800ae8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae12:	f7fc f96f 	bl	80070f4 <HAL_RCC_GetPCLK2Freq>
 800ae16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae18:	e038      	b.n	800ae8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe f82a 	bl	8008e78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae28:	e030      	b.n	800ae8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae2a:	f107 0318 	add.w	r3, r7, #24
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe f976 	bl	8009120 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae38:	e028      	b.n	800ae8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae3a:	4b09      	ldr	r3, [pc, #36]	@ (800ae60 <UART_SetConfig+0xc2c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d012      	beq.n	800ae6c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae46:	4b06      	ldr	r3, [pc, #24]	@ (800ae60 <UART_SetConfig+0xc2c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	08db      	lsrs	r3, r3, #3
 800ae4c:	f003 0303 	and.w	r3, r3, #3
 800ae50:	4a04      	ldr	r2, [pc, #16]	@ (800ae64 <UART_SetConfig+0xc30>)
 800ae52:	fa22 f303 	lsr.w	r3, r2, r3
 800ae56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae58:	e018      	b.n	800ae8c <UART_SetConfig+0xc58>
 800ae5a:	bf00      	nop
 800ae5c:	0800b698 	.word	0x0800b698
 800ae60:	58024400 	.word	0x58024400
 800ae64:	03d09000 	.word	0x03d09000
 800ae68:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ae6c:	4b24      	ldr	r3, [pc, #144]	@ (800af00 <UART_SetConfig+0xccc>)
 800ae6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae70:	e00c      	b.n	800ae8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae72:	4b24      	ldr	r3, [pc, #144]	@ (800af04 <UART_SetConfig+0xcd0>)
 800ae74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae76:	e009      	b.n	800ae8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae7e:	e005      	b.n	800ae8c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ae80:	2300      	movs	r3, #0
 800ae82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae8a:	bf00      	nop
    }

    if (pclk != 0U)
 800ae8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d021      	beq.n	800aed6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae96:	4a1c      	ldr	r2, [pc, #112]	@ (800af08 <UART_SetConfig+0xcd4>)
 800ae98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aea0:	fbb3 f2f2 	udiv	r2, r3, r2
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	085b      	lsrs	r3, r3, #1
 800aeaa:	441a      	add	r2, r3
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aeb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb8:	2b0f      	cmp	r3, #15
 800aeba:	d909      	bls.n	800aed0 <UART_SetConfig+0xc9c>
 800aebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aebe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aec2:	d205      	bcs.n	800aed0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	60da      	str	r2, [r3, #12]
 800aece:	e002      	b.n	800aed6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	2201      	movs	r2, #1
 800aeda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2200      	movs	r2, #0
 800aeea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2200      	movs	r2, #0
 800aef0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aef2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3748      	adds	r7, #72	@ 0x48
 800aefa:	46bd      	mov	sp, r7
 800aefc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af00:	03d09000 	.word	0x03d09000
 800af04:	003d0900 	.word	0x003d0900
 800af08:	0800b698 	.word	0x0800b698

0800af0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af18:	f003 0308 	and.w	r3, r3, #8
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00a      	beq.n	800af36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	430a      	orrs	r2, r1
 800af34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00a      	beq.n	800af58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	430a      	orrs	r2, r1
 800af56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5c:	f003 0302 	and.w	r3, r3, #2
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00a      	beq.n	800af7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b00      	cmp	r3, #0
 800af84:	d00a      	beq.n	800af9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	430a      	orrs	r2, r1
 800af9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afa0:	f003 0310 	and.w	r3, r3, #16
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00a      	beq.n	800afbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	430a      	orrs	r2, r1
 800afbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afc2:	f003 0320 	and.w	r3, r3, #32
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	430a      	orrs	r2, r1
 800afde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d01a      	beq.n	800b022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	430a      	orrs	r2, r1
 800b000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b006:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b00a:	d10a      	bne.n	800b022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	430a      	orrs	r2, r1
 800b020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00a      	beq.n	800b044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	430a      	orrs	r2, r1
 800b042:	605a      	str	r2, [r3, #4]
  }
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b098      	sub	sp, #96	@ 0x60
 800b054:	af02      	add	r7, sp, #8
 800b056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b060:	f7f6 f8aa 	bl	80011b8 <HAL_GetTick>
 800b064:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0308 	and.w	r3, r3, #8
 800b070:	2b08      	cmp	r3, #8
 800b072:	d12f      	bne.n	800b0d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b074:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b07c:	2200      	movs	r2, #0
 800b07e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f88e 	bl	800b1a4 <UART_WaitOnFlagUntilTimeout>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d022      	beq.n	800b0d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b096:	e853 3f00 	ldrex	r3, [r3]
 800b09a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b09c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b09e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0b4:	e841 2300 	strex	r3, r2, [r1]
 800b0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e6      	bne.n	800b08e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2220      	movs	r2, #32
 800b0c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0d0:	2303      	movs	r3, #3
 800b0d2:	e063      	b.n	800b19c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0304 	and.w	r3, r3, #4
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	d149      	bne.n	800b176 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0e6:	9300      	str	r3, [sp, #0]
 800b0e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f857 	bl	800b1a4 <UART_WaitOnFlagUntilTimeout>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d03c      	beq.n	800b176 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b104:	e853 3f00 	ldrex	r3, [r3]
 800b108:	623b      	str	r3, [r7, #32]
   return(result);
 800b10a:	6a3b      	ldr	r3, [r7, #32]
 800b10c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b11a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b11c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b122:	e841 2300 	strex	r3, r2, [r1]
 800b126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d1e6      	bne.n	800b0fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3308      	adds	r3, #8
 800b134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	e853 3f00 	ldrex	r3, [r3]
 800b13c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f023 0301 	bic.w	r3, r3, #1
 800b144:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3308      	adds	r3, #8
 800b14c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b14e:	61fa      	str	r2, [r7, #28]
 800b150:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b152:	69b9      	ldr	r1, [r7, #24]
 800b154:	69fa      	ldr	r2, [r7, #28]
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	617b      	str	r3, [r7, #20]
   return(result);
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e5      	bne.n	800b12e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2220      	movs	r2, #32
 800b166:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b172:	2303      	movs	r3, #3
 800b174:	e012      	b.n	800b19c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2220      	movs	r2, #32
 800b17a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2220      	movs	r2, #32
 800b182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3758      	adds	r7, #88	@ 0x58
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	603b      	str	r3, [r7, #0]
 800b1b0:	4613      	mov	r3, r2
 800b1b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1b4:	e04f      	b.n	800b256 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1bc:	d04b      	beq.n	800b256 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1be:	f7f5 fffb 	bl	80011b8 <HAL_GetTick>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	1ad3      	subs	r3, r2, r3
 800b1c8:	69ba      	ldr	r2, [r7, #24]
 800b1ca:	429a      	cmp	r2, r3
 800b1cc:	d302      	bcc.n	800b1d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e04e      	b.n	800b276 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 0304 	and.w	r3, r3, #4
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d037      	beq.n	800b256 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2b80      	cmp	r3, #128	@ 0x80
 800b1ea:	d034      	beq.n	800b256 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b40      	cmp	r3, #64	@ 0x40
 800b1f0:	d031      	beq.n	800b256 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	69db      	ldr	r3, [r3, #28]
 800b1f8:	f003 0308 	and.w	r3, r3, #8
 800b1fc:	2b08      	cmp	r3, #8
 800b1fe:	d110      	bne.n	800b222 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2208      	movs	r2, #8
 800b206:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 f839 	bl	800b280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2208      	movs	r2, #8
 800b212:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e029      	b.n	800b276 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	69db      	ldr	r3, [r3, #28]
 800b228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b22c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b230:	d111      	bne.n	800b256 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b23a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b23c:	68f8      	ldr	r0, [r7, #12]
 800b23e:	f000 f81f 	bl	800b280 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2220      	movs	r2, #32
 800b246:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2200      	movs	r2, #0
 800b24e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b252:	2303      	movs	r3, #3
 800b254:	e00f      	b.n	800b276 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	69da      	ldr	r2, [r3, #28]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	4013      	ands	r3, r2
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	429a      	cmp	r2, r3
 800b264:	bf0c      	ite	eq
 800b266:	2301      	moveq	r3, #1
 800b268:	2300      	movne	r3, #0
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	461a      	mov	r2, r3
 800b26e:	79fb      	ldrb	r3, [r7, #7]
 800b270:	429a      	cmp	r2, r3
 800b272:	d0a0      	beq.n	800b1b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b280:	b480      	push	{r7}
 800b282:	b095      	sub	sp, #84	@ 0x54
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b29c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b2ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b2ae:	e841 2300 	strex	r3, r2, [r1]
 800b2b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1e6      	bne.n	800b288 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	3308      	adds	r3, #8
 800b2c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c2:	6a3b      	ldr	r3, [r7, #32]
 800b2c4:	e853 3f00 	ldrex	r3, [r3]
 800b2c8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2ca:	69fa      	ldr	r2, [r7, #28]
 800b2cc:	4b1e      	ldr	r3, [pc, #120]	@ (800b348 <UART_EndRxTransfer+0xc8>)
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3308      	adds	r3, #8
 800b2d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2e2:	e841 2300 	strex	r3, r2, [r1]
 800b2e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d1e5      	bne.n	800b2ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d118      	bne.n	800b328 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	e853 3f00 	ldrex	r3, [r3]
 800b302:	60bb      	str	r3, [r7, #8]
   return(result);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	f023 0310 	bic.w	r3, r3, #16
 800b30a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	461a      	mov	r2, r3
 800b312:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b314:	61bb      	str	r3, [r7, #24]
 800b316:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b318:	6979      	ldr	r1, [r7, #20]
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	e841 2300 	strex	r3, r2, [r1]
 800b320:	613b      	str	r3, [r7, #16]
   return(result);
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1e6      	bne.n	800b2f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b33c:	bf00      	nop
 800b33e:	3754      	adds	r7, #84	@ 0x54
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	effffffe 	.word	0xeffffffe

0800b34c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b358:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f7fe ff4c 	bl	800a208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b370:	bf00      	nop
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b088      	sub	sp, #32
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	e853 3f00 	ldrex	r3, [r3]
 800b38c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b394:	61fb      	str	r3, [r7, #28]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	461a      	mov	r2, r3
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	61bb      	str	r3, [r7, #24]
 800b3a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	6979      	ldr	r1, [r7, #20]
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e6      	bne.n	800b380 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2220      	movs	r2, #32
 800b3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7fe ff17 	bl	800a1f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3c6:	bf00      	nop
 800b3c8:	3720      	adds	r7, #32
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b083      	sub	sp, #12
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b3ea:	bf00      	nop
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr

0800b3f6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b3fe:	bf00      	nop
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b40a:	b480      	push	{r7}
 800b40c:	b085      	sub	sp, #20
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d101      	bne.n	800b420 <HAL_UARTEx_DisableFifoMode+0x16>
 800b41c:	2302      	movs	r3, #2
 800b41e:	e027      	b.n	800b470 <HAL_UARTEx_DisableFifoMode+0x66>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2224      	movs	r2, #36	@ 0x24
 800b42c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f022 0201 	bic.w	r2, r2, #1
 800b446:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b44e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2220      	movs	r2, #32
 800b462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d101      	bne.n	800b494 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b490:	2302      	movs	r3, #2
 800b492:	e02d      	b.n	800b4f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2224      	movs	r2, #36	@ 0x24
 800b4a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f022 0201 	bic.w	r2, r2, #1
 800b4ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	683a      	ldr	r2, [r7, #0]
 800b4cc:	430a      	orrs	r2, r1
 800b4ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 f84f 	bl	800b574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2220      	movs	r2, #32
 800b4e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d101      	bne.n	800b510 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b50c:	2302      	movs	r3, #2
 800b50e:	e02d      	b.n	800b56c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2201      	movs	r2, #1
 800b514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2224      	movs	r2, #36	@ 0x24
 800b51c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f022 0201 	bic.w	r2, r2, #1
 800b536:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	430a      	orrs	r2, r1
 800b54a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 f811 	bl	800b574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2220      	movs	r2, #32
 800b55e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3710      	adds	r7, #16
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b580:	2b00      	cmp	r3, #0
 800b582:	d108      	bne.n	800b596 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2201      	movs	r2, #1
 800b588:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b594:	e031      	b.n	800b5fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b596:	2310      	movs	r3, #16
 800b598:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b59a:	2310      	movs	r3, #16
 800b59c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	0e5b      	lsrs	r3, r3, #25
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 0307 	and.w	r3, r3, #7
 800b5ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	0f5b      	lsrs	r3, r3, #29
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	f003 0307 	and.w	r3, r3, #7
 800b5bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	7b3a      	ldrb	r2, [r7, #12]
 800b5c2:	4911      	ldr	r1, [pc, #68]	@ (800b608 <UARTEx_SetNbDataToProcess+0x94>)
 800b5c4:	5c8a      	ldrb	r2, [r1, r2]
 800b5c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5ca:	7b3a      	ldrb	r2, [r7, #12]
 800b5cc:	490f      	ldr	r1, [pc, #60]	@ (800b60c <UARTEx_SetNbDataToProcess+0x98>)
 800b5ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5d4:	b29a      	uxth	r2, r3
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5dc:	7bfb      	ldrb	r3, [r7, #15]
 800b5de:	7b7a      	ldrb	r2, [r7, #13]
 800b5e0:	4909      	ldr	r1, [pc, #36]	@ (800b608 <UARTEx_SetNbDataToProcess+0x94>)
 800b5e2:	5c8a      	ldrb	r2, [r1, r2]
 800b5e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5e8:	7b7a      	ldrb	r2, [r7, #13]
 800b5ea:	4908      	ldr	r1, [pc, #32]	@ (800b60c <UARTEx_SetNbDataToProcess+0x98>)
 800b5ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b5fa:	bf00      	nop
 800b5fc:	3714      	adds	r7, #20
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	0800b6b0 	.word	0x0800b6b0
 800b60c:	0800b6b8 	.word	0x0800b6b8

0800b610 <memset>:
 800b610:	4402      	add	r2, r0
 800b612:	4603      	mov	r3, r0
 800b614:	4293      	cmp	r3, r2
 800b616:	d100      	bne.n	800b61a <memset+0xa>
 800b618:	4770      	bx	lr
 800b61a:	f803 1b01 	strb.w	r1, [r3], #1
 800b61e:	e7f9      	b.n	800b614 <memset+0x4>

0800b620 <__libc_init_array>:
 800b620:	b570      	push	{r4, r5, r6, lr}
 800b622:	4d0d      	ldr	r5, [pc, #52]	@ (800b658 <__libc_init_array+0x38>)
 800b624:	4c0d      	ldr	r4, [pc, #52]	@ (800b65c <__libc_init_array+0x3c>)
 800b626:	1b64      	subs	r4, r4, r5
 800b628:	10a4      	asrs	r4, r4, #2
 800b62a:	2600      	movs	r6, #0
 800b62c:	42a6      	cmp	r6, r4
 800b62e:	d109      	bne.n	800b644 <__libc_init_array+0x24>
 800b630:	4d0b      	ldr	r5, [pc, #44]	@ (800b660 <__libc_init_array+0x40>)
 800b632:	4c0c      	ldr	r4, [pc, #48]	@ (800b664 <__libc_init_array+0x44>)
 800b634:	f000 f818 	bl	800b668 <_init>
 800b638:	1b64      	subs	r4, r4, r5
 800b63a:	10a4      	asrs	r4, r4, #2
 800b63c:	2600      	movs	r6, #0
 800b63e:	42a6      	cmp	r6, r4
 800b640:	d105      	bne.n	800b64e <__libc_init_array+0x2e>
 800b642:	bd70      	pop	{r4, r5, r6, pc}
 800b644:	f855 3b04 	ldr.w	r3, [r5], #4
 800b648:	4798      	blx	r3
 800b64a:	3601      	adds	r6, #1
 800b64c:	e7ee      	b.n	800b62c <__libc_init_array+0xc>
 800b64e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b652:	4798      	blx	r3
 800b654:	3601      	adds	r6, #1
 800b656:	e7f2      	b.n	800b63e <__libc_init_array+0x1e>
 800b658:	0800b6c8 	.word	0x0800b6c8
 800b65c:	0800b6c8 	.word	0x0800b6c8
 800b660:	0800b6c8 	.word	0x0800b6c8
 800b664:	0800b6cc 	.word	0x0800b6cc

0800b668 <_init>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	bf00      	nop
 800b66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b66e:	bc08      	pop	{r3}
 800b670:	469e      	mov	lr, r3
 800b672:	4770      	bx	lr

0800b674 <_fini>:
 800b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b676:	bf00      	nop
 800b678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67a:	bc08      	pop	{r3}
 800b67c:	469e      	mov	lr, r3
 800b67e:	4770      	bx	lr
