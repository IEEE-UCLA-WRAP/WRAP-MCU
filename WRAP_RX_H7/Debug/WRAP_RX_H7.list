
WRAP_RX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e560  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  0800e810  0800e810  0000f810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f218  0800f218  00010218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f220  0800f220  00010220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f224  0800f224  00010224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000b4  24000000  0800f228  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000b8c50  240000b4  0800f2dc  000110b4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240b8d04  0800f2dc  00011d04  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000110b4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d3c5  00000000  00000000  000110e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000033a6  00000000  00000000  0002e4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015f8  00000000  00000000  00031850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010fe  00000000  00000000  00032e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032d40  00000000  00000000  00033f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e159  00000000  00000000  00066c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154bbc  00000000  00000000  00084ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001d999b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006354  00000000  00000000  001d9a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001dfda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000026a0  00000000  00000000  001dfe17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  001e24b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b4 	.word	0x240000b4
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e7f8 	.word	0x0800e7f8

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000b8 	.word	0x240000b8
 80002ec:	0800e7f8 	.word	0x0800e7f8

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08e      	sub	sp, #56	@ 0x38
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e6:	f000 ffab 	bl	8001540 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 fc5f 	bl	8001eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f937 	bl	8000860 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f2:	f000 f9f7 	bl	80009e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fbbd 	bl	8000d74 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fa:	f000 fb9b 	bl	8000d34 <MX_DMA_Init>
  MX_ADC1_Init();
 80005fe:	f000 fa21 	bl	8000a44 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000602:	f000 fa9d 	bl	8000b40 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fb49 	bl	8000c9c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800060a:	f000 faf9 	bl	8000c00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start timers
  HAL_TIM_Base_Start(&htim2);
 800060e:	487e      	ldr	r0, [pc, #504]	@ (8000808 <main+0x228>)
 8000610:	f00a f93e 	bl	800a890 <HAL_TIM_Base_Start>

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
  HAL_ADC_Start(&hadc2);
 8000614:	487d      	ldr	r0, [pc, #500]	@ (800080c <main+0x22c>)
 8000616:	f002 f837 	bl	8002688 <HAL_ADC_Start>

  // Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800061a:	f647 2244 	movw	r2, #31300	@ 0x7a44
 800061e:	497c      	ldr	r1, [pc, #496]	@ (8000810 <main+0x230>)
 8000620:	487c      	ldr	r0, [pc, #496]	@ (8000814 <main+0x234>)
 8000622:	f003 f81d 	bl	8003660 <HAL_ADCEx_MultiModeStart_DMA>

  uint16_t * samples;
  uint8_t packet_found;

  // setup params
  params_r params = {.CL_phase = 0,
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	f04f 0300 	mov.w	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b76      	ldr	r3, [pc, #472]	@ (8000818 <main+0x238>)
 8000640:	617b      	str	r3, [r7, #20]

    /* USER CODE BEGIN 3 */

	// execute one buffer at a time. Look at SWV console to see if computation time is too long
	// alias buffer for ease
	if (buff_flag_1) {
 8000642:	4b76      	ldr	r3, [pc, #472]	@ (800081c <main+0x23c>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <main+0x70>
	  samples = buffer_1;
 800064c:	4b74      	ldr	r3, [pc, #464]	@ (8000820 <main+0x240>)
 800064e:	637b      	str	r3, [r7, #52]	@ 0x34
	}
	if (buff_flag_2) {
 8000650:	4b74      	ldr	r3, [pc, #464]	@ (8000824 <main+0x244>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <main+0x7e>
	  samples = buffer_2;
 800065a:	4b73      	ldr	r3, [pc, #460]	@ (8000828 <main+0x248>)
 800065c:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	if (buff_flag_1 || buff_flag_2) {
 800065e:	4b6f      	ldr	r3, [pc, #444]	@ (800081c <main+0x23c>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <main+0x92>
 8000668:	4b6e      	ldr	r3, [pc, #440]	@ (8000824 <main+0x244>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0e7      	beq.n	8000642 <main+0x62>
	  packet_found = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	76fb      	strb	r3, [r7, #27]
	  // demodulate buffer
	  start = __HAL_TIM_GET_COUNTER(&htim2);
 8000676:	4b64      	ldr	r3, [pc, #400]	@ (8000808 <main+0x228>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800067c:	4a6b      	ldr	r2, [pc, #428]	@ (800082c <main+0x24c>)
 800067e:	6013      	str	r3, [r2, #0]
	  num_symbs = demodulate(samples, temp_symbs, &params);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	461a      	mov	r2, r3
 8000684:	496a      	ldr	r1, [pc, #424]	@ (8000830 <main+0x250>)
 8000686:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000688:	f000 fcae 	bl	8000fe8 <demodulate>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b68      	ldr	r3, [pc, #416]	@ (8000834 <main+0x254>)
 8000692:	601a      	str	r2, [r3, #0]
	  end = __HAL_TIM_GET_COUNTER(&htim2);
 8000694:	4b5c      	ldr	r3, [pc, #368]	@ (8000808 <main+0x228>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069a:	4a67      	ldr	r2, [pc, #412]	@ (8000838 <main+0x258>)
 800069c:	6013      	str	r3, [r2, #0]

	  demod_time = end - start;
 800069e:	4b66      	ldr	r3, [pc, #408]	@ (8000838 <main+0x258>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b62      	ldr	r3, [pc, #392]	@ (800082c <main+0x24c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	4a64      	ldr	r2, [pc, #400]	@ (800083c <main+0x25c>)
 80006aa:	6013      	str	r3, [r2, #0]

	  total_symbs += num_symbs;
 80006ac:	4b64      	ldr	r3, [pc, #400]	@ (8000840 <main+0x260>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b60      	ldr	r3, [pc, #384]	@ (8000834 <main+0x254>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4413      	add	r3, r2
 80006b6:	4a62      	ldr	r2, [pc, #392]	@ (8000840 <main+0x260>)
 80006b8:	6013      	str	r3, [r2, #0]
	  // add temp_symbs to running buffer for correlation
	  // shift latest entries
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80006be:	e00f      	b.n	80006e0 <main+0x100>
		  symbol_buffer[j] = symbol_buffer[j+num_symbs];
 80006c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006c2:	4b5c      	ldr	r3, [pc, #368]	@ (8000834 <main+0x254>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a5e      	ldr	r2, [pc, #376]	@ (8000844 <main+0x264>)
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	495c      	ldr	r1, [pc, #368]	@ (8000844 <main+0x264>)
 80006d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 80006da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80006dc:	3301      	adds	r3, #1
 80006de:	633b      	str	r3, [r7, #48]	@ 0x30
 80006e0:	4b54      	ldr	r3, [pc, #336]	@ (8000834 <main+0x254>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	f240 1339 	movw	r3, #313	@ 0x139
 80006e8:	1a9b      	subs	r3, r3, r2
 80006ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80006ec:	4293      	cmp	r3, r2
 80006ee:	d8e7      	bhi.n	80006c0 <main+0xe0>
	  }
	  for (int j = 0; j < num_symbs; j++) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006f4:	e011      	b.n	800071a <main+0x13a>
		  symbol_buffer[SYMBOL_BUFF-1-num_symbs+j] = temp_symbs[j];
 80006f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006f8:	4b4e      	ldr	r3, [pc, #312]	@ (8000834 <main+0x254>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8000702:	494b      	ldr	r1, [pc, #300]	@ (8000830 <main+0x250>)
 8000704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000706:	0092      	lsls	r2, r2, #2
 8000708:	440a      	add	r2, r1
 800070a:	6812      	ldr	r2, [r2, #0]
 800070c:	494d      	ldr	r1, [pc, #308]	@ (8000844 <main+0x264>)
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < num_symbs; j++) {
 8000714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000716:	3301      	adds	r3, #1
 8000718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800071a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800071c:	4b45      	ldr	r3, [pc, #276]	@ (8000834 <main+0x254>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	429a      	cmp	r2, r3
 8000722:	d3e8      	bcc.n	80006f6 <main+0x116>
	  }

	  if (total_symbs >= NUM_SYMBS) {
 8000724:	4b46      	ldr	r3, [pc, #280]	@ (8000840 <main+0x260>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b9c      	cmp	r3, #156	@ 0x9c
 800072a:	d963      	bls.n	80007f4 <main+0x214>
			packet_found = find_packet(symbol_buffer, bits, SYMBOL_BUFF);
 800072c:	f240 1239 	movw	r2, #313	@ 0x139
 8000730:	4945      	ldr	r1, [pc, #276]	@ (8000848 <main+0x268>)
 8000732:	4844      	ldr	r0, [pc, #272]	@ (8000844 <main+0x264>)
 8000734:	f000 fe2a 	bl	800138c <find_packet>
 8000738:	4603      	mov	r3, r0
 800073a:	76fb      	strb	r3, [r7, #27]
			if (packet_found) {
 800073c:	7efb      	ldrb	r3, [r7, #27]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d055      	beq.n	80007ee <main+0x20e>

						t_str[i/BITS_PER_CHAR] = result;
					}

				#elif REPETITION_CODE_FLAG
					for (int i = 0; i < NUM_SYMBS - (NUM_PACKET_H * PACKET_HEADER_LEN); i = i+BITS_PER_CHAR) {
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000746:	e049      	b.n	80007dc <main+0x1fc>
						result = 0;
 8000748:	4b40      	ldr	r3, [pc, #256]	@ (800084c <main+0x26c>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]
						for(int j = 0; j < 8; j++)
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
 8000752:	e032      	b.n	80007ba <main+0x1da>
						{
							uint8_t total_one_bits = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
							for(int k = 0; k < REPETITION_INVERSE_CODERATE; k++){
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]
 800075e:	e011      	b.n	8000784 <main+0x1a4>
								total_one_bits += bits[i+REPETITION_INVERSE_CODERATE*j+k];
 8000760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	441a      	add	r2, r3
 8000768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800076a:	441a      	add	r2, r3
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	4413      	add	r3, r2
 8000770:	4a35      	ldr	r2, [pc, #212]	@ (8000848 <main+0x268>)
 8000772:	5cd2      	ldrb	r2, [r2, r3]
 8000774:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000778:	4413      	add	r3, r2
 800077a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
							for(int k = 0; k < REPETITION_INVERSE_CODERATE; k++){
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3301      	adds	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	2b02      	cmp	r3, #2
 8000788:	ddea      	ble.n	8000760 <main+0x180>
							}
							uint8_t decoded_bit = (uint8_t) (total_one_bits >= (REPETITION_INVERSE_CODERATE>>1) + 1);
 800078a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800078e:	2b01      	cmp	r3, #1
 8000790:	bf8c      	ite	hi
 8000792:	2301      	movhi	r3, #1
 8000794:	2300      	movls	r3, #0
 8000796:	b2db      	uxtb	r3, r3
 8000798:	76bb      	strb	r3, [r7, #26]

							result <<= 1;
 800079a:	4b2c      	ldr	r3, [pc, #176]	@ (800084c <main+0x26c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <main+0x26c>)
 80007a4:	701a      	strb	r2, [r3, #0]
							result += decoded_bit;
 80007a6:	4b29      	ldr	r3, [pc, #164]	@ (800084c <main+0x26c>)
 80007a8:	781a      	ldrb	r2, [r3, #0]
 80007aa:	7ebb      	ldrb	r3, [r7, #26]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b26      	ldr	r3, [pc, #152]	@ (800084c <main+0x26c>)
 80007b2:	701a      	strb	r2, [r3, #0]
						for(int j = 0; j < 8; j++)
 80007b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007b6:	3301      	adds	r3, #1
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007bc:	2b07      	cmp	r3, #7
 80007be:	ddc9      	ble.n	8000754 <main+0x174>
						}
						t_str[i/BITS_PER_CHAR] = result;
 80007c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007c2:	4a23      	ldr	r2, [pc, #140]	@ (8000850 <main+0x270>)
 80007c4:	fb82 1203 	smull	r1, r2, r2, r3
 80007c8:	1092      	asrs	r2, r2, #2
 80007ca:	17db      	asrs	r3, r3, #31
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	4a1f      	ldr	r2, [pc, #124]	@ (800084c <main+0x26c>)
 80007d0:	7811      	ldrb	r1, [r2, #0]
 80007d2:	4a20      	ldr	r2, [pc, #128]	@ (8000854 <main+0x274>)
 80007d4:	54d1      	strb	r1, [r2, r3]
					for (int i = 0; i < NUM_SYMBS - (NUM_PACKET_H * PACKET_HEADER_LEN); i = i+BITS_PER_CHAR) {
 80007d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007d8:	3318      	adds	r3, #24
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007de:	2b8f      	cmp	r3, #143	@ 0x8f
 80007e0:	ddb2      	ble.n	8000748 <main+0x168>
						}
						t_str[i>>3] = result;
					}

				#endif
				HAL_UART_Transmit(&huart3, (uint8_t *)t_str, sizeof(t_str), 100);
 80007e2:	2364      	movs	r3, #100	@ 0x64
 80007e4:	2206      	movs	r2, #6
 80007e6:	491b      	ldr	r1, [pc, #108]	@ (8000854 <main+0x274>)
 80007e8:	481b      	ldr	r0, [pc, #108]	@ (8000858 <main+0x278>)
 80007ea:	f00a fbdb 	bl	800afa4 <HAL_UART_Transmit>
			}

			total_symbs = 0;
 80007ee:	4b14      	ldr	r3, [pc, #80]	@ (8000840 <main+0x260>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
	  }
	  buff_process = RESET;
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <main+0x27c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <main+0x23c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <main+0x244>)
 8000802:	2200      	movs	r2, #0
 8000804:	701a      	strb	r2, [r3, #0]
	if (buff_flag_1) {
 8000806:	e71c      	b.n	8000642 <main+0x62>
 8000808:	24000210 	.word	0x24000210
 800080c:	24000134 	.word	0x24000134
 8000810:	240002f0 	.word	0x240002f0
 8000814:	240000d0 	.word	0x240000d0
 8000818:	42c80000 	.word	0x42c80000
 800081c:	2403df6c 	.word	0x2403df6c
 8000820:	2401ec00 	.word	0x2401ec00
 8000824:	2403df6d 	.word	0x2403df6d
 8000828:	2402e088 	.word	0x2402e088
 800082c:	2403df70 	.word	0x2403df70
 8000830:	2403d510 	.word	0x2403d510
 8000834:	2403df7c 	.word	0x2403df7c
 8000838:	2403df74 	.word	0x2403df74
 800083c:	2403df78 	.word	0x2403df78
 8000840:	2403df80 	.word	0x2403df80
 8000844:	2403d9f8 	.word	0x2403d9f8
 8000848:	2403dedc 	.word	0x2403dedc
 800084c:	240b8ba9 	.word	0x240b8ba9
 8000850:	2aaaaaab 	.word	0x2aaaaaab
 8000854:	2403df90 	.word	0x2403df90
 8000858:	2400025c 	.word	0x2400025c
 800085c:	2403df6e 	.word	0x2403df6e

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b0a4      	sub	sp, #144	@ 0x90
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800086a:	224c      	movs	r2, #76	@ 0x4c
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f00c ff3e 	bl	800d6f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000878:	2220      	movs	r2, #32
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f00c ff37 	bl	800d6f0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
 8000892:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000894:	4b51      	ldr	r3, [pc, #324]	@ (80009dc <SystemClock_Config+0x17c>)
 8000896:	f04f 32ff 	mov.w	r2, #4294967295
 800089a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800089e:	2004      	movs	r0, #4
 80008a0:	f006 fabc 	bl	8006e1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b4d      	ldr	r3, [pc, #308]	@ (80009e0 <SystemClock_Config+0x180>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a4c      	ldr	r2, [pc, #304]	@ (80009e0 <SystemClock_Config+0x180>)
 80008ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b4a      	ldr	r3, [pc, #296]	@ (80009e0 <SystemClock_Config+0x180>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008c0:	bf00      	nop
 80008c2:	4b47      	ldr	r3, [pc, #284]	@ (80009e0 <SystemClock_Config+0x180>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ce:	d1f8      	bne.n	80008c2 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d0:	f006 fa94 	bl	8006dfc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008d4:	4b41      	ldr	r3, [pc, #260]	@ (80009dc <SystemClock_Config+0x17c>)
 80008d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80008d8:	4a40      	ldr	r2, [pc, #256]	@ (80009dc <SystemClock_Config+0x17c>)
 80008da:	f023 0318 	bic.w	r3, r3, #24
 80008de:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80008e0:	2327      	movs	r3, #39	@ 0x27
 80008e2:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008ea:	2301      	movs	r3, #1
 80008ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008f2:	2340      	movs	r3, #64	@ 0x40
 80008f4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008f6:	2301      	movs	r3, #1
 80008f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	2302      	movs	r3, #2
 8000900:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000902:	2301      	movs	r3, #1
 8000904:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000906:	2346      	movs	r3, #70	@ 0x46
 8000908:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800090a:	2302      	movs	r3, #2
 800090c:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800090e:	2304      	movs	r3, #4
 8000910:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000918:	230c      	movs	r3, #12
 800091a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800092e:	4618      	mov	r0, r3
 8000930:	f006 face 	bl	8006ed0 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800093a:	f000 fe2d 	bl	8001598 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	233f      	movs	r3, #63	@ 0x3f
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2303      	movs	r3, #3
 8000944:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800094e:	2340      	movs	r3, #64	@ 0x40
 8000950:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000952:	2340      	movs	r3, #64	@ 0x40
 8000954:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800095c:	2340      	movs	r3, #64	@ 0x40
 800095e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000964:	2106      	movs	r1, #6
 8000966:	4618      	mov	r0, r3
 8000968:	f006 fee4 	bl	8007734 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000972:	f000 fe11 	bl	8001598 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000976:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800097a:	2100      	movs	r1, #0
 800097c:	2000      	movs	r0, #0
 800097e:	f007 f88f 	bl	8007aa0 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000982:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000986:	2100      	movs	r1, #0
 8000988:	2001      	movs	r0, #1
 800098a:	f007 f889 	bl	8007aa0 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <SystemClock_Config+0x17c>)
 8000990:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000994:	4a11      	ldr	r2, [pc, #68]	@ (80009dc <SystemClock_Config+0x17c>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <SystemClock_Config+0x17c>)
 80009a0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80009b0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009b4:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80009ba:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 80009be:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80009c0:	2322      	movs	r3, #34	@ 0x22
 80009c2:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80009c4:	2320      	movs	r3, #32
 80009c6:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4618      	mov	r0, r3
 80009ce:	f009 fd4d 	bl	800a46c <HAL_RCCEx_CRSConfig>
}
 80009d2:	bf00      	nop
 80009d4:	3790      	adds	r7, #144	@ 0x90
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	58024400 	.word	0x58024400
 80009e0:	58024800 	.word	0x58024800

080009e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b0b0      	sub	sp, #192	@ 0xc0
 80009e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ea:	463b      	mov	r3, r7
 80009ec:	22c0      	movs	r2, #192	@ 0xc0
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f00c fe7d 	bl	800d6f0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009f6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 8000a06:	2312      	movs	r3, #18
 8000a08:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a16:	23c0      	movs	r3, #192	@ 0xc0
 8000a18:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000a1e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f007 fa77 	bl	8007f20 <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000a38:	f000 fdae 	bl	8001598 <Error_Handler>
  }
}
 8000a3c:	bf00      	nop
 8000a3e:	37c0      	adds	r7, #192	@ 0xc0
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08a      	sub	sp, #40	@ 0x28
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a56:	463b      	mov	r3, r7
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
 8000a64:	615a      	str	r2, [r3, #20]
 8000a66:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a68:	4b32      	ldr	r3, [pc, #200]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000a6a:	4a33      	ldr	r2, [pc, #204]	@ (8000b38 <MX_ADC1_Init+0xf4>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a6e:	4b31      	ldr	r3, [pc, #196]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a74:	4b2f      	ldr	r3, [pc, #188]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a80:	4b2c      	ldr	r3, [pc, #176]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a86:	4b2b      	ldr	r3, [pc, #172]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a8c:	4b29      	ldr	r3, [pc, #164]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a92:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a98:	4b26      	ldr	r3, [pc, #152]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9e:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa4:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000aaa:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000aac:	2203      	movs	r2, #3
 8000aae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab0:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac4:	481b      	ldr	r0, [pc, #108]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000ac6:	f001 fc85 	bl	80023d4 <HAL_ADC_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ad0:	f000 fd62 	bl	8001598 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000ad4:	2307      	movs	r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000ad8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000adc:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 8000ade:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ae4:	f107 031c 	add.w	r3, r7, #28
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4812      	ldr	r0, [pc, #72]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000aec:	f002 feba 	bl	8003864 <HAL_ADCEx_MultiModeConfigChannel>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000af6:	f000 fd4f 	bl	8001598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <MX_ADC1_Init+0xf8>)
 8000afc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000afe:	2306      	movs	r3, #6
 8000b00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b06:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b0a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_ADC1_Init+0xf0>)
 8000b1e:	f002 f89b 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000b28:	f000 fd36 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	@ 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	240000d0 	.word	0x240000d0
 8000b38:	40022000 	.word	0x40022000
 8000b3c:	0c900008 	.word	0x0c900008

08000b40 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b58:	4b26      	ldr	r3, [pc, #152]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b5a:	4a27      	ldr	r2, [pc, #156]	@ (8000bf8 <MX_ADC2_Init+0xb8>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b5e:	4b25      	ldr	r3, [pc, #148]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b6a:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b70:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b76:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b82:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b94:	4b17      	ldr	r3, [pc, #92]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b9a:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ba8:	4812      	ldr	r0, [pc, #72]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000baa:	f001 fc13 	bl	80023d4 <HAL_ADC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000bb4:	f000 fcf0 	bl	8001598 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_ADC2_Init+0xbc>)
 8000bba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bbc:	2306      	movs	r3, #6
 8000bbe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bc4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000bc8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <MX_ADC2_Init+0xb4>)
 8000bdc:	f002 f83c 	bl	8002c58 <HAL_ADC_ConfigChannel>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000be6:	f000 fcd7 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	3720      	adds	r7, #32
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	24000134 	.word	0x24000134
 8000bf8:	40022100 	.word	0x40022100
 8000bfc:	0c900008 	.word	0x0c900008

08000c00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c06:	f107 0310 	add.w	r3, r7, #16
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <MX_TIM2_Init+0x98>)
 8000c20:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <MX_TIM2_Init+0x98>)
 8000c28:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000c2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_TIM2_Init+0x98>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c34:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_TIM2_Init+0x98>)
 8000c36:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_TIM2_Init+0x98>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_TIM2_Init+0x98>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c48:	4813      	ldr	r0, [pc, #76]	@ (8000c98 <MX_TIM2_Init+0x98>)
 8000c4a:	f009 fdc9 	bl	800a7e0 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c54:	f000 fca0 	bl	8001598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4619      	mov	r1, r3
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <MX_TIM2_Init+0x98>)
 8000c66:	f009 fe83 	bl	800a970 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c70:	f000 fc92 	bl	8001598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4805      	ldr	r0, [pc, #20]	@ (8000c98 <MX_TIM2_Init+0x98>)
 8000c82:	f00a f8b1 	bl	800ade8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c8c:	f000 fc84 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	3720      	adds	r7, #32
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	24000210 	.word	0x24000210

08000c9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000ca2:	4a23      	ldr	r2, [pc, #140]	@ (8000d30 <MX_USART3_UART_Init+0x94>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce4:	4811      	ldr	r0, [pc, #68]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000ce6:	f00a f90d 	bl	800af04 <HAL_UART_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cf0:	f000 fc52 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000cf8:	f00b fee0 	bl	800cabc <HAL_UARTEx_SetTxFifoThreshold>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d02:	f000 fc49 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4808      	ldr	r0, [pc, #32]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000d0a:	f00b ff15 	bl	800cb38 <HAL_UARTEx_SetRxFifoThreshold>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d14:	f000 fc40 	bl	8001598 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	@ (8000d2c <MX_USART3_UART_Init+0x90>)
 8000d1a:	f00b fe96 	bl	800ca4a <HAL_UARTEx_DisableFifoMode>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d24:	f000 fc38 	bl	8001598 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2400025c 	.word	0x2400025c
 8000d30:	40004800 	.word	0x40004800

08000d34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d70 <MX_DMA_Init+0x3c>)
 8000d3c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d40:	4a0b      	ldr	r2, [pc, #44]	@ (8000d70 <MX_DMA_Init+0x3c>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000d4a:	4b09      	ldr	r3, [pc, #36]	@ (8000d70 <MX_DMA_Init+0x3c>)
 8000d4c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	200b      	movs	r0, #11
 8000d5e:	f002 fef8 	bl	8003b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d62:	200b      	movs	r0, #11
 8000d64:	f002 ff0f 	bl	8003b86 <HAL_NVIC_EnableIRQ>

}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	58024400 	.word	0x58024400

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	@ 0x28
 8000d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000d8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d90:	4a38      	ldr	r2, [pc, #224]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000d92:	f043 0304 	orr.w	r3, r3, #4
 8000d96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d9a:	4b36      	ldr	r3, [pc, #216]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da8:	4b32      	ldr	r3, [pc, #200]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000daa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dae:	4a31      	ldr	r2, [pc, #196]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000db4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000db8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dc8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dcc:	4a29      	ldr	r2, [pc, #164]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dd6:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dd8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000de6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dea:	4a22      	ldr	r2, [pc, #136]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_GPIO_Init+0x100>)
 8000df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dfa:	f003 0308 	and.w	r3, r3, #8
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2120      	movs	r1, #32
 8000e06:	481c      	ldr	r0, [pc, #112]	@ (8000e78 <MX_GPIO_Init+0x104>)
 8000e08:	f005 ffde 	bl	8006dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	4619      	mov	r1, r3
 8000e22:	4815      	ldr	r0, [pc, #84]	@ (8000e78 <MX_GPIO_Init+0x104>)
 8000e24:	f005 fe20 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <MX_GPIO_Init+0x108>)
 8000e46:	f005 fe0f 	bl	8006a68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4804      	ldr	r0, [pc, #16]	@ (8000e78 <MX_GPIO_Init+0x104>)
 8000e68:	f005 fdfe 	bl	8006a68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	@ 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020000 	.word	0x58020000
 8000e7c:	58020800 	.word	0x58020800

08000e80 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	481d      	ldr	r0, [pc, #116]	@ (8000f04 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000e8e:	f005 ff9b 	bl	8006dc8 <HAL_GPIO_WritePin>

  adc_start = __HAL_TIM_GET_COUNTER(&htim2);
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e98:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8000e9a:	6013      	str	r3, [r2, #0]

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d129      	bne.n	8000efa <HAL_ADC_ConvHalfCpltCallback+0x7a>
	  buff_process = SET;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = SET;
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	e018      	b.n	8000ef0 <HAL_ADC_ConvHalfCpltCallback+0x70>
	  {
		  buffer_1[2*j] = (uint16_t)(adc_buf[j]&0x0000FFFF);
 8000ebe:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	b291      	uxth	r1, r2
 8000ecc:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000ece:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_1[2*j+1] = (uint16_t)(adc_buf[j]>>16);
 8000ed2:	4a12      	ldr	r2, [pc, #72]	@ (8000f1c <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	0c1a      	lsrs	r2, r3, #16
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b291      	uxth	r1, r2
 8000ee4:	4a0e      	ldr	r2, [pc, #56]	@ (8000f20 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000ee6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f643 5221 	movw	r2, #15649	@ 0x3d21
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	dde1      	ble.n	8000ebe <HAL_ADC_ConvHalfCpltCallback+0x3e>
	  }
  }
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	58020000 	.word	0x58020000
 8000f08:	24000210 	.word	0x24000210
 8000f0c:	2403df84 	.word	0x2403df84
 8000f10:	2403df6e 	.word	0x2403df6e
 8000f14:	2403df6c 	.word	0x2403df6c
 8000f18:	2403df6d 	.word	0x2403df6d
 8000f1c:	240002f0 	.word	0x240002f0
 8000f20:	2401ec00 	.word	0x2401ec00

08000f24 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2120      	movs	r1, #32
 8000f30:	4823      	ldr	r0, [pc, #140]	@ (8000fc0 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000f32:	f005 ff49 	bl	8006dc8 <HAL_GPIO_WritePin>

  adc_end = __HAL_TIM_GET_COUNTER(&htim2);
 8000f36:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f3c:	4a22      	ldr	r2, [pc, #136]	@ (8000fc8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f3e:	6013      	str	r3, [r2, #0]
  adc_time = adc_end - adc_start;
 8000f40:	4b21      	ldr	r3, [pc, #132]	@ (8000fc8 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <HAL_ADC_ConvCpltCallback+0xa8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4a21      	ldr	r2, [pc, #132]	@ (8000fd0 <HAL_ADC_ConvCpltCallback+0xac>)
 8000f4c:	6013      	str	r3, [r2, #0]

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d12f      	bne.n	8000fb8 <HAL_ADC_ConvCpltCallback+0x94>
	  buff_process = SET;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = SET;
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 8000f64:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	e01e      	b.n	8000fae <HAL_ADC_ConvCpltCallback+0x8a>
		  buffer_2[2*j] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]&0x0000FFFF);
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	f643 5322 	movw	r3, #15650	@ 0x3d22
 8000f76:	4413      	add	r3, r2
 8000f78:	4a19      	ldr	r2, [pc, #100]	@ (8000fe0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	b291      	uxth	r1, r2
 8000f84:	4a17      	ldr	r2, [pc, #92]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000f86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_2[2*j+1] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]>>16);
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	f643 5322 	movw	r3, #15650	@ 0x3d22
 8000f90:	4413      	add	r3, r2
 8000f92:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f98:	0c1a      	lsrs	r2, r3, #16
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b291      	uxth	r1, r2
 8000fa2:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <HAL_ADC_ConvCpltCallback+0xc0>)
 8000fa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f643 5221 	movw	r2, #15649	@ 0x3d21
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	dddb      	ble.n	8000f70 <HAL_ADC_ConvCpltCallback+0x4c>
	  }
  }
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	58020000 	.word	0x58020000
 8000fc4:	24000210 	.word	0x24000210
 8000fc8:	2403df88 	.word	0x2403df88
 8000fcc:	2403df84 	.word	0x2403df84
 8000fd0:	2403df8c 	.word	0x2403df8c
 8000fd4:	2403df6e 	.word	0x2403df6e
 8000fd8:	2403df6d 	.word	0x2403df6d
 8000fdc:	2403df6c 	.word	0x2403df6c
 8000fe0:	240002f0 	.word	0x240002f0
 8000fe4:	2402e088 	.word	0x2402e088

08000fe8 <demodulate>:

int demodulate(const uint16_t * samples, int * symbs, params_r * params) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	60f8      	str	r0, [r7, #12]
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]

    normalize(samples, norm_samples);
 8000ff4:	4929      	ldr	r1, [pc, #164]	@ (800109c <demodulate+0xb4>)
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f000 fad4 	bl	80015a4 <normalize>

//     Costas Loop
    costas_loop(norm_samples, samples_d, params);
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	4928      	ldr	r1, [pc, #160]	@ (80010a0 <demodulate+0xb8>)
 8001000:	4826      	ldr	r0, [pc, #152]	@ (800109c <demodulate+0xb4>)
 8001002:	f000 f859 	bl	80010b8 <costas_loop>
    // filter w SRRC
    arm_conv_f32(samples_d, ADC_BUF_LEN, RRC, RRC_LEN, filtered_samps);
 8001006:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <demodulate+0xbc>)
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800100e:	4a26      	ldr	r2, [pc, #152]	@ (80010a8 <demodulate+0xc0>)
 8001010:	f647 2144 	movw	r1, #31300	@ 0x7a44
 8001014:	4822      	ldr	r0, [pc, #136]	@ (80010a0 <demodulate+0xb8>)
 8001016:	f00c f8d1 	bl	800d1bc <arm_conv_f32>
    // readjust window
    float shift = RRC_LEN/2. - 0.5;
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <demodulate+0xc4>)
 800101c:	61bb      	str	r3, [r7, #24]
    int k;
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 800101e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001026:	ee17 3a90 	vmov	r3, s15
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	e01a      	b.n	8001064 <demodulate+0x7c>
        k = i - shift;
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001038:	edd7 7a06 	vldr	s15, [r7, #24]
 800103c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001044:	ee17 3a90 	vmov	r3, s15
 8001048:	613b      	str	r3, [r7, #16]
        filtered_samps[k] = filtered_samps[i];
 800104a:	4a16      	ldr	r2, [pc, #88]	@ (80010a4 <demodulate+0xbc>)
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4913      	ldr	r1, [pc, #76]	@ (80010a4 <demodulate+0xbc>)
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	601a      	str	r2, [r3, #0]
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	ee07 3a90 	vmov	s15, r3
 800106a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800106e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80010b0 <demodulate+0xc8>
 8001072:	edd7 7a06 	vldr	s15, [r7, #24]
 8001076:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800107a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	d4d4      	bmi.n	800102e <demodulate+0x46>
    }

    // timing recovery
    int bit_len = timing_recovery(filtered_samps, symbs, params);
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	4806      	ldr	r0, [pc, #24]	@ (80010a4 <demodulate+0xbc>)
 800108a:	f000 fb21 	bl	80016d0 <timing_recovery>
 800108e:	6178      	str	r0, [r7, #20]

    return bit_len;
 8001090:	697b      	ldr	r3, [r7, #20]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2403df98 	.word	0x2403df98
 80010a0:	2405c8a8 	.word	0x2405c8a8
 80010a4:	24099ac8 	.word	0x24099ac8
 80010a8:	0800e810 	.word	0x0800e810
 80010ac:	437a0000 	.word	0x437a0000
 80010b0:	46f87000 	.word	0x46f87000
 80010b4:	00000000 	.word	0x00000000

080010b8 <costas_loop>:

void costas_loop(float * norm_samples, float * samples_d, params_r * params) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	ed2d 8b02 	vpush	{d8}
 80010be:	b0b2      	sub	sp, #200	@ 0xc8
 80010c0:	af02      	add	r7, sp, #8
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
    float phase = params->CL_phase;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    float inph[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80010d0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80010d4:	222c      	movs	r2, #44	@ 0x2c
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f00c fb09 	bl	800d6f0 <memset>
    float quad[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80010de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010e2:	222c      	movs	r2, #44	@ 0x2c
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f00c fb02 	bl	800d6f0 <memset>
    float inph_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 80010ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
 80010fc:	615a      	str	r2, [r3, #20]
    float quad_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	615a      	str	r2, [r3, #20]
    double error = 0;
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    float integrator = 0; //params->CL_integrator;
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    float kp = 8.5;
 8001124:	4b94      	ldr	r3, [pc, #592]	@ (8001378 <costas_loop+0x2c0>)
 8001126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    float ki = 0.1;
 800112a:	4b94      	ldr	r3, [pc, #592]	@ (800137c <costas_loop+0x2c4>)
 800112c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float dt = (float)FC / (float)FS;
 8001130:	4b93      	ldr	r3, [pc, #588]	@ (8001380 <costas_loop+0x2c8>)
 8001132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 8001136:	2305      	movs	r3, #5
 8001138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800113c:	e0e7      	b.n	800130e <costas_loop+0x256>
        // define t from microcontroller
        int k = i - ORDER;
 800113e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001142:	3b05      	subs	r3, #5
 8001144:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        inph_[ORDER] = norm_samples[k]*2*cos(2*M_PI*dt*k + phase);
 8001148:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800115a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800115e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001162:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001166:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8001370 <costas_loop+0x2b8>
 800116a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800116e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800117a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800117e:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001182:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001186:	ee36 7b07 	vadd.f64	d7, d6, d7
 800118a:	eeb0 0b47 	vmov.f64	d0, d7
 800118e:	f00c fb47 	bl	800d820 <cos>
 8001192:	eeb0 7b40 	vmov.f64	d7, d0
 8001196:	ee28 7b07 	vmul.f64	d7, d8, d7
 800119a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800119e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        quad_[ORDER] = norm_samples[k]*-2*sin(2*M_PI*dt*k + phase);
 80011a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80011b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011b8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80011bc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80011c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c4:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8001370 <costas_loop+0x2b8>
 80011c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011d0:	ee07 3a90 	vmov	s15, r3
 80011d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011dc:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80011e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011e8:	eeb0 0b47 	vmov.f64	d0, d7
 80011ec:	f00c fb64 	bl	800d8b8 <sin>
 80011f0:	eeb0 7b40 	vmov.f64	d7, d0
 80011f4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        arm_conv_f32(inph_, ORDER+1, lp, ORDER+1, inph);
 8001200:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001204:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2306      	movs	r3, #6
 800120c:	4a5d      	ldr	r2, [pc, #372]	@ (8001384 <costas_loop+0x2cc>)
 800120e:	2106      	movs	r1, #6
 8001210:	f00b ffd4 	bl	800d1bc <arm_conv_f32>
        arm_conv_f32(quad_, ORDER+1, lp, ORDER+1, quad);
 8001214:	f107 0010 	add.w	r0, r7, #16
 8001218:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2306      	movs	r3, #6
 8001220:	4a58      	ldr	r2, [pc, #352]	@ (8001384 <costas_loop+0x2cc>)
 8001222:	2106      	movs	r1, #6
 8001224:	f00b ffca 	bl	800d1bc <arm_conv_f32>

        samples_d[k] = inph[ORDER];
 8001228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	4413      	add	r3, r2
 8001232:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001236:	601a      	str	r2, [r3, #0]
        Quad[k] = quad[ORDER];
 8001238:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800123a:	4953      	ldr	r1, [pc, #332]	@ (8001388 <costas_loop+0x2d0>)
 800123c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	601a      	str	r2, [r3, #0]

        error = inph[ORDER] * quad[ORDER];
 8001246:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800124a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800124e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001252:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001256:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8
        integrator += ki*error;
 800125a:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800125e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001262:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8001266:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800126a:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 800126e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001272:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001276:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800127a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
        phase = phase + kp*error + integrator;
 800127e:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001282:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001286:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800128a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800128e:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 8001292:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001296:	ee36 6b07 	vadd.f64	d6, d6, d7
 800129a:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 800129e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012aa:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc

        // shift the values of inph_ and quad_
        for (int jx = 1; jx < ORDER+1; jx++) {
 80012ae:	2301      	movs	r3, #1
 80012b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012b4:	e022      	b.n	80012fc <costas_loop+0x244>
            inph_[jx-1] = inph_[jx];
 80012b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	32c0      	adds	r2, #192	@ 0xc0
 80012c4:	443a      	add	r2, r7
 80012c6:	3a98      	subs	r2, #152	@ 0x98
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	33c0      	adds	r3, #192	@ 0xc0
 80012ce:	443b      	add	r3, r7
 80012d0:	3b98      	subs	r3, #152	@ 0x98
 80012d2:	601a      	str	r2, [r3, #0]
            quad_[jx-1] = quad_[jx];
 80012d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012d8:	3b01      	subs	r3, #1
 80012da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80012de:	0092      	lsls	r2, r2, #2
 80012e0:	32c0      	adds	r2, #192	@ 0xc0
 80012e2:	443a      	add	r2, r7
 80012e4:	3ab0      	subs	r2, #176	@ 0xb0
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	33c0      	adds	r3, #192	@ 0xc0
 80012ec:	443b      	add	r3, r7
 80012ee:	3bb0      	subs	r3, #176	@ 0xb0
 80012f0:	601a      	str	r2, [r3, #0]
        for (int jx = 1; jx < ORDER+1; jx++) {
 80012f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012f6:	3301      	adds	r3, #1
 80012f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001300:	2b05      	cmp	r3, #5
 8001302:	ddd8      	ble.n	80012b6 <costas_loop+0x1fe>
    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 8001304:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001308:	3301      	adds	r3, #1
 800130a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800130e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001312:	f647 2248 	movw	r2, #31304	@ 0x7a48
 8001316:	4293      	cmp	r3, r2
 8001318:	f77f af11 	ble.w	800113e <costas_loop+0x86>
        }
    }
    params->CL_phase = remainder(phase, 2*M_PI);
 800131c:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001320:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001324:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001370 <costas_loop+0x2b8>
 8001328:	eeb0 0b47 	vmov.f64	d0, d7
 800132c:	f00c fa38 	bl	800d7a0 <remainder>
 8001330:	eeb0 7b40 	vmov.f64	d7, d0
 8001334:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	edc3 7a01 	vstr	s15, [r3, #4]
    params->CL_integrator = remainder(integrator, 2*M_PI);
 800133e:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001342:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001346:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8001370 <costas_loop+0x2b8>
 800134a:	eeb0 0b47 	vmov.f64	d0, d7
 800134e:	f00c fa27 	bl	800d7a0 <remainder>
 8001352:	eeb0 7b40 	vmov.f64	d7, d0
 8001356:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	edc3 7a00 	vstr	s15, [r3]
}
 8001360:	bf00      	nop
 8001362:	37c0      	adds	r7, #192	@ 0xc0
 8001364:	46bd      	mov	sp, r7
 8001366:	ecbd 8b02 	vpop	{d8}
 800136a:	bd80      	pop	{r7, pc}
 800136c:	f3af 8000 	nop.w
 8001370:	54442d18 	.word	0x54442d18
 8001374:	401921fb 	.word	0x401921fb
 8001378:	41080000 	.word	0x41080000
 800137c:	3dcccccd 	.word	0x3dcccccd
 8001380:	3e4ccccd 	.word	0x3e4ccccd
 8001384:	24000000 	.word	0x24000000
 8001388:	2407b1b8 	.word	0x2407b1b8

0800138c <find_packet>:

uint8_t find_packet(float * symbs, uint8_t * bits, const int num_symbs) {
 800138c:	b580      	push	{r7, lr}
 800138e:	f5ad 6da8 	sub.w	sp, sp, #1344	@ 0x540
 8001392:	af02      	add	r7, sp, #8
 8001394:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8001398:	f2a3 532c 	subw	r3, r3, #1324	@ 0x52c
 800139c:	6018      	str	r0, [r3, #0]
 800139e:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80013a2:	f5a3 63a6 	sub.w	r3, r3, #1328	@ 0x530
 80013a6:	6019      	str	r1, [r3, #0]
 80013a8:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80013ac:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 80013b0:	601a      	str	r2, [r3, #0]
    // take cross correlation
    float xcorr_out[SYMBOL_BUFF+PACKET_HEADER_LEN-1];
    packet_found = 0;
 80013b2:	4b61      	ldr	r3, [pc, #388]	@ (8001538 <find_packet+0x1ac>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
    arm_correlate_f32(packet_header, PACKET_HEADER_LEN, symbs, num_symbs, xcorr_out);
 80013b8:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80013bc:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 80013c0:	6819      	ldr	r1, [r3, #0]
 80013c2:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80013c6:	f2a3 522c 	subw	r2, r3, #1324	@ 0x52c
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	460b      	mov	r3, r1
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	210d      	movs	r1, #13
 80013d6:	4859      	ldr	r0, [pc, #356]	@ (800153c <find_packet+0x1b0>)
 80013d8:	f00b fc3a 	bl	800cc50 <arm_correlate_f32>

    // find packet
    int shift = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
    for (int i = num_symbs-(NUM_PACKET_H-1)*PACKET_HEADER_LEN - 1; i >= 0; i--) {
 80013e2:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80013e6:	f2a3 5334 	subw	r3, r3, #1332	@ 0x534
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 80013f2:	e05d      	b.n	80014b0 <find_packet+0x124>
        if (fabs(xcorr_out[i]) > PACKET_HEADER_LEN-1) {
 80013f4:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 80013f8:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 80013fc:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	eef0 7ae7 	vabs.f32	s15, s15
 800140c:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	dd45      	ble.n	80014a6 <find_packet+0x11a>
            shift = SYMBOL_BUFF+PACKET_HEADER_LEN-1-i;
 800141a:	f8d7 2530 	ldr.w	r2, [r7, #1328]	@ 0x530
 800141e:	f240 1345 	movw	r3, #325	@ 0x145
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
            packet_found = 1;
 8001428:	4b43      	ldr	r3, [pc, #268]	@ (8001538 <find_packet+0x1ac>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
            if (xcorr_out[i] < 0) {
 800142e:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8001432:	f2a3 5224 	subw	r2, r3, #1316	@ 0x524
 8001436:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	edd3 7a00 	vldr	s15, [r3]
 8001442:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144a:	d400      	bmi.n	800144e <find_packet+0xc2>
				for (int j = 0; j < BITS; j++) {
					symbs[shift + j] = symbs[shift+ j]*-1;
				}
            }
            break;
 800144c:	e034      	b.n	80014b8 <find_packet+0x12c>
				for (int j = 0; j < BITS; j++) {
 800144e:	2300      	movs	r3, #0
 8001450:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8001454:	e022      	b.n	800149c <find_packet+0x110>
					symbs[shift + j] = symbs[shift+ j]*-1;
 8001456:	f8d7 2534 	ldr.w	r2, [r7, #1332]	@ 0x534
 800145a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 800145e:	4413      	add	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 8001466:	f2a2 522c 	subw	r2, r2, #1324	@ 0x52c
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	4413      	add	r3, r2
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	f8d7 2534 	ldr.w	r2, [r7, #1332]	@ 0x534
 8001476:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 8001482:	f2a2 522c 	subw	r2, r2, #1324	@ 0x52c
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	4413      	add	r3, r2
 800148a:	eef1 7a67 	vneg.f32	s15, s15
 800148e:	edc3 7a00 	vstr	s15, [r3]
				for (int j = 0; j < BITS; j++) {
 8001492:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 8001496:	3301      	adds	r3, #1
 8001498:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 800149c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	@ 0x52c
 80014a0:	2b8f      	cmp	r3, #143	@ 0x8f
 80014a2:	ddd8      	ble.n	8001456 <find_packet+0xca>
            break;
 80014a4:	e008      	b.n	80014b8 <find_packet+0x12c>
    for (int i = num_symbs-(NUM_PACKET_H-1)*PACKET_HEADER_LEN - 1; i >= 0; i--) {
 80014a6:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f8c7 3530 	str.w	r3, [r7, #1328]	@ 0x530
 80014b0:	f8d7 3530 	ldr.w	r3, [r7, #1328]	@ 0x530
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da9d      	bge.n	80013f4 <find_packet+0x68>
        }
    }

    if (!packet_found)
 80014b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <find_packet+0x1ac>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <find_packet+0x138>
        return 0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e034      	b.n	800152e <find_packet+0x1a2>

    // convert symbols to bits
    for (int i = 0; i < BITS; i++) {
 80014c4:	2300      	movs	r3, #0
 80014c6:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 80014ca:	e02b      	b.n	8001524 <find_packet+0x198>
        bits[i] = (symbs[shift+i]+1)*0.5;
 80014cc:	f8d7 2534 	ldr.w	r2, [r7, #1332]	@ 0x534
 80014d0:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 80014dc:	f2a2 522c 	subw	r2, r2, #1324	@ 0x52c
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014f4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80014f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014fc:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8001500:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 8001504:	f5a2 62a6 	sub.w	r2, r2, #1328	@ 0x530
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	4413      	add	r3, r2
 800150c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001510:	edc7 7a00 	vstr	s15, [r7]
 8001514:	783a      	ldrb	r2, [r7, #0]
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BITS; i++) {
 800151a:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 800151e:	3301      	adds	r3, #1
 8001520:	f8c7 3528 	str.w	r3, [r7, #1320]	@ 0x528
 8001524:	f8d7 3528 	ldr.w	r3, [r7, #1320]	@ 0x528
 8001528:	2b8f      	cmp	r3, #143	@ 0x8f
 800152a:	ddcf      	ble.n	80014cc <find_packet+0x140>
    }
    return 1;
 800152c:	2301      	movs	r3, #1
}
 800152e:	4618      	mov	r0, r3
 8001530:	f507 67a7 	add.w	r7, r7, #1336	@ 0x538
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	240b8ba8 	.word	0x240b8ba8
 800153c:	24000018 	.word	0x24000018

08001540 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001546:	463b      	mov	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001552:	f002 fb33 	bl	8003bbc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001556:	2301      	movs	r3, #1
 8001558:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800155a:	2300      	movs	r3, #0
 800155c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001562:	231f      	movs	r3, #31
 8001564:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001566:	2387      	movs	r3, #135	@ 0x87
 8001568:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800156a:	2300      	movs	r3, #0
 800156c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800156e:	2300      	movs	r3, #0
 8001570:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001572:	2301      	movs	r3, #1
 8001574:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001576:	2301      	movs	r3, #1
 8001578:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001582:	463b      	mov	r3, r7
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fb51 	bl	8003c2c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800158a:	2004      	movs	r0, #4
 800158c:	f002 fb2e 	bl	8003bec <HAL_MPU_Enable>

}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800159c:	b672      	cpsid	i
}
 800159e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <Error_Handler+0x8>

080015a4 <normalize>:
params: parameters that need to be stored intermediately
returns length of symbs array. symbs array must be
allocated for longer than samples/sps + some margin
*/

void normalize(const uint16_t * samples, float * norm_samples) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
        // Normalize signal
    float var = 0, mean = 0;
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	61bb      	str	r3, [r7, #24]
    // find mean
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e011      	b.n	80015e4 <normalize+0x40>
        mean += (float)samples[i];
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	881b      	ldrh	r3, [r3, #0]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80015d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015da:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	f647 2243 	movw	r2, #31299	@ 0x7a43
 80015ea:	4293      	cmp	r3, r2
 80015ec:	dde8      	ble.n	80015c0 <normalize+0x1c>
    }
    mean /= ADC_BUF_LEN;
 80015ee:	ed97 7a06 	vldr	s14, [r7, #24]
 80015f2:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80016c8 <normalize+0x124>
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	edc7 7a06 	vstr	s15, [r7, #24]
    // find sample variance
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	e01b      	b.n	800163c <normalize+0x98>
        float temp = (float)samples[i]-mean;
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001616:	edd7 7a06 	vldr	s15, [r7, #24]
 800161a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161e:	edc7 7a02 	vstr	s15, [r7, #8]
        var += temp * temp;
 8001622:	edd7 7a02 	vldr	s15, [r7, #8]
 8001626:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800162a:	ed97 7a07 	vldr	s14, [r7, #28]
 800162e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001632:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	3301      	adds	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f647 2243 	movw	r2, #31299	@ 0x7a43
 8001642:	4293      	cmp	r3, r2
 8001644:	ddde      	ble.n	8001604 <normalize+0x60>
    }
    var = var / (ADC_BUF_LEN-1);
 8001646:	ed97 7a07 	vldr	s14, [r7, #28]
 800164a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80016cc <normalize+0x128>
 800164e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001652:	edc7 7a07 	vstr	s15, [r7, #28]
    var = sqrt(var)*25;
 8001656:	edd7 7a07 	vldr	s15, [r7, #28]
 800165a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800165e:	eeb0 0b47 	vmov.f64	d0, d7
 8001662:	f00c f8bd 	bl	800d7e0 <sqrt>
 8001666:	eeb0 7b40 	vmov.f64	d7, d0
 800166a:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 800166e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001672:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001676:	edc7 7a07 	vstr	s15, [r7, #28]

    // normalize
    // divide by 60 arbitrary, just done to get to an ampltiude I used to tune gain values
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e019      	b.n	80016b4 <normalize+0x110>
        norm_samples[i] = (((float)samples[i]) - mean)/var;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001692:	edd7 7a06 	vldr	s15, [r7, #24]
 8001696:	ee77 6a67 	vsub.f32	s13, s14, s15
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80016a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016aa:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	3301      	adds	r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f647 2243 	movw	r2, #31299	@ 0x7a43
 80016ba:	4293      	cmp	r3, r2
 80016bc:	dde0      	ble.n	8001680 <normalize+0xdc>
    }
}
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	3720      	adds	r7, #32
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	46f48800 	.word	0x46f48800
 80016cc:	46f48600 	.word	0x46f48600

080016d0 <timing_recovery>:
float tr_int = 0;
float zc_samp = 0;
float max_integrator_value = 50;
float max_phase_value = 100;

int timing_recovery(float* rrc_samps_in, float* symbs_out, params_r* params) {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	ed2d 8b02 	vpush	{d8}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
		params->TR_phase = remainder(phase, 2*M_PI);
		params->TR_integrator = remainder(integrator, 2*M_PI);

		return bit_len;
	} else if (TIMING_RECOVERY_METHOD == 1) {
		const float Kp = 8.5 / 25.0;
 80016e0:	4ba0      	ldr	r3, [pc, #640]	@ (8001964 <timing_recovery+0x294>)
 80016e2:	617b      	str	r3, [r7, #20]
		const float Ki = 0.1 / 25.0;
 80016e4:	4ba0      	ldr	r3, [pc, #640]	@ (8001968 <timing_recovery+0x298>)
 80016e6:	613b      	str	r3, [r7, #16]
		float error = 0;
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
		int i = 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	623b      	str	r3, [r7, #32]

		params->TR_phase = fmod(params->TR_phase, params->sps);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80016f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	edd3 6a04 	vldr	s13, [r3, #16]
 8001702:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001706:	eeb0 1b46 	vmov.f64	d1, d6
 800170a:	eeb0 0b47 	vmov.f64	d0, d7
 800170e:	f00c f823 	bl	800d758 <fmod>
 8001712:	eeb0 7b40 	vmov.f64	d7, d0
 8001716:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	edc3 7a03 	vstr	s15, [r3, #12]


		int offset = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
		int offset2 = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	61bb      	str	r3, [r7, #24]
		prev_symb = 25 * rrc_samps_in[lrintf(offset*params->sps)];
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	edd3 7a04 	vldr	s15, [r3, #16]
 8001738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	f00c f906 	bl	800d950 <lrintf>
 8001744:	4603      	mov	r3, r0
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4413      	add	r3, r2
 800174c:	edd3 7a00 	vldr	s15, [r3]
 8001750:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001758:	4b84      	ldr	r3, [pc, #528]	@ (800196c <timing_recovery+0x29c>)
 800175a:	edc3 7a00 	vstr	s15, [r3]
		symbs_out[0] = prev_symb;
 800175e:	4b83      	ldr	r3, [pc, #524]	@ (800196c <timing_recovery+0x29c>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	601a      	str	r2, [r3, #0]

		while ((i < SYMBOL_BUFF) && (lrintf((i+offset+offset2)*params->sps + params->TR_phase) < ADC_BUF_LEN)) {
 8001766:	e0d5      	b.n	8001914 <timing_recovery+0x244>
			symb = 25 * rrc_samps_in[lrintf((i+offset)*params->sps + params->TR_phase)];
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	ee07 3a90 	vmov	s15, r3
 8001772:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	edd3 7a04 	vldr	s15, [r3, #16]
 800177c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	edd3 7a03 	vldr	s15, [r3, #12]
 8001786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178a:	eeb0 0a67 	vmov.f32	s0, s15
 800178e:	f00c f8df 	bl	800d950 <lrintf>
 8001792:	4603      	mov	r3, r0
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4413      	add	r3, r2
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80017a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a6:	4b72      	ldr	r3, [pc, #456]	@ (8001970 <timing_recovery+0x2a0>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]

			// Mueller-Muller timing error detector
			error = sign(prev_symb) * symb - sign(symb) * prev_symb;
 80017ac:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <timing_recovery+0x29c>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	eeb0 0a67 	vmov.f32	s0, s15
 80017b6:	f000 f8e9 	bl	800198c <sign>
 80017ba:	ee07 0a90 	vmov	s15, r0
 80017be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001970 <timing_recovery+0x2a0>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80017cc:	4b68      	ldr	r3, [pc, #416]	@ (8001970 <timing_recovery+0x2a0>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	f000 f8d9 	bl	800198c <sign>
 80017da:	ee07 0a90 	vmov	s15, r0
 80017de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e2:	4b62      	ldr	r3, [pc, #392]	@ (800196c <timing_recovery+0x29c>)
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	ee78 7a67 	vsub.f32	s15, s16, s15
 80017f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

			err = error;
 80017f4:	4a5f      	ldr	r2, [pc, #380]	@ (8001974 <timing_recovery+0x2a4>)
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	6013      	str	r3, [r2, #0]

			symbs_out[i] = symb / fabs(symb);
 80017fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001970 <timing_recovery+0x2a0>)
 80017fc:	edd3 6a00 	vldr	s13, [r3]
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <timing_recovery+0x2a0>)
 8001802:	edd3 7a00 	vldr	s15, [r3]
 8001806:	eeb0 7ae7 	vabs.f32	s14, s15
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	4413      	add	r3, r2
 8001812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001816:	edc3 7a00 	vstr	s15, [r3]

			params->TR_phase += Kp * error + Ki * params->TR_integrator;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001820:	edd7 6a05 	vldr	s13, [r7, #20]
 8001824:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001828:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	ed93 6a02 	vldr	s12, [r3, #8]
 8001832:	edd7 7a04 	vldr	s15, [r7, #16]
 8001836:	ee66 7a27 	vmul.f32	s15, s12, s15
 800183a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	edc3 7a03 	vstr	s15, [r3, #12]
			params->TR_integrator += error;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	ed93 7a02 	vldr	s14, [r3, #8]
 800184e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	edc3 7a02 	vstr	s15, [r3, #8]

			if (params->TR_integrator > max_integrator_value) {
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001862:	4b45      	ldr	r3, [pc, #276]	@ (8001978 <timing_recovery+0x2a8>)
 8001864:	edd3 7a00 	vldr	s15, [r3]
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd04      	ble.n	800187c <timing_recovery+0x1ac>
				params->TR_integrator = max_integrator_value;
 8001872:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <timing_recovery+0x2a8>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	e014      	b.n	80018a6 <timing_recovery+0x1d6>
			} else if (params->TR_integrator < -max_integrator_value) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001882:	4b3d      	ldr	r3, [pc, #244]	@ (8001978 <timing_recovery+0x2a8>)
 8001884:	edd3 7a00 	vldr	s15, [r3]
 8001888:	eef1 7a67 	vneg.f32	s15, s15
 800188c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d507      	bpl.n	80018a6 <timing_recovery+0x1d6>
				params->TR_integrator = -max_integrator_value;
 8001896:	4b38      	ldr	r3, [pc, #224]	@ (8001978 <timing_recovery+0x2a8>)
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	eef1 7a67 	vneg.f32	s15, s15
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	edc3 7a02 	vstr	s15, [r3, #8]
			}

			if (params->TR_phase > max_phase_value) {
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80018ac:	4b33      	ldr	r3, [pc, #204]	@ (800197c <timing_recovery+0x2ac>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	dd04      	ble.n	80018c6 <timing_recovery+0x1f6>
				params->TR_phase = max_phase_value;
 80018bc:	4b2f      	ldr	r3, [pc, #188]	@ (800197c <timing_recovery+0x2ac>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	e014      	b.n	80018f0 <timing_recovery+0x220>
			} else if (params->TR_phase < -max_phase_value) {
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80018cc:	4b2b      	ldr	r3, [pc, #172]	@ (800197c <timing_recovery+0x2ac>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	eef1 7a67 	vneg.f32	s15, s15
 80018d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018de:	d507      	bpl.n	80018f0 <timing_recovery+0x220>
				params->TR_phase = -max_phase_value;
 80018e0:	4b26      	ldr	r3, [pc, #152]	@ (800197c <timing_recovery+0x2ac>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	eef1 7a67 	vneg.f32	s15, s15
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	edc3 7a03 	vstr	s15, [r3, #12]
			}

			tr_ph = params->TR_phase;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4a22      	ldr	r2, [pc, #136]	@ (8001980 <timing_recovery+0x2b0>)
 80018f6:	6013      	str	r3, [r2, #0]
			tr_int = params->TR_integrator;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a21      	ldr	r2, [pc, #132]	@ (8001984 <timing_recovery+0x2b4>)
 80018fe:	6013      	str	r3, [r2, #0]

			prev_symb = symb;
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <timing_recovery+0x2a0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <timing_recovery+0x29c>)
 8001906:	6013      	str	r3, [r2, #0]
			i++;
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	3301      	adds	r3, #1
 800190c:	623b      	str	r3, [r7, #32]
			i_fake = i;
 800190e:	4a1e      	ldr	r2, [pc, #120]	@ (8001988 <timing_recovery+0x2b8>)
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	6013      	str	r3, [r2, #0]
		while ((i < SYMBOL_BUFF) && (lrintf((i+offset+offset2)*params->sps + params->TR_phase) < ADC_BUF_LEN)) {
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800191a:	dc1c      	bgt.n	8001956 <timing_recovery+0x286>
 800191c:	6a3a      	ldr	r2, [r7, #32]
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	441a      	add	r2, r3
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	4413      	add	r3, r2
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	edd3 7a04 	vldr	s15, [r3, #16]
 8001934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	edd3 7a03 	vldr	s15, [r3, #12]
 800193e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001942:	eeb0 0a67 	vmov.f32	s0, s15
 8001946:	f00c f803 	bl	800d950 <lrintf>
 800194a:	4603      	mov	r3, r0
 800194c:	f647 2243 	movw	r2, #31299	@ 0x7a43
 8001950:	4293      	cmp	r3, r2
 8001952:	f77f af09 	ble.w	8001768 <timing_recovery+0x98>
		}

		return i;
 8001956:	6a3b      	ldr	r3, [r7, #32]
			i_fake = i;
		}

		return i;
	}
}
 8001958:	4618      	mov	r0, r3
 800195a:	3728      	adds	r7, #40	@ 0x28
 800195c:	46bd      	mov	sp, r7
 800195e:	ecbd 8b02 	vpop	{d8}
 8001962:	bd80      	pop	{r7, pc}
 8001964:	3eae147b 	.word	0x3eae147b
 8001968:	3b83126f 	.word	0x3b83126f
 800196c:	240b8bb0 	.word	0x240b8bb0
 8001970:	240b8bac 	.word	0x240b8bac
 8001974:	240b8bb4 	.word	0x240b8bb4
 8001978:	2400004c 	.word	0x2400004c
 800197c:	24000050 	.word	0x24000050
 8001980:	240b8bbc 	.word	0x240b8bbc
 8001984:	240b8bc0 	.word	0x240b8bc0
 8001988:	240b8bb8 	.word	0x240b8bb8

0800198c <sign>:


int sign(float x) {
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	ed87 0a01 	vstr	s0, [r7, #4]
    if (x > 0) {
 8001996:	edd7 7a01 	vldr	s15, [r7, #4]
 800199a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	dd01      	ble.n	80019a8 <sign+0x1c>
        return 1;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e00a      	b.n	80019be <sign+0x32>
    } else if (x < 0) {
 80019a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80019ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	d502      	bpl.n	80019bc <sign+0x30>
        return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ba:	e000      	b.n	80019be <sign+0x32>
    } else {
        return 0;
 80019bc:	2300      	movs	r3, #0
    }
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b0a      	ldr	r3, [pc, #40]	@ (80019fc <HAL_MspInit+0x30>)
 80019d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80019d8:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_MspInit+0x30>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_MspInit+0x30>)
 80019e4:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	58024400 	.word	0x58024400

08001a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	@ 0x30
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a59      	ldr	r2, [pc, #356]	@ (8001b84 <HAL_ADC_MspInit+0x184>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d16c      	bne.n	8001afc <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001a22:	4b59      	ldr	r3, [pc, #356]	@ (8001b88 <HAL_ADC_MspInit+0x188>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	4a57      	ldr	r2, [pc, #348]	@ (8001b88 <HAL_ADC_MspInit+0x188>)
 8001a2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001a2c:	4b56      	ldr	r3, [pc, #344]	@ (8001b88 <HAL_ADC_MspInit+0x188>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d10e      	bne.n	8001a52 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001a34:	4b55      	ldr	r3, [pc, #340]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001a36:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001a3a:	4a54      	ldr	r2, [pc, #336]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001a3c:	f043 0320 	orr.w	r3, r3, #32
 8001a40:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001a44:	4b51      	ldr	r3, [pc, #324]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001a46:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	61bb      	str	r3, [r7, #24]
 8001a50:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	4b4e      	ldr	r3, [pc, #312]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001a54:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a58:	4a4c      	ldr	r2, [pc, #304]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001a62:	4b4a      	ldr	r3, [pc, #296]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001a64:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a70:	2340      	movs	r3, #64	@ 0x40
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a74:	2303      	movs	r3, #3
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	4619      	mov	r1, r3
 8001a82:	4843      	ldr	r0, [pc, #268]	@ (8001b90 <HAL_ADC_MspInit+0x190>)
 8001a84:	f004 fff0 	bl	8006a68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001a88:	4b42      	ldr	r3, [pc, #264]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001a8a:	4a43      	ldr	r2, [pc, #268]	@ (8001b98 <HAL_ADC_MspInit+0x198>)
 8001a8c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a8e:	4b41      	ldr	r3, [pc, #260]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001a90:	2209      	movs	r2, #9
 8001a92:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a94:	4b3f      	ldr	r3, [pc, #252]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001aa0:	4b3c      	ldr	r3, [pc, #240]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001aa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001aa6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001aaa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001aae:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ab0:	4b38      	ldr	r3, [pc, #224]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001ab2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ab6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ab8:	4b36      	ldr	r3, [pc, #216]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001aba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001abe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001ac0:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001ac2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ac6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac8:	4b32      	ldr	r3, [pc, #200]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ace:	4831      	ldr	r0, [pc, #196]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001ad0:	f002 f8ec 	bl	8003cac <HAL_DMA_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8001ada:	f7ff fd5d 	bl	8001598 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001ae2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b94 <HAL_ADC_MspInit+0x194>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	2012      	movs	r0, #18
 8001af0:	f002 f82f 	bl	8003b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001af4:	2012      	movs	r0, #18
 8001af6:	f002 f846 	bl	8003b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001afa:	e03f      	b.n	8001b7c <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a26      	ldr	r2, [pc, #152]	@ (8001b9c <HAL_ADC_MspInit+0x19c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d13a      	bne.n	8001b7c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <HAL_ADC_MspInit+0x188>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b88 <HAL_ADC_MspInit+0x188>)
 8001b0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001b10:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_ADC_MspInit+0x188>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10e      	bne.n	8001b36 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001b18:	4b1c      	ldr	r3, [pc, #112]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001b1a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001b20:	f043 0320 	orr.w	r3, r3, #32
 8001b24:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001b28:	4b18      	ldr	r3, [pc, #96]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001b2a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b15      	ldr	r3, [pc, #84]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001b38:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b3c:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001b46:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_ADC_MspInit+0x18c>)
 8001b48:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b54:	2340      	movs	r3, #64	@ 0x40
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	4619      	mov	r1, r3
 8001b66:	480a      	ldr	r0, [pc, #40]	@ (8001b90 <HAL_ADC_MspInit+0x190>)
 8001b68:	f004 ff7e 	bl	8006a68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	2012      	movs	r0, #18
 8001b72:	f001 ffee 	bl	8003b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b76:	2012      	movs	r0, #18
 8001b78:	f002 f805 	bl	8003b86 <HAL_NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3730      	adds	r7, #48	@ 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40022000 	.word	0x40022000
 8001b88:	240b8bc4 	.word	0x240b8bc4
 8001b8c:	58024400 	.word	0x58024400
 8001b90:	58020000 	.word	0x58020000
 8001b94:	24000198 	.word	0x24000198
 8001b98:	40020010 	.word	0x40020010
 8001b9c:	40022100 	.word	0x40022100

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb0:	d10e      	bne.n	8001bd0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_TIM_Base_MspInit+0x3c>)
 8001bb4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bb8:	4a08      	ldr	r2, [pc, #32]	@ (8001bdc <HAL_TIM_Base_MspInit+0x3c>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001bc2:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_TIM_Base_MspInit+0x3c>)
 8001bc4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3714      	adds	r7, #20
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	58024400 	.word	0x58024400

08001be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b0ba      	sub	sp, #232	@ 0xe8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	60da      	str	r2, [r3, #12]
 8001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	22c0      	movs	r2, #192	@ 0xc0
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4618      	mov	r0, r3
 8001c02:	f00b fd75 	bl	800d6f0 <memset>
  if(huart->Instance==USART3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb8 <HAL_UART_MspInit+0xd8>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d14e      	bne.n	8001cae <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c10:	f04f 0202 	mov.w	r2, #2
 8001c14:	f04f 0300 	mov.w	r3, #0
 8001c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c22:	f107 0310 	add.w	r3, r7, #16
 8001c26:	4618      	mov	r0, r3
 8001c28:	f006 f97a 	bl	8007f20 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c32:	f7ff fcb1 	bl	8001598 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c36:	4b21      	ldr	r3, [pc, #132]	@ (8001cbc <HAL_UART_MspInit+0xdc>)
 8001c38:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cbc <HAL_UART_MspInit+0xdc>)
 8001c3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c42:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001c46:	4b1d      	ldr	r3, [pc, #116]	@ (8001cbc <HAL_UART_MspInit+0xdc>)
 8001c48:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001c4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c54:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_UART_MspInit+0xdc>)
 8001c56:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c5a:	4a18      	ldr	r2, [pc, #96]	@ (8001cbc <HAL_UART_MspInit+0xdc>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c64:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_UART_MspInit+0xdc>)
 8001c66:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c8c:	2307      	movs	r3, #7
 8001c8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c92:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4809      	ldr	r0, [pc, #36]	@ (8001cc0 <HAL_UART_MspInit+0xe0>)
 8001c9a:	f004 fee5 	bl	8006a68 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	2027      	movs	r0, #39	@ 0x27
 8001ca4:	f001 ff55 	bl	8003b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ca8:	2027      	movs	r0, #39	@ 0x27
 8001caa:	f001 ff6c 	bl	8003b86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cae:	bf00      	nop
 8001cb0:	37e8      	adds	r7, #232	@ 0xe8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40004800 	.word	0x40004800
 8001cbc:	58024400 	.word	0x58024400
 8001cc0:	58020c00 	.word	0x58020c00

08001cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <NMI_Handler+0x4>

08001ccc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <BusFault_Handler+0x4>

08001ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <UsageFault_Handler+0x4>

08001cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d1a:	f000 f939 	bl	8001f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <DMA1_Stream0_IRQHandler+0x10>)
 8001d2a:	f003 fb1b 	bl	8005364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000198 	.word	0x24000198

08001d38 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d3c:	4803      	ldr	r0, [pc, #12]	@ (8001d4c <ADC_IRQHandler+0x14>)
 8001d3e:	f000 fd5d 	bl	80027fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001d42:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <ADC_IRQHandler+0x18>)
 8001d44:	f000 fd5a 	bl	80027fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	240000d0 	.word	0x240000d0
 8001d50:	24000134 	.word	0x24000134

08001d54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d58:	4802      	ldr	r0, [pc, #8]	@ (8001d64 <USART3_IRQHandler+0x10>)
 8001d5a:	f009 f9b1 	bl	800b0c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2400025c 	.word	0x2400025c

08001d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d6c:	4b32      	ldr	r3, [pc, #200]	@ (8001e38 <SystemInit+0xd0>)
 8001d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d72:	4a31      	ldr	r2, [pc, #196]	@ (8001e38 <SystemInit+0xd0>)
 8001d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e3c <SystemInit+0xd4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d807      	bhi.n	8001d98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d88:	4b2c      	ldr	r3, [pc, #176]	@ (8001e3c <SystemInit+0xd4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 030f 	bic.w	r3, r3, #15
 8001d90:	4a2a      	ldr	r2, [pc, #168]	@ (8001e3c <SystemInit+0xd4>)
 8001d92:	f043 0303 	orr.w	r3, r3, #3
 8001d96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d98:	4b29      	ldr	r3, [pc, #164]	@ (8001e40 <SystemInit+0xd8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a28      	ldr	r2, [pc, #160]	@ (8001e40 <SystemInit+0xd8>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <SystemInit+0xd8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001daa:	4b25      	ldr	r3, [pc, #148]	@ (8001e40 <SystemInit+0xd8>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4924      	ldr	r1, [pc, #144]	@ (8001e40 <SystemInit+0xd8>)
 8001db0:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <SystemInit+0xdc>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001db6:	4b21      	ldr	r3, [pc, #132]	@ (8001e3c <SystemInit+0xd4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d007      	beq.n	8001dd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <SystemInit+0xd4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 030f 	bic.w	r3, r3, #15
 8001dca:	4a1c      	ldr	r2, [pc, #112]	@ (8001e3c <SystemInit+0xd4>)
 8001dcc:	f043 0303 	orr.w	r3, r3, #3
 8001dd0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <SystemInit+0xd8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	@ (8001e40 <SystemInit+0xd8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001dde:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <SystemInit+0xd8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001de4:	4b16      	ldr	r3, [pc, #88]	@ (8001e40 <SystemInit+0xd8>)
 8001de6:	4a18      	ldr	r2, [pc, #96]	@ (8001e48 <SystemInit+0xe0>)
 8001de8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dea:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <SystemInit+0xd8>)
 8001dec:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <SystemInit+0xe4>)
 8001dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001df0:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <SystemInit+0xd8>)
 8001df2:	4a17      	ldr	r2, [pc, #92]	@ (8001e50 <SystemInit+0xe8>)
 8001df4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001df6:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <SystemInit+0xd8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001dfc:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <SystemInit+0xd8>)
 8001dfe:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <SystemInit+0xe8>)
 8001e00:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e02:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <SystemInit+0xd8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	@ (8001e40 <SystemInit+0xd8>)
 8001e0a:	4a11      	ldr	r2, [pc, #68]	@ (8001e50 <SystemInit+0xe8>)
 8001e0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <SystemInit+0xd8>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <SystemInit+0xd8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a09      	ldr	r2, [pc, #36]	@ (8001e40 <SystemInit+0xd8>)
 8001e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <SystemInit+0xd8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <SystemInit+0xec>)
 8001e28:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001e2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00
 8001e3c:	52002000 	.word	0x52002000
 8001e40:	58024400 	.word	0x58024400
 8001e44:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e48:	02020200 	.word	0x02020200
 8001e4c:	01ff0000 	.word	0x01ff0000
 8001e50:	01010280 	.word	0x01010280
 8001e54:	52004000 	.word	0x52004000

08001e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e5c:	f7ff ff84 	bl	8001d68 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e62:	490d      	ldr	r1, [pc, #52]	@ (8001e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e64:	4a0d      	ldr	r2, [pc, #52]	@ (8001e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e68:	e002      	b.n	8001e70 <LoopCopyDataInit>

08001e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6e:	3304      	adds	r3, #4

08001e70 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e74:	d3f9      	bcc.n	8001e6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e7c:	e001      	b.n	8001e82 <LoopFillZerobss>

08001e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e80:	3204      	adds	r2, #4

08001e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e84:	d3fb      	bcc.n	8001e7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e86:	f00b fc41 	bl	800d70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e8a:	f7fe fba9 	bl	80005e0 <main>
  bx  lr
 8001e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e90:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e98:	240000b4 	.word	0x240000b4
  ldr r2, =_sidata
 8001e9c:	0800f228 	.word	0x0800f228
  ldr r2, =_sbss
 8001ea0:	240000b4 	.word	0x240000b4
  ldr r4, =_ebss
 8001ea4:	240b8d04 	.word	0x240b8d04

08001ea8 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <BDMA1_IRQHandler>
	...

08001eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	f001 fe42 	bl	8003b3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001eb8:	f005 fe5c 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_Init+0x68>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	4913      	ldr	r1, [pc, #76]	@ (8001f18 <HAL_Init+0x6c>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <HAL_Init+0x68>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	4a0e      	ldr	r2, [pc, #56]	@ (8001f18 <HAL_Init+0x6c>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <HAL_Init+0x70>)
 8001eee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ef0:	4a0b      	ldr	r2, [pc, #44]	@ (8001f20 <HAL_Init+0x74>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef6:	200f      	movs	r0, #15
 8001ef8:	f000 f814 	bl	8001f24 <HAL_InitTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e002      	b.n	8001f0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f06:	f7ff fd61 	bl	80019cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58024400 	.word	0x58024400
 8001f18:	0800efe4 	.word	0x0800efe4
 8001f1c:	24000058 	.word	0x24000058
 8001f20:	24000054 	.word	0x24000054

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f2c:	4b15      	ldr	r3, [pc, #84]	@ (8001f84 <HAL_InitTick+0x60>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e021      	b.n	8001f7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001f38:	4b13      	ldr	r3, [pc, #76]	@ (8001f88 <HAL_InitTick+0x64>)
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_InitTick+0x60>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4619      	mov	r1, r3
 8001f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 fe27 	bl	8003ba2 <HAL_SYSTICK_Config>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e00e      	b.n	8001f7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2b0f      	cmp	r3, #15
 8001f62:	d80a      	bhi.n	8001f7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6c:	f001 fdf1 	bl	8003b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f70:	4a06      	ldr	r2, [pc, #24]	@ (8001f8c <HAL_InitTick+0x68>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	24000060 	.word	0x24000060
 8001f88:	24000054 	.word	0x24000054
 8001f8c:	2400005c 	.word	0x2400005c

08001f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x20>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_IncTick+0x24>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <HAL_IncTick+0x24>)
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	24000060 	.word	0x24000060
 8001fb4:	240b8bc8 	.word	0x240b8bc8

08001fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b03      	ldr	r3, [pc, #12]	@ (8001fcc <HAL_GetTick+0x14>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	240b8bc8 	.word	0x240b8bc8

08001fd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001fd4:	4b03      	ldr	r3, [pc, #12]	@ (8001fe4 <HAL_GetREVID+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	5c001000 	.word	0x5c001000

08001fe8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	609a      	str	r2, [r3, #8]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3360      	adds	r3, #96	@ 0x60
 8002062:	461a      	mov	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	430b      	orrs	r3, r1
 800207e:	431a      	orrs	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002084:	bf00      	nop
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	611a      	str	r2, [r3, #16]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b087      	sub	sp, #28
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	3360      	adds	r3, #96	@ 0x60
 80020d2:	461a      	mov	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	431a      	orrs	r2, r3
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	601a      	str	r2, [r3, #0]
  }
}
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800210c:	2301      	movs	r3, #1
 800210e:	e000      	b.n	8002112 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800211e:	b480      	push	{r7}
 8002120:	b087      	sub	sp, #28
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3330      	adds	r3, #48	@ 0x30
 800212e:	461a      	mov	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	f003 030c 	and.w	r3, r3, #12
 800213a:	4413      	add	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	211f      	movs	r1, #31
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	f003 011f 	and.w	r1, r3, #31
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa01 f303 	lsl.w	r3, r1, r3
 8002164:	431a      	orrs	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800216a:	bf00      	nop
 800216c:	371c      	adds	r7, #28
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002182:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3314      	adds	r3, #20
 80021ac:	461a      	mov	r2, r3
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	0e5b      	lsrs	r3, r3, #25
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	4413      	add	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	0d1b      	lsrs	r3, r3, #20
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	2107      	movs	r1, #7
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43db      	mvns	r3, r3
 80021d0:	401a      	ands	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	0d1b      	lsrs	r3, r3, #20
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	431a      	orrs	r2, r3
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800220c:	43db      	mvns	r3, r3
 800220e:	401a      	ands	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0318 	and.w	r3, r3, #24
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002218:	40d9      	lsrs	r1, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	400b      	ands	r3, r1
 800221e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002222:	431a      	orrs	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	000fffff 	.word	0x000fffff

0800223c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f003 031f 	and.w	r3, r3, #31
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002282:	4013      	ands	r3, r2
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6093      	str	r3, [r2, #8]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	5fffffc0 	.word	0x5fffffc0

08002298 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022ac:	d101      	bne.n	80022b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	6fffffc0 	.word	0x6fffffc0

080022e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022fc:	d101      	bne.n	8002302 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <LL_ADC_Enable+0x24>)
 800231e:	4013      	ands	r3, r2
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	7fffffc0 	.word	0x7fffffc0

08002338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <LL_ADC_IsEnabled+0x18>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_ADC_IsEnabled+0x1a>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <LL_ADC_REG_StartConversion+0x24>)
 800236e:	4013      	ands	r3, r2
 8002370:	f043 0204 	orr.w	r2, r3, #4
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	7fffffc0 	.word	0x7fffffc0

08002388 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b04      	cmp	r3, #4
 800239a:	d101      	bne.n	80023a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800239c:	2301      	movs	r3, #1
 800239e:	e000      	b.n	80023a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d101      	bne.n	80023c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b089      	sub	sp, #36	@ 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e138      	b.n	8002660 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff faff 	bl	8001a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff3f 	bl	8002298 <LL_ADC_IsDeepPowerDownEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff25 	bl	8002274 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff5a 	bl	80022e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d114      	bne.n	8002464 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff3e 	bl	80022c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002444:	4b88      	ldr	r3, [pc, #544]	@ (8002668 <HAL_ADC_Init+0x294>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	4a88      	ldr	r2, [pc, #544]	@ (800266c <HAL_ADC_Init+0x298>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	3301      	adds	r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002456:	e002      	b.n	800245e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3b01      	subs	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff ff3d 	bl	80022e8 <LL_ADC_IsInternalRegulatorEnabled>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10d      	bne.n	8002490 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002478:	f043 0210 	orr.w	r2, r3, #16
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002484:	f043 0201 	orr.w	r2, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff77 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 800249a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 80d2 	bne.w	800264e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f040 80ce 	bne.w	800264e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80024ba:	f043 0202 	orr.w	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff36 	bl	8002338 <LL_ADC_IsEnabled>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d110      	bne.n	80024f4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d2:	4867      	ldr	r0, [pc, #412]	@ (8002670 <HAL_ADC_Init+0x29c>)
 80024d4:	f7ff ff30 	bl	8002338 <LL_ADC_IsEnabled>
 80024d8:	4604      	mov	r4, r0
 80024da:	4866      	ldr	r0, [pc, #408]	@ (8002674 <HAL_ADC_Init+0x2a0>)
 80024dc:	f7ff ff2c 	bl	8002338 <LL_ADC_IsEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4323      	orrs	r3, r4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	4619      	mov	r1, r3
 80024ee:	4862      	ldr	r0, [pc, #392]	@ (8002678 <HAL_ADC_Init+0x2a4>)
 80024f0:	f7ff fd7a 	bl	8001fe8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7d5b      	ldrb	r3, [r3, #21]
 80024f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fe:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002504:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	7f1b      	ldrb	r3, [r3, #28]
 800250a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7f1b      	ldrb	r3, [r3, #28]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d106      	bne.n	8002526 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	3b01      	subs	r3, #1
 800251e:	045b      	lsls	r3, r3, #17
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002532:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	4b4c      	ldr	r3, [pc, #304]	@ (800267c <HAL_ADC_Init+0x2a8>)
 800254a:	4013      	ands	r3, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	69b9      	ldr	r1, [r7, #24]
 8002552:	430b      	orrs	r3, r1
 8002554:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff14 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 8002560:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff21 	bl	80023ae <LL_ADC_INJ_IsConversionOngoing>
 800256c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d14a      	bne.n	800260a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d147      	bne.n	800260a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7d1b      	ldrb	r3, [r3, #20]
 800257e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	4b3c      	ldr	r3, [pc, #240]	@ (8002680 <HAL_ADC_Init+0x2ac>)
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	430b      	orrs	r3, r1
 800259a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d11b      	bne.n	80025de <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	4b34      	ldr	r3, [pc, #208]	@ (8002684 <HAL_ADC_Init+0x2b0>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025ba:	3a01      	subs	r2, #1
 80025bc:	0411      	lsls	r1, r2, #16
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80025c8:	4311      	orrs	r1, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025ce:	430a      	orrs	r2, r1
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	611a      	str	r2, [r3, #16]
 80025dc:	e007      	b.n	80025ee <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 ff21 	bl	800344c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10c      	bne.n	800262c <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002618:	f023 010f 	bic.w	r1, r3, #15
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	1e5a      	subs	r2, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30
 800262a:	e007      	b.n	800263c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 020f 	bic.w	r2, r2, #15
 800263a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002640:	f023 0303 	bic.w	r3, r3, #3
 8002644:	f043 0201 	orr.w	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	655a      	str	r2, [r3, #84]	@ 0x54
 800264c:	e007      	b.n	800265e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002652:	f043 0210 	orr.w	r2, r3, #16
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800265e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3724      	adds	r7, #36	@ 0x24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}
 8002668:	24000054 	.word	0x24000054
 800266c:	053e2d63 	.word	0x053e2d63
 8002670:	40022000 	.word	0x40022000
 8002674:	40022100 	.word	0x40022100
 8002678:	40022300 	.word	0x40022300
 800267c:	fff0c003 	.word	0xfff0c003
 8002680:	ffffbffc 	.word	0xffffbffc
 8002684:	fc00f81e 	.word	0xfc00f81e

08002688 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002690:	4856      	ldr	r0, [pc, #344]	@ (80027ec <HAL_ADC_Start+0x164>)
 8002692:	f7ff fdd3 	bl	800223c <LL_ADC_GetMultimode>
 8002696:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fe73 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 809a 	bne.w	80027de <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_ADC_Start+0x30>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e095      	b.n	80027e4 <HAL_ADC_Start+0x15c>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fdb3 	bl	800322c <ADC_Enable>
 80026c6:	4603      	mov	r3, r0
 80026c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 8081 	bne.w	80027d4 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026d6:	4b46      	ldr	r3, [pc, #280]	@ (80027f0 <HAL_ADC_Start+0x168>)
 80026d8:	4013      	ands	r3, r2
 80026da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a43      	ldr	r2, [pc, #268]	@ (80027f4 <HAL_ADC_Start+0x16c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d002      	beq.n	80026f2 <HAL_ADC_Start+0x6a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	e000      	b.n	80026f4 <HAL_ADC_Start+0x6c>
 80026f2:	4b41      	ldr	r3, [pc, #260]	@ (80027f8 <HAL_ADC_Start+0x170>)
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d002      	beq.n	8002702 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002706:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800271a:	d106      	bne.n	800272a <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002720:	f023 0206 	bic.w	r2, r3, #6
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	659a      	str	r2, [r3, #88]	@ 0x58
 8002728:	e002      	b.n	8002730 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	221c      	movs	r2, #28
 8002736:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a2b      	ldr	r2, [pc, #172]	@ (80027f4 <HAL_ADC_Start+0x16c>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d002      	beq.n	8002750 <HAL_ADC_Start+0xc8>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	e000      	b.n	8002752 <HAL_ADC_Start+0xca>
 8002750:	4b29      	ldr	r3, [pc, #164]	@ (80027f8 <HAL_ADC_Start+0x170>)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	4293      	cmp	r3, r2
 8002758:	d008      	beq.n	800276c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d002      	beq.n	800276c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b09      	cmp	r3, #9
 800276a:	d114      	bne.n	8002796 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002782:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fde6 	bl	8002360 <LL_ADC_REG_StartConversion>
 8002794:	e025      	b.n	80027e2 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800279a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a13      	ldr	r2, [pc, #76]	@ (80027f4 <HAL_ADC_Start+0x16c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d002      	beq.n	80027b2 <HAL_ADC_Start+0x12a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	e000      	b.n	80027b4 <HAL_ADC_Start+0x12c>
 80027b2:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <HAL_ADC_Start+0x170>)
 80027b4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00f      	beq.n	80027e2 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027ca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80027d2:	e006      	b.n	80027e2 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80027dc:	e001      	b.n	80027e2 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027de:	2302      	movs	r3, #2
 80027e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40022300 	.word	0x40022300
 80027f0:	fffff0fe 	.word	0xfffff0fe
 80027f4:	40022100 	.word	0x40022100
 80027f8:	40022000 	.word	0x40022000

080027fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	@ 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002818:	4882      	ldr	r0, [pc, #520]	@ (8002a24 <HAL_ADC_IRQHandler+0x228>)
 800281a:	f7ff fd0f 	bl	800223c <LL_ADC_GetMultimode>
 800281e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d017      	beq.n	800285a <HAL_ADC_IRQHandler+0x5e>
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d012      	beq.n	800285a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f000 ffff 	bl	8003850 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2202      	movs	r2, #2
 8002858:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <HAL_ADC_IRQHandler+0x72>
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8083 	beq.w	8002980 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d07d      	beq.n	8002980 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	f003 0310 	and.w	r3, r3, #16
 800288c:	2b00      	cmp	r3, #0
 800288e:	d105      	bne.n	800289c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002894:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fc29 	bl	80020f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d062      	beq.n	8002972 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002a28 <HAL_ADC_IRQHandler+0x22c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d002      	beq.n	80028bc <HAL_ADC_IRQHandler+0xc0>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	e000      	b.n	80028be <HAL_ADC_IRQHandler+0xc2>
 80028bc:	4b5b      	ldr	r3, [pc, #364]	@ (8002a2c <HAL_ADC_IRQHandler+0x230>)
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d008      	beq.n	80028d8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d005      	beq.n	80028d8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d002      	beq.n	80028d8 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	d104      	bne.n	80028e2 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	623b      	str	r3, [r7, #32]
 80028e0:	e00c      	b.n	80028fc <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a50      	ldr	r2, [pc, #320]	@ (8002a28 <HAL_ADC_IRQHandler+0x22c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d002      	beq.n	80028f2 <HAL_ADC_IRQHandler+0xf6>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	e000      	b.n	80028f4 <HAL_ADC_IRQHandler+0xf8>
 80028f2:	4b4e      	ldr	r3, [pc, #312]	@ (8002a2c <HAL_ADC_IRQHandler+0x230>)
 80028f4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d135      	bne.n	8002972 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b08      	cmp	r3, #8
 8002912:	d12e      	bne.n	8002972 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fd35 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d11a      	bne.n	800295a <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 020c 	bic.w	r2, r2, #12
 8002932:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d112      	bne.n	8002972 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	655a      	str	r2, [r3, #84]	@ 0x54
 8002958:	e00b      	b.n	8002972 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800295e:	f043 0210 	orr.w	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7fe fad6 	bl	8000f24 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	220c      	movs	r2, #12
 800297e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_ADC_IRQHandler+0x198>
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 809f 	beq.w	8002ade <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8099 	beq.w	8002ade <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fbd4 	bl	8002176 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80029ce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff fb8f 	bl	80020f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029da:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a11      	ldr	r2, [pc, #68]	@ (8002a28 <HAL_ADC_IRQHandler+0x22c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d002      	beq.n	80029ec <HAL_ADC_IRQHandler+0x1f0>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e000      	b.n	80029ee <HAL_ADC_IRQHandler+0x1f2>
 80029ec:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <HAL_ADC_IRQHandler+0x230>)
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d008      	beq.n	8002a08 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	2b06      	cmp	r3, #6
 8002a00:	d002      	beq.n	8002a08 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	2b07      	cmp	r3, #7
 8002a06:	d104      	bne.n	8002a12 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	e013      	b.n	8002a3a <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a04      	ldr	r2, [pc, #16]	@ (8002a28 <HAL_ADC_IRQHandler+0x22c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_ADC_IRQHandler+0x234>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	e007      	b.n	8002a32 <HAL_ADC_IRQHandler+0x236>
 8002a22:	bf00      	nop
 8002a24:	40022300 	.word	0x40022300
 8002a28:	40022100 	.word	0x40022100
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	4b7d      	ldr	r3, [pc, #500]	@ (8002c28 <HAL_ADC_IRQHandler+0x42c>)
 8002a32:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d047      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_ADC_IRQHandler+0x25e>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d03f      	beq.n	8002ad0 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d13a      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a64:	2b40      	cmp	r3, #64	@ 0x40
 8002a66:	d133      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d12e      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fc99 	bl	80023ae <LL_ADC_INJ_IsConversionOngoing>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d11a      	bne.n	8002ab8 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a90:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d112      	bne.n	8002ad0 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	655a      	str	r2, [r3, #84]	@ 0x54
 8002ab6:	e00b      	b.n	8002ad0 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abc:	f043 0210 	orr.w	r2, r3, #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac8:	f043 0201 	orr.w	r2, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fe95 	bl	8003800 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2260      	movs	r2, #96	@ 0x60
 8002adc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d011      	beq.n	8002b0c <HAL_ADC_IRQHandler+0x310>
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00c      	beq.n	8002b0c <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f896 	bl	8002c30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2280      	movs	r2, #128	@ 0x80
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d012      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x340>
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00d      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fe7b 	bl	8003828 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b3a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d012      	beq.n	8002b6c <HAL_ADC_IRQHandler+0x370>
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b54:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fe6d 	bl	800383c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0310 	and.w	r3, r3, #16
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d036      	beq.n	8002be4 <HAL_ADC_IRQHandler+0x3e8>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d031      	beq.n	8002be4 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8c:	e014      	b.n	8002bb8 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b94:	4825      	ldr	r0, [pc, #148]	@ (8002c2c <HAL_ADC_IRQHandler+0x430>)
 8002b96:	f7ff fb5f 	bl	8002258 <LL_ADC_GetMultiDMATransfer>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba4:	e008      	b.n	8002bb8 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10e      	bne.n	8002bdc <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bce:	f043 0202 	orr.w	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f834 	bl	8002c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2210      	movs	r2, #16
 8002be2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x424>
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d013      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c08:	f043 0208 	orr.w	r2, r3, #8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c18:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 fdfa 	bl	8003814 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002c20:	bf00      	nop
 8002c22:	3728      	adds	r7, #40	@ 0x28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40022000 	.word	0x40022000
 8002c2c:	40022300 	.word	0x40022300

08002c30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b0a1      	sub	sp, #132	@ 0x84
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4a95      	ldr	r2, [pc, #596]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x270>)
 8002c72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x2a>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e2c0      	b.n	8003204 <HAL_ADC_ConfigChannel+0x5ac>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fb7a 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 82a5 	bne.w	80031e6 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db2c      	blt.n	8002cfe <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x6a>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2201      	movs	r2, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	e016      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x98>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cd2:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002cda:	2320      	movs	r3, #32
 8002cdc:	e003      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2201      	movs	r2, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	69d1      	ldr	r1, [r2, #28]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f7ff fa07 	bl	800211e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fb37 	bl	8002388 <LL_ADC_REG_IsConversionOngoing>
 8002d1a:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fb44 	bl	80023ae <LL_ADC_INJ_IsConversionOngoing>
 8002d26:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80a0 	bne.w	8002e70 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 809c 	bne.w	8002e70 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f7ff fa29 	bl	800219c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x118>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	e00a      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x12e>
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d027      	beq.n	8002de0 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	6919      	ldr	r1, [r3, #16]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d9e:	f7ff f957 	bl	8002050 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6919      	ldr	r1, [r3, #16]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	7e5b      	ldrb	r3, [r3, #25]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d102      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x160>
 8002db2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002db6:	e000      	b.n	8002dba <HAL_ADC_ConfigChannel+0x162>
 8002db8:	2300      	movs	r3, #0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	f7ff f981 	bl	80020c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6919      	ldr	r1, [r3, #16]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	7e1b      	ldrb	r3, [r3, #24]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d102      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x17e>
 8002dd0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002dd4:	e000      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x180>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	f7ff f959 	bl	8002090 <LL_ADC_SetDataRightShift>
 8002dde:	e047      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	069b      	lsls	r3, r3, #26
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d107      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e02:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	069b      	lsls	r3, r3, #26
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e26:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	069b      	lsls	r3, r3, #26
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d107      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e4a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e52:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	069b      	lsls	r3, r3, #26
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d107      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fa5f 	bl	8002338 <LL_ADC_IsEnabled>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f040 81bb 	bne.w	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6819      	ldr	r1, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f7ff f9b0 	bl	80021f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x270>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	f040 8130 	bne.w	8003100 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x274>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2b09      	cmp	r3, #9
 8002ebe:	bf94      	ite	ls
 8002ec0:	2301      	movls	r3, #1
 8002ec2:	2300      	movhi	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	e01b      	b.n	8002f00 <HAL_ADC_ConfigChannel+0x2a8>
 8002ec8:	47ff0000 	.word	0x47ff0000
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002edc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002ede:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e003      	b.n	8002ef0 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002eea:	fab3 f383 	clz	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2b09      	cmp	r3, #9
 8002ef8:	bf94      	ite	ls
 8002efa:	2301      	movls	r3, #1
 8002efc:	2300      	movhi	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d079      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d107      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x2c8>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0e9b      	lsrs	r3, r3, #26
 8002f16:	3301      	adds	r3, #1
 8002f18:	069b      	lsls	r3, r3, #26
 8002f1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f1e:	e015      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x2f4>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e003      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002f3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f3e:	fab3 f383 	clz	r3, r3
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	3301      	adds	r3, #1
 8002f46:	069b      	lsls	r3, r3, #26
 8002f48:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x314>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	0e9b      	lsrs	r3, r3, #26
 8002f5e:	3301      	adds	r3, #1
 8002f60:	f003 031f 	and.w	r3, r3, #31
 8002f64:	2101      	movs	r1, #1
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	e017      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x344>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f7c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002f84:	2320      	movs	r3, #32
 8002f86:	e003      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	f003 031f 	and.w	r3, r3, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9c:	ea42 0103 	orr.w	r1, r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x36a>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f003 021f 	and.w	r2, r3, #31
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	051b      	lsls	r3, r3, #20
 8002fc0:	e018      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x39c>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	e003      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	e07e      	b.n	80030f6 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003000:	2b00      	cmp	r3, #0
 8003002:	d107      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x3bc>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	3301      	adds	r3, #1
 800300c:	069b      	lsls	r3, r3, #26
 800300e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003012:	e015      	b.n	8003040 <HAL_ADC_ConfigChannel+0x3e8>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301c:	fa93 f3a3 	rbit	r3, r3
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 800302c:	2320      	movs	r3, #32
 800302e:	e003      	b.n	8003038 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8003030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003032:	fab3 f383 	clz	r3, r3
 8003036:	b2db      	uxtb	r3, r3
 8003038:	3301      	adds	r3, #1
 800303a:	069b      	lsls	r3, r3, #26
 800303c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003048:	2b00      	cmp	r3, #0
 800304a:	d109      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x408>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	3301      	adds	r3, #1
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2101      	movs	r1, #1
 800305a:	fa01 f303 	lsl.w	r3, r1, r3
 800305e:	e017      	b.n	8003090 <HAL_ADC_ConfigChannel+0x438>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa93 f3a3 	rbit	r3, r3
 800306c:	61bb      	str	r3, [r7, #24]
  return result;
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8003078:	2320      	movs	r3, #32
 800307a:	e003      	b.n	8003084 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	fab3 f383 	clz	r3, r3
 8003082:	b2db      	uxtb	r3, r3
 8003084:	3301      	adds	r3, #1
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	ea42 0103 	orr.w	r1, r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x464>
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	3b1e      	subs	r3, #30
 80030b4:	051b      	lsls	r3, r3, #20
 80030b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	e01b      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x49c>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	60fb      	str	r3, [r7, #12]
  return result;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80030d4:	2320      	movs	r3, #32
 80030d6:	e003      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	f003 021f 	and.w	r2, r3, #31
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	3b1e      	subs	r3, #30
 80030ee:	051b      	lsls	r3, r3, #20
 80030f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030f4:	430b      	orrs	r3, r1
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7ff f84e 	bl	800219c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	da77      	bge.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003108:	4840      	ldr	r0, [pc, #256]	@ (800320c <HAL_ADC_ConfigChannel+0x5b4>)
 800310a:	f7fe ff93 	bl	8002034 <LL_ADC_GetCommonPathInternalCh>
 800310e:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003110:	483f      	ldr	r0, [pc, #252]	@ (8003210 <HAL_ADC_ConfigChannel+0x5b8>)
 8003112:	f7ff f911 	bl	8002338 <LL_ADC_IsEnabled>
 8003116:	4604      	mov	r4, r0
 8003118:	483e      	ldr	r0, [pc, #248]	@ (8003214 <HAL_ADC_ConfigChannel+0x5bc>)
 800311a:	f7ff f90d 	bl	8002338 <LL_ADC_IsEnabled>
 800311e:	4603      	mov	r3, r0
 8003120:	4323      	orrs	r3, r4
 8003122:	2b00      	cmp	r3, #0
 8003124:	d155      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a3b      	ldr	r2, [pc, #236]	@ (8003218 <HAL_ADC_ConfigChannel+0x5c0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d122      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x51e>
 8003130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11d      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a35      	ldr	r2, [pc, #212]	@ (8003214 <HAL_ADC_ConfigChannel+0x5bc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d159      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003144:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003146:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800314a:	4619      	mov	r1, r3
 800314c:	482f      	ldr	r0, [pc, #188]	@ (800320c <HAL_ADC_ConfigChannel+0x5b4>)
 800314e:	f7fe ff5e 	bl	800200e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003152:	4b32      	ldr	r3, [pc, #200]	@ (800321c <HAL_ADC_ConfigChannel+0x5c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	4a31      	ldr	r2, [pc, #196]	@ (8003220 <HAL_ADC_ConfigChannel+0x5c8>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	099b      	lsrs	r3, r3, #6
 8003160:	3301      	adds	r3, #1
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003166:	e002      	b.n	800316e <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	3b01      	subs	r3, #1
 800316c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f9      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003174:	e040      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2a      	ldr	r2, [pc, #168]	@ (8003224 <HAL_ADC_ConfigChannel+0x5cc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d111      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x54c>
 8003180:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003182:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a21      	ldr	r2, [pc, #132]	@ (8003214 <HAL_ADC_ConfigChannel+0x5bc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d131      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003196:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800319a:	4619      	mov	r1, r3
 800319c:	481b      	ldr	r0, [pc, #108]	@ (800320c <HAL_ADC_ConfigChannel+0x5b4>)
 800319e:	f7fe ff36 	bl	800200e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031a2:	e029      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003228 <HAL_ADC_ConfigChannel+0x5d0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d124      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
 80031ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d11f      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <HAL_ADC_ConfigChannel+0x5bc>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d11a      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80031c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80031c8:	4619      	mov	r1, r3
 80031ca:	4810      	ldr	r0, [pc, #64]	@ (800320c <HAL_ADC_ConfigChannel+0x5b4>)
 80031cc:	f7fe ff1f 	bl	800200e <LL_ADC_SetCommonPathInternalCh>
 80031d0:	e012      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80031e4:	e008      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003200:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003204:	4618      	mov	r0, r3
 8003206:	3784      	adds	r7, #132	@ 0x84
 8003208:	46bd      	mov	sp, r7
 800320a:	bd90      	pop	{r4, r7, pc}
 800320c:	40022300 	.word	0x40022300
 8003210:	40022000 	.word	0x40022000
 8003214:	40022100 	.word	0x40022100
 8003218:	cb840000 	.word	0xcb840000
 800321c:	24000054 	.word	0x24000054
 8003220:	053e2d63 	.word	0x053e2d63
 8003224:	bac04000 	.word	0xbac04000
 8003228:	cfb80000 	.word	0xcfb80000

0800322c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff f87d 	bl	8002338 <LL_ADC_IsEnabled>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d161      	bne.n	8003308 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	4b32      	ldr	r3, [pc, #200]	@ (8003314 <ADC_Enable+0xe8>)
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00d      	beq.n	800326e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e04d      	b.n	800330a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff f84c 	bl	8002310 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003278:	f7fe fe9e 	bl	8001fb8 <HAL_GetTick>
 800327c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800327e:	4826      	ldr	r0, [pc, #152]	@ (8003318 <ADC_Enable+0xec>)
 8003280:	f7fe ffdc 	bl	800223c <LL_ADC_GetMultimode>
 8003284:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a24      	ldr	r2, [pc, #144]	@ (800331c <ADC_Enable+0xf0>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d002      	beq.n	8003296 <ADC_Enable+0x6a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	e000      	b.n	8003298 <ADC_Enable+0x6c>
 8003296:	4b22      	ldr	r3, [pc, #136]	@ (8003320 <ADC_Enable+0xf4>)
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	4293      	cmp	r3, r2
 800329e:	d02c      	beq.n	80032fa <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d130      	bne.n	8003308 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032a6:	e028      	b.n	80032fa <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff f843 	bl	8002338 <LL_ADC_IsEnabled>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d104      	bne.n	80032c2 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff f827 	bl	8002310 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032c2:	f7fe fe79 	bl	8001fb8 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d914      	bls.n	80032fa <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d00d      	beq.n	80032fa <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e2:	f043 0210 	orr.w	r2, r3, #16
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e007      	b.n	800330a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b01      	cmp	r3, #1
 8003306:	d1cf      	bne.n	80032a8 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	8000003f 	.word	0x8000003f
 8003318:	40022300 	.word	0x40022300
 800331c:	40022100 	.word	0x40022100
 8003320:	40022000 	.word	0x40022000

08003324 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003336:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800333a:	2b00      	cmp	r3, #0
 800333c:	d14b      	bne.n	80033d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003342:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	2b00      	cmp	r3, #0
 8003356:	d021      	beq.n	800339c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe fecb 	bl	80020f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d032      	beq.n	80033ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d12b      	bne.n	80033ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d11f      	bne.n	80033ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003392:	f043 0201 	orr.w	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	655a      	str	r2, [r3, #84]	@ 0x54
 800339a:	e018      	b.n	80033ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d111      	bne.n	80033ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	f043 0201 	orr.w	r2, r3, #1
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7fd fda8 	bl	8000f24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033d4:	e00e      	b.n	80033f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f7ff fc2e 	bl	8002c44 <HAL_ADC_ErrorCallback>
}
 80033e8:	e004      	b.n	80033f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	4798      	blx	r3
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003408:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f7fd fd38 	bl	8000e80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003436:	f043 0204 	orr.w	r2, r3, #4
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f7ff fc00 	bl	8002c44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003454:	4b60      	ldr	r3, [pc, #384]	@ (80035d8 <ADC_ConfigureBoostMode+0x18c>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01c      	beq.n	800349a <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003460:	f004 fd02 	bl	8007e68 <HAL_RCC_GetHCLKFreq>
 8003464:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800346e:	d010      	beq.n	8003492 <ADC_ConfigureBoostMode+0x46>
 8003470:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003474:	d873      	bhi.n	800355e <ADC_ConfigureBoostMode+0x112>
 8003476:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347a:	d002      	beq.n	8003482 <ADC_ConfigureBoostMode+0x36>
 800347c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003480:	d16d      	bne.n	800355e <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	0c1b      	lsrs	r3, r3, #16
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	60fb      	str	r3, [r7, #12]
        break;
 8003490:	e068      	b.n	8003564 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	089b      	lsrs	r3, r3, #2
 8003496:	60fb      	str	r3, [r7, #12]
        break;
 8003498:	e064      	b.n	8003564 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800349a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	f005 fefb 	bl	800929c <HAL_RCCEx_GetPeriphCLKFreq>
 80034a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80034b0:	d051      	beq.n	8003556 <ADC_ConfigureBoostMode+0x10a>
 80034b2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80034b6:	d854      	bhi.n	8003562 <ADC_ConfigureBoostMode+0x116>
 80034b8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80034bc:	d047      	beq.n	800354e <ADC_ConfigureBoostMode+0x102>
 80034be:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80034c2:	d84e      	bhi.n	8003562 <ADC_ConfigureBoostMode+0x116>
 80034c4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80034c8:	d03d      	beq.n	8003546 <ADC_ConfigureBoostMode+0xfa>
 80034ca:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80034ce:	d848      	bhi.n	8003562 <ADC_ConfigureBoostMode+0x116>
 80034d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034d4:	d033      	beq.n	800353e <ADC_ConfigureBoostMode+0xf2>
 80034d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034da:	d842      	bhi.n	8003562 <ADC_ConfigureBoostMode+0x116>
 80034dc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80034e0:	d029      	beq.n	8003536 <ADC_ConfigureBoostMode+0xea>
 80034e2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80034e6:	d83c      	bhi.n	8003562 <ADC_ConfigureBoostMode+0x116>
 80034e8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80034ec:	d01a      	beq.n	8003524 <ADC_ConfigureBoostMode+0xd8>
 80034ee:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80034f2:	d836      	bhi.n	8003562 <ADC_ConfigureBoostMode+0x116>
 80034f4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034f8:	d014      	beq.n	8003524 <ADC_ConfigureBoostMode+0xd8>
 80034fa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80034fe:	d830      	bhi.n	8003562 <ADC_ConfigureBoostMode+0x116>
 8003500:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003504:	d00e      	beq.n	8003524 <ADC_ConfigureBoostMode+0xd8>
 8003506:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800350a:	d82a      	bhi.n	8003562 <ADC_ConfigureBoostMode+0x116>
 800350c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003510:	d008      	beq.n	8003524 <ADC_ConfigureBoostMode+0xd8>
 8003512:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003516:	d824      	bhi.n	8003562 <ADC_ConfigureBoostMode+0x116>
 8003518:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800351c:	d002      	beq.n	8003524 <ADC_ConfigureBoostMode+0xd8>
 800351e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003522:	d11e      	bne.n	8003562 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c9b      	lsrs	r3, r3, #18
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	60fb      	str	r3, [r7, #12]
        break;
 8003534:	e016      	b.n	8003564 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	60fb      	str	r3, [r7, #12]
        break;
 800353c:	e012      	b.n	8003564 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	60fb      	str	r3, [r7, #12]
        break;
 8003544:	e00e      	b.n	8003564 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	099b      	lsrs	r3, r3, #6
 800354a:	60fb      	str	r3, [r7, #12]
        break;
 800354c:	e00a      	b.n	8003564 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	09db      	lsrs	r3, r3, #7
 8003552:	60fb      	str	r3, [r7, #12]
        break;
 8003554:	e006      	b.n	8003564 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	60fb      	str	r3, [r7, #12]
        break;
 800355c:	e002      	b.n	8003564 <ADC_ConfigureBoostMode+0x118>
        break;
 800355e:	bf00      	nop
 8003560:	e000      	b.n	8003564 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003562:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <ADC_ConfigureBoostMode+0x190>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d808      	bhi.n	8003584 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003580:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003582:	e025      	b.n	80035d0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4a16      	ldr	r2, [pc, #88]	@ (80035e0 <ADC_ConfigureBoostMode+0x194>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d80a      	bhi.n	80035a2 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800359e:	609a      	str	r2, [r3, #8]
}
 80035a0:	e016      	b.n	80035d0 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4a0f      	ldr	r2, [pc, #60]	@ (80035e4 <ADC_ConfigureBoostMode+0x198>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d80a      	bhi.n	80035c0 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035bc:	609a      	str	r2, [r3, #8]
}
 80035be:	e007      	b.n	80035d0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40022300 	.word	0x40022300
 80035dc:	005f5e10 	.word	0x005f5e10
 80035e0:	00bebc20 	.word	0x00bebc20
 80035e4:	017d7840 	.word	0x017d7840

080035e8 <LL_ADC_IsEnabled>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <LL_ADC_IsEnabled+0x18>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <LL_ADC_IsEnabled+0x1a>
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
	...

08003610 <LL_ADC_REG_StartConversion>:
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <LL_ADC_REG_StartConversion+0x24>)
 800361e:	4013      	ands	r3, r2
 8003620:	f043 0204 	orr.w	r2, r3, #4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	7fffffc0 	.word	0x7fffffc0

08003638 <LL_ADC_REG_IsConversionOngoing>:
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b04      	cmp	r3, #4
 800364a:	d101      	bne.n	8003650 <LL_ADC_REG_IsConversionOngoing+0x18>
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0a0      	sub	sp, #128	@ 0x80
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ffe1 	bl	8003638 <LL_ADC_REG_IsConversionOngoing>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
 800367e:	e0ad      	b.n	80037dc <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003686:	2b01      	cmp	r3, #1
 8003688:	d101      	bne.n	800368e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800368a:	2302      	movs	r3, #2
 800368c:	e0a6      	b.n	80037dc <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a52      	ldr	r2, [pc, #328]	@ (80037e4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d002      	beq.n	80036a6 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	e000      	b.n	80036a8 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 80036a6:	4b50      	ldr	r3, [pc, #320]	@ (80037e8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d006      	beq.n	80036be <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f7ff fdbb 	bl	800322c <ADC_Enable>
 80036b6:	4603      	mov	r3, r0
 80036b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80036bc:	e02e      	b.n	800371c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80036be:	2300      	movs	r3, #0
 80036c0:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a47      	ldr	r2, [pc, #284]	@ (80037e8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d102      	bne.n	80036d6 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 80036d0:	4b44      	ldr	r3, [pc, #272]	@ (80037e4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e001      	b.n	80036da <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e4:	f043 0220 	orr.w	r2, r3, #32
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e071      	b.n	80037dc <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff fd97 	bl	800322c <ADC_Enable>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 8003704:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 800370c:	f107 0314 	add.w	r3, r7, #20
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fd8b 	bl	800322c <ADC_Enable>
 8003716:	4603      	mov	r3, r0
 8003718:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 800371c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003720:	2b00      	cmp	r3, #0
 8003722:	d155      	bne.n	80037d0 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003728:	4b30      	ldr	r3, [pc, #192]	@ (80037ec <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 800372a:	4013      	ands	r3, r2
 800372c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	4a2c      	ldr	r2, [pc, #176]	@ (80037f0 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8003740:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003746:	4a2b      	ldr	r2, [pc, #172]	@ (80037f4 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8003748:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800374e:	4a2a      	ldr	r2, [pc, #168]	@ (80037f8 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 8003750:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	221c      	movs	r2, #28
 8003758:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0210 	orr.w	r2, r2, #16
 8003770:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1b      	ldr	r2, [pc, #108]	@ (80037e4 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d002      	beq.n	8003782 <HAL_ADCEx_MultiModeStart_DMA+0x122>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	e000      	b.n	8003784 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 8003782:	4b19      	ldr	r3, [pc, #100]	@ (80037e8 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	4293      	cmp	r3, r2
 800378a:	d00d      	beq.n	80037a8 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3340      	adds	r3, #64	@ 0x40
 8003796:	4619      	mov	r1, r3
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f000 fe14 	bl	80043c8 <HAL_DMA_Start_IT>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80037a6:	e017      	b.n	80037d8 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037a8:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 80037aa:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80037b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037b2:	330c      	adds	r3, #12
 80037b4:	4619      	mov	r1, r3
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f000 fe05 	bl	80043c8 <HAL_DMA_Start_IT>
 80037be:	4603      	mov	r3, r0
 80037c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff21 	bl	8003610 <LL_ADC_REG_StartConversion>
 80037ce:	e003      	b.n	80037d8 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 80037d8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3780      	adds	r7, #128	@ 0x80
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40022100 	.word	0x40022100
 80037e8:	40022000 	.word	0x40022000
 80037ec:	fffff0fe 	.word	0xfffff0fe
 80037f0:	08003325 	.word	0x08003325
 80037f4:	080033fd 	.word	0x080033fd
 80037f8:	08003419 	.word	0x08003419
 80037fc:	40022300 	.word	0x40022300

08003800 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b09f      	sub	sp, #124	@ 0x7c
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800387a:	2b01      	cmp	r3, #1
 800387c:	d101      	bne.n	8003882 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800387e:	2302      	movs	r3, #2
 8003880:	e080      	b.n	8003984 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800388e:	2300      	movs	r3, #0
 8003890:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a3d      	ldr	r2, [pc, #244]	@ (800398c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d102      	bne.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800389c:	4b3c      	ldr	r3, [pc, #240]	@ (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	e001      	b.n	80038a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80038a2:	2300      	movs	r3, #0
 80038a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e05f      	b.n	8003984 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff feb6 	bl	8003638 <LL_ADC_REG_IsConversionOngoing>
 80038cc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff feb0 	bl	8003638 <LL_ADC_REG_IsConversionOngoing>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d141      	bne.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d13e      	bne.n	8003962 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038e4:	4b2b      	ldr	r3, [pc, #172]	@ (8003994 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 80038e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80038f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	431a      	orrs	r2, r3
 80038fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003900:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003902:	4822      	ldr	r0, [pc, #136]	@ (800398c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003904:	f7ff fe70 	bl	80035e8 <LL_ADC_IsEnabled>
 8003908:	4604      	mov	r4, r0
 800390a:	4821      	ldr	r0, [pc, #132]	@ (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800390c:	f7ff fe6c 	bl	80035e8 <LL_ADC_IsEnabled>
 8003910:	4603      	mov	r3, r0
 8003912:	4323      	orrs	r3, r4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d12e      	bne.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003918:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800391e:	4013      	ands	r3, r2
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	6811      	ldr	r1, [r2, #0]
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	6892      	ldr	r2, [r2, #8]
 8003928:	430a      	orrs	r2, r1
 800392a:	431a      	orrs	r2, r3
 800392c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800392e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003930:	e021      	b.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003932:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800393a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800393c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800393e:	4813      	ldr	r0, [pc, #76]	@ (800398c <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003940:	f7ff fe52 	bl	80035e8 <LL_ADC_IsEnabled>
 8003944:	4604      	mov	r4, r0
 8003946:	4812      	ldr	r0, [pc, #72]	@ (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003948:	f7ff fe4e 	bl	80035e8 <LL_ADC_IsEnabled>
 800394c:	4603      	mov	r3, r0
 800394e:	4323      	orrs	r3, r4
 8003950:	2b00      	cmp	r3, #0
 8003952:	d110      	bne.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	4b0f      	ldr	r3, [pc, #60]	@ (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 800395a:	4013      	ands	r3, r2
 800395c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800395e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003960:	e009      	b.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003974:	e000      	b.n	8003978 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003976:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003980:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003984:	4618      	mov	r0, r3
 8003986:	377c      	adds	r7, #124	@ 0x7c
 8003988:	46bd      	mov	sp, r7
 800398a:	bd90      	pop	{r4, r7, pc}
 800398c:	40022000 	.word	0x40022000
 8003990:	40022100 	.word	0x40022100
 8003994:	40022300 	.word	0x40022300
 8003998:	fffff0e0 	.word	0xfffff0e0

0800399c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039ac:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <__NVIC_SetPriorityGrouping+0x40>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80039b8:	4013      	ands	r3, r2
 80039ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <__NVIC_SetPriorityGrouping+0x44>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039ca:	4a04      	ldr	r2, [pc, #16]	@ (80039dc <__NVIC_SetPriorityGrouping+0x40>)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	60d3      	str	r3, [r2, #12]
}
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000ed00 	.word	0xe000ed00
 80039e0:	05fa0000 	.word	0x05fa0000

080039e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e8:	4b04      	ldr	r3, [pc, #16]	@ (80039fc <__NVIC_GetPriorityGrouping+0x18>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	0a1b      	lsrs	r3, r3, #8
 80039ee:	f003 0307 	and.w	r3, r3, #7
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	db0b      	blt.n	8003a2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	f003 021f 	and.w	r2, r3, #31
 8003a18:	4907      	ldr	r1, [pc, #28]	@ (8003a38 <__NVIC_EnableIRQ+0x38>)
 8003a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	2001      	movs	r0, #1
 8003a22:	fa00 f202 	lsl.w	r2, r0, r2
 8003a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000e100 	.word	0xe000e100

08003a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	6039      	str	r1, [r7, #0]
 8003a46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	db0a      	blt.n	8003a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	490c      	ldr	r1, [pc, #48]	@ (8003a88 <__NVIC_SetPriority+0x4c>)
 8003a56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a5a:	0112      	lsls	r2, r2, #4
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a64:	e00a      	b.n	8003a7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	4908      	ldr	r1, [pc, #32]	@ (8003a8c <__NVIC_SetPriority+0x50>)
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	3b04      	subs	r3, #4
 8003a74:	0112      	lsls	r2, r2, #4
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	440b      	add	r3, r1
 8003a7a:	761a      	strb	r2, [r3, #24]
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000e100 	.word	0xe000e100
 8003a8c:	e000ed00 	.word	0xe000ed00

08003a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b089      	sub	sp, #36	@ 0x24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f1c3 0307 	rsb	r3, r3, #7
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	bf28      	it	cs
 8003aae:	2304      	movcs	r3, #4
 8003ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d902      	bls.n	8003ac0 <NVIC_EncodePriority+0x30>
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3b03      	subs	r3, #3
 8003abe:	e000      	b.n	8003ac2 <NVIC_EncodePriority+0x32>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	43d9      	mvns	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae8:	4313      	orrs	r3, r2
         );
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3724      	adds	r7, #36	@ 0x24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b08:	d301      	bcc.n	8003b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e00f      	b.n	8003b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b38 <SysTick_Config+0x40>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b16:	210f      	movs	r1, #15
 8003b18:	f04f 30ff 	mov.w	r0, #4294967295
 8003b1c:	f7ff ff8e 	bl	8003a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <SysTick_Config+0x40>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b26:	4b04      	ldr	r3, [pc, #16]	@ (8003b38 <SysTick_Config+0x40>)
 8003b28:	2207      	movs	r2, #7
 8003b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	e000e010 	.word	0xe000e010

08003b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff29 	bl	800399c <__NVIC_SetPriorityGrouping>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b086      	sub	sp, #24
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	4603      	mov	r3, r0
 8003b5a:	60b9      	str	r1, [r7, #8]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b60:	f7ff ff40 	bl	80039e4 <__NVIC_GetPriorityGrouping>
 8003b64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	6978      	ldr	r0, [r7, #20]
 8003b6c:	f7ff ff90 	bl	8003a90 <NVIC_EncodePriority>
 8003b70:	4602      	mov	r2, r0
 8003b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b76:	4611      	mov	r1, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff ff5f 	bl	8003a3c <__NVIC_SetPriority>
}
 8003b7e:	bf00      	nop
 8003b80:	3718      	adds	r7, #24
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7ff ff33 	bl	8003a00 <__NVIC_EnableIRQ>
}
 8003b9a:	bf00      	nop
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7ff ffa4 	bl	8003af8 <SysTick_Config>
 8003bb0:	4603      	mov	r3, r0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003bc0:	f3bf 8f5f 	dmb	sy
}
 8003bc4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003bc6:	4b07      	ldr	r3, [pc, #28]	@ (8003be4 <HAL_MPU_Disable+0x28>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	4a06      	ldr	r2, [pc, #24]	@ (8003be4 <HAL_MPU_Disable+0x28>)
 8003bcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003bd2:	4b05      	ldr	r3, [pc, #20]	@ (8003be8 <HAL_MPU_Disable+0x2c>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	605a      	str	r2, [r3, #4]
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00
 8003be8:	e000ed90 	.word	0xe000ed90

08003bec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8003c24 <HAL_MPU_Enable+0x38>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <HAL_MPU_Enable+0x3c>)
 8003c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c02:	4a09      	ldr	r2, [pc, #36]	@ (8003c28 <HAL_MPU_Enable+0x3c>)
 8003c04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c08:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003c0a:	f3bf 8f4f 	dsb	sy
}
 8003c0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c10:	f3bf 8f6f 	isb	sy
}
 8003c14:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	e000ed90 	.word	0xe000ed90
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	785a      	ldrb	r2, [r3, #1]
 8003c38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca8 <HAL_MPU_ConfigRegion+0x7c>)
 8003c3a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca8 <HAL_MPU_ConfigRegion+0x7c>)
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	4a19      	ldr	r2, [pc, #100]	@ (8003ca8 <HAL_MPU_ConfigRegion+0x7c>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003c48:	4a17      	ldr	r2, [pc, #92]	@ (8003ca8 <HAL_MPU_ConfigRegion+0x7c>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7b1b      	ldrb	r3, [r3, #12]
 8003c54:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	7adb      	ldrb	r3, [r3, #11]
 8003c5a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c5c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	7a9b      	ldrb	r3, [r3, #10]
 8003c62:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c64:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	7b5b      	ldrb	r3, [r3, #13]
 8003c6a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c6c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	7b9b      	ldrb	r3, [r3, #14]
 8003c72:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c74:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	7bdb      	ldrb	r3, [r3, #15]
 8003c7a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c7c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	7a5b      	ldrb	r3, [r3, #9]
 8003c82:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	7a1b      	ldrb	r3, [r3, #8]
 8003c8a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c8c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	7812      	ldrb	r2, [r2, #0]
 8003c92:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c94:	4a04      	ldr	r2, [pc, #16]	@ (8003ca8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c96:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c98:	6113      	str	r3, [r2, #16]
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed90 	.word	0xe000ed90

08003cac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003cb4:	f7fe f980 	bl	8001fb8 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d101      	bne.n	8003cc4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e37d      	b.n	80043c0 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a66      	ldr	r2, [pc, #408]	@ (8003e64 <HAL_DMA_Init+0x1b8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d04a      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a65      	ldr	r2, [pc, #404]	@ (8003e68 <HAL_DMA_Init+0x1bc>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d045      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a63      	ldr	r2, [pc, #396]	@ (8003e6c <HAL_DMA_Init+0x1c0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d040      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a62      	ldr	r2, [pc, #392]	@ (8003e70 <HAL_DMA_Init+0x1c4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d03b      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a60      	ldr	r2, [pc, #384]	@ (8003e74 <HAL_DMA_Init+0x1c8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d036      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a5f      	ldr	r2, [pc, #380]	@ (8003e78 <HAL_DMA_Init+0x1cc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d031      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a5d      	ldr	r2, [pc, #372]	@ (8003e7c <HAL_DMA_Init+0x1d0>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02c      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e80 <HAL_DMA_Init+0x1d4>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d027      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a5a      	ldr	r2, [pc, #360]	@ (8003e84 <HAL_DMA_Init+0x1d8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d022      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a59      	ldr	r2, [pc, #356]	@ (8003e88 <HAL_DMA_Init+0x1dc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d01d      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a57      	ldr	r2, [pc, #348]	@ (8003e8c <HAL_DMA_Init+0x1e0>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d018      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a56      	ldr	r2, [pc, #344]	@ (8003e90 <HAL_DMA_Init+0x1e4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a54      	ldr	r2, [pc, #336]	@ (8003e94 <HAL_DMA_Init+0x1e8>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00e      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a53      	ldr	r2, [pc, #332]	@ (8003e98 <HAL_DMA_Init+0x1ec>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d009      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a51      	ldr	r2, [pc, #324]	@ (8003e9c <HAL_DMA_Init+0x1f0>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d004      	beq.n	8003d64 <HAL_DMA_Init+0xb8>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a50      	ldr	r2, [pc, #320]	@ (8003ea0 <HAL_DMA_Init+0x1f4>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d101      	bne.n	8003d68 <HAL_DMA_Init+0xbc>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e000      	b.n	8003d6a <HAL_DMA_Init+0xbe>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 813c 	beq.w	8003fe8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a37      	ldr	r2, [pc, #220]	@ (8003e64 <HAL_DMA_Init+0x1b8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d04a      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a36      	ldr	r2, [pc, #216]	@ (8003e68 <HAL_DMA_Init+0x1bc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d045      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a34      	ldr	r2, [pc, #208]	@ (8003e6c <HAL_DMA_Init+0x1c0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d040      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a33      	ldr	r2, [pc, #204]	@ (8003e70 <HAL_DMA_Init+0x1c4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d03b      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a31      	ldr	r2, [pc, #196]	@ (8003e74 <HAL_DMA_Init+0x1c8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d036      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a30      	ldr	r2, [pc, #192]	@ (8003e78 <HAL_DMA_Init+0x1cc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d031      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8003e7c <HAL_DMA_Init+0x1d0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d02c      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a2d      	ldr	r2, [pc, #180]	@ (8003e80 <HAL_DMA_Init+0x1d4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d027      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a2b      	ldr	r2, [pc, #172]	@ (8003e84 <HAL_DMA_Init+0x1d8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d022      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2a      	ldr	r2, [pc, #168]	@ (8003e88 <HAL_DMA_Init+0x1dc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d01d      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a28      	ldr	r2, [pc, #160]	@ (8003e8c <HAL_DMA_Init+0x1e0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d018      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a27      	ldr	r2, [pc, #156]	@ (8003e90 <HAL_DMA_Init+0x1e4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a25      	ldr	r2, [pc, #148]	@ (8003e94 <HAL_DMA_Init+0x1e8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00e      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a24      	ldr	r2, [pc, #144]	@ (8003e98 <HAL_DMA_Init+0x1ec>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a22      	ldr	r2, [pc, #136]	@ (8003e9c <HAL_DMA_Init+0x1f0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_DMA_Init+0x174>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a21      	ldr	r2, [pc, #132]	@ (8003ea0 <HAL_DMA_Init+0x1f4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d108      	bne.n	8003e32 <HAL_DMA_Init+0x186>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e007      	b.n	8003e42 <HAL_DMA_Init+0x196>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e42:	e02f      	b.n	8003ea4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e44:	f7fe f8b8 	bl	8001fb8 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b05      	cmp	r3, #5
 8003e50:	d928      	bls.n	8003ea4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e2ad      	b.n	80043c0 <HAL_DMA_Init+0x714>
 8003e64:	40020010 	.word	0x40020010
 8003e68:	40020028 	.word	0x40020028
 8003e6c:	40020040 	.word	0x40020040
 8003e70:	40020058 	.word	0x40020058
 8003e74:	40020070 	.word	0x40020070
 8003e78:	40020088 	.word	0x40020088
 8003e7c:	400200a0 	.word	0x400200a0
 8003e80:	400200b8 	.word	0x400200b8
 8003e84:	40020410 	.word	0x40020410
 8003e88:	40020428 	.word	0x40020428
 8003e8c:	40020440 	.word	0x40020440
 8003e90:	40020458 	.word	0x40020458
 8003e94:	40020470 	.word	0x40020470
 8003e98:	40020488 	.word	0x40020488
 8003e9c:	400204a0 	.word	0x400204a0
 8003ea0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1c8      	bne.n	8003e44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4b73      	ldr	r3, [pc, #460]	@ (800408c <HAL_DMA_Init+0x3e0>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003eca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	2b04      	cmp	r3, #4
 8003ef6:	d107      	bne.n	8003f08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f00:	4313      	orrs	r3, r2
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b28      	cmp	r3, #40	@ 0x28
 8003f0e:	d903      	bls.n	8003f18 <HAL_DMA_Init+0x26c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f16:	d91f      	bls.n	8003f58 <HAL_DMA_Init+0x2ac>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003f1e:	d903      	bls.n	8003f28 <HAL_DMA_Init+0x27c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	2b42      	cmp	r3, #66	@ 0x42
 8003f26:	d917      	bls.n	8003f58 <HAL_DMA_Init+0x2ac>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b46      	cmp	r3, #70	@ 0x46
 8003f2e:	d903      	bls.n	8003f38 <HAL_DMA_Init+0x28c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b48      	cmp	r3, #72	@ 0x48
 8003f36:	d90f      	bls.n	8003f58 <HAL_DMA_Init+0x2ac>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b4e      	cmp	r3, #78	@ 0x4e
 8003f3e:	d903      	bls.n	8003f48 <HAL_DMA_Init+0x29c>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b52      	cmp	r3, #82	@ 0x52
 8003f46:	d907      	bls.n	8003f58 <HAL_DMA_Init+0x2ac>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b73      	cmp	r3, #115	@ 0x73
 8003f4e:	d905      	bls.n	8003f5c <HAL_DMA_Init+0x2b0>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b77      	cmp	r3, #119	@ 0x77
 8003f56:	d801      	bhi.n	8003f5c <HAL_DMA_Init+0x2b0>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e000      	b.n	8003f5e <HAL_DMA_Init+0x2b2>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f68:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f023 0307 	bic.w	r3, r3, #7
 8003f80:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d117      	bne.n	8003fc4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f002 fbd4 	bl	8006754 <DMA_CheckFifoParam>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d008      	beq.n	8003fc4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2240      	movs	r2, #64	@ 0x40
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e1fd      	b.n	80043c0 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f002 fb0f 	bl	80065f0 <DMA_CalcBaseAndBitshift>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	223f      	movs	r2, #63	@ 0x3f
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	609a      	str	r2, [r3, #8]
 8003fe6:	e0fd      	b.n	80041e4 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a28      	ldr	r2, [pc, #160]	@ (8004090 <HAL_DMA_Init+0x3e4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d04a      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a27      	ldr	r2, [pc, #156]	@ (8004094 <HAL_DMA_Init+0x3e8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d045      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a25      	ldr	r2, [pc, #148]	@ (8004098 <HAL_DMA_Init+0x3ec>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d040      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a24      	ldr	r2, [pc, #144]	@ (800409c <HAL_DMA_Init+0x3f0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d03b      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a22      	ldr	r2, [pc, #136]	@ (80040a0 <HAL_DMA_Init+0x3f4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d036      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a21      	ldr	r2, [pc, #132]	@ (80040a4 <HAL_DMA_Init+0x3f8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d031      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1f      	ldr	r2, [pc, #124]	@ (80040a8 <HAL_DMA_Init+0x3fc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d02c      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1e      	ldr	r2, [pc, #120]	@ (80040ac <HAL_DMA_Init+0x400>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d027      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1c      	ldr	r2, [pc, #112]	@ (80040b0 <HAL_DMA_Init+0x404>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d022      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a1b      	ldr	r2, [pc, #108]	@ (80040b4 <HAL_DMA_Init+0x408>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d01d      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a19      	ldr	r2, [pc, #100]	@ (80040b8 <HAL_DMA_Init+0x40c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d018      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a18      	ldr	r2, [pc, #96]	@ (80040bc <HAL_DMA_Init+0x410>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d013      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a16      	ldr	r2, [pc, #88]	@ (80040c0 <HAL_DMA_Init+0x414>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00e      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a15      	ldr	r2, [pc, #84]	@ (80040c4 <HAL_DMA_Init+0x418>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d009      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a13      	ldr	r2, [pc, #76]	@ (80040c8 <HAL_DMA_Init+0x41c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_DMA_Init+0x3dc>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a12      	ldr	r2, [pc, #72]	@ (80040cc <HAL_DMA_Init+0x420>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d123      	bne.n	80040d0 <HAL_DMA_Init+0x424>
 8004088:	2301      	movs	r3, #1
 800408a:	e022      	b.n	80040d2 <HAL_DMA_Init+0x426>
 800408c:	fe10803f 	.word	0xfe10803f
 8004090:	48022c08 	.word	0x48022c08
 8004094:	48022c1c 	.word	0x48022c1c
 8004098:	48022c30 	.word	0x48022c30
 800409c:	48022c44 	.word	0x48022c44
 80040a0:	48022c58 	.word	0x48022c58
 80040a4:	48022c6c 	.word	0x48022c6c
 80040a8:	48022c80 	.word	0x48022c80
 80040ac:	48022c94 	.word	0x48022c94
 80040b0:	58025408 	.word	0x58025408
 80040b4:	5802541c 	.word	0x5802541c
 80040b8:	58025430 	.word	0x58025430
 80040bc:	58025444 	.word	0x58025444
 80040c0:	58025458 	.word	0x58025458
 80040c4:	5802546c 	.word	0x5802546c
 80040c8:	58025480 	.word	0x58025480
 80040cc:	58025494 	.word	0x58025494
 80040d0:	2300      	movs	r3, #0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d07d      	beq.n	80041d2 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a7f      	ldr	r2, [pc, #508]	@ (80042d8 <HAL_DMA_Init+0x62c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d021      	beq.n	8004124 <HAL_DMA_Init+0x478>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a7d      	ldr	r2, [pc, #500]	@ (80042dc <HAL_DMA_Init+0x630>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d01c      	beq.n	8004124 <HAL_DMA_Init+0x478>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a7c      	ldr	r2, [pc, #496]	@ (80042e0 <HAL_DMA_Init+0x634>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d017      	beq.n	8004124 <HAL_DMA_Init+0x478>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a7a      	ldr	r2, [pc, #488]	@ (80042e4 <HAL_DMA_Init+0x638>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d012      	beq.n	8004124 <HAL_DMA_Init+0x478>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a79      	ldr	r2, [pc, #484]	@ (80042e8 <HAL_DMA_Init+0x63c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00d      	beq.n	8004124 <HAL_DMA_Init+0x478>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a77      	ldr	r2, [pc, #476]	@ (80042ec <HAL_DMA_Init+0x640>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d008      	beq.n	8004124 <HAL_DMA_Init+0x478>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a76      	ldr	r2, [pc, #472]	@ (80042f0 <HAL_DMA_Init+0x644>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d003      	beq.n	8004124 <HAL_DMA_Init+0x478>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a74      	ldr	r2, [pc, #464]	@ (80042f4 <HAL_DMA_Init+0x648>)
 8004122:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4b6e      	ldr	r3, [pc, #440]	@ (80042f8 <HAL_DMA_Init+0x64c>)
 8004140:	4013      	ands	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b40      	cmp	r3, #64	@ 0x40
 800414a:	d008      	beq.n	800415e <HAL_DMA_Init+0x4b2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b80      	cmp	r3, #128	@ 0x80
 8004152:	d102      	bne.n	800415a <HAL_DMA_Init+0x4ae>
 8004154:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004158:	e002      	b.n	8004160 <HAL_DMA_Init+0x4b4>
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <HAL_DMA_Init+0x4b4>
 800415e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68d2      	ldr	r2, [r2, #12]
 8004164:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004166:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800416e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	695b      	ldr	r3, [r3, #20]
 8004174:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004176:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800417e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004186:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800418e:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	4b55      	ldr	r3, [pc, #340]	@ (80042fc <HAL_DMA_Init+0x650>)
 80041a6:	4413      	add	r3, r2
 80041a8:	4a55      	ldr	r2, [pc, #340]	@ (8004300 <HAL_DMA_Init+0x654>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	009a      	lsls	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f002 fa1a 	bl	80065f0 <DMA_CalcBaseAndBitshift>
 80041bc:	4603      	mov	r3, r0
 80041be:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c4:	f003 031f 	and.w	r3, r3, #31
 80041c8:	2201      	movs	r2, #1
 80041ca:	409a      	lsls	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	605a      	str	r2, [r3, #4]
 80041d0:	e008      	b.n	80041e4 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2240      	movs	r2, #64	@ 0x40
 80041d6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2203      	movs	r2, #3
 80041dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0ed      	b.n	80043c0 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a46      	ldr	r2, [pc, #280]	@ (8004304 <HAL_DMA_Init+0x658>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d072      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a45      	ldr	r2, [pc, #276]	@ (8004308 <HAL_DMA_Init+0x65c>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d06d      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a43      	ldr	r2, [pc, #268]	@ (800430c <HAL_DMA_Init+0x660>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d068      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a42      	ldr	r2, [pc, #264]	@ (8004310 <HAL_DMA_Init+0x664>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d063      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a40      	ldr	r2, [pc, #256]	@ (8004314 <HAL_DMA_Init+0x668>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d05e      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a3f      	ldr	r2, [pc, #252]	@ (8004318 <HAL_DMA_Init+0x66c>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d059      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a3d      	ldr	r2, [pc, #244]	@ (800431c <HAL_DMA_Init+0x670>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d054      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a3c      	ldr	r2, [pc, #240]	@ (8004320 <HAL_DMA_Init+0x674>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d04f      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a3a      	ldr	r2, [pc, #232]	@ (8004324 <HAL_DMA_Init+0x678>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d04a      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a39      	ldr	r2, [pc, #228]	@ (8004328 <HAL_DMA_Init+0x67c>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d045      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a37      	ldr	r2, [pc, #220]	@ (800432c <HAL_DMA_Init+0x680>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d040      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a36      	ldr	r2, [pc, #216]	@ (8004330 <HAL_DMA_Init+0x684>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d03b      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a34      	ldr	r2, [pc, #208]	@ (8004334 <HAL_DMA_Init+0x688>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d036      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a33      	ldr	r2, [pc, #204]	@ (8004338 <HAL_DMA_Init+0x68c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d031      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a31      	ldr	r2, [pc, #196]	@ (800433c <HAL_DMA_Init+0x690>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d02c      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a30      	ldr	r2, [pc, #192]	@ (8004340 <HAL_DMA_Init+0x694>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d027      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a13      	ldr	r2, [pc, #76]	@ (80042d8 <HAL_DMA_Init+0x62c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d022      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a12      	ldr	r2, [pc, #72]	@ (80042dc <HAL_DMA_Init+0x630>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d01d      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a10      	ldr	r2, [pc, #64]	@ (80042e0 <HAL_DMA_Init+0x634>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d018      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a0f      	ldr	r2, [pc, #60]	@ (80042e4 <HAL_DMA_Init+0x638>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d013      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0d      	ldr	r2, [pc, #52]	@ (80042e8 <HAL_DMA_Init+0x63c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00e      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a0c      	ldr	r2, [pc, #48]	@ (80042ec <HAL_DMA_Init+0x640>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d009      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0a      	ldr	r2, [pc, #40]	@ (80042f0 <HAL_DMA_Init+0x644>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <HAL_DMA_Init+0x628>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a09      	ldr	r2, [pc, #36]	@ (80042f4 <HAL_DMA_Init+0x648>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d137      	bne.n	8004344 <HAL_DMA_Init+0x698>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e036      	b.n	8004346 <HAL_DMA_Init+0x69a>
 80042d8:	58025408 	.word	0x58025408
 80042dc:	5802541c 	.word	0x5802541c
 80042e0:	58025430 	.word	0x58025430
 80042e4:	58025444 	.word	0x58025444
 80042e8:	58025458 	.word	0x58025458
 80042ec:	5802546c 	.word	0x5802546c
 80042f0:	58025480 	.word	0x58025480
 80042f4:	58025494 	.word	0x58025494
 80042f8:	fffe000f 	.word	0xfffe000f
 80042fc:	a7fdabf8 	.word	0xa7fdabf8
 8004300:	cccccccd 	.word	0xcccccccd
 8004304:	40020010 	.word	0x40020010
 8004308:	40020028 	.word	0x40020028
 800430c:	40020040 	.word	0x40020040
 8004310:	40020058 	.word	0x40020058
 8004314:	40020070 	.word	0x40020070
 8004318:	40020088 	.word	0x40020088
 800431c:	400200a0 	.word	0x400200a0
 8004320:	400200b8 	.word	0x400200b8
 8004324:	40020410 	.word	0x40020410
 8004328:	40020428 	.word	0x40020428
 800432c:	40020440 	.word	0x40020440
 8004330:	40020458 	.word	0x40020458
 8004334:	40020470 	.word	0x40020470
 8004338:	40020488 	.word	0x40020488
 800433c:	400204a0 	.word	0x400204a0
 8004340:	400204b8 	.word	0x400204b8
 8004344:	2300      	movs	r3, #0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d032      	beq.n	80043b0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f002 fa7e 	bl	800684c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b80      	cmp	r3, #128	@ 0x80
 8004356:	d102      	bne.n	800435e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004372:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_DMA_Init+0x6f2>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d80c      	bhi.n	800439e <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f002 fafb 	bl	8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	e008      	b.n	80043b0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e226      	b.n	8004832 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_DMA_Start_IT+0x2a>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e21f      	b.n	8004832 <HAL_DMA_Start_IT+0x46a>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	f040 820a 	bne.w	800481c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a68      	ldr	r2, [pc, #416]	@ (80045bc <HAL_DMA_Start_IT+0x1f4>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d04a      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a66      	ldr	r2, [pc, #408]	@ (80045c0 <HAL_DMA_Start_IT+0x1f8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d045      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a65      	ldr	r2, [pc, #404]	@ (80045c4 <HAL_DMA_Start_IT+0x1fc>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d040      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a63      	ldr	r2, [pc, #396]	@ (80045c8 <HAL_DMA_Start_IT+0x200>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d03b      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a62      	ldr	r2, [pc, #392]	@ (80045cc <HAL_DMA_Start_IT+0x204>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d036      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a60      	ldr	r2, [pc, #384]	@ (80045d0 <HAL_DMA_Start_IT+0x208>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d031      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a5f      	ldr	r2, [pc, #380]	@ (80045d4 <HAL_DMA_Start_IT+0x20c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d02c      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a5d      	ldr	r2, [pc, #372]	@ (80045d8 <HAL_DMA_Start_IT+0x210>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d027      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a5c      	ldr	r2, [pc, #368]	@ (80045dc <HAL_DMA_Start_IT+0x214>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d022      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a5a      	ldr	r2, [pc, #360]	@ (80045e0 <HAL_DMA_Start_IT+0x218>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d01d      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a59      	ldr	r2, [pc, #356]	@ (80045e4 <HAL_DMA_Start_IT+0x21c>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d018      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a57      	ldr	r2, [pc, #348]	@ (80045e8 <HAL_DMA_Start_IT+0x220>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a56      	ldr	r2, [pc, #344]	@ (80045ec <HAL_DMA_Start_IT+0x224>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d00e      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a54      	ldr	r2, [pc, #336]	@ (80045f0 <HAL_DMA_Start_IT+0x228>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d009      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a53      	ldr	r2, [pc, #332]	@ (80045f4 <HAL_DMA_Start_IT+0x22c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d004      	beq.n	80044b6 <HAL_DMA_Start_IT+0xee>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a51      	ldr	r2, [pc, #324]	@ (80045f8 <HAL_DMA_Start_IT+0x230>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d108      	bne.n	80044c8 <HAL_DMA_Start_IT+0x100>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
 80044c6:	e007      	b.n	80044d8 <HAL_DMA_Start_IT+0x110>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0201 	bic.w	r2, r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68b9      	ldr	r1, [r7, #8]
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f001 fea2 	bl	8006228 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a34      	ldr	r2, [pc, #208]	@ (80045bc <HAL_DMA_Start_IT+0x1f4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d04a      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a33      	ldr	r2, [pc, #204]	@ (80045c0 <HAL_DMA_Start_IT+0x1f8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d045      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a31      	ldr	r2, [pc, #196]	@ (80045c4 <HAL_DMA_Start_IT+0x1fc>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d040      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a30      	ldr	r2, [pc, #192]	@ (80045c8 <HAL_DMA_Start_IT+0x200>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d03b      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a2e      	ldr	r2, [pc, #184]	@ (80045cc <HAL_DMA_Start_IT+0x204>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d036      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a2d      	ldr	r2, [pc, #180]	@ (80045d0 <HAL_DMA_Start_IT+0x208>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d031      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a2b      	ldr	r2, [pc, #172]	@ (80045d4 <HAL_DMA_Start_IT+0x20c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d02c      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a2a      	ldr	r2, [pc, #168]	@ (80045d8 <HAL_DMA_Start_IT+0x210>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d027      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a28      	ldr	r2, [pc, #160]	@ (80045dc <HAL_DMA_Start_IT+0x214>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d022      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a27      	ldr	r2, [pc, #156]	@ (80045e0 <HAL_DMA_Start_IT+0x218>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d01d      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a25      	ldr	r2, [pc, #148]	@ (80045e4 <HAL_DMA_Start_IT+0x21c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d018      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a24      	ldr	r2, [pc, #144]	@ (80045e8 <HAL_DMA_Start_IT+0x220>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a22      	ldr	r2, [pc, #136]	@ (80045ec <HAL_DMA_Start_IT+0x224>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a21      	ldr	r2, [pc, #132]	@ (80045f0 <HAL_DMA_Start_IT+0x228>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1f      	ldr	r2, [pc, #124]	@ (80045f4 <HAL_DMA_Start_IT+0x22c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_DMA_Start_IT+0x1bc>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1e      	ldr	r2, [pc, #120]	@ (80045f8 <HAL_DMA_Start_IT+0x230>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_DMA_Start_IT+0x1c0>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <HAL_DMA_Start_IT+0x1c2>
 8004588:	2300      	movs	r3, #0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d036      	beq.n	80045fc <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 021e 	bic.w	r2, r3, #30
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0216 	orr.w	r2, r2, #22
 80045a0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d03e      	beq.n	8004628 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0208 	orr.w	r2, r2, #8
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e035      	b.n	8004628 <HAL_DMA_Start_IT+0x260>
 80045bc:	40020010 	.word	0x40020010
 80045c0:	40020028 	.word	0x40020028
 80045c4:	40020040 	.word	0x40020040
 80045c8:	40020058 	.word	0x40020058
 80045cc:	40020070 	.word	0x40020070
 80045d0:	40020088 	.word	0x40020088
 80045d4:	400200a0 	.word	0x400200a0
 80045d8:	400200b8 	.word	0x400200b8
 80045dc:	40020410 	.word	0x40020410
 80045e0:	40020428 	.word	0x40020428
 80045e4:	40020440 	.word	0x40020440
 80045e8:	40020458 	.word	0x40020458
 80045ec:	40020470 	.word	0x40020470
 80045f0:	40020488 	.word	0x40020488
 80045f4:	400204a0 	.word	0x400204a0
 80045f8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f023 020e 	bic.w	r2, r3, #14
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 020a 	orr.w	r2, r2, #10
 800460e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d007      	beq.n	8004628 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0204 	orr.w	r2, r2, #4
 8004626:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a83      	ldr	r2, [pc, #524]	@ (800483c <HAL_DMA_Start_IT+0x474>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d072      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a82      	ldr	r2, [pc, #520]	@ (8004840 <HAL_DMA_Start_IT+0x478>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d06d      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a80      	ldr	r2, [pc, #512]	@ (8004844 <HAL_DMA_Start_IT+0x47c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d068      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a7f      	ldr	r2, [pc, #508]	@ (8004848 <HAL_DMA_Start_IT+0x480>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d063      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a7d      	ldr	r2, [pc, #500]	@ (800484c <HAL_DMA_Start_IT+0x484>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d05e      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a7c      	ldr	r2, [pc, #496]	@ (8004850 <HAL_DMA_Start_IT+0x488>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d059      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a7a      	ldr	r2, [pc, #488]	@ (8004854 <HAL_DMA_Start_IT+0x48c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d054      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a79      	ldr	r2, [pc, #484]	@ (8004858 <HAL_DMA_Start_IT+0x490>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d04f      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a77      	ldr	r2, [pc, #476]	@ (800485c <HAL_DMA_Start_IT+0x494>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d04a      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a76      	ldr	r2, [pc, #472]	@ (8004860 <HAL_DMA_Start_IT+0x498>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d045      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a74      	ldr	r2, [pc, #464]	@ (8004864 <HAL_DMA_Start_IT+0x49c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d040      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a73      	ldr	r2, [pc, #460]	@ (8004868 <HAL_DMA_Start_IT+0x4a0>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d03b      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a71      	ldr	r2, [pc, #452]	@ (800486c <HAL_DMA_Start_IT+0x4a4>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d036      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a70      	ldr	r2, [pc, #448]	@ (8004870 <HAL_DMA_Start_IT+0x4a8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d031      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004874 <HAL_DMA_Start_IT+0x4ac>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d02c      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004878 <HAL_DMA_Start_IT+0x4b0>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d027      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a6b      	ldr	r2, [pc, #428]	@ (800487c <HAL_DMA_Start_IT+0x4b4>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d022      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004880 <HAL_DMA_Start_IT+0x4b8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d01d      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a68      	ldr	r2, [pc, #416]	@ (8004884 <HAL_DMA_Start_IT+0x4bc>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d018      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a67      	ldr	r2, [pc, #412]	@ (8004888 <HAL_DMA_Start_IT+0x4c0>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d013      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a65      	ldr	r2, [pc, #404]	@ (800488c <HAL_DMA_Start_IT+0x4c4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00e      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a64      	ldr	r2, [pc, #400]	@ (8004890 <HAL_DMA_Start_IT+0x4c8>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d009      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a62      	ldr	r2, [pc, #392]	@ (8004894 <HAL_DMA_Start_IT+0x4cc>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d004      	beq.n	8004718 <HAL_DMA_Start_IT+0x350>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a61      	ldr	r2, [pc, #388]	@ (8004898 <HAL_DMA_Start_IT+0x4d0>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_DMA_Start_IT+0x354>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <HAL_DMA_Start_IT+0x356>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01a      	beq.n	8004758 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d007      	beq.n	8004740 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800473e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004756:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a37      	ldr	r2, [pc, #220]	@ (800483c <HAL_DMA_Start_IT+0x474>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d04a      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a36      	ldr	r2, [pc, #216]	@ (8004840 <HAL_DMA_Start_IT+0x478>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d045      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a34      	ldr	r2, [pc, #208]	@ (8004844 <HAL_DMA_Start_IT+0x47c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d040      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a33      	ldr	r2, [pc, #204]	@ (8004848 <HAL_DMA_Start_IT+0x480>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d03b      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a31      	ldr	r2, [pc, #196]	@ (800484c <HAL_DMA_Start_IT+0x484>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d036      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a30      	ldr	r2, [pc, #192]	@ (8004850 <HAL_DMA_Start_IT+0x488>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d031      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a2e      	ldr	r2, [pc, #184]	@ (8004854 <HAL_DMA_Start_IT+0x48c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d02c      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004858 <HAL_DMA_Start_IT+0x490>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d027      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2b      	ldr	r2, [pc, #172]	@ (800485c <HAL_DMA_Start_IT+0x494>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d022      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2a      	ldr	r2, [pc, #168]	@ (8004860 <HAL_DMA_Start_IT+0x498>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d01d      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a28      	ldr	r2, [pc, #160]	@ (8004864 <HAL_DMA_Start_IT+0x49c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d018      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a27      	ldr	r2, [pc, #156]	@ (8004868 <HAL_DMA_Start_IT+0x4a0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a25      	ldr	r2, [pc, #148]	@ (800486c <HAL_DMA_Start_IT+0x4a4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00e      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a24      	ldr	r2, [pc, #144]	@ (8004870 <HAL_DMA_Start_IT+0x4a8>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d009      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a22      	ldr	r2, [pc, #136]	@ (8004874 <HAL_DMA_Start_IT+0x4ac>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d004      	beq.n	80047f8 <HAL_DMA_Start_IT+0x430>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a21      	ldr	r2, [pc, #132]	@ (8004878 <HAL_DMA_Start_IT+0x4b0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d108      	bne.n	800480a <HAL_DMA_Start_IT+0x442>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e012      	b.n	8004830 <HAL_DMA_Start_IT+0x468>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e009      	b.n	8004830 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004822:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004830:	7dfb      	ldrb	r3, [r7, #23]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40020010 	.word	0x40020010
 8004840:	40020028 	.word	0x40020028
 8004844:	40020040 	.word	0x40020040
 8004848:	40020058 	.word	0x40020058
 800484c:	40020070 	.word	0x40020070
 8004850:	40020088 	.word	0x40020088
 8004854:	400200a0 	.word	0x400200a0
 8004858:	400200b8 	.word	0x400200b8
 800485c:	40020410 	.word	0x40020410
 8004860:	40020428 	.word	0x40020428
 8004864:	40020440 	.word	0x40020440
 8004868:	40020458 	.word	0x40020458
 800486c:	40020470 	.word	0x40020470
 8004870:	40020488 	.word	0x40020488
 8004874:	400204a0 	.word	0x400204a0
 8004878:	400204b8 	.word	0x400204b8
 800487c:	58025408 	.word	0x58025408
 8004880:	5802541c 	.word	0x5802541c
 8004884:	58025430 	.word	0x58025430
 8004888:	58025444 	.word	0x58025444
 800488c:	58025458 	.word	0x58025458
 8004890:	5802546c 	.word	0x5802546c
 8004894:	58025480 	.word	0x58025480
 8004898:	58025494 	.word	0x58025494

0800489c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80048a4:	f7fd fb88 	bl	8001fb8 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e2dc      	b.n	8004e6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d008      	beq.n	80048d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2280      	movs	r2, #128	@ 0x80
 80048c4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e2cd      	b.n	8004e6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a76      	ldr	r2, [pc, #472]	@ (8004ab0 <HAL_DMA_Abort+0x214>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d04a      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a74      	ldr	r2, [pc, #464]	@ (8004ab4 <HAL_DMA_Abort+0x218>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d045      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a73      	ldr	r2, [pc, #460]	@ (8004ab8 <HAL_DMA_Abort+0x21c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d040      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a71      	ldr	r2, [pc, #452]	@ (8004abc <HAL_DMA_Abort+0x220>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d03b      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a70      	ldr	r2, [pc, #448]	@ (8004ac0 <HAL_DMA_Abort+0x224>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d036      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a6e      	ldr	r2, [pc, #440]	@ (8004ac4 <HAL_DMA_Abort+0x228>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d031      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a6d      	ldr	r2, [pc, #436]	@ (8004ac8 <HAL_DMA_Abort+0x22c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d02c      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a6b      	ldr	r2, [pc, #428]	@ (8004acc <HAL_DMA_Abort+0x230>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d027      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a6a      	ldr	r2, [pc, #424]	@ (8004ad0 <HAL_DMA_Abort+0x234>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d022      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a68      	ldr	r2, [pc, #416]	@ (8004ad4 <HAL_DMA_Abort+0x238>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d01d      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a67      	ldr	r2, [pc, #412]	@ (8004ad8 <HAL_DMA_Abort+0x23c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d018      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a65      	ldr	r2, [pc, #404]	@ (8004adc <HAL_DMA_Abort+0x240>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a64      	ldr	r2, [pc, #400]	@ (8004ae0 <HAL_DMA_Abort+0x244>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00e      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a62      	ldr	r2, [pc, #392]	@ (8004ae4 <HAL_DMA_Abort+0x248>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d009      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a61      	ldr	r2, [pc, #388]	@ (8004ae8 <HAL_DMA_Abort+0x24c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d004      	beq.n	8004972 <HAL_DMA_Abort+0xd6>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a5f      	ldr	r2, [pc, #380]	@ (8004aec <HAL_DMA_Abort+0x250>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_DMA_Abort+0xda>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <HAL_DMA_Abort+0xdc>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d013      	beq.n	80049a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 021e 	bic.w	r2, r2, #30
 800498a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695a      	ldr	r2, [r3, #20]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800499a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e00a      	b.n	80049ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 020e 	bic.w	r2, r2, #14
 80049b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a3c      	ldr	r2, [pc, #240]	@ (8004ab0 <HAL_DMA_Abort+0x214>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d072      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ab4 <HAL_DMA_Abort+0x218>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d06d      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a39      	ldr	r2, [pc, #228]	@ (8004ab8 <HAL_DMA_Abort+0x21c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d068      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a37      	ldr	r2, [pc, #220]	@ (8004abc <HAL_DMA_Abort+0x220>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d063      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a36      	ldr	r2, [pc, #216]	@ (8004ac0 <HAL_DMA_Abort+0x224>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d05e      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a34      	ldr	r2, [pc, #208]	@ (8004ac4 <HAL_DMA_Abort+0x228>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d059      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a33      	ldr	r2, [pc, #204]	@ (8004ac8 <HAL_DMA_Abort+0x22c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d054      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a31      	ldr	r2, [pc, #196]	@ (8004acc <HAL_DMA_Abort+0x230>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d04f      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a30      	ldr	r2, [pc, #192]	@ (8004ad0 <HAL_DMA_Abort+0x234>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d04a      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a2e      	ldr	r2, [pc, #184]	@ (8004ad4 <HAL_DMA_Abort+0x238>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d045      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad8 <HAL_DMA_Abort+0x23c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d040      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a2b      	ldr	r2, [pc, #172]	@ (8004adc <HAL_DMA_Abort+0x240>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d03b      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae0 <HAL_DMA_Abort+0x244>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d036      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a28      	ldr	r2, [pc, #160]	@ (8004ae4 <HAL_DMA_Abort+0x248>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d031      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a27      	ldr	r2, [pc, #156]	@ (8004ae8 <HAL_DMA_Abort+0x24c>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d02c      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a25      	ldr	r2, [pc, #148]	@ (8004aec <HAL_DMA_Abort+0x250>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d027      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a24      	ldr	r2, [pc, #144]	@ (8004af0 <HAL_DMA_Abort+0x254>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d022      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a22      	ldr	r2, [pc, #136]	@ (8004af4 <HAL_DMA_Abort+0x258>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01d      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a21      	ldr	r2, [pc, #132]	@ (8004af8 <HAL_DMA_Abort+0x25c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d018      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8004afc <HAL_DMA_Abort+0x260>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1e      	ldr	r2, [pc, #120]	@ (8004b00 <HAL_DMA_Abort+0x264>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00e      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a1c      	ldr	r2, [pc, #112]	@ (8004b04 <HAL_DMA_Abort+0x268>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d009      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b08 <HAL_DMA_Abort+0x26c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d004      	beq.n	8004aaa <HAL_DMA_Abort+0x20e>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <HAL_DMA_Abort+0x270>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d132      	bne.n	8004b10 <HAL_DMA_Abort+0x274>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e031      	b.n	8004b12 <HAL_DMA_Abort+0x276>
 8004aae:	bf00      	nop
 8004ab0:	40020010 	.word	0x40020010
 8004ab4:	40020028 	.word	0x40020028
 8004ab8:	40020040 	.word	0x40020040
 8004abc:	40020058 	.word	0x40020058
 8004ac0:	40020070 	.word	0x40020070
 8004ac4:	40020088 	.word	0x40020088
 8004ac8:	400200a0 	.word	0x400200a0
 8004acc:	400200b8 	.word	0x400200b8
 8004ad0:	40020410 	.word	0x40020410
 8004ad4:	40020428 	.word	0x40020428
 8004ad8:	40020440 	.word	0x40020440
 8004adc:	40020458 	.word	0x40020458
 8004ae0:	40020470 	.word	0x40020470
 8004ae4:	40020488 	.word	0x40020488
 8004ae8:	400204a0 	.word	0x400204a0
 8004aec:	400204b8 	.word	0x400204b8
 8004af0:	58025408 	.word	0x58025408
 8004af4:	5802541c 	.word	0x5802541c
 8004af8:	58025430 	.word	0x58025430
 8004afc:	58025444 	.word	0x58025444
 8004b00:	58025458 	.word	0x58025458
 8004b04:	5802546c 	.word	0x5802546c
 8004b08:	58025480 	.word	0x58025480
 8004b0c:	58025494 	.word	0x58025494
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a6d      	ldr	r2, [pc, #436]	@ (8004ce0 <HAL_DMA_Abort+0x444>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d04a      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a6b      	ldr	r2, [pc, #428]	@ (8004ce4 <HAL_DMA_Abort+0x448>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d045      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6a      	ldr	r2, [pc, #424]	@ (8004ce8 <HAL_DMA_Abort+0x44c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d040      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a68      	ldr	r2, [pc, #416]	@ (8004cec <HAL_DMA_Abort+0x450>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d03b      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a67      	ldr	r2, [pc, #412]	@ (8004cf0 <HAL_DMA_Abort+0x454>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d036      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a65      	ldr	r2, [pc, #404]	@ (8004cf4 <HAL_DMA_Abort+0x458>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d031      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a64      	ldr	r2, [pc, #400]	@ (8004cf8 <HAL_DMA_Abort+0x45c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d02c      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a62      	ldr	r2, [pc, #392]	@ (8004cfc <HAL_DMA_Abort+0x460>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d027      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a61      	ldr	r2, [pc, #388]	@ (8004d00 <HAL_DMA_Abort+0x464>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d022      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a5f      	ldr	r2, [pc, #380]	@ (8004d04 <HAL_DMA_Abort+0x468>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d01d      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8004d08 <HAL_DMA_Abort+0x46c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d018      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a5c      	ldr	r2, [pc, #368]	@ (8004d0c <HAL_DMA_Abort+0x470>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d013      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8004d10 <HAL_DMA_Abort+0x474>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d00e      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a59      	ldr	r2, [pc, #356]	@ (8004d14 <HAL_DMA_Abort+0x478>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a58      	ldr	r2, [pc, #352]	@ (8004d18 <HAL_DMA_Abort+0x47c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d004      	beq.n	8004bc6 <HAL_DMA_Abort+0x32a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a56      	ldr	r2, [pc, #344]	@ (8004d1c <HAL_DMA_Abort+0x480>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d108      	bne.n	8004bd8 <HAL_DMA_Abort+0x33c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0201 	bic.w	r2, r2, #1
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e007      	b.n	8004be8 <HAL_DMA_Abort+0x34c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0201 	bic.w	r2, r2, #1
 8004be6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004be8:	e013      	b.n	8004c12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bea:	f7fd f9e5 	bl	8001fb8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	d90c      	bls.n	8004c12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2203      	movs	r2, #3
 8004c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e12d      	b.n	8004e6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1e5      	bne.n	8004bea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2f      	ldr	r2, [pc, #188]	@ (8004ce0 <HAL_DMA_Abort+0x444>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d04a      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce4 <HAL_DMA_Abort+0x448>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d045      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce8 <HAL_DMA_Abort+0x44c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d040      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a2a      	ldr	r2, [pc, #168]	@ (8004cec <HAL_DMA_Abort+0x450>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d03b      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a29      	ldr	r2, [pc, #164]	@ (8004cf0 <HAL_DMA_Abort+0x454>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d036      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a27      	ldr	r2, [pc, #156]	@ (8004cf4 <HAL_DMA_Abort+0x458>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d031      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <HAL_DMA_Abort+0x45c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d02c      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a24      	ldr	r2, [pc, #144]	@ (8004cfc <HAL_DMA_Abort+0x460>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d027      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a23      	ldr	r2, [pc, #140]	@ (8004d00 <HAL_DMA_Abort+0x464>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a21      	ldr	r2, [pc, #132]	@ (8004d04 <HAL_DMA_Abort+0x468>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a20      	ldr	r2, [pc, #128]	@ (8004d08 <HAL_DMA_Abort+0x46c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1e      	ldr	r2, [pc, #120]	@ (8004d0c <HAL_DMA_Abort+0x470>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004d10 <HAL_DMA_Abort+0x474>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8004d14 <HAL_DMA_Abort+0x478>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1a      	ldr	r2, [pc, #104]	@ (8004d18 <HAL_DMA_Abort+0x47c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_DMA_Abort+0x422>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a18      	ldr	r2, [pc, #96]	@ (8004d1c <HAL_DMA_Abort+0x480>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d101      	bne.n	8004cc2 <HAL_DMA_Abort+0x426>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <HAL_DMA_Abort+0x428>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02b      	beq.n	8004d20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ccc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	223f      	movs	r2, #63	@ 0x3f
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	e02a      	b.n	8004d36 <HAL_DMA_Abort+0x49a>
 8004ce0:	40020010 	.word	0x40020010
 8004ce4:	40020028 	.word	0x40020028
 8004ce8:	40020040 	.word	0x40020040
 8004cec:	40020058 	.word	0x40020058
 8004cf0:	40020070 	.word	0x40020070
 8004cf4:	40020088 	.word	0x40020088
 8004cf8:	400200a0 	.word	0x400200a0
 8004cfc:	400200b8 	.word	0x400200b8
 8004d00:	40020410 	.word	0x40020410
 8004d04:	40020428 	.word	0x40020428
 8004d08:	40020440 	.word	0x40020440
 8004d0c:	40020458 	.word	0x40020458
 8004d10:	40020470 	.word	0x40020470
 8004d14:	40020488 	.word	0x40020488
 8004d18:	400204a0 	.word	0x400204a0
 8004d1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2201      	movs	r2, #1
 8004d30:	409a      	lsls	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a4f      	ldr	r2, [pc, #316]	@ (8004e78 <HAL_DMA_Abort+0x5dc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d072      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a4d      	ldr	r2, [pc, #308]	@ (8004e7c <HAL_DMA_Abort+0x5e0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d06d      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004e80 <HAL_DMA_Abort+0x5e4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d068      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a4a      	ldr	r2, [pc, #296]	@ (8004e84 <HAL_DMA_Abort+0x5e8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d063      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a49      	ldr	r2, [pc, #292]	@ (8004e88 <HAL_DMA_Abort+0x5ec>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d05e      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a47      	ldr	r2, [pc, #284]	@ (8004e8c <HAL_DMA_Abort+0x5f0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d059      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a46      	ldr	r2, [pc, #280]	@ (8004e90 <HAL_DMA_Abort+0x5f4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d054      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a44      	ldr	r2, [pc, #272]	@ (8004e94 <HAL_DMA_Abort+0x5f8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d04f      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a43      	ldr	r2, [pc, #268]	@ (8004e98 <HAL_DMA_Abort+0x5fc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d04a      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a41      	ldr	r2, [pc, #260]	@ (8004e9c <HAL_DMA_Abort+0x600>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d045      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a40      	ldr	r2, [pc, #256]	@ (8004ea0 <HAL_DMA_Abort+0x604>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d040      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a3e      	ldr	r2, [pc, #248]	@ (8004ea4 <HAL_DMA_Abort+0x608>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d03b      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a3d      	ldr	r2, [pc, #244]	@ (8004ea8 <HAL_DMA_Abort+0x60c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d036      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3b      	ldr	r2, [pc, #236]	@ (8004eac <HAL_DMA_Abort+0x610>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d031      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8004eb0 <HAL_DMA_Abort+0x614>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d02c      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a38      	ldr	r2, [pc, #224]	@ (8004eb4 <HAL_DMA_Abort+0x618>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d027      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a37      	ldr	r2, [pc, #220]	@ (8004eb8 <HAL_DMA_Abort+0x61c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d022      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a35      	ldr	r2, [pc, #212]	@ (8004ebc <HAL_DMA_Abort+0x620>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01d      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a34      	ldr	r2, [pc, #208]	@ (8004ec0 <HAL_DMA_Abort+0x624>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d018      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a32      	ldr	r2, [pc, #200]	@ (8004ec4 <HAL_DMA_Abort+0x628>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d013      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a31      	ldr	r2, [pc, #196]	@ (8004ec8 <HAL_DMA_Abort+0x62c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00e      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8004ecc <HAL_DMA_Abort+0x630>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d009      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2e      	ldr	r2, [pc, #184]	@ (8004ed0 <HAL_DMA_Abort+0x634>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d004      	beq.n	8004e26 <HAL_DMA_Abort+0x58a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed4 <HAL_DMA_Abort+0x638>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_DMA_Abort+0x58e>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <HAL_DMA_Abort+0x590>
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d015      	beq.n	8004e5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004e38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00c      	beq.n	8004e5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	40020010 	.word	0x40020010
 8004e7c:	40020028 	.word	0x40020028
 8004e80:	40020040 	.word	0x40020040
 8004e84:	40020058 	.word	0x40020058
 8004e88:	40020070 	.word	0x40020070
 8004e8c:	40020088 	.word	0x40020088
 8004e90:	400200a0 	.word	0x400200a0
 8004e94:	400200b8 	.word	0x400200b8
 8004e98:	40020410 	.word	0x40020410
 8004e9c:	40020428 	.word	0x40020428
 8004ea0:	40020440 	.word	0x40020440
 8004ea4:	40020458 	.word	0x40020458
 8004ea8:	40020470 	.word	0x40020470
 8004eac:	40020488 	.word	0x40020488
 8004eb0:	400204a0 	.word	0x400204a0
 8004eb4:	400204b8 	.word	0x400204b8
 8004eb8:	58025408 	.word	0x58025408
 8004ebc:	5802541c 	.word	0x5802541c
 8004ec0:	58025430 	.word	0x58025430
 8004ec4:	58025444 	.word	0x58025444
 8004ec8:	58025458 	.word	0x58025458
 8004ecc:	5802546c 	.word	0x5802546c
 8004ed0:	58025480 	.word	0x58025480
 8004ed4:	58025494 	.word	0x58025494

08004ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e237      	b.n	800535a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d004      	beq.n	8004f00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2280      	movs	r2, #128	@ 0x80
 8004efa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e22c      	b.n	800535a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a5c      	ldr	r2, [pc, #368]	@ (8005078 <HAL_DMA_Abort_IT+0x1a0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d04a      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800507c <HAL_DMA_Abort_IT+0x1a4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d045      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a59      	ldr	r2, [pc, #356]	@ (8005080 <HAL_DMA_Abort_IT+0x1a8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d040      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a58      	ldr	r2, [pc, #352]	@ (8005084 <HAL_DMA_Abort_IT+0x1ac>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d03b      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a56      	ldr	r2, [pc, #344]	@ (8005088 <HAL_DMA_Abort_IT+0x1b0>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d036      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a55      	ldr	r2, [pc, #340]	@ (800508c <HAL_DMA_Abort_IT+0x1b4>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d031      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a53      	ldr	r2, [pc, #332]	@ (8005090 <HAL_DMA_Abort_IT+0x1b8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d02c      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a52      	ldr	r2, [pc, #328]	@ (8005094 <HAL_DMA_Abort_IT+0x1bc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d027      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a50      	ldr	r2, [pc, #320]	@ (8005098 <HAL_DMA_Abort_IT+0x1c0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d022      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a4f      	ldr	r2, [pc, #316]	@ (800509c <HAL_DMA_Abort_IT+0x1c4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d01d      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a4d      	ldr	r2, [pc, #308]	@ (80050a0 <HAL_DMA_Abort_IT+0x1c8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d018      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a4c      	ldr	r2, [pc, #304]	@ (80050a4 <HAL_DMA_Abort_IT+0x1cc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a4a      	ldr	r2, [pc, #296]	@ (80050a8 <HAL_DMA_Abort_IT+0x1d0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00e      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a49      	ldr	r2, [pc, #292]	@ (80050ac <HAL_DMA_Abort_IT+0x1d4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a47      	ldr	r2, [pc, #284]	@ (80050b0 <HAL_DMA_Abort_IT+0x1d8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_DMA_Abort_IT+0xc8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a46      	ldr	r2, [pc, #280]	@ (80050b4 <HAL_DMA_Abort_IT+0x1dc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d101      	bne.n	8004fa4 <HAL_DMA_Abort_IT+0xcc>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_DMA_Abort_IT+0xce>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 8086 	beq.w	80050b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2204      	movs	r2, #4
 8004fb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8005078 <HAL_DMA_Abort_IT+0x1a0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d04a      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a2e      	ldr	r2, [pc, #184]	@ (800507c <HAL_DMA_Abort_IT+0x1a4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d045      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8005080 <HAL_DMA_Abort_IT+0x1a8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d040      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8005084 <HAL_DMA_Abort_IT+0x1ac>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d03b      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a29      	ldr	r2, [pc, #164]	@ (8005088 <HAL_DMA_Abort_IT+0x1b0>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d036      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a28      	ldr	r2, [pc, #160]	@ (800508c <HAL_DMA_Abort_IT+0x1b4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d031      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a26      	ldr	r2, [pc, #152]	@ (8005090 <HAL_DMA_Abort_IT+0x1b8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d02c      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a25      	ldr	r2, [pc, #148]	@ (8005094 <HAL_DMA_Abort_IT+0x1bc>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d027      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a23      	ldr	r2, [pc, #140]	@ (8005098 <HAL_DMA_Abort_IT+0x1c0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d022      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a22      	ldr	r2, [pc, #136]	@ (800509c <HAL_DMA_Abort_IT+0x1c4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d01d      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a20      	ldr	r2, [pc, #128]	@ (80050a0 <HAL_DMA_Abort_IT+0x1c8>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d018      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1f      	ldr	r2, [pc, #124]	@ (80050a4 <HAL_DMA_Abort_IT+0x1cc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d013      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1d      	ldr	r2, [pc, #116]	@ (80050a8 <HAL_DMA_Abort_IT+0x1d0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00e      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1c      	ldr	r2, [pc, #112]	@ (80050ac <HAL_DMA_Abort_IT+0x1d4>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d009      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1a      	ldr	r2, [pc, #104]	@ (80050b0 <HAL_DMA_Abort_IT+0x1d8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_DMA_Abort_IT+0x17c>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a19      	ldr	r2, [pc, #100]	@ (80050b4 <HAL_DMA_Abort_IT+0x1dc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d108      	bne.n	8005066 <HAL_DMA_Abort_IT+0x18e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0201 	bic.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	e178      	b.n	8005358 <HAL_DMA_Abort_IT+0x480>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e16f      	b.n	8005358 <HAL_DMA_Abort_IT+0x480>
 8005078:	40020010 	.word	0x40020010
 800507c:	40020028 	.word	0x40020028
 8005080:	40020040 	.word	0x40020040
 8005084:	40020058 	.word	0x40020058
 8005088:	40020070 	.word	0x40020070
 800508c:	40020088 	.word	0x40020088
 8005090:	400200a0 	.word	0x400200a0
 8005094:	400200b8 	.word	0x400200b8
 8005098:	40020410 	.word	0x40020410
 800509c:	40020428 	.word	0x40020428
 80050a0:	40020440 	.word	0x40020440
 80050a4:	40020458 	.word	0x40020458
 80050a8:	40020470 	.word	0x40020470
 80050ac:	40020488 	.word	0x40020488
 80050b0:	400204a0 	.word	0x400204a0
 80050b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 020e 	bic.w	r2, r2, #14
 80050c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a6c      	ldr	r2, [pc, #432]	@ (8005280 <HAL_DMA_Abort_IT+0x3a8>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d04a      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a6b      	ldr	r2, [pc, #428]	@ (8005284 <HAL_DMA_Abort_IT+0x3ac>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d045      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a69      	ldr	r2, [pc, #420]	@ (8005288 <HAL_DMA_Abort_IT+0x3b0>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d040      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a68      	ldr	r2, [pc, #416]	@ (800528c <HAL_DMA_Abort_IT+0x3b4>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d03b      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a66      	ldr	r2, [pc, #408]	@ (8005290 <HAL_DMA_Abort_IT+0x3b8>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d036      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a65      	ldr	r2, [pc, #404]	@ (8005294 <HAL_DMA_Abort_IT+0x3bc>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d031      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a63      	ldr	r2, [pc, #396]	@ (8005298 <HAL_DMA_Abort_IT+0x3c0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d02c      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a62      	ldr	r2, [pc, #392]	@ (800529c <HAL_DMA_Abort_IT+0x3c4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d027      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a60      	ldr	r2, [pc, #384]	@ (80052a0 <HAL_DMA_Abort_IT+0x3c8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d022      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a5f      	ldr	r2, [pc, #380]	@ (80052a4 <HAL_DMA_Abort_IT+0x3cc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d01d      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a5d      	ldr	r2, [pc, #372]	@ (80052a8 <HAL_DMA_Abort_IT+0x3d0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a5c      	ldr	r2, [pc, #368]	@ (80052ac <HAL_DMA_Abort_IT+0x3d4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a5a      	ldr	r2, [pc, #360]	@ (80052b0 <HAL_DMA_Abort_IT+0x3d8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a59      	ldr	r2, [pc, #356]	@ (80052b4 <HAL_DMA_Abort_IT+0x3dc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a57      	ldr	r2, [pc, #348]	@ (80052b8 <HAL_DMA_Abort_IT+0x3e0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <HAL_DMA_Abort_IT+0x290>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a56      	ldr	r2, [pc, #344]	@ (80052bc <HAL_DMA_Abort_IT+0x3e4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d108      	bne.n	800517a <HAL_DMA_Abort_IT+0x2a2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0201 	bic.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	e007      	b.n	800518a <HAL_DMA_Abort_IT+0x2b2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0201 	bic.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a3c      	ldr	r2, [pc, #240]	@ (8005280 <HAL_DMA_Abort_IT+0x3a8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d072      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a3a      	ldr	r2, [pc, #232]	@ (8005284 <HAL_DMA_Abort_IT+0x3ac>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d06d      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a39      	ldr	r2, [pc, #228]	@ (8005288 <HAL_DMA_Abort_IT+0x3b0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d068      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a37      	ldr	r2, [pc, #220]	@ (800528c <HAL_DMA_Abort_IT+0x3b4>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d063      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a36      	ldr	r2, [pc, #216]	@ (8005290 <HAL_DMA_Abort_IT+0x3b8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d05e      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a34      	ldr	r2, [pc, #208]	@ (8005294 <HAL_DMA_Abort_IT+0x3bc>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d059      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a33      	ldr	r2, [pc, #204]	@ (8005298 <HAL_DMA_Abort_IT+0x3c0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d054      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a31      	ldr	r2, [pc, #196]	@ (800529c <HAL_DMA_Abort_IT+0x3c4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d04f      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a30      	ldr	r2, [pc, #192]	@ (80052a0 <HAL_DMA_Abort_IT+0x3c8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d04a      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2e      	ldr	r2, [pc, #184]	@ (80052a4 <HAL_DMA_Abort_IT+0x3cc>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d045      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2d      	ldr	r2, [pc, #180]	@ (80052a8 <HAL_DMA_Abort_IT+0x3d0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d040      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2b      	ldr	r2, [pc, #172]	@ (80052ac <HAL_DMA_Abort_IT+0x3d4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d03b      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a2a      	ldr	r2, [pc, #168]	@ (80052b0 <HAL_DMA_Abort_IT+0x3d8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d036      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a28      	ldr	r2, [pc, #160]	@ (80052b4 <HAL_DMA_Abort_IT+0x3dc>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d031      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a27      	ldr	r2, [pc, #156]	@ (80052b8 <HAL_DMA_Abort_IT+0x3e0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d02c      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a25      	ldr	r2, [pc, #148]	@ (80052bc <HAL_DMA_Abort_IT+0x3e4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d027      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a24      	ldr	r2, [pc, #144]	@ (80052c0 <HAL_DMA_Abort_IT+0x3e8>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d022      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a22      	ldr	r2, [pc, #136]	@ (80052c4 <HAL_DMA_Abort_IT+0x3ec>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d01d      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a21      	ldr	r2, [pc, #132]	@ (80052c8 <HAL_DMA_Abort_IT+0x3f0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d018      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1f      	ldr	r2, [pc, #124]	@ (80052cc <HAL_DMA_Abort_IT+0x3f4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d013      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a1e      	ldr	r2, [pc, #120]	@ (80052d0 <HAL_DMA_Abort_IT+0x3f8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d00e      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1c      	ldr	r2, [pc, #112]	@ (80052d4 <HAL_DMA_Abort_IT+0x3fc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d009      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1b      	ldr	r2, [pc, #108]	@ (80052d8 <HAL_DMA_Abort_IT+0x400>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d004      	beq.n	800527a <HAL_DMA_Abort_IT+0x3a2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a19      	ldr	r2, [pc, #100]	@ (80052dc <HAL_DMA_Abort_IT+0x404>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d132      	bne.n	80052e0 <HAL_DMA_Abort_IT+0x408>
 800527a:	2301      	movs	r3, #1
 800527c:	e031      	b.n	80052e2 <HAL_DMA_Abort_IT+0x40a>
 800527e:	bf00      	nop
 8005280:	40020010 	.word	0x40020010
 8005284:	40020028 	.word	0x40020028
 8005288:	40020040 	.word	0x40020040
 800528c:	40020058 	.word	0x40020058
 8005290:	40020070 	.word	0x40020070
 8005294:	40020088 	.word	0x40020088
 8005298:	400200a0 	.word	0x400200a0
 800529c:	400200b8 	.word	0x400200b8
 80052a0:	40020410 	.word	0x40020410
 80052a4:	40020428 	.word	0x40020428
 80052a8:	40020440 	.word	0x40020440
 80052ac:	40020458 	.word	0x40020458
 80052b0:	40020470 	.word	0x40020470
 80052b4:	40020488 	.word	0x40020488
 80052b8:	400204a0 	.word	0x400204a0
 80052bc:	400204b8 	.word	0x400204b8
 80052c0:	58025408 	.word	0x58025408
 80052c4:	5802541c 	.word	0x5802541c
 80052c8:	58025430 	.word	0x58025430
 80052cc:	58025444 	.word	0x58025444
 80052d0:	58025458 	.word	0x58025458
 80052d4:	5802546c 	.word	0x5802546c
 80052d8:	58025480 	.word	0x58025480
 80052dc:	58025494 	.word	0x58025494
 80052e0:	2300      	movs	r3, #0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d028      	beq.n	8005338 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005300:	f003 031f 	and.w	r3, r3, #31
 8005304:	2201      	movs	r2, #1
 8005306:	409a      	lsls	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005314:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005328:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800532c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005336:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800534c:	2b00      	cmp	r3, #0
 800534e:	d003      	beq.n	8005358 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop

08005364 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005370:	4b67      	ldr	r3, [pc, #412]	@ (8005510 <HAL_DMA_IRQHandler+0x1ac>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a67      	ldr	r2, [pc, #412]	@ (8005514 <HAL_DMA_IRQHandler+0x1b0>)
 8005376:	fba2 2303 	umull	r2, r3, r2, r3
 800537a:	0a9b      	lsrs	r3, r3, #10
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005382:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005388:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a5f      	ldr	r2, [pc, #380]	@ (8005518 <HAL_DMA_IRQHandler+0x1b4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04a      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a5d      	ldr	r2, [pc, #372]	@ (800551c <HAL_DMA_IRQHandler+0x1b8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d045      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5c      	ldr	r2, [pc, #368]	@ (8005520 <HAL_DMA_IRQHandler+0x1bc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d040      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5a      	ldr	r2, [pc, #360]	@ (8005524 <HAL_DMA_IRQHandler+0x1c0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d03b      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a59      	ldr	r2, [pc, #356]	@ (8005528 <HAL_DMA_IRQHandler+0x1c4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d036      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a57      	ldr	r2, [pc, #348]	@ (800552c <HAL_DMA_IRQHandler+0x1c8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a56      	ldr	r2, [pc, #344]	@ (8005530 <HAL_DMA_IRQHandler+0x1cc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d02c      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a54      	ldr	r2, [pc, #336]	@ (8005534 <HAL_DMA_IRQHandler+0x1d0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d027      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a53      	ldr	r2, [pc, #332]	@ (8005538 <HAL_DMA_IRQHandler+0x1d4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d022      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a51      	ldr	r2, [pc, #324]	@ (800553c <HAL_DMA_IRQHandler+0x1d8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01d      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a50      	ldr	r2, [pc, #320]	@ (8005540 <HAL_DMA_IRQHandler+0x1dc>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d018      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a4e      	ldr	r2, [pc, #312]	@ (8005544 <HAL_DMA_IRQHandler+0x1e0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a4d      	ldr	r2, [pc, #308]	@ (8005548 <HAL_DMA_IRQHandler+0x1e4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a4b      	ldr	r2, [pc, #300]	@ (800554c <HAL_DMA_IRQHandler+0x1e8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a4a      	ldr	r2, [pc, #296]	@ (8005550 <HAL_DMA_IRQHandler+0x1ec>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_DMA_IRQHandler+0xd2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a48      	ldr	r2, [pc, #288]	@ (8005554 <HAL_DMA_IRQHandler+0x1f0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <HAL_DMA_IRQHandler+0xd6>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_DMA_IRQHandler+0xd8>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 842b 	beq.w	8005c98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005446:	f003 031f 	and.w	r3, r3, #31
 800544a:	2208      	movs	r2, #8
 800544c:	409a      	lsls	r2, r3
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	4013      	ands	r3, r2
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80a2 	beq.w	800559c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a2e      	ldr	r2, [pc, #184]	@ (8005518 <HAL_DMA_IRQHandler+0x1b4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d04a      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2d      	ldr	r2, [pc, #180]	@ (800551c <HAL_DMA_IRQHandler+0x1b8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d045      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a2b      	ldr	r2, [pc, #172]	@ (8005520 <HAL_DMA_IRQHandler+0x1bc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d040      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a2a      	ldr	r2, [pc, #168]	@ (8005524 <HAL_DMA_IRQHandler+0x1c0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d03b      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a28      	ldr	r2, [pc, #160]	@ (8005528 <HAL_DMA_IRQHandler+0x1c4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d036      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a27      	ldr	r2, [pc, #156]	@ (800552c <HAL_DMA_IRQHandler+0x1c8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d031      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a25      	ldr	r2, [pc, #148]	@ (8005530 <HAL_DMA_IRQHandler+0x1cc>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02c      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a24      	ldr	r2, [pc, #144]	@ (8005534 <HAL_DMA_IRQHandler+0x1d0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d027      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a22      	ldr	r2, [pc, #136]	@ (8005538 <HAL_DMA_IRQHandler+0x1d4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d022      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a21      	ldr	r2, [pc, #132]	@ (800553c <HAL_DMA_IRQHandler+0x1d8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d01d      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005540 <HAL_DMA_IRQHandler+0x1dc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d018      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005544 <HAL_DMA_IRQHandler+0x1e0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005548 <HAL_DMA_IRQHandler+0x1e4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00e      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1b      	ldr	r2, [pc, #108]	@ (800554c <HAL_DMA_IRQHandler+0x1e8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d009      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a19      	ldr	r2, [pc, #100]	@ (8005550 <HAL_DMA_IRQHandler+0x1ec>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d004      	beq.n	80054f8 <HAL_DMA_IRQHandler+0x194>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a18      	ldr	r2, [pc, #96]	@ (8005554 <HAL_DMA_IRQHandler+0x1f0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d12f      	bne.n	8005558 <HAL_DMA_IRQHandler+0x1f4>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	bf14      	ite	ne
 8005506:	2301      	movne	r3, #1
 8005508:	2300      	moveq	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	e02e      	b.n	800556c <HAL_DMA_IRQHandler+0x208>
 800550e:	bf00      	nop
 8005510:	24000054 	.word	0x24000054
 8005514:	1b4e81b5 	.word	0x1b4e81b5
 8005518:	40020010 	.word	0x40020010
 800551c:	40020028 	.word	0x40020028
 8005520:	40020040 	.word	0x40020040
 8005524:	40020058 	.word	0x40020058
 8005528:	40020070 	.word	0x40020070
 800552c:	40020088 	.word	0x40020088
 8005530:	400200a0 	.word	0x400200a0
 8005534:	400200b8 	.word	0x400200b8
 8005538:	40020410 	.word	0x40020410
 800553c:	40020428 	.word	0x40020428
 8005540:	40020440 	.word	0x40020440
 8005544:	40020458 	.word	0x40020458
 8005548:	40020470 	.word	0x40020470
 800554c:	40020488 	.word	0x40020488
 8005550:	400204a0 	.word	0x400204a0
 8005554:	400204b8 	.word	0x400204b8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	bf14      	ite	ne
 8005566:	2301      	movne	r3, #1
 8005568:	2300      	moveq	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d015      	beq.n	800559c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0204 	bic.w	r2, r2, #4
 800557e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005584:	f003 031f 	and.w	r3, r3, #31
 8005588:	2208      	movs	r2, #8
 800558a:	409a      	lsls	r2, r3
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005594:	f043 0201 	orr.w	r2, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a0:	f003 031f 	and.w	r3, r3, #31
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	fa22 f303 	lsr.w	r3, r2, r3
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d06e      	beq.n	8005690 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a69      	ldr	r2, [pc, #420]	@ (800575c <HAL_DMA_IRQHandler+0x3f8>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d04a      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a67      	ldr	r2, [pc, #412]	@ (8005760 <HAL_DMA_IRQHandler+0x3fc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d045      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a66      	ldr	r2, [pc, #408]	@ (8005764 <HAL_DMA_IRQHandler+0x400>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d040      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a64      	ldr	r2, [pc, #400]	@ (8005768 <HAL_DMA_IRQHandler+0x404>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d03b      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a63      	ldr	r2, [pc, #396]	@ (800576c <HAL_DMA_IRQHandler+0x408>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d036      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a61      	ldr	r2, [pc, #388]	@ (8005770 <HAL_DMA_IRQHandler+0x40c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d031      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a60      	ldr	r2, [pc, #384]	@ (8005774 <HAL_DMA_IRQHandler+0x410>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d02c      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a5e      	ldr	r2, [pc, #376]	@ (8005778 <HAL_DMA_IRQHandler+0x414>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d027      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a5d      	ldr	r2, [pc, #372]	@ (800577c <HAL_DMA_IRQHandler+0x418>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d022      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a5b      	ldr	r2, [pc, #364]	@ (8005780 <HAL_DMA_IRQHandler+0x41c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01d      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a5a      	ldr	r2, [pc, #360]	@ (8005784 <HAL_DMA_IRQHandler+0x420>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d018      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a58      	ldr	r2, [pc, #352]	@ (8005788 <HAL_DMA_IRQHandler+0x424>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a57      	ldr	r2, [pc, #348]	@ (800578c <HAL_DMA_IRQHandler+0x428>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a55      	ldr	r2, [pc, #340]	@ (8005790 <HAL_DMA_IRQHandler+0x42c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a54      	ldr	r2, [pc, #336]	@ (8005794 <HAL_DMA_IRQHandler+0x430>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_DMA_IRQHandler+0x2ee>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a52      	ldr	r2, [pc, #328]	@ (8005798 <HAL_DMA_IRQHandler+0x434>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d10a      	bne.n	8005668 <HAL_DMA_IRQHandler+0x304>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	bf14      	ite	ne
 8005660:	2301      	movne	r3, #1
 8005662:	2300      	moveq	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	e003      	b.n	8005670 <HAL_DMA_IRQHandler+0x30c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2300      	movs	r3, #0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00d      	beq.n	8005690 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	2201      	movs	r2, #1
 800567e:	409a      	lsls	r2, r3
 8005680:	6a3b      	ldr	r3, [r7, #32]
 8005682:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005688:	f043 0202 	orr.w	r2, r3, #2
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005694:	f003 031f 	and.w	r3, r3, #31
 8005698:	2204      	movs	r2, #4
 800569a:	409a      	lsls	r2, r3
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	4013      	ands	r3, r2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 808f 	beq.w	80057c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2c      	ldr	r2, [pc, #176]	@ (800575c <HAL_DMA_IRQHandler+0x3f8>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d04a      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005760 <HAL_DMA_IRQHandler+0x3fc>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d045      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a29      	ldr	r2, [pc, #164]	@ (8005764 <HAL_DMA_IRQHandler+0x400>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d040      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a27      	ldr	r2, [pc, #156]	@ (8005768 <HAL_DMA_IRQHandler+0x404>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d03b      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a26      	ldr	r2, [pc, #152]	@ (800576c <HAL_DMA_IRQHandler+0x408>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d036      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a24      	ldr	r2, [pc, #144]	@ (8005770 <HAL_DMA_IRQHandler+0x40c>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d031      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a23      	ldr	r2, [pc, #140]	@ (8005774 <HAL_DMA_IRQHandler+0x410>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d02c      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a21      	ldr	r2, [pc, #132]	@ (8005778 <HAL_DMA_IRQHandler+0x414>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d027      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a20      	ldr	r2, [pc, #128]	@ (800577c <HAL_DMA_IRQHandler+0x418>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d022      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1e      	ldr	r2, [pc, #120]	@ (8005780 <HAL_DMA_IRQHandler+0x41c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01d      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <HAL_DMA_IRQHandler+0x420>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d018      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1b      	ldr	r2, [pc, #108]	@ (8005788 <HAL_DMA_IRQHandler+0x424>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1a      	ldr	r2, [pc, #104]	@ (800578c <HAL_DMA_IRQHandler+0x428>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00e      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a18      	ldr	r2, [pc, #96]	@ (8005790 <HAL_DMA_IRQHandler+0x42c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d009      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a17      	ldr	r2, [pc, #92]	@ (8005794 <HAL_DMA_IRQHandler+0x430>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d004      	beq.n	8005746 <HAL_DMA_IRQHandler+0x3e2>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a15      	ldr	r2, [pc, #84]	@ (8005798 <HAL_DMA_IRQHandler+0x434>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d12a      	bne.n	800579c <HAL_DMA_IRQHandler+0x438>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e023      	b.n	80057a4 <HAL_DMA_IRQHandler+0x440>
 800575c:	40020010 	.word	0x40020010
 8005760:	40020028 	.word	0x40020028
 8005764:	40020040 	.word	0x40020040
 8005768:	40020058 	.word	0x40020058
 800576c:	40020070 	.word	0x40020070
 8005770:	40020088 	.word	0x40020088
 8005774:	400200a0 	.word	0x400200a0
 8005778:	400200b8 	.word	0x400200b8
 800577c:	40020410 	.word	0x40020410
 8005780:	40020428 	.word	0x40020428
 8005784:	40020440 	.word	0x40020440
 8005788:	40020458 	.word	0x40020458
 800578c:	40020470 	.word	0x40020470
 8005790:	40020488 	.word	0x40020488
 8005794:	400204a0 	.word	0x400204a0
 8005798:	400204b8 	.word	0x400204b8
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2300      	movs	r3, #0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00d      	beq.n	80057c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	2204      	movs	r2, #4
 80057b2:	409a      	lsls	r2, r3
 80057b4:	6a3b      	ldr	r3, [r7, #32]
 80057b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057bc:	f043 0204 	orr.w	r2, r3, #4
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057c8:	f003 031f 	and.w	r3, r3, #31
 80057cc:	2210      	movs	r2, #16
 80057ce:	409a      	lsls	r2, r3
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	4013      	ands	r3, r2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a6 	beq.w	8005926 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a85      	ldr	r2, [pc, #532]	@ (80059f4 <HAL_DMA_IRQHandler+0x690>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d04a      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a83      	ldr	r2, [pc, #524]	@ (80059f8 <HAL_DMA_IRQHandler+0x694>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d045      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a82      	ldr	r2, [pc, #520]	@ (80059fc <HAL_DMA_IRQHandler+0x698>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d040      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a80      	ldr	r2, [pc, #512]	@ (8005a00 <HAL_DMA_IRQHandler+0x69c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d03b      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a7f      	ldr	r2, [pc, #508]	@ (8005a04 <HAL_DMA_IRQHandler+0x6a0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d036      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a7d      	ldr	r2, [pc, #500]	@ (8005a08 <HAL_DMA_IRQHandler+0x6a4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d031      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a7c      	ldr	r2, [pc, #496]	@ (8005a0c <HAL_DMA_IRQHandler+0x6a8>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d02c      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a7a      	ldr	r2, [pc, #488]	@ (8005a10 <HAL_DMA_IRQHandler+0x6ac>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d027      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a79      	ldr	r2, [pc, #484]	@ (8005a14 <HAL_DMA_IRQHandler+0x6b0>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d022      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a77      	ldr	r2, [pc, #476]	@ (8005a18 <HAL_DMA_IRQHandler+0x6b4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d01d      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a76      	ldr	r2, [pc, #472]	@ (8005a1c <HAL_DMA_IRQHandler+0x6b8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d018      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a74      	ldr	r2, [pc, #464]	@ (8005a20 <HAL_DMA_IRQHandler+0x6bc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a73      	ldr	r2, [pc, #460]	@ (8005a24 <HAL_DMA_IRQHandler+0x6c0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00e      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a71      	ldr	r2, [pc, #452]	@ (8005a28 <HAL_DMA_IRQHandler+0x6c4>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a70      	ldr	r2, [pc, #448]	@ (8005a2c <HAL_DMA_IRQHandler+0x6c8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d004      	beq.n	800587a <HAL_DMA_IRQHandler+0x516>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a6e      	ldr	r2, [pc, #440]	@ (8005a30 <HAL_DMA_IRQHandler+0x6cc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d10a      	bne.n	8005890 <HAL_DMA_IRQHandler+0x52c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0308 	and.w	r3, r3, #8
 8005884:	2b00      	cmp	r3, #0
 8005886:	bf14      	ite	ne
 8005888:	2301      	movne	r3, #1
 800588a:	2300      	moveq	r3, #0
 800588c:	b2db      	uxtb	r3, r3
 800588e:	e009      	b.n	80058a4 <HAL_DMA_IRQHandler+0x540>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b00      	cmp	r3, #0
 800589c:	bf14      	ite	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	2300      	moveq	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d03e      	beq.n	8005926 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	2210      	movs	r2, #16
 80058b2:	409a      	lsls	r2, r3
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d018      	beq.n	80058f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d108      	bne.n	80058e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d024      	beq.n	8005926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	4798      	blx	r3
 80058e4:	e01f      	b.n	8005926 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01b      	beq.n	8005926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	4798      	blx	r3
 80058f6:	e016      	b.n	8005926 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d107      	bne.n	8005916 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0208 	bic.w	r2, r2, #8
 8005914:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592a:	f003 031f 	and.w	r3, r3, #31
 800592e:	2220      	movs	r2, #32
 8005930:	409a      	lsls	r2, r3
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	4013      	ands	r3, r2
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 8110 	beq.w	8005b5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a2c      	ldr	r2, [pc, #176]	@ (80059f4 <HAL_DMA_IRQHandler+0x690>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d04a      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a2b      	ldr	r2, [pc, #172]	@ (80059f8 <HAL_DMA_IRQHandler+0x694>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d045      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a29      	ldr	r2, [pc, #164]	@ (80059fc <HAL_DMA_IRQHandler+0x698>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d040      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a28      	ldr	r2, [pc, #160]	@ (8005a00 <HAL_DMA_IRQHandler+0x69c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d03b      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a26      	ldr	r2, [pc, #152]	@ (8005a04 <HAL_DMA_IRQHandler+0x6a0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d036      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a25      	ldr	r2, [pc, #148]	@ (8005a08 <HAL_DMA_IRQHandler+0x6a4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d031      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a23      	ldr	r2, [pc, #140]	@ (8005a0c <HAL_DMA_IRQHandler+0x6a8>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d02c      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a22      	ldr	r2, [pc, #136]	@ (8005a10 <HAL_DMA_IRQHandler+0x6ac>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d027      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a20      	ldr	r2, [pc, #128]	@ (8005a14 <HAL_DMA_IRQHandler+0x6b0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d022      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1f      	ldr	r2, [pc, #124]	@ (8005a18 <HAL_DMA_IRQHandler+0x6b4>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d01d      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a1c <HAL_DMA_IRQHandler+0x6b8>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d018      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005a20 <HAL_DMA_IRQHandler+0x6bc>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d013      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005a24 <HAL_DMA_IRQHandler+0x6c0>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00e      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a19      	ldr	r2, [pc, #100]	@ (8005a28 <HAL_DMA_IRQHandler+0x6c4>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d009      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a17      	ldr	r2, [pc, #92]	@ (8005a2c <HAL_DMA_IRQHandler+0x6c8>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d004      	beq.n	80059dc <HAL_DMA_IRQHandler+0x678>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a16      	ldr	r2, [pc, #88]	@ (8005a30 <HAL_DMA_IRQHandler+0x6cc>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d12b      	bne.n	8005a34 <HAL_DMA_IRQHandler+0x6d0>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0310 	and.w	r3, r3, #16
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bf14      	ite	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	2300      	moveq	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	e02a      	b.n	8005a48 <HAL_DMA_IRQHandler+0x6e4>
 80059f2:	bf00      	nop
 80059f4:	40020010 	.word	0x40020010
 80059f8:	40020028 	.word	0x40020028
 80059fc:	40020040 	.word	0x40020040
 8005a00:	40020058 	.word	0x40020058
 8005a04:	40020070 	.word	0x40020070
 8005a08:	40020088 	.word	0x40020088
 8005a0c:	400200a0 	.word	0x400200a0
 8005a10:	400200b8 	.word	0x400200b8
 8005a14:	40020410 	.word	0x40020410
 8005a18:	40020428 	.word	0x40020428
 8005a1c:	40020440 	.word	0x40020440
 8005a20:	40020458 	.word	0x40020458
 8005a24:	40020470 	.word	0x40020470
 8005a28:	40020488 	.word	0x40020488
 8005a2c:	400204a0 	.word	0x400204a0
 8005a30:	400204b8 	.word	0x400204b8
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bf14      	ite	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	2300      	moveq	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 8087 	beq.w	8005b5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a52:	f003 031f 	and.w	r3, r3, #31
 8005a56:	2220      	movs	r2, #32
 8005a58:	409a      	lsls	r2, r3
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d139      	bne.n	8005ade <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0216 	bic.w	r2, r2, #22
 8005a78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d103      	bne.n	8005a9a <HAL_DMA_IRQHandler+0x736>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d007      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0208 	bic.w	r2, r2, #8
 8005aa8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	223f      	movs	r2, #63	@ 0x3f
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8382 	beq.w	80061d8 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	4798      	blx	r3
          }
          return;
 8005adc:	e37c      	b.n	80061d8 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d018      	beq.n	8005b1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d108      	bne.n	8005b0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d02c      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
 8005b0a:	e027      	b.n	8005b5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d023      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	4798      	blx	r3
 8005b1c:	e01e      	b.n	8005b5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10f      	bne.n	8005b4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0210 	bic.w	r2, r2, #16
 8005b3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 833e 	beq.w	80061e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8088 	beq.w	8005c84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2204      	movs	r2, #4
 8005b78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a89      	ldr	r2, [pc, #548]	@ (8005da8 <HAL_DMA_IRQHandler+0xa44>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d04a      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a88      	ldr	r2, [pc, #544]	@ (8005dac <HAL_DMA_IRQHandler+0xa48>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d045      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a86      	ldr	r2, [pc, #536]	@ (8005db0 <HAL_DMA_IRQHandler+0xa4c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d040      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a85      	ldr	r2, [pc, #532]	@ (8005db4 <HAL_DMA_IRQHandler+0xa50>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d03b      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a83      	ldr	r2, [pc, #524]	@ (8005db8 <HAL_DMA_IRQHandler+0xa54>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d036      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a82      	ldr	r2, [pc, #520]	@ (8005dbc <HAL_DMA_IRQHandler+0xa58>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d031      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a80      	ldr	r2, [pc, #512]	@ (8005dc0 <HAL_DMA_IRQHandler+0xa5c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d02c      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7f      	ldr	r2, [pc, #508]	@ (8005dc4 <HAL_DMA_IRQHandler+0xa60>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d027      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a7d      	ldr	r2, [pc, #500]	@ (8005dc8 <HAL_DMA_IRQHandler+0xa64>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d022      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a7c      	ldr	r2, [pc, #496]	@ (8005dcc <HAL_DMA_IRQHandler+0xa68>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d01d      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a7a      	ldr	r2, [pc, #488]	@ (8005dd0 <HAL_DMA_IRQHandler+0xa6c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d018      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a79      	ldr	r2, [pc, #484]	@ (8005dd4 <HAL_DMA_IRQHandler+0xa70>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d013      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a77      	ldr	r2, [pc, #476]	@ (8005dd8 <HAL_DMA_IRQHandler+0xa74>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d00e      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a76      	ldr	r2, [pc, #472]	@ (8005ddc <HAL_DMA_IRQHandler+0xa78>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d009      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a74      	ldr	r2, [pc, #464]	@ (8005de0 <HAL_DMA_IRQHandler+0xa7c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d004      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x8b8>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a73      	ldr	r2, [pc, #460]	@ (8005de4 <HAL_DMA_IRQHandler+0xa80>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d108      	bne.n	8005c2e <HAL_DMA_IRQHandler+0x8ca>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0201 	bic.w	r2, r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e007      	b.n	8005c3e <HAL_DMA_IRQHandler+0x8da>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0201 	bic.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3301      	adds	r3, #1
 8005c42:	60fb      	str	r3, [r7, #12]
 8005c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d307      	bcc.n	8005c5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f2      	bne.n	8005c3e <HAL_DMA_IRQHandler+0x8da>
 8005c58:	e000      	b.n	8005c5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d004      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005c72:	e003      	b.n	8005c7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 82aa 	beq.w	80061e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	4798      	blx	r3
 8005c96:	e2a4      	b.n	80061e2 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a52      	ldr	r2, [pc, #328]	@ (8005de8 <HAL_DMA_IRQHandler+0xa84>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d04a      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a51      	ldr	r2, [pc, #324]	@ (8005dec <HAL_DMA_IRQHandler+0xa88>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d045      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a4f      	ldr	r2, [pc, #316]	@ (8005df0 <HAL_DMA_IRQHandler+0xa8c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d040      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a4e      	ldr	r2, [pc, #312]	@ (8005df4 <HAL_DMA_IRQHandler+0xa90>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d03b      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8005df8 <HAL_DMA_IRQHandler+0xa94>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d036      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a4b      	ldr	r2, [pc, #300]	@ (8005dfc <HAL_DMA_IRQHandler+0xa98>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d031      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a49      	ldr	r2, [pc, #292]	@ (8005e00 <HAL_DMA_IRQHandler+0xa9c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d02c      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a48      	ldr	r2, [pc, #288]	@ (8005e04 <HAL_DMA_IRQHandler+0xaa0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d027      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a46      	ldr	r2, [pc, #280]	@ (8005e08 <HAL_DMA_IRQHandler+0xaa4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d022      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a45      	ldr	r2, [pc, #276]	@ (8005e0c <HAL_DMA_IRQHandler+0xaa8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d01d      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a43      	ldr	r2, [pc, #268]	@ (8005e10 <HAL_DMA_IRQHandler+0xaac>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a42      	ldr	r2, [pc, #264]	@ (8005e14 <HAL_DMA_IRQHandler+0xab0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a40      	ldr	r2, [pc, #256]	@ (8005e18 <HAL_DMA_IRQHandler+0xab4>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00e      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e1c <HAL_DMA_IRQHandler+0xab8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a3d      	ldr	r2, [pc, #244]	@ (8005e20 <HAL_DMA_IRQHandler+0xabc>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_DMA_IRQHandler+0x9d4>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a3c      	ldr	r2, [pc, #240]	@ (8005e24 <HAL_DMA_IRQHandler+0xac0>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d101      	bne.n	8005d3c <HAL_DMA_IRQHandler+0x9d8>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_DMA_IRQHandler+0x9da>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 824f 	beq.w	80061e2 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	2204      	movs	r2, #4
 8005d56:	409a      	lsls	r2, r3
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80dd 	beq.w	8005f1c <HAL_DMA_IRQHandler+0xbb8>
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 80d7 	beq.w	8005f1c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	2204      	movs	r2, #4
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d059      	beq.n	8005e3c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d14a      	bne.n	8005e28 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 8220 	beq.w	80061dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005da4:	e21a      	b.n	80061dc <HAL_DMA_IRQHandler+0xe78>
 8005da6:	bf00      	nop
 8005da8:	40020010 	.word	0x40020010
 8005dac:	40020028 	.word	0x40020028
 8005db0:	40020040 	.word	0x40020040
 8005db4:	40020058 	.word	0x40020058
 8005db8:	40020070 	.word	0x40020070
 8005dbc:	40020088 	.word	0x40020088
 8005dc0:	400200a0 	.word	0x400200a0
 8005dc4:	400200b8 	.word	0x400200b8
 8005dc8:	40020410 	.word	0x40020410
 8005dcc:	40020428 	.word	0x40020428
 8005dd0:	40020440 	.word	0x40020440
 8005dd4:	40020458 	.word	0x40020458
 8005dd8:	40020470 	.word	0x40020470
 8005ddc:	40020488 	.word	0x40020488
 8005de0:	400204a0 	.word	0x400204a0
 8005de4:	400204b8 	.word	0x400204b8
 8005de8:	48022c08 	.word	0x48022c08
 8005dec:	48022c1c 	.word	0x48022c1c
 8005df0:	48022c30 	.word	0x48022c30
 8005df4:	48022c44 	.word	0x48022c44
 8005df8:	48022c58 	.word	0x48022c58
 8005dfc:	48022c6c 	.word	0x48022c6c
 8005e00:	48022c80 	.word	0x48022c80
 8005e04:	48022c94 	.word	0x48022c94
 8005e08:	58025408 	.word	0x58025408
 8005e0c:	5802541c 	.word	0x5802541c
 8005e10:	58025430 	.word	0x58025430
 8005e14:	58025444 	.word	0x58025444
 8005e18:	58025458 	.word	0x58025458
 8005e1c:	5802546c 	.word	0x5802546c
 8005e20:	58025480 	.word	0x58025480
 8005e24:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 81d5 	beq.w	80061dc <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e3a:	e1cf      	b.n	80061dc <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f003 0320 	and.w	r3, r3, #32
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d160      	bne.n	8005f08 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a7f      	ldr	r2, [pc, #508]	@ (8006048 <HAL_DMA_IRQHandler+0xce4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d04a      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a7d      	ldr	r2, [pc, #500]	@ (800604c <HAL_DMA_IRQHandler+0xce8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d045      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a7c      	ldr	r2, [pc, #496]	@ (8006050 <HAL_DMA_IRQHandler+0xcec>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d040      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a7a      	ldr	r2, [pc, #488]	@ (8006054 <HAL_DMA_IRQHandler+0xcf0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d03b      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a79      	ldr	r2, [pc, #484]	@ (8006058 <HAL_DMA_IRQHandler+0xcf4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d036      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a77      	ldr	r2, [pc, #476]	@ (800605c <HAL_DMA_IRQHandler+0xcf8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d031      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a76      	ldr	r2, [pc, #472]	@ (8006060 <HAL_DMA_IRQHandler+0xcfc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d02c      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a74      	ldr	r2, [pc, #464]	@ (8006064 <HAL_DMA_IRQHandler+0xd00>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d027      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a73      	ldr	r2, [pc, #460]	@ (8006068 <HAL_DMA_IRQHandler+0xd04>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d022      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a71      	ldr	r2, [pc, #452]	@ (800606c <HAL_DMA_IRQHandler+0xd08>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01d      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a70      	ldr	r2, [pc, #448]	@ (8006070 <HAL_DMA_IRQHandler+0xd0c>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d018      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a6e      	ldr	r2, [pc, #440]	@ (8006074 <HAL_DMA_IRQHandler+0xd10>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a6d      	ldr	r2, [pc, #436]	@ (8006078 <HAL_DMA_IRQHandler+0xd14>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d00e      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a6b      	ldr	r2, [pc, #428]	@ (800607c <HAL_DMA_IRQHandler+0xd18>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d009      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a6a      	ldr	r2, [pc, #424]	@ (8006080 <HAL_DMA_IRQHandler+0xd1c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d004      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0xb82>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a68      	ldr	r2, [pc, #416]	@ (8006084 <HAL_DMA_IRQHandler+0xd20>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d108      	bne.n	8005ef8 <HAL_DMA_IRQHandler+0xb94>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0208 	bic.w	r2, r2, #8
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	e007      	b.n	8005f08 <HAL_DMA_IRQHandler+0xba4>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0204 	bic.w	r2, r2, #4
 8005f06:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8165 	beq.w	80061dc <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f1a:	e15f      	b.n	80061dc <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f20:	f003 031f 	and.w	r3, r3, #31
 8005f24:	2202      	movs	r2, #2
 8005f26:	409a      	lsls	r2, r3
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80c5 	beq.w	80060bc <HAL_DMA_IRQHandler+0xd58>
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80bf 	beq.w	80060bc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f42:	f003 031f 	and.w	r3, r3, #31
 8005f46:	2202      	movs	r2, #2
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d018      	beq.n	8005f8a <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 813a 	beq.w	80061e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f74:	e134      	b.n	80061e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8130 	beq.w	80061e0 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f88:	e12a      	b.n	80061e0 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 8089 	bne.w	80060a8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8006048 <HAL_DMA_IRQHandler+0xce4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d04a      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a29      	ldr	r2, [pc, #164]	@ (800604c <HAL_DMA_IRQHandler+0xce8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d045      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a28      	ldr	r2, [pc, #160]	@ (8006050 <HAL_DMA_IRQHandler+0xcec>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d040      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a26      	ldr	r2, [pc, #152]	@ (8006054 <HAL_DMA_IRQHandler+0xcf0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d03b      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a25      	ldr	r2, [pc, #148]	@ (8006058 <HAL_DMA_IRQHandler+0xcf4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d036      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a23      	ldr	r2, [pc, #140]	@ (800605c <HAL_DMA_IRQHandler+0xcf8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d031      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a22      	ldr	r2, [pc, #136]	@ (8006060 <HAL_DMA_IRQHandler+0xcfc>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d02c      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a20      	ldr	r2, [pc, #128]	@ (8006064 <HAL_DMA_IRQHandler+0xd00>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d027      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a1f      	ldr	r2, [pc, #124]	@ (8006068 <HAL_DMA_IRQHandler+0xd04>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d022      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800606c <HAL_DMA_IRQHandler+0xd08>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01d      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8006070 <HAL_DMA_IRQHandler+0xd0c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d018      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1a      	ldr	r2, [pc, #104]	@ (8006074 <HAL_DMA_IRQHandler+0xd10>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a19      	ldr	r2, [pc, #100]	@ (8006078 <HAL_DMA_IRQHandler+0xd14>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00e      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a17      	ldr	r2, [pc, #92]	@ (800607c <HAL_DMA_IRQHandler+0xd18>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d009      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a16      	ldr	r2, [pc, #88]	@ (8006080 <HAL_DMA_IRQHandler+0xd1c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d004      	beq.n	8006036 <HAL_DMA_IRQHandler+0xcd2>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a14      	ldr	r2, [pc, #80]	@ (8006084 <HAL_DMA_IRQHandler+0xd20>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d128      	bne.n	8006088 <HAL_DMA_IRQHandler+0xd24>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0214 	bic.w	r2, r2, #20
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e027      	b.n	8006098 <HAL_DMA_IRQHandler+0xd34>
 8006048:	40020010 	.word	0x40020010
 800604c:	40020028 	.word	0x40020028
 8006050:	40020040 	.word	0x40020040
 8006054:	40020058 	.word	0x40020058
 8006058:	40020070 	.word	0x40020070
 800605c:	40020088 	.word	0x40020088
 8006060:	400200a0 	.word	0x400200a0
 8006064:	400200b8 	.word	0x400200b8
 8006068:	40020410 	.word	0x40020410
 800606c:	40020428 	.word	0x40020428
 8006070:	40020440 	.word	0x40020440
 8006074:	40020458 	.word	0x40020458
 8006078:	40020470 	.word	0x40020470
 800607c:	40020488 	.word	0x40020488
 8006080:	400204a0 	.word	0x400204a0
 8006084:	400204b8 	.word	0x400204b8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f022 020a 	bic.w	r2, r2, #10
 8006096:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8097 	beq.w	80061e0 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060ba:	e091      	b.n	80061e0 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c0:	f003 031f 	and.w	r3, r3, #31
 80060c4:	2208      	movs	r2, #8
 80060c6:	409a      	lsls	r2, r3
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 8088 	beq.w	80061e2 <HAL_DMA_IRQHandler+0xe7e>
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 8082 	beq.w	80061e2 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a41      	ldr	r2, [pc, #260]	@ (80061e8 <HAL_DMA_IRQHandler+0xe84>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d04a      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a3f      	ldr	r2, [pc, #252]	@ (80061ec <HAL_DMA_IRQHandler+0xe88>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d045      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a3e      	ldr	r2, [pc, #248]	@ (80061f0 <HAL_DMA_IRQHandler+0xe8c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d040      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a3c      	ldr	r2, [pc, #240]	@ (80061f4 <HAL_DMA_IRQHandler+0xe90>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d03b      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3b      	ldr	r2, [pc, #236]	@ (80061f8 <HAL_DMA_IRQHandler+0xe94>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d036      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a39      	ldr	r2, [pc, #228]	@ (80061fc <HAL_DMA_IRQHandler+0xe98>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d031      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a38      	ldr	r2, [pc, #224]	@ (8006200 <HAL_DMA_IRQHandler+0xe9c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d02c      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a36      	ldr	r2, [pc, #216]	@ (8006204 <HAL_DMA_IRQHandler+0xea0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d027      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a35      	ldr	r2, [pc, #212]	@ (8006208 <HAL_DMA_IRQHandler+0xea4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d022      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a33      	ldr	r2, [pc, #204]	@ (800620c <HAL_DMA_IRQHandler+0xea8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d01d      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a32      	ldr	r2, [pc, #200]	@ (8006210 <HAL_DMA_IRQHandler+0xeac>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d018      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a30      	ldr	r2, [pc, #192]	@ (8006214 <HAL_DMA_IRQHandler+0xeb0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d013      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2f      	ldr	r2, [pc, #188]	@ (8006218 <HAL_DMA_IRQHandler+0xeb4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00e      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2d      	ldr	r2, [pc, #180]	@ (800621c <HAL_DMA_IRQHandler+0xeb8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d009      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2c      	ldr	r2, [pc, #176]	@ (8006220 <HAL_DMA_IRQHandler+0xebc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d004      	beq.n	800617e <HAL_DMA_IRQHandler+0xe1a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a2a      	ldr	r2, [pc, #168]	@ (8006224 <HAL_DMA_IRQHandler+0xec0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d108      	bne.n	8006190 <HAL_DMA_IRQHandler+0xe2c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f022 021c 	bic.w	r2, r2, #28
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	e007      	b.n	80061a0 <HAL_DMA_IRQHandler+0xe3c>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 020e 	bic.w	r2, r2, #14
 800619e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	2201      	movs	r2, #1
 80061aa:	409a      	lsls	r2, r3
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d009      	beq.n	80061e2 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
 80061d6:	e004      	b.n	80061e2 <HAL_DMA_IRQHandler+0xe7e>
          return;
 80061d8:	bf00      	nop
 80061da:	e002      	b.n	80061e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061dc:	bf00      	nop
 80061de:	e000      	b.n	80061e2 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061e0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061e2:	3728      	adds	r7, #40	@ 0x28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40020010 	.word	0x40020010
 80061ec:	40020028 	.word	0x40020028
 80061f0:	40020040 	.word	0x40020040
 80061f4:	40020058 	.word	0x40020058
 80061f8:	40020070 	.word	0x40020070
 80061fc:	40020088 	.word	0x40020088
 8006200:	400200a0 	.word	0x400200a0
 8006204:	400200b8 	.word	0x400200b8
 8006208:	40020410 	.word	0x40020410
 800620c:	40020428 	.word	0x40020428
 8006210:	40020440 	.word	0x40020440
 8006214:	40020458 	.word	0x40020458
 8006218:	40020470 	.word	0x40020470
 800621c:	40020488 	.word	0x40020488
 8006220:	400204a0 	.word	0x400204a0
 8006224:	400204b8 	.word	0x400204b8

08006228 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006240:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a7f      	ldr	r2, [pc, #508]	@ (8006444 <DMA_SetConfig+0x21c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d072      	beq.n	8006332 <DMA_SetConfig+0x10a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a7d      	ldr	r2, [pc, #500]	@ (8006448 <DMA_SetConfig+0x220>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d06d      	beq.n	8006332 <DMA_SetConfig+0x10a>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a7c      	ldr	r2, [pc, #496]	@ (800644c <DMA_SetConfig+0x224>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d068      	beq.n	8006332 <DMA_SetConfig+0x10a>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a7a      	ldr	r2, [pc, #488]	@ (8006450 <DMA_SetConfig+0x228>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d063      	beq.n	8006332 <DMA_SetConfig+0x10a>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a79      	ldr	r2, [pc, #484]	@ (8006454 <DMA_SetConfig+0x22c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d05e      	beq.n	8006332 <DMA_SetConfig+0x10a>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a77      	ldr	r2, [pc, #476]	@ (8006458 <DMA_SetConfig+0x230>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d059      	beq.n	8006332 <DMA_SetConfig+0x10a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a76      	ldr	r2, [pc, #472]	@ (800645c <DMA_SetConfig+0x234>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d054      	beq.n	8006332 <DMA_SetConfig+0x10a>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a74      	ldr	r2, [pc, #464]	@ (8006460 <DMA_SetConfig+0x238>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d04f      	beq.n	8006332 <DMA_SetConfig+0x10a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a73      	ldr	r2, [pc, #460]	@ (8006464 <DMA_SetConfig+0x23c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d04a      	beq.n	8006332 <DMA_SetConfig+0x10a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a71      	ldr	r2, [pc, #452]	@ (8006468 <DMA_SetConfig+0x240>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d045      	beq.n	8006332 <DMA_SetConfig+0x10a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a70      	ldr	r2, [pc, #448]	@ (800646c <DMA_SetConfig+0x244>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d040      	beq.n	8006332 <DMA_SetConfig+0x10a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a6e      	ldr	r2, [pc, #440]	@ (8006470 <DMA_SetConfig+0x248>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d03b      	beq.n	8006332 <DMA_SetConfig+0x10a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a6d      	ldr	r2, [pc, #436]	@ (8006474 <DMA_SetConfig+0x24c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d036      	beq.n	8006332 <DMA_SetConfig+0x10a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a6b      	ldr	r2, [pc, #428]	@ (8006478 <DMA_SetConfig+0x250>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d031      	beq.n	8006332 <DMA_SetConfig+0x10a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a6a      	ldr	r2, [pc, #424]	@ (800647c <DMA_SetConfig+0x254>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d02c      	beq.n	8006332 <DMA_SetConfig+0x10a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a68      	ldr	r2, [pc, #416]	@ (8006480 <DMA_SetConfig+0x258>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d027      	beq.n	8006332 <DMA_SetConfig+0x10a>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a67      	ldr	r2, [pc, #412]	@ (8006484 <DMA_SetConfig+0x25c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d022      	beq.n	8006332 <DMA_SetConfig+0x10a>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a65      	ldr	r2, [pc, #404]	@ (8006488 <DMA_SetConfig+0x260>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01d      	beq.n	8006332 <DMA_SetConfig+0x10a>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a64      	ldr	r2, [pc, #400]	@ (800648c <DMA_SetConfig+0x264>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d018      	beq.n	8006332 <DMA_SetConfig+0x10a>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a62      	ldr	r2, [pc, #392]	@ (8006490 <DMA_SetConfig+0x268>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <DMA_SetConfig+0x10a>
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a61      	ldr	r2, [pc, #388]	@ (8006494 <DMA_SetConfig+0x26c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d00e      	beq.n	8006332 <DMA_SetConfig+0x10a>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a5f      	ldr	r2, [pc, #380]	@ (8006498 <DMA_SetConfig+0x270>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d009      	beq.n	8006332 <DMA_SetConfig+0x10a>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a5e      	ldr	r2, [pc, #376]	@ (800649c <DMA_SetConfig+0x274>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d004      	beq.n	8006332 <DMA_SetConfig+0x10a>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a5c      	ldr	r2, [pc, #368]	@ (80064a0 <DMA_SetConfig+0x278>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d101      	bne.n	8006336 <DMA_SetConfig+0x10e>
 8006332:	2301      	movs	r3, #1
 8006334:	e000      	b.n	8006338 <DMA_SetConfig+0x110>
 8006336:	2300      	movs	r3, #0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00d      	beq.n	8006358 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006344:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006356:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a39      	ldr	r2, [pc, #228]	@ (8006444 <DMA_SetConfig+0x21c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d04a      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a38      	ldr	r2, [pc, #224]	@ (8006448 <DMA_SetConfig+0x220>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d045      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a36      	ldr	r2, [pc, #216]	@ (800644c <DMA_SetConfig+0x224>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d040      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a35      	ldr	r2, [pc, #212]	@ (8006450 <DMA_SetConfig+0x228>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d03b      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a33      	ldr	r2, [pc, #204]	@ (8006454 <DMA_SetConfig+0x22c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d036      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a32      	ldr	r2, [pc, #200]	@ (8006458 <DMA_SetConfig+0x230>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d031      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a30      	ldr	r2, [pc, #192]	@ (800645c <DMA_SetConfig+0x234>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d02c      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006460 <DMA_SetConfig+0x238>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d027      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2d      	ldr	r2, [pc, #180]	@ (8006464 <DMA_SetConfig+0x23c>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d022      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006468 <DMA_SetConfig+0x240>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d01d      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a2a      	ldr	r2, [pc, #168]	@ (800646c <DMA_SetConfig+0x244>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d018      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a29      	ldr	r2, [pc, #164]	@ (8006470 <DMA_SetConfig+0x248>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d013      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a27      	ldr	r2, [pc, #156]	@ (8006474 <DMA_SetConfig+0x24c>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00e      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a26      	ldr	r2, [pc, #152]	@ (8006478 <DMA_SetConfig+0x250>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d009      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a24      	ldr	r2, [pc, #144]	@ (800647c <DMA_SetConfig+0x254>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d004      	beq.n	80063f8 <DMA_SetConfig+0x1d0>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a23      	ldr	r2, [pc, #140]	@ (8006480 <DMA_SetConfig+0x258>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d101      	bne.n	80063fc <DMA_SetConfig+0x1d4>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <DMA_SetConfig+0x1d6>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d059      	beq.n	80064b6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006406:	f003 031f 	and.w	r3, r3, #31
 800640a:	223f      	movs	r2, #63	@ 0x3f
 800640c:	409a      	lsls	r2, r3
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006420:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	2b40      	cmp	r3, #64	@ 0x40
 8006430:	d138      	bne.n	80064a4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006442:	e0ae      	b.n	80065a2 <DMA_SetConfig+0x37a>
 8006444:	40020010 	.word	0x40020010
 8006448:	40020028 	.word	0x40020028
 800644c:	40020040 	.word	0x40020040
 8006450:	40020058 	.word	0x40020058
 8006454:	40020070 	.word	0x40020070
 8006458:	40020088 	.word	0x40020088
 800645c:	400200a0 	.word	0x400200a0
 8006460:	400200b8 	.word	0x400200b8
 8006464:	40020410 	.word	0x40020410
 8006468:	40020428 	.word	0x40020428
 800646c:	40020440 	.word	0x40020440
 8006470:	40020458 	.word	0x40020458
 8006474:	40020470 	.word	0x40020470
 8006478:	40020488 	.word	0x40020488
 800647c:	400204a0 	.word	0x400204a0
 8006480:	400204b8 	.word	0x400204b8
 8006484:	58025408 	.word	0x58025408
 8006488:	5802541c 	.word	0x5802541c
 800648c:	58025430 	.word	0x58025430
 8006490:	58025444 	.word	0x58025444
 8006494:	58025458 	.word	0x58025458
 8006498:	5802546c 	.word	0x5802546c
 800649c:	58025480 	.word	0x58025480
 80064a0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	60da      	str	r2, [r3, #12]
}
 80064b4:	e075      	b.n	80065a2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3d      	ldr	r2, [pc, #244]	@ (80065b0 <DMA_SetConfig+0x388>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d04a      	beq.n	8006556 <DMA_SetConfig+0x32e>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a3b      	ldr	r2, [pc, #236]	@ (80065b4 <DMA_SetConfig+0x38c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d045      	beq.n	8006556 <DMA_SetConfig+0x32e>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a3a      	ldr	r2, [pc, #232]	@ (80065b8 <DMA_SetConfig+0x390>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d040      	beq.n	8006556 <DMA_SetConfig+0x32e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a38      	ldr	r2, [pc, #224]	@ (80065bc <DMA_SetConfig+0x394>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d03b      	beq.n	8006556 <DMA_SetConfig+0x32e>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a37      	ldr	r2, [pc, #220]	@ (80065c0 <DMA_SetConfig+0x398>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d036      	beq.n	8006556 <DMA_SetConfig+0x32e>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a35      	ldr	r2, [pc, #212]	@ (80065c4 <DMA_SetConfig+0x39c>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d031      	beq.n	8006556 <DMA_SetConfig+0x32e>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a34      	ldr	r2, [pc, #208]	@ (80065c8 <DMA_SetConfig+0x3a0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d02c      	beq.n	8006556 <DMA_SetConfig+0x32e>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a32      	ldr	r2, [pc, #200]	@ (80065cc <DMA_SetConfig+0x3a4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d027      	beq.n	8006556 <DMA_SetConfig+0x32e>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a31      	ldr	r2, [pc, #196]	@ (80065d0 <DMA_SetConfig+0x3a8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d022      	beq.n	8006556 <DMA_SetConfig+0x32e>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a2f      	ldr	r2, [pc, #188]	@ (80065d4 <DMA_SetConfig+0x3ac>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d01d      	beq.n	8006556 <DMA_SetConfig+0x32e>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a2e      	ldr	r2, [pc, #184]	@ (80065d8 <DMA_SetConfig+0x3b0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d018      	beq.n	8006556 <DMA_SetConfig+0x32e>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a2c      	ldr	r2, [pc, #176]	@ (80065dc <DMA_SetConfig+0x3b4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d013      	beq.n	8006556 <DMA_SetConfig+0x32e>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a2b      	ldr	r2, [pc, #172]	@ (80065e0 <DMA_SetConfig+0x3b8>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d00e      	beq.n	8006556 <DMA_SetConfig+0x32e>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a29      	ldr	r2, [pc, #164]	@ (80065e4 <DMA_SetConfig+0x3bc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d009      	beq.n	8006556 <DMA_SetConfig+0x32e>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a28      	ldr	r2, [pc, #160]	@ (80065e8 <DMA_SetConfig+0x3c0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <DMA_SetConfig+0x32e>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a26      	ldr	r2, [pc, #152]	@ (80065ec <DMA_SetConfig+0x3c4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d101      	bne.n	800655a <DMA_SetConfig+0x332>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <DMA_SetConfig+0x334>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d020      	beq.n	80065a2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006564:	f003 031f 	and.w	r3, r3, #31
 8006568:	2201      	movs	r2, #1
 800656a:	409a      	lsls	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	2b40      	cmp	r3, #64	@ 0x40
 800657e:	d108      	bne.n	8006592 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	60da      	str	r2, [r3, #12]
}
 8006590:	e007      	b.n	80065a2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	60da      	str	r2, [r3, #12]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	48022c08 	.word	0x48022c08
 80065b4:	48022c1c 	.word	0x48022c1c
 80065b8:	48022c30 	.word	0x48022c30
 80065bc:	48022c44 	.word	0x48022c44
 80065c0:	48022c58 	.word	0x48022c58
 80065c4:	48022c6c 	.word	0x48022c6c
 80065c8:	48022c80 	.word	0x48022c80
 80065cc:	48022c94 	.word	0x48022c94
 80065d0:	58025408 	.word	0x58025408
 80065d4:	5802541c 	.word	0x5802541c
 80065d8:	58025430 	.word	0x58025430
 80065dc:	58025444 	.word	0x58025444
 80065e0:	58025458 	.word	0x58025458
 80065e4:	5802546c 	.word	0x5802546c
 80065e8:	58025480 	.word	0x58025480
 80065ec:	58025494 	.word	0x58025494

080065f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a42      	ldr	r2, [pc, #264]	@ (8006708 <DMA_CalcBaseAndBitshift+0x118>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d04a      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a41      	ldr	r2, [pc, #260]	@ (800670c <DMA_CalcBaseAndBitshift+0x11c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d045      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3f      	ldr	r2, [pc, #252]	@ (8006710 <DMA_CalcBaseAndBitshift+0x120>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d040      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a3e      	ldr	r2, [pc, #248]	@ (8006714 <DMA_CalcBaseAndBitshift+0x124>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d03b      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a3c      	ldr	r2, [pc, #240]	@ (8006718 <DMA_CalcBaseAndBitshift+0x128>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d036      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a3b      	ldr	r2, [pc, #236]	@ (800671c <DMA_CalcBaseAndBitshift+0x12c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d031      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a39      	ldr	r2, [pc, #228]	@ (8006720 <DMA_CalcBaseAndBitshift+0x130>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d02c      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a38      	ldr	r2, [pc, #224]	@ (8006724 <DMA_CalcBaseAndBitshift+0x134>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d027      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a36      	ldr	r2, [pc, #216]	@ (8006728 <DMA_CalcBaseAndBitshift+0x138>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d022      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a35      	ldr	r2, [pc, #212]	@ (800672c <DMA_CalcBaseAndBitshift+0x13c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d01d      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a33      	ldr	r2, [pc, #204]	@ (8006730 <DMA_CalcBaseAndBitshift+0x140>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d018      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a32      	ldr	r2, [pc, #200]	@ (8006734 <DMA_CalcBaseAndBitshift+0x144>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d013      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a30      	ldr	r2, [pc, #192]	@ (8006738 <DMA_CalcBaseAndBitshift+0x148>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d00e      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2f      	ldr	r2, [pc, #188]	@ (800673c <DMA_CalcBaseAndBitshift+0x14c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d009      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2d      	ldr	r2, [pc, #180]	@ (8006740 <DMA_CalcBaseAndBitshift+0x150>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d004      	beq.n	8006698 <DMA_CalcBaseAndBitshift+0xa8>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a2c      	ldr	r2, [pc, #176]	@ (8006744 <DMA_CalcBaseAndBitshift+0x154>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d101      	bne.n	800669c <DMA_CalcBaseAndBitshift+0xac>
 8006698:	2301      	movs	r3, #1
 800669a:	e000      	b.n	800669e <DMA_CalcBaseAndBitshift+0xae>
 800669c:	2300      	movs	r3, #0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d024      	beq.n	80066ec <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	3b10      	subs	r3, #16
 80066aa:	4a27      	ldr	r2, [pc, #156]	@ (8006748 <DMA_CalcBaseAndBitshift+0x158>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	091b      	lsrs	r3, r3, #4
 80066b2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	4a24      	ldr	r2, [pc, #144]	@ (800674c <DMA_CalcBaseAndBitshift+0x15c>)
 80066bc:	5cd3      	ldrb	r3, [r2, r3]
 80066be:	461a      	mov	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d908      	bls.n	80066dc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006750 <DMA_CalcBaseAndBitshift+0x160>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	1d1a      	adds	r2, r3, #4
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80066da:	e00d      	b.n	80066f8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006750 <DMA_CalcBaseAndBitshift+0x160>)
 80066e4:	4013      	ands	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80066ea:	e005      	b.n	80066f8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	40020010 	.word	0x40020010
 800670c:	40020028 	.word	0x40020028
 8006710:	40020040 	.word	0x40020040
 8006714:	40020058 	.word	0x40020058
 8006718:	40020070 	.word	0x40020070
 800671c:	40020088 	.word	0x40020088
 8006720:	400200a0 	.word	0x400200a0
 8006724:	400200b8 	.word	0x400200b8
 8006728:	40020410 	.word	0x40020410
 800672c:	40020428 	.word	0x40020428
 8006730:	40020440 	.word	0x40020440
 8006734:	40020458 	.word	0x40020458
 8006738:	40020470 	.word	0x40020470
 800673c:	40020488 	.word	0x40020488
 8006740:	400204a0 	.word	0x400204a0
 8006744:	400204b8 	.word	0x400204b8
 8006748:	aaaaaaab 	.word	0xaaaaaaab
 800674c:	0800eff4 	.word	0x0800eff4
 8006750:	fffffc00 	.word	0xfffffc00

08006754 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d120      	bne.n	80067aa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	2b03      	cmp	r3, #3
 800676e:	d858      	bhi.n	8006822 <DMA_CheckFifoParam+0xce>
 8006770:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <DMA_CheckFifoParam+0x24>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	08006789 	.word	0x08006789
 800677c:	0800679b 	.word	0x0800679b
 8006780:	08006789 	.word	0x08006789
 8006784:	08006823 	.word	0x08006823
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d048      	beq.n	8006826 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006798:	e045      	b.n	8006826 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800679e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067a2:	d142      	bne.n	800682a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067a8:	e03f      	b.n	800682a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80067b2:	d123      	bne.n	80067fc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d838      	bhi.n	800682e <DMA_CheckFifoParam+0xda>
 80067bc:	a201      	add	r2, pc, #4	@ (adr r2, 80067c4 <DMA_CheckFifoParam+0x70>)
 80067be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c2:	bf00      	nop
 80067c4:	080067d5 	.word	0x080067d5
 80067c8:	080067db 	.word	0x080067db
 80067cc:	080067d5 	.word	0x080067d5
 80067d0:	080067ed 	.word	0x080067ed
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	73fb      	strb	r3, [r7, #15]
        break;
 80067d8:	e030      	b.n	800683c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d025      	beq.n	8006832 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ea:	e022      	b.n	8006832 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80067f4:	d11f      	bne.n	8006836 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067fa:	e01c      	b.n	8006836 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006800:	2b02      	cmp	r3, #2
 8006802:	d902      	bls.n	800680a <DMA_CheckFifoParam+0xb6>
 8006804:	2b03      	cmp	r3, #3
 8006806:	d003      	beq.n	8006810 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006808:	e018      	b.n	800683c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	73fb      	strb	r3, [r7, #15]
        break;
 800680e:	e015      	b.n	800683c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006814:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00e      	beq.n	800683a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	73fb      	strb	r3, [r7, #15]
    break;
 8006820:	e00b      	b.n	800683a <DMA_CheckFifoParam+0xe6>
        break;
 8006822:	bf00      	nop
 8006824:	e00a      	b.n	800683c <DMA_CheckFifoParam+0xe8>
        break;
 8006826:	bf00      	nop
 8006828:	e008      	b.n	800683c <DMA_CheckFifoParam+0xe8>
        break;
 800682a:	bf00      	nop
 800682c:	e006      	b.n	800683c <DMA_CheckFifoParam+0xe8>
        break;
 800682e:	bf00      	nop
 8006830:	e004      	b.n	800683c <DMA_CheckFifoParam+0xe8>
        break;
 8006832:	bf00      	nop
 8006834:	e002      	b.n	800683c <DMA_CheckFifoParam+0xe8>
        break;
 8006836:	bf00      	nop
 8006838:	e000      	b.n	800683c <DMA_CheckFifoParam+0xe8>
    break;
 800683a:	bf00      	nop
    }
  }

  return status;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
 800684a:	bf00      	nop

0800684c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a38      	ldr	r2, [pc, #224]	@ (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d022      	beq.n	80068aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a36      	ldr	r2, [pc, #216]	@ (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01d      	beq.n	80068aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a35      	ldr	r2, [pc, #212]	@ (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d018      	beq.n	80068aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a33      	ldr	r2, [pc, #204]	@ (800694c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d013      	beq.n	80068aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a32      	ldr	r2, [pc, #200]	@ (8006950 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d00e      	beq.n	80068aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a30      	ldr	r2, [pc, #192]	@ (8006954 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d009      	beq.n	80068aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2f      	ldr	r2, [pc, #188]	@ (8006958 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d004      	beq.n	80068aa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a2d      	ldr	r2, [pc, #180]	@ (800695c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d101      	bne.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80068ae:	2300      	movs	r3, #0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01a      	beq.n	80068ea <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	3b08      	subs	r3, #8
 80068bc:	4a28      	ldr	r2, [pc, #160]	@ (8006960 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80068be:	fba2 2303 	umull	r2, r3, r2, r3
 80068c2:	091b      	lsrs	r3, r3, #4
 80068c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4b26      	ldr	r3, [pc, #152]	@ (8006964 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	461a      	mov	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a24      	ldr	r2, [pc, #144]	@ (8006968 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f003 031f 	and.w	r3, r3, #31
 80068e0:	2201      	movs	r2, #1
 80068e2:	409a      	lsls	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068e8:	e024      	b.n	8006934 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	3b10      	subs	r3, #16
 80068f2:	4a1e      	ldr	r2, [pc, #120]	@ (800696c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068f4:	fba2 2303 	umull	r2, r3, r2, r3
 80068f8:	091b      	lsrs	r3, r3, #4
 80068fa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d806      	bhi.n	8006912 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4a1b      	ldr	r2, [pc, #108]	@ (8006974 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d902      	bls.n	8006912 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3308      	adds	r3, #8
 8006910:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4b18      	ldr	r3, [pc, #96]	@ (8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	461a      	mov	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a16      	ldr	r2, [pc, #88]	@ (800697c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006924:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	2201      	movs	r2, #1
 800692e:	409a      	lsls	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	58025408 	.word	0x58025408
 8006944:	5802541c 	.word	0x5802541c
 8006948:	58025430 	.word	0x58025430
 800694c:	58025444 	.word	0x58025444
 8006950:	58025458 	.word	0x58025458
 8006954:	5802546c 	.word	0x5802546c
 8006958:	58025480 	.word	0x58025480
 800695c:	58025494 	.word	0x58025494
 8006960:	cccccccd 	.word	0xcccccccd
 8006964:	16009600 	.word	0x16009600
 8006968:	58025880 	.word	0x58025880
 800696c:	aaaaaaab 	.word	0xaaaaaaab
 8006970:	400204b8 	.word	0x400204b8
 8006974:	4002040f 	.word	0x4002040f
 8006978:	10008200 	.word	0x10008200
 800697c:	40020880 	.word	0x40020880

08006980 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d04a      	beq.n	8006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b08      	cmp	r3, #8
 800699a:	d847      	bhi.n	8006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a25      	ldr	r2, [pc, #148]	@ (8006a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d022      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a24      	ldr	r2, [pc, #144]	@ (8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d01d      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a22      	ldr	r2, [pc, #136]	@ (8006a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d018      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a21      	ldr	r2, [pc, #132]	@ (8006a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00e      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1e      	ldr	r2, [pc, #120]	@ (8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d009      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d101      	bne.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069f0:	2300      	movs	r3, #0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4b17      	ldr	r3, [pc, #92]	@ (8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	461a      	mov	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a15      	ldr	r2, [pc, #84]	@ (8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a08:	671a      	str	r2, [r3, #112]	@ 0x70
 8006a0a:	e009      	b.n	8006a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4b14      	ldr	r3, [pc, #80]	@ (8006a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	461a      	mov	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a11      	ldr	r2, [pc, #68]	@ (8006a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a1e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	2201      	movs	r2, #1
 8006a26:	409a      	lsls	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	58025408 	.word	0x58025408
 8006a3c:	5802541c 	.word	0x5802541c
 8006a40:	58025430 	.word	0x58025430
 8006a44:	58025444 	.word	0x58025444
 8006a48:	58025458 	.word	0x58025458
 8006a4c:	5802546c 	.word	0x5802546c
 8006a50:	58025480 	.word	0x58025480
 8006a54:	58025494 	.word	0x58025494
 8006a58:	1600963f 	.word	0x1600963f
 8006a5c:	58025940 	.word	0x58025940
 8006a60:	1000823f 	.word	0x1000823f
 8006a64:	40020940 	.word	0x40020940

08006a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	@ 0x24
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a76:	4b89      	ldr	r3, [pc, #548]	@ (8006c9c <HAL_GPIO_Init+0x234>)
 8006a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a7a:	e194      	b.n	8006da6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	2101      	movs	r1, #1
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	fa01 f303 	lsl.w	r3, r1, r3
 8006a88:	4013      	ands	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8186 	beq.w	8006da0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f003 0303 	and.w	r3, r3, #3
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d005      	beq.n	8006aac <HAL_GPIO_Init+0x44>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d130      	bne.n	8006b0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	005b      	lsls	r3, r3, #1
 8006ab6:	2203      	movs	r2, #3
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	43db      	mvns	r3, r3
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	005b      	lsls	r3, r3, #1
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aea:	43db      	mvns	r3, r3
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	4013      	ands	r3, r2
 8006af0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	091b      	lsrs	r3, r3, #4
 8006af8:	f003 0201 	and.w	r2, r3, #1
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	fa02 f303 	lsl.w	r3, r2, r3
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f003 0303 	and.w	r3, r3, #3
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d017      	beq.n	8006b4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	2203      	movs	r2, #3
 8006b26:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2a:	43db      	mvns	r3, r3
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	4013      	ands	r3, r2
 8006b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	689a      	ldr	r2, [r3, #8]
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d123      	bne.n	8006b9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	08da      	lsrs	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	3208      	adds	r2, #8
 8006b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	220f      	movs	r2, #15
 8006b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b72:	43db      	mvns	r3, r3
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	4013      	ands	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	08da      	lsrs	r2, r3, #3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3208      	adds	r2, #8
 8006b98:	69b9      	ldr	r1, [r7, #24]
 8006b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	005b      	lsls	r3, r3, #1
 8006ba8:	2203      	movs	r2, #3
 8006baa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f003 0203 	and.w	r2, r3, #3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	005b      	lsls	r3, r3, #1
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69ba      	ldr	r2, [r7, #24]
 8006bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 80e0 	beq.w	8006da0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006be0:	4b2f      	ldr	r3, [pc, #188]	@ (8006ca0 <HAL_GPIO_Init+0x238>)
 8006be2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006be6:	4a2e      	ldr	r2, [pc, #184]	@ (8006ca0 <HAL_GPIO_Init+0x238>)
 8006be8:	f043 0302 	orr.w	r3, r3, #2
 8006bec:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8006ca0 <HAL_GPIO_Init+0x238>)
 8006bf2:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006bfe:	4a29      	ldr	r2, [pc, #164]	@ (8006ca4 <HAL_GPIO_Init+0x23c>)
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	089b      	lsrs	r3, r3, #2
 8006c04:	3302      	adds	r3, #2
 8006c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	220f      	movs	r2, #15
 8006c16:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	69ba      	ldr	r2, [r7, #24]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a20      	ldr	r2, [pc, #128]	@ (8006ca8 <HAL_GPIO_Init+0x240>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d052      	beq.n	8006cd0 <HAL_GPIO_Init+0x268>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8006cac <HAL_GPIO_Init+0x244>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d031      	beq.n	8006c96 <HAL_GPIO_Init+0x22e>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a1e      	ldr	r2, [pc, #120]	@ (8006cb0 <HAL_GPIO_Init+0x248>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d02b      	beq.n	8006c92 <HAL_GPIO_Init+0x22a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb4 <HAL_GPIO_Init+0x24c>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d025      	beq.n	8006c8e <HAL_GPIO_Init+0x226>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb8 <HAL_GPIO_Init+0x250>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d01f      	beq.n	8006c8a <HAL_GPIO_Init+0x222>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cbc <HAL_GPIO_Init+0x254>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d019      	beq.n	8006c86 <HAL_GPIO_Init+0x21e>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1a      	ldr	r2, [pc, #104]	@ (8006cc0 <HAL_GPIO_Init+0x258>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d013      	beq.n	8006c82 <HAL_GPIO_Init+0x21a>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a19      	ldr	r2, [pc, #100]	@ (8006cc4 <HAL_GPIO_Init+0x25c>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d00d      	beq.n	8006c7e <HAL_GPIO_Init+0x216>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a18      	ldr	r2, [pc, #96]	@ (8006cc8 <HAL_GPIO_Init+0x260>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d007      	beq.n	8006c7a <HAL_GPIO_Init+0x212>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a17      	ldr	r2, [pc, #92]	@ (8006ccc <HAL_GPIO_Init+0x264>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d101      	bne.n	8006c76 <HAL_GPIO_Init+0x20e>
 8006c72:	2309      	movs	r3, #9
 8006c74:	e02d      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c76:	230a      	movs	r3, #10
 8006c78:	e02b      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	e029      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c7e:	2307      	movs	r3, #7
 8006c80:	e027      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c82:	2306      	movs	r3, #6
 8006c84:	e025      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c86:	2305      	movs	r3, #5
 8006c88:	e023      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c8a:	2304      	movs	r3, #4
 8006c8c:	e021      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e01f      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e01d      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e01b      	b.n	8006cd2 <HAL_GPIO_Init+0x26a>
 8006c9a:	bf00      	nop
 8006c9c:	58000080 	.word	0x58000080
 8006ca0:	58024400 	.word	0x58024400
 8006ca4:	58000400 	.word	0x58000400
 8006ca8:	58020000 	.word	0x58020000
 8006cac:	58020400 	.word	0x58020400
 8006cb0:	58020800 	.word	0x58020800
 8006cb4:	58020c00 	.word	0x58020c00
 8006cb8:	58021000 	.word	0x58021000
 8006cbc:	58021400 	.word	0x58021400
 8006cc0:	58021800 	.word	0x58021800
 8006cc4:	58021c00 	.word	0x58021c00
 8006cc8:	58022000 	.word	0x58022000
 8006ccc:	58022400 	.word	0x58022400
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	69fa      	ldr	r2, [r7, #28]
 8006cd4:	f002 0203 	and.w	r2, r2, #3
 8006cd8:	0092      	lsls	r2, r2, #2
 8006cda:	4093      	lsls	r3, r2
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ce2:	4938      	ldr	r1, [pc, #224]	@ (8006dc4 <HAL_GPIO_Init+0x35c>)
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	089b      	lsrs	r3, r3, #2
 8006ce8:	3302      	adds	r3, #2
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	4013      	ands	r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d92:	69ba      	ldr	r2, [r7, #24]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	3301      	adds	r3, #1
 8006da4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	fa22 f303 	lsr.w	r3, r2, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f47f ae63 	bne.w	8006a7c <HAL_GPIO_Init+0x14>
  }
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	3724      	adds	r7, #36	@ 0x24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	58000400 	.word	0x58000400

08006dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	807b      	strh	r3, [r7, #2]
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006dd8:	787b      	ldrb	r3, [r7, #1]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dde:	887a      	ldrh	r2, [r7, #2]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006de4:	e003      	b.n	8006dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006de6:	887b      	ldrh	r3, [r7, #2]
 8006de8:	041a      	lsls	r2, r3, #16
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	619a      	str	r2, [r3, #24]
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006e00:	4b05      	ldr	r3, [pc, #20]	@ (8006e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a04      	ldr	r2, [pc, #16]	@ (8006e18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e0a:	6013      	str	r3, [r2, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	58024800 	.word	0x58024800

08006e1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006e24:	4b29      	ldr	r3, [pc, #164]	@ (8006ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	2b06      	cmp	r3, #6
 8006e2e:	d00a      	beq.n	8006e46 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e30:	4b26      	ldr	r3, [pc, #152]	@ (8006ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d001      	beq.n	8006e42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e040      	b.n	8006ec4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	e03e      	b.n	8006ec4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e46:	4b21      	ldr	r3, [pc, #132]	@ (8006ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006e4e:	491f      	ldr	r1, [pc, #124]	@ (8006ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e56:	f7fb f8af 	bl	8001fb8 <HAL_GetTick>
 8006e5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e5c:	e009      	b.n	8006e72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e5e:	f7fb f8ab 	bl	8001fb8 <HAL_GetTick>
 8006e62:	4602      	mov	r2, r0
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e6c:	d901      	bls.n	8006e72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e028      	b.n	8006ec4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e72:	4b16      	ldr	r3, [pc, #88]	@ (8006ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e7e:	d1ee      	bne.n	8006e5e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b1e      	cmp	r3, #30
 8006e84:	d008      	beq.n	8006e98 <HAL_PWREx_ConfigSupply+0x7c>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e8a:	d005      	beq.n	8006e98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b1d      	cmp	r3, #29
 8006e90:	d002      	beq.n	8006e98 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2b2d      	cmp	r3, #45	@ 0x2d
 8006e96:	d114      	bne.n	8006ec2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006e98:	f7fb f88e 	bl	8001fb8 <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e9e:	e009      	b.n	8006eb4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ea0:	f7fb f88a 	bl	8001fb8 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eae:	d901      	bls.n	8006eb4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e007      	b.n	8006ec4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006eb4:	4b05      	ldr	r3, [pc, #20]	@ (8006ecc <HAL_PWREx_ConfigSupply+0xb0>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ec0:	d1ee      	bne.n	8006ea0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	58024800 	.word	0x58024800

08006ed0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08c      	sub	sp, #48	@ 0x30
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d102      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f000 bc1f 	b.w	8007722 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80b3 	beq.w	8007058 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ef2:	4b95      	ldr	r3, [pc, #596]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006efc:	4b92      	ldr	r3, [pc, #584]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f00:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d007      	beq.n	8006f18 <HAL_RCC_OscConfig+0x48>
 8006f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0a:	2b18      	cmp	r3, #24
 8006f0c:	d112      	bne.n	8006f34 <HAL_RCC_OscConfig+0x64>
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	f003 0303 	and.w	r3, r3, #3
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d10d      	bne.n	8006f34 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f18:	4b8b      	ldr	r3, [pc, #556]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 8098 	beq.w	8007056 <HAL_RCC_OscConfig+0x186>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f040 8093 	bne.w	8007056 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e3f6      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f3c:	d106      	bne.n	8006f4c <HAL_RCC_OscConfig+0x7c>
 8006f3e:	4b82      	ldr	r3, [pc, #520]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a81      	ldr	r2, [pc, #516]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f48:	6013      	str	r3, [r2, #0]
 8006f4a:	e058      	b.n	8006ffe <HAL_RCC_OscConfig+0x12e>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d112      	bne.n	8006f7a <HAL_RCC_OscConfig+0xaa>
 8006f54:	4b7c      	ldr	r3, [pc, #496]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a7b      	ldr	r2, [pc, #492]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f5e:	6013      	str	r3, [r2, #0]
 8006f60:	4b79      	ldr	r3, [pc, #484]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a78      	ldr	r2, [pc, #480]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f66:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	4b76      	ldr	r3, [pc, #472]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a75      	ldr	r2, [pc, #468]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	e041      	b.n	8006ffe <HAL_RCC_OscConfig+0x12e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f82:	d112      	bne.n	8006faa <HAL_RCC_OscConfig+0xda>
 8006f84:	4b70      	ldr	r3, [pc, #448]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a6f      	ldr	r2, [pc, #444]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f8a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	4b6d      	ldr	r3, [pc, #436]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a6c      	ldr	r2, [pc, #432]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f96:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a69      	ldr	r2, [pc, #420]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fa6:	6013      	str	r3, [r2, #0]
 8006fa8:	e029      	b.n	8006ffe <HAL_RCC_OscConfig+0x12e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006fb2:	d112      	bne.n	8006fda <HAL_RCC_OscConfig+0x10a>
 8006fb4:	4b64      	ldr	r3, [pc, #400]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a63      	ldr	r2, [pc, #396]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fba:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	4b61      	ldr	r3, [pc, #388]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a60      	ldr	r2, [pc, #384]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	e011      	b.n	8006ffe <HAL_RCC_OscConfig+0x12e>
 8006fda:	4b5b      	ldr	r3, [pc, #364]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a5a      	ldr	r2, [pc, #360]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	4b58      	ldr	r3, [pc, #352]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a57      	ldr	r2, [pc, #348]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006fec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ff0:	6013      	str	r3, [r2, #0]
 8006ff2:	4b55      	ldr	r3, [pc, #340]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a54      	ldr	r2, [pc, #336]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8006ff8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006ffc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d013      	beq.n	800702e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007006:	f7fa ffd7 	bl	8001fb8 <HAL_GetTick>
 800700a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800700c:	e008      	b.n	8007020 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800700e:	f7fa ffd3 	bl	8001fb8 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b64      	cmp	r3, #100	@ 0x64
 800701a:	d901      	bls.n	8007020 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800701c:	2303      	movs	r3, #3
 800701e:	e380      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007020:	4b49      	ldr	r3, [pc, #292]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f0      	beq.n	800700e <HAL_RCC_OscConfig+0x13e>
 800702c:	e014      	b.n	8007058 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702e:	f7fa ffc3 	bl	8001fb8 <HAL_GetTick>
 8007032:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007034:	e008      	b.n	8007048 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007036:	f7fa ffbf 	bl	8001fb8 <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b64      	cmp	r3, #100	@ 0x64
 8007042:	d901      	bls.n	8007048 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e36c      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007048:	4b3f      	ldr	r3, [pc, #252]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1f0      	bne.n	8007036 <HAL_RCC_OscConfig+0x166>
 8007054:	e000      	b.n	8007058 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007056:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 808c 	beq.w	800717e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007066:	4b38      	ldr	r3, [pc, #224]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800706e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007070:	4b35      	ldr	r3, [pc, #212]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8007072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007074:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d007      	beq.n	800708c <HAL_RCC_OscConfig+0x1bc>
 800707c:	6a3b      	ldr	r3, [r7, #32]
 800707e:	2b18      	cmp	r3, #24
 8007080:	d137      	bne.n	80070f2 <HAL_RCC_OscConfig+0x222>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d132      	bne.n	80070f2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800708c:	4b2e      	ldr	r3, [pc, #184]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d005      	beq.n	80070a4 <HAL_RCC_OscConfig+0x1d4>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e33e      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070a4:	4b28      	ldr	r3, [pc, #160]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f023 0219 	bic.w	r2, r3, #25
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	4925      	ldr	r1, [pc, #148]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b6:	f7fa ff7f 	bl	8001fb8 <HAL_GetTick>
 80070ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070bc:	e008      	b.n	80070d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070be:	f7fa ff7b 	bl	8001fb8 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e328      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0f0      	beq.n	80070be <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	061b      	lsls	r3, r3, #24
 80070ea:	4917      	ldr	r1, [pc, #92]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 80070ec:	4313      	orrs	r3, r2
 80070ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070f0:	e045      	b.n	800717e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d028      	beq.n	800714c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070fa:	4b13      	ldr	r3, [pc, #76]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f023 0219 	bic.w	r2, r3, #25
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	4910      	ldr	r1, [pc, #64]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8007108:	4313      	orrs	r3, r2
 800710a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710c:	f7fa ff54 	bl	8001fb8 <HAL_GetTick>
 8007110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007114:	f7fa ff50 	bl	8001fb8 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b02      	cmp	r3, #2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e2fd      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007126:	4b08      	ldr	r3, [pc, #32]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0304 	and.w	r3, r3, #4
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0f0      	beq.n	8007114 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007132:	4b05      	ldr	r3, [pc, #20]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	061b      	lsls	r3, r3, #24
 8007140:	4901      	ldr	r1, [pc, #4]	@ (8007148 <HAL_RCC_OscConfig+0x278>)
 8007142:	4313      	orrs	r3, r2
 8007144:	604b      	str	r3, [r1, #4]
 8007146:	e01a      	b.n	800717e <HAL_RCC_OscConfig+0x2ae>
 8007148:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800714c:	4b97      	ldr	r3, [pc, #604]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a96      	ldr	r2, [pc, #600]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007152:	f023 0301 	bic.w	r3, r3, #1
 8007156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fa ff2e 	bl	8001fb8 <HAL_GetTick>
 800715c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007160:	f7fa ff2a 	bl	8001fb8 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e2d7      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007172:	4b8e      	ldr	r3, [pc, #568]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0304 	and.w	r3, r3, #4
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f0      	bne.n	8007160 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0310 	and.w	r3, r3, #16
 8007186:	2b00      	cmp	r3, #0
 8007188:	d06a      	beq.n	8007260 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800718a:	4b88      	ldr	r3, [pc, #544]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007192:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007194:	4b85      	ldr	r3, [pc, #532]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007198:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	2b08      	cmp	r3, #8
 800719e:	d007      	beq.n	80071b0 <HAL_RCC_OscConfig+0x2e0>
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	2b18      	cmp	r3, #24
 80071a4:	d11b      	bne.n	80071de <HAL_RCC_OscConfig+0x30e>
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f003 0303 	and.w	r3, r3, #3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d116      	bne.n	80071de <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071b0:	4b7e      	ldr	r3, [pc, #504]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <HAL_RCC_OscConfig+0x2f8>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	2b80      	cmp	r3, #128	@ 0x80
 80071c2:	d001      	beq.n	80071c8 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e2ac      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071c8:	4b78      	ldr	r3, [pc, #480]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	061b      	lsls	r3, r3, #24
 80071d6:	4975      	ldr	r1, [pc, #468]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071dc:	e040      	b.n	8007260 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69db      	ldr	r3, [r3, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d023      	beq.n	800722e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071e6:	4b71      	ldr	r3, [pc, #452]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a70      	ldr	r2, [pc, #448]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80071ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f2:	f7fa fee1 	bl	8001fb8 <HAL_GetTick>
 80071f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071fa:	f7fa fedd 	bl	8001fb8 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e28a      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800720c:	4b67      	ldr	r3, [pc, #412]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0f0      	beq.n	80071fa <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007218:	4b64      	ldr	r3, [pc, #400]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	061b      	lsls	r3, r3, #24
 8007226:	4961      	ldr	r1, [pc, #388]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007228:	4313      	orrs	r3, r2
 800722a:	60cb      	str	r3, [r1, #12]
 800722c:	e018      	b.n	8007260 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800722e:	4b5f      	ldr	r3, [pc, #380]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a5e      	ldr	r2, [pc, #376]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007234:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800723a:	f7fa febd 	bl	8001fb8 <HAL_GetTick>
 800723e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007240:	e008      	b.n	8007254 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007242:	f7fa feb9 	bl	8001fb8 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e266      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007254:	4b55      	ldr	r3, [pc, #340]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1f0      	bne.n	8007242 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d036      	beq.n	80072da <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d019      	beq.n	80072a8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007274:	4b4d      	ldr	r3, [pc, #308]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007276:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007278:	4a4c      	ldr	r2, [pc, #304]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 800727a:	f043 0301 	orr.w	r3, r3, #1
 800727e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007280:	f7fa fe9a 	bl	8001fb8 <HAL_GetTick>
 8007284:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007286:	e008      	b.n	800729a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007288:	f7fa fe96 	bl	8001fb8 <HAL_GetTick>
 800728c:	4602      	mov	r2, r0
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	2b02      	cmp	r3, #2
 8007294:	d901      	bls.n	800729a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007296:	2303      	movs	r3, #3
 8007298:	e243      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800729a:	4b44      	ldr	r3, [pc, #272]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 800729c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d0f0      	beq.n	8007288 <HAL_RCC_OscConfig+0x3b8>
 80072a6:	e018      	b.n	80072da <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072a8:	4b40      	ldr	r3, [pc, #256]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80072aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ac:	4a3f      	ldr	r2, [pc, #252]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80072ae:	f023 0301 	bic.w	r3, r3, #1
 80072b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072b4:	f7fa fe80 	bl	8001fb8 <HAL_GetTick>
 80072b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072ba:	e008      	b.n	80072ce <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072bc:	f7fa fe7c 	bl	8001fb8 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e229      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80072ce:	4b37      	ldr	r3, [pc, #220]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80072d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072d2:	f003 0302 	and.w	r3, r3, #2
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d036      	beq.n	8007354 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	699b      	ldr	r3, [r3, #24]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d019      	beq.n	8007322 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072ee:	4b2f      	ldr	r3, [pc, #188]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a2e      	ldr	r2, [pc, #184]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80072f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80072f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072fa:	f7fa fe5d 	bl	8001fb8 <HAL_GetTick>
 80072fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007300:	e008      	b.n	8007314 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007302:	f7fa fe59 	bl	8001fb8 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d901      	bls.n	8007314 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e206      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007314:	4b25      	ldr	r3, [pc, #148]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0f0      	beq.n	8007302 <HAL_RCC_OscConfig+0x432>
 8007320:	e018      	b.n	8007354 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007322:	4b22      	ldr	r3, [pc, #136]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a21      	ldr	r2, [pc, #132]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 8007328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800732c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800732e:	f7fa fe43 	bl	8001fb8 <HAL_GetTick>
 8007332:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007334:	e008      	b.n	8007348 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007336:	f7fa fe3f 	bl	8001fb8 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e1ec      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007348:	4b18      	ldr	r3, [pc, #96]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1f0      	bne.n	8007336 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0304 	and.w	r3, r3, #4
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 80af 	beq.w	80074c0 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007362:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <HAL_RCC_OscConfig+0x4e0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a12      	ldr	r2, [pc, #72]	@ (80073b0 <HAL_RCC_OscConfig+0x4e0>)
 8007368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800736c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800736e:	f7fa fe23 	bl	8001fb8 <HAL_GetTick>
 8007372:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007374:	e008      	b.n	8007388 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007376:	f7fa fe1f 	bl	8001fb8 <HAL_GetTick>
 800737a:	4602      	mov	r2, r0
 800737c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737e:	1ad3      	subs	r3, r2, r3
 8007380:	2b64      	cmp	r3, #100	@ 0x64
 8007382:	d901      	bls.n	8007388 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e1cc      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007388:	4b09      	ldr	r3, [pc, #36]	@ (80073b0 <HAL_RCC_OscConfig+0x4e0>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0f0      	beq.n	8007376 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d10b      	bne.n	80073b4 <HAL_RCC_OscConfig+0x4e4>
 800739c:	4b03      	ldr	r3, [pc, #12]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 800739e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a0:	4a02      	ldr	r2, [pc, #8]	@ (80073ac <HAL_RCC_OscConfig+0x4dc>)
 80073a2:	f043 0301 	orr.w	r3, r3, #1
 80073a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80073a8:	e05b      	b.n	8007462 <HAL_RCC_OscConfig+0x592>
 80073aa:	bf00      	nop
 80073ac:	58024400 	.word	0x58024400
 80073b0:	58024800 	.word	0x58024800
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d112      	bne.n	80073e2 <HAL_RCC_OscConfig+0x512>
 80073bc:	4b9d      	ldr	r3, [pc, #628]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c0:	4a9c      	ldr	r2, [pc, #624]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073c2:	f023 0301 	bic.w	r3, r3, #1
 80073c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80073c8:	4b9a      	ldr	r3, [pc, #616]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073cc:	4a99      	ldr	r2, [pc, #612]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80073d4:	4b97      	ldr	r3, [pc, #604]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d8:	4a96      	ldr	r2, [pc, #600]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073da:	f023 0304 	bic.w	r3, r3, #4
 80073de:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e0:	e03f      	b.n	8007462 <HAL_RCC_OscConfig+0x592>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2b05      	cmp	r3, #5
 80073e8:	d112      	bne.n	8007410 <HAL_RCC_OscConfig+0x540>
 80073ea:	4b92      	ldr	r3, [pc, #584]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ee:	4a91      	ldr	r2, [pc, #580]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073f0:	f043 0304 	orr.w	r3, r3, #4
 80073f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073f6:	4b8f      	ldr	r3, [pc, #572]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073fa:	4a8e      	ldr	r2, [pc, #568]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80073fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007400:	6713      	str	r3, [r2, #112]	@ 0x70
 8007402:	4b8c      	ldr	r3, [pc, #560]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007406:	4a8b      	ldr	r2, [pc, #556]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007408:	f043 0301 	orr.w	r3, r3, #1
 800740c:	6713      	str	r3, [r2, #112]	@ 0x70
 800740e:	e028      	b.n	8007462 <HAL_RCC_OscConfig+0x592>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	2b85      	cmp	r3, #133	@ 0x85
 8007416:	d112      	bne.n	800743e <HAL_RCC_OscConfig+0x56e>
 8007418:	4b86      	ldr	r3, [pc, #536]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800741a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741c:	4a85      	ldr	r2, [pc, #532]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800741e:	f043 0304 	orr.w	r3, r3, #4
 8007422:	6713      	str	r3, [r2, #112]	@ 0x70
 8007424:	4b83      	ldr	r3, [pc, #524]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007428:	4a82      	ldr	r2, [pc, #520]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800742a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800742e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007430:	4b80      	ldr	r3, [pc, #512]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007434:	4a7f      	ldr	r2, [pc, #508]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007436:	f043 0301 	orr.w	r3, r3, #1
 800743a:	6713      	str	r3, [r2, #112]	@ 0x70
 800743c:	e011      	b.n	8007462 <HAL_RCC_OscConfig+0x592>
 800743e:	4b7d      	ldr	r3, [pc, #500]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007442:	4a7c      	ldr	r2, [pc, #496]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007444:	f023 0301 	bic.w	r3, r3, #1
 8007448:	6713      	str	r3, [r2, #112]	@ 0x70
 800744a:	4b7a      	ldr	r3, [pc, #488]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800744c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800744e:	4a79      	ldr	r2, [pc, #484]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007450:	f023 0304 	bic.w	r3, r3, #4
 8007454:	6713      	str	r3, [r2, #112]	@ 0x70
 8007456:	4b77      	ldr	r3, [pc, #476]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800745a:	4a76      	ldr	r2, [pc, #472]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800745c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007460:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d015      	beq.n	8007496 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800746a:	f7fa fda5 	bl	8001fb8 <HAL_GetTick>
 800746e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007470:	e00a      	b.n	8007488 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007472:	f7fa fda1 	bl	8001fb8 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007480:	4293      	cmp	r3, r2
 8007482:	d901      	bls.n	8007488 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e14c      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007488:	4b6a      	ldr	r3, [pc, #424]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800748a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0ee      	beq.n	8007472 <HAL_RCC_OscConfig+0x5a2>
 8007494:	e014      	b.n	80074c0 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007496:	f7fa fd8f 	bl	8001fb8 <HAL_GetTick>
 800749a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800749c:	e00a      	b.n	80074b4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800749e:	f7fa fd8b 	bl	8001fb8 <HAL_GetTick>
 80074a2:	4602      	mov	r2, r0
 80074a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a6:	1ad3      	subs	r3, r2, r3
 80074a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e136      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074b4:	4b5f      	ldr	r3, [pc, #380]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80074b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1ee      	bne.n	800749e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 812b 	beq.w	8007720 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074ca:	4b5a      	ldr	r3, [pc, #360]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074d2:	2b18      	cmp	r3, #24
 80074d4:	f000 80bb 	beq.w	800764e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074dc:	2b02      	cmp	r3, #2
 80074de:	f040 8095 	bne.w	800760c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074e2:	4b54      	ldr	r3, [pc, #336]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a53      	ldr	r2, [pc, #332]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80074e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ee:	f7fa fd63 	bl	8001fb8 <HAL_GetTick>
 80074f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074f4:	e008      	b.n	8007508 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f6:	f7fa fd5f 	bl	8001fb8 <HAL_GetTick>
 80074fa:	4602      	mov	r2, r0
 80074fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fe:	1ad3      	subs	r3, r2, r3
 8007500:	2b02      	cmp	r3, #2
 8007502:	d901      	bls.n	8007508 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8007504:	2303      	movs	r3, #3
 8007506:	e10c      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007508:	4b4a      	ldr	r3, [pc, #296]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1f0      	bne.n	80074f6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007514:	4b47      	ldr	r3, [pc, #284]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007516:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007518:	4b47      	ldr	r3, [pc, #284]	@ (8007638 <HAL_RCC_OscConfig+0x768>)
 800751a:	4013      	ands	r3, r2
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007524:	0112      	lsls	r2, r2, #4
 8007526:	430a      	orrs	r2, r1
 8007528:	4942      	ldr	r1, [pc, #264]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800752a:	4313      	orrs	r3, r2
 800752c:	628b      	str	r3, [r1, #40]	@ 0x28
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007532:	3b01      	subs	r3, #1
 8007534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800753c:	3b01      	subs	r3, #1
 800753e:	025b      	lsls	r3, r3, #9
 8007540:	b29b      	uxth	r3, r3
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007548:	3b01      	subs	r3, #1
 800754a:	041b      	lsls	r3, r3, #16
 800754c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007550:	431a      	orrs	r2, r3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007556:	3b01      	subs	r3, #1
 8007558:	061b      	lsls	r3, r3, #24
 800755a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800755e:	4935      	ldr	r1, [pc, #212]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007560:	4313      	orrs	r3, r2
 8007562:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007564:	4b33      	ldr	r3, [pc, #204]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007568:	4a32      	ldr	r2, [pc, #200]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800756a:	f023 0301 	bic.w	r3, r3, #1
 800756e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007570:	4b30      	ldr	r3, [pc, #192]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007572:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007574:	4b31      	ldr	r3, [pc, #196]	@ (800763c <HAL_RCC_OscConfig+0x76c>)
 8007576:	4013      	ands	r3, r2
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800757c:	00d2      	lsls	r2, r2, #3
 800757e:	492d      	ldr	r1, [pc, #180]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007580:	4313      	orrs	r3, r2
 8007582:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007584:	4b2b      	ldr	r3, [pc, #172]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	f023 020c 	bic.w	r2, r3, #12
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007590:	4928      	ldr	r1, [pc, #160]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007592:	4313      	orrs	r3, r2
 8007594:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007596:	4b27      	ldr	r3, [pc, #156]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	f023 0202 	bic.w	r2, r3, #2
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a2:	4924      	ldr	r1, [pc, #144]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075a8:	4b22      	ldr	r3, [pc, #136]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ac:	4a21      	ldr	r2, [pc, #132]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b4:	4b1f      	ldr	r3, [pc, #124]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075c0:	4b1c      	ldr	r3, [pc, #112]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075c4:	4a1b      	ldr	r2, [pc, #108]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80075cc:	4b19      	ldr	r3, [pc, #100]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	4a18      	ldr	r2, [pc, #96]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075d2:	f043 0301 	orr.w	r3, r3, #1
 80075d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075d8:	4b16      	ldr	r3, [pc, #88]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a15      	ldr	r2, [pc, #84]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 80075de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075e4:	f7fa fce8 	bl	8001fb8 <HAL_GetTick>
 80075e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075ea:	e008      	b.n	80075fe <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075ec:	f7fa fce4 	bl	8001fb8 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d901      	bls.n	80075fe <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e091      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCC_OscConfig+0x71c>
 800760a:	e089      	b.n	8007720 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800760c:	4b09      	ldr	r3, [pc, #36]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a08      	ldr	r2, [pc, #32]	@ (8007634 <HAL_RCC_OscConfig+0x764>)
 8007612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007618:	f7fa fcce 	bl	8001fb8 <HAL_GetTick>
 800761c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800761e:	e00f      	b.n	8007640 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007620:	f7fa fcca 	bl	8001fb8 <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b02      	cmp	r3, #2
 800762c:	d908      	bls.n	8007640 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e077      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
 8007632:	bf00      	nop
 8007634:	58024400 	.word	0x58024400
 8007638:	fffffc0c 	.word	0xfffffc0c
 800763c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007640:	4b3a      	ldr	r3, [pc, #232]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e9      	bne.n	8007620 <HAL_RCC_OscConfig+0x750>
 800764c:	e068      	b.n	8007720 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800764e:	4b37      	ldr	r3, [pc, #220]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 8007650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007652:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007654:	4b35      	ldr	r3, [pc, #212]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 8007656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007658:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765e:	2b01      	cmp	r3, #1
 8007660:	d031      	beq.n	80076c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f003 0203 	and.w	r2, r3, #3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800766c:	429a      	cmp	r2, r3
 800766e:	d12a      	bne.n	80076c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	091b      	lsrs	r3, r3, #4
 8007674:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800767c:	429a      	cmp	r2, r3
 800767e:	d122      	bne.n	80076c6 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800768c:	429a      	cmp	r2, r3
 800768e:	d11a      	bne.n	80076c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	0a5b      	lsrs	r3, r3, #9
 8007694:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800769e:	429a      	cmp	r2, r3
 80076a0:	d111      	bne.n	80076c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	0c1b      	lsrs	r3, r3, #16
 80076a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ae:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d108      	bne.n	80076c6 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	0e1b      	lsrs	r3, r3, #24
 80076b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d001      	beq.n	80076ca <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e02b      	b.n	8007722 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80076ca:	4b18      	ldr	r3, [pc, #96]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 80076cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ce:	08db      	lsrs	r3, r3, #3
 80076d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d01f      	beq.n	8007720 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80076e0:	4b12      	ldr	r3, [pc, #72]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	4a11      	ldr	r2, [pc, #68]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 80076e6:	f023 0301 	bic.w	r3, r3, #1
 80076ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076ec:	f7fa fc64 	bl	8001fb8 <HAL_GetTick>
 80076f0:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80076f2:	bf00      	nop
 80076f4:	f7fa fc60 	bl	8001fb8 <HAL_GetTick>
 80076f8:	4602      	mov	r2, r0
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d0f9      	beq.n	80076f4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007700:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 8007702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007704:	4b0a      	ldr	r3, [pc, #40]	@ (8007730 <HAL_RCC_OscConfig+0x860>)
 8007706:	4013      	ands	r3, r2
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800770c:	00d2      	lsls	r2, r2, #3
 800770e:	4907      	ldr	r1, [pc, #28]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 8007710:	4313      	orrs	r3, r2
 8007712:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007714:	4b05      	ldr	r3, [pc, #20]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 8007716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007718:	4a04      	ldr	r2, [pc, #16]	@ (800772c <HAL_RCC_OscConfig+0x85c>)
 800771a:	f043 0301 	orr.w	r3, r3, #1
 800771e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3730      	adds	r7, #48	@ 0x30
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
 8007730:	ffff0007 	.word	0xffff0007

08007734 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b086      	sub	sp, #24
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e19c      	b.n	8007a82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007748:	4b8a      	ldr	r3, [pc, #552]	@ (8007974 <HAL_RCC_ClockConfig+0x240>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d910      	bls.n	8007778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007756:	4b87      	ldr	r3, [pc, #540]	@ (8007974 <HAL_RCC_ClockConfig+0x240>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f023 020f 	bic.w	r2, r3, #15
 800775e:	4985      	ldr	r1, [pc, #532]	@ (8007974 <HAL_RCC_ClockConfig+0x240>)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	4313      	orrs	r3, r2
 8007764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007766:	4b83      	ldr	r3, [pc, #524]	@ (8007974 <HAL_RCC_ClockConfig+0x240>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	429a      	cmp	r2, r3
 8007772:	d001      	beq.n	8007778 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e184      	b.n	8007a82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0304 	and.w	r3, r3, #4
 8007780:	2b00      	cmp	r3, #0
 8007782:	d010      	beq.n	80077a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691a      	ldr	r2, [r3, #16]
 8007788:	4b7b      	ldr	r3, [pc, #492]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007790:	429a      	cmp	r2, r3
 8007792:	d908      	bls.n	80077a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007794:	4b78      	ldr	r3, [pc, #480]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	4975      	ldr	r1, [pc, #468]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0308 	and.w	r3, r3, #8
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d010      	beq.n	80077d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	695a      	ldr	r2, [r3, #20]
 80077b6:	4b70      	ldr	r3, [pc, #448]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077be:	429a      	cmp	r2, r3
 80077c0:	d908      	bls.n	80077d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077c2:	4b6d      	ldr	r3, [pc, #436]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	496a      	ldr	r1, [pc, #424]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d010      	beq.n	8007802 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699a      	ldr	r2, [r3, #24]
 80077e4:	4b64      	ldr	r3, [pc, #400]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d908      	bls.n	8007802 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077f0:	4b61      	ldr	r3, [pc, #388]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	495e      	ldr	r1, [pc, #376]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	2b00      	cmp	r3, #0
 800780c:	d010      	beq.n	8007830 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69da      	ldr	r2, [r3, #28]
 8007812:	4b59      	ldr	r3, [pc, #356]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800781a:	429a      	cmp	r2, r3
 800781c:	d908      	bls.n	8007830 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800781e:	4b56      	ldr	r3, [pc, #344]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	4953      	ldr	r1, [pc, #332]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 800782c:	4313      	orrs	r3, r2
 800782e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d010      	beq.n	800785e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68da      	ldr	r2, [r3, #12]
 8007840:	4b4d      	ldr	r3, [pc, #308]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f003 030f 	and.w	r3, r3, #15
 8007848:	429a      	cmp	r2, r3
 800784a:	d908      	bls.n	800785e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800784c:	4b4a      	ldr	r3, [pc, #296]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	f023 020f 	bic.w	r2, r3, #15
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	4947      	ldr	r1, [pc, #284]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 800785a:	4313      	orrs	r3, r2
 800785c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d055      	beq.n	8007916 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800786a:	4b43      	ldr	r3, [pc, #268]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	4940      	ldr	r1, [pc, #256]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007878:	4313      	orrs	r3, r2
 800787a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	2b02      	cmp	r3, #2
 8007882:	d107      	bne.n	8007894 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007884:	4b3c      	ldr	r3, [pc, #240]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d121      	bne.n	80078d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e0f6      	b.n	8007a82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d107      	bne.n	80078ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800789c:	4b36      	ldr	r3, [pc, #216]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d115      	bne.n	80078d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e0ea      	b.n	8007a82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d107      	bne.n	80078c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078b4:	4b30      	ldr	r3, [pc, #192]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d109      	bne.n	80078d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e0de      	b.n	8007a82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078c4:	4b2c      	ldr	r3, [pc, #176]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0304 	and.w	r3, r3, #4
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e0d6      	b.n	8007a82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078d4:	4b28      	ldr	r3, [pc, #160]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	f023 0207 	bic.w	r2, r3, #7
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4925      	ldr	r1, [pc, #148]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e6:	f7fa fb67 	bl	8001fb8 <HAL_GetTick>
 80078ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ec:	e00a      	b.n	8007904 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078ee:	f7fa fb63 	bl	8001fb8 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d901      	bls.n	8007904 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e0be      	b.n	8007a82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007904:	4b1c      	ldr	r3, [pc, #112]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	00db      	lsls	r3, r3, #3
 8007912:	429a      	cmp	r2, r3
 8007914:	d1eb      	bne.n	80078ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d010      	beq.n	8007944 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	4b14      	ldr	r3, [pc, #80]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	429a      	cmp	r2, r3
 8007930:	d208      	bcs.n	8007944 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007932:	4b11      	ldr	r3, [pc, #68]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007934:	699b      	ldr	r3, [r3, #24]
 8007936:	f023 020f 	bic.w	r2, r3, #15
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	490e      	ldr	r1, [pc, #56]	@ (8007978 <HAL_RCC_ClockConfig+0x244>)
 8007940:	4313      	orrs	r3, r2
 8007942:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007944:	4b0b      	ldr	r3, [pc, #44]	@ (8007974 <HAL_RCC_ClockConfig+0x240>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 030f 	and.w	r3, r3, #15
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d214      	bcs.n	800797c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007952:	4b08      	ldr	r3, [pc, #32]	@ (8007974 <HAL_RCC_ClockConfig+0x240>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f023 020f 	bic.w	r2, r3, #15
 800795a:	4906      	ldr	r1, [pc, #24]	@ (8007974 <HAL_RCC_ClockConfig+0x240>)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	4313      	orrs	r3, r2
 8007960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007962:	4b04      	ldr	r3, [pc, #16]	@ (8007974 <HAL_RCC_ClockConfig+0x240>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 030f 	and.w	r3, r3, #15
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	429a      	cmp	r2, r3
 800796e:	d005      	beq.n	800797c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e086      	b.n	8007a82 <HAL_RCC_ClockConfig+0x34e>
 8007974:	52002000 	.word	0x52002000
 8007978:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0304 	and.w	r3, r3, #4
 8007984:	2b00      	cmp	r3, #0
 8007986:	d010      	beq.n	80079aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007994:	429a      	cmp	r2, r3
 8007996:	d208      	bcs.n	80079aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007998:	4b3c      	ldr	r3, [pc, #240]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	4939      	ldr	r1, [pc, #228]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0308 	and.w	r3, r3, #8
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d010      	beq.n	80079d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695a      	ldr	r2, [r3, #20]
 80079ba:	4b34      	ldr	r3, [pc, #208]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d208      	bcs.n	80079d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079c6:	4b31      	ldr	r3, [pc, #196]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	492e      	ldr	r1, [pc, #184]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0310 	and.w	r3, r3, #16
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d010      	beq.n	8007a06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	699a      	ldr	r2, [r3, #24]
 80079e8:	4b28      	ldr	r3, [pc, #160]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d208      	bcs.n	8007a06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079f4:	4b25      	ldr	r3, [pc, #148]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	4922      	ldr	r1, [pc, #136]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0320 	and.w	r3, r3, #32
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d010      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	69da      	ldr	r2, [r3, #28]
 8007a16:	4b1d      	ldr	r3, [pc, #116]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d208      	bcs.n	8007a34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a22:	4b1a      	ldr	r3, [pc, #104]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	4917      	ldr	r1, [pc, #92]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8007a34:	f000 f89e 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	4b14      	ldr	r3, [pc, #80]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	0a1b      	lsrs	r3, r3, #8
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	4912      	ldr	r1, [pc, #72]	@ (8007a90 <HAL_RCC_ClockConfig+0x35c>)
 8007a46:	5ccb      	ldrb	r3, [r1, r3]
 8007a48:	f003 031f 	and.w	r3, r3, #31
 8007a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a50:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007a52:	4b0e      	ldr	r3, [pc, #56]	@ (8007a8c <HAL_RCC_ClockConfig+0x358>)
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	4a0d      	ldr	r2, [pc, #52]	@ (8007a90 <HAL_RCC_ClockConfig+0x35c>)
 8007a5c:	5cd3      	ldrb	r3, [r2, r3]
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	fa22 f303 	lsr.w	r3, r2, r3
 8007a68:	4a0a      	ldr	r2, [pc, #40]	@ (8007a94 <HAL_RCC_ClockConfig+0x360>)
 8007a6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a98 <HAL_RCC_ClockConfig+0x364>)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007a72:	4b0a      	ldr	r3, [pc, #40]	@ (8007a9c <HAL_RCC_ClockConfig+0x368>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fa fa54 	bl	8001f24 <HAL_InitTick>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3718      	adds	r7, #24
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	0800efe4 	.word	0x0800efe4
 8007a94:	24000058 	.word	0x24000058
 8007a98:	24000054 	.word	0x24000054
 8007a9c:	2400005c 	.word	0x2400005c

08007aa0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	@ 0x30
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d12a      	bne.n	8007b08 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007ab4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007ac2:	4b29      	ldr	r3, [pc, #164]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007ac4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	61bb      	str	r3, [r7, #24]
 8007ace:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ada:	2303      	movs	r3, #3
 8007adc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007ae6:	f107 031c 	add.w	r3, r7, #28
 8007aea:	4619      	mov	r1, r3
 8007aec:	481f      	ldr	r0, [pc, #124]	@ (8007b6c <HAL_RCC_MCOConfig+0xcc>)
 8007aee:	f7fe ffbb 	bl	8006a68 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007af2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	430b      	orrs	r3, r1
 8007b00:	4919      	ldr	r1, [pc, #100]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007b02:	4313      	orrs	r3, r2
 8007b04:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007b06:	e02a      	b.n	8007b5e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007b08:	4b17      	ldr	r3, [pc, #92]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007b0a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007b0e:	4a16      	ldr	r2, [pc, #88]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007b10:	f043 0304 	orr.w	r3, r3, #4
 8007b14:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007b18:	4b13      	ldr	r3, [pc, #76]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b30:	2303      	movs	r3, #3
 8007b32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b34:	2300      	movs	r3, #0
 8007b36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007b3c:	f107 031c 	add.w	r3, r7, #28
 8007b40:	4619      	mov	r1, r3
 8007b42:	480b      	ldr	r0, [pc, #44]	@ (8007b70 <HAL_RCC_MCOConfig+0xd0>)
 8007b44:	f7fe ff90 	bl	8006a68 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007b48:	4b07      	ldr	r3, [pc, #28]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	01d9      	lsls	r1, r3, #7
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	430b      	orrs	r3, r1
 8007b58:	4903      	ldr	r1, [pc, #12]	@ (8007b68 <HAL_RCC_MCOConfig+0xc8>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	610b      	str	r3, [r1, #16]
}
 8007b5e:	bf00      	nop
 8007b60:	3730      	adds	r7, #48	@ 0x30
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	58024400 	.word	0x58024400
 8007b6c:	58020000 	.word	0x58020000
 8007b70:	58020800 	.word	0x58020800

08007b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b089      	sub	sp, #36	@ 0x24
 8007b78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b7a:	4bb3      	ldr	r3, [pc, #716]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b82:	2b18      	cmp	r3, #24
 8007b84:	f200 8155 	bhi.w	8007e32 <HAL_RCC_GetSysClockFreq+0x2be>
 8007b88:	a201      	add	r2, pc, #4	@ (adr r2, 8007b90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8e:	bf00      	nop
 8007b90:	08007bf5 	.word	0x08007bf5
 8007b94:	08007e33 	.word	0x08007e33
 8007b98:	08007e33 	.word	0x08007e33
 8007b9c:	08007e33 	.word	0x08007e33
 8007ba0:	08007e33 	.word	0x08007e33
 8007ba4:	08007e33 	.word	0x08007e33
 8007ba8:	08007e33 	.word	0x08007e33
 8007bac:	08007e33 	.word	0x08007e33
 8007bb0:	08007c1b 	.word	0x08007c1b
 8007bb4:	08007e33 	.word	0x08007e33
 8007bb8:	08007e33 	.word	0x08007e33
 8007bbc:	08007e33 	.word	0x08007e33
 8007bc0:	08007e33 	.word	0x08007e33
 8007bc4:	08007e33 	.word	0x08007e33
 8007bc8:	08007e33 	.word	0x08007e33
 8007bcc:	08007e33 	.word	0x08007e33
 8007bd0:	08007c21 	.word	0x08007c21
 8007bd4:	08007e33 	.word	0x08007e33
 8007bd8:	08007e33 	.word	0x08007e33
 8007bdc:	08007e33 	.word	0x08007e33
 8007be0:	08007e33 	.word	0x08007e33
 8007be4:	08007e33 	.word	0x08007e33
 8007be8:	08007e33 	.word	0x08007e33
 8007bec:	08007e33 	.word	0x08007e33
 8007bf0:	08007c27 	.word	0x08007c27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bf4:	4b94      	ldr	r3, [pc, #592]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0320 	and.w	r3, r3, #32
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d009      	beq.n	8007c14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c00:	4b91      	ldr	r3, [pc, #580]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	08db      	lsrs	r3, r3, #3
 8007c06:	f003 0303 	and.w	r3, r3, #3
 8007c0a:	4a90      	ldr	r2, [pc, #576]	@ (8007e4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007c12:	e111      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c14:	4b8d      	ldr	r3, [pc, #564]	@ (8007e4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c16:	61bb      	str	r3, [r7, #24]
      break;
 8007c18:	e10e      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8007e50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c1c:	61bb      	str	r3, [r7, #24]
      break;
 8007c1e:	e10b      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007c20:	4b8c      	ldr	r3, [pc, #560]	@ (8007e54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c22:	61bb      	str	r3, [r7, #24]
      break;
 8007c24:	e108      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c26:	4b88      	ldr	r3, [pc, #544]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007c30:	4b85      	ldr	r3, [pc, #532]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c34:	091b      	lsrs	r3, r3, #4
 8007c36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c3c:	4b82      	ldr	r3, [pc, #520]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	f003 0301 	and.w	r3, r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007c46:	4b80      	ldr	r3, [pc, #512]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c4a:	08db      	lsrs	r3, r3, #3
 8007c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	fb02 f303 	mul.w	r3, r2, r3
 8007c56:	ee07 3a90 	vmov	s15, r3
 8007c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80e1 	beq.w	8007e2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	f000 8083 	beq.w	8007d78 <HAL_RCC_GetSysClockFreq+0x204>
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	f200 80a1 	bhi.w	8007dbc <HAL_RCC_GetSysClockFreq+0x248>
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <HAL_RCC_GetSysClockFreq+0x114>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d056      	beq.n	8007d34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c86:	e099      	b.n	8007dbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c88:	4b6f      	ldr	r3, [pc, #444]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f003 0320 	and.w	r3, r3, #32
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d02d      	beq.n	8007cf0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c94:	4b6c      	ldr	r3, [pc, #432]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	08db      	lsrs	r3, r3, #3
 8007c9a:	f003 0303 	and.w	r3, r3, #3
 8007c9e:	4a6b      	ldr	r2, [pc, #428]	@ (8007e4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	ee07 3a90 	vmov	s15, r3
 8007cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cbe:	4b62      	ldr	r3, [pc, #392]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cd2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007cee:	e087      	b.n	8007e00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	ee07 3a90 	vmov	s15, r3
 8007cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007e5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d02:	4b51      	ldr	r3, [pc, #324]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d32:	e065      	b.n	8007e00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007e60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d46:	4b40      	ldr	r3, [pc, #256]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d56:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d76:	e043      	b.n	8007e00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007e64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dba:	e021      	b.n	8007e00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007e60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dce:	4b1e      	ldr	r3, [pc, #120]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dde:	ed97 6a02 	vldr	s12, [r7, #8]
 8007de2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007e58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007dfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007e00:	4b11      	ldr	r3, [pc, #68]	@ (8007e48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e04:	0a5b      	lsrs	r3, r3, #9
 8007e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	ee07 3a90 	vmov	s15, r3
 8007e14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e18:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e24:	ee17 3a90 	vmov	r3, s15
 8007e28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007e2a:	e005      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61bb      	str	r3, [r7, #24]
      break;
 8007e30:	e002      	b.n	8007e38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007e32:	4b07      	ldr	r3, [pc, #28]	@ (8007e50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e34:	61bb      	str	r3, [r7, #24]
      break;
 8007e36:	bf00      	nop
  }

  return sysclockfreq;
 8007e38:	69bb      	ldr	r3, [r7, #24]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3724      	adds	r7, #36	@ 0x24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	58024400 	.word	0x58024400
 8007e4c:	03d09000 	.word	0x03d09000
 8007e50:	003d0900 	.word	0x003d0900
 8007e54:	007a1200 	.word	0x007a1200
 8007e58:	46000000 	.word	0x46000000
 8007e5c:	4c742400 	.word	0x4c742400
 8007e60:	4a742400 	.word	0x4a742400
 8007e64:	4af42400 	.word	0x4af42400

08007e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007e6e:	f7ff fe81 	bl	8007b74 <HAL_RCC_GetSysClockFreq>
 8007e72:	4602      	mov	r2, r0
 8007e74:	4b10      	ldr	r3, [pc, #64]	@ (8007eb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	0a1b      	lsrs	r3, r3, #8
 8007e7a:	f003 030f 	and.w	r3, r3, #15
 8007e7e:	490f      	ldr	r1, [pc, #60]	@ (8007ebc <HAL_RCC_GetHCLKFreq+0x54>)
 8007e80:	5ccb      	ldrb	r3, [r1, r3]
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8a:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	f003 030f 	and.w	r3, r3, #15
 8007e94:	4a09      	ldr	r2, [pc, #36]	@ (8007ebc <HAL_RCC_GetHCLKFreq+0x54>)
 8007e96:	5cd3      	ldrb	r3, [r2, r3]
 8007e98:	f003 031f 	and.w	r3, r3, #31
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea2:	4a07      	ldr	r2, [pc, #28]	@ (8007ec0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ea4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ea6:	4a07      	ldr	r2, [pc, #28]	@ (8007ec4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007eac:	4b04      	ldr	r3, [pc, #16]	@ (8007ec0 <HAL_RCC_GetHCLKFreq+0x58>)
 8007eae:	681b      	ldr	r3, [r3, #0]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	58024400 	.word	0x58024400
 8007ebc:	0800efe4 	.word	0x0800efe4
 8007ec0:	24000058 	.word	0x24000058
 8007ec4:	24000054 	.word	0x24000054

08007ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007ecc:	f7ff ffcc 	bl	8007e68 <HAL_RCC_GetHCLKFreq>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	091b      	lsrs	r3, r3, #4
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	4904      	ldr	r1, [pc, #16]	@ (8007ef0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007ede:	5ccb      	ldrb	r3, [r1, r3]
 8007ee0:	f003 031f 	and.w	r3, r3, #31
 8007ee4:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	58024400 	.word	0x58024400
 8007ef0:	0800efe4 	.word	0x0800efe4

08007ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007ef8:	f7ff ffb6 	bl	8007e68 <HAL_RCC_GetHCLKFreq>
 8007efc:	4602      	mov	r2, r0
 8007efe:	4b06      	ldr	r3, [pc, #24]	@ (8007f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f00:	69db      	ldr	r3, [r3, #28]
 8007f02:	0a1b      	lsrs	r3, r3, #8
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	4904      	ldr	r1, [pc, #16]	@ (8007f1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f0a:	5ccb      	ldrb	r3, [r1, r3]
 8007f0c:	f003 031f 	and.w	r3, r3, #31
 8007f10:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	58024400 	.word	0x58024400
 8007f1c:	0800efe4 	.word	0x0800efe4

08007f20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f24:	b0c8      	sub	sp, #288	@ 0x120
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f32:	2300      	movs	r3, #0
 8007f34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007f44:	2500      	movs	r5, #0
 8007f46:	ea54 0305 	orrs.w	r3, r4, r5
 8007f4a:	d049      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f56:	d02f      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007f58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f5c:	d828      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f62:	d01a      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f68:	d822      	bhi.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f72:	d007      	beq.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f74:	e01c      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f76:	4ba7      	ldr	r3, [pc, #668]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7a:	4aa6      	ldr	r2, [pc, #664]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f82:	e01a      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f88:	3308      	adds	r3, #8
 8007f8a:	2102      	movs	r1, #2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f002 fac3 	bl	800a518 <RCCEx_PLL2_Config>
 8007f92:	4603      	mov	r3, r0
 8007f94:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f98:	e00f      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f9e:	3328      	adds	r3, #40	@ 0x28
 8007fa0:	2102      	movs	r1, #2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f002 fb6a 	bl	800a67c <RCCEx_PLL3_Config>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007fae:	e004      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fb6:	e000      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007fc2:	4b94      	ldr	r3, [pc, #592]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fd0:	4a90      	ldr	r2, [pc, #576]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fd6:	e003      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007fec:	f04f 0900 	mov.w	r9, #0
 8007ff0:	ea58 0309 	orrs.w	r3, r8, r9
 8007ff4:	d047      	beq.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ffc:	2b04      	cmp	r3, #4
 8007ffe:	d82a      	bhi.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008000:	a201      	add	r2, pc, #4	@ (adr r2, 8008008 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008006:	bf00      	nop
 8008008:	0800801d 	.word	0x0800801d
 800800c:	0800802b 	.word	0x0800802b
 8008010:	08008041 	.word	0x08008041
 8008014:	0800805f 	.word	0x0800805f
 8008018:	0800805f 	.word	0x0800805f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800801c:	4b7d      	ldr	r3, [pc, #500]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800801e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008020:	4a7c      	ldr	r2, [pc, #496]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008028:	e01a      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800802a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800802e:	3308      	adds	r3, #8
 8008030:	2100      	movs	r1, #0
 8008032:	4618      	mov	r0, r3
 8008034:	f002 fa70 	bl	800a518 <RCCEx_PLL2_Config>
 8008038:	4603      	mov	r3, r0
 800803a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800803e:	e00f      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008044:	3328      	adds	r3, #40	@ 0x28
 8008046:	2100      	movs	r1, #0
 8008048:	4618      	mov	r0, r3
 800804a:	f002 fb17 	bl	800a67c <RCCEx_PLL3_Config>
 800804e:	4603      	mov	r3, r0
 8008050:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008054:	e004      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800805c:	e000      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800805e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008060:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008064:	2b00      	cmp	r3, #0
 8008066:	d10a      	bne.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008068:	4b6a      	ldr	r3, [pc, #424]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800806a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800806c:	f023 0107 	bic.w	r1, r3, #7
 8008070:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008076:	4a67      	ldr	r2, [pc, #412]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008078:	430b      	orrs	r3, r1
 800807a:	6513      	str	r3, [r2, #80]	@ 0x50
 800807c:	e003      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800807e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008082:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008092:	f04f 0b00 	mov.w	fp, #0
 8008096:	ea5a 030b 	orrs.w	r3, sl, fp
 800809a:	d054      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800809c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80080a6:	d036      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80080a8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80080ac:	d82f      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b2:	d032      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80080b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b8:	d829      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80080bc:	d02f      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80080be:	2bc0      	cmp	r3, #192	@ 0xc0
 80080c0:	d825      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080c2:	2b80      	cmp	r3, #128	@ 0x80
 80080c4:	d018      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80080c6:	2b80      	cmp	r3, #128	@ 0x80
 80080c8:	d821      	bhi.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d002      	beq.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80080ce:	2b40      	cmp	r3, #64	@ 0x40
 80080d0:	d007      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80080d2:	e01c      	b.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d4:	4b4f      	ldr	r3, [pc, #316]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d8:	4a4e      	ldr	r2, [pc, #312]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80080e0:	e01e      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e6:	3308      	adds	r3, #8
 80080e8:	2100      	movs	r1, #0
 80080ea:	4618      	mov	r0, r3
 80080ec:	f002 fa14 	bl	800a518 <RCCEx_PLL2_Config>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80080f6:	e013      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080fc:	3328      	adds	r3, #40	@ 0x28
 80080fe:	2100      	movs	r1, #0
 8008100:	4618      	mov	r0, r3
 8008102:	f002 fabb 	bl	800a67c <RCCEx_PLL3_Config>
 8008106:	4603      	mov	r3, r0
 8008108:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800810c:	e008      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008114:	e004      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8008116:	bf00      	nop
 8008118:	e002      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800811a:	bf00      	nop
 800811c:	e000      	b.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800811e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008120:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10a      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8008128:	4b3a      	ldr	r3, [pc, #232]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800812a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008136:	4a37      	ldr	r2, [pc, #220]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008138:	430b      	orrs	r3, r1
 800813a:	6513      	str	r3, [r2, #80]	@ 0x50
 800813c:	e003      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800813e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008142:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8008146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008152:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008156:	2300      	movs	r3, #0
 8008158:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800815c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008160:	460b      	mov	r3, r1
 8008162:	4313      	orrs	r3, r2
 8008164:	d05c      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800816a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800816c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008170:	d03b      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008172:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008176:	d834      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008178:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800817c:	d037      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800817e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008182:	d82e      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008184:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008188:	d033      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800818a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800818e:	d828      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008194:	d01a      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800819a:	d822      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80081a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081a4:	d007      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 80081a6:	e01c      	b.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081ac:	4a19      	ldr	r2, [pc, #100]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081b4:	e01e      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081ba:	3308      	adds	r3, #8
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f002 f9aa 	bl	800a518 <RCCEx_PLL2_Config>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081ca:	e013      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d0:	3328      	adds	r3, #40	@ 0x28
 80081d2:	2100      	movs	r1, #0
 80081d4:	4618      	mov	r0, r3
 80081d6:	f002 fa51 	bl	800a67c <RCCEx_PLL3_Config>
 80081da:	4603      	mov	r3, r0
 80081dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80081e0:	e008      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80081e8:	e004      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80081ea:	bf00      	nop
 80081ec:	e002      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80081ee:	bf00      	nop
 80081f0:	e000      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 80081f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10d      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 80081fc:	4b05      	ldr	r3, [pc, #20]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008200:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008204:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008208:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800820a:	4a02      	ldr	r2, [pc, #8]	@ (8008214 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800820c:	430b      	orrs	r3, r1
 800820e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008210:	e006      	b.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8008212:	bf00      	nop
 8008214:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008218:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800821c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800822c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008230:	2300      	movs	r3, #0
 8008232:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008236:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800823a:	460b      	mov	r3, r1
 800823c:	4313      	orrs	r3, r2
 800823e:	d03a      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008246:	2b30      	cmp	r3, #48	@ 0x30
 8008248:	d01f      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800824a:	2b30      	cmp	r3, #48	@ 0x30
 800824c:	d819      	bhi.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800824e:	2b20      	cmp	r3, #32
 8008250:	d00c      	beq.n	800826c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008252:	2b20      	cmp	r3, #32
 8008254:	d815      	bhi.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d019      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800825a:	2b10      	cmp	r3, #16
 800825c:	d111      	bne.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800825e:	4bae      	ldr	r3, [pc, #696]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	4aad      	ldr	r2, [pc, #692]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008268:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800826a:	e011      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800826c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008270:	3308      	adds	r3, #8
 8008272:	2102      	movs	r1, #2
 8008274:	4618      	mov	r0, r3
 8008276:	f002 f94f 	bl	800a518 <RCCEx_PLL2_Config>
 800827a:	4603      	mov	r3, r0
 800827c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008280:	e006      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008288:	e002      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800828a:	bf00      	nop
 800828c:	e000      	b.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800828e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008290:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008298:	4b9f      	ldr	r3, [pc, #636]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800829a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800829c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80082a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082a6:	4a9c      	ldr	r2, [pc, #624]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082a8:	430b      	orrs	r3, r1
 80082aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80082ac:	e003      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80082c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80082c6:	2300      	movs	r3, #0
 80082c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4313      	orrs	r3, r2
 80082d4:	d051      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80082d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082e0:	d035      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80082e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082e6:	d82e      	bhi.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80082e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082ec:	d031      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x432>
 80082ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082f2:	d828      	bhi.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x426>
 80082f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082f8:	d01a      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80082fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082fe:	d822      	bhi.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008308:	d007      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800830a:	e01c      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800830c:	4b82      	ldr	r3, [pc, #520]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800830e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008310:	4a81      	ldr	r2, [pc, #516]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008318:	e01c      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800831a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800831e:	3308      	adds	r3, #8
 8008320:	2100      	movs	r1, #0
 8008322:	4618      	mov	r0, r3
 8008324:	f002 f8f8 	bl	800a518 <RCCEx_PLL2_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800832e:	e011      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008334:	3328      	adds	r3, #40	@ 0x28
 8008336:	2100      	movs	r1, #0
 8008338:	4618      	mov	r0, r3
 800833a:	f002 f99f 	bl	800a67c <RCCEx_PLL3_Config>
 800833e:	4603      	mov	r3, r0
 8008340:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008344:	e006      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800834c:	e002      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800834e:	bf00      	nop
 8008350:	e000      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8008352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008354:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10a      	bne.n	8008372 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800835c:	4b6e      	ldr	r3, [pc, #440]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800835e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008360:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008364:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800836a:	4a6b      	ldr	r2, [pc, #428]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800836c:	430b      	orrs	r3, r1
 800836e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008370:	e003      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008372:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008376:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800837a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008386:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800838a:	2300      	movs	r3, #0
 800838c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008390:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008394:	460b      	mov	r3, r1
 8008396:	4313      	orrs	r3, r2
 8008398:	d053      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800839a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800839e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083a4:	d033      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80083a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80083aa:	d82c      	bhi.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083b0:	d02f      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80083b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80083b6:	d826      	bhi.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083bc:	d02b      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80083be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80083c2:	d820      	bhi.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083c8:	d012      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80083ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083ce:	d81a      	bhi.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d022      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 80083d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083d8:	d115      	bne.n	8008406 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083de:	3308      	adds	r3, #8
 80083e0:	2101      	movs	r1, #1
 80083e2:	4618      	mov	r0, r3
 80083e4:	f002 f898 	bl	800a518 <RCCEx_PLL2_Config>
 80083e8:	4603      	mov	r3, r0
 80083ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80083ee:	e015      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083f4:	3328      	adds	r3, #40	@ 0x28
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f002 f93f 	bl	800a67c <RCCEx_PLL3_Config>
 80083fe:	4603      	mov	r3, r0
 8008400:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008404:	e00a      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800840c:	e006      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800840e:	bf00      	nop
 8008410:	e004      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008412:	bf00      	nop
 8008414:	e002      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8008416:	bf00      	nop
 8008418:	e000      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800841a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800841c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008424:	4b3c      	ldr	r3, [pc, #240]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008428:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800842c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008432:	4a39      	ldr	r2, [pc, #228]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008434:	430b      	orrs	r3, r1
 8008436:	6513      	str	r3, [r2, #80]	@ 0x50
 8008438:	e003      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800843e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800844e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008452:	2300      	movs	r3, #0
 8008454:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008458:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800845c:	460b      	mov	r3, r1
 800845e:	4313      	orrs	r3, r2
 8008460:	d060      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800846a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800846e:	d039      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8008470:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008474:	d832      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008476:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800847a:	d035      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800847c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008480:	d82c      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008486:	d031      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800848c:	d826      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800848e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008492:	d02d      	beq.n	80084f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008494:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008498:	d820      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800849a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800849e:	d012      	beq.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80084a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084a4:	d81a      	bhi.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d024      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80084aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084ae:	d115      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80084b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084b4:	3308      	adds	r3, #8
 80084b6:	2101      	movs	r1, #1
 80084b8:	4618      	mov	r0, r3
 80084ba:	f002 f82d 	bl	800a518 <RCCEx_PLL2_Config>
 80084be:	4603      	mov	r3, r0
 80084c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084c4:	e017      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80084c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ca:	3328      	adds	r3, #40	@ 0x28
 80084cc:	2101      	movs	r1, #1
 80084ce:	4618      	mov	r0, r3
 80084d0:	f002 f8d4 	bl	800a67c <RCCEx_PLL3_Config>
 80084d4:	4603      	mov	r3, r0
 80084d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084da:	e00c      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80084e2:	e008      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084e4:	bf00      	nop
 80084e6:	e006      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084e8:	bf00      	nop
 80084ea:	e004      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084ec:	bf00      	nop
 80084ee:	e002      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084f0:	bf00      	nop
 80084f2:	e000      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80084f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10e      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80084fe:	4b06      	ldr	r3, [pc, #24]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008502:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800850a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800850e:	4a02      	ldr	r2, [pc, #8]	@ (8008518 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008510:	430b      	orrs	r3, r1
 8008512:	6593      	str	r3, [r2, #88]	@ 0x58
 8008514:	e006      	b.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008516:	bf00      	nop
 8008518:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800851c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008520:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008534:	2300      	movs	r3, #0
 8008536:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800853a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800853e:	460b      	mov	r3, r1
 8008540:	4313      	orrs	r3, r2
 8008542:	d037      	beq.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800854a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854e:	d00e      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008554:	d816      	bhi.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008556:	2b00      	cmp	r3, #0
 8008558:	d018      	beq.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800855a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800855e:	d111      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008560:	4bc4      	ldr	r3, [pc, #784]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008564:	4ac3      	ldr	r2, [pc, #780]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008566:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800856a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800856c:	e00f      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800856e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008572:	3308      	adds	r3, #8
 8008574:	2101      	movs	r1, #1
 8008576:	4618      	mov	r0, r3
 8008578:	f001 ffce 	bl	800a518 <RCCEx_PLL2_Config>
 800857c:	4603      	mov	r3, r0
 800857e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008582:	e004      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800858a:	e000      	b.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800858c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800858e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008592:	2b00      	cmp	r3, #0
 8008594:	d10a      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008596:	4bb7      	ldr	r3, [pc, #732]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800859a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800859e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085a4:	4ab3      	ldr	r2, [pc, #716]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085a6:	430b      	orrs	r3, r1
 80085a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80085aa:	e003      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085b0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80085c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80085ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4313      	orrs	r3, r2
 80085d2:	d039      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80085d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d81c      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80085de:	a201      	add	r2, pc, #4	@ (adr r2, 80085e4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80085e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e4:	08008621 	.word	0x08008621
 80085e8:	080085f5 	.word	0x080085f5
 80085ec:	08008603 	.word	0x08008603
 80085f0:	08008621 	.word	0x08008621
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085f4:	4b9f      	ldr	r3, [pc, #636]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f8:	4a9e      	ldr	r2, [pc, #632]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008600:	e00f      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008602:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008606:	3308      	adds	r3, #8
 8008608:	2102      	movs	r1, #2
 800860a:	4618      	mov	r0, r3
 800860c:	f001 ff84 	bl	800a518 <RCCEx_PLL2_Config>
 8008610:	4603      	mov	r3, r0
 8008612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008616:	e004      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800861e:	e000      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008622:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10a      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800862a:	4b92      	ldr	r3, [pc, #584]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800862c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800862e:	f023 0103 	bic.w	r1, r3, #3
 8008632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008638:	4a8e      	ldr	r2, [pc, #568]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800863a:	430b      	orrs	r3, r1
 800863c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800863e:	e003      	b.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008640:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008644:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800864c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008650:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008654:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008658:	2300      	movs	r3, #0
 800865a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800865e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008662:	460b      	mov	r3, r1
 8008664:	4313      	orrs	r3, r2
 8008666:	f000 8099 	beq.w	800879c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800866a:	4b83      	ldr	r3, [pc, #524]	@ (8008878 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a82      	ldr	r2, [pc, #520]	@ (8008878 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008674:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008676:	f7f9 fc9f 	bl	8001fb8 <HAL_GetTick>
 800867a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800867e:	e00b      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008680:	f7f9 fc9a 	bl	8001fb8 <HAL_GetTick>
 8008684:	4602      	mov	r2, r0
 8008686:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	2b64      	cmp	r3, #100	@ 0x64
 800868e:	d903      	bls.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008690:	2303      	movs	r3, #3
 8008692:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008696:	e005      	b.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008698:	4b77      	ldr	r3, [pc, #476]	@ (8008878 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0ed      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80086a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d173      	bne.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086ac:	4b71      	ldr	r3, [pc, #452]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80086b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086b8:	4053      	eors	r3, r2
 80086ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d015      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80086c2:	4b6c      	ldr	r3, [pc, #432]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086ce:	4b69      	ldr	r3, [pc, #420]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d2:	4a68      	ldr	r2, [pc, #416]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086da:	4b66      	ldr	r3, [pc, #408]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086de:	4a65      	ldr	r2, [pc, #404]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086e6:	4a63      	ldr	r2, [pc, #396]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80086ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fa:	d118      	bne.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fc:	f7f9 fc5c 	bl	8001fb8 <HAL_GetTick>
 8008700:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008704:	e00d      	b.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008706:	f7f9 fc57 	bl	8001fb8 <HAL_GetTick>
 800870a:	4602      	mov	r2, r0
 800870c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008710:	1ad2      	subs	r2, r2, r3
 8008712:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008716:	429a      	cmp	r2, r3
 8008718:	d903      	bls.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8008720:	e005      	b.n	800872e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008722:	4b54      	ldr	r3, [pc, #336]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0eb      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800872e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008732:	2b00      	cmp	r3, #0
 8008734:	d129      	bne.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800873a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800873e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008742:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008746:	d10e      	bne.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008748:	4b4a      	ldr	r3, [pc, #296]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008750:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008754:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008758:	091a      	lsrs	r2, r3, #4
 800875a:	4b48      	ldr	r3, [pc, #288]	@ (800887c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800875c:	4013      	ands	r3, r2
 800875e:	4a45      	ldr	r2, [pc, #276]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008760:	430b      	orrs	r3, r1
 8008762:	6113      	str	r3, [r2, #16]
 8008764:	e005      	b.n	8008772 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008766:	4b43      	ldr	r3, [pc, #268]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	4a42      	ldr	r2, [pc, #264]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800876c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008770:	6113      	str	r3, [r2, #16]
 8008772:	4b40      	ldr	r3, [pc, #256]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008774:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008776:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800877a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800877e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008782:	4a3c      	ldr	r2, [pc, #240]	@ (8008874 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008784:	430b      	orrs	r3, r1
 8008786:	6713      	str	r3, [r2, #112]	@ 0x70
 8008788:	e008      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800878a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800878e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8008792:	e003      	b.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008794:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008798:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800879c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a4:	f002 0301 	and.w	r3, r2, #1
 80087a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80087ac:	2300      	movs	r3, #0
 80087ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087b2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4313      	orrs	r3, r2
 80087ba:	f000 8090 	beq.w	80088de <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80087be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80087c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087c6:	2b28      	cmp	r3, #40	@ 0x28
 80087c8:	d870      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80087ca:	a201      	add	r2, pc, #4	@ (adr r2, 80087d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80087cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d0:	080088b5 	.word	0x080088b5
 80087d4:	080088ad 	.word	0x080088ad
 80087d8:	080088ad 	.word	0x080088ad
 80087dc:	080088ad 	.word	0x080088ad
 80087e0:	080088ad 	.word	0x080088ad
 80087e4:	080088ad 	.word	0x080088ad
 80087e8:	080088ad 	.word	0x080088ad
 80087ec:	080088ad 	.word	0x080088ad
 80087f0:	08008881 	.word	0x08008881
 80087f4:	080088ad 	.word	0x080088ad
 80087f8:	080088ad 	.word	0x080088ad
 80087fc:	080088ad 	.word	0x080088ad
 8008800:	080088ad 	.word	0x080088ad
 8008804:	080088ad 	.word	0x080088ad
 8008808:	080088ad 	.word	0x080088ad
 800880c:	080088ad 	.word	0x080088ad
 8008810:	08008897 	.word	0x08008897
 8008814:	080088ad 	.word	0x080088ad
 8008818:	080088ad 	.word	0x080088ad
 800881c:	080088ad 	.word	0x080088ad
 8008820:	080088ad 	.word	0x080088ad
 8008824:	080088ad 	.word	0x080088ad
 8008828:	080088ad 	.word	0x080088ad
 800882c:	080088ad 	.word	0x080088ad
 8008830:	080088b5 	.word	0x080088b5
 8008834:	080088ad 	.word	0x080088ad
 8008838:	080088ad 	.word	0x080088ad
 800883c:	080088ad 	.word	0x080088ad
 8008840:	080088ad 	.word	0x080088ad
 8008844:	080088ad 	.word	0x080088ad
 8008848:	080088ad 	.word	0x080088ad
 800884c:	080088ad 	.word	0x080088ad
 8008850:	080088b5 	.word	0x080088b5
 8008854:	080088ad 	.word	0x080088ad
 8008858:	080088ad 	.word	0x080088ad
 800885c:	080088ad 	.word	0x080088ad
 8008860:	080088ad 	.word	0x080088ad
 8008864:	080088ad 	.word	0x080088ad
 8008868:	080088ad 	.word	0x080088ad
 800886c:	080088ad 	.word	0x080088ad
 8008870:	080088b5 	.word	0x080088b5
 8008874:	58024400 	.word	0x58024400
 8008878:	58024800 	.word	0x58024800
 800887c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008880:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008884:	3308      	adds	r3, #8
 8008886:	2101      	movs	r1, #1
 8008888:	4618      	mov	r0, r3
 800888a:	f001 fe45 	bl	800a518 <RCCEx_PLL2_Config>
 800888e:	4603      	mov	r3, r0
 8008890:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008894:	e00f      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889a:	3328      	adds	r3, #40	@ 0x28
 800889c:	2101      	movs	r1, #1
 800889e:	4618      	mov	r0, r3
 80088a0:	f001 feec 	bl	800a67c <RCCEx_PLL3_Config>
 80088a4:	4603      	mov	r3, r0
 80088a6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80088aa:	e004      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088b2:	e000      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80088b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10b      	bne.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80088be:	4bc0      	ldr	r3, [pc, #768]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80088c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088ce:	4abc      	ldr	r2, [pc, #752]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80088d0:	430b      	orrs	r3, r1
 80088d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80088d4:	e003      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80088de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	f002 0302 	and.w	r3, r2, #2
 80088ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088ee:	2300      	movs	r3, #0
 80088f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80088f4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80088f8:	460b      	mov	r3, r1
 80088fa:	4313      	orrs	r3, r2
 80088fc:	d043      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80088fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008906:	2b05      	cmp	r3, #5
 8008908:	d824      	bhi.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800890a:	a201      	add	r2, pc, #4	@ (adr r2, 8008910 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	0800895d 	.word	0x0800895d
 8008914:	08008929 	.word	0x08008929
 8008918:	0800893f 	.word	0x0800893f
 800891c:	0800895d 	.word	0x0800895d
 8008920:	0800895d 	.word	0x0800895d
 8008924:	0800895d 	.word	0x0800895d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800892c:	3308      	adds	r3, #8
 800892e:	2101      	movs	r1, #1
 8008930:	4618      	mov	r0, r3
 8008932:	f001 fdf1 	bl	800a518 <RCCEx_PLL2_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800893c:	e00f      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800893e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008942:	3328      	adds	r3, #40	@ 0x28
 8008944:	2101      	movs	r1, #1
 8008946:	4618      	mov	r0, r3
 8008948:	f001 fe98 	bl	800a67c <RCCEx_PLL3_Config>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008952:	e004      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800895a:	e000      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800895c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800895e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008962:	2b00      	cmp	r3, #0
 8008964:	d10b      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008966:	4b96      	ldr	r3, [pc, #600]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800896a:	f023 0107 	bic.w	r1, r3, #7
 800896e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008976:	4a92      	ldr	r2, [pc, #584]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008978:	430b      	orrs	r3, r1
 800897a:	6553      	str	r3, [r2, #84]	@ 0x54
 800897c:	e003      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008982:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f002 0304 	and.w	r3, r2, #4
 8008992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008996:	2300      	movs	r3, #0
 8008998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800899c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4313      	orrs	r3, r2
 80089a4:	d043      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80089a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089ae:	2b05      	cmp	r3, #5
 80089b0:	d824      	bhi.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80089b2:	a201      	add	r2, pc, #4	@ (adr r2, 80089b8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	08008a05 	.word	0x08008a05
 80089bc:	080089d1 	.word	0x080089d1
 80089c0:	080089e7 	.word	0x080089e7
 80089c4:	08008a05 	.word	0x08008a05
 80089c8:	08008a05 	.word	0x08008a05
 80089cc:	08008a05 	.word	0x08008a05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089d4:	3308      	adds	r3, #8
 80089d6:	2101      	movs	r1, #1
 80089d8:	4618      	mov	r0, r3
 80089da:	f001 fd9d 	bl	800a518 <RCCEx_PLL2_Config>
 80089de:	4603      	mov	r3, r0
 80089e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089e4:	e00f      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ea:	3328      	adds	r3, #40	@ 0x28
 80089ec:	2101      	movs	r1, #1
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 fe44 	bl	800a67c <RCCEx_PLL3_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089fa:	e004      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a02:	e000      	b.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8008a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d10b      	bne.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a0e:	4b6c      	ldr	r3, [pc, #432]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a12:	f023 0107 	bic.w	r1, r3, #7
 8008a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a1e:	4a68      	ldr	r2, [pc, #416]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a20:	430b      	orrs	r3, r1
 8008a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a24:	e003      	b.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008a2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a36:	f002 0320 	and.w	r3, r2, #32
 8008a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a48:	460b      	mov	r3, r1
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	d055      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a5a:	d033      	beq.n	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a60:	d82c      	bhi.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a66:	d02f      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a6c:	d826      	bhi.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a72:	d02b      	beq.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008a74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a78:	d820      	bhi.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a7e:	d012      	beq.n	8008aa6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008a80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a84:	d81a      	bhi.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d022      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008a8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a8e:	d115      	bne.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a94:	3308      	adds	r3, #8
 8008a96:	2100      	movs	r1, #0
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f001 fd3d 	bl	800a518 <RCCEx_PLL2_Config>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008aa4:	e015      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aaa:	3328      	adds	r3, #40	@ 0x28
 8008aac:	2102      	movs	r1, #2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f001 fde4 	bl	800a67c <RCCEx_PLL3_Config>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008aba:	e00a      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ac2:	e006      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ac4:	bf00      	nop
 8008ac6:	e004      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ac8:	bf00      	nop
 8008aca:	e002      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008acc:	bf00      	nop
 8008ace:	e000      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ad2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10b      	bne.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ada:	4b39      	ldr	r3, [pc, #228]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ade:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008aea:	4a35      	ldr	r2, [pc, #212]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008aec:	430b      	orrs	r3, r1
 8008aee:	6553      	str	r3, [r2, #84]	@ 0x54
 8008af0:	e003      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008af2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008af6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008afa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b02:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008b06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008b10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4313      	orrs	r3, r2
 8008b18:	d058      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b22:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b26:	d033      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008b28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008b2c:	d82c      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b32:	d02f      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b38:	d826      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b3e:	d02b      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008b40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b44:	d820      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b4a:	d012      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008b4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b50:	d81a      	bhi.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d022      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b5a:	d115      	bne.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b60:	3308      	adds	r3, #8
 8008b62:	2100      	movs	r1, #0
 8008b64:	4618      	mov	r0, r3
 8008b66:	f001 fcd7 	bl	800a518 <RCCEx_PLL2_Config>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b70:	e015      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b76:	3328      	adds	r3, #40	@ 0x28
 8008b78:	2102      	movs	r1, #2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f001 fd7e 	bl	800a67c <RCCEx_PLL3_Config>
 8008b80:	4603      	mov	r3, r0
 8008b82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b86:	e00a      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b8e:	e006      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b90:	bf00      	nop
 8008b92:	e004      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b94:	bf00      	nop
 8008b96:	e002      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b98:	bf00      	nop
 8008b9a:	e000      	b.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b9e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10e      	bne.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ba6:	4b06      	ldr	r3, [pc, #24]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008baa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008bae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008bb6:	4a02      	ldr	r2, [pc, #8]	@ (8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008bb8:	430b      	orrs	r3, r1
 8008bba:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bbc:	e006      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008bbe:	bf00      	nop
 8008bc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008bc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008be2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008be6:	460b      	mov	r3, r1
 8008be8:	4313      	orrs	r3, r2
 8008bea:	d055      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008bf4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008bf8:	d033      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008bfa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008bfe:	d82c      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c04:	d02f      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008c06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c0a:	d826      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c0c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c10:	d02b      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008c12:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008c16:	d820      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c1c:	d012      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008c1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c22:	d81a      	bhi.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d022      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c2c:	d115      	bne.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c32:	3308      	adds	r3, #8
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 fc6e 	bl	800a518 <RCCEx_PLL2_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c42:	e015      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c48:	3328      	adds	r3, #40	@ 0x28
 8008c4a:	2102      	movs	r1, #2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 fd15 	bl	800a67c <RCCEx_PLL3_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c58:	e00a      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008c60:	e006      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c62:	bf00      	nop
 8008c64:	e004      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c66:	bf00      	nop
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c6a:	bf00      	nop
 8008c6c:	e000      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10b      	bne.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c78:	4ba1      	ldr	r3, [pc, #644]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c88:	4a9d      	ldr	r2, [pc, #628]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c8a:	430b      	orrs	r3, r1
 8008c8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c8e:	e003      	b.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c90:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c94:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f002 0308 	and.w	r3, r2, #8
 8008ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008cae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	d01e      	beq.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cc4:	d10c      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cca:	3328      	adds	r3, #40	@ 0x28
 8008ccc:	2102      	movs	r1, #2
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 fcd4 	bl	800a67c <RCCEx_PLL3_Config>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008ce0:	4b87      	ldr	r3, [pc, #540]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ce4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cf0:	4a83      	ldr	r2, [pc, #524]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cf2:	430b      	orrs	r3, r1
 8008cf4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f002 0310 	and.w	r3, r2, #16
 8008d02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d06:	2300      	movs	r3, #0
 8008d08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008d0c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008d10:	460b      	mov	r3, r1
 8008d12:	4313      	orrs	r3, r2
 8008d14:	d01e      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d22:	d10c      	bne.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d28:	3328      	adds	r3, #40	@ 0x28
 8008d2a:	2102      	movs	r1, #2
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 fca5 	bl	800a67c <RCCEx_PLL3_Config>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d002      	beq.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008d3e:	4b70      	ldr	r3, [pc, #448]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d42:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d50:	430b      	orrs	r3, r1
 8008d52:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d64:	2300      	movs	r3, #0
 8008d66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d6a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4313      	orrs	r3, r2
 8008d72:	d03e      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d80:	d022      	beq.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008d82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d86:	d81b      	bhi.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d003      	beq.n	8008d94 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d90:	d00b      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008d92:	e015      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d98:	3308      	adds	r3, #8
 8008d9a:	2100      	movs	r1, #0
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 fbbb 	bl	800a518 <RCCEx_PLL2_Config>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008da8:	e00f      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dae:	3328      	adds	r3, #40	@ 0x28
 8008db0:	2102      	movs	r1, #2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 fc62 	bl	800a67c <RCCEx_PLL3_Config>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008dbe:	e004      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008dc6:	e000      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dd6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008de2:	4a47      	ldr	r2, [pc, #284]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008de4:	430b      	orrs	r3, r1
 8008de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008de8:	e003      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dee:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008df2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008dfe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008e00:	2300      	movs	r3, #0
 8008e02:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008e04:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	d03b      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e16:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e1a:	d01f      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008e1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e20:	d818      	bhi.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e26:	d003      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008e28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e2c:	d007      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008e2e:	e011      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e30:	4b33      	ldr	r3, [pc, #204]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e34:	4a32      	ldr	r2, [pc, #200]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e3c:	e00f      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e42:	3328      	adds	r3, #40	@ 0x28
 8008e44:	2101      	movs	r1, #1
 8008e46:	4618      	mov	r0, r3
 8008e48:	f001 fc18 	bl	800a67c <RCCEx_PLL3_Config>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e52:	e004      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e54:	2301      	movs	r3, #1
 8008e56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e5a:	e000      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008e5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10b      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e66:	4b26      	ldr	r3, [pc, #152]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e76:	4a22      	ldr	r2, [pc, #136]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e78:	430b      	orrs	r3, r1
 8008e7a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e7c:	e003      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008e92:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e94:	2300      	movs	r3, #0
 8008e96:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e98:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	d034      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ea6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008eb0:	d007      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008eb2:	e011      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb4:	4b12      	ldr	r3, [pc, #72]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb8:	4a11      	ldr	r2, [pc, #68]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ec0:	e00e      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	2102      	movs	r1, #2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f001 fb24 	bl	800a518 <RCCEx_PLL2_Config>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ed6:	e003      	b.n	8008ee0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10d      	bne.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008ee8:	4b05      	ldr	r3, [pc, #20]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ef6:	4a02      	ldr	r2, [pc, #8]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008efc:	e006      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008efe:	bf00      	nop
 8008f00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008f18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f1e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008f22:	460b      	mov	r3, r1
 8008f24:	4313      	orrs	r3, r2
 8008f26:	d00c      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2c:	3328      	adds	r3, #40	@ 0x28
 8008f2e:	2102      	movs	r1, #2
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 fba3 	bl	800a67c <RCCEx_PLL3_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d002      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f50:	2300      	movs	r3, #0
 8008f52:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f54:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f58:	460b      	mov	r3, r1
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	d038      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f6a:	d018      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008f6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f70:	d811      	bhi.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f76:	d014      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f7c:	d80b      	bhi.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d011      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f86:	d106      	bne.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f88:	4bc3      	ldr	r3, [pc, #780]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f8c:	4ac2      	ldr	r2, [pc, #776]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008f94:	e008      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f9c:	e004      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f9e:	bf00      	nop
 8008fa0:	e002      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fa2:	bf00      	nop
 8008fa4:	e000      	b.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008fa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10b      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008fb0:	4bb9      	ldr	r3, [pc, #740]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fc0:	4ab5      	ldr	r2, [pc, #724]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fc2:	430b      	orrs	r3, r1
 8008fc4:	6553      	str	r3, [r2, #84]	@ 0x54
 8008fc6:	e003      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008fcc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fde:	2300      	movs	r3, #0
 8008fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fe2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	d009      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008fec:	4baa      	ldr	r3, [pc, #680]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ff0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008ffa:	4aa7      	ldr	r2, [pc, #668]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800900c:	653b      	str	r3, [r7, #80]	@ 0x50
 800900e:	2300      	movs	r3, #0
 8009010:	657b      	str	r3, [r7, #84]	@ 0x54
 8009012:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009016:	460b      	mov	r3, r1
 8009018:	4313      	orrs	r3, r2
 800901a:	d009      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800901c:	4b9e      	ldr	r3, [pc, #632]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800901e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009020:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800902a:	4a9b      	ldr	r2, [pc, #620]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800902c:	430b      	orrs	r3, r1
 800902e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8009030:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800903c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800903e:	2300      	movs	r3, #0
 8009040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009042:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009046:	460b      	mov	r3, r1
 8009048:	4313      	orrs	r3, r2
 800904a:	d009      	beq.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800904c:	4b92      	ldr	r3, [pc, #584]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800904e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009050:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8009054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800905a:	4a8f      	ldr	r2, [pc, #572]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800905c:	430b      	orrs	r3, r1
 800905e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009060:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800906c:	643b      	str	r3, [r7, #64]	@ 0x40
 800906e:	2300      	movs	r3, #0
 8009070:	647b      	str	r3, [r7, #68]	@ 0x44
 8009072:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009076:	460b      	mov	r3, r1
 8009078:	4313      	orrs	r3, r2
 800907a:	d00e      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800907c:	4b86      	ldr	r3, [pc, #536]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	4a85      	ldr	r2, [pc, #532]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009082:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009086:	6113      	str	r3, [r2, #16]
 8009088:	4b83      	ldr	r3, [pc, #524]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800908a:	6919      	ldr	r1, [r3, #16]
 800908c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009090:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009094:	4a80      	ldr	r2, [pc, #512]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009096:	430b      	orrs	r3, r1
 8009098:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800909a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800909e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80090a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090a8:	2300      	movs	r3, #0
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80090b0:	460b      	mov	r3, r1
 80090b2:	4313      	orrs	r3, r2
 80090b4:	d009      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80090b6:	4b78      	ldr	r3, [pc, #480]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80090be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c4:	4a74      	ldr	r2, [pc, #464]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090c6:	430b      	orrs	r3, r1
 80090c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80090d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80090d8:	2300      	movs	r3, #0
 80090da:	637b      	str	r3, [r7, #52]	@ 0x34
 80090dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80090e0:	460b      	mov	r3, r1
 80090e2:	4313      	orrs	r3, r2
 80090e4:	d00a      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090e6:	4b6c      	ldr	r3, [pc, #432]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80090ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090f6:	4a68      	ldr	r2, [pc, #416]	@ (8009298 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80090f8:	430b      	orrs	r3, r1
 80090fa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80090fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009104:	2100      	movs	r1, #0
 8009106:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800910e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009112:	460b      	mov	r3, r1
 8009114:	4313      	orrs	r3, r2
 8009116:	d011      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800911c:	3308      	adds	r3, #8
 800911e:	2100      	movs	r1, #0
 8009120:	4618      	mov	r0, r3
 8009122:	f001 f9f9 	bl	800a518 <RCCEx_PLL2_Config>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800912c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009130:	2b00      	cmp	r3, #0
 8009132:	d003      	beq.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009134:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009138:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800913c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	2100      	movs	r1, #0
 8009146:	6239      	str	r1, [r7, #32]
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	627b      	str	r3, [r7, #36]	@ 0x24
 800914e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009152:	460b      	mov	r3, r1
 8009154:	4313      	orrs	r3, r2
 8009156:	d011      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800915c:	3308      	adds	r3, #8
 800915e:	2101      	movs	r1, #1
 8009160:	4618      	mov	r0, r3
 8009162:	f001 f9d9 	bl	800a518 <RCCEx_PLL2_Config>
 8009166:	4603      	mov	r3, r0
 8009168:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800916c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009170:	2b00      	cmp	r3, #0
 8009172:	d003      	beq.n	800917c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009174:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009178:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800917c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	2100      	movs	r1, #0
 8009186:	61b9      	str	r1, [r7, #24]
 8009188:	f003 0304 	and.w	r3, r3, #4
 800918c:	61fb      	str	r3, [r7, #28]
 800918e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009192:	460b      	mov	r3, r1
 8009194:	4313      	orrs	r3, r2
 8009196:	d011      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800919c:	3308      	adds	r3, #8
 800919e:	2102      	movs	r1, #2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f001 f9b9 	bl	800a518 <RCCEx_PLL2_Config>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80091ac:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80091bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c4:	2100      	movs	r1, #0
 80091c6:	6139      	str	r1, [r7, #16]
 80091c8:	f003 0308 	and.w	r3, r3, #8
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80091d2:	460b      	mov	r3, r1
 80091d4:	4313      	orrs	r3, r2
 80091d6:	d011      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091dc:	3328      	adds	r3, #40	@ 0x28
 80091de:	2100      	movs	r1, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f001 fa4b 	bl	800a67c <RCCEx_PLL3_Config>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 80091ec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80091fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	2100      	movs	r1, #0
 8009206:	60b9      	str	r1, [r7, #8]
 8009208:	f003 0310 	and.w	r3, r3, #16
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009212:	460b      	mov	r3, r1
 8009214:	4313      	orrs	r3, r2
 8009216:	d011      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009218:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800921c:	3328      	adds	r3, #40	@ 0x28
 800921e:	2101      	movs	r1, #1
 8009220:	4618      	mov	r0, r3
 8009222:	f001 fa2b 	bl	800a67c <RCCEx_PLL3_Config>
 8009226:	4603      	mov	r3, r0
 8009228:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800922c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009234:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009238:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800923c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	2100      	movs	r1, #0
 8009246:	6039      	str	r1, [r7, #0]
 8009248:	f003 0320 	and.w	r3, r3, #32
 800924c:	607b      	str	r3, [r7, #4]
 800924e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009252:	460b      	mov	r3, r1
 8009254:	4313      	orrs	r3, r2
 8009256:	d011      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800925c:	3328      	adds	r3, #40	@ 0x28
 800925e:	2102      	movs	r1, #2
 8009260:	4618      	mov	r0, r3
 8009262:	f001 fa0b 	bl	800a67c <RCCEx_PLL3_Config>
 8009266:	4603      	mov	r3, r0
 8009268:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800926c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009274:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009278:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800927c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	e000      	b.n	800928a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
}
 800928a:	4618      	mov	r0, r3
 800928c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8009290:	46bd      	mov	sp, r7
 8009292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009296:	bf00      	nop
 8009298:	58024400 	.word	0x58024400

0800929c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b090      	sub	sp, #64	@ 0x40
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80092a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092aa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80092ae:	430b      	orrs	r3, r1
 80092b0:	f040 8094 	bne.w	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80092b4:	4b97      	ldr	r3, [pc, #604]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80092be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	f200 8087 	bhi.w	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80092c6:	a201      	add	r2, pc, #4	@ (adr r2, 80092cc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80092c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092cc:	080092e1 	.word	0x080092e1
 80092d0:	08009309 	.word	0x08009309
 80092d4:	08009331 	.word	0x08009331
 80092d8:	080093cd 	.word	0x080093cd
 80092dc:	08009359 	.word	0x08009359
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092e0:	4b8c      	ldr	r3, [pc, #560]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092ec:	d108      	bne.n	8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 ff68 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80092f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092fc:	f000 bc97 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009304:	f000 bc93 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009308:	4b82      	ldr	r3, [pc, #520]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009310:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009314:	d108      	bne.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009316:	f107 0318 	add.w	r3, r7, #24
 800931a:	4618      	mov	r0, r3
 800931c:	f000 fcac 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009324:	f000 bc83 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009328:	2300      	movs	r3, #0
 800932a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800932c:	f000 bc7f 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009330:	4b78      	ldr	r3, [pc, #480]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800933c:	d108      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800933e:	f107 030c 	add.w	r3, r7, #12
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fdec 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800934c:	f000 bc6f 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009354:	f000 bc6b 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009358:	4b6e      	ldr	r3, [pc, #440]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800935a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009360:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009362:	4b6c      	ldr	r3, [pc, #432]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	2b04      	cmp	r3, #4
 800936c:	d10c      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800936e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009370:	2b00      	cmp	r3, #0
 8009372:	d109      	bne.n	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009374:	4b67      	ldr	r3, [pc, #412]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	08db      	lsrs	r3, r3, #3
 800937a:	f003 0303 	and.w	r3, r3, #3
 800937e:	4a66      	ldr	r2, [pc, #408]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009380:	fa22 f303 	lsr.w	r3, r2, r3
 8009384:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009386:	e01f      	b.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009388:	4b62      	ldr	r3, [pc, #392]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009390:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009394:	d106      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800939c:	d102      	bne.n	80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800939e:	4b5f      	ldr	r3, [pc, #380]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80093a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093a2:	e011      	b.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093b0:	d106      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80093b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093b8:	d102      	bne.n	80093c0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093ba:	4b59      	ldr	r3, [pc, #356]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80093bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093be:	e003      	b.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093c0:	2300      	movs	r3, #0
 80093c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80093c4:	f000 bc33 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80093c8:	f000 bc31 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093cc:	4b55      	ldr	r3, [pc, #340]	@ (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d0:	f000 bc2d 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093d8:	f000 bc29 	b.w	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 80093dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093e0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80093e4:	430b      	orrs	r3, r1
 80093e6:	f040 809f 	bne.w	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 80093ea:	4b4a      	ldr	r3, [pc, #296]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093ee:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80093f2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80093f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093fa:	d04d      	beq.n	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 80093fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009402:	f200 8084 	bhi.w	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009408:	2bc0      	cmp	r3, #192	@ 0xc0
 800940a:	d07d      	beq.n	8009508 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009410:	d87d      	bhi.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009414:	2b80      	cmp	r3, #128	@ 0x80
 8009416:	d02d      	beq.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8009418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800941a:	2b80      	cmp	r3, #128	@ 0x80
 800941c:	d877      	bhi.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800941e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009420:	2b00      	cmp	r3, #0
 8009422:	d003      	beq.n	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8009424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009426:	2b40      	cmp	r3, #64	@ 0x40
 8009428:	d012      	beq.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800942a:	e070      	b.n	800950e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800942c:	4b39      	ldr	r3, [pc, #228]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009434:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009438:	d107      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800943a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800943e:	4618      	mov	r0, r3
 8009440:	f000 fec2 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009448:	e3f1      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800944e:	e3ee      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009450:	4b30      	ldr	r3, [pc, #192]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009458:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800945c:	d107      	bne.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800945e:	f107 0318 	add.w	r3, r7, #24
 8009462:	4618      	mov	r0, r3
 8009464:	f000 fc08 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800946c:	e3df      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009472:	e3dc      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009474:	4b27      	ldr	r3, [pc, #156]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800947c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009480:	d107      	bne.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009482:	f107 030c 	add.w	r3, r7, #12
 8009486:	4618      	mov	r0, r3
 8009488:	f000 fd4a 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009490:	e3cd      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009492:	2300      	movs	r3, #0
 8009494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009496:	e3ca      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009498:	4b1e      	ldr	r3, [pc, #120]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800949a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800949c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094a0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f003 0304 	and.w	r3, r3, #4
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d10c      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80094ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d109      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094b4:	4b17      	ldr	r3, [pc, #92]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	08db      	lsrs	r3, r3, #3
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	4a16      	ldr	r2, [pc, #88]	@ (8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80094c0:	fa22 f303 	lsr.w	r3, r2, r3
 80094c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094c6:	e01e      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80094c8:	4b12      	ldr	r3, [pc, #72]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094d4:	d106      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80094d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094dc:	d102      	bne.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80094de:	4b0f      	ldr	r3, [pc, #60]	@ (800951c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80094e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094e2:	e010      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009514 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094f0:	d106      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80094f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094f8:	d102      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094fa:	4b09      	ldr	r3, [pc, #36]	@ (8009520 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80094fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80094fe:	e002      	b.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009504:	e393      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009506:	e392      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009508:	4b06      	ldr	r3, [pc, #24]	@ (8009524 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800950a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800950c:	e38f      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009512:	e38c      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009514:	58024400 	.word	0x58024400
 8009518:	03d09000 	.word	0x03d09000
 800951c:	003d0900 	.word	0x003d0900
 8009520:	007a1200 	.word	0x007a1200
 8009524:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8009528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800952c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009530:	430b      	orrs	r3, r1
 8009532:	f040 809c 	bne.w	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8009536:	4b9e      	ldr	r3, [pc, #632]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800953a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800953e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009546:	d054      	beq.n	80095f2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800954e:	f200 808b 	bhi.w	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009554:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009558:	f000 8083 	beq.w	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009562:	f200 8081 	bhi.w	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009568:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800956c:	d02f      	beq.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009574:	d878      	bhi.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009578:	2b00      	cmp	r3, #0
 800957a:	d004      	beq.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009582:	d012      	beq.n	80095aa <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009584:	e070      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009586:	4b8a      	ldr	r3, [pc, #552]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800958e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009592:	d107      	bne.n	80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009594:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009598:	4618      	mov	r0, r3
 800959a:	f000 fe15 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800959e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095a2:	e344      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095a4:	2300      	movs	r3, #0
 80095a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095a8:	e341      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095aa:	4b81      	ldr	r3, [pc, #516]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095b6:	d107      	bne.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095b8:	f107 0318 	add.w	r3, r7, #24
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 fb5b 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095c6:	e332      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095c8:	2300      	movs	r3, #0
 80095ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095cc:	e32f      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095ce:	4b78      	ldr	r3, [pc, #480]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095da:	d107      	bne.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095dc:	f107 030c 	add.w	r3, r7, #12
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 fc9d 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095ea:	e320      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095f0:	e31d      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80095f2:	4b6f      	ldr	r3, [pc, #444]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80095fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095fc:	4b6c      	ldr	r3, [pc, #432]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b04      	cmp	r3, #4
 8009606:	d10c      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8009608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800960a:	2b00      	cmp	r3, #0
 800960c:	d109      	bne.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800960e:	4b68      	ldr	r3, [pc, #416]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	08db      	lsrs	r3, r3, #3
 8009614:	f003 0303 	and.w	r3, r3, #3
 8009618:	4a66      	ldr	r2, [pc, #408]	@ (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800961a:	fa22 f303 	lsr.w	r3, r2, r3
 800961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009620:	e01e      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009622:	4b63      	ldr	r3, [pc, #396]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800962a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800962e:	d106      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009636:	d102      	bne.n	800963e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009638:	4b5f      	ldr	r3, [pc, #380]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800963a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800963c:	e010      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800963e:	4b5c      	ldr	r3, [pc, #368]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009646:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800964a:	d106      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800964c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009652:	d102      	bne.n	800965a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009654:	4b59      	ldr	r3, [pc, #356]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8009656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009658:	e002      	b.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800965e:	e2e6      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009660:	e2e5      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009662:	4b57      	ldr	r3, [pc, #348]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009664:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009666:	e2e2      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800966c:	e2df      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800966e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009672:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009676:	430b      	orrs	r3, r1
 8009678:	f040 80a7 	bne.w	80097ca <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800967c:	4b4c      	ldr	r3, [pc, #304]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800967e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009680:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009684:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800968c:	d055      	beq.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800968e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009690:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009694:	f200 8096 	bhi.w	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800969e:	f000 8084 	beq.w	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80096a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096a8:	f200 808c 	bhi.w	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80096ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096b2:	d030      	beq.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80096b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ba:	f200 8083 	bhi.w	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80096be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d004      	beq.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80096c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ca:	d012      	beq.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80096cc:	e07a      	b.n	80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80096ce:	4b38      	ldr	r3, [pc, #224]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096da:	d107      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 fd71 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ea:	e2a0      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096f0:	e29d      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096f2:	4b2f      	ldr	r3, [pc, #188]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096fe:	d107      	bne.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009700:	f107 0318 	add.w	r3, r7, #24
 8009704:	4618      	mov	r0, r3
 8009706:	f000 fab7 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800970a:	69bb      	ldr	r3, [r7, #24]
 800970c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800970e:	e28e      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009714:	e28b      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009716:	4b26      	ldr	r3, [pc, #152]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800971e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009722:	d107      	bne.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009724:	f107 030c 	add.w	r3, r7, #12
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fbf9 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009732:	e27c      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009738:	e279      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800973a:	4b1d      	ldr	r3, [pc, #116]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800973c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800973e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009742:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009744:	4b1a      	ldr	r3, [pc, #104]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b04      	cmp	r3, #4
 800974e:	d10c      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8009750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009756:	4b16      	ldr	r3, [pc, #88]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	08db      	lsrs	r3, r3, #3
 800975c:	f003 0303 	and.w	r3, r3, #3
 8009760:	4a14      	ldr	r2, [pc, #80]	@ (80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8009762:	fa22 f303 	lsr.w	r3, r2, r3
 8009766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009768:	e01e      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800976a:	4b11      	ldr	r3, [pc, #68]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009776:	d106      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800977a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800977e:	d102      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009780:	4b0d      	ldr	r3, [pc, #52]	@ (80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8009782:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009784:	e010      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009786:	4b0a      	ldr	r3, [pc, #40]	@ (80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800978e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009792:	d106      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009796:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800979a:	d102      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800979c:	4b07      	ldr	r3, [pc, #28]	@ (80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800979e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097a0:	e002      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097a2:	2300      	movs	r3, #0
 80097a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097a6:	e242      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80097a8:	e241      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097aa:	4b05      	ldr	r3, [pc, #20]	@ (80097c0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097ae:	e23e      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80097b0:	58024400 	.word	0x58024400
 80097b4:	03d09000 	.word	0x03d09000
 80097b8:	003d0900 	.word	0x003d0900
 80097bc:	007a1200 	.word	0x007a1200
 80097c0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80097c4:	2300      	movs	r3, #0
 80097c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097c8:	e231      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80097ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097ce:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80097d2:	430b      	orrs	r3, r1
 80097d4:	f040 8085 	bne.w	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80097d8:	4b9c      	ldr	r3, [pc, #624]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097dc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80097e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80097e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097e8:	d06b      	beq.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80097ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80097f0:	d874      	bhi.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80097f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80097f8:	d056      	beq.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80097fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009800:	d86c      	bhi.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009804:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009808:	d03b      	beq.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800980a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800980c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009810:	d864      	bhi.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009814:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009818:	d021      	beq.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800981a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009820:	d85c      	bhi.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8009822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8009828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800982e:	d004      	beq.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8009830:	e054      	b.n	80098dc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009832:	f7fe fb49 	bl	8007ec8 <HAL_RCC_GetPCLK1Freq>
 8009836:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009838:	e1f9      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800983a:	4b84      	ldr	r3, [pc, #528]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009846:	d107      	bne.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009848:	f107 0318 	add.w	r3, r7, #24
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fa13 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009856:	e1ea      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800985c:	e1e7      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800985e:	4b7b      	ldr	r3, [pc, #492]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800986a:	d107      	bne.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800986c:	f107 030c 	add.w	r3, r7, #12
 8009870:	4618      	mov	r0, r3
 8009872:	f000 fb55 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800987a:	e1d8      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009880:	e1d5      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009882:	4b72      	ldr	r3, [pc, #456]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 0304 	and.w	r3, r3, #4
 800988a:	2b04      	cmp	r3, #4
 800988c:	d109      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800988e:	4b6f      	ldr	r3, [pc, #444]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	08db      	lsrs	r3, r3, #3
 8009894:	f003 0303 	and.w	r3, r3, #3
 8009898:	4a6d      	ldr	r2, [pc, #436]	@ (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800989a:	fa22 f303 	lsr.w	r3, r2, r3
 800989e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a0:	e1c5      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098a6:	e1c2      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098a8:	4b68      	ldr	r3, [pc, #416]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b4:	d102      	bne.n	80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80098b6:	4b67      	ldr	r3, [pc, #412]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80098b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ba:	e1b8      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098bc:	2300      	movs	r3, #0
 80098be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098c0:	e1b5      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098c2:	4b62      	ldr	r3, [pc, #392]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098ce:	d102      	bne.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80098d0:	4b61      	ldr	r3, [pc, #388]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80098d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d4:	e1ab      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098da:	e1a8      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098e0:	e1a5      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80098e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098e6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80098ea:	430b      	orrs	r3, r1
 80098ec:	d173      	bne.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80098ee:	4b57      	ldr	r3, [pc, #348]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80098f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80098f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098fe:	d02f      	beq.n	8009960 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8009900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009906:	d863      	bhi.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8009908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800990a:	2b00      	cmp	r3, #0
 800990c:	d004      	beq.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800990e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009914:	d012      	beq.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8009916:	e05b      	b.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009918:	4b4c      	ldr	r3, [pc, #304]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009924:	d107      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009926:	f107 0318 	add.w	r3, r7, #24
 800992a:	4618      	mov	r0, r3
 800992c:	f000 f9a4 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009934:	e17b      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800993a:	e178      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800993c:	4b43      	ldr	r3, [pc, #268]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009948:	d107      	bne.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800994a:	f107 030c 	add.w	r3, r7, #12
 800994e:	4618      	mov	r0, r3
 8009950:	f000 fae6 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009958:	e169      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800995a:	2300      	movs	r3, #0
 800995c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800995e:	e166      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009960:	4b3a      	ldr	r3, [pc, #232]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009964:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800996a:	4b38      	ldr	r3, [pc, #224]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	2b04      	cmp	r3, #4
 8009974:	d10c      	bne.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8009976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800997c:	4b33      	ldr	r3, [pc, #204]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	08db      	lsrs	r3, r3, #3
 8009982:	f003 0303 	and.w	r3, r3, #3
 8009986:	4a32      	ldr	r2, [pc, #200]	@ (8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009988:	fa22 f303 	lsr.w	r3, r2, r3
 800998c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800998e:	e01e      	b.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009990:	4b2e      	ldr	r3, [pc, #184]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800999c:	d106      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800999e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099a4:	d102      	bne.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099a6:	4b2b      	ldr	r3, [pc, #172]	@ (8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80099a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099aa:	e010      	b.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099ac:	4b27      	ldr	r3, [pc, #156]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099b8:	d106      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80099ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099c0:	d102      	bne.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80099c2:	4b25      	ldr	r3, [pc, #148]	@ (8009a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80099c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099c6:	e002      	b.n	80099ce <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80099cc:	e12f      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80099ce:	e12e      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d4:	e12b      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80099d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099da:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80099de:	430b      	orrs	r3, r1
 80099e0:	d13c      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80099e2:	4b1a      	ldr	r3, [pc, #104]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80099ea:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80099ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d004      	beq.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80099f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099f8:	d012      	beq.n	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80099fa:	e023      	b.n	8009a44 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099fc:	4b13      	ldr	r3, [pc, #76]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a08:	d107      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f000 fbda 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a18:	e109      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a1e:	e106      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a20:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a2c:	d107      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a2e:	f107 0318 	add.w	r3, r7, #24
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 f920 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a3c:	e0f7      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a42:	e0f4      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a48:	e0f1      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009a4a:	bf00      	nop
 8009a4c:	58024400 	.word	0x58024400
 8009a50:	03d09000 	.word	0x03d09000
 8009a54:	003d0900 	.word	0x003d0900
 8009a58:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a60:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009a64:	430b      	orrs	r3, r1
 8009a66:	f040 8091 	bne.w	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a6a:	4b73      	ldr	r3, [pc, #460]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a6e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009a72:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a76:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a7a:	f000 8081 	beq.w	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a80:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a84:	d87f      	bhi.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a8c:	d06b      	beq.n	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a94:	d877      	bhi.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a9c:	d056      	beq.n	8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aa4:	d86f      	bhi.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009aac:	d03b      	beq.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ab4:	d867      	bhi.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abc:	d021      	beq.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ac4:	d85f      	bhi.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d004      	beq.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ace:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ad2:	d004      	beq.n	8009ade <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009ad4:	e057      	b.n	8009b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009ad6:	f000 f8b9 	bl	8009c4c <HAL_RCCEx_GetD3PCLK1Freq>
 8009ada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009adc:	e0a7      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ade:	4b56      	ldr	r3, [pc, #344]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ae6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009aea:	d107      	bne.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aec:	f107 0318 	add.w	r3, r7, #24
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 f8c1 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009afa:	e098      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b00:	e095      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b02:	4b4d      	ldr	r3, [pc, #308]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b0e:	d107      	bne.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b10:	f107 030c 	add.w	r3, r7, #12
 8009b14:	4618      	mov	r0, r3
 8009b16:	f000 fa03 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b1e:	e086      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b24:	e083      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b26:	4b44      	ldr	r3, [pc, #272]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0304 	and.w	r3, r3, #4
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	d109      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b32:	4b41      	ldr	r3, [pc, #260]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	08db      	lsrs	r3, r3, #3
 8009b38:	f003 0303 	and.w	r3, r3, #3
 8009b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c3c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b44:	e073      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b4a:	e070      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b58:	d102      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8009b5a:	4b39      	ldr	r3, [pc, #228]	@ (8009c40 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8009b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b5e:	e066      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b60:	2300      	movs	r3, #0
 8009b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b64:	e063      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b66:	4b34      	ldr	r3, [pc, #208]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b72:	d102      	bne.n	8009b7a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8009b74:	4b33      	ldr	r3, [pc, #204]	@ (8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b78:	e059      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b7e:	e056      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b80:	4b31      	ldr	r3, [pc, #196]	@ (8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b84:	e053      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009b86:	2300      	movs	r3, #0
 8009b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b8a:	e050      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b90:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009b94:	430b      	orrs	r3, r1
 8009b96:	d148      	bne.n	8009c2a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009b98:	4b27      	ldr	r3, [pc, #156]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ba0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ba8:	d02a      	beq.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bb0:	d838      	bhi.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d004      	beq.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bbe:	d00d      	beq.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009bc0:	e030      	b.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bce:	d102      	bne.n	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c44 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bd4:	e02b      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bda:	e028      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009bdc:	4b16      	ldr	r3, [pc, #88]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009be4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009be8:	d107      	bne.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009bea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 faea 	bl	800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bf8:	e019      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bfe:	e016      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c00:	4b0d      	ldr	r3, [pc, #52]	@ (8009c38 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c0c:	d107      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c0e:	f107 0318 	add.w	r3, r7, #24
 8009c12:	4618      	mov	r0, r3
 8009c14:	f000 f830 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c1c:	e007      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c22:	e004      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c28:	e001      	b.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3740      	adds	r7, #64	@ 0x40
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	58024400 	.word	0x58024400
 8009c3c:	03d09000 	.word	0x03d09000
 8009c40:	003d0900 	.word	0x003d0900
 8009c44:	007a1200 	.word	0x007a1200
 8009c48:	00bb8000 	.word	0x00bb8000

08009c4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009c50:	f7fe f90a 	bl	8007e68 <HAL_RCC_GetHCLKFreq>
 8009c54:	4602      	mov	r2, r0
 8009c56:	4b06      	ldr	r3, [pc, #24]	@ (8009c70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	091b      	lsrs	r3, r3, #4
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	4904      	ldr	r1, [pc, #16]	@ (8009c74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c62:	5ccb      	ldrb	r3, [r1, r3]
 8009c64:	f003 031f 	and.w	r3, r3, #31
 8009c68:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	58024400 	.word	0x58024400
 8009c74:	0800efe4 	.word	0x0800efe4

08009c78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b089      	sub	sp, #36	@ 0x24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c80:	4ba1      	ldr	r3, [pc, #644]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c84:	f003 0303 	and.w	r3, r3, #3
 8009c88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009c8a:	4b9f      	ldr	r3, [pc, #636]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c8e:	0b1b      	lsrs	r3, r3, #12
 8009c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c96:	4b9c      	ldr	r3, [pc, #624]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c9a:	091b      	lsrs	r3, r3, #4
 8009c9c:	f003 0301 	and.w	r3, r3, #1
 8009ca0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009ca2:	4b99      	ldr	r3, [pc, #612]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca6:	08db      	lsrs	r3, r3, #3
 8009ca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	fb02 f303 	mul.w	r3, r2, r3
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8111 	beq.w	8009ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	2b02      	cmp	r3, #2
 8009cca:	f000 8083 	beq.w	8009dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	f200 80a1 	bhi.w	8009e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d003      	beq.n	8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d056      	beq.n	8009d90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009ce2:	e099      	b.n	8009e18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ce4:	4b88      	ldr	r3, [pc, #544]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d02d      	beq.n	8009d4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cf0:	4b85      	ldr	r3, [pc, #532]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	08db      	lsrs	r3, r3, #3
 8009cf6:	f003 0303 	and.w	r3, r3, #3
 8009cfa:	4a84      	ldr	r2, [pc, #528]	@ (8009f0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8009d00:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	ee07 3a90 	vmov	s15, r3
 8009d08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	ee07 3a90 	vmov	s15, r3
 8009d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d1a:	4b7b      	ldr	r3, [pc, #492]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d22:	ee07 3a90 	vmov	s15, r3
 8009d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d4a:	e087      	b.n	8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	ee07 3a90 	vmov	s15, r3
 8009d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f14 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d66:	ee07 3a90 	vmov	s15, r3
 8009d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d8e:	e065      	b.n	8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	ee07 3a90 	vmov	s15, r3
 8009d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009da2:	4b59      	ldr	r3, [pc, #356]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009daa:	ee07 3a90 	vmov	s15, r3
 8009dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009db6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dd2:	e043      	b.n	8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	ee07 3a90 	vmov	s15, r3
 8009dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009de6:	4b48      	ldr	r3, [pc, #288]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e16:	e021      	b.n	8009e5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	ee07 3a90 	vmov	s15, r3
 8009e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e2a:	4b37      	ldr	r3, [pc, #220]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e32:	ee07 3a90 	vmov	s15, r3
 8009e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f10 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e60:	0a5b      	lsrs	r3, r3, #9
 8009e62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e66:	ee07 3a90 	vmov	s15, r3
 8009e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e82:	ee17 2a90 	vmov	r2, s15
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e8e:	0c1b      	lsrs	r3, r3, #16
 8009e90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e94:	ee07 3a90 	vmov	s15, r3
 8009e98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ea0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ea4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009eb0:	ee17 2a90 	vmov	r2, s15
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009eb8:	4b13      	ldr	r3, [pc, #76]	@ (8009f08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ebc:	0e1b      	lsrs	r3, r3, #24
 8009ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ece:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ed2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ede:	ee17 2a90 	vmov	r2, s15
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009ee6:	e008      	b.n	8009efa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	609a      	str	r2, [r3, #8]
}
 8009efa:	bf00      	nop
 8009efc:	3724      	adds	r7, #36	@ 0x24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	58024400 	.word	0x58024400
 8009f0c:	03d09000 	.word	0x03d09000
 8009f10:	46000000 	.word	0x46000000
 8009f14:	4c742400 	.word	0x4c742400
 8009f18:	4a742400 	.word	0x4a742400
 8009f1c:	4af42400 	.word	0x4af42400

08009f20 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b089      	sub	sp, #36	@ 0x24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f28:	4ba1      	ldr	r3, [pc, #644]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f2c:	f003 0303 	and.w	r3, r3, #3
 8009f30:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f32:	4b9f      	ldr	r3, [pc, #636]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f36:	0d1b      	lsrs	r3, r3, #20
 8009f38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f3c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f3e:	4b9c      	ldr	r3, [pc, #624]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f42:	0a1b      	lsrs	r3, r3, #8
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009f4a:	4b99      	ldr	r3, [pc, #612]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f4e:	08db      	lsrs	r3, r3, #3
 8009f50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f54:	693a      	ldr	r2, [r7, #16]
 8009f56:	fb02 f303 	mul.w	r3, r2, r3
 8009f5a:	ee07 3a90 	vmov	s15, r3
 8009f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 8111 	beq.w	800a190 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	2b02      	cmp	r3, #2
 8009f72:	f000 8083 	beq.w	800a07c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	f200 80a1 	bhi.w	800a0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f7e:	69bb      	ldr	r3, [r7, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d003      	beq.n	8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d056      	beq.n	800a038 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f8a:	e099      	b.n	800a0c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f8c:	4b88      	ldr	r3, [pc, #544]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d02d      	beq.n	8009ff4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f98:	4b85      	ldr	r3, [pc, #532]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	08db      	lsrs	r3, r3, #3
 8009f9e:	f003 0303 	and.w	r3, r3, #3
 8009fa2:	4a84      	ldr	r2, [pc, #528]	@ (800a1b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	ee07 3a90 	vmov	s15, r3
 8009fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	ee07 3a90 	vmov	s15, r3
 8009fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fc2:	4b7b      	ldr	r3, [pc, #492]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fca:	ee07 3a90 	vmov	s15, r3
 8009fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fd6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ff2:	e087      	b.n	800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	ee07 3a90 	vmov	s15, r3
 8009ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ffe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a1bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a006:	4b6a      	ldr	r3, [pc, #424]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a00e:	ee07 3a90 	vmov	s15, r3
 800a012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a016:	ed97 6a03 	vldr	s12, [r7, #12]
 800a01a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a036:	e065      	b.n	800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	ee07 3a90 	vmov	s15, r3
 800a03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a042:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a04a:	4b59      	ldr	r3, [pc, #356]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a04c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a052:	ee07 3a90 	vmov	s15, r3
 800a056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a05a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a05e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a06a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a07a:	e043      	b.n	800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	ee07 3a90 	vmov	s15, r3
 800a082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a086:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a1c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a08e:	4b48      	ldr	r3, [pc, #288]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a096:	ee07 3a90 	vmov	s15, r3
 800a09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a09e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0a2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0be:	e021      	b.n	800a104 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	ee07 3a90 	vmov	s15, r3
 800a0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a1c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0d2:	4b37      	ldr	r3, [pc, #220]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0e6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a1b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a102:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a104:	4b2a      	ldr	r3, [pc, #168]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a108:	0a5b      	lsrs	r3, r3, #9
 800a10a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a10e:	ee07 3a90 	vmov	s15, r3
 800a112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a116:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a11a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a11e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a12a:	ee17 2a90 	vmov	r2, s15
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a132:	4b1f      	ldr	r3, [pc, #124]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a136:	0c1b      	lsrs	r3, r3, #16
 800a138:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a13c:	ee07 3a90 	vmov	s15, r3
 800a140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a144:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a14c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a158:	ee17 2a90 	vmov	r2, s15
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a160:	4b13      	ldr	r3, [pc, #76]	@ (800a1b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a164:	0e1b      	lsrs	r3, r3, #24
 800a166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a16a:	ee07 3a90 	vmov	s15, r3
 800a16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a172:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a17a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a186:	ee17 2a90 	vmov	r2, s15
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a18e:	e008      	b.n	800a1a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	609a      	str	r2, [r3, #8]
}
 800a1a2:	bf00      	nop
 800a1a4:	3724      	adds	r7, #36	@ 0x24
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	58024400 	.word	0x58024400
 800a1b4:	03d09000 	.word	0x03d09000
 800a1b8:	46000000 	.word	0x46000000
 800a1bc:	4c742400 	.word	0x4c742400
 800a1c0:	4a742400 	.word	0x4a742400
 800a1c4:	4af42400 	.word	0x4af42400

0800a1c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b089      	sub	sp, #36	@ 0x24
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1d0:	4ba0      	ldr	r3, [pc, #640]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d4:	f003 0303 	and.w	r3, r3, #3
 800a1d8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a1da:	4b9e      	ldr	r3, [pc, #632]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1de:	091b      	lsrs	r3, r3, #4
 800a1e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1e4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a1e6:	4b9b      	ldr	r3, [pc, #620]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ea:	f003 0301 	and.w	r3, r3, #1
 800a1ee:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a1f0:	4b98      	ldr	r3, [pc, #608]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1f4:	08db      	lsrs	r3, r3, #3
 800a1f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1fa:	693a      	ldr	r2, [r7, #16]
 800a1fc:	fb02 f303 	mul.w	r3, r2, r3
 800a200:	ee07 3a90 	vmov	s15, r3
 800a204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a208:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f000 8111 	beq.w	800a436 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	2b02      	cmp	r3, #2
 800a218:	f000 8083 	beq.w	800a322 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	2b02      	cmp	r3, #2
 800a220:	f200 80a1 	bhi.w	800a366 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d003      	beq.n	800a232 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d056      	beq.n	800a2de <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a230:	e099      	b.n	800a366 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a232:	4b88      	ldr	r3, [pc, #544]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d02d      	beq.n	800a29a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a23e:	4b85      	ldr	r3, [pc, #532]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	08db      	lsrs	r3, r3, #3
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	4a83      	ldr	r2, [pc, #524]	@ (800a458 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a24a:	fa22 f303 	lsr.w	r3, r2, r3
 800a24e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	ee07 3a90 	vmov	s15, r3
 800a256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	ee07 3a90 	vmov	s15, r3
 800a260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a268:	4b7a      	ldr	r3, [pc, #488]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a26a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a270:	ee07 3a90 	vmov	s15, r3
 800a274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a278:	ed97 6a03 	vldr	s12, [r7, #12]
 800a27c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a288:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a28c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a294:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a298:	e087      	b.n	800a3aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	ee07 3a90 	vmov	s15, r3
 800a2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2a4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a460 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2ac:	4b69      	ldr	r3, [pc, #420]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2b4:	ee07 3a90 	vmov	s15, r3
 800a2b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2c0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2dc:	e065      	b.n	800a3aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	ee07 3a90 	vmov	s15, r3
 800a2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2e8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a464 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a2ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2f0:	4b58      	ldr	r3, [pc, #352]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2f8:	ee07 3a90 	vmov	s15, r3
 800a2fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a300:	ed97 6a03 	vldr	s12, [r7, #12]
 800a304:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a30c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a310:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a31c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a320:	e043      	b.n	800a3aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	ee07 3a90 	vmov	s15, r3
 800a328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a32c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a468 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a334:	4b47      	ldr	r3, [pc, #284]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a33c:	ee07 3a90 	vmov	s15, r3
 800a340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a344:	ed97 6a03 	vldr	s12, [r7, #12]
 800a348:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a34c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a354:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a35c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a360:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a364:	e021      	b.n	800a3aa <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	ee07 3a90 	vmov	s15, r3
 800a36c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a370:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a460 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a378:	4b36      	ldr	r3, [pc, #216]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a37a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a380:	ee07 3a90 	vmov	s15, r3
 800a384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a388:	ed97 6a03 	vldr	s12, [r7, #12]
 800a38c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a45c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a398:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a39c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3a8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a3aa:	4b2a      	ldr	r3, [pc, #168]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ae:	0a5b      	lsrs	r3, r3, #9
 800a3b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3b4:	ee07 3a90 	vmov	s15, r3
 800a3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d0:	ee17 2a90 	vmov	r2, s15
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a3d8:	4b1e      	ldr	r3, [pc, #120]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3dc:	0c1b      	lsrs	r3, r3, #16
 800a3de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3e2:	ee07 3a90 	vmov	s15, r3
 800a3e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3fe:	ee17 2a90 	vmov	r2, s15
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a406:	4b13      	ldr	r3, [pc, #76]	@ (800a454 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a40a:	0e1b      	lsrs	r3, r3, #24
 800a40c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a410:	ee07 3a90 	vmov	s15, r3
 800a414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a418:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a41c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a420:	edd7 6a07 	vldr	s13, [r7, #28]
 800a424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a428:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a42c:	ee17 2a90 	vmov	r2, s15
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a434:	e008      	b.n	800a448 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	609a      	str	r2, [r3, #8]
}
 800a448:	bf00      	nop
 800a44a:	3724      	adds	r7, #36	@ 0x24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr
 800a454:	58024400 	.word	0x58024400
 800a458:	03d09000 	.word	0x03d09000
 800a45c:	46000000 	.word	0x46000000
 800a460:	4c742400 	.word	0x4c742400
 800a464:	4a742400 	.word	0x4a742400
 800a468:	4af42400 	.word	0x4af42400

0800a46c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800a474:	4b26      	ldr	r3, [pc, #152]	@ (800a510 <HAL_RCCEx_CRSConfig+0xa4>)
 800a476:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a47a:	4a25      	ldr	r2, [pc, #148]	@ (800a510 <HAL_RCCEx_CRSConfig+0xa4>)
 800a47c:	f043 0302 	orr.w	r3, r3, #2
 800a480:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800a484:	4b22      	ldr	r3, [pc, #136]	@ (800a510 <HAL_RCCEx_CRSConfig+0xa4>)
 800a486:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a48a:	4a21      	ldr	r2, [pc, #132]	@ (800a510 <HAL_RCCEx_CRSConfig+0xa4>)
 800a48c:	f023 0302 	bic.w	r3, r3, #2
 800a490:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800a494:	f7f7 fd9c 	bl	8001fd0 <HAL_GetREVID>
 800a498:	4603      	mov	r3, r0
 800a49a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d80b      	bhi.n	800a4ba <HAL_RCCEx_CRSConfig+0x4e>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a4aa:	d106      	bne.n	800a4ba <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
 800a4b8:	e008      	b.n	800a4cc <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	431a      	orrs	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	4313      	orrs	r3, r2
 800a4d4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	691b      	ldr	r3, [r3, #16]
 800a4da:	041b      	lsls	r3, r3, #16
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800a4e2:	4a0c      	ldr	r2, [pc, #48]	@ (800a514 <HAL_RCCEx_CRSConfig+0xa8>)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800a4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a514 <HAL_RCCEx_CRSConfig+0xa8>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	695b      	ldr	r3, [r3, #20]
 800a4f4:	021b      	lsls	r3, r3, #8
 800a4f6:	4907      	ldr	r1, [pc, #28]	@ (800a514 <HAL_RCCEx_CRSConfig+0xa8>)
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800a4fc:	4b05      	ldr	r3, [pc, #20]	@ (800a514 <HAL_RCCEx_CRSConfig+0xa8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a04      	ldr	r2, [pc, #16]	@ (800a514 <HAL_RCCEx_CRSConfig+0xa8>)
 800a502:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a506:	6013      	str	r3, [r2, #0]
}
 800a508:	bf00      	nop
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	58024400 	.word	0x58024400
 800a514:	40008400 	.word	0x40008400

0800a518 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a526:	4b53      	ldr	r3, [pc, #332]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52a:	f003 0303 	and.w	r3, r3, #3
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d101      	bne.n	800a536 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	e099      	b.n	800a66a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a536:	4b4f      	ldr	r3, [pc, #316]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a4e      	ldr	r2, [pc, #312]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a53c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a540:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a542:	f7f7 fd39 	bl	8001fb8 <HAL_GetTick>
 800a546:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a548:	e008      	b.n	800a55c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a54a:	f7f7 fd35 	bl	8001fb8 <HAL_GetTick>
 800a54e:	4602      	mov	r2, r0
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	2b02      	cmp	r3, #2
 800a556:	d901      	bls.n	800a55c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a558:	2303      	movs	r3, #3
 800a55a:	e086      	b.n	800a66a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a55c:	4b45      	ldr	r3, [pc, #276]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1f0      	bne.n	800a54a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a568:	4b42      	ldr	r3, [pc, #264]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a56c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	031b      	lsls	r3, r3, #12
 800a576:	493f      	ldr	r1, [pc, #252]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	3b01      	subs	r3, #1
 800a582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	025b      	lsls	r3, r3, #9
 800a58e:	b29b      	uxth	r3, r3
 800a590:	431a      	orrs	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	3b01      	subs	r3, #1
 800a598:	041b      	lsls	r3, r3, #16
 800a59a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a59e:	431a      	orrs	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	691b      	ldr	r3, [r3, #16]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	061b      	lsls	r3, r3, #24
 800a5a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a5ac:	4931      	ldr	r1, [pc, #196]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a5b2:	4b30      	ldr	r3, [pc, #192]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	492d      	ldr	r1, [pc, #180]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a5c4:	4b2b      	ldr	r3, [pc, #172]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c8:	f023 0220 	bic.w	r2, r3, #32
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	4928      	ldr	r1, [pc, #160]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a5d6:	4b27      	ldr	r3, [pc, #156]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5da:	4a26      	ldr	r2, [pc, #152]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5dc:	f023 0310 	bic.w	r3, r3, #16
 800a5e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a5e2:	4b24      	ldr	r3, [pc, #144]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5e6:	4b24      	ldr	r3, [pc, #144]	@ (800a678 <RCCEx_PLL2_Config+0x160>)
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	69d2      	ldr	r2, [r2, #28]
 800a5ee:	00d2      	lsls	r2, r2, #3
 800a5f0:	4920      	ldr	r1, [pc, #128]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a5f6:	4b1f      	ldr	r3, [pc, #124]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a5fc:	f043 0310 	orr.w	r3, r3, #16
 800a600:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d106      	bne.n	800a616 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a608:	4b1a      	ldr	r3, [pc, #104]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60c:	4a19      	ldr	r2, [pc, #100]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a60e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a612:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a614:	e00f      	b.n	800a636 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d106      	bne.n	800a62a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a61c:	4b15      	ldr	r3, [pc, #84]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a620:	4a14      	ldr	r2, [pc, #80]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a626:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a628:	e005      	b.n	800a636 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a62a:	4b12      	ldr	r3, [pc, #72]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62e:	4a11      	ldr	r2, [pc, #68]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a630:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a634:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a636:	4b0f      	ldr	r3, [pc, #60]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a0e      	ldr	r2, [pc, #56]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a63c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a642:	f7f7 fcb9 	bl	8001fb8 <HAL_GetTick>
 800a646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a648:	e008      	b.n	800a65c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a64a:	f7f7 fcb5 	bl	8001fb8 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d901      	bls.n	800a65c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e006      	b.n	800a66a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a65c:	4b05      	ldr	r3, [pc, #20]	@ (800a674 <RCCEx_PLL2_Config+0x15c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d0f0      	beq.n	800a64a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a668:	7bfb      	ldrb	r3, [r7, #15]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	58024400 	.word	0x58024400
 800a678:	ffff0007 	.word	0xffff0007

0800a67c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a686:	2300      	movs	r3, #0
 800a688:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a68a:	4b53      	ldr	r3, [pc, #332]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a68c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a68e:	f003 0303 	and.w	r3, r3, #3
 800a692:	2b03      	cmp	r3, #3
 800a694:	d101      	bne.n	800a69a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	e099      	b.n	800a7ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a69a:	4b4f      	ldr	r3, [pc, #316]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a4e      	ldr	r2, [pc, #312]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a6a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6a6:	f7f7 fc87 	bl	8001fb8 <HAL_GetTick>
 800a6aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6ac:	e008      	b.n	800a6c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a6ae:	f7f7 fc83 	bl	8001fb8 <HAL_GetTick>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	1ad3      	subs	r3, r2, r3
 800a6b8:	2b02      	cmp	r3, #2
 800a6ba:	d901      	bls.n	800a6c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e086      	b.n	800a7ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6c0:	4b45      	ldr	r3, [pc, #276]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1f0      	bne.n	800a6ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a6cc:	4b42      	ldr	r3, [pc, #264]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a6ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	051b      	lsls	r3, r3, #20
 800a6da:	493f      	ldr	r1, [pc, #252]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	628b      	str	r3, [r1, #40]	@ 0x28
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	3b01      	subs	r3, #1
 800a6f0:	025b      	lsls	r3, r3, #9
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	431a      	orrs	r2, r3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	041b      	lsls	r3, r3, #16
 800a6fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a702:	431a      	orrs	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	3b01      	subs	r3, #1
 800a70a:	061b      	lsls	r3, r3, #24
 800a70c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a710:	4931      	ldr	r1, [pc, #196]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a712:	4313      	orrs	r3, r2
 800a714:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a716:	4b30      	ldr	r3, [pc, #192]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	695b      	ldr	r3, [r3, #20]
 800a722:	492d      	ldr	r1, [pc, #180]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a724:	4313      	orrs	r3, r2
 800a726:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a728:	4b2b      	ldr	r3, [pc, #172]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	699b      	ldr	r3, [r3, #24]
 800a734:	4928      	ldr	r1, [pc, #160]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a736:	4313      	orrs	r3, r2
 800a738:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a73a:	4b27      	ldr	r3, [pc, #156]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a73c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73e:	4a26      	ldr	r2, [pc, #152]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a744:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a746:	4b24      	ldr	r3, [pc, #144]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a748:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a74a:	4b24      	ldr	r3, [pc, #144]	@ (800a7dc <RCCEx_PLL3_Config+0x160>)
 800a74c:	4013      	ands	r3, r2
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	69d2      	ldr	r2, [r2, #28]
 800a752:	00d2      	lsls	r2, r2, #3
 800a754:	4920      	ldr	r1, [pc, #128]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a756:	4313      	orrs	r3, r2
 800a758:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a75a:	4b1f      	ldr	r3, [pc, #124]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75e:	4a1e      	ldr	r2, [pc, #120]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a764:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d106      	bne.n	800a77a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a76c:	4b1a      	ldr	r3, [pc, #104]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a770:	4a19      	ldr	r2, [pc, #100]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a772:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a776:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a778:	e00f      	b.n	800a79a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d106      	bne.n	800a78e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a780:	4b15      	ldr	r3, [pc, #84]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a784:	4a14      	ldr	r2, [pc, #80]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a786:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a78a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a78c:	e005      	b.n	800a79a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a78e:	4b12      	ldr	r3, [pc, #72]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a792:	4a11      	ldr	r2, [pc, #68]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a794:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a798:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a79a:	4b0f      	ldr	r3, [pc, #60]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a0e      	ldr	r2, [pc, #56]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a7a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7a6:	f7f7 fc07 	bl	8001fb8 <HAL_GetTick>
 800a7aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7ac:	e008      	b.n	800a7c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a7ae:	f7f7 fc03 	bl	8001fb8 <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d901      	bls.n	800a7c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e006      	b.n	800a7ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7c0:	4b05      	ldr	r3, [pc, #20]	@ (800a7d8 <RCCEx_PLL3_Config+0x15c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d0f0      	beq.n	800a7ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	58024400 	.word	0x58024400
 800a7dc:	ffff0007 	.word	0xffff0007

0800a7e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e049      	b.n	800a886 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d106      	bne.n	800a80c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7f7 f9ca 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2202      	movs	r2, #2
 800a810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f000 f99e 	bl	800ab60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d001      	beq.n	800a8a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e04c      	b.n	800a942 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a26      	ldr	r2, [pc, #152]	@ (800a950 <HAL_TIM_Base_Start+0xc0>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d022      	beq.n	800a900 <HAL_TIM_Base_Start+0x70>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8c2:	d01d      	beq.n	800a900 <HAL_TIM_Base_Start+0x70>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a22      	ldr	r2, [pc, #136]	@ (800a954 <HAL_TIM_Base_Start+0xc4>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d018      	beq.n	800a900 <HAL_TIM_Base_Start+0x70>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a21      	ldr	r2, [pc, #132]	@ (800a958 <HAL_TIM_Base_Start+0xc8>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d013      	beq.n	800a900 <HAL_TIM_Base_Start+0x70>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a1f      	ldr	r2, [pc, #124]	@ (800a95c <HAL_TIM_Base_Start+0xcc>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d00e      	beq.n	800a900 <HAL_TIM_Base_Start+0x70>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a1e      	ldr	r2, [pc, #120]	@ (800a960 <HAL_TIM_Base_Start+0xd0>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d009      	beq.n	800a900 <HAL_TIM_Base_Start+0x70>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a1c      	ldr	r2, [pc, #112]	@ (800a964 <HAL_TIM_Base_Start+0xd4>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d004      	beq.n	800a900 <HAL_TIM_Base_Start+0x70>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a1b      	ldr	r2, [pc, #108]	@ (800a968 <HAL_TIM_Base_Start+0xd8>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d115      	bne.n	800a92c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689a      	ldr	r2, [r3, #8]
 800a906:	4b19      	ldr	r3, [pc, #100]	@ (800a96c <HAL_TIM_Base_Start+0xdc>)
 800a908:	4013      	ands	r3, r2
 800a90a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2b06      	cmp	r3, #6
 800a910:	d015      	beq.n	800a93e <HAL_TIM_Base_Start+0xae>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a918:	d011      	beq.n	800a93e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f042 0201 	orr.w	r2, r2, #1
 800a928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a92a:	e008      	b.n	800a93e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f042 0201 	orr.w	r2, r2, #1
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	e000      	b.n	800a940 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a93e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a940:	2300      	movs	r3, #0
}
 800a942:	4618      	mov	r0, r3
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	40010000 	.word	0x40010000
 800a954:	40000400 	.word	0x40000400
 800a958:	40000800 	.word	0x40000800
 800a95c:	40000c00 	.word	0x40000c00
 800a960:	40010400 	.word	0x40010400
 800a964:	40001800 	.word	0x40001800
 800a968:	40014000 	.word	0x40014000
 800a96c:	00010007 	.word	0x00010007

0800a970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a984:	2b01      	cmp	r3, #1
 800a986:	d101      	bne.n	800a98c <HAL_TIM_ConfigClockSource+0x1c>
 800a988:	2302      	movs	r3, #2
 800a98a:	e0dc      	b.n	800ab46 <HAL_TIM_ConfigClockSource+0x1d6>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9a4:	68ba      	ldr	r2, [r7, #8]
 800a9a6:	4b6a      	ldr	r3, [pc, #424]	@ (800ab50 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a64      	ldr	r2, [pc, #400]	@ (800ab54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	f000 80a9 	beq.w	800ab1a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9c8:	4a62      	ldr	r2, [pc, #392]	@ (800ab54 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	f200 80ae 	bhi.w	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d0:	4a61      	ldr	r2, [pc, #388]	@ (800ab58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	f000 80a1 	beq.w	800ab1a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9d8:	4a5f      	ldr	r2, [pc, #380]	@ (800ab58 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	f200 80a6 	bhi.w	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e0:	4a5e      	ldr	r2, [pc, #376]	@ (800ab5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	f000 8099 	beq.w	800ab1a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9e8:	4a5c      	ldr	r2, [pc, #368]	@ (800ab5c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	f200 809e 	bhi.w	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9f4:	f000 8091 	beq.w	800ab1a <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a9fc:	f200 8096 	bhi.w	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa04:	f000 8089 	beq.w	800ab1a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa0c:	f200 808e 	bhi.w	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa14:	d03e      	beq.n	800aa94 <HAL_TIM_ConfigClockSource+0x124>
 800aa16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa1a:	f200 8087 	bhi.w	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa22:	f000 8086 	beq.w	800ab32 <HAL_TIM_ConfigClockSource+0x1c2>
 800aa26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa2a:	d87f      	bhi.n	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa2c:	2b70      	cmp	r3, #112	@ 0x70
 800aa2e:	d01a      	beq.n	800aa66 <HAL_TIM_ConfigClockSource+0xf6>
 800aa30:	2b70      	cmp	r3, #112	@ 0x70
 800aa32:	d87b      	bhi.n	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa34:	2b60      	cmp	r3, #96	@ 0x60
 800aa36:	d050      	beq.n	800aada <HAL_TIM_ConfigClockSource+0x16a>
 800aa38:	2b60      	cmp	r3, #96	@ 0x60
 800aa3a:	d877      	bhi.n	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa3c:	2b50      	cmp	r3, #80	@ 0x50
 800aa3e:	d03c      	beq.n	800aaba <HAL_TIM_ConfigClockSource+0x14a>
 800aa40:	2b50      	cmp	r3, #80	@ 0x50
 800aa42:	d873      	bhi.n	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa44:	2b40      	cmp	r3, #64	@ 0x40
 800aa46:	d058      	beq.n	800aafa <HAL_TIM_ConfigClockSource+0x18a>
 800aa48:	2b40      	cmp	r3, #64	@ 0x40
 800aa4a:	d86f      	bhi.n	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa4c:	2b30      	cmp	r3, #48	@ 0x30
 800aa4e:	d064      	beq.n	800ab1a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa50:	2b30      	cmp	r3, #48	@ 0x30
 800aa52:	d86b      	bhi.n	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa54:	2b20      	cmp	r3, #32
 800aa56:	d060      	beq.n	800ab1a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa58:	2b20      	cmp	r3, #32
 800aa5a:	d867      	bhi.n	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d05c      	beq.n	800ab1a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa60:	2b10      	cmp	r3, #16
 800aa62:	d05a      	beq.n	800ab1a <HAL_TIM_ConfigClockSource+0x1aa>
 800aa64:	e062      	b.n	800ab2c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa76:	f000 f997 	bl	800ada8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68ba      	ldr	r2, [r7, #8]
 800aa90:	609a      	str	r2, [r3, #8]
      break;
 800aa92:	e04f      	b.n	800ab34 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aaa4:	f000 f980 	bl	800ada8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	689a      	ldr	r2, [r3, #8]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aab6:	609a      	str	r2, [r3, #8]
      break;
 800aab8:	e03c      	b.n	800ab34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aac6:	461a      	mov	r2, r3
 800aac8:	f000 f8f0 	bl	800acac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2150      	movs	r1, #80	@ 0x50
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 f94a 	bl	800ad6c <TIM_ITRx_SetConfig>
      break;
 800aad8:	e02c      	b.n	800ab34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aae6:	461a      	mov	r2, r3
 800aae8:	f000 f90f 	bl	800ad0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2160      	movs	r1, #96	@ 0x60
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 f93a 	bl	800ad6c <TIM_ITRx_SetConfig>
      break;
 800aaf8:	e01c      	b.n	800ab34 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab06:	461a      	mov	r2, r3
 800ab08:	f000 f8d0 	bl	800acac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2140      	movs	r1, #64	@ 0x40
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f92a 	bl	800ad6c <TIM_ITRx_SetConfig>
      break;
 800ab18:	e00c      	b.n	800ab34 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4619      	mov	r1, r3
 800ab24:	4610      	mov	r0, r2
 800ab26:	f000 f921 	bl	800ad6c <TIM_ITRx_SetConfig>
      break;
 800ab2a:	e003      	b.n	800ab34 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab30:	e000      	b.n	800ab34 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ab32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	ffceff88 	.word	0xffceff88
 800ab54:	00100040 	.word	0x00100040
 800ab58:	00100030 	.word	0x00100030
 800ab5c:	00100020 	.word	0x00100020

0800ab60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a46      	ldr	r2, [pc, #280]	@ (800ac8c <TIM_Base_SetConfig+0x12c>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d013      	beq.n	800aba0 <TIM_Base_SetConfig+0x40>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab7e:	d00f      	beq.n	800aba0 <TIM_Base_SetConfig+0x40>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a43      	ldr	r2, [pc, #268]	@ (800ac90 <TIM_Base_SetConfig+0x130>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d00b      	beq.n	800aba0 <TIM_Base_SetConfig+0x40>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a42      	ldr	r2, [pc, #264]	@ (800ac94 <TIM_Base_SetConfig+0x134>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d007      	beq.n	800aba0 <TIM_Base_SetConfig+0x40>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a41      	ldr	r2, [pc, #260]	@ (800ac98 <TIM_Base_SetConfig+0x138>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d003      	beq.n	800aba0 <TIM_Base_SetConfig+0x40>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a40      	ldr	r2, [pc, #256]	@ (800ac9c <TIM_Base_SetConfig+0x13c>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d108      	bne.n	800abb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	68fa      	ldr	r2, [r7, #12]
 800abae:	4313      	orrs	r3, r2
 800abb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a35      	ldr	r2, [pc, #212]	@ (800ac8c <TIM_Base_SetConfig+0x12c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d01f      	beq.n	800abfa <TIM_Base_SetConfig+0x9a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abc0:	d01b      	beq.n	800abfa <TIM_Base_SetConfig+0x9a>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a32      	ldr	r2, [pc, #200]	@ (800ac90 <TIM_Base_SetConfig+0x130>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d017      	beq.n	800abfa <TIM_Base_SetConfig+0x9a>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a31      	ldr	r2, [pc, #196]	@ (800ac94 <TIM_Base_SetConfig+0x134>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d013      	beq.n	800abfa <TIM_Base_SetConfig+0x9a>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a30      	ldr	r2, [pc, #192]	@ (800ac98 <TIM_Base_SetConfig+0x138>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d00f      	beq.n	800abfa <TIM_Base_SetConfig+0x9a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a2f      	ldr	r2, [pc, #188]	@ (800ac9c <TIM_Base_SetConfig+0x13c>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d00b      	beq.n	800abfa <TIM_Base_SetConfig+0x9a>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a2e      	ldr	r2, [pc, #184]	@ (800aca0 <TIM_Base_SetConfig+0x140>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d007      	beq.n	800abfa <TIM_Base_SetConfig+0x9a>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a2d      	ldr	r2, [pc, #180]	@ (800aca4 <TIM_Base_SetConfig+0x144>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d003      	beq.n	800abfa <TIM_Base_SetConfig+0x9a>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a2c      	ldr	r2, [pc, #176]	@ (800aca8 <TIM_Base_SetConfig+0x148>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d108      	bne.n	800ac0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a16      	ldr	r2, [pc, #88]	@ (800ac8c <TIM_Base_SetConfig+0x12c>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00f      	beq.n	800ac58 <TIM_Base_SetConfig+0xf8>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a18      	ldr	r2, [pc, #96]	@ (800ac9c <TIM_Base_SetConfig+0x13c>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d00b      	beq.n	800ac58 <TIM_Base_SetConfig+0xf8>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	4a17      	ldr	r2, [pc, #92]	@ (800aca0 <TIM_Base_SetConfig+0x140>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d007      	beq.n	800ac58 <TIM_Base_SetConfig+0xf8>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a16      	ldr	r2, [pc, #88]	@ (800aca4 <TIM_Base_SetConfig+0x144>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d003      	beq.n	800ac58 <TIM_Base_SetConfig+0xf8>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a15      	ldr	r2, [pc, #84]	@ (800aca8 <TIM_Base_SetConfig+0x148>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d103      	bne.n	800ac60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	691a      	ldr	r2, [r3, #16]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d105      	bne.n	800ac7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	f023 0201 	bic.w	r2, r3, #1
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	611a      	str	r2, [r3, #16]
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	40010000 	.word	0x40010000
 800ac90:	40000400 	.word	0x40000400
 800ac94:	40000800 	.word	0x40000800
 800ac98:	40000c00 	.word	0x40000c00
 800ac9c:	40010400 	.word	0x40010400
 800aca0:	40014000 	.word	0x40014000
 800aca4:	40014400 	.word	0x40014400
 800aca8:	40014800 	.word	0x40014800

0800acac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acac:	b480      	push	{r7}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6a1b      	ldr	r3, [r3, #32]
 800acc2:	f023 0201 	bic.w	r2, r3, #1
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	699b      	ldr	r3, [r3, #24]
 800acce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800acd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	011b      	lsls	r3, r3, #4
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	4313      	orrs	r3, r2
 800ace0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	f023 030a 	bic.w	r3, r3, #10
 800ace8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	4313      	orrs	r3, r2
 800acf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	693a      	ldr	r2, [r7, #16]
 800acf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	621a      	str	r2, [r3, #32]
}
 800acfe:	bf00      	nop
 800ad00:	371c      	adds	r7, #28
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b087      	sub	sp, #28
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	60b9      	str	r1, [r7, #8]
 800ad14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6a1b      	ldr	r3, [r3, #32]
 800ad20:	f023 0210 	bic.w	r2, r3, #16
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	031b      	lsls	r3, r3, #12
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	011b      	lsls	r3, r3, #4
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	693a      	ldr	r2, [r7, #16]
 800ad56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	697a      	ldr	r2, [r7, #20]
 800ad5c:	621a      	str	r2, [r3, #32]
}
 800ad5e:	bf00      	nop
 800ad60:	371c      	adds	r7, #28
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
	...

0800ad6c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b085      	sub	sp, #20
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	4b09      	ldr	r3, [pc, #36]	@ (800ada4 <TIM_ITRx_SetConfig+0x38>)
 800ad80:	4013      	ands	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	f043 0307 	orr.w	r3, r3, #7
 800ad8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	609a      	str	r2, [r3, #8]
}
 800ad96:	bf00      	nop
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	ffcfff8f 	.word	0xffcfff8f

0800ada8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b087      	sub	sp, #28
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	607a      	str	r2, [r7, #4]
 800adb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	021a      	lsls	r2, r3, #8
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	431a      	orrs	r2, r3
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4313      	orrs	r3, r2
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	4313      	orrs	r3, r2
 800add4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	609a      	str	r2, [r3, #8]
}
 800addc:	bf00      	nop
 800adde:	371c      	adds	r7, #28
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d101      	bne.n	800ae00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adfc:	2302      	movs	r3, #2
 800adfe:	e06d      	b.n	800aedc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a30      	ldr	r2, [pc, #192]	@ (800aee8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d004      	beq.n	800ae34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a2f      	ldr	r2, [pc, #188]	@ (800aeec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d108      	bne.n	800ae46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	68fa      	ldr	r2, [r7, #12]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68fa      	ldr	r2, [r7, #12]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4a20      	ldr	r2, [pc, #128]	@ (800aee8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d022      	beq.n	800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae72:	d01d      	beq.n	800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a1d      	ldr	r2, [pc, #116]	@ (800aef0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d018      	beq.n	800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a1c      	ldr	r2, [pc, #112]	@ (800aef4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d013      	beq.n	800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a1a      	ldr	r2, [pc, #104]	@ (800aef8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d00e      	beq.n	800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a15      	ldr	r2, [pc, #84]	@ (800aeec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d009      	beq.n	800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a16      	ldr	r2, [pc, #88]	@ (800aefc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d004      	beq.n	800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a15      	ldr	r2, [pc, #84]	@ (800af00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d10c      	bne.n	800aeca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	68ba      	ldr	r2, [r7, #8]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	40010000 	.word	0x40010000
 800aeec:	40010400 	.word	0x40010400
 800aef0:	40000400 	.word	0x40000400
 800aef4:	40000800 	.word	0x40000800
 800aef8:	40000c00 	.word	0x40000c00
 800aefc:	40001800 	.word	0x40001800
 800af00:	40014000 	.word	0x40014000

0800af04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d101      	bne.n	800af16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	e042      	b.n	800af9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d106      	bne.n	800af2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7f6 fe59 	bl	8001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2224      	movs	r2, #36	@ 0x24
 800af32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0201 	bic.w	r2, r2, #1
 800af44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d002      	beq.n	800af54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f001 fafc 	bl	800c54c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fc8d 	bl	800b874 <UART_SetConfig>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d101      	bne.n	800af64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e01b      	b.n	800af9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	685a      	ldr	r2, [r3, #4]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	689a      	ldr	r2, [r3, #8]
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f042 0201 	orr.w	r2, r2, #1
 800af92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 fb7b 	bl	800c690 <UART_CheckIdleState>
 800af9a:	4603      	mov	r3, r0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b08a      	sub	sp, #40	@ 0x28
 800afa8:	af02      	add	r7, sp, #8
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	603b      	str	r3, [r7, #0]
 800afb0:	4613      	mov	r3, r2
 800afb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afba:	2b20      	cmp	r3, #32
 800afbc:	d17b      	bne.n	800b0b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <HAL_UART_Transmit+0x26>
 800afc4:	88fb      	ldrh	r3, [r7, #6]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d101      	bne.n	800afce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800afca:	2301      	movs	r3, #1
 800afcc:	e074      	b.n	800b0b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2221      	movs	r2, #33	@ 0x21
 800afda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800afde:	f7f6 ffeb 	bl	8001fb8 <HAL_GetTick>
 800afe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	88fa      	ldrh	r2, [r7, #6]
 800afe8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	88fa      	ldrh	r2, [r7, #6]
 800aff0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800affc:	d108      	bne.n	800b010 <HAL_UART_Transmit+0x6c>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d104      	bne.n	800b010 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b006:	2300      	movs	r3, #0
 800b008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	61bb      	str	r3, [r7, #24]
 800b00e:	e003      	b.n	800b018 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b014:	2300      	movs	r3, #0
 800b016:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b018:	e030      	b.n	800b07c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	2200      	movs	r2, #0
 800b022:	2180      	movs	r1, #128	@ 0x80
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f001 fbdd 	bl	800c7e4 <UART_WaitOnFlagUntilTimeout>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d005      	beq.n	800b03c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2220      	movs	r2, #32
 800b034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b038:	2303      	movs	r3, #3
 800b03a:	e03d      	b.n	800b0b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10b      	bne.n	800b05a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	881b      	ldrh	r3, [r3, #0]
 800b046:	461a      	mov	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b050:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	3302      	adds	r3, #2
 800b056:	61bb      	str	r3, [r7, #24]
 800b058:	e007      	b.n	800b06a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	781a      	ldrb	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	3301      	adds	r3, #1
 800b068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b070:	b29b      	uxth	r3, r3
 800b072:	3b01      	subs	r3, #1
 800b074:	b29a      	uxth	r2, r3
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b082:	b29b      	uxth	r3, r3
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1c8      	bne.n	800b01a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	2200      	movs	r2, #0
 800b090:	2140      	movs	r1, #64	@ 0x40
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f001 fba6 	bl	800c7e4 <UART_WaitOnFlagUntilTimeout>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d005      	beq.n	800b0aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e006      	b.n	800b0b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	e000      	b.n	800b0b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b0b6:	2302      	movs	r3, #2
  }
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3720      	adds	r7, #32
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b0ba      	sub	sp, #232	@ 0xe8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	69db      	ldr	r3, [r3, #28]
 800b0ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b0e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b0ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b0ee:	4013      	ands	r3, r2
 800b0f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b0f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d11b      	bne.n	800b134 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b100:	f003 0320 	and.w	r3, r3, #32
 800b104:	2b00      	cmp	r3, #0
 800b106:	d015      	beq.n	800b134 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b10c:	f003 0320 	and.w	r3, r3, #32
 800b110:	2b00      	cmp	r3, #0
 800b112:	d105      	bne.n	800b120 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b114:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d009      	beq.n	800b134 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b124:	2b00      	cmp	r3, #0
 800b126:	f000 8377 	beq.w	800b818 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	4798      	blx	r3
      }
      return;
 800b132:	e371      	b.n	800b818 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b134:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 8123 	beq.w	800b384 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b13e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b142:	4b8d      	ldr	r3, [pc, #564]	@ (800b378 <HAL_UART_IRQHandler+0x2b8>)
 800b144:	4013      	ands	r3, r2
 800b146:	2b00      	cmp	r3, #0
 800b148:	d106      	bne.n	800b158 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b14a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b14e:	4b8b      	ldr	r3, [pc, #556]	@ (800b37c <HAL_UART_IRQHandler+0x2bc>)
 800b150:	4013      	ands	r3, r2
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 8116 	beq.w	800b384 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	d011      	beq.n	800b188 <HAL_UART_IRQHandler+0xc8>
 800b164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b168:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d00b      	beq.n	800b188 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2201      	movs	r2, #1
 800b176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b17e:	f043 0201 	orr.w	r2, r3, #1
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b18c:	f003 0302 	and.w	r3, r3, #2
 800b190:	2b00      	cmp	r3, #0
 800b192:	d011      	beq.n	800b1b8 <HAL_UART_IRQHandler+0xf8>
 800b194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00b      	beq.n	800b1b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2202      	movs	r2, #2
 800b1a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ae:	f043 0204 	orr.w	r2, r3, #4
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1bc:	f003 0304 	and.w	r3, r3, #4
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d011      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x128>
 800b1c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00b      	beq.n	800b1e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2204      	movs	r2, #4
 800b1d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1de:	f043 0202 	orr.w	r2, r3, #2
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b1e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1ec:	f003 0308 	and.w	r3, r3, #8
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d017      	beq.n	800b224 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1f8:	f003 0320 	and.w	r3, r3, #32
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d105      	bne.n	800b20c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b200:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b204:	4b5c      	ldr	r3, [pc, #368]	@ (800b378 <HAL_UART_IRQHandler+0x2b8>)
 800b206:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00b      	beq.n	800b224 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	2208      	movs	r2, #8
 800b212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b21a:	f043 0208 	orr.w	r2, r3, #8
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b228:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d012      	beq.n	800b256 <HAL_UART_IRQHandler+0x196>
 800b230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b234:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00c      	beq.n	800b256 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b244:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b24c:	f043 0220 	orr.w	r2, r3, #32
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 82dd 	beq.w	800b81c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b266:	f003 0320 	and.w	r3, r3, #32
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d013      	beq.n	800b296 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b26e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b272:	f003 0320 	and.w	r3, r3, #32
 800b276:	2b00      	cmp	r3, #0
 800b278:	d105      	bne.n	800b286 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b27a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b27e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d007      	beq.n	800b296 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d003      	beq.n	800b296 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b29c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	689b      	ldr	r3, [r3, #8]
 800b2a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2aa:	2b40      	cmp	r3, #64	@ 0x40
 800b2ac:	d005      	beq.n	800b2ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b2ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b2b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d054      	beq.n	800b364 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f001 fb00 	bl	800c8c0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2ca:	2b40      	cmp	r3, #64	@ 0x40
 800b2cc:	d146      	bne.n	800b35c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	3308      	adds	r3, #8
 800b2d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b2dc:	e853 3f00 	ldrex	r3, [r3]
 800b2e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b2e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b2e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3308      	adds	r3, #8
 800b2f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b2fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b2fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b30a:	e841 2300 	strex	r3, r2, [r1]
 800b30e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d1d9      	bne.n	800b2ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b320:	2b00      	cmp	r3, #0
 800b322:	d017      	beq.n	800b354 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b32a:	4a15      	ldr	r2, [pc, #84]	@ (800b380 <HAL_UART_IRQHandler+0x2c0>)
 800b32c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b334:	4618      	mov	r0, r3
 800b336:	f7f9 fdcf 	bl	8004ed8 <HAL_DMA_Abort_IT>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d019      	beq.n	800b374 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b348:	687a      	ldr	r2, [r7, #4]
 800b34a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b34e:	4610      	mov	r0, r2
 800b350:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b352:	e00f      	b.n	800b374 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fa77 	bl	800b848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b35a:	e00b      	b.n	800b374 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 fa73 	bl	800b848 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b362:	e007      	b.n	800b374 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fa6f 	bl	800b848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b372:	e253      	b.n	800b81c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b374:	bf00      	nop
    return;
 800b376:	e251      	b.n	800b81c <HAL_UART_IRQHandler+0x75c>
 800b378:	10000001 	.word	0x10000001
 800b37c:	04000120 	.word	0x04000120
 800b380:	0800c98d 	.word	0x0800c98d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b388:	2b01      	cmp	r3, #1
 800b38a:	f040 81e7 	bne.w	800b75c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b38e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b392:	f003 0310 	and.w	r3, r3, #16
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 81e0 	beq.w	800b75c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b39c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3a0:	f003 0310 	and.w	r3, r3, #16
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f000 81d9 	beq.w	800b75c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2210      	movs	r2, #16
 800b3b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3bc:	2b40      	cmp	r3, #64	@ 0x40
 800b3be:	f040 8151 	bne.w	800b664 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a96      	ldr	r2, [pc, #600]	@ (800b624 <HAL_UART_IRQHandler+0x564>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d068      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a93      	ldr	r2, [pc, #588]	@ (800b628 <HAL_UART_IRQHandler+0x568>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d061      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a91      	ldr	r2, [pc, #580]	@ (800b62c <HAL_UART_IRQHandler+0x56c>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d05a      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a8e      	ldr	r2, [pc, #568]	@ (800b630 <HAL_UART_IRQHandler+0x570>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d053      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a8c      	ldr	r2, [pc, #560]	@ (800b634 <HAL_UART_IRQHandler+0x574>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d04c      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a89      	ldr	r2, [pc, #548]	@ (800b638 <HAL_UART_IRQHandler+0x578>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d045      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a87      	ldr	r2, [pc, #540]	@ (800b63c <HAL_UART_IRQHandler+0x57c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d03e      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a84      	ldr	r2, [pc, #528]	@ (800b640 <HAL_UART_IRQHandler+0x580>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d037      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4a82      	ldr	r2, [pc, #520]	@ (800b644 <HAL_UART_IRQHandler+0x584>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d030      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a7f      	ldr	r2, [pc, #508]	@ (800b648 <HAL_UART_IRQHandler+0x588>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d029      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a7d      	ldr	r2, [pc, #500]	@ (800b64c <HAL_UART_IRQHandler+0x58c>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d022      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a7a      	ldr	r2, [pc, #488]	@ (800b650 <HAL_UART_IRQHandler+0x590>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d01b      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a78      	ldr	r2, [pc, #480]	@ (800b654 <HAL_UART_IRQHandler+0x594>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d014      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a75      	ldr	r2, [pc, #468]	@ (800b658 <HAL_UART_IRQHandler+0x598>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d00d      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a73      	ldr	r2, [pc, #460]	@ (800b65c <HAL_UART_IRQHandler+0x59c>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d006      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x3e2>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a70      	ldr	r2, [pc, #448]	@ (800b660 <HAL_UART_IRQHandler+0x5a0>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d106      	bne.n	800b4b0 <HAL_UART_IRQHandler+0x3f0>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	e005      	b.n	800b4bc <HAL_UART_IRQHandler+0x3fc>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b4c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 81ab 	beq.w	800b820 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b4d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	f080 81a3 	bcs.w	800b820 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b4e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4f0:	f000 8087 	beq.w	800b602 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b508:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b50c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	461a      	mov	r2, r3
 800b51a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b51e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b522:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b526:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b52a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b52e:	e841 2300 	strex	r3, r2, [r1]
 800b532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1da      	bne.n	800b4f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	3308      	adds	r3, #8
 800b544:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b546:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b548:	e853 3f00 	ldrex	r3, [r3]
 800b54c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b54e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b550:	f023 0301 	bic.w	r3, r3, #1
 800b554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	3308      	adds	r3, #8
 800b55e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b562:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b566:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b568:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b56a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b56e:	e841 2300 	strex	r3, r2, [r1]
 800b572:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e1      	bne.n	800b53e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3308      	adds	r3, #8
 800b580:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b584:	e853 3f00 	ldrex	r3, [r3]
 800b588:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b58a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b58c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	3308      	adds	r3, #8
 800b59a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b59e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b5a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b5a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b5a6:	e841 2300 	strex	r3, r2, [r1]
 800b5aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b5ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d1e3      	bne.n	800b57a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2220      	movs	r2, #32
 800b5b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5c8:	e853 3f00 	ldrex	r3, [r3]
 800b5cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5d0:	f023 0310 	bic.w	r3, r3, #16
 800b5d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b5e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5ea:	e841 2300 	strex	r3, r2, [r1]
 800b5ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d1e4      	bne.n	800b5c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f9 f94d 	bl	800489c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2202      	movs	r2, #2
 800b606:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b614:	b29b      	uxth	r3, r3
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	b29b      	uxth	r3, r3
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f91d 	bl	800b85c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b622:	e0fd      	b.n	800b820 <HAL_UART_IRQHandler+0x760>
 800b624:	40020010 	.word	0x40020010
 800b628:	40020028 	.word	0x40020028
 800b62c:	40020040 	.word	0x40020040
 800b630:	40020058 	.word	0x40020058
 800b634:	40020070 	.word	0x40020070
 800b638:	40020088 	.word	0x40020088
 800b63c:	400200a0 	.word	0x400200a0
 800b640:	400200b8 	.word	0x400200b8
 800b644:	40020410 	.word	0x40020410
 800b648:	40020428 	.word	0x40020428
 800b64c:	40020440 	.word	0x40020440
 800b650:	40020458 	.word	0x40020458
 800b654:	40020470 	.word	0x40020470
 800b658:	40020488 	.word	0x40020488
 800b65c:	400204a0 	.word	0x400204a0
 800b660:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b670:	b29b      	uxth	r3, r3
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b67e:	b29b      	uxth	r3, r3
 800b680:	2b00      	cmp	r3, #0
 800b682:	f000 80cf 	beq.w	800b824 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b686:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 80ca 	beq.w	800b824 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b698:	e853 3f00 	ldrex	r3, [r3]
 800b69c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b6a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b6b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b6b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b6b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b6c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1e4      	bne.n	800b690 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d0:	e853 3f00 	ldrex	r3, [r3]
 800b6d4:	623b      	str	r3, [r7, #32]
   return(result);
 800b6d6:	6a3a      	ldr	r2, [r7, #32]
 800b6d8:	4b55      	ldr	r3, [pc, #340]	@ (800b830 <HAL_UART_IRQHandler+0x770>)
 800b6da:	4013      	ands	r3, r2
 800b6dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	3308      	adds	r3, #8
 800b6e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b6ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800b6ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b6f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f2:	e841 2300 	strex	r3, r2, [r1]
 800b6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b6f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1e3      	bne.n	800b6c6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2220      	movs	r2, #32
 800b702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	e853 3f00 	ldrex	r3, [r3]
 800b71e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f023 0310 	bic.w	r3, r3, #16
 800b726:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b734:	61fb      	str	r3, [r7, #28]
 800b736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b738:	69b9      	ldr	r1, [r7, #24]
 800b73a:	69fa      	ldr	r2, [r7, #28]
 800b73c:	e841 2300 	strex	r3, r2, [r1]
 800b740:	617b      	str	r3, [r7, #20]
   return(result);
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1e4      	bne.n	800b712 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2202      	movs	r2, #2
 800b74c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b74e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f881 	bl	800b85c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b75a:	e063      	b.n	800b824 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00e      	beq.n	800b786 <HAL_UART_IRQHandler+0x6c6>
 800b768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b76c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b770:	2b00      	cmp	r3, #0
 800b772:	d008      	beq.n	800b786 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b77c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f001 f945 	bl	800ca0e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b784:	e051      	b.n	800b82a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b78a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d014      	beq.n	800b7bc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d105      	bne.n	800b7aa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b79e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d008      	beq.n	800b7bc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d03a      	beq.n	800b828 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	4798      	blx	r3
    }
    return;
 800b7ba:	e035      	b.n	800b828 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b7bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d009      	beq.n	800b7dc <HAL_UART_IRQHandler+0x71c>
 800b7c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f001 f8ef 	bl	800c9b8 <UART_EndTransmit_IT>
    return;
 800b7da:	e026      	b.n	800b82a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b7dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b7e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d009      	beq.n	800b7fc <HAL_UART_IRQHandler+0x73c>
 800b7e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 f91e 	bl	800ca36 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7fa:	e016      	b.n	800b82a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b800:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b804:	2b00      	cmp	r3, #0
 800b806:	d010      	beq.n	800b82a <HAL_UART_IRQHandler+0x76a>
 800b808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	da0c      	bge.n	800b82a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f001 f906 	bl	800ca22 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b816:	e008      	b.n	800b82a <HAL_UART_IRQHandler+0x76a>
      return;
 800b818:	bf00      	nop
 800b81a:	e006      	b.n	800b82a <HAL_UART_IRQHandler+0x76a>
    return;
 800b81c:	bf00      	nop
 800b81e:	e004      	b.n	800b82a <HAL_UART_IRQHandler+0x76a>
      return;
 800b820:	bf00      	nop
 800b822:	e002      	b.n	800b82a <HAL_UART_IRQHandler+0x76a>
      return;
 800b824:	bf00      	nop
 800b826:	e000      	b.n	800b82a <HAL_UART_IRQHandler+0x76a>
    return;
 800b828:	bf00      	nop
  }
}
 800b82a:	37e8      	adds	r7, #232	@ 0xe8
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	effffffe 	.word	0xeffffffe

0800b834 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	460b      	mov	r3, r1
 800b866:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b868:	bf00      	nop
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b878:	b092      	sub	sp, #72	@ 0x48
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	689a      	ldr	r2, [r3, #8]
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	431a      	orrs	r2, r3
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	431a      	orrs	r2, r3
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	69db      	ldr	r3, [r3, #28]
 800b898:	4313      	orrs	r3, r2
 800b89a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	4bbe      	ldr	r3, [pc, #760]	@ (800bb9c <UART_SetConfig+0x328>)
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	6812      	ldr	r2, [r2, #0]
 800b8aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b8ac:	430b      	orrs	r3, r1
 800b8ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	68da      	ldr	r2, [r3, #12]
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	430a      	orrs	r2, r1
 800b8c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4ab3      	ldr	r2, [pc, #716]	@ (800bba0 <UART_SetConfig+0x32c>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d004      	beq.n	800b8e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	6a1b      	ldr	r3, [r3, #32]
 800b8da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	689a      	ldr	r2, [r3, #8]
 800b8e6:	4baf      	ldr	r3, [pc, #700]	@ (800bba4 <UART_SetConfig+0x330>)
 800b8e8:	4013      	ands	r3, r2
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	6812      	ldr	r2, [r2, #0]
 800b8ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fa:	f023 010f 	bic.w	r1, r3, #15
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	430a      	orrs	r2, r1
 800b908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4aa6      	ldr	r2, [pc, #664]	@ (800bba8 <UART_SetConfig+0x334>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d177      	bne.n	800ba04 <UART_SetConfig+0x190>
 800b914:	4ba5      	ldr	r3, [pc, #660]	@ (800bbac <UART_SetConfig+0x338>)
 800b916:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b91c:	2b28      	cmp	r3, #40	@ 0x28
 800b91e:	d86d      	bhi.n	800b9fc <UART_SetConfig+0x188>
 800b920:	a201      	add	r2, pc, #4	@ (adr r2, 800b928 <UART_SetConfig+0xb4>)
 800b922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b926:	bf00      	nop
 800b928:	0800b9cd 	.word	0x0800b9cd
 800b92c:	0800b9fd 	.word	0x0800b9fd
 800b930:	0800b9fd 	.word	0x0800b9fd
 800b934:	0800b9fd 	.word	0x0800b9fd
 800b938:	0800b9fd 	.word	0x0800b9fd
 800b93c:	0800b9fd 	.word	0x0800b9fd
 800b940:	0800b9fd 	.word	0x0800b9fd
 800b944:	0800b9fd 	.word	0x0800b9fd
 800b948:	0800b9d5 	.word	0x0800b9d5
 800b94c:	0800b9fd 	.word	0x0800b9fd
 800b950:	0800b9fd 	.word	0x0800b9fd
 800b954:	0800b9fd 	.word	0x0800b9fd
 800b958:	0800b9fd 	.word	0x0800b9fd
 800b95c:	0800b9fd 	.word	0x0800b9fd
 800b960:	0800b9fd 	.word	0x0800b9fd
 800b964:	0800b9fd 	.word	0x0800b9fd
 800b968:	0800b9dd 	.word	0x0800b9dd
 800b96c:	0800b9fd 	.word	0x0800b9fd
 800b970:	0800b9fd 	.word	0x0800b9fd
 800b974:	0800b9fd 	.word	0x0800b9fd
 800b978:	0800b9fd 	.word	0x0800b9fd
 800b97c:	0800b9fd 	.word	0x0800b9fd
 800b980:	0800b9fd 	.word	0x0800b9fd
 800b984:	0800b9fd 	.word	0x0800b9fd
 800b988:	0800b9e5 	.word	0x0800b9e5
 800b98c:	0800b9fd 	.word	0x0800b9fd
 800b990:	0800b9fd 	.word	0x0800b9fd
 800b994:	0800b9fd 	.word	0x0800b9fd
 800b998:	0800b9fd 	.word	0x0800b9fd
 800b99c:	0800b9fd 	.word	0x0800b9fd
 800b9a0:	0800b9fd 	.word	0x0800b9fd
 800b9a4:	0800b9fd 	.word	0x0800b9fd
 800b9a8:	0800b9ed 	.word	0x0800b9ed
 800b9ac:	0800b9fd 	.word	0x0800b9fd
 800b9b0:	0800b9fd 	.word	0x0800b9fd
 800b9b4:	0800b9fd 	.word	0x0800b9fd
 800b9b8:	0800b9fd 	.word	0x0800b9fd
 800b9bc:	0800b9fd 	.word	0x0800b9fd
 800b9c0:	0800b9fd 	.word	0x0800b9fd
 800b9c4:	0800b9fd 	.word	0x0800b9fd
 800b9c8:	0800b9f5 	.word	0x0800b9f5
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9d2:	e326      	b.n	800c022 <UART_SetConfig+0x7ae>
 800b9d4:	2304      	movs	r3, #4
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9da:	e322      	b.n	800c022 <UART_SetConfig+0x7ae>
 800b9dc:	2308      	movs	r3, #8
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e2:	e31e      	b.n	800c022 <UART_SetConfig+0x7ae>
 800b9e4:	2310      	movs	r3, #16
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ea:	e31a      	b.n	800c022 <UART_SetConfig+0x7ae>
 800b9ec:	2320      	movs	r3, #32
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f2:	e316      	b.n	800c022 <UART_SetConfig+0x7ae>
 800b9f4:	2340      	movs	r3, #64	@ 0x40
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fa:	e312      	b.n	800c022 <UART_SetConfig+0x7ae>
 800b9fc:	2380      	movs	r3, #128	@ 0x80
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba02:	e30e      	b.n	800c022 <UART_SetConfig+0x7ae>
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a69      	ldr	r2, [pc, #420]	@ (800bbb0 <UART_SetConfig+0x33c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d130      	bne.n	800ba70 <UART_SetConfig+0x1fc>
 800ba0e:	4b67      	ldr	r3, [pc, #412]	@ (800bbac <UART_SetConfig+0x338>)
 800ba10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba12:	f003 0307 	and.w	r3, r3, #7
 800ba16:	2b05      	cmp	r3, #5
 800ba18:	d826      	bhi.n	800ba68 <UART_SetConfig+0x1f4>
 800ba1a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba20 <UART_SetConfig+0x1ac>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba39 	.word	0x0800ba39
 800ba24:	0800ba41 	.word	0x0800ba41
 800ba28:	0800ba49 	.word	0x0800ba49
 800ba2c:	0800ba51 	.word	0x0800ba51
 800ba30:	0800ba59 	.word	0x0800ba59
 800ba34:	0800ba61 	.word	0x0800ba61
 800ba38:	2300      	movs	r3, #0
 800ba3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba3e:	e2f0      	b.n	800c022 <UART_SetConfig+0x7ae>
 800ba40:	2304      	movs	r3, #4
 800ba42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba46:	e2ec      	b.n	800c022 <UART_SetConfig+0x7ae>
 800ba48:	2308      	movs	r3, #8
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4e:	e2e8      	b.n	800c022 <UART_SetConfig+0x7ae>
 800ba50:	2310      	movs	r3, #16
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba56:	e2e4      	b.n	800c022 <UART_SetConfig+0x7ae>
 800ba58:	2320      	movs	r3, #32
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5e:	e2e0      	b.n	800c022 <UART_SetConfig+0x7ae>
 800ba60:	2340      	movs	r3, #64	@ 0x40
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba66:	e2dc      	b.n	800c022 <UART_SetConfig+0x7ae>
 800ba68:	2380      	movs	r3, #128	@ 0x80
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6e:	e2d8      	b.n	800c022 <UART_SetConfig+0x7ae>
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a4f      	ldr	r2, [pc, #316]	@ (800bbb4 <UART_SetConfig+0x340>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d130      	bne.n	800badc <UART_SetConfig+0x268>
 800ba7a:	4b4c      	ldr	r3, [pc, #304]	@ (800bbac <UART_SetConfig+0x338>)
 800ba7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba7e:	f003 0307 	and.w	r3, r3, #7
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	d826      	bhi.n	800bad4 <UART_SetConfig+0x260>
 800ba86:	a201      	add	r2, pc, #4	@ (adr r2, 800ba8c <UART_SetConfig+0x218>)
 800ba88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8c:	0800baa5 	.word	0x0800baa5
 800ba90:	0800baad 	.word	0x0800baad
 800ba94:	0800bab5 	.word	0x0800bab5
 800ba98:	0800babd 	.word	0x0800babd
 800ba9c:	0800bac5 	.word	0x0800bac5
 800baa0:	0800bacd 	.word	0x0800bacd
 800baa4:	2300      	movs	r3, #0
 800baa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baaa:	e2ba      	b.n	800c022 <UART_SetConfig+0x7ae>
 800baac:	2304      	movs	r3, #4
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab2:	e2b6      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bab4:	2308      	movs	r3, #8
 800bab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baba:	e2b2      	b.n	800c022 <UART_SetConfig+0x7ae>
 800babc:	2310      	movs	r3, #16
 800babe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac2:	e2ae      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bac4:	2320      	movs	r3, #32
 800bac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baca:	e2aa      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bacc:	2340      	movs	r3, #64	@ 0x40
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad2:	e2a6      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bad4:	2380      	movs	r3, #128	@ 0x80
 800bad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bada:	e2a2      	b.n	800c022 <UART_SetConfig+0x7ae>
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4a35      	ldr	r2, [pc, #212]	@ (800bbb8 <UART_SetConfig+0x344>)
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d130      	bne.n	800bb48 <UART_SetConfig+0x2d4>
 800bae6:	4b31      	ldr	r3, [pc, #196]	@ (800bbac <UART_SetConfig+0x338>)
 800bae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baea:	f003 0307 	and.w	r3, r3, #7
 800baee:	2b05      	cmp	r3, #5
 800baf0:	d826      	bhi.n	800bb40 <UART_SetConfig+0x2cc>
 800baf2:	a201      	add	r2, pc, #4	@ (adr r2, 800baf8 <UART_SetConfig+0x284>)
 800baf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baf8:	0800bb11 	.word	0x0800bb11
 800bafc:	0800bb19 	.word	0x0800bb19
 800bb00:	0800bb21 	.word	0x0800bb21
 800bb04:	0800bb29 	.word	0x0800bb29
 800bb08:	0800bb31 	.word	0x0800bb31
 800bb0c:	0800bb39 	.word	0x0800bb39
 800bb10:	2300      	movs	r3, #0
 800bb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb16:	e284      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb18:	2304      	movs	r3, #4
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e280      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb20:	2308      	movs	r3, #8
 800bb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb26:	e27c      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb28:	2310      	movs	r3, #16
 800bb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2e:	e278      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb30:	2320      	movs	r3, #32
 800bb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb36:	e274      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb38:	2340      	movs	r3, #64	@ 0x40
 800bb3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb3e:	e270      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb40:	2380      	movs	r3, #128	@ 0x80
 800bb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb46:	e26c      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a1b      	ldr	r2, [pc, #108]	@ (800bbbc <UART_SetConfig+0x348>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d142      	bne.n	800bbd8 <UART_SetConfig+0x364>
 800bb52:	4b16      	ldr	r3, [pc, #88]	@ (800bbac <UART_SetConfig+0x338>)
 800bb54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb56:	f003 0307 	and.w	r3, r3, #7
 800bb5a:	2b05      	cmp	r3, #5
 800bb5c:	d838      	bhi.n	800bbd0 <UART_SetConfig+0x35c>
 800bb5e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb64 <UART_SetConfig+0x2f0>)
 800bb60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb64:	0800bb7d 	.word	0x0800bb7d
 800bb68:	0800bb85 	.word	0x0800bb85
 800bb6c:	0800bb8d 	.word	0x0800bb8d
 800bb70:	0800bb95 	.word	0x0800bb95
 800bb74:	0800bbc1 	.word	0x0800bbc1
 800bb78:	0800bbc9 	.word	0x0800bbc9
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb82:	e24e      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb84:	2304      	movs	r3, #4
 800bb86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb8a:	e24a      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb8c:	2308      	movs	r3, #8
 800bb8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb92:	e246      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb94:	2310      	movs	r3, #16
 800bb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb9a:	e242      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bb9c:	cfff69f3 	.word	0xcfff69f3
 800bba0:	58000c00 	.word	0x58000c00
 800bba4:	11fff4ff 	.word	0x11fff4ff
 800bba8:	40011000 	.word	0x40011000
 800bbac:	58024400 	.word	0x58024400
 800bbb0:	40004400 	.word	0x40004400
 800bbb4:	40004800 	.word	0x40004800
 800bbb8:	40004c00 	.word	0x40004c00
 800bbbc:	40005000 	.word	0x40005000
 800bbc0:	2320      	movs	r3, #32
 800bbc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbc6:	e22c      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bbc8:	2340      	movs	r3, #64	@ 0x40
 800bbca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbce:	e228      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bbd0:	2380      	movs	r3, #128	@ 0x80
 800bbd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bbd6:	e224      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4ab1      	ldr	r2, [pc, #708]	@ (800bea4 <UART_SetConfig+0x630>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d176      	bne.n	800bcd0 <UART_SetConfig+0x45c>
 800bbe2:	4bb1      	ldr	r3, [pc, #708]	@ (800bea8 <UART_SetConfig+0x634>)
 800bbe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bbea:	2b28      	cmp	r3, #40	@ 0x28
 800bbec:	d86c      	bhi.n	800bcc8 <UART_SetConfig+0x454>
 800bbee:	a201      	add	r2, pc, #4	@ (adr r2, 800bbf4 <UART_SetConfig+0x380>)
 800bbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbf4:	0800bc99 	.word	0x0800bc99
 800bbf8:	0800bcc9 	.word	0x0800bcc9
 800bbfc:	0800bcc9 	.word	0x0800bcc9
 800bc00:	0800bcc9 	.word	0x0800bcc9
 800bc04:	0800bcc9 	.word	0x0800bcc9
 800bc08:	0800bcc9 	.word	0x0800bcc9
 800bc0c:	0800bcc9 	.word	0x0800bcc9
 800bc10:	0800bcc9 	.word	0x0800bcc9
 800bc14:	0800bca1 	.word	0x0800bca1
 800bc18:	0800bcc9 	.word	0x0800bcc9
 800bc1c:	0800bcc9 	.word	0x0800bcc9
 800bc20:	0800bcc9 	.word	0x0800bcc9
 800bc24:	0800bcc9 	.word	0x0800bcc9
 800bc28:	0800bcc9 	.word	0x0800bcc9
 800bc2c:	0800bcc9 	.word	0x0800bcc9
 800bc30:	0800bcc9 	.word	0x0800bcc9
 800bc34:	0800bca9 	.word	0x0800bca9
 800bc38:	0800bcc9 	.word	0x0800bcc9
 800bc3c:	0800bcc9 	.word	0x0800bcc9
 800bc40:	0800bcc9 	.word	0x0800bcc9
 800bc44:	0800bcc9 	.word	0x0800bcc9
 800bc48:	0800bcc9 	.word	0x0800bcc9
 800bc4c:	0800bcc9 	.word	0x0800bcc9
 800bc50:	0800bcc9 	.word	0x0800bcc9
 800bc54:	0800bcb1 	.word	0x0800bcb1
 800bc58:	0800bcc9 	.word	0x0800bcc9
 800bc5c:	0800bcc9 	.word	0x0800bcc9
 800bc60:	0800bcc9 	.word	0x0800bcc9
 800bc64:	0800bcc9 	.word	0x0800bcc9
 800bc68:	0800bcc9 	.word	0x0800bcc9
 800bc6c:	0800bcc9 	.word	0x0800bcc9
 800bc70:	0800bcc9 	.word	0x0800bcc9
 800bc74:	0800bcb9 	.word	0x0800bcb9
 800bc78:	0800bcc9 	.word	0x0800bcc9
 800bc7c:	0800bcc9 	.word	0x0800bcc9
 800bc80:	0800bcc9 	.word	0x0800bcc9
 800bc84:	0800bcc9 	.word	0x0800bcc9
 800bc88:	0800bcc9 	.word	0x0800bcc9
 800bc8c:	0800bcc9 	.word	0x0800bcc9
 800bc90:	0800bcc9 	.word	0x0800bcc9
 800bc94:	0800bcc1 	.word	0x0800bcc1
 800bc98:	2301      	movs	r3, #1
 800bc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc9e:	e1c0      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bca0:	2304      	movs	r3, #4
 800bca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bca6:	e1bc      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bca8:	2308      	movs	r3, #8
 800bcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcae:	e1b8      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bcb0:	2310      	movs	r3, #16
 800bcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcb6:	e1b4      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bcb8:	2320      	movs	r3, #32
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcbe:	e1b0      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bcc0:	2340      	movs	r3, #64	@ 0x40
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc6:	e1ac      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bcc8:	2380      	movs	r3, #128	@ 0x80
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcce:	e1a8      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a75      	ldr	r2, [pc, #468]	@ (800beac <UART_SetConfig+0x638>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d130      	bne.n	800bd3c <UART_SetConfig+0x4c8>
 800bcda:	4b73      	ldr	r3, [pc, #460]	@ (800bea8 <UART_SetConfig+0x634>)
 800bcdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcde:	f003 0307 	and.w	r3, r3, #7
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	d826      	bhi.n	800bd34 <UART_SetConfig+0x4c0>
 800bce6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcec <UART_SetConfig+0x478>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bd05 	.word	0x0800bd05
 800bcf0:	0800bd0d 	.word	0x0800bd0d
 800bcf4:	0800bd15 	.word	0x0800bd15
 800bcf8:	0800bd1d 	.word	0x0800bd1d
 800bcfc:	0800bd25 	.word	0x0800bd25
 800bd00:	0800bd2d 	.word	0x0800bd2d
 800bd04:	2300      	movs	r3, #0
 800bd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd0a:	e18a      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd0c:	2304      	movs	r3, #4
 800bd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd12:	e186      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd14:	2308      	movs	r3, #8
 800bd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd1a:	e182      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd1c:	2310      	movs	r3, #16
 800bd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd22:	e17e      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd24:	2320      	movs	r3, #32
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2a:	e17a      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd2c:	2340      	movs	r3, #64	@ 0x40
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd32:	e176      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd34:	2380      	movs	r3, #128	@ 0x80
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3a:	e172      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a5b      	ldr	r2, [pc, #364]	@ (800beb0 <UART_SetConfig+0x63c>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d130      	bne.n	800bda8 <UART_SetConfig+0x534>
 800bd46:	4b58      	ldr	r3, [pc, #352]	@ (800bea8 <UART_SetConfig+0x634>)
 800bd48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd4a:	f003 0307 	and.w	r3, r3, #7
 800bd4e:	2b05      	cmp	r3, #5
 800bd50:	d826      	bhi.n	800bda0 <UART_SetConfig+0x52c>
 800bd52:	a201      	add	r2, pc, #4	@ (adr r2, 800bd58 <UART_SetConfig+0x4e4>)
 800bd54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd58:	0800bd71 	.word	0x0800bd71
 800bd5c:	0800bd79 	.word	0x0800bd79
 800bd60:	0800bd81 	.word	0x0800bd81
 800bd64:	0800bd89 	.word	0x0800bd89
 800bd68:	0800bd91 	.word	0x0800bd91
 800bd6c:	0800bd99 	.word	0x0800bd99
 800bd70:	2300      	movs	r3, #0
 800bd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd76:	e154      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd78:	2304      	movs	r3, #4
 800bd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd7e:	e150      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd80:	2308      	movs	r3, #8
 800bd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd86:	e14c      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd88:	2310      	movs	r3, #16
 800bd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd8e:	e148      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd90:	2320      	movs	r3, #32
 800bd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd96:	e144      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bd98:	2340      	movs	r3, #64	@ 0x40
 800bd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd9e:	e140      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bda0:	2380      	movs	r3, #128	@ 0x80
 800bda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda6:	e13c      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a41      	ldr	r2, [pc, #260]	@ (800beb4 <UART_SetConfig+0x640>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	f040 8082 	bne.w	800beb8 <UART_SetConfig+0x644>
 800bdb4:	4b3c      	ldr	r3, [pc, #240]	@ (800bea8 <UART_SetConfig+0x634>)
 800bdb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bdbc:	2b28      	cmp	r3, #40	@ 0x28
 800bdbe:	d86d      	bhi.n	800be9c <UART_SetConfig+0x628>
 800bdc0:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc8 <UART_SetConfig+0x554>)
 800bdc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc6:	bf00      	nop
 800bdc8:	0800be6d 	.word	0x0800be6d
 800bdcc:	0800be9d 	.word	0x0800be9d
 800bdd0:	0800be9d 	.word	0x0800be9d
 800bdd4:	0800be9d 	.word	0x0800be9d
 800bdd8:	0800be9d 	.word	0x0800be9d
 800bddc:	0800be9d 	.word	0x0800be9d
 800bde0:	0800be9d 	.word	0x0800be9d
 800bde4:	0800be9d 	.word	0x0800be9d
 800bde8:	0800be75 	.word	0x0800be75
 800bdec:	0800be9d 	.word	0x0800be9d
 800bdf0:	0800be9d 	.word	0x0800be9d
 800bdf4:	0800be9d 	.word	0x0800be9d
 800bdf8:	0800be9d 	.word	0x0800be9d
 800bdfc:	0800be9d 	.word	0x0800be9d
 800be00:	0800be9d 	.word	0x0800be9d
 800be04:	0800be9d 	.word	0x0800be9d
 800be08:	0800be7d 	.word	0x0800be7d
 800be0c:	0800be9d 	.word	0x0800be9d
 800be10:	0800be9d 	.word	0x0800be9d
 800be14:	0800be9d 	.word	0x0800be9d
 800be18:	0800be9d 	.word	0x0800be9d
 800be1c:	0800be9d 	.word	0x0800be9d
 800be20:	0800be9d 	.word	0x0800be9d
 800be24:	0800be9d 	.word	0x0800be9d
 800be28:	0800be85 	.word	0x0800be85
 800be2c:	0800be9d 	.word	0x0800be9d
 800be30:	0800be9d 	.word	0x0800be9d
 800be34:	0800be9d 	.word	0x0800be9d
 800be38:	0800be9d 	.word	0x0800be9d
 800be3c:	0800be9d 	.word	0x0800be9d
 800be40:	0800be9d 	.word	0x0800be9d
 800be44:	0800be9d 	.word	0x0800be9d
 800be48:	0800be8d 	.word	0x0800be8d
 800be4c:	0800be9d 	.word	0x0800be9d
 800be50:	0800be9d 	.word	0x0800be9d
 800be54:	0800be9d 	.word	0x0800be9d
 800be58:	0800be9d 	.word	0x0800be9d
 800be5c:	0800be9d 	.word	0x0800be9d
 800be60:	0800be9d 	.word	0x0800be9d
 800be64:	0800be9d 	.word	0x0800be9d
 800be68:	0800be95 	.word	0x0800be95
 800be6c:	2301      	movs	r3, #1
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be72:	e0d6      	b.n	800c022 <UART_SetConfig+0x7ae>
 800be74:	2304      	movs	r3, #4
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be7a:	e0d2      	b.n	800c022 <UART_SetConfig+0x7ae>
 800be7c:	2308      	movs	r3, #8
 800be7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be82:	e0ce      	b.n	800c022 <UART_SetConfig+0x7ae>
 800be84:	2310      	movs	r3, #16
 800be86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be8a:	e0ca      	b.n	800c022 <UART_SetConfig+0x7ae>
 800be8c:	2320      	movs	r3, #32
 800be8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be92:	e0c6      	b.n	800c022 <UART_SetConfig+0x7ae>
 800be94:	2340      	movs	r3, #64	@ 0x40
 800be96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be9a:	e0c2      	b.n	800c022 <UART_SetConfig+0x7ae>
 800be9c:	2380      	movs	r3, #128	@ 0x80
 800be9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bea2:	e0be      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bea4:	40011400 	.word	0x40011400
 800bea8:	58024400 	.word	0x58024400
 800beac:	40007800 	.word	0x40007800
 800beb0:	40007c00 	.word	0x40007c00
 800beb4:	40011800 	.word	0x40011800
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4aad      	ldr	r2, [pc, #692]	@ (800c174 <UART_SetConfig+0x900>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d176      	bne.n	800bfb0 <UART_SetConfig+0x73c>
 800bec2:	4bad      	ldr	r3, [pc, #692]	@ (800c178 <UART_SetConfig+0x904>)
 800bec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800beca:	2b28      	cmp	r3, #40	@ 0x28
 800becc:	d86c      	bhi.n	800bfa8 <UART_SetConfig+0x734>
 800bece:	a201      	add	r2, pc, #4	@ (adr r2, 800bed4 <UART_SetConfig+0x660>)
 800bed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed4:	0800bf79 	.word	0x0800bf79
 800bed8:	0800bfa9 	.word	0x0800bfa9
 800bedc:	0800bfa9 	.word	0x0800bfa9
 800bee0:	0800bfa9 	.word	0x0800bfa9
 800bee4:	0800bfa9 	.word	0x0800bfa9
 800bee8:	0800bfa9 	.word	0x0800bfa9
 800beec:	0800bfa9 	.word	0x0800bfa9
 800bef0:	0800bfa9 	.word	0x0800bfa9
 800bef4:	0800bf81 	.word	0x0800bf81
 800bef8:	0800bfa9 	.word	0x0800bfa9
 800befc:	0800bfa9 	.word	0x0800bfa9
 800bf00:	0800bfa9 	.word	0x0800bfa9
 800bf04:	0800bfa9 	.word	0x0800bfa9
 800bf08:	0800bfa9 	.word	0x0800bfa9
 800bf0c:	0800bfa9 	.word	0x0800bfa9
 800bf10:	0800bfa9 	.word	0x0800bfa9
 800bf14:	0800bf89 	.word	0x0800bf89
 800bf18:	0800bfa9 	.word	0x0800bfa9
 800bf1c:	0800bfa9 	.word	0x0800bfa9
 800bf20:	0800bfa9 	.word	0x0800bfa9
 800bf24:	0800bfa9 	.word	0x0800bfa9
 800bf28:	0800bfa9 	.word	0x0800bfa9
 800bf2c:	0800bfa9 	.word	0x0800bfa9
 800bf30:	0800bfa9 	.word	0x0800bfa9
 800bf34:	0800bf91 	.word	0x0800bf91
 800bf38:	0800bfa9 	.word	0x0800bfa9
 800bf3c:	0800bfa9 	.word	0x0800bfa9
 800bf40:	0800bfa9 	.word	0x0800bfa9
 800bf44:	0800bfa9 	.word	0x0800bfa9
 800bf48:	0800bfa9 	.word	0x0800bfa9
 800bf4c:	0800bfa9 	.word	0x0800bfa9
 800bf50:	0800bfa9 	.word	0x0800bfa9
 800bf54:	0800bf99 	.word	0x0800bf99
 800bf58:	0800bfa9 	.word	0x0800bfa9
 800bf5c:	0800bfa9 	.word	0x0800bfa9
 800bf60:	0800bfa9 	.word	0x0800bfa9
 800bf64:	0800bfa9 	.word	0x0800bfa9
 800bf68:	0800bfa9 	.word	0x0800bfa9
 800bf6c:	0800bfa9 	.word	0x0800bfa9
 800bf70:	0800bfa9 	.word	0x0800bfa9
 800bf74:	0800bfa1 	.word	0x0800bfa1
 800bf78:	2301      	movs	r3, #1
 800bf7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf7e:	e050      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bf80:	2304      	movs	r3, #4
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf86:	e04c      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bf88:	2308      	movs	r3, #8
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf8e:	e048      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bf90:	2310      	movs	r3, #16
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf96:	e044      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bf98:	2320      	movs	r3, #32
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9e:	e040      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bfa0:	2340      	movs	r3, #64	@ 0x40
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa6:	e03c      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bfa8:	2380      	movs	r3, #128	@ 0x80
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfae:	e038      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a71      	ldr	r2, [pc, #452]	@ (800c17c <UART_SetConfig+0x908>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d130      	bne.n	800c01c <UART_SetConfig+0x7a8>
 800bfba:	4b6f      	ldr	r3, [pc, #444]	@ (800c178 <UART_SetConfig+0x904>)
 800bfbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bfbe:	f003 0307 	and.w	r3, r3, #7
 800bfc2:	2b05      	cmp	r3, #5
 800bfc4:	d826      	bhi.n	800c014 <UART_SetConfig+0x7a0>
 800bfc6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfcc <UART_SetConfig+0x758>)
 800bfc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfcc:	0800bfe5 	.word	0x0800bfe5
 800bfd0:	0800bfed 	.word	0x0800bfed
 800bfd4:	0800bff5 	.word	0x0800bff5
 800bfd8:	0800bffd 	.word	0x0800bffd
 800bfdc:	0800c005 	.word	0x0800c005
 800bfe0:	0800c00d 	.word	0x0800c00d
 800bfe4:	2302      	movs	r3, #2
 800bfe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfea:	e01a      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bfec:	2304      	movs	r3, #4
 800bfee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bff2:	e016      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bff4:	2308      	movs	r3, #8
 800bff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bffa:	e012      	b.n	800c022 <UART_SetConfig+0x7ae>
 800bffc:	2310      	movs	r3, #16
 800bffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c002:	e00e      	b.n	800c022 <UART_SetConfig+0x7ae>
 800c004:	2320      	movs	r3, #32
 800c006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00a:	e00a      	b.n	800c022 <UART_SetConfig+0x7ae>
 800c00c:	2340      	movs	r3, #64	@ 0x40
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c012:	e006      	b.n	800c022 <UART_SetConfig+0x7ae>
 800c014:	2380      	movs	r3, #128	@ 0x80
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c01a:	e002      	b.n	800c022 <UART_SetConfig+0x7ae>
 800c01c:	2380      	movs	r3, #128	@ 0x80
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a55      	ldr	r2, [pc, #340]	@ (800c17c <UART_SetConfig+0x908>)
 800c028:	4293      	cmp	r3, r2
 800c02a:	f040 80f8 	bne.w	800c21e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c02e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c032:	2b20      	cmp	r3, #32
 800c034:	dc46      	bgt.n	800c0c4 <UART_SetConfig+0x850>
 800c036:	2b02      	cmp	r3, #2
 800c038:	db75      	blt.n	800c126 <UART_SetConfig+0x8b2>
 800c03a:	3b02      	subs	r3, #2
 800c03c:	2b1e      	cmp	r3, #30
 800c03e:	d872      	bhi.n	800c126 <UART_SetConfig+0x8b2>
 800c040:	a201      	add	r2, pc, #4	@ (adr r2, 800c048 <UART_SetConfig+0x7d4>)
 800c042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c046:	bf00      	nop
 800c048:	0800c0cb 	.word	0x0800c0cb
 800c04c:	0800c127 	.word	0x0800c127
 800c050:	0800c0d3 	.word	0x0800c0d3
 800c054:	0800c127 	.word	0x0800c127
 800c058:	0800c127 	.word	0x0800c127
 800c05c:	0800c127 	.word	0x0800c127
 800c060:	0800c0e3 	.word	0x0800c0e3
 800c064:	0800c127 	.word	0x0800c127
 800c068:	0800c127 	.word	0x0800c127
 800c06c:	0800c127 	.word	0x0800c127
 800c070:	0800c127 	.word	0x0800c127
 800c074:	0800c127 	.word	0x0800c127
 800c078:	0800c127 	.word	0x0800c127
 800c07c:	0800c127 	.word	0x0800c127
 800c080:	0800c0f3 	.word	0x0800c0f3
 800c084:	0800c127 	.word	0x0800c127
 800c088:	0800c127 	.word	0x0800c127
 800c08c:	0800c127 	.word	0x0800c127
 800c090:	0800c127 	.word	0x0800c127
 800c094:	0800c127 	.word	0x0800c127
 800c098:	0800c127 	.word	0x0800c127
 800c09c:	0800c127 	.word	0x0800c127
 800c0a0:	0800c127 	.word	0x0800c127
 800c0a4:	0800c127 	.word	0x0800c127
 800c0a8:	0800c127 	.word	0x0800c127
 800c0ac:	0800c127 	.word	0x0800c127
 800c0b0:	0800c127 	.word	0x0800c127
 800c0b4:	0800c127 	.word	0x0800c127
 800c0b8:	0800c127 	.word	0x0800c127
 800c0bc:	0800c127 	.word	0x0800c127
 800c0c0:	0800c119 	.word	0x0800c119
 800c0c4:	2b40      	cmp	r3, #64	@ 0x40
 800c0c6:	d02a      	beq.n	800c11e <UART_SetConfig+0x8aa>
 800c0c8:	e02d      	b.n	800c126 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c0ca:	f7fd fdbf 	bl	8009c4c <HAL_RCCEx_GetD3PCLK1Freq>
 800c0ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c0d0:	e02f      	b.n	800c132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7fd fdce 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0e0:	e027      	b.n	800c132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0e2:	f107 0318 	add.w	r3, r7, #24
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fd ff1a 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0f0:	e01f      	b.n	800c132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0f2:	4b21      	ldr	r3, [pc, #132]	@ (800c178 <UART_SetConfig+0x904>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0320 	and.w	r3, r3, #32
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d009      	beq.n	800c112 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0fe:	4b1e      	ldr	r3, [pc, #120]	@ (800c178 <UART_SetConfig+0x904>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	08db      	lsrs	r3, r3, #3
 800c104:	f003 0303 	and.w	r3, r3, #3
 800c108:	4a1d      	ldr	r2, [pc, #116]	@ (800c180 <UART_SetConfig+0x90c>)
 800c10a:	fa22 f303 	lsr.w	r3, r2, r3
 800c10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c110:	e00f      	b.n	800c132 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c112:	4b1b      	ldr	r3, [pc, #108]	@ (800c180 <UART_SetConfig+0x90c>)
 800c114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c116:	e00c      	b.n	800c132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c118:	4b1a      	ldr	r3, [pc, #104]	@ (800c184 <UART_SetConfig+0x910>)
 800c11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c11c:	e009      	b.n	800c132 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c11e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c124:	e005      	b.n	800c132 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c12a:	2301      	movs	r3, #1
 800c12c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c130:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c134:	2b00      	cmp	r3, #0
 800c136:	f000 81ee 	beq.w	800c516 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13e:	4a12      	ldr	r2, [pc, #72]	@ (800c188 <UART_SetConfig+0x914>)
 800c140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c144:	461a      	mov	r2, r3
 800c146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c148:	fbb3 f3f2 	udiv	r3, r3, r2
 800c14c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c14e:	697b      	ldr	r3, [r7, #20]
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	4613      	mov	r3, r2
 800c154:	005b      	lsls	r3, r3, #1
 800c156:	4413      	add	r3, r2
 800c158:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d305      	bcc.n	800c16a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c166:	429a      	cmp	r2, r3
 800c168:	d910      	bls.n	800c18c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c170:	e1d1      	b.n	800c516 <UART_SetConfig+0xca2>
 800c172:	bf00      	nop
 800c174:	40011c00 	.word	0x40011c00
 800c178:	58024400 	.word	0x58024400
 800c17c:	58000c00 	.word	0x58000c00
 800c180:	03d09000 	.word	0x03d09000
 800c184:	003d0900 	.word	0x003d0900
 800c188:	0800effc 	.word	0x0800effc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c18e:	2200      	movs	r2, #0
 800c190:	60bb      	str	r3, [r7, #8]
 800c192:	60fa      	str	r2, [r7, #12]
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c198:	4ac0      	ldr	r2, [pc, #768]	@ (800c49c <UART_SetConfig+0xc28>)
 800c19a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	603b      	str	r3, [r7, #0]
 800c1a4:	607a      	str	r2, [r7, #4]
 800c1a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c1ae:	f7f4 f89f 	bl	80002f0 <__aeabi_uldivmod>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	4610      	mov	r0, r2
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	f04f 0200 	mov.w	r2, #0
 800c1be:	f04f 0300 	mov.w	r3, #0
 800c1c2:	020b      	lsls	r3, r1, #8
 800c1c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c1c8:	0202      	lsls	r2, r0, #8
 800c1ca:	6979      	ldr	r1, [r7, #20]
 800c1cc:	6849      	ldr	r1, [r1, #4]
 800c1ce:	0849      	lsrs	r1, r1, #1
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	eb12 0804 	adds.w	r8, r2, r4
 800c1da:	eb43 0905 	adc.w	r9, r3, r5
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	469a      	mov	sl, r3
 800c1e6:	4693      	mov	fp, r2
 800c1e8:	4652      	mov	r2, sl
 800c1ea:	465b      	mov	r3, fp
 800c1ec:	4640      	mov	r0, r8
 800c1ee:	4649      	mov	r1, r9
 800c1f0:	f7f4 f87e 	bl	80002f0 <__aeabi_uldivmod>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	460b      	mov	r3, r1
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c202:	d308      	bcc.n	800c216 <UART_SetConfig+0x9a2>
 800c204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c206:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c20a:	d204      	bcs.n	800c216 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c212:	60da      	str	r2, [r3, #12]
 800c214:	e17f      	b.n	800c516 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c21c:	e17b      	b.n	800c516 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	69db      	ldr	r3, [r3, #28]
 800c222:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c226:	f040 80bd 	bne.w	800c3a4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c22a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c22e:	2b20      	cmp	r3, #32
 800c230:	dc48      	bgt.n	800c2c4 <UART_SetConfig+0xa50>
 800c232:	2b00      	cmp	r3, #0
 800c234:	db7b      	blt.n	800c32e <UART_SetConfig+0xaba>
 800c236:	2b20      	cmp	r3, #32
 800c238:	d879      	bhi.n	800c32e <UART_SetConfig+0xaba>
 800c23a:	a201      	add	r2, pc, #4	@ (adr r2, 800c240 <UART_SetConfig+0x9cc>)
 800c23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c240:	0800c2cb 	.word	0x0800c2cb
 800c244:	0800c2d3 	.word	0x0800c2d3
 800c248:	0800c32f 	.word	0x0800c32f
 800c24c:	0800c32f 	.word	0x0800c32f
 800c250:	0800c2db 	.word	0x0800c2db
 800c254:	0800c32f 	.word	0x0800c32f
 800c258:	0800c32f 	.word	0x0800c32f
 800c25c:	0800c32f 	.word	0x0800c32f
 800c260:	0800c2eb 	.word	0x0800c2eb
 800c264:	0800c32f 	.word	0x0800c32f
 800c268:	0800c32f 	.word	0x0800c32f
 800c26c:	0800c32f 	.word	0x0800c32f
 800c270:	0800c32f 	.word	0x0800c32f
 800c274:	0800c32f 	.word	0x0800c32f
 800c278:	0800c32f 	.word	0x0800c32f
 800c27c:	0800c32f 	.word	0x0800c32f
 800c280:	0800c2fb 	.word	0x0800c2fb
 800c284:	0800c32f 	.word	0x0800c32f
 800c288:	0800c32f 	.word	0x0800c32f
 800c28c:	0800c32f 	.word	0x0800c32f
 800c290:	0800c32f 	.word	0x0800c32f
 800c294:	0800c32f 	.word	0x0800c32f
 800c298:	0800c32f 	.word	0x0800c32f
 800c29c:	0800c32f 	.word	0x0800c32f
 800c2a0:	0800c32f 	.word	0x0800c32f
 800c2a4:	0800c32f 	.word	0x0800c32f
 800c2a8:	0800c32f 	.word	0x0800c32f
 800c2ac:	0800c32f 	.word	0x0800c32f
 800c2b0:	0800c32f 	.word	0x0800c32f
 800c2b4:	0800c32f 	.word	0x0800c32f
 800c2b8:	0800c32f 	.word	0x0800c32f
 800c2bc:	0800c32f 	.word	0x0800c32f
 800c2c0:	0800c321 	.word	0x0800c321
 800c2c4:	2b40      	cmp	r3, #64	@ 0x40
 800c2c6:	d02e      	beq.n	800c326 <UART_SetConfig+0xab2>
 800c2c8:	e031      	b.n	800c32e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2ca:	f7fb fdfd 	bl	8007ec8 <HAL_RCC_GetPCLK1Freq>
 800c2ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c2d0:	e033      	b.n	800c33a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2d2:	f7fb fe0f 	bl	8007ef4 <HAL_RCC_GetPCLK2Freq>
 800c2d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c2d8:	e02f      	b.n	800c33a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7fd fcca 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2e8:	e027      	b.n	800c33a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2ea:	f107 0318 	add.w	r3, r7, #24
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fd fe16 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2f8:	e01f      	b.n	800c33a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2fa:	4b69      	ldr	r3, [pc, #420]	@ (800c4a0 <UART_SetConfig+0xc2c>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 0320 	and.w	r3, r3, #32
 800c302:	2b00      	cmp	r3, #0
 800c304:	d009      	beq.n	800c31a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c306:	4b66      	ldr	r3, [pc, #408]	@ (800c4a0 <UART_SetConfig+0xc2c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	08db      	lsrs	r3, r3, #3
 800c30c:	f003 0303 	and.w	r3, r3, #3
 800c310:	4a64      	ldr	r2, [pc, #400]	@ (800c4a4 <UART_SetConfig+0xc30>)
 800c312:	fa22 f303 	lsr.w	r3, r2, r3
 800c316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c318:	e00f      	b.n	800c33a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c31a:	4b62      	ldr	r3, [pc, #392]	@ (800c4a4 <UART_SetConfig+0xc30>)
 800c31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c31e:	e00c      	b.n	800c33a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c320:	4b61      	ldr	r3, [pc, #388]	@ (800c4a8 <UART_SetConfig+0xc34>)
 800c322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c324:	e009      	b.n	800c33a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c32c:	e005      	b.n	800c33a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c32e:	2300      	movs	r3, #0
 800c330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c33a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	f000 80ea 	beq.w	800c516 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c346:	4a55      	ldr	r2, [pc, #340]	@ (800c49c <UART_SetConfig+0xc28>)
 800c348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c34c:	461a      	mov	r2, r3
 800c34e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c350:	fbb3 f3f2 	udiv	r3, r3, r2
 800c354:	005a      	lsls	r2, r3, #1
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	085b      	lsrs	r3, r3, #1
 800c35c:	441a      	add	r2, r3
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	fbb2 f3f3 	udiv	r3, r2, r3
 800c366:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36a:	2b0f      	cmp	r3, #15
 800c36c:	d916      	bls.n	800c39c <UART_SetConfig+0xb28>
 800c36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c374:	d212      	bcs.n	800c39c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c378:	b29b      	uxth	r3, r3
 800c37a:	f023 030f 	bic.w	r3, r3, #15
 800c37e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c382:	085b      	lsrs	r3, r3, #1
 800c384:	b29b      	uxth	r3, r3
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c38e:	4313      	orrs	r3, r2
 800c390:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c398:	60da      	str	r2, [r3, #12]
 800c39a:	e0bc      	b.n	800c516 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c3a2:	e0b8      	b.n	800c516 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c3a4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c3a8:	2b20      	cmp	r3, #32
 800c3aa:	dc4b      	bgt.n	800c444 <UART_SetConfig+0xbd0>
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f2c0 8087 	blt.w	800c4c0 <UART_SetConfig+0xc4c>
 800c3b2:	2b20      	cmp	r3, #32
 800c3b4:	f200 8084 	bhi.w	800c4c0 <UART_SetConfig+0xc4c>
 800c3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c0 <UART_SetConfig+0xb4c>)
 800c3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3be:	bf00      	nop
 800c3c0:	0800c44b 	.word	0x0800c44b
 800c3c4:	0800c453 	.word	0x0800c453
 800c3c8:	0800c4c1 	.word	0x0800c4c1
 800c3cc:	0800c4c1 	.word	0x0800c4c1
 800c3d0:	0800c45b 	.word	0x0800c45b
 800c3d4:	0800c4c1 	.word	0x0800c4c1
 800c3d8:	0800c4c1 	.word	0x0800c4c1
 800c3dc:	0800c4c1 	.word	0x0800c4c1
 800c3e0:	0800c46b 	.word	0x0800c46b
 800c3e4:	0800c4c1 	.word	0x0800c4c1
 800c3e8:	0800c4c1 	.word	0x0800c4c1
 800c3ec:	0800c4c1 	.word	0x0800c4c1
 800c3f0:	0800c4c1 	.word	0x0800c4c1
 800c3f4:	0800c4c1 	.word	0x0800c4c1
 800c3f8:	0800c4c1 	.word	0x0800c4c1
 800c3fc:	0800c4c1 	.word	0x0800c4c1
 800c400:	0800c47b 	.word	0x0800c47b
 800c404:	0800c4c1 	.word	0x0800c4c1
 800c408:	0800c4c1 	.word	0x0800c4c1
 800c40c:	0800c4c1 	.word	0x0800c4c1
 800c410:	0800c4c1 	.word	0x0800c4c1
 800c414:	0800c4c1 	.word	0x0800c4c1
 800c418:	0800c4c1 	.word	0x0800c4c1
 800c41c:	0800c4c1 	.word	0x0800c4c1
 800c420:	0800c4c1 	.word	0x0800c4c1
 800c424:	0800c4c1 	.word	0x0800c4c1
 800c428:	0800c4c1 	.word	0x0800c4c1
 800c42c:	0800c4c1 	.word	0x0800c4c1
 800c430:	0800c4c1 	.word	0x0800c4c1
 800c434:	0800c4c1 	.word	0x0800c4c1
 800c438:	0800c4c1 	.word	0x0800c4c1
 800c43c:	0800c4c1 	.word	0x0800c4c1
 800c440:	0800c4b3 	.word	0x0800c4b3
 800c444:	2b40      	cmp	r3, #64	@ 0x40
 800c446:	d037      	beq.n	800c4b8 <UART_SetConfig+0xc44>
 800c448:	e03a      	b.n	800c4c0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c44a:	f7fb fd3d 	bl	8007ec8 <HAL_RCC_GetPCLK1Freq>
 800c44e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c450:	e03c      	b.n	800c4cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c452:	f7fb fd4f 	bl	8007ef4 <HAL_RCC_GetPCLK2Freq>
 800c456:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c458:	e038      	b.n	800c4cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c45a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c45e:	4618      	mov	r0, r3
 800c460:	f7fd fc0a 	bl	8009c78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c468:	e030      	b.n	800c4cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c46a:	f107 0318 	add.w	r3, r7, #24
 800c46e:	4618      	mov	r0, r3
 800c470:	f7fd fd56 	bl	8009f20 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c478:	e028      	b.n	800c4cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c47a:	4b09      	ldr	r3, [pc, #36]	@ (800c4a0 <UART_SetConfig+0xc2c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 0320 	and.w	r3, r3, #32
 800c482:	2b00      	cmp	r3, #0
 800c484:	d012      	beq.n	800c4ac <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c486:	4b06      	ldr	r3, [pc, #24]	@ (800c4a0 <UART_SetConfig+0xc2c>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	08db      	lsrs	r3, r3, #3
 800c48c:	f003 0303 	and.w	r3, r3, #3
 800c490:	4a04      	ldr	r2, [pc, #16]	@ (800c4a4 <UART_SetConfig+0xc30>)
 800c492:	fa22 f303 	lsr.w	r3, r2, r3
 800c496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c498:	e018      	b.n	800c4cc <UART_SetConfig+0xc58>
 800c49a:	bf00      	nop
 800c49c:	0800effc 	.word	0x0800effc
 800c4a0:	58024400 	.word	0x58024400
 800c4a4:	03d09000 	.word	0x03d09000
 800c4a8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c4ac:	4b24      	ldr	r3, [pc, #144]	@ (800c540 <UART_SetConfig+0xccc>)
 800c4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4b0:	e00c      	b.n	800c4cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4b2:	4b24      	ldr	r3, [pc, #144]	@ (800c544 <UART_SetConfig+0xcd0>)
 800c4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4b6:	e009      	b.n	800c4cc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c4be:	e005      	b.n	800c4cc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c4ca:	bf00      	nop
    }

    if (pclk != 0U)
 800c4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d021      	beq.n	800c516 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c548 <UART_SetConfig+0xcd4>)
 800c4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e0:	fbb3 f2f2 	udiv	r2, r3, r2
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	085b      	lsrs	r3, r3, #1
 800c4ea:	441a      	add	r2, r3
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f8:	2b0f      	cmp	r3, #15
 800c4fa:	d909      	bls.n	800c510 <UART_SetConfig+0xc9c>
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c502:	d205      	bcs.n	800c510 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c506:	b29a      	uxth	r2, r3
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	60da      	str	r2, [r3, #12]
 800c50e:	e002      	b.n	800c516 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	2201      	movs	r2, #1
 800c51a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2201      	movs	r2, #1
 800c522:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2200      	movs	r2, #0
 800c52a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	2200      	movs	r2, #0
 800c530:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c532:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c536:	4618      	mov	r0, r3
 800c538:	3748      	adds	r7, #72	@ 0x48
 800c53a:	46bd      	mov	sp, r7
 800c53c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c540:	03d09000 	.word	0x03d09000
 800c544:	003d0900 	.word	0x003d0900
 800c548:	0800effc 	.word	0x0800effc

0800c54c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c558:	f003 0308 	and.w	r3, r3, #8
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00a      	beq.n	800c576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	685b      	ldr	r3, [r3, #4]
 800c566:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	430a      	orrs	r2, r1
 800c574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57a:	f003 0301 	and.w	r3, r3, #1
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00a      	beq.n	800c598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	430a      	orrs	r2, r1
 800c596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c59c:	f003 0302 	and.w	r3, r3, #2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d00a      	beq.n	800c5ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	685b      	ldr	r3, [r3, #4]
 800c5aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	430a      	orrs	r2, r1
 800c5b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5be:	f003 0304 	and.w	r3, r3, #4
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00a      	beq.n	800c5dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	430a      	orrs	r2, r1
 800c5da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5e0:	f003 0310 	and.w	r3, r3, #16
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d00a      	beq.n	800c5fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c602:	f003 0320 	and.w	r3, r3, #32
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	689b      	ldr	r3, [r3, #8]
 800c610:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	430a      	orrs	r2, r1
 800c61e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01a      	beq.n	800c662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	430a      	orrs	r2, r1
 800c640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c64a:	d10a      	bne.n	800c662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	430a      	orrs	r2, r1
 800c660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d00a      	beq.n	800c684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	430a      	orrs	r2, r1
 800c682:	605a      	str	r2, [r3, #4]
  }
}
 800c684:	bf00      	nop
 800c686:	370c      	adds	r7, #12
 800c688:	46bd      	mov	sp, r7
 800c68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68e:	4770      	bx	lr

0800c690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b098      	sub	sp, #96	@ 0x60
 800c694:	af02      	add	r7, sp, #8
 800c696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c6a0:	f7f5 fc8a 	bl	8001fb8 <HAL_GetTick>
 800c6a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f003 0308 	and.w	r3, r3, #8
 800c6b0:	2b08      	cmp	r3, #8
 800c6b2:	d12f      	bne.n	800c714 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f88e 	bl	800c7e4 <UART_WaitOnFlagUntilTimeout>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d022      	beq.n	800c714 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d6:	e853 3f00 	ldrex	r3, [r3]
 800c6da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c6dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ec:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c6f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6f4:	e841 2300 	strex	r3, r2, [r1]
 800c6f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c6fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e6      	bne.n	800c6ce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2220      	movs	r2, #32
 800c704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c710:	2303      	movs	r3, #3
 800c712:	e063      	b.n	800c7dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f003 0304 	and.w	r3, r3, #4
 800c71e:	2b04      	cmp	r3, #4
 800c720:	d149      	bne.n	800c7b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c722:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c72a:	2200      	movs	r2, #0
 800c72c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 f857 	bl	800c7e4 <UART_WaitOnFlagUntilTimeout>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d03c      	beq.n	800c7b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c744:	e853 3f00 	ldrex	r3, [r3]
 800c748:	623b      	str	r3, [r7, #32]
   return(result);
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c750:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c75a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c75c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c75e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c760:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c762:	e841 2300 	strex	r3, r2, [r1]
 800c766:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1e6      	bne.n	800c73c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3308      	adds	r3, #8
 800c774:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	e853 3f00 	ldrex	r3, [r3]
 800c77c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f023 0301 	bic.w	r3, r3, #1
 800c784:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3308      	adds	r3, #8
 800c78c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c78e:	61fa      	str	r2, [r7, #28]
 800c790:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c792:	69b9      	ldr	r1, [r7, #24]
 800c794:	69fa      	ldr	r2, [r7, #28]
 800c796:	e841 2300 	strex	r3, r2, [r1]
 800c79a:	617b      	str	r3, [r7, #20]
   return(result);
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1e5      	bne.n	800c76e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2220      	movs	r2, #32
 800c7a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	e012      	b.n	800c7dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2220      	movs	r2, #32
 800c7c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3758      	adds	r7, #88	@ 0x58
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7f4:	e04f      	b.n	800c896 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7fc:	d04b      	beq.n	800c896 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7fe:	f7f5 fbdb 	bl	8001fb8 <HAL_GetTick>
 800c802:	4602      	mov	r2, r0
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	1ad3      	subs	r3, r2, r3
 800c808:	69ba      	ldr	r2, [r7, #24]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d302      	bcc.n	800c814 <UART_WaitOnFlagUntilTimeout+0x30>
 800c80e:	69bb      	ldr	r3, [r7, #24]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c814:	2303      	movs	r3, #3
 800c816:	e04e      	b.n	800c8b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 0304 	and.w	r3, r3, #4
 800c822:	2b00      	cmp	r3, #0
 800c824:	d037      	beq.n	800c896 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	2b80      	cmp	r3, #128	@ 0x80
 800c82a:	d034      	beq.n	800c896 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	2b40      	cmp	r3, #64	@ 0x40
 800c830:	d031      	beq.n	800c896 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69db      	ldr	r3, [r3, #28]
 800c838:	f003 0308 	and.w	r3, r3, #8
 800c83c:	2b08      	cmp	r3, #8
 800c83e:	d110      	bne.n	800c862 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	2208      	movs	r2, #8
 800c846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f000 f839 	bl	800c8c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2208      	movs	r2, #8
 800c852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	2200      	movs	r2, #0
 800c85a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c85e:	2301      	movs	r3, #1
 800c860:	e029      	b.n	800c8b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	69db      	ldr	r3, [r3, #28]
 800c868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c86c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c870:	d111      	bne.n	800c896 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c87a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c87c:	68f8      	ldr	r0, [r7, #12]
 800c87e:	f000 f81f 	bl	800c8c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2220      	movs	r2, #32
 800c886:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c892:	2303      	movs	r3, #3
 800c894:	e00f      	b.n	800c8b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	69da      	ldr	r2, [r3, #28]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	4013      	ands	r3, r2
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	bf0c      	ite	eq
 800c8a6:	2301      	moveq	r3, #1
 800c8a8:	2300      	movne	r3, #0
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	79fb      	ldrb	r3, [r7, #7]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d0a0      	beq.n	800c7f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
	...

0800c8c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b095      	sub	sp, #84	@ 0x54
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d0:	e853 3f00 	ldrex	r3, [r3]
 800c8d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c8ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c8ee:	e841 2300 	strex	r3, r2, [r1]
 800c8f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d1e6      	bne.n	800c8c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	3308      	adds	r3, #8
 800c900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c902:	6a3b      	ldr	r3, [r7, #32]
 800c904:	e853 3f00 	ldrex	r3, [r3]
 800c908:	61fb      	str	r3, [r7, #28]
   return(result);
 800c90a:	69fa      	ldr	r2, [r7, #28]
 800c90c:	4b1e      	ldr	r3, [pc, #120]	@ (800c988 <UART_EndRxTransfer+0xc8>)
 800c90e:	4013      	ands	r3, r2
 800c910:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	3308      	adds	r3, #8
 800c918:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c91a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c91c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c922:	e841 2300 	strex	r3, r2, [r1]
 800c926:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1e5      	bne.n	800c8fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c932:	2b01      	cmp	r3, #1
 800c934:	d118      	bne.n	800c968 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	e853 3f00 	ldrex	r3, [r3]
 800c942:	60bb      	str	r3, [r7, #8]
   return(result);
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f023 0310 	bic.w	r3, r3, #16
 800c94a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	461a      	mov	r2, r3
 800c952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c958:	6979      	ldr	r1, [r7, #20]
 800c95a:	69ba      	ldr	r2, [r7, #24]
 800c95c:	e841 2300 	strex	r3, r2, [r1]
 800c960:	613b      	str	r3, [r7, #16]
   return(result);
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d1e6      	bne.n	800c936 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2220      	movs	r2, #32
 800c96c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2200      	movs	r2, #0
 800c974:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c97c:	bf00      	nop
 800c97e:	3754      	adds	r7, #84	@ 0x54
 800c980:	46bd      	mov	sp, r7
 800c982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c986:	4770      	bx	lr
 800c988:	effffffe 	.word	0xeffffffe

0800c98c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b084      	sub	sp, #16
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	2200      	movs	r2, #0
 800c99e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f7fe ff4c 	bl	800b848 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9b0:	bf00      	nop
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	e853 3f00 	ldrex	r3, [r3]
 800c9cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c9d4:	61fb      	str	r3, [r7, #28]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	61bb      	str	r3, [r7, #24]
 800c9e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e2:	6979      	ldr	r1, [r7, #20]
 800c9e4:	69ba      	ldr	r2, [r7, #24]
 800c9e6:	e841 2300 	strex	r3, r2, [r1]
 800c9ea:	613b      	str	r3, [r7, #16]
   return(result);
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1e6      	bne.n	800c9c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2220      	movs	r2, #32
 800c9f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7fe ff17 	bl	800b834 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ca06:	bf00      	nop
 800ca08:	3720      	adds	r7, #32
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b083      	sub	sp, #12
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ca16:	bf00      	nop
 800ca18:	370c      	adds	r7, #12
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b083      	sub	sp, #12
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ca2a:	bf00      	nop
 800ca2c:	370c      	adds	r7, #12
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr

0800ca36 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ca36:	b480      	push	{r7}
 800ca38:	b083      	sub	sp, #12
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ca3e:	bf00      	nop
 800ca40:	370c      	adds	r7, #12
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b085      	sub	sp, #20
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d101      	bne.n	800ca60 <HAL_UARTEx_DisableFifoMode+0x16>
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	e027      	b.n	800cab0 <HAL_UARTEx_DisableFifoMode+0x66>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2224      	movs	r2, #36	@ 0x24
 800ca6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	681a      	ldr	r2, [r3, #0]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f022 0201 	bic.w	r2, r2, #1
 800ca86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ca8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2200      	movs	r2, #0
 800ca94:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2220      	movs	r2, #32
 800caa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3714      	adds	r7, #20
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d101      	bne.n	800cad4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cad0:	2302      	movs	r3, #2
 800cad2:	e02d      	b.n	800cb30 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2224      	movs	r2, #36	@ 0x24
 800cae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	681a      	ldr	r2, [r3, #0]
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f022 0201 	bic.w	r2, r2, #1
 800cafa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	430a      	orrs	r2, r1
 800cb0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f000 f84f 	bl	800cbb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2220      	movs	r2, #32
 800cb22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3710      	adds	r7, #16
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b084      	sub	sp, #16
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d101      	bne.n	800cb50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	e02d      	b.n	800cbac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2224      	movs	r2, #36	@ 0x24
 800cb5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f022 0201 	bic.w	r2, r2, #1
 800cb76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	430a      	orrs	r2, r1
 800cb8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f811 	bl	800cbb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2220      	movs	r2, #32
 800cb9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d108      	bne.n	800cbd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cbd4:	e031      	b.n	800cc3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cbd6:	2310      	movs	r3, #16
 800cbd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cbda:	2310      	movs	r3, #16
 800cbdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	0e5b      	lsrs	r3, r3, #25
 800cbe6:	b2db      	uxtb	r3, r3
 800cbe8:	f003 0307 	and.w	r3, r3, #7
 800cbec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	0f5b      	lsrs	r3, r3, #29
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	f003 0307 	and.w	r3, r3, #7
 800cbfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbfe:	7bbb      	ldrb	r3, [r7, #14]
 800cc00:	7b3a      	ldrb	r2, [r7, #12]
 800cc02:	4911      	ldr	r1, [pc, #68]	@ (800cc48 <UARTEx_SetNbDataToProcess+0x94>)
 800cc04:	5c8a      	ldrb	r2, [r1, r2]
 800cc06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cc0a:	7b3a      	ldrb	r2, [r7, #12]
 800cc0c:	490f      	ldr	r1, [pc, #60]	@ (800cc4c <UARTEx_SetNbDataToProcess+0x98>)
 800cc0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cc10:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
 800cc1e:	7b7a      	ldrb	r2, [r7, #13]
 800cc20:	4909      	ldr	r1, [pc, #36]	@ (800cc48 <UARTEx_SetNbDataToProcess+0x94>)
 800cc22:	5c8a      	ldrb	r2, [r1, r2]
 800cc24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cc28:	7b7a      	ldrb	r2, [r7, #13]
 800cc2a:	4908      	ldr	r1, [pc, #32]	@ (800cc4c <UARTEx_SetNbDataToProcess+0x98>)
 800cc2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cc2e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cc3a:	bf00      	nop
 800cc3c:	3714      	adds	r7, #20
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop
 800cc48:	0800f014 	.word	0x0800f014
 800cc4c:	0800f01c 	.word	0x0800f01c

0800cc50 <arm_correlate_f32>:
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	4299      	cmp	r1, r3
 800cc56:	b08d      	sub	sp, #52	@ 0x34
 800cc58:	f0c0 824c 	bcc.w	800d0f4 <arm_correlate_f32+0x4a4>
 800cc5c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800cc5e:	eba1 0c03 	sub.w	ip, r1, r3
 800cc62:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800cc66:	f04f 0e04 	mov.w	lr, #4
 800cc6a:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 800cc6e:	3101      	adds	r1, #1
 800cc70:	1ac9      	subs	r1, r1, r3
 800cc72:	3c01      	subs	r4, #1
 800cc74:	1e5e      	subs	r6, r3, #1
 800cc76:	9102      	str	r1, [sp, #8]
 800cc78:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800cc7c:	f000 8294 	beq.w	800d1a8 <arm_correlate_f32+0x558>
 800cc80:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800cdd0 <arm_correlate_f32+0x180>
 800cc84:	f1a1 0804 	sub.w	r8, r1, #4
 800cc88:	46e1      	mov	r9, ip
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	2401      	movs	r4, #1
 800cc8e:	f014 0703 	ands.w	r7, r4, #3
 800cc92:	d01b      	beq.n	800cccc <arm_correlate_f32+0x7c>
 800cc94:	ed91 7a00 	vldr	s14, [r1]
 800cc98:	edd5 6a00 	vldr	s13, [r5]
 800cc9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cca0:	3f01      	subs	r7, #1
 800cca2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cca6:	d011      	beq.n	800cccc <arm_correlate_f32+0x7c>
 800cca8:	ed91 7a01 	vldr	s14, [r1, #4]
 800ccac:	edd5 6a01 	vldr	s13, [r5, #4]
 800ccb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ccb4:	2f01      	cmp	r7, #1
 800ccb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ccba:	d007      	beq.n	800cccc <arm_correlate_f32+0x7c>
 800ccbc:	ed95 7a02 	vldr	s14, [r5, #8]
 800ccc0:	edd1 6a02 	vldr	s13, [r1, #8]
 800ccc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ccc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cccc:	1c67      	adds	r7, r4, #1
 800ccce:	42bb      	cmp	r3, r7
 800ccd0:	edc9 7a00 	vstr	s15, [r9]
 800ccd4:	4641      	mov	r1, r8
 800ccd6:	44f1      	add	r9, lr
 800ccd8:	d03a      	beq.n	800cd50 <arm_correlate_f32+0x100>
 800ccda:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 800ccde:	f000 8267 	beq.w	800d1b0 <arm_correlate_f32+0x560>
 800cce2:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800cce6:	f100 0110 	add.w	r1, r0, #16
 800ccea:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800cdd0 <arm_correlate_f32+0x180>
 800ccee:	eb01 050a 	add.w	r5, r1, sl
 800ccf2:	f108 0410 	add.w	r4, r8, #16
 800ccf6:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ccfa:	ed54 3a04 	vldr	s7, [r4, #-16]
 800ccfe:	ed11 6a03 	vldr	s12, [r1, #-12]
 800cd02:	ed14 4a03 	vldr	s8, [r4, #-12]
 800cd06:	ed51 6a02 	vldr	s13, [r1, #-8]
 800cd0a:	ed54 4a02 	vldr	s9, [r4, #-8]
 800cd0e:	ed51 5a01 	vldr	s11, [r1, #-4]
 800cd12:	ed14 5a01 	vldr	s10, [r4, #-4]
 800cd16:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cd1a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cd1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd22:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800cd26:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cd2a:	ee65 6a85 	vmul.f32	s13, s11, s10
 800cd2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cd32:	3110      	adds	r1, #16
 800cd34:	428d      	cmp	r5, r1
 800cd36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd3a:	f104 0410 	add.w	r4, r4, #16
 800cd3e:	d1da      	bne.n	800ccf6 <arm_correlate_f32+0xa6>
 800cd40:	eb00 050a 	add.w	r5, r0, sl
 800cd44:	eb08 010a 	add.w	r1, r8, sl
 800cd48:	f1a8 0804 	sub.w	r8, r8, #4
 800cd4c:	463c      	mov	r4, r7
 800cd4e:	e79e      	b.n	800cc8e <arm_correlate_f32+0x3e>
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	fb0e cc04 	mla	ip, lr, r4, ip
 800cd56:	f240 81dd 	bls.w	800d114 <arm_correlate_f32+0x4c4>
 800cd5a:	9b02      	ldr	r3, [sp, #8]
 800cd5c:	0899      	lsrs	r1, r3, #2
 800cd5e:	9103      	str	r1, [sp, #12]
 800cd60:	f000 8220 	beq.w	800d1a4 <arm_correlate_f32+0x554>
 800cd64:	08bb      	lsrs	r3, r7, #2
 800cd66:	f007 0403 	and.w	r4, r7, #3
 800cd6a:	9300      	str	r3, [sp, #0]
 800cd6c:	011b      	lsls	r3, r3, #4
 800cd6e:	f103 0b0c 	add.w	fp, r3, #12
 800cd72:	18d5      	adds	r5, r2, r3
 800cd74:	1e63      	subs	r3, r4, #1
 800cd76:	0109      	lsls	r1, r1, #4
 800cd78:	9306      	str	r3, [sp, #24]
 800cd7a:	f100 080c 	add.w	r8, r0, #12
 800cd7e:	9401      	str	r4, [sp, #4]
 800cd80:	9104      	str	r1, [sp, #16]
 800cd82:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800cd86:	4441      	add	r1, r8
 800cd88:	f102 0310 	add.w	r3, r2, #16
 800cd8c:	e9cd 6009 	strd	r6, r0, [sp, #36]	@ 0x24
 800cd90:	9e06      	ldr	r6, [sp, #24]
 800cd92:	9405      	str	r4, [sp, #20]
 800cd94:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 800cd98:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 800cd9c:	46e1      	mov	r9, ip
 800cd9e:	4483      	add	fp, r0
 800cda0:	460f      	mov	r7, r1
 800cda2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cda4:	469c      	mov	ip, r3
 800cda6:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800cdd0 <arm_correlate_f32+0x180>
 800cdaa:	ed58 1a03 	vldr	s3, [r8, #-12]
 800cdae:	ed18 2a02 	vldr	s4, [r8, #-8]
 800cdb2:	ed58 2a01 	vldr	s5, [r8, #-4]
 800cdb6:	ed98 0a00 	vldr	s0, [r8]
 800cdba:	9900      	ldr	r1, [sp, #0]
 800cdbc:	eef0 5a46 	vmov.f32	s11, s12
 800cdc0:	eeb0 5a46 	vmov.f32	s10, s12
 800cdc4:	eef0 4a46 	vmov.f32	s9, s12
 800cdc8:	4663      	mov	r3, ip
 800cdca:	4642      	mov	r2, r8
 800cdcc:	e005      	b.n	800cdda <arm_correlate_f32+0x18a>
 800cdce:	bf00      	nop
 800cdd0:	00000000 	.word	0x00000000
 800cdd4:	ed90 0a04 	vldr	s0, [r0, #16]
 800cdd8:	3210      	adds	r2, #16
 800cdda:	ed53 6a04 	vldr	s13, [r3, #-16]
 800cdde:	ed13 7a03 	vldr	s14, [r3, #-12]
 800cde2:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cde6:	ed13 1a01 	vldr	s2, [r3, #-4]
 800cdea:	ee62 3a26 	vmul.f32	s7, s4, s13
 800cdee:	ee22 4aa6 	vmul.f32	s8, s5, s13
 800cdf2:	ee61 0aa6 	vmul.f32	s1, s3, s13
 800cdf6:	edd2 1a01 	vldr	s3, [r2, #4]
 800cdfa:	ee66 6a80 	vmul.f32	s13, s13, s0
 800cdfe:	ee22 3a07 	vmul.f32	s6, s4, s14
 800ce02:	ee33 5a85 	vadd.f32	s10, s7, s10
 800ce06:	ee74 5a25 	vadd.f32	s11, s8, s11
 800ce0a:	ee62 3a87 	vmul.f32	s7, s5, s14
 800ce0e:	ee20 4a07 	vmul.f32	s8, s0, s14
 800ce12:	ee70 4aa4 	vadd.f32	s9, s1, s9
 800ce16:	ee36 6a86 	vadd.f32	s12, s13, s12
 800ce1a:	ed92 2a02 	vldr	s4, [r2, #8]
 800ce1e:	ee27 7a21 	vmul.f32	s14, s14, s3
 800ce22:	ee73 3a85 	vadd.f32	s7, s7, s10
 800ce26:	ee37 7a06 	vadd.f32	s14, s14, s12
 800ce2a:	ee20 5a27 	vmul.f32	s10, s0, s15
 800ce2e:	ee33 3a24 	vadd.f32	s6, s6, s9
 800ce32:	ee34 4a25 	vadd.f32	s8, s8, s11
 800ce36:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800ce3a:	ee61 5aa7 	vmul.f32	s11, s3, s15
 800ce3e:	edd2 2a03 	vldr	s5, [r2, #12]
 800ce42:	ee67 7a82 	vmul.f32	s15, s15, s4
 800ce46:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ce4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ce4e:	ee74 4a83 	vadd.f32	s9, s9, s6
 800ce52:	ee20 0a01 	vmul.f32	s0, s0, s2
 800ce56:	ee61 3a81 	vmul.f32	s7, s3, s2
 800ce5a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800ce5e:	ee22 7a01 	vmul.f32	s14, s4, s2
 800ce62:	ee21 6a22 	vmul.f32	s12, s2, s5
 800ce66:	3901      	subs	r1, #1
 800ce68:	f103 0310 	add.w	r3, r3, #16
 800ce6c:	ee70 4a24 	vadd.f32	s9, s0, s9
 800ce70:	ee33 5a85 	vadd.f32	s10, s7, s10
 800ce74:	ee77 5a25 	vadd.f32	s11, s14, s11
 800ce78:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	d1a9      	bne.n	800cdd4 <arm_correlate_f32+0x184>
 800ce80:	9b01      	ldr	r3, [sp, #4]
 800ce82:	b3f3      	cbz	r3, 800cf02 <arm_correlate_f32+0x2b2>
 800ce84:	edd5 7a00 	vldr	s15, [r5]
 800ce88:	ed9b 4a00 	vldr	s8, [fp]
 800ce8c:	ee61 6aa7 	vmul.f32	s13, s3, s15
 800ce90:	ee62 3a27 	vmul.f32	s7, s4, s15
 800ce94:	ee22 7aa7 	vmul.f32	s14, s5, s15
 800ce98:	ee64 7a27 	vmul.f32	s15, s8, s15
 800ce9c:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800cea0:	ee35 5a23 	vadd.f32	s10, s10, s7
 800cea4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800cea8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ceac:	b34e      	cbz	r6, 800cf02 <arm_correlate_f32+0x2b2>
 800ceae:	edd5 7a01 	vldr	s15, [r5, #4]
 800ceb2:	eddb 6a01 	vldr	s13, [fp, #4]
 800ceb6:	ee22 7a27 	vmul.f32	s14, s4, s15
 800ceba:	ee22 3aa7 	vmul.f32	s6, s5, s15
 800cebe:	ee67 3a84 	vmul.f32	s7, s15, s8
 800cec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cec6:	2e01      	cmp	r6, #1
 800cec8:	ee74 4a87 	vadd.f32	s9, s9, s14
 800cecc:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ced0:	ee75 5aa3 	vadd.f32	s11, s11, s7
 800ced4:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ced8:	d013      	beq.n	800cf02 <arm_correlate_f32+0x2b2>
 800ceda:	ed95 7a02 	vldr	s14, [r5, #8]
 800cede:	eddb 3a02 	vldr	s7, [fp, #8]
 800cee2:	ee62 7a87 	vmul.f32	s15, s5, s14
 800cee6:	ee27 4a04 	vmul.f32	s8, s14, s8
 800ceea:	ee67 6a26 	vmul.f32	s13, s14, s13
 800ceee:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cef2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800cef6:	ee35 5a04 	vadd.f32	s10, s10, s8
 800cefa:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800cefe:	ee36 6a07 	vadd.f32	s12, s12, s14
 800cf02:	f108 0810 	add.w	r8, r8, #16
 800cf06:	eb09 020e 	add.w	r2, r9, lr
 800cf0a:	eb0a 030e 	add.w	r3, sl, lr
 800cf0e:	4547      	cmp	r7, r8
 800cf10:	edc9 4a00 	vstr	s9, [r9]
 800cf14:	f10b 0b10 	add.w	fp, fp, #16
 800cf18:	ed82 5a00 	vstr	s10, [r2]
 800cf1c:	44a1      	add	r9, r4
 800cf1e:	edca 5a00 	vstr	s11, [sl]
 800cf22:	ed83 6a00 	vstr	s12, [r3]
 800cf26:	44a2      	add	sl, r4
 800cf28:	f47f af3d 	bne.w	800cda6 <arm_correlate_f32+0x156>
 800cf2c:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 800cf30:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	@ 0x24
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	9c05      	ldr	r4, [sp, #20]
 800cf38:	9904      	ldr	r1, [sp, #16]
 800cf3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cf3c:	fb04 cc03 	mla	ip, r4, r3, ip
 800cf40:	4401      	add	r1, r0
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	460d      	mov	r5, r1
 800cf46:	9303      	str	r3, [sp, #12]
 800cf48:	9b02      	ldr	r3, [sp, #8]
 800cf4a:	f013 0303 	ands.w	r3, r3, #3
 800cf4e:	9301      	str	r3, [sp, #4]
 800cf50:	d071      	beq.n	800d036 <arm_correlate_f32+0x3e6>
 800cf52:	9903      	ldr	r1, [sp, #12]
 800cf54:	9205      	str	r2, [sp, #20]
 800cf56:	f007 0403 	and.w	r4, r7, #3
 800cf5a:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 800cf5e:	1c4f      	adds	r7, r1, #1
 800cf60:	1859      	adds	r1, r3, r1
 800cf62:	1d03      	adds	r3, r0, #4
 800cf64:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cf68:	9400      	str	r4, [sp, #0]
 800cf6a:	f102 0110 	add.w	r1, r2, #16
 800cf6e:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 800cf72:	3c01      	subs	r4, #1
 800cf74:	e9cd 6003 	strd	r6, r0, [sp, #12]
 800cf78:	eb02 090a 	add.w	r9, r2, sl
 800cf7c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800cf80:	46e0      	mov	r8, ip
 800cf82:	4618      	mov	r0, r3
 800cf84:	460e      	mov	r6, r1
 800cf86:	4622      	mov	r2, r4
 800cf88:	ed5f 7a6f 	vldr	s15, [pc, #-444]	@ 800cdd0 <arm_correlate_f32+0x180>
 800cf8c:	f105 0110 	add.w	r1, r5, #16
 800cf90:	4633      	mov	r3, r6
 800cf92:	465c      	mov	r4, fp
 800cf94:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cf98:	ed53 3a04 	vldr	s7, [r3, #-16]
 800cf9c:	ed11 6a03 	vldr	s12, [r1, #-12]
 800cfa0:	ed13 4a03 	vldr	s8, [r3, #-12]
 800cfa4:	ed51 6a02 	vldr	s13, [r1, #-8]
 800cfa8:	ed53 4a02 	vldr	s9, [r3, #-8]
 800cfac:	ed51 5a01 	vldr	s11, [r1, #-4]
 800cfb0:	ed13 5a01 	vldr	s10, [r3, #-4]
 800cfb4:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cfb8:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cfbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfc0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800cfc4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cfc8:	ee65 6a85 	vmul.f32	s13, s11, s10
 800cfcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfd0:	3c01      	subs	r4, #1
 800cfd2:	f101 0110 	add.w	r1, r1, #16
 800cfd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfda:	f103 0310 	add.w	r3, r3, #16
 800cfde:	d1d9      	bne.n	800cf94 <arm_correlate_f32+0x344>
 800cfe0:	9b00      	ldr	r3, [sp, #0]
 800cfe2:	4455      	add	r5, sl
 800cfe4:	b1d3      	cbz	r3, 800d01c <arm_correlate_f32+0x3cc>
 800cfe6:	ed99 7a00 	vldr	s14, [r9]
 800cfea:	edd5 6a00 	vldr	s13, [r5]
 800cfee:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cff2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cff6:	b18a      	cbz	r2, 800d01c <arm_correlate_f32+0x3cc>
 800cff8:	ed99 7a01 	vldr	s14, [r9, #4]
 800cffc:	edd5 6a01 	vldr	s13, [r5, #4]
 800d000:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d004:	2a01      	cmp	r2, #1
 800d006:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d00a:	d007      	beq.n	800d01c <arm_correlate_f32+0x3cc>
 800d00c:	ed95 7a02 	vldr	s14, [r5, #8]
 800d010:	edd9 6a02 	vldr	s13, [r9, #8]
 800d014:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d01c:	463d      	mov	r5, r7
 800d01e:	3704      	adds	r7, #4
 800d020:	42b8      	cmp	r0, r7
 800d022:	edc8 7a00 	vstr	s15, [r8]
 800d026:	44f0      	add	r8, lr
 800d028:	d1ae      	bne.n	800cf88 <arm_correlate_f32+0x338>
 800d02a:	9b01      	ldr	r3, [sp, #4]
 800d02c:	9a05      	ldr	r2, [sp, #20]
 800d02e:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 800d032:	fb0e cc03 	mla	ip, lr, r3, ip
 800d036:	9b02      	ldr	r3, [sp, #8]
 800d038:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d03c:	08b5      	lsrs	r5, r6, #2
 800d03e:	ed5f 5a9c 	vldr	s11, [pc, #-624]	@ 800cdd0 <arm_correlate_f32+0x180>
 800d042:	f000 80ac 	beq.w	800d19e <arm_correlate_f32+0x54e>
 800d046:	f100 0110 	add.w	r1, r0, #16
 800d04a:	f102 0310 	add.w	r3, r2, #16
 800d04e:	462c      	mov	r4, r5
 800d050:	ed51 6a04 	vldr	s13, [r1, #-16]
 800d054:	ed53 3a04 	vldr	s7, [r3, #-16]
 800d058:	ed11 7a03 	vldr	s14, [r1, #-12]
 800d05c:	ed13 4a03 	vldr	s8, [r3, #-12]
 800d060:	ed51 7a02 	vldr	s15, [r1, #-8]
 800d064:	ed53 4a02 	vldr	s9, [r3, #-8]
 800d068:	ed11 6a01 	vldr	s12, [r1, #-4]
 800d06c:	ed13 5a01 	vldr	s10, [r3, #-4]
 800d070:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d074:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d078:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d07c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d080:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d084:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d088:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d08c:	3c01      	subs	r4, #1
 800d08e:	f101 0110 	add.w	r1, r1, #16
 800d092:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800d096:	f103 0310 	add.w	r3, r3, #16
 800d09a:	d1d9      	bne.n	800d050 <arm_correlate_f32+0x400>
 800d09c:	012d      	lsls	r5, r5, #4
 800d09e:	1941      	adds	r1, r0, r5
 800d0a0:	4415      	add	r5, r2
 800d0a2:	f016 0303 	ands.w	r3, r6, #3
 800d0a6:	d01b      	beq.n	800d0e0 <arm_correlate_f32+0x490>
 800d0a8:	edd5 7a00 	vldr	s15, [r5]
 800d0ac:	ed91 7a00 	vldr	s14, [r1]
 800d0b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0b4:	3b01      	subs	r3, #1
 800d0b6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d0ba:	d011      	beq.n	800d0e0 <arm_correlate_f32+0x490>
 800d0bc:	edd5 7a01 	vldr	s15, [r5, #4]
 800d0c0:	ed91 7a01 	vldr	s14, [r1, #4]
 800d0c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d0ce:	d007      	beq.n	800d0e0 <arm_correlate_f32+0x490>
 800d0d0:	edd1 7a02 	vldr	s15, [r1, #8]
 800d0d4:	ed95 7a02 	vldr	s14, [r5, #8]
 800d0d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0dc:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d0e0:	3e01      	subs	r6, #1
 800d0e2:	edcc 5a00 	vstr	s11, [ip]
 800d0e6:	f100 0004 	add.w	r0, r0, #4
 800d0ea:	44f4      	add	ip, lr
 800d0ec:	d1a6      	bne.n	800d03c <arm_correlate_f32+0x3ec>
 800d0ee:	b00d      	add	sp, #52	@ 0x34
 800d0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0f4:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 800d0f8:	4606      	mov	r6, r0
 800d0fa:	3c02      	subs	r4, #2
 800d0fc:	4610      	mov	r0, r2
 800d0fe:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d100:	440c      	add	r4, r1
 800d102:	460d      	mov	r5, r1
 800d104:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 800d108:	4619      	mov	r1, r3
 800d10a:	4632      	mov	r2, r6
 800d10c:	f06f 0e03 	mvn.w	lr, #3
 800d110:	462b      	mov	r3, r5
 800d112:	e5aa      	b.n	800cc6a <arm_correlate_f32+0x1a>
 800d114:	9902      	ldr	r1, [sp, #8]
 800d116:	2900      	cmp	r1, #0
 800d118:	d090      	beq.n	800d03c <arm_correlate_f32+0x3ec>
 800d11a:	9902      	ldr	r1, [sp, #8]
 800d11c:	ed1f 6ad4 	vldr	s12, [pc, #-848]	@ 800cdd0 <arm_correlate_f32+0x180>
 800d120:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800d124:	eb00 0708 	add.w	r7, r0, r8
 800d128:	4601      	mov	r1, r0
 800d12a:	4665      	mov	r5, ip
 800d12c:	e020      	b.n	800d170 <arm_correlate_f32+0x520>
 800d12e:	edd2 7a00 	vldr	s15, [r2]
 800d132:	ecb4 7a01 	vldmia	r4!, {s14}
 800d136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d13a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d13e:	b18e      	cbz	r6, 800d164 <arm_correlate_f32+0x514>
 800d140:	ed92 7a01 	vldr	s14, [r2, #4]
 800d144:	edd1 6a01 	vldr	s13, [r1, #4]
 800d148:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d152:	d007      	beq.n	800d164 <arm_correlate_f32+0x514>
 800d154:	ed91 7a02 	vldr	s14, [r1, #8]
 800d158:	edd2 6a02 	vldr	s13, [r2, #8]
 800d15c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d160:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d164:	42bc      	cmp	r4, r7
 800d166:	edc5 7a00 	vstr	s15, [r5]
 800d16a:	4621      	mov	r1, r4
 800d16c:	4475      	add	r5, lr
 800d16e:	d00b      	beq.n	800d188 <arm_correlate_f32+0x538>
 800d170:	460c      	mov	r4, r1
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1db      	bne.n	800d12e <arm_correlate_f32+0x4de>
 800d176:	1d0c      	adds	r4, r1, #4
 800d178:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800d1b8 <arm_correlate_f32+0x568>
 800d17c:	42bc      	cmp	r4, r7
 800d17e:	edc5 7a00 	vstr	s15, [r5]
 800d182:	4621      	mov	r1, r4
 800d184:	4475      	add	r5, lr
 800d186:	d1f3      	bne.n	800d170 <arm_correlate_f32+0x520>
 800d188:	9b02      	ldr	r3, [sp, #8]
 800d18a:	4440      	add	r0, r8
 800d18c:	fb0e cc03 	mla	ip, lr, r3, ip
 800d190:	2e00      	cmp	r6, #0
 800d192:	d0ac      	beq.n	800d0ee <arm_correlate_f32+0x49e>
 800d194:	08b5      	lsrs	r5, r6, #2
 800d196:	eddf 5a08 	vldr	s11, [pc, #32]	@ 800d1b8 <arm_correlate_f32+0x568>
 800d19a:	f47f af54 	bne.w	800d046 <arm_correlate_f32+0x3f6>
 800d19e:	4615      	mov	r5, r2
 800d1a0:	4601      	mov	r1, r0
 800d1a2:	e77e      	b.n	800d0a2 <arm_correlate_f32+0x452>
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	e6cf      	b.n	800cf48 <arm_correlate_f32+0x2f8>
 800d1a8:	9902      	ldr	r1, [sp, #8]
 800d1aa:	2900      	cmp	r1, #0
 800d1ac:	d1b5      	bne.n	800d11a <arm_correlate_f32+0x4ca>
 800d1ae:	e79e      	b.n	800d0ee <arm_correlate_f32+0x49e>
 800d1b0:	eddf 7a01 	vldr	s15, [pc, #4]	@ 800d1b8 <arm_correlate_f32+0x568>
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	e5c7      	b.n	800cd48 <arm_correlate_f32+0xf8>
 800d1b8:	00000000 	.word	0x00000000

0800d1bc <arm_conv_f32>:
 800d1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c0:	b08b      	sub	sp, #44	@ 0x2c
 800d1c2:	4299      	cmp	r1, r3
 800d1c4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d1c6:	d205      	bcs.n	800d1d4 <arm_conv_f32+0x18>
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	4610      	mov	r0, r2
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	4632      	mov	r2, r6
 800d1d2:	4623      	mov	r3, r4
 800d1d4:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 800d1d8:	3101      	adds	r1, #1
 800d1da:	1ac9      	subs	r1, r1, r3
 800d1dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800d1e4:	9101      	str	r1, [sp, #4]
 800d1e6:	1e59      	subs	r1, r3, #1
 800d1e8:	eb02 070b 	add.w	r7, r2, fp
 800d1ec:	f000 8277 	beq.w	800d6de <arm_conv_f32+0x522>
 800d1f0:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800d4b0 <arm_conv_f32+0x2f4>
 800d1f4:	f102 0904 	add.w	r9, r2, #4
 800d1f8:	46aa      	mov	sl, r5
 800d1fa:	4680      	mov	r8, r0
 800d1fc:	2401      	movs	r4, #1
 800d1fe:	f014 0603 	ands.w	r6, r4, #3
 800d202:	d01b      	beq.n	800d23c <arm_conv_f32+0x80>
 800d204:	ed92 7a00 	vldr	s14, [r2]
 800d208:	edd8 6a00 	vldr	s13, [r8]
 800d20c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d210:	3e01      	subs	r6, #1
 800d212:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d216:	d011      	beq.n	800d23c <arm_conv_f32+0x80>
 800d218:	ed12 7a01 	vldr	s14, [r2, #-4]
 800d21c:	edd8 6a01 	vldr	s13, [r8, #4]
 800d220:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d224:	2e01      	cmp	r6, #1
 800d226:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d22a:	d007      	beq.n	800d23c <arm_conv_f32+0x80>
 800d22c:	ed98 7a02 	vldr	s14, [r8, #8]
 800d230:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d234:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d238:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d23c:	3401      	adds	r4, #1
 800d23e:	42a3      	cmp	r3, r4
 800d240:	ecea 7a01 	vstmia	sl!, {s15}
 800d244:	464a      	mov	r2, r9
 800d246:	d03a      	beq.n	800d2be <arm_conv_f32+0x102>
 800d248:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800d24c:	f000 824c 	beq.w	800d6e8 <arm_conv_f32+0x52c>
 800d250:	f100 0210 	add.w	r2, r0, #16
 800d254:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800d258:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800d4b0 <arm_conv_f32+0x2f4>
 800d25c:	eb02 0c08 	add.w	ip, r2, r8
 800d260:	f1a9 0610 	sub.w	r6, r9, #16
 800d264:	ed12 7a04 	vldr	s14, [r2, #-16]
 800d268:	edd6 3a04 	vldr	s7, [r6, #16]
 800d26c:	ed12 6a03 	vldr	s12, [r2, #-12]
 800d270:	ed96 4a03 	vldr	s8, [r6, #12]
 800d274:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d278:	edd6 4a02 	vldr	s9, [r6, #8]
 800d27c:	ed52 5a01 	vldr	s11, [r2, #-4]
 800d280:	ed96 5a01 	vldr	s10, [r6, #4]
 800d284:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d288:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d28c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d290:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800d294:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d298:	ee65 6a85 	vmul.f32	s13, s11, s10
 800d29c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2a0:	3210      	adds	r2, #16
 800d2a2:	4594      	cmp	ip, r2
 800d2a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2a8:	f1a6 0610 	sub.w	r6, r6, #16
 800d2ac:	d1da      	bne.n	800d264 <arm_conv_f32+0xa8>
 800d2ae:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 800d2b2:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800d2b6:	4480      	add	r8, r0
 800d2b8:	f109 0904 	add.w	r9, r9, #4
 800d2bc:	e79f      	b.n	800d1fe <arm_conv_f32+0x42>
 800d2be:	2b03      	cmp	r3, #3
 800d2c0:	445d      	add	r5, fp
 800d2c2:	f240 80e9 	bls.w	800d498 <arm_conv_f32+0x2dc>
 800d2c6:	9b01      	ldr	r3, [sp, #4]
 800d2c8:	089a      	lsrs	r2, r3, #2
 800d2ca:	9202      	str	r2, [sp, #8]
 800d2cc:	f000 8203 	beq.w	800d6d6 <arm_conv_f32+0x51a>
 800d2d0:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800d2d4:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800d2d8:	0112      	lsls	r2, r2, #4
 800d2da:	f004 0603 	and.w	r6, r4, #3
 800d2de:	9203      	str	r2, [sp, #12]
 800d2e0:	f1a3 0a10 	sub.w	sl, r3, #16
 800d2e4:	f1a3 020c 	sub.w	r2, r3, #12
 800d2e8:	3b08      	subs	r3, #8
 800d2ea:	9204      	str	r2, [sp, #16]
 800d2ec:	9305      	str	r3, [sp, #20]
 800d2ee:	f106 39ff 	add.w	r9, r6, #4294967295
 800d2f2:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800d2f6:	9a03      	ldr	r2, [sp, #12]
 800d2f8:	f100 0c1c 	add.w	ip, r0, #28
 800d2fc:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800d300:	464c      	mov	r4, r9
 800d302:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800d306:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800d30a:	f1a7 0310 	sub.w	r3, r7, #16
 800d30e:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800d312:	eb05 0b02 	add.w	fp, r5, r2
 800d316:	461f      	mov	r7, r3
 800d318:	3510      	adds	r5, #16
 800d31a:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800d4b0 <arm_conv_f32+0x2f4>
 800d31e:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 800d322:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 800d326:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 800d32a:	eeb0 5a46 	vmov.f32	s10, s12
 800d32e:	eef0 4a46 	vmov.f32	s9, s12
 800d332:	eef0 5a46 	vmov.f32	s11, s12
 800d336:	463a      	mov	r2, r7
 800d338:	4663      	mov	r3, ip
 800d33a:	4641      	mov	r1, r8
 800d33c:	edd2 6a04 	vldr	s13, [r2, #16]
 800d340:	ed13 0a04 	vldr	s0, [r3, #-16]
 800d344:	ed92 7a03 	vldr	s14, [r2, #12]
 800d348:	edd2 7a02 	vldr	s15, [r2, #8]
 800d34c:	edd2 0a01 	vldr	s1, [r2, #4]
 800d350:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800d354:	ee62 3a26 	vmul.f32	s7, s4, s13
 800d358:	ee61 2a26 	vmul.f32	s5, s2, s13
 800d35c:	ed13 1a03 	vldr	s2, [r3, #-12]
 800d360:	ee66 6a80 	vmul.f32	s13, s13, s0
 800d364:	ee21 4a87 	vmul.f32	s8, s3, s14
 800d368:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d36c:	ee33 5a85 	vadd.f32	s10, s7, s10
 800d370:	ee22 3a07 	vmul.f32	s6, s4, s14
 800d374:	ed53 1a02 	vldr	s3, [r3, #-8]
 800d378:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800d37c:	ee36 6a86 	vadd.f32	s12, s13, s12
 800d380:	ee60 3a07 	vmul.f32	s7, s0, s14
 800d384:	ee27 7a01 	vmul.f32	s14, s14, s2
 800d388:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d38c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d390:	ee74 2a22 	vadd.f32	s5, s8, s5
 800d394:	ee60 4a27 	vmul.f32	s9, s0, s15
 800d398:	ee22 4a27 	vmul.f32	s8, s4, s15
 800d39c:	ee73 3a85 	vadd.f32	s7, s7, s10
 800d3a0:	ed13 2a01 	vldr	s4, [r3, #-4]
 800d3a4:	ee21 5a27 	vmul.f32	s10, s2, s15
 800d3a8:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800d3ac:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d3b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d3b4:	ee34 4a22 	vadd.f32	s8, s8, s5
 800d3b8:	ee60 5a20 	vmul.f32	s11, s0, s1
 800d3bc:	ee21 3a20 	vmul.f32	s6, s2, s1
 800d3c0:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d3c4:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800d3c8:	ee20 6a82 	vmul.f32	s12, s1, s4
 800d3cc:	3901      	subs	r1, #1
 800d3ce:	f1a2 0210 	sub.w	r2, r2, #16
 800d3d2:	ee75 5a84 	vadd.f32	s11, s11, s8
 800d3d6:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d3da:	ee37 5a05 	vadd.f32	s10, s14, s10
 800d3de:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d3e2:	f103 0310 	add.w	r3, r3, #16
 800d3e6:	d1a9      	bne.n	800d33c <arm_conv_f32+0x180>
 800d3e8:	eb0a 030c 	add.w	r3, sl, ip
 800d3ec:	2e00      	cmp	r6, #0
 800d3ee:	d042      	beq.n	800d476 <arm_conv_f32+0x2ba>
 800d3f0:	edde 7a00 	vldr	s15, [lr]
 800d3f4:	ed93 4a00 	vldr	s8, [r3]
 800d3f8:	ee61 6a27 	vmul.f32	s13, s2, s15
 800d3fc:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800d400:	ee22 7a27 	vmul.f32	s14, s4, s15
 800d404:	ee64 7a27 	vmul.f32	s15, s8, s15
 800d408:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800d40c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d410:	ee35 5a07 	vadd.f32	s10, s10, s14
 800d414:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d418:	eb09 030c 	add.w	r3, r9, ip
 800d41c:	b35c      	cbz	r4, 800d476 <arm_conv_f32+0x2ba>
 800d41e:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800d422:	edd3 6a00 	vldr	s13, [r3]
 800d426:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800d42a:	ee22 3a27 	vmul.f32	s6, s4, s15
 800d42e:	ee67 3a84 	vmul.f32	s7, s15, s8
 800d432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d436:	2c01      	cmp	r4, #1
 800d438:	ee75 5a87 	vadd.f32	s11, s11, s14
 800d43c:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d440:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d444:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d448:	eb00 030c 	add.w	r3, r0, ip
 800d44c:	d013      	beq.n	800d476 <arm_conv_f32+0x2ba>
 800d44e:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800d452:	edd3 3a00 	vldr	s7, [r3]
 800d456:	ee62 7a07 	vmul.f32	s15, s4, s14
 800d45a:	ee27 4a04 	vmul.f32	s8, s14, s8
 800d45e:	ee67 6a26 	vmul.f32	s13, s14, s13
 800d462:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d466:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d46a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d46e:	ee35 5a26 	vadd.f32	s10, s10, s13
 800d472:	ee36 6a07 	vadd.f32	s12, s12, s14
 800d476:	45ab      	cmp	fp, r5
 800d478:	ed45 5a04 	vstr	s11, [r5, #-16]
 800d47c:	ed45 4a03 	vstr	s9, [r5, #-12]
 800d480:	ed05 5a02 	vstr	s10, [r5, #-8]
 800d484:	ed05 6a01 	vstr	s12, [r5, #-4]
 800d488:	f10c 0c10 	add.w	ip, ip, #16
 800d48c:	f105 0310 	add.w	r3, r5, #16
 800d490:	f000 809e 	beq.w	800d5d0 <arm_conv_f32+0x414>
 800d494:	461d      	mov	r5, r3
 800d496:	e740      	b.n	800d31a <arm_conv_f32+0x15e>
 800d498:	9a01      	ldr	r2, [sp, #4]
 800d49a:	46ac      	mov	ip, r5
 800d49c:	2a00      	cmp	r2, #0
 800d49e:	d037      	beq.n	800d510 <arm_conv_f32+0x354>
 800d4a0:	9a01      	ldr	r2, [sp, #4]
 800d4a2:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800d4b0 <arm_conv_f32+0x2f4>
 800d4a6:	0096      	lsls	r6, r2, #2
 800d4a8:	eb05 0c06 	add.w	ip, r5, r6
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	e021      	b.n	800d4f4 <arm_conv_f32+0x338>
 800d4b0:	00000000 	.word	0x00000000
 800d4b4:	edd7 7a00 	vldr	s15, [r7]
 800d4b8:	ecb2 7a01 	vldmia	r2!, {s14}
 800d4bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d4c0:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d4c4:	b189      	cbz	r1, 800d4ea <arm_conv_f32+0x32e>
 800d4c6:	ed17 7a01 	vldr	s14, [r7, #-4]
 800d4ca:	edd4 6a01 	vldr	s13, [r4, #4]
 800d4ce:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4d8:	d007      	beq.n	800d4ea <arm_conv_f32+0x32e>
 800d4da:	ed94 7a02 	vldr	s14, [r4, #8]
 800d4de:	ed57 6a02 	vldr	s13, [r7, #-8]
 800d4e2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d4e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4ea:	ece5 7a01 	vstmia	r5!, {s15}
 800d4ee:	4565      	cmp	r5, ip
 800d4f0:	4614      	mov	r4, r2
 800d4f2:	d00a      	beq.n	800d50a <arm_conv_f32+0x34e>
 800d4f4:	4622      	mov	r2, r4
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d1dc      	bne.n	800d4b4 <arm_conv_f32+0x2f8>
 800d4fa:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800d4b0 <arm_conv_f32+0x2f4>
 800d4fe:	ece5 7a01 	vstmia	r5!, {s15}
 800d502:	1d22      	adds	r2, r4, #4
 800d504:	4565      	cmp	r5, ip
 800d506:	4614      	mov	r4, r2
 800d508:	d1f4      	bne.n	800d4f4 <arm_conv_f32+0x338>
 800d50a:	4430      	add	r0, r6
 800d50c:	2900      	cmp	r1, #0
 800d50e:	d059      	beq.n	800d5c4 <arm_conv_f32+0x408>
 800d510:	088d      	lsrs	r5, r1, #2
 800d512:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 800d4b0 <arm_conv_f32+0x2f4>
 800d516:	d058      	beq.n	800d5ca <arm_conv_f32+0x40e>
 800d518:	f100 0210 	add.w	r2, r0, #16
 800d51c:	f1a7 0310 	sub.w	r3, r7, #16
 800d520:	462c      	mov	r4, r5
 800d522:	ed52 6a04 	vldr	s13, [r2, #-16]
 800d526:	edd3 3a04 	vldr	s7, [r3, #16]
 800d52a:	ed12 7a03 	vldr	s14, [r2, #-12]
 800d52e:	ed93 4a03 	vldr	s8, [r3, #12]
 800d532:	ed52 7a02 	vldr	s15, [r2, #-8]
 800d536:	edd3 4a02 	vldr	s9, [r3, #8]
 800d53a:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d53e:	ed93 5a01 	vldr	s10, [r3, #4]
 800d542:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d546:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d54a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d54e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d552:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d556:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d55a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d55e:	3c01      	subs	r4, #1
 800d560:	f102 0210 	add.w	r2, r2, #16
 800d564:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800d568:	f1a3 0310 	sub.w	r3, r3, #16
 800d56c:	d1d9      	bne.n	800d522 <arm_conv_f32+0x366>
 800d56e:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800d572:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800d576:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800d57a:	f011 0203 	ands.w	r2, r1, #3
 800d57e:	d01b      	beq.n	800d5b8 <arm_conv_f32+0x3fc>
 800d580:	edd3 7a00 	vldr	s15, [r3]
 800d584:	ed95 7a00 	vldr	s14, [r5]
 800d588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d58c:	3a01      	subs	r2, #1
 800d58e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d592:	d011      	beq.n	800d5b8 <arm_conv_f32+0x3fc>
 800d594:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d598:	ed95 7a01 	vldr	s14, [r5, #4]
 800d59c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5a0:	2a01      	cmp	r2, #1
 800d5a2:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d5a6:	d007      	beq.n	800d5b8 <arm_conv_f32+0x3fc>
 800d5a8:	edd5 7a02 	vldr	s15, [r5, #8]
 800d5ac:	ed13 7a02 	vldr	s14, [r3, #-8]
 800d5b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d5b4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d5b8:	3901      	subs	r1, #1
 800d5ba:	ecec 5a01 	vstmia	ip!, {s11}
 800d5be:	f100 0004 	add.w	r0, r0, #4
 800d5c2:	d1a5      	bne.n	800d510 <arm_conv_f32+0x354>
 800d5c4:	b00b      	add	sp, #44	@ 0x2c
 800d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ca:	463b      	mov	r3, r7
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	e7d4      	b.n	800d57a <arm_conv_f32+0x3be>
 800d5d0:	9b02      	ldr	r3, [sp, #8]
 800d5d2:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800d5d6:	009b      	lsls	r3, r3, #2
 800d5d8:	9302      	str	r3, [sp, #8]
 800d5da:	9b03      	ldr	r3, [sp, #12]
 800d5dc:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800d5e0:	4403      	add	r3, r0
 800d5e2:	465d      	mov	r5, fp
 800d5e4:	469e      	mov	lr, r3
 800d5e6:	9b01      	ldr	r3, [sp, #4]
 800d5e8:	f013 0c03 	ands.w	ip, r3, #3
 800d5ec:	d075      	beq.n	800d6da <arm_conv_f32+0x51e>
 800d5ee:	9b02      	ldr	r3, [sp, #8]
 800d5f0:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800d5f4:	f004 0403 	and.w	r4, r4, #3
 800d5f8:	f104 3bff 	add.w	fp, r4, #4294967295
 800d5fc:	f103 0801 	add.w	r8, r3, #1
 800d600:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800d604:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800d608:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800d60c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800d610:	f1a7 0210 	sub.w	r2, r7, #16
 800d614:	4618      	mov	r0, r3
 800d616:	465b      	mov	r3, fp
 800d618:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800d61c:	468b      	mov	fp, r1
 800d61e:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800d622:	4621      	mov	r1, r4
 800d624:	4617      	mov	r7, r2
 800d626:	461c      	mov	r4, r3
 800d628:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 800d4b0 <arm_conv_f32+0x2f4>
 800d62c:	f10e 0210 	add.w	r2, lr, #16
 800d630:	463b      	mov	r3, r7
 800d632:	4656      	mov	r6, sl
 800d634:	ed12 7a04 	vldr	s14, [r2, #-16]
 800d638:	edd3 3a04 	vldr	s7, [r3, #16]
 800d63c:	ed12 6a03 	vldr	s12, [r2, #-12]
 800d640:	ed93 4a03 	vldr	s8, [r3, #12]
 800d644:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d648:	edd3 4a02 	vldr	s9, [r3, #8]
 800d64c:	ed52 5a01 	vldr	s11, [r2, #-4]
 800d650:	ed93 5a01 	vldr	s10, [r3, #4]
 800d654:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d658:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d65c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d660:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800d664:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d668:	ee65 6a85 	vmul.f32	s13, s11, s10
 800d66c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d670:	3e01      	subs	r6, #1
 800d672:	f102 0210 	add.w	r2, r2, #16
 800d676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d67a:	f1a3 0310 	sub.w	r3, r3, #16
 800d67e:	d1d9      	bne.n	800d634 <arm_conv_f32+0x478>
 800d680:	4486      	add	lr, r0
 800d682:	b1d1      	cbz	r1, 800d6ba <arm_conv_f32+0x4fe>
 800d684:	ed99 7a00 	vldr	s14, [r9]
 800d688:	edde 6a00 	vldr	s13, [lr]
 800d68c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d690:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d694:	b18c      	cbz	r4, 800d6ba <arm_conv_f32+0x4fe>
 800d696:	ed19 7a01 	vldr	s14, [r9, #-4]
 800d69a:	edde 6a01 	vldr	s13, [lr, #4]
 800d69e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d6a2:	2c01      	cmp	r4, #1
 800d6a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6a8:	d007      	beq.n	800d6ba <arm_conv_f32+0x4fe>
 800d6aa:	ed9e 7a02 	vldr	s14, [lr, #8]
 800d6ae:	ed59 6a02 	vldr	s13, [r9, #-8]
 800d6b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d6b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d6ba:	ece5 7a01 	vstmia	r5!, {s15}
 800d6be:	4565      	cmp	r5, ip
 800d6c0:	46c6      	mov	lr, r8
 800d6c2:	f108 0804 	add.w	r8, r8, #4
 800d6c6:	d1af      	bne.n	800d628 <arm_conv_f32+0x46c>
 800d6c8:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800d6cc:	4659      	mov	r1, fp
 800d6ce:	9b01      	ldr	r3, [sp, #4]
 800d6d0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d6d4:	e71c      	b.n	800d510 <arm_conv_f32+0x354>
 800d6d6:	4686      	mov	lr, r0
 800d6d8:	e785      	b.n	800d5e6 <arm_conv_f32+0x42a>
 800d6da:	46ac      	mov	ip, r5
 800d6dc:	e7f7      	b.n	800d6ce <arm_conv_f32+0x512>
 800d6de:	9a01      	ldr	r2, [sp, #4]
 800d6e0:	2a00      	cmp	r2, #0
 800d6e2:	f47f aedd 	bne.w	800d4a0 <arm_conv_f32+0x2e4>
 800d6e6:	e76d      	b.n	800d5c4 <arm_conv_f32+0x408>
 800d6e8:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 800d4b0 <arm_conv_f32+0x2f4>
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	e5e3      	b.n	800d2b8 <arm_conv_f32+0xfc>

0800d6f0 <memset>:
 800d6f0:	4402      	add	r2, r0
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d100      	bne.n	800d6fa <memset+0xa>
 800d6f8:	4770      	bx	lr
 800d6fa:	f803 1b01 	strb.w	r1, [r3], #1
 800d6fe:	e7f9      	b.n	800d6f4 <memset+0x4>

0800d700 <__errno>:
 800d700:	4b01      	ldr	r3, [pc, #4]	@ (800d708 <__errno+0x8>)
 800d702:	6818      	ldr	r0, [r3, #0]
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	24000064 	.word	0x24000064

0800d70c <__libc_init_array>:
 800d70c:	b570      	push	{r4, r5, r6, lr}
 800d70e:	4d0d      	ldr	r5, [pc, #52]	@ (800d744 <__libc_init_array+0x38>)
 800d710:	4c0d      	ldr	r4, [pc, #52]	@ (800d748 <__libc_init_array+0x3c>)
 800d712:	1b64      	subs	r4, r4, r5
 800d714:	10a4      	asrs	r4, r4, #2
 800d716:	2600      	movs	r6, #0
 800d718:	42a6      	cmp	r6, r4
 800d71a:	d109      	bne.n	800d730 <__libc_init_array+0x24>
 800d71c:	4d0b      	ldr	r5, [pc, #44]	@ (800d74c <__libc_init_array+0x40>)
 800d71e:	4c0c      	ldr	r4, [pc, #48]	@ (800d750 <__libc_init_array+0x44>)
 800d720:	f001 f86a 	bl	800e7f8 <_init>
 800d724:	1b64      	subs	r4, r4, r5
 800d726:	10a4      	asrs	r4, r4, #2
 800d728:	2600      	movs	r6, #0
 800d72a:	42a6      	cmp	r6, r4
 800d72c:	d105      	bne.n	800d73a <__libc_init_array+0x2e>
 800d72e:	bd70      	pop	{r4, r5, r6, pc}
 800d730:	f855 3b04 	ldr.w	r3, [r5], #4
 800d734:	4798      	blx	r3
 800d736:	3601      	adds	r6, #1
 800d738:	e7ee      	b.n	800d718 <__libc_init_array+0xc>
 800d73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d73e:	4798      	blx	r3
 800d740:	3601      	adds	r6, #1
 800d742:	e7f2      	b.n	800d72a <__libc_init_array+0x1e>
 800d744:	0800f220 	.word	0x0800f220
 800d748:	0800f220 	.word	0x0800f220
 800d74c:	0800f220 	.word	0x0800f220
 800d750:	0800f224 	.word	0x0800f224
 800d754:	00000000 	.word	0x00000000

0800d758 <fmod>:
 800d758:	b508      	push	{r3, lr}
 800d75a:	ed2d 8b04 	vpush	{d8-d9}
 800d75e:	eeb0 9b40 	vmov.f64	d9, d0
 800d762:	eeb0 8b41 	vmov.f64	d8, d1
 800d766:	f000 f9f7 	bl	800db58 <__ieee754_fmod>
 800d76a:	eeb4 9b48 	vcmp.f64	d9, d8
 800d76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d772:	d60c      	bvs.n	800d78e <fmod+0x36>
 800d774:	ed9f 9b08 	vldr	d9, [pc, #32]	@ 800d798 <fmod+0x40>
 800d778:	eeb4 8b49 	vcmp.f64	d8, d9
 800d77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d780:	d105      	bne.n	800d78e <fmod+0x36>
 800d782:	f7ff ffbd 	bl	800d700 <__errno>
 800d786:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d78a:	2321      	movs	r3, #33	@ 0x21
 800d78c:	6003      	str	r3, [r0, #0]
 800d78e:	ecbd 8b04 	vpop	{d8-d9}
 800d792:	bd08      	pop	{r3, pc}
 800d794:	f3af 8000 	nop.w
	...

0800d7a0 <remainder>:
 800d7a0:	b508      	push	{r3, lr}
 800d7a2:	ed2d 8b04 	vpush	{d8-d9}
 800d7a6:	eeb0 8b41 	vmov.f64	d8, d1
 800d7aa:	f000 fc25 	bl	800dff8 <__ieee754_remainder>
 800d7ae:	eeb4 8b48 	vcmp.f64	d8, d8
 800d7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b6:	d60c      	bvs.n	800d7d2 <remainder+0x32>
 800d7b8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800d7d8 <remainder+0x38>
 800d7bc:	eeb4 8b49 	vcmp.f64	d8, d9
 800d7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c4:	d105      	bne.n	800d7d2 <remainder+0x32>
 800d7c6:	f7ff ff9b 	bl	800d700 <__errno>
 800d7ca:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d7ce:	2321      	movs	r3, #33	@ 0x21
 800d7d0:	6003      	str	r3, [r0, #0]
 800d7d2:	ecbd 8b04 	vpop	{d8-d9}
 800d7d6:	bd08      	pop	{r3, pc}
	...

0800d7e0 <sqrt>:
 800d7e0:	b508      	push	{r3, lr}
 800d7e2:	ed2d 8b04 	vpush	{d8-d9}
 800d7e6:	eeb0 8b40 	vmov.f64	d8, d0
 800d7ea:	f000 f8f1 	bl	800d9d0 <__ieee754_sqrt>
 800d7ee:	eeb4 8b48 	vcmp.f64	d8, d8
 800d7f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f6:	d60c      	bvs.n	800d812 <sqrt+0x32>
 800d7f8:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800d818 <sqrt+0x38>
 800d7fc:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d804:	d505      	bpl.n	800d812 <sqrt+0x32>
 800d806:	f7ff ff7b 	bl	800d700 <__errno>
 800d80a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d80e:	2321      	movs	r3, #33	@ 0x21
 800d810:	6003      	str	r3, [r0, #0]
 800d812:	ecbd 8b04 	vpop	{d8-d9}
 800d816:	bd08      	pop	{r3, pc}
	...

0800d820 <cos>:
 800d820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d822:	eeb0 7b40 	vmov.f64	d7, d0
 800d826:	ee17 3a90 	vmov	r3, s15
 800d82a:	4a21      	ldr	r2, [pc, #132]	@ (800d8b0 <cos+0x90>)
 800d82c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d830:	4293      	cmp	r3, r2
 800d832:	d806      	bhi.n	800d842 <cos+0x22>
 800d834:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d8a8 <cos+0x88>
 800d838:	b005      	add	sp, #20
 800d83a:	f85d eb04 	ldr.w	lr, [sp], #4
 800d83e:	f000 b8cb 	b.w	800d9d8 <__kernel_cos>
 800d842:	4a1c      	ldr	r2, [pc, #112]	@ (800d8b4 <cos+0x94>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d904      	bls.n	800d852 <cos+0x32>
 800d848:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d84c:	b005      	add	sp, #20
 800d84e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d852:	4668      	mov	r0, sp
 800d854:	f000 fa8c 	bl	800dd70 <__ieee754_rem_pio2>
 800d858:	f000 0003 	and.w	r0, r0, #3
 800d85c:	2801      	cmp	r0, #1
 800d85e:	d009      	beq.n	800d874 <cos+0x54>
 800d860:	2802      	cmp	r0, #2
 800d862:	d010      	beq.n	800d886 <cos+0x66>
 800d864:	b9b0      	cbnz	r0, 800d894 <cos+0x74>
 800d866:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d86a:	ed9d 0b00 	vldr	d0, [sp]
 800d86e:	f000 f8b3 	bl	800d9d8 <__kernel_cos>
 800d872:	e7eb      	b.n	800d84c <cos+0x2c>
 800d874:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d878:	ed9d 0b00 	vldr	d0, [sp]
 800d87c:	f000 f914 	bl	800daa8 <__kernel_sin>
 800d880:	eeb1 0b40 	vneg.f64	d0, d0
 800d884:	e7e2      	b.n	800d84c <cos+0x2c>
 800d886:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d88a:	ed9d 0b00 	vldr	d0, [sp]
 800d88e:	f000 f8a3 	bl	800d9d8 <__kernel_cos>
 800d892:	e7f5      	b.n	800d880 <cos+0x60>
 800d894:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d898:	ed9d 0b00 	vldr	d0, [sp]
 800d89c:	2001      	movs	r0, #1
 800d89e:	f000 f903 	bl	800daa8 <__kernel_sin>
 800d8a2:	e7d3      	b.n	800d84c <cos+0x2c>
 800d8a4:	f3af 8000 	nop.w
	...
 800d8b0:	3fe921fb 	.word	0x3fe921fb
 800d8b4:	7fefffff 	.word	0x7fefffff

0800d8b8 <sin>:
 800d8b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8ba:	eeb0 7b40 	vmov.f64	d7, d0
 800d8be:	ee17 3a90 	vmov	r3, s15
 800d8c2:	4a21      	ldr	r2, [pc, #132]	@ (800d948 <sin+0x90>)
 800d8c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d807      	bhi.n	800d8dc <sin+0x24>
 800d8cc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d940 <sin+0x88>
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	b005      	add	sp, #20
 800d8d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8d8:	f000 b8e6 	b.w	800daa8 <__kernel_sin>
 800d8dc:	4a1b      	ldr	r2, [pc, #108]	@ (800d94c <sin+0x94>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d904      	bls.n	800d8ec <sin+0x34>
 800d8e2:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d8e6:	b005      	add	sp, #20
 800d8e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800d8ec:	4668      	mov	r0, sp
 800d8ee:	f000 fa3f 	bl	800dd70 <__ieee754_rem_pio2>
 800d8f2:	f000 0003 	and.w	r0, r0, #3
 800d8f6:	2801      	cmp	r0, #1
 800d8f8:	d00a      	beq.n	800d910 <sin+0x58>
 800d8fa:	2802      	cmp	r0, #2
 800d8fc:	d00f      	beq.n	800d91e <sin+0x66>
 800d8fe:	b9c0      	cbnz	r0, 800d932 <sin+0x7a>
 800d900:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d904:	ed9d 0b00 	vldr	d0, [sp]
 800d908:	2001      	movs	r0, #1
 800d90a:	f000 f8cd 	bl	800daa8 <__kernel_sin>
 800d90e:	e7ea      	b.n	800d8e6 <sin+0x2e>
 800d910:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d914:	ed9d 0b00 	vldr	d0, [sp]
 800d918:	f000 f85e 	bl	800d9d8 <__kernel_cos>
 800d91c:	e7e3      	b.n	800d8e6 <sin+0x2e>
 800d91e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d922:	ed9d 0b00 	vldr	d0, [sp]
 800d926:	2001      	movs	r0, #1
 800d928:	f000 f8be 	bl	800daa8 <__kernel_sin>
 800d92c:	eeb1 0b40 	vneg.f64	d0, d0
 800d930:	e7d9      	b.n	800d8e6 <sin+0x2e>
 800d932:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d936:	ed9d 0b00 	vldr	d0, [sp]
 800d93a:	f000 f84d 	bl	800d9d8 <__kernel_cos>
 800d93e:	e7f5      	b.n	800d92c <sin+0x74>
	...
 800d948:	3fe921fb 	.word	0x3fe921fb
 800d94c:	7fefffff 	.word	0x7fefffff

0800d950 <lrintf>:
 800d950:	ee10 3a10 	vmov	r3, s0
 800d954:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d958:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 800d95c:	281e      	cmp	r0, #30
 800d95e:	b082      	sub	sp, #8
 800d960:	dc2f      	bgt.n	800d9c2 <lrintf+0x72>
 800d962:	1c41      	adds	r1, r0, #1
 800d964:	da02      	bge.n	800d96c <lrintf+0x1c>
 800d966:	2000      	movs	r0, #0
 800d968:	b002      	add	sp, #8
 800d96a:	4770      	bx	lr
 800d96c:	2816      	cmp	r0, #22
 800d96e:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800d972:	dd0a      	ble.n	800d98a <lrintf+0x3a>
 800d974:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d978:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d97c:	3a96      	subs	r2, #150	@ 0x96
 800d97e:	fa03 f002 	lsl.w	r0, r3, r2
 800d982:	2900      	cmp	r1, #0
 800d984:	d0f0      	beq.n	800d968 <lrintf+0x18>
 800d986:	4240      	negs	r0, r0
 800d988:	e7ee      	b.n	800d968 <lrintf+0x18>
 800d98a:	4b10      	ldr	r3, [pc, #64]	@ (800d9cc <lrintf+0x7c>)
 800d98c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d990:	ed93 7a00 	vldr	s14, [r3]
 800d994:	ee37 0a00 	vadd.f32	s0, s14, s0
 800d998:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d99c:	eddd 7a01 	vldr	s15, [sp, #4]
 800d9a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9a4:	ee17 3a90 	vmov	r3, s15
 800d9a8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d9ac:	d0db      	beq.n	800d966 <lrintf+0x16>
 800d9ae:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d9b2:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800d9b6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d9ba:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d9be:	40d8      	lsrs	r0, r3
 800d9c0:	e7df      	b.n	800d982 <lrintf+0x32>
 800d9c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d9c6:	ee17 0a90 	vmov	r0, s15
 800d9ca:	e7cd      	b.n	800d968 <lrintf+0x18>
 800d9cc:	0800f024 	.word	0x0800f024

0800d9d0 <__ieee754_sqrt>:
 800d9d0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d9d4:	4770      	bx	lr
	...

0800d9d8 <__kernel_cos>:
 800d9d8:	eeb0 5b40 	vmov.f64	d5, d0
 800d9dc:	ee15 1a90 	vmov	r1, s11
 800d9e0:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d9e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d9e8:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800d9ec:	d204      	bcs.n	800d9f8 <__kernel_cos+0x20>
 800d9ee:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800d9f2:	ee17 3a90 	vmov	r3, s15
 800d9f6:	b343      	cbz	r3, 800da4a <__kernel_cos+0x72>
 800d9f8:	ee25 6b05 	vmul.f64	d6, d5, d5
 800d9fc:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800da00:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800da70 <__kernel_cos+0x98>
 800da04:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800da78 <__kernel_cos+0xa0>
 800da08:	eea6 4b07 	vfma.f64	d4, d6, d7
 800da0c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800da80 <__kernel_cos+0xa8>
 800da10:	eea4 7b06 	vfma.f64	d7, d4, d6
 800da14:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800da88 <__kernel_cos+0xb0>
 800da18:	eea7 4b06 	vfma.f64	d4, d7, d6
 800da1c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800da90 <__kernel_cos+0xb8>
 800da20:	4b1f      	ldr	r3, [pc, #124]	@ (800daa0 <__kernel_cos+0xc8>)
 800da22:	eea4 7b06 	vfma.f64	d7, d4, d6
 800da26:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800da98 <__kernel_cos+0xc0>
 800da2a:	4299      	cmp	r1, r3
 800da2c:	eea7 4b06 	vfma.f64	d4, d7, d6
 800da30:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800da34:	ee24 4b06 	vmul.f64	d4, d4, d6
 800da38:	ee26 7b07 	vmul.f64	d7, d6, d7
 800da3c:	eea6 1b04 	vfma.f64	d1, d6, d4
 800da40:	d804      	bhi.n	800da4c <__kernel_cos+0x74>
 800da42:	ee37 7b41 	vsub.f64	d7, d7, d1
 800da46:	ee30 0b47 	vsub.f64	d0, d0, d7
 800da4a:	4770      	bx	lr
 800da4c:	4b15      	ldr	r3, [pc, #84]	@ (800daa4 <__kernel_cos+0xcc>)
 800da4e:	4299      	cmp	r1, r3
 800da50:	d809      	bhi.n	800da66 <__kernel_cos+0x8e>
 800da52:	2200      	movs	r2, #0
 800da54:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800da58:	ec43 2b16 	vmov	d6, r2, r3
 800da5c:	ee30 0b46 	vsub.f64	d0, d0, d6
 800da60:	ee37 7b46 	vsub.f64	d7, d7, d6
 800da64:	e7ed      	b.n	800da42 <__kernel_cos+0x6a>
 800da66:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800da6a:	e7f7      	b.n	800da5c <__kernel_cos+0x84>
 800da6c:	f3af 8000 	nop.w
 800da70:	be8838d4 	.word	0xbe8838d4
 800da74:	bda8fae9 	.word	0xbda8fae9
 800da78:	bdb4b1c4 	.word	0xbdb4b1c4
 800da7c:	3e21ee9e 	.word	0x3e21ee9e
 800da80:	809c52ad 	.word	0x809c52ad
 800da84:	be927e4f 	.word	0xbe927e4f
 800da88:	19cb1590 	.word	0x19cb1590
 800da8c:	3efa01a0 	.word	0x3efa01a0
 800da90:	16c15177 	.word	0x16c15177
 800da94:	bf56c16c 	.word	0xbf56c16c
 800da98:	5555554c 	.word	0x5555554c
 800da9c:	3fa55555 	.word	0x3fa55555
 800daa0:	3fd33332 	.word	0x3fd33332
 800daa4:	3fe90000 	.word	0x3fe90000

0800daa8 <__kernel_sin>:
 800daa8:	ee10 3a90 	vmov	r3, s1
 800daac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dab0:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800dab4:	d204      	bcs.n	800dac0 <__kernel_sin+0x18>
 800dab6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800daba:	ee17 3a90 	vmov	r3, s15
 800dabe:	b35b      	cbz	r3, 800db18 <__kernel_sin+0x70>
 800dac0:	ee20 6b00 	vmul.f64	d6, d0, d0
 800dac4:	ee20 5b06 	vmul.f64	d5, d0, d6
 800dac8:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800db20 <__kernel_sin+0x78>
 800dacc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800db28 <__kernel_sin+0x80>
 800dad0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800dad4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800db30 <__kernel_sin+0x88>
 800dad8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dadc:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800db38 <__kernel_sin+0x90>
 800dae0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800dae4:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800db40 <__kernel_sin+0x98>
 800dae8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800daec:	b930      	cbnz	r0, 800dafc <__kernel_sin+0x54>
 800daee:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800db48 <__kernel_sin+0xa0>
 800daf2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800daf6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800dafa:	4770      	bx	lr
 800dafc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800db00:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800db04:	eea1 7b04 	vfma.f64	d7, d1, d4
 800db08:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800db0c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800db50 <__kernel_sin+0xa8>
 800db10:	eea5 1b07 	vfma.f64	d1, d5, d7
 800db14:	ee30 0b41 	vsub.f64	d0, d0, d1
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	f3af 8000 	nop.w
 800db20:	5acfd57c 	.word	0x5acfd57c
 800db24:	3de5d93a 	.word	0x3de5d93a
 800db28:	8a2b9ceb 	.word	0x8a2b9ceb
 800db2c:	be5ae5e6 	.word	0xbe5ae5e6
 800db30:	57b1fe7d 	.word	0x57b1fe7d
 800db34:	3ec71de3 	.word	0x3ec71de3
 800db38:	19c161d5 	.word	0x19c161d5
 800db3c:	bf2a01a0 	.word	0xbf2a01a0
 800db40:	1110f8a6 	.word	0x1110f8a6
 800db44:	3f811111 	.word	0x3f811111
 800db48:	55555549 	.word	0x55555549
 800db4c:	bfc55555 	.word	0xbfc55555
 800db50:	55555549 	.word	0x55555549
 800db54:	3fc55555 	.word	0x3fc55555

0800db58 <__ieee754_fmod>:
 800db58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db5c:	ed8d 1b00 	vstr	d1, [sp]
 800db60:	e9dd 6500 	ldrd	r6, r5, [sp]
 800db64:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800db68:	ea56 0307 	orrs.w	r3, r6, r7
 800db6c:	46b6      	mov	lr, r6
 800db6e:	d00d      	beq.n	800db8c <__ieee754_fmod+0x34>
 800db70:	ee10 ca90 	vmov	ip, s1
 800db74:	4b78      	ldr	r3, [pc, #480]	@ (800dd58 <__ieee754_fmod+0x200>)
 800db76:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800db7a:	4598      	cmp	r8, r3
 800db7c:	d806      	bhi.n	800db8c <__ieee754_fmod+0x34>
 800db7e:	4273      	negs	r3, r6
 800db80:	4a76      	ldr	r2, [pc, #472]	@ (800dd5c <__ieee754_fmod+0x204>)
 800db82:	4333      	orrs	r3, r6
 800db84:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800db88:	4293      	cmp	r3, r2
 800db8a:	d908      	bls.n	800db9e <__ieee754_fmod+0x46>
 800db8c:	ed9d 7b00 	vldr	d7, [sp]
 800db90:	ee20 7b07 	vmul.f64	d7, d0, d7
 800db94:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800db98:	b003      	add	sp, #12
 800db9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db9e:	ee10 9a10 	vmov	r9, s0
 800dba2:	45b8      	cmp	r8, r7
 800dba4:	4649      	mov	r1, r9
 800dba6:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800dbaa:	dc09      	bgt.n	800dbc0 <__ieee754_fmod+0x68>
 800dbac:	dbf4      	blt.n	800db98 <__ieee754_fmod+0x40>
 800dbae:	454e      	cmp	r6, r9
 800dbb0:	d8f2      	bhi.n	800db98 <__ieee754_fmod+0x40>
 800dbb2:	d105      	bne.n	800dbc0 <__ieee754_fmod+0x68>
 800dbb4:	4b6a      	ldr	r3, [pc, #424]	@ (800dd60 <__ieee754_fmod+0x208>)
 800dbb6:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800dbba:	ed93 0b00 	vldr	d0, [r3]
 800dbbe:	e7eb      	b.n	800db98 <__ieee754_fmod+0x40>
 800dbc0:	4a66      	ldr	r2, [pc, #408]	@ (800dd5c <__ieee754_fmod+0x204>)
 800dbc2:	ea1c 0f02 	tst.w	ip, r2
 800dbc6:	d14a      	bne.n	800dc5e <__ieee754_fmod+0x106>
 800dbc8:	f1b8 0f00 	cmp.w	r8, #0
 800dbcc:	d13f      	bne.n	800dc4e <__ieee754_fmod+0xf6>
 800dbce:	4865      	ldr	r0, [pc, #404]	@ (800dd64 <__ieee754_fmod+0x20c>)
 800dbd0:	464b      	mov	r3, r9
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	dc38      	bgt.n	800dc48 <__ieee754_fmod+0xf0>
 800dbd6:	4215      	tst	r5, r2
 800dbd8:	d150      	bne.n	800dc7c <__ieee754_fmod+0x124>
 800dbda:	2f00      	cmp	r7, #0
 800dbdc:	d147      	bne.n	800dc6e <__ieee754_fmod+0x116>
 800dbde:	4a61      	ldr	r2, [pc, #388]	@ (800dd64 <__ieee754_fmod+0x20c>)
 800dbe0:	4633      	mov	r3, r6
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	dc40      	bgt.n	800dc68 <__ieee754_fmod+0x110>
 800dbe6:	4b60      	ldr	r3, [pc, #384]	@ (800dd68 <__ieee754_fmod+0x210>)
 800dbe8:	4298      	cmp	r0, r3
 800dbea:	db4b      	blt.n	800dc84 <__ieee754_fmod+0x12c>
 800dbec:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800dbf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dbf4:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800dd68 <__ieee754_fmod+0x210>
 800dbf8:	4562      	cmp	r2, ip
 800dbfa:	db58      	blt.n	800dcae <__ieee754_fmod+0x156>
 800dbfc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dc00:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800dc04:	1a80      	subs	r0, r0, r2
 800dc06:	1b5e      	subs	r6, r3, r5
 800dc08:	eba1 070e 	sub.w	r7, r1, lr
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	d164      	bne.n	800dcda <__ieee754_fmod+0x182>
 800dc10:	4571      	cmp	r1, lr
 800dc12:	bf38      	it	cc
 800dc14:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800dc18:	2e00      	cmp	r6, #0
 800dc1a:	bfa4      	itt	ge
 800dc1c:	4639      	movge	r1, r7
 800dc1e:	4633      	movge	r3, r6
 800dc20:	ea53 0001 	orrs.w	r0, r3, r1
 800dc24:	d0c6      	beq.n	800dbb4 <__ieee754_fmod+0x5c>
 800dc26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc2a:	db6b      	blt.n	800dd04 <__ieee754_fmod+0x1ac>
 800dc2c:	484e      	ldr	r0, [pc, #312]	@ (800dd68 <__ieee754_fmod+0x210>)
 800dc2e:	4282      	cmp	r2, r0
 800dc30:	db6e      	blt.n	800dd10 <__ieee754_fmod+0x1b8>
 800dc32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dc36:	4323      	orrs	r3, r4
 800dc38:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800dc3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dc40:	460c      	mov	r4, r1
 800dc42:	ec45 4b10 	vmov	d0, r4, r5
 800dc46:	e7a7      	b.n	800db98 <__ieee754_fmod+0x40>
 800dc48:	3801      	subs	r0, #1
 800dc4a:	005b      	lsls	r3, r3, #1
 800dc4c:	e7c1      	b.n	800dbd2 <__ieee754_fmod+0x7a>
 800dc4e:	4846      	ldr	r0, [pc, #280]	@ (800dd68 <__ieee754_fmod+0x210>)
 800dc50:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	ddbe      	ble.n	800dbd6 <__ieee754_fmod+0x7e>
 800dc58:	3801      	subs	r0, #1
 800dc5a:	005b      	lsls	r3, r3, #1
 800dc5c:	e7fa      	b.n	800dc54 <__ieee754_fmod+0xfc>
 800dc5e:	ea4f 5028 	mov.w	r0, r8, asr #20
 800dc62:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800dc66:	e7b6      	b.n	800dbd6 <__ieee754_fmod+0x7e>
 800dc68:	3a01      	subs	r2, #1
 800dc6a:	005b      	lsls	r3, r3, #1
 800dc6c:	e7b9      	b.n	800dbe2 <__ieee754_fmod+0x8a>
 800dc6e:	4a3e      	ldr	r2, [pc, #248]	@ (800dd68 <__ieee754_fmod+0x210>)
 800dc70:	02fb      	lsls	r3, r7, #11
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	ddb7      	ble.n	800dbe6 <__ieee754_fmod+0x8e>
 800dc76:	3a01      	subs	r2, #1
 800dc78:	005b      	lsls	r3, r3, #1
 800dc7a:	e7fa      	b.n	800dc72 <__ieee754_fmod+0x11a>
 800dc7c:	153a      	asrs	r2, r7, #20
 800dc7e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800dc82:	e7b0      	b.n	800dbe6 <__ieee754_fmod+0x8e>
 800dc84:	eba3 0c00 	sub.w	ip, r3, r0
 800dc88:	f1bc 0f1f 	cmp.w	ip, #31
 800dc8c:	dc09      	bgt.n	800dca2 <__ieee754_fmod+0x14a>
 800dc8e:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800dc92:	fa08 f10c 	lsl.w	r1, r8, ip
 800dc96:	fa29 f303 	lsr.w	r3, r9, r3
 800dc9a:	430b      	orrs	r3, r1
 800dc9c:	fa09 f10c 	lsl.w	r1, r9, ip
 800dca0:	e7a8      	b.n	800dbf4 <__ieee754_fmod+0x9c>
 800dca2:	4b32      	ldr	r3, [pc, #200]	@ (800dd6c <__ieee754_fmod+0x214>)
 800dca4:	1a1b      	subs	r3, r3, r0
 800dca6:	fa09 f303 	lsl.w	r3, r9, r3
 800dcaa:	2100      	movs	r1, #0
 800dcac:	e7a2      	b.n	800dbf4 <__ieee754_fmod+0x9c>
 800dcae:	ebac 0c02 	sub.w	ip, ip, r2
 800dcb2:	f1bc 0f1f 	cmp.w	ip, #31
 800dcb6:	dc09      	bgt.n	800dccc <__ieee754_fmod+0x174>
 800dcb8:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800dcbc:	fa07 f70c 	lsl.w	r7, r7, ip
 800dcc0:	fa26 f505 	lsr.w	r5, r6, r5
 800dcc4:	433d      	orrs	r5, r7
 800dcc6:	fa06 fe0c 	lsl.w	lr, r6, ip
 800dcca:	e79b      	b.n	800dc04 <__ieee754_fmod+0xac>
 800dccc:	4d27      	ldr	r5, [pc, #156]	@ (800dd6c <__ieee754_fmod+0x214>)
 800dcce:	1aad      	subs	r5, r5, r2
 800dcd0:	fa06 f505 	lsl.w	r5, r6, r5
 800dcd4:	f04f 0e00 	mov.w	lr, #0
 800dcd8:	e794      	b.n	800dc04 <__ieee754_fmod+0xac>
 800dcda:	4571      	cmp	r1, lr
 800dcdc:	bf38      	it	cc
 800dcde:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800dce2:	2e00      	cmp	r6, #0
 800dce4:	da05      	bge.n	800dcf2 <__ieee754_fmod+0x19a>
 800dce6:	0fce      	lsrs	r6, r1, #31
 800dce8:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800dcec:	0049      	lsls	r1, r1, #1
 800dcee:	3801      	subs	r0, #1
 800dcf0:	e789      	b.n	800dc06 <__ieee754_fmod+0xae>
 800dcf2:	ea56 0307 	orrs.w	r3, r6, r7
 800dcf6:	f43f af5d 	beq.w	800dbb4 <__ieee754_fmod+0x5c>
 800dcfa:	0ffb      	lsrs	r3, r7, #31
 800dcfc:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800dd00:	0079      	lsls	r1, r7, #1
 800dd02:	e7f4      	b.n	800dcee <__ieee754_fmod+0x196>
 800dd04:	0fc8      	lsrs	r0, r1, #31
 800dd06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800dd0a:	0049      	lsls	r1, r1, #1
 800dd0c:	3a01      	subs	r2, #1
 800dd0e:	e78a      	b.n	800dc26 <__ieee754_fmod+0xce>
 800dd10:	1a80      	subs	r0, r0, r2
 800dd12:	2814      	cmp	r0, #20
 800dd14:	dc0c      	bgt.n	800dd30 <__ieee754_fmod+0x1d8>
 800dd16:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800dd1a:	fa03 f202 	lsl.w	r2, r3, r2
 800dd1e:	40c1      	lsrs	r1, r0
 800dd20:	430a      	orrs	r2, r1
 800dd22:	4103      	asrs	r3, r0
 800dd24:	ea43 0104 	orr.w	r1, r3, r4
 800dd28:	4610      	mov	r0, r2
 800dd2a:	ec41 0b10 	vmov	d0, r0, r1
 800dd2e:	e733      	b.n	800db98 <__ieee754_fmod+0x40>
 800dd30:	281f      	cmp	r0, #31
 800dd32:	dc07      	bgt.n	800dd44 <__ieee754_fmod+0x1ec>
 800dd34:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800dd38:	40c1      	lsrs	r1, r0
 800dd3a:	fa03 f202 	lsl.w	r2, r3, r2
 800dd3e:	430a      	orrs	r2, r1
 800dd40:	4623      	mov	r3, r4
 800dd42:	e7ef      	b.n	800dd24 <__ieee754_fmod+0x1cc>
 800dd44:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800dd48:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800dd4c:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800dd50:	32e2      	adds	r2, #226	@ 0xe2
 800dd52:	fa43 f202 	asr.w	r2, r3, r2
 800dd56:	e7f3      	b.n	800dd40 <__ieee754_fmod+0x1e8>
 800dd58:	7fefffff 	.word	0x7fefffff
 800dd5c:	7ff00000 	.word	0x7ff00000
 800dd60:	0800f030 	.word	0x0800f030
 800dd64:	fffffbed 	.word	0xfffffbed
 800dd68:	fffffc02 	.word	0xfffffc02
 800dd6c:	fffffbe2 	.word	0xfffffbe2

0800dd70 <__ieee754_rem_pio2>:
 800dd70:	b570      	push	{r4, r5, r6, lr}
 800dd72:	eeb0 7b40 	vmov.f64	d7, d0
 800dd76:	ee17 5a90 	vmov	r5, s15
 800dd7a:	4b99      	ldr	r3, [pc, #612]	@ (800dfe0 <__ieee754_rem_pio2+0x270>)
 800dd7c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800dd80:	429e      	cmp	r6, r3
 800dd82:	b088      	sub	sp, #32
 800dd84:	4604      	mov	r4, r0
 800dd86:	d807      	bhi.n	800dd98 <__ieee754_rem_pio2+0x28>
 800dd88:	2200      	movs	r2, #0
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	ed84 0b00 	vstr	d0, [r4]
 800dd90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dd94:	2000      	movs	r0, #0
 800dd96:	e01b      	b.n	800ddd0 <__ieee754_rem_pio2+0x60>
 800dd98:	4b92      	ldr	r3, [pc, #584]	@ (800dfe4 <__ieee754_rem_pio2+0x274>)
 800dd9a:	429e      	cmp	r6, r3
 800dd9c:	d83b      	bhi.n	800de16 <__ieee754_rem_pio2+0xa6>
 800dd9e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800dda2:	2d00      	cmp	r5, #0
 800dda4:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800dfa0 <__ieee754_rem_pio2+0x230>
 800dda8:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800ddac:	dd19      	ble.n	800dde2 <__ieee754_rem_pio2+0x72>
 800ddae:	ee30 7b46 	vsub.f64	d7, d0, d6
 800ddb2:	429e      	cmp	r6, r3
 800ddb4:	d00e      	beq.n	800ddd4 <__ieee754_rem_pio2+0x64>
 800ddb6:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800dfa8 <__ieee754_rem_pio2+0x238>
 800ddba:	ee37 6b45 	vsub.f64	d6, d7, d5
 800ddbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ddc2:	ed84 6b00 	vstr	d6, [r4]
 800ddc6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800ddca:	ed84 7b02 	vstr	d7, [r4, #8]
 800ddce:	2001      	movs	r0, #1
 800ddd0:	b008      	add	sp, #32
 800ddd2:	bd70      	pop	{r4, r5, r6, pc}
 800ddd4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800dfb0 <__ieee754_rem_pio2+0x240>
 800ddd8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800dfb8 <__ieee754_rem_pio2+0x248>
 800dddc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dde0:	e7eb      	b.n	800ddba <__ieee754_rem_pio2+0x4a>
 800dde2:	429e      	cmp	r6, r3
 800dde4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800dde8:	d00e      	beq.n	800de08 <__ieee754_rem_pio2+0x98>
 800ddea:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800dfa8 <__ieee754_rem_pio2+0x238>
 800ddee:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ddf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ddf6:	ed84 6b00 	vstr	d6, [r4]
 800ddfa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ddfe:	f04f 30ff 	mov.w	r0, #4294967295
 800de02:	ed84 7b02 	vstr	d7, [r4, #8]
 800de06:	e7e3      	b.n	800ddd0 <__ieee754_rem_pio2+0x60>
 800de08:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800dfb0 <__ieee754_rem_pio2+0x240>
 800de0c:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800dfb8 <__ieee754_rem_pio2+0x248>
 800de10:	ee37 7b06 	vadd.f64	d7, d7, d6
 800de14:	e7eb      	b.n	800ddee <__ieee754_rem_pio2+0x7e>
 800de16:	4b74      	ldr	r3, [pc, #464]	@ (800dfe8 <__ieee754_rem_pio2+0x278>)
 800de18:	429e      	cmp	r6, r3
 800de1a:	d870      	bhi.n	800defe <__ieee754_rem_pio2+0x18e>
 800de1c:	f000 f96e 	bl	800e0fc <fabs>
 800de20:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800de24:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800dfc0 <__ieee754_rem_pio2+0x250>
 800de28:	eea0 7b06 	vfma.f64	d7, d0, d6
 800de2c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800de30:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800de34:	ee17 0a90 	vmov	r0, s15
 800de38:	eeb1 4b45 	vneg.f64	d4, d5
 800de3c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800dfa0 <__ieee754_rem_pio2+0x230>
 800de40:	eea5 0b47 	vfms.f64	d0, d5, d7
 800de44:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800dfa8 <__ieee754_rem_pio2+0x238>
 800de48:	281f      	cmp	r0, #31
 800de4a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800de4e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800de52:	dc05      	bgt.n	800de60 <__ieee754_rem_pio2+0xf0>
 800de54:	4b65      	ldr	r3, [pc, #404]	@ (800dfec <__ieee754_rem_pio2+0x27c>)
 800de56:	1e42      	subs	r2, r0, #1
 800de58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de5c:	42b3      	cmp	r3, r6
 800de5e:	d109      	bne.n	800de74 <__ieee754_rem_pio2+0x104>
 800de60:	ee16 3a90 	vmov	r3, s13
 800de64:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800de68:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800de6c:	2b10      	cmp	r3, #16
 800de6e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800de72:	dc02      	bgt.n	800de7a <__ieee754_rem_pio2+0x10a>
 800de74:	ed84 6b00 	vstr	d6, [r4]
 800de78:	e01a      	b.n	800deb0 <__ieee754_rem_pio2+0x140>
 800de7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800dfb0 <__ieee754_rem_pio2+0x240>
 800de7e:	eeb0 6b40 	vmov.f64	d6, d0
 800de82:	eea4 6b03 	vfma.f64	d6, d4, d3
 800de86:	ee30 7b46 	vsub.f64	d7, d0, d6
 800de8a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800de8e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800dfb8 <__ieee754_rem_pio2+0x248>
 800de92:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800de96:	ee36 3b47 	vsub.f64	d3, d6, d7
 800de9a:	ee13 3a90 	vmov	r3, s7
 800de9e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	2b31      	cmp	r3, #49	@ 0x31
 800dea6:	dc17      	bgt.n	800ded8 <__ieee754_rem_pio2+0x168>
 800dea8:	eeb0 0b46 	vmov.f64	d0, d6
 800deac:	ed84 3b00 	vstr	d3, [r4]
 800deb0:	ed94 6b00 	vldr	d6, [r4]
 800deb4:	2d00      	cmp	r5, #0
 800deb6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800deba:	ee30 0b47 	vsub.f64	d0, d0, d7
 800debe:	ed84 0b02 	vstr	d0, [r4, #8]
 800dec2:	da85      	bge.n	800ddd0 <__ieee754_rem_pio2+0x60>
 800dec4:	eeb1 6b46 	vneg.f64	d6, d6
 800dec8:	eeb1 0b40 	vneg.f64	d0, d0
 800decc:	ed84 6b00 	vstr	d6, [r4]
 800ded0:	ed84 0b02 	vstr	d0, [r4, #8]
 800ded4:	4240      	negs	r0, r0
 800ded6:	e77b      	b.n	800ddd0 <__ieee754_rem_pio2+0x60>
 800ded8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800dfc8 <__ieee754_rem_pio2+0x258>
 800dedc:	eeb0 0b46 	vmov.f64	d0, d6
 800dee0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dee4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800dee8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800deec:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800dfd0 <__ieee754_rem_pio2+0x260>
 800def0:	eeb0 7b46 	vmov.f64	d7, d6
 800def4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800def8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800defc:	e7ba      	b.n	800de74 <__ieee754_rem_pio2+0x104>
 800defe:	4b3c      	ldr	r3, [pc, #240]	@ (800dff0 <__ieee754_rem_pio2+0x280>)
 800df00:	429e      	cmp	r6, r3
 800df02:	d906      	bls.n	800df12 <__ieee754_rem_pio2+0x1a2>
 800df04:	ee30 7b40 	vsub.f64	d7, d0, d0
 800df08:	ed80 7b02 	vstr	d7, [r0, #8]
 800df0c:	ed80 7b00 	vstr	d7, [r0]
 800df10:	e740      	b.n	800dd94 <__ieee754_rem_pio2+0x24>
 800df12:	ee10 3a10 	vmov	r3, s0
 800df16:	1532      	asrs	r2, r6, #20
 800df18:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800df1c:	4618      	mov	r0, r3
 800df1e:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800df22:	ec41 0b17 	vmov	d7, r0, r1
 800df26:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800df2a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800dfd8 <__ieee754_rem_pio2+0x268>
 800df2e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800df32:	ee37 7b46 	vsub.f64	d7, d7, d6
 800df36:	ed8d 6b02 	vstr	d6, [sp, #8]
 800df3a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800df3e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800df42:	a808      	add	r0, sp, #32
 800df44:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800df48:	ee37 7b46 	vsub.f64	d7, d7, d6
 800df4c:	ed8d 6b04 	vstr	d6, [sp, #16]
 800df50:	ee27 7b05 	vmul.f64	d7, d7, d5
 800df54:	ed8d 7b06 	vstr	d7, [sp, #24]
 800df58:	2103      	movs	r1, #3
 800df5a:	ed30 7b02 	vldmdb	r0!, {d7}
 800df5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df66:	460b      	mov	r3, r1
 800df68:	f101 31ff 	add.w	r1, r1, #4294967295
 800df6c:	d0f5      	beq.n	800df5a <__ieee754_rem_pio2+0x1ea>
 800df6e:	4921      	ldr	r1, [pc, #132]	@ (800dff4 <__ieee754_rem_pio2+0x284>)
 800df70:	9101      	str	r1, [sp, #4]
 800df72:	2102      	movs	r1, #2
 800df74:	9100      	str	r1, [sp, #0]
 800df76:	a802      	add	r0, sp, #8
 800df78:	4621      	mov	r1, r4
 800df7a:	f000 f8c9 	bl	800e110 <__kernel_rem_pio2>
 800df7e:	2d00      	cmp	r5, #0
 800df80:	f6bf af26 	bge.w	800ddd0 <__ieee754_rem_pio2+0x60>
 800df84:	ed94 7b00 	vldr	d7, [r4]
 800df88:	eeb1 7b47 	vneg.f64	d7, d7
 800df8c:	ed84 7b00 	vstr	d7, [r4]
 800df90:	ed94 7b02 	vldr	d7, [r4, #8]
 800df94:	eeb1 7b47 	vneg.f64	d7, d7
 800df98:	ed84 7b02 	vstr	d7, [r4, #8]
 800df9c:	e79a      	b.n	800ded4 <__ieee754_rem_pio2+0x164>
 800df9e:	bf00      	nop
 800dfa0:	54400000 	.word	0x54400000
 800dfa4:	3ff921fb 	.word	0x3ff921fb
 800dfa8:	1a626331 	.word	0x1a626331
 800dfac:	3dd0b461 	.word	0x3dd0b461
 800dfb0:	1a600000 	.word	0x1a600000
 800dfb4:	3dd0b461 	.word	0x3dd0b461
 800dfb8:	2e037073 	.word	0x2e037073
 800dfbc:	3ba3198a 	.word	0x3ba3198a
 800dfc0:	6dc9c883 	.word	0x6dc9c883
 800dfc4:	3fe45f30 	.word	0x3fe45f30
 800dfc8:	2e000000 	.word	0x2e000000
 800dfcc:	3ba3198a 	.word	0x3ba3198a
 800dfd0:	252049c1 	.word	0x252049c1
 800dfd4:	397b839a 	.word	0x397b839a
 800dfd8:	00000000 	.word	0x00000000
 800dfdc:	41700000 	.word	0x41700000
 800dfe0:	3fe921fb 	.word	0x3fe921fb
 800dfe4:	4002d97b 	.word	0x4002d97b
 800dfe8:	413921fb 	.word	0x413921fb
 800dfec:	0800f040 	.word	0x0800f040
 800dff0:	7fefffff 	.word	0x7fefffff
 800dff4:	0800f0c0 	.word	0x0800f0c0

0800dff8 <__ieee754_remainder>:
 800dff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dffc:	ed2d 8b04 	vpush	{d8-d9}
 800e000:	eeb0 9b41 	vmov.f64	d9, d1
 800e004:	eeb0 8b40 	vmov.f64	d8, d0
 800e008:	ee19 7a90 	vmov	r7, s19
 800e00c:	ee11 8a10 	vmov	r8, s2
 800e010:	f027 4600 	bic.w	r6, r7, #2147483648	@ 0x80000000
 800e014:	ea56 0308 	orrs.w	r3, r6, r8
 800e018:	d107      	bne.n	800e02a <__ieee754_remainder+0x32>
 800e01a:	ee28 8b09 	vmul.f64	d8, d8, d9
 800e01e:	ee88 0b08 	vdiv.f64	d0, d8, d8
 800e022:	ecbd 8b04 	vpop	{d8-d9}
 800e026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e02a:	ee18 5a90 	vmov	r5, s17
 800e02e:	4b30      	ldr	r3, [pc, #192]	@ (800e0f0 <__ieee754_remainder+0xf8>)
 800e030:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800e034:	429c      	cmp	r4, r3
 800e036:	d8f0      	bhi.n	800e01a <__ieee754_remainder+0x22>
 800e038:	429e      	cmp	r6, r3
 800e03a:	d909      	bls.n	800e050 <__ieee754_remainder+0x58>
 800e03c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e040:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800e044:	ea53 0308 	orrs.w	r3, r3, r8
 800e048:	d1e7      	bne.n	800e01a <__ieee754_remainder+0x22>
 800e04a:	eeb0 0b48 	vmov.f64	d0, d8
 800e04e:	e006      	b.n	800e05e <__ieee754_remainder+0x66>
 800e050:	4b28      	ldr	r3, [pc, #160]	@ (800e0f4 <__ieee754_remainder+0xfc>)
 800e052:	429e      	cmp	r6, r3
 800e054:	d8f9      	bhi.n	800e04a <__ieee754_remainder+0x52>
 800e056:	ee31 1b01 	vadd.f64	d1, d1, d1
 800e05a:	f7ff fd7d 	bl	800db58 <__ieee754_fmod>
 800e05e:	ee18 3a10 	vmov	r3, s16
 800e062:	1ba4      	subs	r4, r4, r6
 800e064:	eba3 0308 	sub.w	r3, r3, r8
 800e068:	431c      	orrs	r4, r3
 800e06a:	d104      	bne.n	800e076 <__ieee754_remainder+0x7e>
 800e06c:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 800e0e8 <__ieee754_remainder+0xf0>
 800e070:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e074:	e7d5      	b.n	800e022 <__ieee754_remainder+0x2a>
 800e076:	f000 f841 	bl	800e0fc <fabs>
 800e07a:	eeb0 8b40 	vmov.f64	d8, d0
 800e07e:	eeb0 0b49 	vmov.f64	d0, d9
 800e082:	f000 f83b 	bl	800e0fc <fabs>
 800e086:	4b1c      	ldr	r3, [pc, #112]	@ (800e0f8 <__ieee754_remainder+0x100>)
 800e088:	403b      	ands	r3, r7
 800e08a:	b993      	cbnz	r3, 800e0b2 <__ieee754_remainder+0xba>
 800e08c:	ee38 7b08 	vadd.f64	d7, d8, d8
 800e090:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800e094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e098:	dd1b      	ble.n	800e0d2 <__ieee754_remainder+0xda>
 800e09a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e09e:	ee38 7b08 	vadd.f64	d7, d8, d8
 800e0a2:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800e0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0aa:	db12      	blt.n	800e0d2 <__ieee754_remainder+0xda>
 800e0ac:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e0b0:	e00f      	b.n	800e0d2 <__ieee754_remainder+0xda>
 800e0b2:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e0b6:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e0ba:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c2:	dd06      	ble.n	800e0d2 <__ieee754_remainder+0xda>
 800e0c4:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e0c8:	eeb4 7bc8 	vcmpe.f64	d7, d8
 800e0cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d0:	d9ec      	bls.n	800e0ac <__ieee754_remainder+0xb4>
 800e0d2:	ee18 1a90 	vmov	r1, s17
 800e0d6:	ec53 2b18 	vmov	r2, r3, d8
 800e0da:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 800e0de:	ea85 0301 	eor.w	r3, r5, r1
 800e0e2:	ec43 2b10 	vmov	d0, r2, r3
 800e0e6:	e79c      	b.n	800e022 <__ieee754_remainder+0x2a>
	...
 800e0f0:	7fefffff 	.word	0x7fefffff
 800e0f4:	7fdfffff 	.word	0x7fdfffff
 800e0f8:	7fe00000 	.word	0x7fe00000

0800e0fc <fabs>:
 800e0fc:	ec51 0b10 	vmov	r0, r1, d0
 800e100:	4602      	mov	r2, r0
 800e102:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e106:	ec43 2b10 	vmov	d0, r2, r3
 800e10a:	4770      	bx	lr
 800e10c:	0000      	movs	r0, r0
	...

0800e110 <__kernel_rem_pio2>:
 800e110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e114:	ed2d 8b06 	vpush	{d8-d10}
 800e118:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800e11c:	469b      	mov	fp, r3
 800e11e:	9001      	str	r0, [sp, #4]
 800e120:	4bbb      	ldr	r3, [pc, #748]	@ (800e410 <__kernel_rem_pio2+0x300>)
 800e122:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800e124:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800e128:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800e12c:	f112 0f14 	cmn.w	r2, #20
 800e130:	bfa8      	it	ge
 800e132:	1ed3      	subge	r3, r2, #3
 800e134:	f10b 3aff 	add.w	sl, fp, #4294967295
 800e138:	bfb8      	it	lt
 800e13a:	2300      	movlt	r3, #0
 800e13c:	f06f 0517 	mvn.w	r5, #23
 800e140:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800e3f8 <__kernel_rem_pio2+0x2e8>
 800e144:	bfa4      	itt	ge
 800e146:	2018      	movge	r0, #24
 800e148:	fb93 f3f0 	sdivge	r3, r3, r0
 800e14c:	fb03 5505 	mla	r5, r3, r5, r5
 800e150:	eba3 040a 	sub.w	r4, r3, sl
 800e154:	4415      	add	r5, r2
 800e156:	460f      	mov	r7, r1
 800e158:	eb09 060a 	add.w	r6, r9, sl
 800e15c:	a81a      	add	r0, sp, #104	@ 0x68
 800e15e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800e162:	2200      	movs	r2, #0
 800e164:	42b2      	cmp	r2, r6
 800e166:	dd0e      	ble.n	800e186 <__kernel_rem_pio2+0x76>
 800e168:	aa1a      	add	r2, sp, #104	@ 0x68
 800e16a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800e16e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800e172:	2600      	movs	r6, #0
 800e174:	454e      	cmp	r6, r9
 800e176:	dc25      	bgt.n	800e1c4 <__kernel_rem_pio2+0xb4>
 800e178:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800e3f8 <__kernel_rem_pio2+0x2e8>
 800e17c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e180:	4614      	mov	r4, r2
 800e182:	2000      	movs	r0, #0
 800e184:	e015      	b.n	800e1b2 <__kernel_rem_pio2+0xa2>
 800e186:	42d4      	cmn	r4, r2
 800e188:	d409      	bmi.n	800e19e <__kernel_rem_pio2+0x8e>
 800e18a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800e18e:	ee07 1a90 	vmov	s15, r1
 800e192:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e196:	eca0 7b02 	vstmia	r0!, {d7}
 800e19a:	3201      	adds	r2, #1
 800e19c:	e7e2      	b.n	800e164 <__kernel_rem_pio2+0x54>
 800e19e:	eeb0 7b46 	vmov.f64	d7, d6
 800e1a2:	e7f8      	b.n	800e196 <__kernel_rem_pio2+0x86>
 800e1a4:	ecbc 5b02 	vldmia	ip!, {d5}
 800e1a8:	ed94 6b00 	vldr	d6, [r4]
 800e1ac:	3001      	adds	r0, #1
 800e1ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e1b2:	4550      	cmp	r0, sl
 800e1b4:	f1a4 0408 	sub.w	r4, r4, #8
 800e1b8:	ddf4      	ble.n	800e1a4 <__kernel_rem_pio2+0x94>
 800e1ba:	ecae 7b02 	vstmia	lr!, {d7}
 800e1be:	3601      	adds	r6, #1
 800e1c0:	3208      	adds	r2, #8
 800e1c2:	e7d7      	b.n	800e174 <__kernel_rem_pio2+0x64>
 800e1c4:	aa06      	add	r2, sp, #24
 800e1c6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800e400 <__kernel_rem_pio2+0x2f0>
 800e1ca:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800e408 <__kernel_rem_pio2+0x2f8>
 800e1ce:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800e1d2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800e1d6:	9203      	str	r2, [sp, #12]
 800e1d8:	9302      	str	r3, [sp, #8]
 800e1da:	464c      	mov	r4, r9
 800e1dc:	00e3      	lsls	r3, r4, #3
 800e1de:	9304      	str	r3, [sp, #16]
 800e1e0:	ab92      	add	r3, sp, #584	@ 0x248
 800e1e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e1e6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800e1ea:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800e1ec:	ab06      	add	r3, sp, #24
 800e1ee:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e1f2:	461e      	mov	r6, r3
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	f1a2 0208 	sub.w	r2, r2, #8
 800e1fc:	dc4a      	bgt.n	800e294 <__kernel_rem_pio2+0x184>
 800e1fe:	4628      	mov	r0, r5
 800e200:	9305      	str	r3, [sp, #20]
 800e202:	f000 fa01 	bl	800e608 <scalbn>
 800e206:	eeb0 8b40 	vmov.f64	d8, d0
 800e20a:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800e20e:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e212:	f000 fa79 	bl	800e708 <floor>
 800e216:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800e21a:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e21e:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e222:	2d00      	cmp	r5, #0
 800e224:	ee17 8a90 	vmov	r8, s15
 800e228:	9b05      	ldr	r3, [sp, #20]
 800e22a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e22e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e232:	dd41      	ble.n	800e2b8 <__kernel_rem_pio2+0x1a8>
 800e234:	1e60      	subs	r0, r4, #1
 800e236:	aa06      	add	r2, sp, #24
 800e238:	f1c5 0c18 	rsb	ip, r5, #24
 800e23c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800e240:	fa46 f20c 	asr.w	r2, r6, ip
 800e244:	4490      	add	r8, r2
 800e246:	fa02 f20c 	lsl.w	r2, r2, ip
 800e24a:	1ab6      	subs	r6, r6, r2
 800e24c:	aa06      	add	r2, sp, #24
 800e24e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800e252:	f1c5 0217 	rsb	r2, r5, #23
 800e256:	4116      	asrs	r6, r2
 800e258:	2e00      	cmp	r6, #0
 800e25a:	dd3c      	ble.n	800e2d6 <__kernel_rem_pio2+0x1c6>
 800e25c:	f04f 0c00 	mov.w	ip, #0
 800e260:	f108 0801 	add.w	r8, r8, #1
 800e264:	4660      	mov	r0, ip
 800e266:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800e26a:	4564      	cmp	r4, ip
 800e26c:	dc66      	bgt.n	800e33c <__kernel_rem_pio2+0x22c>
 800e26e:	2d00      	cmp	r5, #0
 800e270:	dd03      	ble.n	800e27a <__kernel_rem_pio2+0x16a>
 800e272:	2d01      	cmp	r5, #1
 800e274:	d072      	beq.n	800e35c <__kernel_rem_pio2+0x24c>
 800e276:	2d02      	cmp	r5, #2
 800e278:	d07a      	beq.n	800e370 <__kernel_rem_pio2+0x260>
 800e27a:	2e02      	cmp	r6, #2
 800e27c:	d12b      	bne.n	800e2d6 <__kernel_rem_pio2+0x1c6>
 800e27e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e282:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e286:	b330      	cbz	r0, 800e2d6 <__kernel_rem_pio2+0x1c6>
 800e288:	4628      	mov	r0, r5
 800e28a:	f000 f9bd 	bl	800e608 <scalbn>
 800e28e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e292:	e020      	b.n	800e2d6 <__kernel_rem_pio2+0x1c6>
 800e294:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e298:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e29c:	3801      	subs	r0, #1
 800e29e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e2a2:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e2a6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e2aa:	eca6 0a01 	vstmia	r6!, {s0}
 800e2ae:	ed92 0b00 	vldr	d0, [r2]
 800e2b2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e2b6:	e79e      	b.n	800e1f6 <__kernel_rem_pio2+0xe6>
 800e2b8:	d105      	bne.n	800e2c6 <__kernel_rem_pio2+0x1b6>
 800e2ba:	1e62      	subs	r2, r4, #1
 800e2bc:	a906      	add	r1, sp, #24
 800e2be:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800e2c2:	15f6      	asrs	r6, r6, #23
 800e2c4:	e7c8      	b.n	800e258 <__kernel_rem_pio2+0x148>
 800e2c6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e2ca:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d2:	da31      	bge.n	800e338 <__kernel_rem_pio2+0x228>
 800e2d4:	2600      	movs	r6, #0
 800e2d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e2da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2de:	f040 809b 	bne.w	800e418 <__kernel_rem_pio2+0x308>
 800e2e2:	1e62      	subs	r2, r4, #1
 800e2e4:	2000      	movs	r0, #0
 800e2e6:	454a      	cmp	r2, r9
 800e2e8:	da49      	bge.n	800e37e <__kernel_rem_pio2+0x26e>
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	d062      	beq.n	800e3b4 <__kernel_rem_pio2+0x2a4>
 800e2ee:	3c01      	subs	r4, #1
 800e2f0:	ab06      	add	r3, sp, #24
 800e2f2:	3d18      	subs	r5, #24
 800e2f4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d0f8      	beq.n	800e2ee <__kernel_rem_pio2+0x1de>
 800e2fc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e300:	4628      	mov	r0, r5
 800e302:	f000 f981 	bl	800e608 <scalbn>
 800e306:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800e400 <__kernel_rem_pio2+0x2f0>
 800e30a:	1c62      	adds	r2, r4, #1
 800e30c:	a96a      	add	r1, sp, #424	@ 0x1a8
 800e30e:	00d3      	lsls	r3, r2, #3
 800e310:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e314:	4622      	mov	r2, r4
 800e316:	2a00      	cmp	r2, #0
 800e318:	f280 80a8 	bge.w	800e46c <__kernel_rem_pio2+0x35c>
 800e31c:	4622      	mov	r2, r4
 800e31e:	2a00      	cmp	r2, #0
 800e320:	f2c0 80c6 	blt.w	800e4b0 <__kernel_rem_pio2+0x3a0>
 800e324:	a96a      	add	r1, sp, #424	@ 0x1a8
 800e326:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e32a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800e3f8 <__kernel_rem_pio2+0x2e8>
 800e32e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800e414 <__kernel_rem_pio2+0x304>
 800e332:	2000      	movs	r0, #0
 800e334:	1aa1      	subs	r1, r4, r2
 800e336:	e0b0      	b.n	800e49a <__kernel_rem_pio2+0x38a>
 800e338:	2602      	movs	r6, #2
 800e33a:	e78f      	b.n	800e25c <__kernel_rem_pio2+0x14c>
 800e33c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e340:	b948      	cbnz	r0, 800e356 <__kernel_rem_pio2+0x246>
 800e342:	b122      	cbz	r2, 800e34e <__kernel_rem_pio2+0x23e>
 800e344:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800e348:	f843 2c04 	str.w	r2, [r3, #-4]
 800e34c:	2201      	movs	r2, #1
 800e34e:	f10c 0c01 	add.w	ip, ip, #1
 800e352:	4610      	mov	r0, r2
 800e354:	e789      	b.n	800e26a <__kernel_rem_pio2+0x15a>
 800e356:	ebae 0202 	sub.w	r2, lr, r2
 800e35a:	e7f5      	b.n	800e348 <__kernel_rem_pio2+0x238>
 800e35c:	1e62      	subs	r2, r4, #1
 800e35e:	ab06      	add	r3, sp, #24
 800e360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e364:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e368:	a906      	add	r1, sp, #24
 800e36a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e36e:	e784      	b.n	800e27a <__kernel_rem_pio2+0x16a>
 800e370:	1e62      	subs	r2, r4, #1
 800e372:	ab06      	add	r3, sp, #24
 800e374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e378:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e37c:	e7f4      	b.n	800e368 <__kernel_rem_pio2+0x258>
 800e37e:	ab06      	add	r3, sp, #24
 800e380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e384:	3a01      	subs	r2, #1
 800e386:	4318      	orrs	r0, r3
 800e388:	e7ad      	b.n	800e2e6 <__kernel_rem_pio2+0x1d6>
 800e38a:	3301      	adds	r3, #1
 800e38c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e390:	2800      	cmp	r0, #0
 800e392:	d0fa      	beq.n	800e38a <__kernel_rem_pio2+0x27a>
 800e394:	9a04      	ldr	r2, [sp, #16]
 800e396:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800e39a:	446a      	add	r2, sp
 800e39c:	eb04 000b 	add.w	r0, r4, fp
 800e3a0:	a91a      	add	r1, sp, #104	@ 0x68
 800e3a2:	1c66      	adds	r6, r4, #1
 800e3a4:	3a98      	subs	r2, #152	@ 0x98
 800e3a6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800e3aa:	4423      	add	r3, r4
 800e3ac:	42b3      	cmp	r3, r6
 800e3ae:	da04      	bge.n	800e3ba <__kernel_rem_pio2+0x2aa>
 800e3b0:	461c      	mov	r4, r3
 800e3b2:	e713      	b.n	800e1dc <__kernel_rem_pio2+0xcc>
 800e3b4:	9a03      	ldr	r2, [sp, #12]
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e7e8      	b.n	800e38c <__kernel_rem_pio2+0x27c>
 800e3ba:	9902      	ldr	r1, [sp, #8]
 800e3bc:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e3c0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800e3c4:	9104      	str	r1, [sp, #16]
 800e3c6:	ee07 1a90 	vmov	s15, r1
 800e3ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e3ce:	2400      	movs	r4, #0
 800e3d0:	eca0 7b02 	vstmia	r0!, {d7}
 800e3d4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800e3f8 <__kernel_rem_pio2+0x2e8>
 800e3d8:	4686      	mov	lr, r0
 800e3da:	4554      	cmp	r4, sl
 800e3dc:	dd03      	ble.n	800e3e6 <__kernel_rem_pio2+0x2d6>
 800e3de:	eca2 7b02 	vstmia	r2!, {d7}
 800e3e2:	3601      	adds	r6, #1
 800e3e4:	e7e2      	b.n	800e3ac <__kernel_rem_pio2+0x29c>
 800e3e6:	ecbc 5b02 	vldmia	ip!, {d5}
 800e3ea:	ed3e 6b02 	vldmdb	lr!, {d6}
 800e3ee:	3401      	adds	r4, #1
 800e3f0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e3f4:	e7f1      	b.n	800e3da <__kernel_rem_pio2+0x2ca>
 800e3f6:	bf00      	nop
	...
 800e404:	3e700000 	.word	0x3e700000
 800e408:	00000000 	.word	0x00000000
 800e40c:	41700000 	.word	0x41700000
 800e410:	0800f208 	.word	0x0800f208
 800e414:	0800f1c8 	.word	0x0800f1c8
 800e418:	4268      	negs	r0, r5
 800e41a:	eeb0 0b48 	vmov.f64	d0, d8
 800e41e:	f000 f8f3 	bl	800e608 <scalbn>
 800e422:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800e5f0 <__kernel_rem_pio2+0x4e0>
 800e426:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e42e:	db17      	blt.n	800e460 <__kernel_rem_pio2+0x350>
 800e430:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800e5f8 <__kernel_rem_pio2+0x4e8>
 800e434:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e438:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e43c:	aa06      	add	r2, sp, #24
 800e43e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e442:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e446:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e44a:	3518      	adds	r5, #24
 800e44c:	ee10 3a10 	vmov	r3, s0
 800e450:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e454:	ee17 3a10 	vmov	r3, s14
 800e458:	3401      	adds	r4, #1
 800e45a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e45e:	e74d      	b.n	800e2fc <__kernel_rem_pio2+0x1ec>
 800e460:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e464:	aa06      	add	r2, sp, #24
 800e466:	ee10 3a10 	vmov	r3, s0
 800e46a:	e7f6      	b.n	800e45a <__kernel_rem_pio2+0x34a>
 800e46c:	a806      	add	r0, sp, #24
 800e46e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e472:	9001      	str	r0, [sp, #4]
 800e474:	ee07 0a90 	vmov	s15, r0
 800e478:	3a01      	subs	r2, #1
 800e47a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e47e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e482:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e486:	ed21 7b02 	vstmdb	r1!, {d7}
 800e48a:	e744      	b.n	800e316 <__kernel_rem_pio2+0x206>
 800e48c:	ecbc 5b02 	vldmia	ip!, {d5}
 800e490:	ecb5 6b02 	vldmia	r5!, {d6}
 800e494:	3001      	adds	r0, #1
 800e496:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e49a:	4548      	cmp	r0, r9
 800e49c:	dc01      	bgt.n	800e4a2 <__kernel_rem_pio2+0x392>
 800e49e:	4281      	cmp	r1, r0
 800e4a0:	daf4      	bge.n	800e48c <__kernel_rem_pio2+0x37c>
 800e4a2:	a842      	add	r0, sp, #264	@ 0x108
 800e4a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e4a8:	ed81 7b00 	vstr	d7, [r1]
 800e4ac:	3a01      	subs	r2, #1
 800e4ae:	e736      	b.n	800e31e <__kernel_rem_pio2+0x20e>
 800e4b0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e4b2:	2a02      	cmp	r2, #2
 800e4b4:	dc0a      	bgt.n	800e4cc <__kernel_rem_pio2+0x3bc>
 800e4b6:	2a00      	cmp	r2, #0
 800e4b8:	dc2d      	bgt.n	800e516 <__kernel_rem_pio2+0x406>
 800e4ba:	d046      	beq.n	800e54a <__kernel_rem_pio2+0x43a>
 800e4bc:	f008 0007 	and.w	r0, r8, #7
 800e4c0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800e4c4:	ecbd 8b06 	vpop	{d8-d10}
 800e4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4cc:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e4ce:	2a03      	cmp	r2, #3
 800e4d0:	d1f4      	bne.n	800e4bc <__kernel_rem_pio2+0x3ac>
 800e4d2:	a942      	add	r1, sp, #264	@ 0x108
 800e4d4:	f1a3 0208 	sub.w	r2, r3, #8
 800e4d8:	440a      	add	r2, r1
 800e4da:	4611      	mov	r1, r2
 800e4dc:	4620      	mov	r0, r4
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	f1a1 0108 	sub.w	r1, r1, #8
 800e4e4:	dc52      	bgt.n	800e58c <__kernel_rem_pio2+0x47c>
 800e4e6:	4621      	mov	r1, r4
 800e4e8:	2901      	cmp	r1, #1
 800e4ea:	f1a2 0208 	sub.w	r2, r2, #8
 800e4ee:	dc5d      	bgt.n	800e5ac <__kernel_rem_pio2+0x49c>
 800e4f0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800e600 <__kernel_rem_pio2+0x4f0>
 800e4f4:	aa42      	add	r2, sp, #264	@ 0x108
 800e4f6:	4413      	add	r3, r2
 800e4f8:	2c01      	cmp	r4, #1
 800e4fa:	dc67      	bgt.n	800e5cc <__kernel_rem_pio2+0x4bc>
 800e4fc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800e500:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800e504:	2e00      	cmp	r6, #0
 800e506:	d167      	bne.n	800e5d8 <__kernel_rem_pio2+0x4c8>
 800e508:	ed87 5b00 	vstr	d5, [r7]
 800e50c:	ed87 6b02 	vstr	d6, [r7, #8]
 800e510:	ed87 7b04 	vstr	d7, [r7, #16]
 800e514:	e7d2      	b.n	800e4bc <__kernel_rem_pio2+0x3ac>
 800e516:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800e600 <__kernel_rem_pio2+0x4f0>
 800e51a:	aa42      	add	r2, sp, #264	@ 0x108
 800e51c:	4413      	add	r3, r2
 800e51e:	4622      	mov	r2, r4
 800e520:	2a00      	cmp	r2, #0
 800e522:	da24      	bge.n	800e56e <__kernel_rem_pio2+0x45e>
 800e524:	b34e      	cbz	r6, 800e57a <__kernel_rem_pio2+0x46a>
 800e526:	eeb1 7b46 	vneg.f64	d7, d6
 800e52a:	ed87 7b00 	vstr	d7, [r7]
 800e52e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800e532:	aa44      	add	r2, sp, #272	@ 0x110
 800e534:	2301      	movs	r3, #1
 800e536:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e53a:	429c      	cmp	r4, r3
 800e53c:	da20      	bge.n	800e580 <__kernel_rem_pio2+0x470>
 800e53e:	b10e      	cbz	r6, 800e544 <__kernel_rem_pio2+0x434>
 800e540:	eeb1 7b47 	vneg.f64	d7, d7
 800e544:	ed87 7b02 	vstr	d7, [r7, #8]
 800e548:	e7b8      	b.n	800e4bc <__kernel_rem_pio2+0x3ac>
 800e54a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800e600 <__kernel_rem_pio2+0x4f0>
 800e54e:	aa42      	add	r2, sp, #264	@ 0x108
 800e550:	4413      	add	r3, r2
 800e552:	2c00      	cmp	r4, #0
 800e554:	da05      	bge.n	800e562 <__kernel_rem_pio2+0x452>
 800e556:	b10e      	cbz	r6, 800e55c <__kernel_rem_pio2+0x44c>
 800e558:	eeb1 7b47 	vneg.f64	d7, d7
 800e55c:	ed87 7b00 	vstr	d7, [r7]
 800e560:	e7ac      	b.n	800e4bc <__kernel_rem_pio2+0x3ac>
 800e562:	ed33 6b02 	vldmdb	r3!, {d6}
 800e566:	3c01      	subs	r4, #1
 800e568:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e56c:	e7f1      	b.n	800e552 <__kernel_rem_pio2+0x442>
 800e56e:	ed33 7b02 	vldmdb	r3!, {d7}
 800e572:	3a01      	subs	r2, #1
 800e574:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e578:	e7d2      	b.n	800e520 <__kernel_rem_pio2+0x410>
 800e57a:	eeb0 7b46 	vmov.f64	d7, d6
 800e57e:	e7d4      	b.n	800e52a <__kernel_rem_pio2+0x41a>
 800e580:	ecb2 6b02 	vldmia	r2!, {d6}
 800e584:	3301      	adds	r3, #1
 800e586:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e58a:	e7d6      	b.n	800e53a <__kernel_rem_pio2+0x42a>
 800e58c:	ed91 7b00 	vldr	d7, [r1]
 800e590:	ed91 5b02 	vldr	d5, [r1, #8]
 800e594:	3801      	subs	r0, #1
 800e596:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e59a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e59e:	ed81 6b00 	vstr	d6, [r1]
 800e5a2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e5a6:	ed81 7b02 	vstr	d7, [r1, #8]
 800e5aa:	e798      	b.n	800e4de <__kernel_rem_pio2+0x3ce>
 800e5ac:	ed92 7b00 	vldr	d7, [r2]
 800e5b0:	ed92 5b02 	vldr	d5, [r2, #8]
 800e5b4:	3901      	subs	r1, #1
 800e5b6:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e5ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e5be:	ed82 6b00 	vstr	d6, [r2]
 800e5c2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e5c6:	ed82 7b02 	vstr	d7, [r2, #8]
 800e5ca:	e78d      	b.n	800e4e8 <__kernel_rem_pio2+0x3d8>
 800e5cc:	ed33 6b02 	vldmdb	r3!, {d6}
 800e5d0:	3c01      	subs	r4, #1
 800e5d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e5d6:	e78f      	b.n	800e4f8 <__kernel_rem_pio2+0x3e8>
 800e5d8:	eeb1 5b45 	vneg.f64	d5, d5
 800e5dc:	eeb1 6b46 	vneg.f64	d6, d6
 800e5e0:	ed87 5b00 	vstr	d5, [r7]
 800e5e4:	eeb1 7b47 	vneg.f64	d7, d7
 800e5e8:	ed87 6b02 	vstr	d6, [r7, #8]
 800e5ec:	e790      	b.n	800e510 <__kernel_rem_pio2+0x400>
 800e5ee:	bf00      	nop
 800e5f0:	00000000 	.word	0x00000000
 800e5f4:	41700000 	.word	0x41700000
 800e5f8:	00000000 	.word	0x00000000
 800e5fc:	3e700000 	.word	0x3e700000
	...

0800e608 <scalbn>:
 800e608:	ee10 1a90 	vmov	r1, s1
 800e60c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e610:	b98b      	cbnz	r3, 800e636 <scalbn+0x2e>
 800e612:	ee10 3a10 	vmov	r3, s0
 800e616:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e61a:	4319      	orrs	r1, r3
 800e61c:	d00a      	beq.n	800e634 <scalbn+0x2c>
 800e61e:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e6d0 <scalbn+0xc8>
 800e622:	4b37      	ldr	r3, [pc, #220]	@ (800e700 <scalbn+0xf8>)
 800e624:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e628:	4298      	cmp	r0, r3
 800e62a:	da0b      	bge.n	800e644 <scalbn+0x3c>
 800e62c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e6d8 <scalbn+0xd0>
 800e630:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e634:	4770      	bx	lr
 800e636:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d107      	bne.n	800e64e <scalbn+0x46>
 800e63e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e642:	4770      	bx	lr
 800e644:	ee10 1a90 	vmov	r1, s1
 800e648:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e64c:	3b36      	subs	r3, #54	@ 0x36
 800e64e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e652:	4290      	cmp	r0, r2
 800e654:	dd0d      	ble.n	800e672 <scalbn+0x6a>
 800e656:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e6e0 <scalbn+0xd8>
 800e65a:	ee10 3a90 	vmov	r3, s1
 800e65e:	eeb0 6b47 	vmov.f64	d6, d7
 800e662:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800e6e8 <scalbn+0xe0>
 800e666:	2b00      	cmp	r3, #0
 800e668:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e66c:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e670:	4770      	bx	lr
 800e672:	4418      	add	r0, r3
 800e674:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800e678:	4298      	cmp	r0, r3
 800e67a:	dcec      	bgt.n	800e656 <scalbn+0x4e>
 800e67c:	2800      	cmp	r0, #0
 800e67e:	dd0a      	ble.n	800e696 <scalbn+0x8e>
 800e680:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800e684:	ec53 2b10 	vmov	r2, r3, d0
 800e688:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800e68c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e690:	ec43 2b10 	vmov	d0, r2, r3
 800e694:	4770      	bx	lr
 800e696:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800e69a:	da09      	bge.n	800e6b0 <scalbn+0xa8>
 800e69c:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800e6d8 <scalbn+0xd0>
 800e6a0:	ee10 3a90 	vmov	r3, s1
 800e6a4:	eeb0 6b47 	vmov.f64	d6, d7
 800e6a8:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800e6f0 <scalbn+0xe8>
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	e7db      	b.n	800e668 <scalbn+0x60>
 800e6b0:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800e6b4:	ec53 2b10 	vmov	r2, r3, d0
 800e6b8:	3036      	adds	r0, #54	@ 0x36
 800e6ba:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800e6be:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e6c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e6f8 <scalbn+0xf0>
 800e6c6:	ec43 2b10 	vmov	d0, r2, r3
 800e6ca:	e7b1      	b.n	800e630 <scalbn+0x28>
 800e6cc:	f3af 8000 	nop.w
 800e6d0:	00000000 	.word	0x00000000
 800e6d4:	43500000 	.word	0x43500000
 800e6d8:	c2f8f359 	.word	0xc2f8f359
 800e6dc:	01a56e1f 	.word	0x01a56e1f
 800e6e0:	8800759c 	.word	0x8800759c
 800e6e4:	7e37e43c 	.word	0x7e37e43c
 800e6e8:	8800759c 	.word	0x8800759c
 800e6ec:	fe37e43c 	.word	0xfe37e43c
 800e6f0:	c2f8f359 	.word	0xc2f8f359
 800e6f4:	81a56e1f 	.word	0x81a56e1f
 800e6f8:	00000000 	.word	0x00000000
 800e6fc:	3c900000 	.word	0x3c900000
 800e700:	ffff3cb0 	.word	0xffff3cb0
 800e704:	00000000 	.word	0x00000000

0800e708 <floor>:
 800e708:	ee10 3a90 	vmov	r3, s1
 800e70c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800e710:	ee10 2a10 	vmov	r2, s0
 800e714:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800e718:	2913      	cmp	r1, #19
 800e71a:	b530      	push	{r4, r5, lr}
 800e71c:	4615      	mov	r5, r2
 800e71e:	dc33      	bgt.n	800e788 <floor+0x80>
 800e720:	2900      	cmp	r1, #0
 800e722:	da18      	bge.n	800e756 <floor+0x4e>
 800e724:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800e7e8 <floor+0xe0>
 800e728:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e72c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e734:	dd0a      	ble.n	800e74c <floor+0x44>
 800e736:	2b00      	cmp	r3, #0
 800e738:	da50      	bge.n	800e7dc <floor+0xd4>
 800e73a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e73e:	4313      	orrs	r3, r2
 800e740:	2200      	movs	r2, #0
 800e742:	4293      	cmp	r3, r2
 800e744:	4b2a      	ldr	r3, [pc, #168]	@ (800e7f0 <floor+0xe8>)
 800e746:	bf08      	it	eq
 800e748:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e74c:	4619      	mov	r1, r3
 800e74e:	4610      	mov	r0, r2
 800e750:	ec41 0b10 	vmov	d0, r0, r1
 800e754:	e01f      	b.n	800e796 <floor+0x8e>
 800e756:	4827      	ldr	r0, [pc, #156]	@ (800e7f4 <floor+0xec>)
 800e758:	4108      	asrs	r0, r1
 800e75a:	ea03 0400 	and.w	r4, r3, r0
 800e75e:	4314      	orrs	r4, r2
 800e760:	d019      	beq.n	800e796 <floor+0x8e>
 800e762:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e7e8 <floor+0xe0>
 800e766:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e76a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e76e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e772:	ddeb      	ble.n	800e74c <floor+0x44>
 800e774:	2b00      	cmp	r3, #0
 800e776:	bfbe      	ittt	lt
 800e778:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800e77c:	410a      	asrlt	r2, r1
 800e77e:	189b      	addlt	r3, r3, r2
 800e780:	ea23 0300 	bic.w	r3, r3, r0
 800e784:	2200      	movs	r2, #0
 800e786:	e7e1      	b.n	800e74c <floor+0x44>
 800e788:	2933      	cmp	r1, #51	@ 0x33
 800e78a:	dd05      	ble.n	800e798 <floor+0x90>
 800e78c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e790:	d101      	bne.n	800e796 <floor+0x8e>
 800e792:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e796:	bd30      	pop	{r4, r5, pc}
 800e798:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800e79c:	f04f 30ff 	mov.w	r0, #4294967295
 800e7a0:	40e0      	lsrs	r0, r4
 800e7a2:	4210      	tst	r0, r2
 800e7a4:	d0f7      	beq.n	800e796 <floor+0x8e>
 800e7a6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e7e8 <floor+0xe0>
 800e7aa:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e7ae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b6:	ddc9      	ble.n	800e74c <floor+0x44>
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	da02      	bge.n	800e7c2 <floor+0xba>
 800e7bc:	2914      	cmp	r1, #20
 800e7be:	d103      	bne.n	800e7c8 <floor+0xc0>
 800e7c0:	3301      	adds	r3, #1
 800e7c2:	ea22 0200 	bic.w	r2, r2, r0
 800e7c6:	e7c1      	b.n	800e74c <floor+0x44>
 800e7c8:	2401      	movs	r4, #1
 800e7ca:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800e7ce:	fa04 f101 	lsl.w	r1, r4, r1
 800e7d2:	440a      	add	r2, r1
 800e7d4:	42aa      	cmp	r2, r5
 800e7d6:	bf38      	it	cc
 800e7d8:	191b      	addcc	r3, r3, r4
 800e7da:	e7f2      	b.n	800e7c2 <floor+0xba>
 800e7dc:	2200      	movs	r2, #0
 800e7de:	4613      	mov	r3, r2
 800e7e0:	e7b4      	b.n	800e74c <floor+0x44>
 800e7e2:	bf00      	nop
 800e7e4:	f3af 8000 	nop.w
 800e7e8:	8800759c 	.word	0x8800759c
 800e7ec:	7e37e43c 	.word	0x7e37e43c
 800e7f0:	bff00000 	.word	0xbff00000
 800e7f4:	000fffff 	.word	0x000fffff

0800e7f8 <_init>:
 800e7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fa:	bf00      	nop
 800e7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7fe:	bc08      	pop	{r3}
 800e800:	469e      	mov	lr, r3
 800e802:	4770      	bx	lr

0800e804 <_fini>:
 800e804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e806:	bf00      	nop
 800e808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e80a:	bc08      	pop	{r3}
 800e80c:	469e      	mov	lr, r3
 800e80e:	4770      	bx	lr
