
WRAP_RX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b308  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b5b4  0800b5b4  0000c5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b5f4  0800b5f4  0000c5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b5fc  0800b5fc  0000c5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b600  0800b600  0000c600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800b604  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b00  24000010  0800b614  0000d010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000b10  0800b614  0000db10  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000158a2  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002806  00000000  00000000  000228e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000fc8  00000000  00000000  000250e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c2b  00000000  00000000  000260b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003121f  00000000  00000000  00026cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001593e  00000000  00000000  00057efa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00147175  00000000  00000000  0006d838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b49ad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000042e8  00000000  00000000  001b49f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001b8cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800b59c 	.word	0x0800b59c

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800b59c 	.word	0x0800b59c

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e0:	f000 faf8 	bl	8000bd4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fd5a 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f81a 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 fa24 	bl	8000a38 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f0:	f000 fa02 	bl	80009f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80005f4:	f000 f8d6 	bl	80007a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f8:	f000 f952 	bl	80008a0 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 80005fc:	f000 f9b0 	bl	8000960 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
	HAL_ADC_Start(&hadc2);
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <main+0x38>)
 8000602:	f001 f967 	bl	80018d4 <HAL_ADC_Start>

	// Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
	HAL_ADCEx_MultiModeStart_DMA(&hadc1,(uint32_t*)adcbuf,ADC_BUF_SIZE);
 8000606:	2240      	movs	r2, #64	@ 0x40
 8000608:	4903      	ldr	r1, [pc, #12]	@ (8000618 <main+0x3c>)
 800060a:	4804      	ldr	r0, [pc, #16]	@ (800061c <main+0x40>)
 800060c:	f002 f846 	bl	800269c <HAL_ADCEx_MultiModeStart_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <main+0x34>
 8000614:	24000090 	.word	0x24000090
 8000618:	24000a00 	.word	0x24000a00
 800061c:	2400002c 	.word	0x2400002c

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b0a4      	sub	sp, #144	@ 0x90
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800062a:	224c      	movs	r2, #76	@ 0x4c
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00a ff88 	bl	800b544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000638:	2220      	movs	r2, #32
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f00a ff81 	bl	800b544 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]
 8000652:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000654:	4b51      	ldr	r3, [pc, #324]	@ (800079c <SystemClock_Config+0x17c>)
 8000656:	f04f 32ff 	mov.w	r2, #4294967295
 800065a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800065e:	2004      	movs	r0, #4
 8000660:	f005 fc76 	bl	8005f50 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b4d      	ldr	r3, [pc, #308]	@ (80007a0 <SystemClock_Config+0x180>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a4c      	ldr	r2, [pc, #304]	@ (80007a0 <SystemClock_Config+0x180>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b4a      	ldr	r3, [pc, #296]	@ (80007a0 <SystemClock_Config+0x180>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000680:	bf00      	nop
 8000682:	4b47      	ldr	r3, [pc, #284]	@ (80007a0 <SystemClock_Config+0x180>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068e:	d1f8      	bne.n	8000682 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000690:	f005 fc4e 	bl	8005f30 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000694:	4b41      	ldr	r3, [pc, #260]	@ (800079c <SystemClock_Config+0x17c>)
 8000696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000698:	4a40      	ldr	r2, [pc, #256]	@ (800079c <SystemClock_Config+0x17c>)
 800069a:	f023 0318 	bic.w	r3, r3, #24
 800069e:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006a0:	2327      	movs	r3, #39	@ 0x27
 80006a2:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006aa:	2301      	movs	r3, #1
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006b2:	2340      	movs	r3, #64	@ 0x40
 80006b4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b6:	2301      	movs	r3, #1
 80006b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006be:	2302      	movs	r3, #2
 80006c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80006c6:	2346      	movs	r3, #70	@ 0x46
 80006c8:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d8:	230c      	movs	r3, #12
 80006da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 fc88 	bl	8006004 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xde>
  {
    Error_Handler();
 80006fa:	f000 fa97 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	233f      	movs	r3, #63	@ 0x3f
 8000700:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800070e:	2340      	movs	r3, #64	@ 0x40
 8000710:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000712:	2340      	movs	r3, #64	@ 0x40
 8000714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800071c:	2340      	movs	r3, #64	@ 0x40
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000724:	2106      	movs	r1, #6
 8000726:	4618      	mov	r0, r3
 8000728:	f006 f89e 	bl	8006868 <HAL_RCC_ClockConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000732:	f000 fa7b 	bl	8000c2c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000736:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800073a:	2100      	movs	r1, #0
 800073c:	2000      	movs	r0, #0
 800073e:	f006 fa49 	bl	8006bd4 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000742:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000746:	2100      	movs	r1, #0
 8000748:	2001      	movs	r0, #1
 800074a:	f006 fa43 	bl	8006bd4 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800074e:	4b13      	ldr	r3, [pc, #76]	@ (800079c <SystemClock_Config+0x17c>)
 8000750:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000754:	4a11      	ldr	r2, [pc, #68]	@ (800079c <SystemClock_Config+0x17c>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <SystemClock_Config+0x17c>)
 8000760:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000770:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000774:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800077a:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000780:	2322      	movs	r3, #34	@ 0x22
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000784:	2320      	movs	r3, #32
 8000786:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	4618      	mov	r0, r3
 800078e:	f008 ff07 	bl	80095a0 <HAL_RCCEx_CRSConfig>
}
 8000792:	bf00      	nop
 8000794:	3790      	adds	r7, #144	@ 0x90
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	58024400 	.word	0x58024400
 80007a0:	58024800 	.word	0x58024800

080007a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007b6:	463b      	mov	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007c8:	4b32      	ldr	r3, [pc, #200]	@ (8000894 <MX_ADC1_Init+0xf0>)
 80007ca:	4a33      	ldr	r2, [pc, #204]	@ (8000898 <MX_ADC1_Init+0xf4>)
 80007cc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007ce:	4b31      	ldr	r3, [pc, #196]	@ (8000894 <MX_ADC1_Init+0xf0>)
 80007d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xf0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007dc:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xf0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000894 <MX_ADC1_Init+0xf0>)
 80007e4:	2204      	movs	r2, #4
 80007e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xf0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ee:	4b29      	ldr	r3, [pc, #164]	@ (8000894 <MX_ADC1_Init+0xf0>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007f4:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xf0>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_ADC1_Init+0xf0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000800:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xf0>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <MX_ADC1_Init+0xf0>)
 8000808:	2200      	movs	r2, #0
 800080a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800080c:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xf0>)
 800080e:	2200      	movs	r2, #0
 8000810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000812:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <MX_ADC1_Init+0xf0>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xf0>)
 800081a:	2200      	movs	r2, #0
 800081c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800081e:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <MX_ADC1_Init+0xf0>)
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000826:	481b      	ldr	r0, [pc, #108]	@ (8000894 <MX_ADC1_Init+0xf0>)
 8000828:	f000 fefa 	bl	8001620 <HAL_ADC_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000832:	f000 f9fb 	bl	8000c2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000836:	2307      	movs	r3, #7
 8000838:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 800083a:	2300      	movs	r3, #0
 800083c:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_3CYCLES;
 800083e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xf0>)
 800084c:	f002 f8be 	bl	80029cc <HAL_ADCEx_MultiModeConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000856:	f000 f9e9 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800085a:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf8>)
 800085c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085e:	2306      	movs	r3, #6
 8000860:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000866:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800086a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086c:	2304      	movs	r3, #4
 800086e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	4619      	mov	r1, r3
 800087c:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_ADC1_Init+0xf0>)
 800087e:	f001 f8ed 	bl	8001a5c <HAL_ADC_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000888:	f000 f9d0 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088c:	bf00      	nop
 800088e:	3728      	adds	r7, #40	@ 0x28
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2400002c 	.word	0x2400002c
 8000898:	40022000 	.word	0x40022000
 800089c:	0c900008 	.word	0x0c900008

080008a0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008b8:	4b26      	ldr	r3, [pc, #152]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008ba:	4a27      	ldr	r2, [pc, #156]	@ (8000958 <MX_ADC2_Init+0xb8>)
 80008bc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008be:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008c4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80008c6:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008cc:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008d4:	2204      	movs	r2, #4
 80008d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008de:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008f0:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f6:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_ADC2_Init+0xb4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_ADC2_Init+0xb4>)
 8000904:	2200      	movs	r2, #0
 8000906:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800090a:	4812      	ldr	r0, [pc, #72]	@ (8000954 <MX_ADC2_Init+0xb4>)
 800090c:	f000 fe88 	bl	8001620 <HAL_ADC_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC2_Init+0x7a>
  {
    Error_Handler();
 8000916:	f000 f989 	bl	8000c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800091a:	4b10      	ldr	r3, [pc, #64]	@ (800095c <MX_ADC2_Init+0xbc>)
 800091c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091e:	2306      	movs	r3, #6
 8000920:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000926:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800092a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092c:	2304      	movs	r3, #4
 800092e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	4619      	mov	r1, r3
 800093c:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_ADC2_Init+0xb4>)
 800093e:	f001 f88d 	bl	8001a5c <HAL_ADC_ConfigChannel>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000948:	f000 f970 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	24000090 	.word	0x24000090
 8000958:	40022100 	.word	0x40022100
 800095c:	0c900008 	.word	0x0c900008

08000960 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000964:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000966:	4a23      	ldr	r2, [pc, #140]	@ (80009f4 <MX_USART3_UART_Init+0x94>)
 8000968:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800096a:	4b21      	ldr	r3, [pc, #132]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800096c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000970:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800097a:	2200      	movs	r2, #0
 800097c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800097e:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000980:	2200      	movs	r2, #0
 8000982:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000984:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000986:	220c      	movs	r2, #12
 8000988:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000990:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000992:	2200      	movs	r2, #0
 8000994:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 8000998:	2200      	movs	r2, #0
 800099a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 800099e:	2200      	movs	r2, #0
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009a8:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009aa:	f008 ffb3 	bl	8009914 <HAL_UART_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009b4:	f000 f93a 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009bc:	f00a fcf8 	bl	800b3b0 <HAL_UARTEx_SetTxFifoThreshold>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009c6:	f000 f931 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4808      	ldr	r0, [pc, #32]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009ce:	f00a fd2d 	bl	800b42c <HAL_UARTEx_SetRxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009d8:	f000 f928 	bl	8000c2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <MX_USART3_UART_Init+0x90>)
 80009de:	f00a fcae 	bl	800b33e <HAL_UARTEx_DisableFifoMode>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f000 f920 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2400016c 	.word	0x2400016c
 80009f4:	40004800 	.word	0x40004800

080009f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000a34 <MX_DMA_Init+0x3c>)
 8000a00:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a04:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <MX_DMA_Init+0x3c>)
 8000a06:	f043 0301 	orr.w	r3, r3, #1
 8000a0a:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_DMA_Init+0x3c>)
 8000a10:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2100      	movs	r1, #0
 8000a20:	200b      	movs	r0, #11
 8000a22:	f002 f94a 	bl	8002cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a26:	200b      	movs	r0, #11
 8000a28:	f002 f961 	bl	8002cee <HAL_NVIC_EnableIRQ>

}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	58024400 	.word	0x58024400

08000a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b31      	ldr	r3, [pc, #196]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a54:	4a2f      	ldr	r2, [pc, #188]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000a60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6c:	4b29      	ldr	r3, [pc, #164]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000a6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a72:	4a28      	ldr	r2, [pc, #160]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a7c:	4b25      	ldr	r3, [pc, #148]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000a7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000a8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a90:	4a20      	ldr	r2, [pc, #128]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000a92:	f043 0301 	orr.w	r3, r3, #1
 8000a96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000a9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000aaa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aae:	4a19      	ldr	r2, [pc, #100]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <MX_GPIO_Init+0xdc>)
 8000aba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000abe:	f003 0308 	and.w	r3, r3, #8
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ac6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480d      	ldr	r0, [pc, #52]	@ (8000b18 <MX_GPIO_Init+0xe0>)
 8000ae4:	f005 f874 	bl	8005bd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000afa:	2300      	movs	r3, #0
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_GPIO_Init+0xe4>)
 8000b06:	f005 f863 	bl	8005bd0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	@ 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	58024400 	.word	0x58024400
 8000b18:	58020800 	.word	0x58020800
 8000b1c:	58020000 	.word	0x58020000

08000b20 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  // copies ADC/DMA temp buffer into sample buffer
  for(int j = 0; j < ADC_BUF_SIZE/2; j++)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	e010      	b.n	8000b50 <HAL_ADC_ConvHalfCpltCallback+0x30>
  {
	  samples[i] = adcbuf[j];
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	490d      	ldr	r1, [pc, #52]	@ (8000b68 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b3a:	490c      	ldr	r1, [pc, #48]	@ (8000b6c <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 8000b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  i++;
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a07      	ldr	r2, [pc, #28]	@ (8000b64 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000b48:	6013      	str	r3, [r2, #0]
  for(int j = 0; j < ADC_BUF_SIZE/2; j++)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2b1f      	cmp	r3, #31
 8000b54:	ddeb      	ble.n	8000b2e <HAL_ADC_ConvHalfCpltCallback+0xe>
  }
}
 8000b56:	bf00      	nop
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	24000b00 	.word	0x24000b00
 8000b68:	24000a00 	.word	0x24000a00
 8000b6c:	24000200 	.word	0x24000200

08000b70 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  // copies ADC/DMA temp buffer into sample buffer
  for(int j = ADC_BUF_SIZE/2; j < ADC_BUF_SIZE; j++)
 8000b78:	2320      	movs	r3, #32
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	e010      	b.n	8000ba0 <HAL_ADC_ConvCpltCallback+0x30>
  {
    samples[i] = adcbuf[j];
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4911      	ldr	r1, [pc, #68]	@ (8000bc8 <HAL_ADC_ConvCpltCallback+0x58>)
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b8a:	4910      	ldr	r1, [pc, #64]	@ (8000bcc <HAL_ADC_ConvCpltCallback+0x5c>)
 8000b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    i++;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000b98:	6013      	str	r3, [r2, #0]
  for(int j = ADC_BUF_SIZE/2; j < ADC_BUF_SIZE; j++)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ba4:	ddeb      	ble.n	8000b7e <HAL_ADC_ConvCpltCallback+0xe>
  }

  // if enough samples taken, stops ADC and DMA
  if(i >= SAMPLE_BUF_MULTIPLE * ADC_BUF_SIZE)
 8000ba6:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <HAL_ADC_ConvCpltCallback+0x54>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bae:	d305      	bcc.n	8000bbc <HAL_ADC_ConvCpltCallback+0x4c>
  {
	  adcflag = SET;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <HAL_ADC_ConvCpltCallback+0x60>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
	  HAL_ADCEx_MultiModeStop_DMA(hadc);
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f001 fe40 	bl	800283c <HAL_ADCEx_MultiModeStop_DMA>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000b00 	.word	0x24000b00
 8000bc8:	24000a00 	.word	0x24000a00
 8000bcc:	24000200 	.word	0x24000200
 8000bd0:	24000b04 	.word	0x24000b04

08000bd4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000be6:	f002 f89d 	bl	8002d24 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bea:	2301      	movs	r3, #1
 8000bec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bf6:	231f      	movs	r3, #31
 8000bf8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bfa:	2387      	movs	r3, #135	@ 0x87
 8000bfc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c02:	2300      	movs	r3, #0
 8000c04:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c06:	2301      	movs	r3, #1
 8000c08:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c16:	463b      	mov	r3, r7
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f002 f8bb 	bl	8002d94 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c1e:	2004      	movs	r0, #4
 8000c20:	f002 f898 	bl	8002d54 <HAL_MPU_Enable>

}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <Error_Handler+0x8>

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <HAL_MspInit+0x30>)
 8000c40:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c44:	4a08      	ldr	r2, [pc, #32]	@ (8000c68 <HAL_MspInit+0x30>)
 8000c46:	f043 0302 	orr.w	r3, r3, #2
 8000c4a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000c4e:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_MspInit+0x30>)
 8000c50:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000c54:	f003 0302 	and.w	r3, r3, #2
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	58024400 	.word	0x58024400

08000c6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	@ 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a51      	ldr	r2, [pc, #324]	@ (8000dd0 <HAL_ADC_MspInit+0x164>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d163      	bne.n	8000d56 <HAL_ADC_MspInit+0xea>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c8e:	4b51      	ldr	r3, [pc, #324]	@ (8000dd4 <HAL_ADC_MspInit+0x168>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	3301      	adds	r3, #1
 8000c94:	4a4f      	ldr	r2, [pc, #316]	@ (8000dd4 <HAL_ADC_MspInit+0x168>)
 8000c96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c98:	4b4e      	ldr	r3, [pc, #312]	@ (8000dd4 <HAL_ADC_MspInit+0x168>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d10e      	bne.n	8000cbe <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000ca2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ca6:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000ca8:	f043 0320 	orr.w	r3, r3, #32
 8000cac:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000cb0:	4b49      	ldr	r3, [pc, #292]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000cb2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	4b46      	ldr	r3, [pc, #280]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000cc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cc4:	4a44      	ldr	r2, [pc, #272]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000cce:	4b42      	ldr	r3, [pc, #264]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000cd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cdc:	2340      	movs	r3, #64	@ 0x40
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 031c 	add.w	r3, r7, #28
 8000cec:	4619      	mov	r1, r3
 8000cee:	483b      	ldr	r0, [pc, #236]	@ (8000ddc <HAL_ADC_MspInit+0x170>)
 8000cf0:	f004 ff6e 	bl	8005bd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000cf6:	4a3b      	ldr	r2, [pc, #236]	@ (8000de4 <HAL_ADC_MspInit+0x178>)
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000cfa:	4b39      	ldr	r3, [pc, #228]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000cfc:	2209      	movs	r2, #9
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b36      	ldr	r3, [pc, #216]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b34      	ldr	r3, [pc, #208]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d12:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d14:	4b32      	ldr	r3, [pc, #200]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d1a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d1c:	4b30      	ldr	r3, [pc, #192]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d24:	4b2e      	ldr	r3, [pc, #184]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d2a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d32:	4b2b      	ldr	r3, [pc, #172]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d38:	4829      	ldr	r0, [pc, #164]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d3a:	f002 f86b 	bl	8002e14 <HAL_DMA_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8000d44:	f7ff ff72 	bl	8000c2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a25      	ldr	r2, [pc, #148]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d4c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d4e:	4a24      	ldr	r2, [pc, #144]	@ (8000de0 <HAL_ADC_MspInit+0x174>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000d54:	e037      	b.n	8000dc6 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a23      	ldr	r2, [pc, #140]	@ (8000de8 <HAL_ADC_MspInit+0x17c>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d132      	bne.n	8000dc6 <HAL_ADC_MspInit+0x15a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d60:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <HAL_ADC_MspInit+0x168>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3301      	adds	r3, #1
 8000d66:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd4 <HAL_ADC_MspInit+0x168>)
 8000d68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <HAL_ADC_MspInit+0x168>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d10e      	bne.n	8000d90 <HAL_ADC_MspInit+0x124>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d72:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000d74:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d78:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000d7a:	f043 0320 	orr.w	r3, r3, #32
 8000d7e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000d82:	4b15      	ldr	r3, [pc, #84]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000d84:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d88:	f003 0320 	and.w	r3, r3, #32
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000d92:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d96:	4a10      	ldr	r2, [pc, #64]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000da0:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <HAL_ADC_MspInit+0x16c>)
 8000da2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dae:	2340      	movs	r3, #64	@ 0x40
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <HAL_ADC_MspInit+0x170>)
 8000dc2:	f004 ff05 	bl	8005bd0 <HAL_GPIO_Init>
}
 8000dc6:	bf00      	nop
 8000dc8:	3730      	adds	r7, #48	@ 0x30
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000
 8000dd4:	24000b08 	.word	0x24000b08
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020000 	.word	0x58020000
 8000de0:	240000f4 	.word	0x240000f4
 8000de4:	40020010 	.word	0x40020010
 8000de8:	40022100 	.word	0x40022100

08000dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0ba      	sub	sp, #232	@ 0xe8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e04:	f107 0310 	add.w	r3, r7, #16
 8000e08:	22c0      	movs	r2, #192	@ 0xc0
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00a fb99 	bl	800b544 <memset>
  if(huart->Instance==USART3)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a2b      	ldr	r2, [pc, #172]	@ (8000ec4 <HAL_UART_MspInit+0xd8>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d14e      	bne.n	8000eba <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e1c:	f04f 0202 	mov.w	r2, #2
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	f107 0310 	add.w	r3, r7, #16
 8000e32:	4618      	mov	r0, r3
 8000e34:	f006 f90e 	bl	8007054 <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e3e:	f7ff fef5 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e42:	4b21      	ldr	r3, [pc, #132]	@ (8000ec8 <HAL_UART_MspInit+0xdc>)
 8000e44:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e48:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec8 <HAL_UART_MspInit+0xdc>)
 8000e4a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e4e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8000e52:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <HAL_UART_MspInit+0xdc>)
 8000e54:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8000e58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e60:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_UART_MspInit+0xdc>)
 8000e62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e66:	4a18      	ldr	r2, [pc, #96]	@ (8000ec8 <HAL_UART_MspInit+0xdc>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e70:	4b15      	ldr	r3, [pc, #84]	@ (8000ec8 <HAL_UART_MspInit+0xdc>)
 8000e72:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e76:	f003 0308 	and.w	r3, r3, #8
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e7e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e98:	2307      	movs	r3, #7
 8000e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4809      	ldr	r0, [pc, #36]	@ (8000ecc <HAL_UART_MspInit+0xe0>)
 8000ea6:	f004 fe93 	bl	8005bd0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2027      	movs	r0, #39	@ 0x27
 8000eb0:	f001 ff03 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eb4:	2027      	movs	r0, #39	@ 0x27
 8000eb6:	f001 ff1a 	bl	8002cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eba:	bf00      	nop
 8000ebc:	37e8      	adds	r7, #232	@ 0xe8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004800 	.word	0x40004800
 8000ec8:	58024400 	.word	0x58024400
 8000ecc:	58020c00 	.word	0x58020c00

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f26:	f000 f92b 	bl	8001180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <DMA1_Stream0_IRQHandler+0x10>)
 8000f36:	f003 fac9 	bl	80044cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	240000f4 	.word	0x240000f4

08000f44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f48:	4802      	ldr	r0, [pc, #8]	@ (8000f54 <USART3_IRQHandler+0x10>)
 8000f4a:	f008 fd33 	bl	80099b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2400016c 	.word	0x2400016c

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b32      	ldr	r3, [pc, #200]	@ (8001028 <SystemInit+0xd0>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f62:	4a31      	ldr	r2, [pc, #196]	@ (8001028 <SystemInit+0xd0>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800102c <SystemInit+0xd4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d807      	bhi.n	8000f88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f78:	4b2c      	ldr	r3, [pc, #176]	@ (800102c <SystemInit+0xd4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f023 030f 	bic.w	r3, r3, #15
 8000f80:	4a2a      	ldr	r2, [pc, #168]	@ (800102c <SystemInit+0xd4>)
 8000f82:	f043 0303 	orr.w	r3, r3, #3
 8000f86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <SystemInit+0xd8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a28      	ldr	r2, [pc, #160]	@ (8001030 <SystemInit+0xd8>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f94:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <SystemInit+0xd8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <SystemInit+0xd8>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4924      	ldr	r1, [pc, #144]	@ (8001030 <SystemInit+0xd8>)
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <SystemInit+0xdc>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fa6:	4b21      	ldr	r3, [pc, #132]	@ (800102c <SystemInit+0xd4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 030c 	and.w	r3, r3, #12
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <SystemInit+0xd4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 030f 	bic.w	r3, r3, #15
 8000fba:	4a1c      	ldr	r2, [pc, #112]	@ (800102c <SystemInit+0xd4>)
 8000fbc:	f043 0303 	orr.w	r3, r3, #3
 8000fc0:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001030 <SystemInit+0xd8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000fc8:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <SystemInit+0xd8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000fce:	4b18      	ldr	r3, [pc, #96]	@ (8001030 <SystemInit+0xd8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	@ (8001030 <SystemInit+0xd8>)
 8000fd6:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <SystemInit+0xe0>)
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <SystemInit+0xd8>)
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <SystemInit+0xe4>)
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <SystemInit+0xd8>)
 8000fe2:	4a17      	ldr	r2, [pc, #92]	@ (8001040 <SystemInit+0xe8>)
 8000fe4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000fe6:	4b12      	ldr	r3, [pc, #72]	@ (8001030 <SystemInit+0xd8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fec:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <SystemInit+0xd8>)
 8000fee:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <SystemInit+0xe8>)
 8000ff0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <SystemInit+0xd8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8001030 <SystemInit+0xd8>)
 8000ffa:	4a11      	ldr	r2, [pc, #68]	@ (8001040 <SystemInit+0xe8>)
 8000ffc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <SystemInit+0xd8>)
 8001000:	2200      	movs	r2, #0
 8001002:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001004:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <SystemInit+0xd8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <SystemInit+0xd8>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800100e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <SystemInit+0xd8>)
 8001012:	2200      	movs	r2, #0
 8001014:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <SystemInit+0xec>)
 8001018:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800101c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	52002000 	.word	0x52002000
 8001030:	58024400 	.word	0x58024400
 8001034:	eaf6ed7f 	.word	0xeaf6ed7f
 8001038:	02020200 	.word	0x02020200
 800103c:	01ff0000 	.word	0x01ff0000
 8001040:	01010280 	.word	0x01010280
 8001044:	52004000 	.word	0x52004000

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001080 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800104c:	f7ff ff84 	bl	8000f58 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001050:	480c      	ldr	r0, [pc, #48]	@ (8001084 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001052:	490d      	ldr	r1, [pc, #52]	@ (8001088 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001054:	4a0d      	ldr	r2, [pc, #52]	@ (800108c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001058:	e002      	b.n	8001060 <LoopCopyDataInit>

0800105a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800105a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800105c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800105e:	3304      	adds	r3, #4

08001060 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001064:	d3f9      	bcc.n	800105a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001068:	4c0a      	ldr	r4, [pc, #40]	@ (8001094 <LoopFillZerobss+0x22>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800106c:	e001      	b.n	8001072 <LoopFillZerobss>

0800106e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800106e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001070:	3204      	adds	r2, #4

08001072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001074:	d3fb      	bcc.n	800106e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001076:	f00a fa6d 	bl	800b554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff faaf 	bl	80005dc <main>
  bx  lr
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001084:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001088:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800108c:	0800b604 	.word	0x0800b604
  ldr r2, =_sbss
 8001090:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001094:	24000b10 	.word	0x24000b10

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a2:	2003      	movs	r0, #3
 80010a4:	f001 fdfe 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80010a8:	f005 fdfe 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 80010ac:	4602      	mov	r2, r0
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_Init+0x68>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	4913      	ldr	r1, [pc, #76]	@ (8001108 <HAL_Init+0x6c>)
 80010ba:	5ccb      	ldrb	r3, [r1, r3]
 80010bc:	f003 031f 	and.w	r3, r3, #31
 80010c0:	fa22 f303 	lsr.w	r3, r2, r3
 80010c4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <HAL_Init+0x68>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001108 <HAL_Init+0x6c>)
 80010d0:	5cd3      	ldrb	r3, [r2, r3]
 80010d2:	f003 031f 	and.w	r3, r3, #31
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <HAL_Init+0x70>)
 80010de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001110 <HAL_Init+0x74>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e6:	200f      	movs	r0, #15
 80010e8:	f000 f814 	bl	8001114 <HAL_InitTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e002      	b.n	80010fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010f6:	f7ff fd9f 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fa:	2300      	movs	r3, #0
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	58024400 	.word	0x58024400
 8001108:	0800b5b4 	.word	0x0800b5b4
 800110c:	24000004 	.word	0x24000004
 8001110:	24000000 	.word	0x24000000

08001114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_InitTick+0x60>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e021      	b.n	800116c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001128:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <HAL_InitTick+0x64>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_InitTick+0x60>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	4619      	mov	r1, r3
 8001132:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001136:	fbb3 f3f1 	udiv	r3, r3, r1
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fde3 	bl	8002d0a <HAL_SYSTICK_Config>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e00e      	b.n	800116c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b0f      	cmp	r3, #15
 8001152:	d80a      	bhi.n	800116a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001154:	2200      	movs	r2, #0
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f001 fdad 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001160:	4a06      	ldr	r2, [pc, #24]	@ (800117c <HAL_InitTick+0x68>)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	e000      	b.n	800116c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2400000c 	.word	0x2400000c
 8001178:	24000000 	.word	0x24000000
 800117c:	24000008 	.word	0x24000008

08001180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001184:	4b06      	ldr	r3, [pc, #24]	@ (80011a0 <HAL_IncTick+0x20>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_IncTick+0x24>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <HAL_IncTick+0x24>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2400000c 	.word	0x2400000c
 80011a4:	24000b0c 	.word	0x24000b0c

080011a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return uwTick;
 80011ac:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <HAL_GetTick+0x14>)
 80011ae:	681b      	ldr	r3, [r3, #0]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	24000b0c 	.word	0x24000b0c

080011c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_GetREVID+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0c1b      	lsrs	r3, r3, #16
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	5c001000 	.word	0x5c001000

080011d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	609a      	str	r2, [r3, #8]
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	431a      	orrs	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	609a      	str	r2, [r3, #8]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001234:	4618      	mov	r0, r3
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	3360      	adds	r3, #96	@ 0x60
 8001252:	461a      	mov	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	430b      	orrs	r3, r1
 800126e:	431a      	orrs	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001274:	bf00      	nop
 8001276:	371c      	adds	r7, #28
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f003 031f 	and.w	r3, r3, #31
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	431a      	orrs	r2, r3
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	611a      	str	r2, [r3, #16]
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b087      	sub	sp, #28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3360      	adds	r3, #96	@ 0x60
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	601a      	str	r2, [r3, #0]
  }
}
 80012dc:	bf00      	nop
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800130e:	b480      	push	{r7}
 8001310:	b087      	sub	sp, #28
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	3330      	adds	r3, #48	@ 0x30
 800131e:	461a      	mov	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	0a1b      	lsrs	r3, r3, #8
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	4413      	add	r3, r2
 800132c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	f003 031f 	and.w	r3, r3, #31
 8001338:	211f      	movs	r1, #31
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	401a      	ands	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0e9b      	lsrs	r3, r3, #26
 8001346:	f003 011f 	and.w	r1, r3, #31
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	fa01 f303 	lsl.w	r3, r1, r3
 8001354:	431a      	orrs	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800135a:	bf00      	nop
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001366:	b480      	push	{r7}
 8001368:	b087      	sub	sp, #28
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3314      	adds	r3, #20
 8001376:	461a      	mov	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	0e5b      	lsrs	r3, r3, #25
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	4413      	add	r3, r2
 8001384:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	0d1b      	lsrs	r3, r3, #20
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	2107      	movs	r1, #7
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	0d1b      	lsrs	r3, r3, #20
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	431a      	orrs	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013b0:	bf00      	nop
 80013b2:	371c      	adds	r7, #28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013d4:	43db      	mvns	r3, r3
 80013d6:	401a      	ands	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f003 0318 	and.w	r3, r3, #24
 80013de:	4908      	ldr	r1, [pc, #32]	@ (8001400 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013e0:	40d9      	lsrs	r1, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	400b      	ands	r3, r1
 80013e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80013ea:	431a      	orrs	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	000fffff 	.word	0x000fffff

08001404 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 031f 	and.w	r3, r3, #31
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <LL_ADC_DisableDeepPowerDown+0x20>)
 800142e:	4013      	ands	r3, r2
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6093      	str	r3, [r2, #8]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	5fffffc0 	.word	0x5fffffc0

08001444 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001454:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001458:	d101      	bne.n	800145e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <LL_ADC_EnableInternalRegulator+0x24>)
 800147a:	4013      	ands	r3, r2
 800147c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	6fffffc0 	.word	0x6fffffc0

08001494 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80014a8:	d101      	bne.n	80014ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014aa:	2301      	movs	r3, #1
 80014ac:	e000      	b.n	80014b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <LL_ADC_Enable+0x24>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	f043 0201 	orr.w	r2, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	7fffffc0 	.word	0x7fffffc0

080014e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <LL_ADC_Disable+0x24>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	f043 0202 	orr.w	r2, r3, #2
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	7fffffc0 	.word	0x7fffffc0

0800150c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	2b01      	cmp	r3, #1
 800151e:	d101      	bne.n	8001524 <LL_ADC_IsEnabled+0x18>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <LL_ADC_IsEnabled+0x1a>
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b02      	cmp	r3, #2
 8001544:	d101      	bne.n	800154a <LL_ADC_IsDisableOngoing+0x18>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <LL_ADC_IsDisableOngoing+0x1a>
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <LL_ADC_REG_StartConversion+0x24>)
 8001566:	4013      	ands	r3, r2
 8001568:	f043 0204 	orr.w	r2, r3, #4
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	7fffffc0 	.word	0x7fffffc0

08001580 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <LL_ADC_REG_StopConversion+0x24>)
 800158e:	4013      	ands	r3, r2
 8001590:	f043 0210 	orr.w	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	7fffffc0 	.word	0x7fffffc0

080015a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d101      	bne.n	80015c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <LL_ADC_INJ_StopConversion+0x24>)
 80015de:	4013      	ands	r3, r2
 80015e0:	f043 0220 	orr.w	r2, r3, #32
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	7fffffc0 	.word	0x7fffffc0

080015f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b08      	cmp	r3, #8
 800160a:	d101      	bne.n	8001610 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001620:	b590      	push	{r4, r7, lr}
 8001622:	b089      	sub	sp, #36	@ 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e138      	b.n	80018ac <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001644:	2b00      	cmp	r3, #0
 8001646:	d109      	bne.n	800165c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fb0f 	bl	8000c6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff feef 	bl	8001444 <LL_ADC_IsDeepPowerDownEnabled>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fed5 	bl	8001420 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff0a 	bl	8001494 <LL_ADC_IsInternalRegulatorEnabled>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d114      	bne.n	80016b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff feee 	bl	800146c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001690:	4b88      	ldr	r3, [pc, #544]	@ (80018b4 <HAL_ADC_Init+0x294>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	099b      	lsrs	r3, r3, #6
 8001696:	4a88      	ldr	r2, [pc, #544]	@ (80018b8 <HAL_ADC_Init+0x298>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	3301      	adds	r3, #1
 80016a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016a2:	e002      	b.n	80016aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff feed 	bl	8001494 <LL_ADC_IsInternalRegulatorEnabled>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d10d      	bne.n	80016dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c4:	f043 0210 	orr.w	r2, r3, #16
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	f043 0201 	orr.w	r2, r3, #1
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff61 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 80016e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 80d2 	bne.w	800189a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 80ce 	bne.w	800189a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001702:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001706:	f043 0202 	orr.w	r2, r3, #2
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fefa 	bl	800150c <LL_ADC_IsEnabled>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d110      	bne.n	8001740 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800171e:	4867      	ldr	r0, [pc, #412]	@ (80018bc <HAL_ADC_Init+0x29c>)
 8001720:	f7ff fef4 	bl	800150c <LL_ADC_IsEnabled>
 8001724:	4604      	mov	r4, r0
 8001726:	4866      	ldr	r0, [pc, #408]	@ (80018c0 <HAL_ADC_Init+0x2a0>)
 8001728:	f7ff fef0 	bl	800150c <LL_ADC_IsEnabled>
 800172c:	4603      	mov	r3, r0
 800172e:	4323      	orrs	r3, r4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4619      	mov	r1, r3
 800173a:	4862      	ldr	r0, [pc, #392]	@ (80018c4 <HAL_ADC_Init+0x2a4>)
 800173c:	f7ff fd4c 	bl	80011d8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7d5b      	ldrb	r3, [r3, #21]
 8001744:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800174a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001750:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	7f1b      	ldrb	r3, [r3, #28]
 8001756:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7f1b      	ldrb	r3, [r3, #28]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	3b01      	subs	r3, #1
 800176a:	045b      	lsls	r3, r3, #17
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001786:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4b4c      	ldr	r3, [pc, #304]	@ (80018c8 <HAL_ADC_Init+0x2a8>)
 8001796:	4013      	ands	r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	69b9      	ldr	r1, [r7, #24]
 800179e:	430b      	orrs	r3, r1
 80017a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fefe 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 80017ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff ff20 	bl	80015f8 <LL_ADC_INJ_IsConversionOngoing>
 80017b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d14a      	bne.n	8001856 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d147      	bne.n	8001856 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	7d1b      	ldrb	r3, [r3, #20]
 80017ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	4b3c      	ldr	r3, [pc, #240]	@ (80018cc <HAL_ADC_Init+0x2ac>)
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	69b9      	ldr	r1, [r7, #24]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d11b      	bne.n	800182a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691a      	ldr	r2, [r3, #16]
 80017fe:	4b34      	ldr	r3, [pc, #208]	@ (80018d0 <HAL_ADC_Init+0x2b0>)
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001806:	3a01      	subs	r2, #1
 8001808:	0411      	lsls	r1, r2, #16
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001814:	4311      	orrs	r1, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800181a:	430a      	orrs	r2, r1
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 0201 	orr.w	r2, r2, #1
 8001826:	611a      	str	r2, [r3, #16]
 8001828:	e007      	b.n	800183a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 fe19 	bl	8002488 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10c      	bne.n	8001878 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001864:	f023 010f 	bic.w	r1, r3, #15
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	699b      	ldr	r3, [r3, #24]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	631a      	str	r2, [r3, #48]	@ 0x30
 8001876:	e007      	b.n	8001888 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f022 020f 	bic.w	r2, r2, #15
 8001886:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188c:	f023 0303 	bic.w	r3, r3, #3
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	655a      	str	r2, [r3, #84]	@ 0x54
 8001898:	e007      	b.n	80018aa <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189e:	f043 0210 	orr.w	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3724      	adds	r7, #36	@ 0x24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	24000000 	.word	0x24000000
 80018b8:	053e2d63 	.word	0x053e2d63
 80018bc:	40022000 	.word	0x40022000
 80018c0:	40022100 	.word	0x40022100
 80018c4:	40022300 	.word	0x40022300
 80018c8:	fff0c003 	.word	0xfff0c003
 80018cc:	ffffbffc 	.word	0xffffbffc
 80018d0:	fc00f81e 	.word	0xfc00f81e

080018d4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018dc:	4856      	ldr	r0, [pc, #344]	@ (8001a38 <HAL_ADC_Start+0x164>)
 80018de:	f7ff fd91 	bl	8001404 <LL_ADC_GetMultimode>
 80018e2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fe5d 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f040 809a 	bne.w	8001a2a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_ADC_Start+0x30>
 8001900:	2302      	movs	r3, #2
 8001902:	e095      	b.n	8001a30 <HAL_ADC_Start+0x15c>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 fc4b 	bl	80021a8 <ADC_Enable>
 8001912:	4603      	mov	r3, r0
 8001914:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001916:	7dfb      	ldrb	r3, [r7, #23]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f040 8081 	bne.w	8001a20 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001922:	4b46      	ldr	r3, [pc, #280]	@ (8001a3c <HAL_ADC_Start+0x168>)
 8001924:	4013      	ands	r3, r2
 8001926:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a43      	ldr	r2, [pc, #268]	@ (8001a40 <HAL_ADC_Start+0x16c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d002      	beq.n	800193e <HAL_ADC_Start+0x6a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	e000      	b.n	8001940 <HAL_ADC_Start+0x6c>
 800193e:	4b41      	ldr	r3, [pc, #260]	@ (8001a44 <HAL_ADC_Start+0x170>)
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4293      	cmp	r3, r2
 8001946:	d002      	beq.n	800194e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001952:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001966:	d106      	bne.n	8001976 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800196c:	f023 0206 	bic.w	r2, r3, #6
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	659a      	str	r2, [r3, #88]	@ 0x58
 8001974:	e002      	b.n	800197c <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	221c      	movs	r2, #28
 8001982:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2b      	ldr	r2, [pc, #172]	@ (8001a40 <HAL_ADC_Start+0x16c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d002      	beq.n	800199c <HAL_ADC_Start+0xc8>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	e000      	b.n	800199e <HAL_ADC_Start+0xca>
 800199c:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <HAL_ADC_Start+0x170>)
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d008      	beq.n	80019b8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d005      	beq.n	80019b8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d002      	beq.n	80019b8 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d114      	bne.n	80019e2 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d007      	beq.n	80019d6 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fdbc 	bl	8001558 <LL_ADC_REG_StartConversion>
 80019e0:	e025      	b.n	8001a2e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a13      	ldr	r2, [pc, #76]	@ (8001a40 <HAL_ADC_Start+0x16c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d002      	beq.n	80019fe <HAL_ADC_Start+0x12a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	e000      	b.n	8001a00 <HAL_ADC_Start+0x12c>
 80019fe:	4b11      	ldr	r3, [pc, #68]	@ (8001a44 <HAL_ADC_Start+0x170>)
 8001a00:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00f      	beq.n	8001a2e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a1e:	e006      	b.n	8001a2e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001a28:	e001      	b.n	8001a2e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40022300 	.word	0x40022300
 8001a3c:	fffff0fe 	.word	0xfffff0fe
 8001a40:	40022100 	.word	0x40022100
 8001a44:	40022000 	.word	0x40022000

08001a48 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b0a1      	sub	sp, #132	@ 0x84
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	4a95      	ldr	r2, [pc, #596]	@ (8001ccc <HAL_ADC_ConfigChannel+0x270>)
 8001a76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x2a>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e2c0      	b.n	8002008 <HAL_ADC_ConfigChannel+0x5ac>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fd88 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 82a5 	bne.w	8001fea <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db2c      	blt.n	8001b02 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d108      	bne.n	8001ac6 <HAL_ADC_ConfigChannel+0x6a>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0e9b      	lsrs	r3, r3, #26
 8001aba:	f003 031f 	and.w	r3, r3, #31
 8001abe:	2201      	movs	r2, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	e016      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x98>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ace:	fa93 f3a3 	rbit	r3, r3
 8001ad2:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ad4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ad6:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ad8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e003      	b.n	8001aea <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001ae2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ae4:	fab3 f383 	clz	r3, r3
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	2201      	movs	r2, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	69d1      	ldr	r1, [r2, #28]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	430b      	orrs	r3, r1
 8001b00:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6859      	ldr	r1, [r3, #4]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f7ff fbfd 	bl	800130e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fd45 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 8001b1e:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fd67 	bl	80015f8 <LL_ADC_INJ_IsConversionOngoing>
 8001b2a:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 80a0 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 809c 	bne.w	8001c74 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	6819      	ldr	r1, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	f7ff fc0c 	bl	8001366 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10b      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x118>
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	e00a      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x12e>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	695a      	ldr	r2, [r3, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d027      	beq.n	8001be4 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6919      	ldr	r1, [r3, #16]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ba2:	f7ff fb4d 	bl	8001240 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	7e5b      	ldrb	r3, [r3, #25]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d102      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x160>
 8001bb6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001bba:	e000      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x162>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f7ff fb77 	bl	80012b2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6919      	ldr	r1, [r3, #16]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	7e1b      	ldrb	r3, [r3, #24]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d102      	bne.n	8001bda <HAL_ADC_ConfigChannel+0x17e>
 8001bd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001bd8:	e000      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x180>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f7ff fb4f 	bl	8001280 <LL_ADC_SetDataRightShift>
 8001be2:	e047      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	069b      	lsls	r3, r3, #26
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d107      	bne.n	8001c08 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c06:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	069b      	lsls	r3, r3, #26
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d107      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c2a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001c32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	069b      	lsls	r3, r3, #26
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d107      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c4e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	069b      	lsls	r3, r3, #26
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d107      	bne.n	8001c74 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001c72:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fc47 	bl	800150c <LL_ADC_IsEnabled>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f040 81bb 	bne.w	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6819      	ldr	r1, [r3, #0]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	461a      	mov	r2, r3
 8001c94:	f7ff fb92 	bl	80013bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ccc <HAL_ADC_ConfigChannel+0x270>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f040 8130 	bne.w	8001f04 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x274>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0e9b      	lsrs	r3, r3, #26
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f003 031f 	and.w	r3, r3, #31
 8001cc0:	2b09      	cmp	r3, #9
 8001cc2:	bf94      	ite	ls
 8001cc4:	2301      	movls	r3, #1
 8001cc6:	2300      	movhi	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	e01b      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x2a8>
 8001ccc:	47ff0000 	.word	0x47ff0000
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cd8:	fa93 f3a3 	rbit	r3, r3
 8001cdc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001ce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	e003      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8001cec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2b09      	cmp	r3, #9
 8001cfc:	bf94      	ite	ls
 8001cfe:	2301      	movls	r3, #1
 8001d00:	2300      	movhi	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d079      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d107      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x2c8>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0e9b      	lsrs	r3, r3, #26
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	069b      	lsls	r3, r3, #26
 8001d1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d22:	e015      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x2f4>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d34:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d101      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	e003      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8001d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	069b      	lsls	r3, r3, #26
 8001d4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d109      	bne.n	8001d70 <HAL_ADC_ConfigChannel+0x314>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0e9b      	lsrs	r3, r3, #26
 8001d62:	3301      	adds	r3, #1
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	2101      	movs	r1, #1
 8001d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6e:	e017      	b.n	8001da0 <HAL_ADC_ConfigChannel+0x344>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d80:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001d82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001d88:	2320      	movs	r3, #32
 8001d8a:	e003      	b.n	8001d94 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8001d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d8e:	fab3 f383 	clz	r3, r3
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	3301      	adds	r3, #1
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	ea42 0103 	orr.w	r1, r2, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10a      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x36a>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0e9b      	lsrs	r3, r3, #26
 8001db6:	3301      	adds	r3, #1
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	051b      	lsls	r3, r3, #20
 8001dc4:	e018      	b.n	8001df8 <HAL_ADC_ConfigChannel+0x39c>
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dce:	fa93 f3a3 	rbit	r3, r3
 8001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e003      	b.n	8001dea <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	e07e      	b.n	8001efa <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d107      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x3bc>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0e9b      	lsrs	r3, r3, #26
 8001e0e:	3301      	adds	r3, #1
 8001e10:	069b      	lsls	r3, r3, #26
 8001e12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e16:	e015      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x3e8>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e20:	fa93 f3a3 	rbit	r3, r3
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8001e30:	2320      	movs	r3, #32
 8001e32:	e003      	b.n	8001e3c <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8001e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e36:	fab3 f383 	clz	r3, r3
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	069b      	lsls	r3, r3, #26
 8001e40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x408>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	3301      	adds	r3, #1
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	e017      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x438>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	61bb      	str	r3, [r7, #24]
  return result;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8001e7c:	2320      	movs	r3, #32
 8001e7e:	e003      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8001e80:	6a3b      	ldr	r3, [r7, #32]
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	3301      	adds	r3, #1
 8001e8a:	f003 031f 	and.w	r3, r3, #31
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f303 	lsl.w	r3, r1, r3
 8001e94:	ea42 0103 	orr.w	r1, r2, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x464>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	3301      	adds	r3, #1
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b1e      	subs	r3, #30
 8001eb8:	051b      	lsls	r3, r3, #20
 8001eba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ebe:	e01b      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x49c>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	60fb      	str	r3, [r7, #12]
  return result;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8001ed8:	2320      	movs	r3, #32
 8001eda:	e003      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	f003 021f 	and.w	r2, r3, #31
 8001eea:	4613      	mov	r3, r2
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	3b1e      	subs	r3, #30
 8001ef2:	051b      	lsls	r3, r3, #20
 8001ef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	6892      	ldr	r2, [r2, #8]
 8001efe:	4619      	mov	r1, r3
 8001f00:	f7ff fa31 	bl	8001366 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	da77      	bge.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f0c:	4840      	ldr	r0, [pc, #256]	@ (8002010 <HAL_ADC_ConfigChannel+0x5b4>)
 8001f0e:	f7ff f989 	bl	8001224 <LL_ADC_GetCommonPathInternalCh>
 8001f12:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f14:	483f      	ldr	r0, [pc, #252]	@ (8002014 <HAL_ADC_ConfigChannel+0x5b8>)
 8001f16:	f7ff faf9 	bl	800150c <LL_ADC_IsEnabled>
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	483e      	ldr	r0, [pc, #248]	@ (8002018 <HAL_ADC_ConfigChannel+0x5bc>)
 8001f1e:	f7ff faf5 	bl	800150c <LL_ADC_IsEnabled>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4323      	orrs	r3, r4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d155      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a3b      	ldr	r2, [pc, #236]	@ (800201c <HAL_ADC_ConfigChannel+0x5c0>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d122      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x51e>
 8001f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11d      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a35      	ldr	r2, [pc, #212]	@ (8002018 <HAL_ADC_ConfigChannel+0x5bc>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d159      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f4e:	4619      	mov	r1, r3
 8001f50:	482f      	ldr	r0, [pc, #188]	@ (8002010 <HAL_ADC_ConfigChannel+0x5b4>)
 8001f52:	f7ff f954 	bl	80011fe <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f56:	4b32      	ldr	r3, [pc, #200]	@ (8002020 <HAL_ADC_ConfigChannel+0x5c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	099b      	lsrs	r3, r3, #6
 8001f5c:	4a31      	ldr	r2, [pc, #196]	@ (8002024 <HAL_ADC_ConfigChannel+0x5c8>)
 8001f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f62:	099b      	lsrs	r3, r3, #6
 8001f64:	3301      	adds	r3, #1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f6a:	e002      	b.n	8001f72 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f9      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f78:	e040      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a2a      	ldr	r2, [pc, #168]	@ (8002028 <HAL_ADC_ConfigChannel+0x5cc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d111      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x54c>
 8001f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a21      	ldr	r2, [pc, #132]	@ (8002018 <HAL_ADC_ConfigChannel+0x5bc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d131      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001f98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	481b      	ldr	r0, [pc, #108]	@ (8002010 <HAL_ADC_ConfigChannel+0x5b4>)
 8001fa2:	f7ff f92c 	bl	80011fe <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fa6:	e029      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1f      	ldr	r2, [pc, #124]	@ (800202c <HAL_ADC_ConfigChannel+0x5d0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d124      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
 8001fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11f      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a15      	ldr	r2, [pc, #84]	@ (8002018 <HAL_ADC_ConfigChannel+0x5bc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d11a      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fc8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4810      	ldr	r0, [pc, #64]	@ (8002010 <HAL_ADC_ConfigChannel+0x5b4>)
 8001fd0:	f7ff f915 	bl	80011fe <LL_ADC_SetCommonPathInternalCh>
 8001fd4:	e012      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fda:	f043 0220 	orr.w	r2, r3, #32
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001fe8:	e008      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fee:	f043 0220 	orr.w	r2, r3, #32
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002004:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002008:	4618      	mov	r0, r3
 800200a:	3784      	adds	r7, #132	@ 0x84
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	40022300 	.word	0x40022300
 8002014:	40022000 	.word	0x40022000
 8002018:	40022100 	.word	0x40022100
 800201c:	cb840000 	.word	0xcb840000
 8002020:	24000000 	.word	0x24000000
 8002024:	053e2d63 	.word	0x053e2d63
 8002028:	bac04000 	.word	0xbac04000
 800202c:	cfb80000 	.word	0xcfb80000

08002030 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff faae 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 800204c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fad0 	bl	80015f8 <LL_ADC_INJ_IsConversionOngoing>
 8002058:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d103      	bne.n	8002068 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8098 	beq.w	8002198 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d02a      	beq.n	80020cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	7d5b      	ldrb	r3, [r3, #21]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d126      	bne.n	80020cc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7d1b      	ldrb	r3, [r3, #20]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d122      	bne.n	80020cc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002086:	2301      	movs	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800208a:	e014      	b.n	80020b6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4a45      	ldr	r2, [pc, #276]	@ (80021a4 <ADC_ConversionStop+0x174>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d90d      	bls.n	80020b0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002098:	f043 0210 	orr.w	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a4:	f043 0201 	orr.w	r2, r3, #1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e074      	b.n	800219a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	3301      	adds	r3, #1
 80020b4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c0:	2b40      	cmp	r3, #64	@ 0x40
 80020c2:	d1e3      	bne.n	800208c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2240      	movs	r2, #64	@ 0x40
 80020ca:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d014      	beq.n	80020fc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fa66 	bl	80015a8 <LL_ADC_REG_IsConversionOngoing>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00c      	beq.n	80020fc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fa23 	bl	8001532 <LL_ADC_IsDisableOngoing>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d104      	bne.n	80020fc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fa42 	bl	8001580 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d014      	beq.n	800212c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fa76 	bl	80015f8 <LL_ADC_INJ_IsConversionOngoing>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00c      	beq.n	800212c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fa0b 	bl	8001532 <LL_ADC_IsDisableOngoing>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d104      	bne.n	800212c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fa52 	bl	80015d0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d005      	beq.n	800213e <ADC_ConversionStop+0x10e>
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d105      	bne.n	8002144 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002138:	230c      	movs	r3, #12
 800213a:	617b      	str	r3, [r7, #20]
        break;
 800213c:	e005      	b.n	800214a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800213e:	2308      	movs	r3, #8
 8002140:	617b      	str	r3, [r7, #20]
        break;
 8002142:	e002      	b.n	800214a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002144:	2304      	movs	r3, #4
 8002146:	617b      	str	r3, [r7, #20]
        break;
 8002148:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800214a:	f7ff f82d 	bl	80011a8 <HAL_GetTick>
 800214e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002150:	e01b      	b.n	800218a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002152:	f7ff f829 	bl	80011a8 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b05      	cmp	r3, #5
 800215e:	d914      	bls.n	800218a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00d      	beq.n	800218a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e007      	b.n	800219a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1dc      	bne.n	8002152 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	000cdbff 	.word	0x000cdbff

080021a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff f9a9 	bl	800150c <LL_ADC_IsEnabled>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d161      	bne.n	8002284 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	4b32      	ldr	r3, [pc, #200]	@ (8002290 <ADC_Enable+0xe8>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00d      	beq.n	80021ea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d2:	f043 0210 	orr.w	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e04d      	b.n	8002286 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f964 	bl	80014bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021f4:	f7fe ffd8 	bl	80011a8 <HAL_GetTick>
 80021f8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021fa:	4826      	ldr	r0, [pc, #152]	@ (8002294 <ADC_Enable+0xec>)
 80021fc:	f7ff f902 	bl	8001404 <LL_ADC_GetMultimode>
 8002200:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a24      	ldr	r2, [pc, #144]	@ (8002298 <ADC_Enable+0xf0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d002      	beq.n	8002212 <ADC_Enable+0x6a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e000      	b.n	8002214 <ADC_Enable+0x6c>
 8002212:	4b22      	ldr	r3, [pc, #136]	@ (800229c <ADC_Enable+0xf4>)
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	4293      	cmp	r3, r2
 800221a:	d02c      	beq.n	8002276 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d130      	bne.n	8002284 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002222:	e028      	b.n	8002276 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff f96f 	bl	800150c <LL_ADC_IsEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d104      	bne.n	800223e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f93f 	bl	80014bc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800223e:	f7fe ffb3 	bl	80011a8 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d914      	bls.n	8002276 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b01      	cmp	r3, #1
 8002258:	d00d      	beq.n	8002276 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f043 0210 	orr.w	r2, r3, #16
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e007      	b.n	8002286 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b01      	cmp	r3, #1
 8002282:	d1cf      	bne.n	8002224 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	8000003f 	.word	0x8000003f
 8002294:	40022300 	.word	0x40022300
 8002298:	40022100 	.word	0x40022100
 800229c:	40022000 	.word	0x40022000

080022a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff f940 	bl	8001532 <LL_ADC_IsDisableOngoing>
 80022b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff f927 	bl	800150c <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d047      	beq.n	8002354 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d144      	bne.n	8002354 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 030d 	and.w	r3, r3, #13
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10c      	bne.n	80022f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff f901 	bl	80014e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2203      	movs	r2, #3
 80022e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022ea:	f7fe ff5d 	bl	80011a8 <HAL_GetTick>
 80022ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022f0:	e029      	b.n	8002346 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022f6:	f043 0210 	orr.w	r2, r3, #16
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002302:	f043 0201 	orr.w	r2, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e023      	b.n	8002356 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800230e:	f7fe ff4b 	bl	80011a8 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d914      	bls.n	8002346 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232e:	f043 0210 	orr.w	r2, r3, #16
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e007      	b.n	8002356 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1dc      	bne.n	800230e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800236a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002370:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d14b      	bne.n	8002410 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d021      	beq.n	80023d6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe ffa6 	bl	80012e8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d032      	beq.n	8002408 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d12b      	bne.n	8002408 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d11f      	bne.n	8002408 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80023d4:	e018      	b.n	8002408 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002400:	f043 0201 	orr.w	r2, r3, #1
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7fe fbb1 	bl	8000b70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800240e:	e00e      	b.n	800242e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f7ff fb13 	bl	8001a48 <HAL_ADC_ErrorCallback>
}
 8002422:	e004      	b.n	800242e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4798      	blx	r3
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002442:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f7fe fb6b 	bl	8000b20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b084      	sub	sp, #16
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002464:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002470:	f043 0204 	orr.w	r2, r3, #4
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f7ff fae5 	bl	8001a48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
	...

08002488 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002490:	4b60      	ldr	r3, [pc, #384]	@ (8002614 <ADC_ConfigureBoostMode+0x18c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01c      	beq.n	80024d6 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800249c:	f004 fd7e 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 80024a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024aa:	d010      	beq.n	80024ce <ADC_ConfigureBoostMode+0x46>
 80024ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80024b0:	d873      	bhi.n	800259a <ADC_ConfigureBoostMode+0x112>
 80024b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024b6:	d002      	beq.n	80024be <ADC_ConfigureBoostMode+0x36>
 80024b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80024bc:	d16d      	bne.n	800259a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	0c1b      	lsrs	r3, r3, #16
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	60fb      	str	r3, [r7, #12]
        break;
 80024cc:	e068      	b.n	80025a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	60fb      	str	r3, [r7, #12]
        break;
 80024d4:	e064      	b.n	80025a0 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80024d6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	f005 ff77 	bl	80083d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80024e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80024ec:	d051      	beq.n	8002592 <ADC_ConfigureBoostMode+0x10a>
 80024ee:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80024f2:	d854      	bhi.n	800259e <ADC_ConfigureBoostMode+0x116>
 80024f4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80024f8:	d047      	beq.n	800258a <ADC_ConfigureBoostMode+0x102>
 80024fa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80024fe:	d84e      	bhi.n	800259e <ADC_ConfigureBoostMode+0x116>
 8002500:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002504:	d03d      	beq.n	8002582 <ADC_ConfigureBoostMode+0xfa>
 8002506:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800250a:	d848      	bhi.n	800259e <ADC_ConfigureBoostMode+0x116>
 800250c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002510:	d033      	beq.n	800257a <ADC_ConfigureBoostMode+0xf2>
 8002512:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002516:	d842      	bhi.n	800259e <ADC_ConfigureBoostMode+0x116>
 8002518:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800251c:	d029      	beq.n	8002572 <ADC_ConfigureBoostMode+0xea>
 800251e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002522:	d83c      	bhi.n	800259e <ADC_ConfigureBoostMode+0x116>
 8002524:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002528:	d01a      	beq.n	8002560 <ADC_ConfigureBoostMode+0xd8>
 800252a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800252e:	d836      	bhi.n	800259e <ADC_ConfigureBoostMode+0x116>
 8002530:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002534:	d014      	beq.n	8002560 <ADC_ConfigureBoostMode+0xd8>
 8002536:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800253a:	d830      	bhi.n	800259e <ADC_ConfigureBoostMode+0x116>
 800253c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002540:	d00e      	beq.n	8002560 <ADC_ConfigureBoostMode+0xd8>
 8002542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002546:	d82a      	bhi.n	800259e <ADC_ConfigureBoostMode+0x116>
 8002548:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800254c:	d008      	beq.n	8002560 <ADC_ConfigureBoostMode+0xd8>
 800254e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002552:	d824      	bhi.n	800259e <ADC_ConfigureBoostMode+0x116>
 8002554:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002558:	d002      	beq.n	8002560 <ADC_ConfigureBoostMode+0xd8>
 800255a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800255e:	d11e      	bne.n	800259e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	0c9b      	lsrs	r3, r3, #18
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	60fb      	str	r3, [r7, #12]
        break;
 8002570:	e016      	b.n	80025a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	60fb      	str	r3, [r7, #12]
        break;
 8002578:	e012      	b.n	80025a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	60fb      	str	r3, [r7, #12]
        break;
 8002580:	e00e      	b.n	80025a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	099b      	lsrs	r3, r3, #6
 8002586:	60fb      	str	r3, [r7, #12]
        break;
 8002588:	e00a      	b.n	80025a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	09db      	lsrs	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]
        break;
 8002590:	e006      	b.n	80025a0 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	60fb      	str	r3, [r7, #12]
        break;
 8002598:	e002      	b.n	80025a0 <ADC_ConfigureBoostMode+0x118>
        break;
 800259a:	bf00      	nop
 800259c:	e000      	b.n	80025a0 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800259e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	085b      	lsrs	r3, r3, #1
 80025a4:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <ADC_ConfigureBoostMode+0x190>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d808      	bhi.n	80025c0 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80025bc:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80025be:	e025      	b.n	800260c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a16      	ldr	r2, [pc, #88]	@ (800261c <ADC_ConfigureBoostMode+0x194>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d80a      	bhi.n	80025de <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	e016      	b.n	800260c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002620 <ADC_ConfigureBoostMode+0x198>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d80a      	bhi.n	80025fc <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f8:	609a      	str	r2, [r3, #8]
}
 80025fa:	e007      	b.n	800260c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800260a:	609a      	str	r2, [r3, #8]
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40022300 	.word	0x40022300
 8002618:	005f5e10 	.word	0x005f5e10
 800261c:	00bebc20 	.word	0x00bebc20
 8002620:	017d7840 	.word	0x017d7840

08002624 <LL_ADC_IsEnabled>:
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <LL_ADC_IsEnabled+0x18>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <LL_ADC_IsEnabled+0x1a>
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <LL_ADC_REG_StartConversion>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	4b05      	ldr	r3, [pc, #20]	@ (8002670 <LL_ADC_REG_StartConversion+0x24>)
 800265a:	4013      	ands	r3, r2
 800265c:	f043 0204 	orr.w	r2, r3, #4
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	609a      	str	r2, [r3, #8]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	7fffffc0 	.word	0x7fffffc0

08002674 <LL_ADC_REG_IsConversionOngoing>:
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b04      	cmp	r3, #4
 8002686:	d101      	bne.n	800268c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b0a0      	sub	sp, #128	@ 0x80
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ffe1 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
 80026ba:	e0ad      	b.n	8002818 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d101      	bne.n	80026ca <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80026c6:	2302      	movs	r3, #2
 80026c8:	e0a6      	b.n	8002818 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a52      	ldr	r2, [pc, #328]	@ (8002820 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d002      	beq.n	80026e2 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e000      	b.n	80026e4 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 80026e2:	4b50      	ldr	r3, [pc, #320]	@ (8002824 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d006      	beq.n	80026fa <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff fd5b 	bl	80021a8 <ADC_Enable>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80026f8:	e02e      	b.n	8002758 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80026fe:	2300      	movs	r3, #0
 8002700:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a47      	ldr	r2, [pc, #284]	@ (8002824 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d102      	bne.n	8002712 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 800270c:	4b44      	ldr	r3, [pc, #272]	@ (8002820 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e001      	b.n	8002716 <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 8002712:	2300      	movs	r3, #0
 8002714:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e071      	b.n	8002818 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f7ff fd37 	bl	80021a8 <ADC_Enable>
 800273a:	4603      	mov	r3, r0
 800273c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 8002740:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002744:	2b00      	cmp	r3, #0
 8002746:	d107      	bne.n	8002758 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fd2b 	bl	80021a8 <ADC_Enable>
 8002752:	4603      	mov	r3, r0
 8002754:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002758:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800275c:	2b00      	cmp	r3, #0
 800275e:	d155      	bne.n	800280c <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002764:	4b30      	ldr	r3, [pc, #192]	@ (8002828 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8002766:	4013      	ands	r3, r2
 8002768:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	4a2c      	ldr	r2, [pc, #176]	@ (800282c <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 800277c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002782:	4a2b      	ldr	r2, [pc, #172]	@ (8002830 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8002784:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	4a2a      	ldr	r2, [pc, #168]	@ (8002834 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 800278c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	221c      	movs	r2, #28
 8002794:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0210 	orr.w	r2, r2, #16
 80027ac:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d002      	beq.n	80027be <HAL_ADCEx_MultiModeStart_DMA+0x122>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	e000      	b.n	80027c0 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 80027be:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	6812      	ldr	r2, [r2, #0]
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d00d      	beq.n	80027e4 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	3340      	adds	r3, #64	@ 0x40
 80027d2:	4619      	mov	r1, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f000 feaa 	bl	8003530 <HAL_DMA_Start_IT>
 80027dc:	4603      	mov	r3, r0
 80027de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027e2:	e017      	b.n	8002814 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027e4:	4b14      	ldr	r3, [pc, #80]	@ (8002838 <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 80027e6:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80027ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ee:	330c      	adds	r3, #12
 80027f0:	4619      	mov	r1, r3
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f000 fe9b 	bl	8003530 <HAL_DMA_Start_IT>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff21 	bl	800264c <LL_ADC_REG_StartConversion>
 800280a:	e003      	b.n	8002814 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002814:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 8002818:	4618      	mov	r0, r3
 800281a:	3780      	adds	r7, #128	@ 0x80
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40022100 	.word	0x40022100
 8002824:	40022000 	.word	0x40022000
 8002828:	fffff0fe 	.word	0xfffff0fe
 800282c:	0800235f 	.word	0x0800235f
 8002830:	08002437 	.word	0x08002437
 8002834:	08002453 	.word	0x08002453
 8002838:	40022300 	.word	0x40022300

0800283c <HAL_ADCEx_MultiModeStop_DMA>:
  *         ADC slave, to properly disable the DMA channel.
  * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b0a0      	sub	sp, #128	@ 0x80
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_ADCEx_MultiModeStop_DMA+0x16>
 800284e:	2302      	movs	r3, #2
 8002850:	e0b2      	b.n	80029b8 <HAL_ADCEx_MultiModeStop_DMA+0x17c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50


  /* 1. Stop potential multimode conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800285a:	2103      	movs	r1, #3
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fbe7 	bl	8002030 <ADC_ConversionStop>
 8002862:	4603      	mov	r3, r0
 8002864:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002868:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800286c:	2b00      	cmp	r3, #0
 800286e:	f040 809d 	bne.w	80029ac <HAL_ADCEx_MultiModeStop_DMA+0x170>
  {
    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	663b      	str	r3, [r7, #96]	@ 0x60
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002876:	2300      	movs	r3, #0
 8002878:	667b      	str	r3, [r7, #100]	@ 0x64

    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a50      	ldr	r2, [pc, #320]	@ (80029c0 <HAL_ADCEx_MultiModeStop_DMA+0x184>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d102      	bne.n	800288a <HAL_ADCEx_MultiModeStop_DMA+0x4e>
 8002884:	4b4f      	ldr	r3, [pc, #316]	@ (80029c4 <HAL_ADCEx_MultiModeStop_DMA+0x188>)
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e001      	b.n	800288e <HAL_ADCEx_MultiModeStop_DMA+0x52>
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]

    if (tmphadcSlave.Instance == NULL)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <HAL_ADCEx_MultiModeStop_DMA+0x70>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e085      	b.n	80029b8 <HAL_ADCEx_MultiModeStop_DMA+0x17c>

    /* Procedure to disable the ADC peripheral: wait for conversions          */
    /* effectively stopped (ADC master and ADC slave), then disable ADC       */

    /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
    tickstart = HAL_GetTick();
 80028ac:	f7fe fc7c 	bl	80011a8 <HAL_GetTick>
 80028b0:	6778      	str	r0, [r7, #116]	@ 0x74

    tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fedd 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 80028ba:	67b8      	str	r0, [r7, #120]	@ 0x78
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80028bc:	e027      	b.n	800290e <HAL_ADCEx_MultiModeStop_DMA+0xd2>
           || (tmphadcSlave_conversion_on_going == 1UL)
          )
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80028be:	f7fe fc73 	bl	80011a8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b05      	cmp	r3, #5
 80028ca:	d91b      	bls.n	8002904 <HAL_ADCEx_MultiModeStop_DMA+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fed0 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 80028d4:	67b8      	str	r0, [r7, #120]	@ 0x78

        if((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff feca 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d002      	beq.n	80028ec <HAL_ADCEx_MultiModeStop_DMA+0xb0>
           || (tmphadcSlave_conversion_on_going == 1UL)
 80028e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10b      	bne.n	8002904 <HAL_ADCEx_MultiModeStop_DMA+0xc8>
          )
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e059      	b.n	80029b8 <HAL_ADCEx_MultiModeStop_DMA+0x17c>
        }
      }

      tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff feb4 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 800290c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff feae 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 8002918:	4603      	mov	r3, r0
           || (tmphadcSlave_conversion_on_going == 1UL)
 800291a:	2b01      	cmp	r3, #1
 800291c:	d0cf      	beq.n	80028be <HAL_ADCEx_MultiModeStop_DMA+0x82>
 800291e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002920:	2b01      	cmp	r3, #1
 8002922:	d0cc      	beq.n	80028be <HAL_ADCEx_MultiModeStop_DMA+0x82>

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    /* Note: DMA channel of ADC slave should be stopped after this function   */
    /*       with HAL_ADC_Stop_DMA() API.                                     */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002928:	4618      	mov	r0, r3
 800292a:	f001 f86b 	bl	8003a04 <HAL_DMA_Abort>
 800292e:	4603      	mov	r3, r0
 8002930:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status == HAL_ERROR)
 8002934:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002938:	2b01      	cmp	r3, #1
 800293a:	d105      	bne.n	8002948 <HAL_ADCEx_MultiModeStop_DMA+0x10c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0210 	bic.w	r2, r2, #16
 8002956:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripherals: master and slave */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
    /* memory a potential failing status.                                     */
    if (tmp_hal_status == HAL_OK)
 8002958:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800295c:	2b00      	cmp	r3, #0
 800295e:	d115      	bne.n	800298c <HAL_ADCEx_MultiModeStop_DMA+0x150>
    {
      tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fc9b 	bl	80022a0 <ADC_Disable>
 800296a:	4603      	mov	r3, r0
 800296c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
      if ((ADC_Disable(hadc) == HAL_OK)           &&
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff fc95 	bl	80022a0 <ADC_Disable>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10f      	bne.n	800299c <HAL_ADCEx_MultiModeStop_DMA+0x160>
 800297c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_ADCEx_MultiModeStop_DMA+0x160>
          (tmphadcSlave_disable_status == HAL_OK))
      {
        tmp_hal_status = HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800298a:	e007      	b.n	800299c <HAL_ADCEx_MultiModeStop_DMA+0x160>
      }
    }
    else
    {
      /* In case of error, attempt to disable ADC master and slave without status assert */
      (void) ADC_Disable(hadc);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff fc87 	bl	80022a0 <ADC_Disable>
      (void) ADC_Disable(&tmphadcSlave);
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fc82 	bl	80022a0 <ADC_Disable>
    }

    /* Set ADC state (ADC master) */
    ADC_STATE_CLR_SET(hadc->State,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029a0:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_ADCEx_MultiModeStop_DMA+0x18c>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	f043 0201 	orr.w	r2, r3, #1
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3780      	adds	r7, #128	@ 0x80
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40022000 	.word	0x40022000
 80029c4:	40022100 	.word	0x40022100
 80029c8:	ffffeefe 	.word	0xffffeefe

080029cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029cc:	b590      	push	{r4, r7, lr}
 80029ce:	b09f      	sub	sp, #124	@ 0x7c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029e6:	2302      	movs	r3, #2
 80029e8:	e080      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a3d      	ldr	r2, [pc, #244]	@ (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d102      	bne.n	8002a0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a04:	4b3c      	ldr	r3, [pc, #240]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	e001      	b.n	8002a0e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a18:	f043 0220 	orr.w	r2, r3, #32
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e05f      	b.n	8002aec <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fe20 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 8002a34:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fe1a 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d141      	bne.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d13e      	bne.n	8002aca <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002a4e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	431a      	orrs	r2, r3
 8002a66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a68:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a6a:	4822      	ldr	r0, [pc, #136]	@ (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a6c:	f7ff fdda 	bl	8002624 <LL_ADC_IsEnabled>
 8002a70:	4604      	mov	r4, r0
 8002a72:	4821      	ldr	r0, [pc, #132]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a74:	f7ff fdd6 	bl	8002624 <LL_ADC_IsEnabled>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4323      	orrs	r3, r4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d12e      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6811      	ldr	r1, [r2, #0]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	6892      	ldr	r2, [r2, #8]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	431a      	orrs	r2, r3
 8002a94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a96:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a98:	e021      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa6:	4813      	ldr	r0, [pc, #76]	@ (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002aa8:	f7ff fdbc 	bl	8002624 <LL_ADC_IsEnabled>
 8002aac:	4604      	mov	r4, r0
 8002aae:	4812      	ldr	r0, [pc, #72]	@ (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ab0:	f7ff fdb8 	bl	8002624 <LL_ADC_IsEnabled>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4323      	orrs	r3, r4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d110      	bne.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ac6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac8:	e009      	b.n	8002ade <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ace:	f043 0220 	orr.w	r2, r3, #32
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002adc:	e000      	b.n	8002ae0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ade:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ae8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	377c      	adds	r7, #124	@ 0x7c
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd90      	pop	{r4, r7, pc}
 8002af4:	40022000 	.word	0x40022000
 8002af8:	40022100 	.word	0x40022100
 8002afc:	40022300 	.word	0x40022300
 8002b00:	fffff0e0 	.word	0xfffff0e0

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b2c:	4b06      	ldr	r3, [pc, #24]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00
 8002b48:	05fa0000 	.word	0x05fa0000

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	@ (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	@ (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	@ 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	@ 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff40 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff90 	bl	8002bf8 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5f 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff33 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffa4 	bl	8002c60 <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002d28:	f3bf 8f5f 	dmb	sy
}
 8002d2c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002d2e:	4b07      	ldr	r3, [pc, #28]	@ (8002d4c <HAL_MPU_Disable+0x28>)
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	4a06      	ldr	r2, [pc, #24]	@ (8002d4c <HAL_MPU_Disable+0x28>)
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d38:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_MPU_Disable+0x2c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	605a      	str	r2, [r3, #4]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000ed00 	.word	0xe000ed00
 8002d50:	e000ed90 	.word	0xe000ed90

08002d54 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d8c <HAL_MPU_Enable+0x38>)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <HAL_MPU_Enable+0x3c>)
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	4a09      	ldr	r2, [pc, #36]	@ (8002d90 <HAL_MPU_Enable+0x3c>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d70:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d72:	f3bf 8f4f 	dsb	sy
}
 8002d76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d78:	f3bf 8f6f 	isb	sy
}
 8002d7c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000ed90 	.word	0xe000ed90
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	785a      	ldrb	r2, [r3, #1]
 8002da0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_MPU_ConfigRegion+0x7c>)
 8002da2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002da4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <HAL_MPU_ConfigRegion+0x7c>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	4a19      	ldr	r2, [pc, #100]	@ (8002e10 <HAL_MPU_ConfigRegion+0x7c>)
 8002daa:	f023 0301 	bic.w	r3, r3, #1
 8002dae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002db0:	4a17      	ldr	r2, [pc, #92]	@ (8002e10 <HAL_MPU_ConfigRegion+0x7c>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7b1b      	ldrb	r3, [r3, #12]
 8002dbc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	7adb      	ldrb	r3, [r3, #11]
 8002dc2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	7a9b      	ldrb	r3, [r3, #10]
 8002dca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002dcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7b5b      	ldrb	r3, [r3, #13]
 8002dd2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002dd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	7b9b      	ldrb	r3, [r3, #14]
 8002dda:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002ddc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7bdb      	ldrb	r3, [r3, #15]
 8002de2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002de4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	7a5b      	ldrb	r3, [r3, #9]
 8002dea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	7a1b      	ldrb	r3, [r3, #8]
 8002df2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002df4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	7812      	ldrb	r2, [r2, #0]
 8002dfa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002dfc:	4a04      	ldr	r2, [pc, #16]	@ (8002e10 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dfe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002e00:	6113      	str	r3, [r2, #16]
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	e000ed90 	.word	0xe000ed90

08002e14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002e1c:	f7fe f9c4 	bl	80011a8 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e37d      	b.n	8003528 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a66      	ldr	r2, [pc, #408]	@ (8002fcc <HAL_DMA_Init+0x1b8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d04a      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a65      	ldr	r2, [pc, #404]	@ (8002fd0 <HAL_DMA_Init+0x1bc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d045      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a63      	ldr	r2, [pc, #396]	@ (8002fd4 <HAL_DMA_Init+0x1c0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d040      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a62      	ldr	r2, [pc, #392]	@ (8002fd8 <HAL_DMA_Init+0x1c4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d03b      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a60      	ldr	r2, [pc, #384]	@ (8002fdc <HAL_DMA_Init+0x1c8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d036      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe0 <HAL_DMA_Init+0x1cc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d031      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe4 <HAL_DMA_Init+0x1d0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d02c      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a5c      	ldr	r2, [pc, #368]	@ (8002fe8 <HAL_DMA_Init+0x1d4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d027      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a5a      	ldr	r2, [pc, #360]	@ (8002fec <HAL_DMA_Init+0x1d8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d022      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a59      	ldr	r2, [pc, #356]	@ (8002ff0 <HAL_DMA_Init+0x1dc>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d01d      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a57      	ldr	r2, [pc, #348]	@ (8002ff4 <HAL_DMA_Init+0x1e0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d018      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a56      	ldr	r2, [pc, #344]	@ (8002ff8 <HAL_DMA_Init+0x1e4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d013      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a54      	ldr	r2, [pc, #336]	@ (8002ffc <HAL_DMA_Init+0x1e8>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a53      	ldr	r2, [pc, #332]	@ (8003000 <HAL_DMA_Init+0x1ec>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a51      	ldr	r2, [pc, #324]	@ (8003004 <HAL_DMA_Init+0x1f0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_DMA_Init+0xb8>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a50      	ldr	r2, [pc, #320]	@ (8003008 <HAL_DMA_Init+0x1f4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d101      	bne.n	8002ed0 <HAL_DMA_Init+0xbc>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <HAL_DMA_Init+0xbe>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 813c 	beq.w	8003150 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a37      	ldr	r2, [pc, #220]	@ (8002fcc <HAL_DMA_Init+0x1b8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d04a      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a36      	ldr	r2, [pc, #216]	@ (8002fd0 <HAL_DMA_Init+0x1bc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d045      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a34      	ldr	r2, [pc, #208]	@ (8002fd4 <HAL_DMA_Init+0x1c0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d040      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <HAL_DMA_Init+0x1c4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d03b      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a31      	ldr	r2, [pc, #196]	@ (8002fdc <HAL_DMA_Init+0x1c8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d036      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a30      	ldr	r2, [pc, #192]	@ (8002fe0 <HAL_DMA_Init+0x1cc>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d031      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe4 <HAL_DMA_Init+0x1d0>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d02c      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe8 <HAL_DMA_Init+0x1d4>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d027      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8002fec <HAL_DMA_Init+0x1d8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d022      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff0 <HAL_DMA_Init+0x1dc>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d01d      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a28      	ldr	r2, [pc, #160]	@ (8002ff4 <HAL_DMA_Init+0x1e0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d018      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a27      	ldr	r2, [pc, #156]	@ (8002ff8 <HAL_DMA_Init+0x1e4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d013      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a25      	ldr	r2, [pc, #148]	@ (8002ffc <HAL_DMA_Init+0x1e8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a24      	ldr	r2, [pc, #144]	@ (8003000 <HAL_DMA_Init+0x1ec>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a22      	ldr	r2, [pc, #136]	@ (8003004 <HAL_DMA_Init+0x1f0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_DMA_Init+0x174>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	@ (8003008 <HAL_DMA_Init+0x1f4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d108      	bne.n	8002f9a <HAL_DMA_Init+0x186>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e007      	b.n	8002faa <HAL_DMA_Init+0x196>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0201 	bic.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002faa:	e02f      	b.n	800300c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fac:	f7fe f8fc 	bl	80011a8 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b05      	cmp	r3, #5
 8002fb8:	d928      	bls.n	800300c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e2ad      	b.n	8003528 <HAL_DMA_Init+0x714>
 8002fcc:	40020010 	.word	0x40020010
 8002fd0:	40020028 	.word	0x40020028
 8002fd4:	40020040 	.word	0x40020040
 8002fd8:	40020058 	.word	0x40020058
 8002fdc:	40020070 	.word	0x40020070
 8002fe0:	40020088 	.word	0x40020088
 8002fe4:	400200a0 	.word	0x400200a0
 8002fe8:	400200b8 	.word	0x400200b8
 8002fec:	40020410 	.word	0x40020410
 8002ff0:	40020428 	.word	0x40020428
 8002ff4:	40020440 	.word	0x40020440
 8002ff8:	40020458 	.word	0x40020458
 8002ffc:	40020470 	.word	0x40020470
 8003000:	40020488 	.word	0x40020488
 8003004:	400204a0 	.word	0x400204a0
 8003008:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1c8      	bne.n	8002fac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4b73      	ldr	r3, [pc, #460]	@ (80031f4 <HAL_DMA_Init+0x3e0>)
 8003026:	4013      	ands	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003032:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	4313      	orrs	r3, r2
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b28      	cmp	r3, #40	@ 0x28
 8003076:	d903      	bls.n	8003080 <HAL_DMA_Init+0x26c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	2b2e      	cmp	r3, #46	@ 0x2e
 800307e:	d91f      	bls.n	80030c0 <HAL_DMA_Init+0x2ac>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b3e      	cmp	r3, #62	@ 0x3e
 8003086:	d903      	bls.n	8003090 <HAL_DMA_Init+0x27c>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b42      	cmp	r3, #66	@ 0x42
 800308e:	d917      	bls.n	80030c0 <HAL_DMA_Init+0x2ac>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b46      	cmp	r3, #70	@ 0x46
 8003096:	d903      	bls.n	80030a0 <HAL_DMA_Init+0x28c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b48      	cmp	r3, #72	@ 0x48
 800309e:	d90f      	bls.n	80030c0 <HAL_DMA_Init+0x2ac>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b4e      	cmp	r3, #78	@ 0x4e
 80030a6:	d903      	bls.n	80030b0 <HAL_DMA_Init+0x29c>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b52      	cmp	r3, #82	@ 0x52
 80030ae:	d907      	bls.n	80030c0 <HAL_DMA_Init+0x2ac>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b73      	cmp	r3, #115	@ 0x73
 80030b6:	d905      	bls.n	80030c4 <HAL_DMA_Init+0x2b0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b77      	cmp	r3, #119	@ 0x77
 80030be:	d801      	bhi.n	80030c4 <HAL_DMA_Init+0x2b0>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <HAL_DMA_Init+0x2b2>
 80030c4:	2300      	movs	r3, #0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030d0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f023 0307 	bic.w	r3, r3, #7
 80030e8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d117      	bne.n	800312c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f002 fbd4 	bl	80058bc <DMA_CheckFifoParam>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2240      	movs	r2, #64	@ 0x40
 800311e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e1fd      	b.n	8003528 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f002 fb0f 	bl	8005758 <DMA_CalcBaseAndBitshift>
 800313a:	4603      	mov	r3, r0
 800313c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	223f      	movs	r2, #63	@ 0x3f
 8003148:	409a      	lsls	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	e0fd      	b.n	800334c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a28      	ldr	r2, [pc, #160]	@ (80031f8 <HAL_DMA_Init+0x3e4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d04a      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a27      	ldr	r2, [pc, #156]	@ (80031fc <HAL_DMA_Init+0x3e8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d045      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a25      	ldr	r2, [pc, #148]	@ (8003200 <HAL_DMA_Init+0x3ec>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d040      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a24      	ldr	r2, [pc, #144]	@ (8003204 <HAL_DMA_Init+0x3f0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d03b      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a22      	ldr	r2, [pc, #136]	@ (8003208 <HAL_DMA_Init+0x3f4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d036      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a21      	ldr	r2, [pc, #132]	@ (800320c <HAL_DMA_Init+0x3f8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d031      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1f      	ldr	r2, [pc, #124]	@ (8003210 <HAL_DMA_Init+0x3fc>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d02c      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1e      	ldr	r2, [pc, #120]	@ (8003214 <HAL_DMA_Init+0x400>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d027      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003218 <HAL_DMA_Init+0x404>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d022      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a1b      	ldr	r2, [pc, #108]	@ (800321c <HAL_DMA_Init+0x408>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d01d      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a19      	ldr	r2, [pc, #100]	@ (8003220 <HAL_DMA_Init+0x40c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d018      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a18      	ldr	r2, [pc, #96]	@ (8003224 <HAL_DMA_Init+0x410>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d013      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a16      	ldr	r2, [pc, #88]	@ (8003228 <HAL_DMA_Init+0x414>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00e      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a15      	ldr	r2, [pc, #84]	@ (800322c <HAL_DMA_Init+0x418>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a13      	ldr	r2, [pc, #76]	@ (8003230 <HAL_DMA_Init+0x41c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d004      	beq.n	80031f0 <HAL_DMA_Init+0x3dc>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a12      	ldr	r2, [pc, #72]	@ (8003234 <HAL_DMA_Init+0x420>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d123      	bne.n	8003238 <HAL_DMA_Init+0x424>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e022      	b.n	800323a <HAL_DMA_Init+0x426>
 80031f4:	fe10803f 	.word	0xfe10803f
 80031f8:	48022c08 	.word	0x48022c08
 80031fc:	48022c1c 	.word	0x48022c1c
 8003200:	48022c30 	.word	0x48022c30
 8003204:	48022c44 	.word	0x48022c44
 8003208:	48022c58 	.word	0x48022c58
 800320c:	48022c6c 	.word	0x48022c6c
 8003210:	48022c80 	.word	0x48022c80
 8003214:	48022c94 	.word	0x48022c94
 8003218:	58025408 	.word	0x58025408
 800321c:	5802541c 	.word	0x5802541c
 8003220:	58025430 	.word	0x58025430
 8003224:	58025444 	.word	0x58025444
 8003228:	58025458 	.word	0x58025458
 800322c:	5802546c 	.word	0x5802546c
 8003230:	58025480 	.word	0x58025480
 8003234:	58025494 	.word	0x58025494
 8003238:	2300      	movs	r3, #0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d07d      	beq.n	800333a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7f      	ldr	r2, [pc, #508]	@ (8003440 <HAL_DMA_Init+0x62c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d021      	beq.n	800328c <HAL_DMA_Init+0x478>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a7d      	ldr	r2, [pc, #500]	@ (8003444 <HAL_DMA_Init+0x630>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01c      	beq.n	800328c <HAL_DMA_Init+0x478>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7c      	ldr	r2, [pc, #496]	@ (8003448 <HAL_DMA_Init+0x634>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d017      	beq.n	800328c <HAL_DMA_Init+0x478>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a7a      	ldr	r2, [pc, #488]	@ (800344c <HAL_DMA_Init+0x638>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d012      	beq.n	800328c <HAL_DMA_Init+0x478>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a79      	ldr	r2, [pc, #484]	@ (8003450 <HAL_DMA_Init+0x63c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00d      	beq.n	800328c <HAL_DMA_Init+0x478>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a77      	ldr	r2, [pc, #476]	@ (8003454 <HAL_DMA_Init+0x640>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d008      	beq.n	800328c <HAL_DMA_Init+0x478>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a76      	ldr	r2, [pc, #472]	@ (8003458 <HAL_DMA_Init+0x644>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d003      	beq.n	800328c <HAL_DMA_Init+0x478>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a74      	ldr	r2, [pc, #464]	@ (800345c <HAL_DMA_Init+0x648>)
 800328a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80032a4:	697a      	ldr	r2, [r7, #20]
 80032a6:	4b6e      	ldr	r3, [pc, #440]	@ (8003460 <HAL_DMA_Init+0x64c>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b40      	cmp	r3, #64	@ 0x40
 80032b2:	d008      	beq.n	80032c6 <HAL_DMA_Init+0x4b2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b80      	cmp	r3, #128	@ 0x80
 80032ba:	d102      	bne.n	80032c2 <HAL_DMA_Init+0x4ae>
 80032bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032c0:	e002      	b.n	80032c8 <HAL_DMA_Init+0x4b4>
 80032c2:	2300      	movs	r3, #0
 80032c4:	e000      	b.n	80032c8 <HAL_DMA_Init+0x4b4>
 80032c6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68d2      	ldr	r2, [r2, #12]
 80032cc:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032ce:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80032d6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80032de:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80032e6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80032ee:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80032f6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	4b55      	ldr	r3, [pc, #340]	@ (8003464 <HAL_DMA_Init+0x650>)
 800330e:	4413      	add	r3, r2
 8003310:	4a55      	ldr	r2, [pc, #340]	@ (8003468 <HAL_DMA_Init+0x654>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	009a      	lsls	r2, r3, #2
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f002 fa1a 	bl	8005758 <DMA_CalcBaseAndBitshift>
 8003324:	4603      	mov	r3, r0
 8003326:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2201      	movs	r2, #1
 8003332:	409a      	lsls	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	605a      	str	r2, [r3, #4]
 8003338:	e008      	b.n	800334c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2240      	movs	r2, #64	@ 0x40
 800333e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2203      	movs	r2, #3
 8003344:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0ed      	b.n	8003528 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a46      	ldr	r2, [pc, #280]	@ (800346c <HAL_DMA_Init+0x658>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d072      	beq.n	800343c <HAL_DMA_Init+0x628>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a45      	ldr	r2, [pc, #276]	@ (8003470 <HAL_DMA_Init+0x65c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d06d      	beq.n	800343c <HAL_DMA_Init+0x628>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a43      	ldr	r2, [pc, #268]	@ (8003474 <HAL_DMA_Init+0x660>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d068      	beq.n	800343c <HAL_DMA_Init+0x628>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a42      	ldr	r2, [pc, #264]	@ (8003478 <HAL_DMA_Init+0x664>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d063      	beq.n	800343c <HAL_DMA_Init+0x628>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a40      	ldr	r2, [pc, #256]	@ (800347c <HAL_DMA_Init+0x668>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d05e      	beq.n	800343c <HAL_DMA_Init+0x628>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a3f      	ldr	r2, [pc, #252]	@ (8003480 <HAL_DMA_Init+0x66c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d059      	beq.n	800343c <HAL_DMA_Init+0x628>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a3d      	ldr	r2, [pc, #244]	@ (8003484 <HAL_DMA_Init+0x670>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d054      	beq.n	800343c <HAL_DMA_Init+0x628>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a3c      	ldr	r2, [pc, #240]	@ (8003488 <HAL_DMA_Init+0x674>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04f      	beq.n	800343c <HAL_DMA_Init+0x628>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a3a      	ldr	r2, [pc, #232]	@ (800348c <HAL_DMA_Init+0x678>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d04a      	beq.n	800343c <HAL_DMA_Init+0x628>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a39      	ldr	r2, [pc, #228]	@ (8003490 <HAL_DMA_Init+0x67c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d045      	beq.n	800343c <HAL_DMA_Init+0x628>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a37      	ldr	r2, [pc, #220]	@ (8003494 <HAL_DMA_Init+0x680>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d040      	beq.n	800343c <HAL_DMA_Init+0x628>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a36      	ldr	r2, [pc, #216]	@ (8003498 <HAL_DMA_Init+0x684>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d03b      	beq.n	800343c <HAL_DMA_Init+0x628>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a34      	ldr	r2, [pc, #208]	@ (800349c <HAL_DMA_Init+0x688>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d036      	beq.n	800343c <HAL_DMA_Init+0x628>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a33      	ldr	r2, [pc, #204]	@ (80034a0 <HAL_DMA_Init+0x68c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d031      	beq.n	800343c <HAL_DMA_Init+0x628>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a31      	ldr	r2, [pc, #196]	@ (80034a4 <HAL_DMA_Init+0x690>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02c      	beq.n	800343c <HAL_DMA_Init+0x628>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a30      	ldr	r2, [pc, #192]	@ (80034a8 <HAL_DMA_Init+0x694>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d027      	beq.n	800343c <HAL_DMA_Init+0x628>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a13      	ldr	r2, [pc, #76]	@ (8003440 <HAL_DMA_Init+0x62c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d022      	beq.n	800343c <HAL_DMA_Init+0x628>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a12      	ldr	r2, [pc, #72]	@ (8003444 <HAL_DMA_Init+0x630>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d01d      	beq.n	800343c <HAL_DMA_Init+0x628>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a10      	ldr	r2, [pc, #64]	@ (8003448 <HAL_DMA_Init+0x634>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d018      	beq.n	800343c <HAL_DMA_Init+0x628>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a0f      	ldr	r2, [pc, #60]	@ (800344c <HAL_DMA_Init+0x638>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_DMA_Init+0x628>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0d      	ldr	r2, [pc, #52]	@ (8003450 <HAL_DMA_Init+0x63c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_DMA_Init+0x628>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a0c      	ldr	r2, [pc, #48]	@ (8003454 <HAL_DMA_Init+0x640>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_DMA_Init+0x628>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <HAL_DMA_Init+0x644>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_DMA_Init+0x628>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a09      	ldr	r2, [pc, #36]	@ (800345c <HAL_DMA_Init+0x648>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d137      	bne.n	80034ac <HAL_DMA_Init+0x698>
 800343c:	2301      	movs	r3, #1
 800343e:	e036      	b.n	80034ae <HAL_DMA_Init+0x69a>
 8003440:	58025408 	.word	0x58025408
 8003444:	5802541c 	.word	0x5802541c
 8003448:	58025430 	.word	0x58025430
 800344c:	58025444 	.word	0x58025444
 8003450:	58025458 	.word	0x58025458
 8003454:	5802546c 	.word	0x5802546c
 8003458:	58025480 	.word	0x58025480
 800345c:	58025494 	.word	0x58025494
 8003460:	fffe000f 	.word	0xfffe000f
 8003464:	a7fdabf8 	.word	0xa7fdabf8
 8003468:	cccccccd 	.word	0xcccccccd
 800346c:	40020010 	.word	0x40020010
 8003470:	40020028 	.word	0x40020028
 8003474:	40020040 	.word	0x40020040
 8003478:	40020058 	.word	0x40020058
 800347c:	40020070 	.word	0x40020070
 8003480:	40020088 	.word	0x40020088
 8003484:	400200a0 	.word	0x400200a0
 8003488:	400200b8 	.word	0x400200b8
 800348c:	40020410 	.word	0x40020410
 8003490:	40020428 	.word	0x40020428
 8003494:	40020440 	.word	0x40020440
 8003498:	40020458 	.word	0x40020458
 800349c:	40020470 	.word	0x40020470
 80034a0:	40020488 	.word	0x40020488
 80034a4:	400204a0 	.word	0x400204a0
 80034a8:	400204b8 	.word	0x400204b8
 80034ac:	2300      	movs	r3, #0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d032      	beq.n	8003518 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f002 fa7e 	bl	80059b4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b80      	cmp	r3, #128	@ 0x80
 80034be:	d102      	bne.n	80034c6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80034da:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d010      	beq.n	8003506 <HAL_DMA_Init+0x6f2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d80c      	bhi.n	8003506 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f002 fafb 	bl	8005ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003502:	605a      	str	r2, [r3, #4]
 8003504:	e008      	b.n	8003518 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e226      	b.n	800399a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_DMA_Start_IT+0x2a>
 8003556:	2302      	movs	r3, #2
 8003558:	e21f      	b.n	800399a <HAL_DMA_Start_IT+0x46a>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	f040 820a 	bne.w	8003984 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a68      	ldr	r2, [pc, #416]	@ (8003724 <HAL_DMA_Start_IT+0x1f4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d04a      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a66      	ldr	r2, [pc, #408]	@ (8003728 <HAL_DMA_Start_IT+0x1f8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d045      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_DMA_Start_IT+0x1fc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d040      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a63      	ldr	r2, [pc, #396]	@ (8003730 <HAL_DMA_Start_IT+0x200>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d03b      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a62      	ldr	r2, [pc, #392]	@ (8003734 <HAL_DMA_Start_IT+0x204>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d036      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a60      	ldr	r2, [pc, #384]	@ (8003738 <HAL_DMA_Start_IT+0x208>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d031      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a5f      	ldr	r2, [pc, #380]	@ (800373c <HAL_DMA_Start_IT+0x20c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d02c      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003740 <HAL_DMA_Start_IT+0x210>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d027      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003744 <HAL_DMA_Start_IT+0x214>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d022      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003748 <HAL_DMA_Start_IT+0x218>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01d      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a59      	ldr	r2, [pc, #356]	@ (800374c <HAL_DMA_Start_IT+0x21c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d018      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a57      	ldr	r2, [pc, #348]	@ (8003750 <HAL_DMA_Start_IT+0x220>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d013      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a56      	ldr	r2, [pc, #344]	@ (8003754 <HAL_DMA_Start_IT+0x224>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00e      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a54      	ldr	r2, [pc, #336]	@ (8003758 <HAL_DMA_Start_IT+0x228>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d009      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a53      	ldr	r2, [pc, #332]	@ (800375c <HAL_DMA_Start_IT+0x22c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d004      	beq.n	800361e <HAL_DMA_Start_IT+0xee>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a51      	ldr	r2, [pc, #324]	@ (8003760 <HAL_DMA_Start_IT+0x230>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d108      	bne.n	8003630 <HAL_DMA_Start_IT+0x100>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	e007      	b.n	8003640 <HAL_DMA_Start_IT+0x110>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f001 fea2 	bl	8005390 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a34      	ldr	r2, [pc, #208]	@ (8003724 <HAL_DMA_Start_IT+0x1f4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04a      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a33      	ldr	r2, [pc, #204]	@ (8003728 <HAL_DMA_Start_IT+0x1f8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d045      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a31      	ldr	r2, [pc, #196]	@ (800372c <HAL_DMA_Start_IT+0x1fc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d040      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a30      	ldr	r2, [pc, #192]	@ (8003730 <HAL_DMA_Start_IT+0x200>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d03b      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a2e      	ldr	r2, [pc, #184]	@ (8003734 <HAL_DMA_Start_IT+0x204>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d036      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2d      	ldr	r2, [pc, #180]	@ (8003738 <HAL_DMA_Start_IT+0x208>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d031      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2b      	ldr	r2, [pc, #172]	@ (800373c <HAL_DMA_Start_IT+0x20c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02c      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2a      	ldr	r2, [pc, #168]	@ (8003740 <HAL_DMA_Start_IT+0x210>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d027      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a28      	ldr	r2, [pc, #160]	@ (8003744 <HAL_DMA_Start_IT+0x214>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a27      	ldr	r2, [pc, #156]	@ (8003748 <HAL_DMA_Start_IT+0x218>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d01d      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a25      	ldr	r2, [pc, #148]	@ (800374c <HAL_DMA_Start_IT+0x21c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <HAL_DMA_Start_IT+0x220>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a22      	ldr	r2, [pc, #136]	@ (8003754 <HAL_DMA_Start_IT+0x224>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a21      	ldr	r2, [pc, #132]	@ (8003758 <HAL_DMA_Start_IT+0x228>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1f      	ldr	r2, [pc, #124]	@ (800375c <HAL_DMA_Start_IT+0x22c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_DMA_Start_IT+0x1bc>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003760 <HAL_DMA_Start_IT+0x230>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d101      	bne.n	80036f0 <HAL_DMA_Start_IT+0x1c0>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_DMA_Start_IT+0x1c2>
 80036f0:	2300      	movs	r3, #0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d036      	beq.n	8003764 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f023 021e 	bic.w	r2, r3, #30
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f042 0216 	orr.w	r2, r2, #22
 8003708:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d03e      	beq.n	8003790 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f042 0208 	orr.w	r2, r2, #8
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e035      	b.n	8003790 <HAL_DMA_Start_IT+0x260>
 8003724:	40020010 	.word	0x40020010
 8003728:	40020028 	.word	0x40020028
 800372c:	40020040 	.word	0x40020040
 8003730:	40020058 	.word	0x40020058
 8003734:	40020070 	.word	0x40020070
 8003738:	40020088 	.word	0x40020088
 800373c:	400200a0 	.word	0x400200a0
 8003740:	400200b8 	.word	0x400200b8
 8003744:	40020410 	.word	0x40020410
 8003748:	40020428 	.word	0x40020428
 800374c:	40020440 	.word	0x40020440
 8003750:	40020458 	.word	0x40020458
 8003754:	40020470 	.word	0x40020470
 8003758:	40020488 	.word	0x40020488
 800375c:	400204a0 	.word	0x400204a0
 8003760:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 020e 	bic.w	r2, r3, #14
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 020a 	orr.w	r2, r2, #10
 8003776:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d007      	beq.n	8003790 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0204 	orr.w	r2, r2, #4
 800378e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a83      	ldr	r2, [pc, #524]	@ (80039a4 <HAL_DMA_Start_IT+0x474>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d072      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a82      	ldr	r2, [pc, #520]	@ (80039a8 <HAL_DMA_Start_IT+0x478>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d06d      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a80      	ldr	r2, [pc, #512]	@ (80039ac <HAL_DMA_Start_IT+0x47c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d068      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7f      	ldr	r2, [pc, #508]	@ (80039b0 <HAL_DMA_Start_IT+0x480>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d063      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a7d      	ldr	r2, [pc, #500]	@ (80039b4 <HAL_DMA_Start_IT+0x484>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d05e      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a7c      	ldr	r2, [pc, #496]	@ (80039b8 <HAL_DMA_Start_IT+0x488>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d059      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a7a      	ldr	r2, [pc, #488]	@ (80039bc <HAL_DMA_Start_IT+0x48c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d054      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a79      	ldr	r2, [pc, #484]	@ (80039c0 <HAL_DMA_Start_IT+0x490>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d04f      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a77      	ldr	r2, [pc, #476]	@ (80039c4 <HAL_DMA_Start_IT+0x494>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d04a      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a76      	ldr	r2, [pc, #472]	@ (80039c8 <HAL_DMA_Start_IT+0x498>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d045      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a74      	ldr	r2, [pc, #464]	@ (80039cc <HAL_DMA_Start_IT+0x49c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d040      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a73      	ldr	r2, [pc, #460]	@ (80039d0 <HAL_DMA_Start_IT+0x4a0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d03b      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a71      	ldr	r2, [pc, #452]	@ (80039d4 <HAL_DMA_Start_IT+0x4a4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d036      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a70      	ldr	r2, [pc, #448]	@ (80039d8 <HAL_DMA_Start_IT+0x4a8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d031      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a6e      	ldr	r2, [pc, #440]	@ (80039dc <HAL_DMA_Start_IT+0x4ac>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d02c      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6d      	ldr	r2, [pc, #436]	@ (80039e0 <HAL_DMA_Start_IT+0x4b0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d027      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a6b      	ldr	r2, [pc, #428]	@ (80039e4 <HAL_DMA_Start_IT+0x4b4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d022      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6a      	ldr	r2, [pc, #424]	@ (80039e8 <HAL_DMA_Start_IT+0x4b8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d01d      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a68      	ldr	r2, [pc, #416]	@ (80039ec <HAL_DMA_Start_IT+0x4bc>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d018      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a67      	ldr	r2, [pc, #412]	@ (80039f0 <HAL_DMA_Start_IT+0x4c0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d013      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a65      	ldr	r2, [pc, #404]	@ (80039f4 <HAL_DMA_Start_IT+0x4c4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00e      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a64      	ldr	r2, [pc, #400]	@ (80039f8 <HAL_DMA_Start_IT+0x4c8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d009      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a62      	ldr	r2, [pc, #392]	@ (80039fc <HAL_DMA_Start_IT+0x4cc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_DMA_Start_IT+0x350>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a61      	ldr	r2, [pc, #388]	@ (8003a00 <HAL_DMA_Start_IT+0x4d0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d101      	bne.n	8003884 <HAL_DMA_Start_IT+0x354>
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_DMA_Start_IT+0x356>
 8003884:	2300      	movs	r3, #0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01a      	beq.n	80038c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d007      	beq.n	80038c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a37      	ldr	r2, [pc, #220]	@ (80039a4 <HAL_DMA_Start_IT+0x474>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d04a      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a36      	ldr	r2, [pc, #216]	@ (80039a8 <HAL_DMA_Start_IT+0x478>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d045      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a34      	ldr	r2, [pc, #208]	@ (80039ac <HAL_DMA_Start_IT+0x47c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d040      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a33      	ldr	r2, [pc, #204]	@ (80039b0 <HAL_DMA_Start_IT+0x480>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d03b      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a31      	ldr	r2, [pc, #196]	@ (80039b4 <HAL_DMA_Start_IT+0x484>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d036      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a30      	ldr	r2, [pc, #192]	@ (80039b8 <HAL_DMA_Start_IT+0x488>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d031      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a2e      	ldr	r2, [pc, #184]	@ (80039bc <HAL_DMA_Start_IT+0x48c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d02c      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a2d      	ldr	r2, [pc, #180]	@ (80039c0 <HAL_DMA_Start_IT+0x490>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d027      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a2b      	ldr	r2, [pc, #172]	@ (80039c4 <HAL_DMA_Start_IT+0x494>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d022      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a2a      	ldr	r2, [pc, #168]	@ (80039c8 <HAL_DMA_Start_IT+0x498>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d01d      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a28      	ldr	r2, [pc, #160]	@ (80039cc <HAL_DMA_Start_IT+0x49c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d018      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a27      	ldr	r2, [pc, #156]	@ (80039d0 <HAL_DMA_Start_IT+0x4a0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d013      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a25      	ldr	r2, [pc, #148]	@ (80039d4 <HAL_DMA_Start_IT+0x4a4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00e      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a24      	ldr	r2, [pc, #144]	@ (80039d8 <HAL_DMA_Start_IT+0x4a8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d009      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a22      	ldr	r2, [pc, #136]	@ (80039dc <HAL_DMA_Start_IT+0x4ac>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d004      	beq.n	8003960 <HAL_DMA_Start_IT+0x430>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a21      	ldr	r2, [pc, #132]	@ (80039e0 <HAL_DMA_Start_IT+0x4b0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d108      	bne.n	8003972 <HAL_DMA_Start_IT+0x442>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e012      	b.n	8003998 <HAL_DMA_Start_IT+0x468>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e009      	b.n	8003998 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800398a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003998:	7dfb      	ldrb	r3, [r7, #23]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40020010 	.word	0x40020010
 80039a8:	40020028 	.word	0x40020028
 80039ac:	40020040 	.word	0x40020040
 80039b0:	40020058 	.word	0x40020058
 80039b4:	40020070 	.word	0x40020070
 80039b8:	40020088 	.word	0x40020088
 80039bc:	400200a0 	.word	0x400200a0
 80039c0:	400200b8 	.word	0x400200b8
 80039c4:	40020410 	.word	0x40020410
 80039c8:	40020428 	.word	0x40020428
 80039cc:	40020440 	.word	0x40020440
 80039d0:	40020458 	.word	0x40020458
 80039d4:	40020470 	.word	0x40020470
 80039d8:	40020488 	.word	0x40020488
 80039dc:	400204a0 	.word	0x400204a0
 80039e0:	400204b8 	.word	0x400204b8
 80039e4:	58025408 	.word	0x58025408
 80039e8:	5802541c 	.word	0x5802541c
 80039ec:	58025430 	.word	0x58025430
 80039f0:	58025444 	.word	0x58025444
 80039f4:	58025458 	.word	0x58025458
 80039f8:	5802546c 	.word	0x5802546c
 80039fc:	58025480 	.word	0x58025480
 8003a00:	58025494 	.word	0x58025494

08003a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7fd fbcc 	bl	80011a8 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e2dc      	b.n	8003fd6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d008      	beq.n	8003a3a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2280      	movs	r2, #128	@ 0x80
 8003a2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e2cd      	b.n	8003fd6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a76      	ldr	r2, [pc, #472]	@ (8003c18 <HAL_DMA_Abort+0x214>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d04a      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a74      	ldr	r2, [pc, #464]	@ (8003c1c <HAL_DMA_Abort+0x218>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d045      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a73      	ldr	r2, [pc, #460]	@ (8003c20 <HAL_DMA_Abort+0x21c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d040      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a71      	ldr	r2, [pc, #452]	@ (8003c24 <HAL_DMA_Abort+0x220>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d03b      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a70      	ldr	r2, [pc, #448]	@ (8003c28 <HAL_DMA_Abort+0x224>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d036      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a6e      	ldr	r2, [pc, #440]	@ (8003c2c <HAL_DMA_Abort+0x228>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d031      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6d      	ldr	r2, [pc, #436]	@ (8003c30 <HAL_DMA_Abort+0x22c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d02c      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a6b      	ldr	r2, [pc, #428]	@ (8003c34 <HAL_DMA_Abort+0x230>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d027      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a6a      	ldr	r2, [pc, #424]	@ (8003c38 <HAL_DMA_Abort+0x234>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d022      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a68      	ldr	r2, [pc, #416]	@ (8003c3c <HAL_DMA_Abort+0x238>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01d      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a67      	ldr	r2, [pc, #412]	@ (8003c40 <HAL_DMA_Abort+0x23c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d018      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a65      	ldr	r2, [pc, #404]	@ (8003c44 <HAL_DMA_Abort+0x240>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a64      	ldr	r2, [pc, #400]	@ (8003c48 <HAL_DMA_Abort+0x244>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a62      	ldr	r2, [pc, #392]	@ (8003c4c <HAL_DMA_Abort+0x248>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a61      	ldr	r2, [pc, #388]	@ (8003c50 <HAL_DMA_Abort+0x24c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_DMA_Abort+0xd6>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a5f      	ldr	r2, [pc, #380]	@ (8003c54 <HAL_DMA_Abort+0x250>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d101      	bne.n	8003ade <HAL_DMA_Abort+0xda>
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_DMA_Abort+0xdc>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 021e 	bic.w	r2, r2, #30
 8003af2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b02:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e00a      	b.n	8003b22 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 020e 	bic.w	r2, r2, #14
 8003b1a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a3c      	ldr	r2, [pc, #240]	@ (8003c18 <HAL_DMA_Abort+0x214>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d072      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a3a      	ldr	r2, [pc, #232]	@ (8003c1c <HAL_DMA_Abort+0x218>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d06d      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a39      	ldr	r2, [pc, #228]	@ (8003c20 <HAL_DMA_Abort+0x21c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d068      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a37      	ldr	r2, [pc, #220]	@ (8003c24 <HAL_DMA_Abort+0x220>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d063      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a36      	ldr	r2, [pc, #216]	@ (8003c28 <HAL_DMA_Abort+0x224>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d05e      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a34      	ldr	r2, [pc, #208]	@ (8003c2c <HAL_DMA_Abort+0x228>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d059      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a33      	ldr	r2, [pc, #204]	@ (8003c30 <HAL_DMA_Abort+0x22c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d054      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a31      	ldr	r2, [pc, #196]	@ (8003c34 <HAL_DMA_Abort+0x230>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d04f      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a30      	ldr	r2, [pc, #192]	@ (8003c38 <HAL_DMA_Abort+0x234>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d04a      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a2e      	ldr	r2, [pc, #184]	@ (8003c3c <HAL_DMA_Abort+0x238>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d045      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c40 <HAL_DMA_Abort+0x23c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d040      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a2b      	ldr	r2, [pc, #172]	@ (8003c44 <HAL_DMA_Abort+0x240>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d03b      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c48 <HAL_DMA_Abort+0x244>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d036      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a28      	ldr	r2, [pc, #160]	@ (8003c4c <HAL_DMA_Abort+0x248>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d031      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a27      	ldr	r2, [pc, #156]	@ (8003c50 <HAL_DMA_Abort+0x24c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d02c      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a25      	ldr	r2, [pc, #148]	@ (8003c54 <HAL_DMA_Abort+0x250>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d027      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a24      	ldr	r2, [pc, #144]	@ (8003c58 <HAL_DMA_Abort+0x254>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d022      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a22      	ldr	r2, [pc, #136]	@ (8003c5c <HAL_DMA_Abort+0x258>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d01d      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a21      	ldr	r2, [pc, #132]	@ (8003c60 <HAL_DMA_Abort+0x25c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c64 <HAL_DMA_Abort+0x260>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d013      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1e      	ldr	r2, [pc, #120]	@ (8003c68 <HAL_DMA_Abort+0x264>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c6c <HAL_DMA_Abort+0x268>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1b      	ldr	r2, [pc, #108]	@ (8003c70 <HAL_DMA_Abort+0x26c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_DMA_Abort+0x20e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a19      	ldr	r2, [pc, #100]	@ (8003c74 <HAL_DMA_Abort+0x270>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d132      	bne.n	8003c78 <HAL_DMA_Abort+0x274>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e031      	b.n	8003c7a <HAL_DMA_Abort+0x276>
 8003c16:	bf00      	nop
 8003c18:	40020010 	.word	0x40020010
 8003c1c:	40020028 	.word	0x40020028
 8003c20:	40020040 	.word	0x40020040
 8003c24:	40020058 	.word	0x40020058
 8003c28:	40020070 	.word	0x40020070
 8003c2c:	40020088 	.word	0x40020088
 8003c30:	400200a0 	.word	0x400200a0
 8003c34:	400200b8 	.word	0x400200b8
 8003c38:	40020410 	.word	0x40020410
 8003c3c:	40020428 	.word	0x40020428
 8003c40:	40020440 	.word	0x40020440
 8003c44:	40020458 	.word	0x40020458
 8003c48:	40020470 	.word	0x40020470
 8003c4c:	40020488 	.word	0x40020488
 8003c50:	400204a0 	.word	0x400204a0
 8003c54:	400204b8 	.word	0x400204b8
 8003c58:	58025408 	.word	0x58025408
 8003c5c:	5802541c 	.word	0x5802541c
 8003c60:	58025430 	.word	0x58025430
 8003c64:	58025444 	.word	0x58025444
 8003c68:	58025458 	.word	0x58025458
 8003c6c:	5802546c 	.word	0x5802546c
 8003c70:	58025480 	.word	0x58025480
 8003c74:	58025494 	.word	0x58025494
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a6d      	ldr	r2, [pc, #436]	@ (8003e48 <HAL_DMA_Abort+0x444>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d04a      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6b      	ldr	r2, [pc, #428]	@ (8003e4c <HAL_DMA_Abort+0x448>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d045      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a6a      	ldr	r2, [pc, #424]	@ (8003e50 <HAL_DMA_Abort+0x44c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d040      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a68      	ldr	r2, [pc, #416]	@ (8003e54 <HAL_DMA_Abort+0x450>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d03b      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a67      	ldr	r2, [pc, #412]	@ (8003e58 <HAL_DMA_Abort+0x454>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d036      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a65      	ldr	r2, [pc, #404]	@ (8003e5c <HAL_DMA_Abort+0x458>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d031      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a64      	ldr	r2, [pc, #400]	@ (8003e60 <HAL_DMA_Abort+0x45c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d02c      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a62      	ldr	r2, [pc, #392]	@ (8003e64 <HAL_DMA_Abort+0x460>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d027      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a61      	ldr	r2, [pc, #388]	@ (8003e68 <HAL_DMA_Abort+0x464>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a5f      	ldr	r2, [pc, #380]	@ (8003e6c <HAL_DMA_Abort+0x468>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d01d      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a5e      	ldr	r2, [pc, #376]	@ (8003e70 <HAL_DMA_Abort+0x46c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d018      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a5c      	ldr	r2, [pc, #368]	@ (8003e74 <HAL_DMA_Abort+0x470>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d013      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003e78 <HAL_DMA_Abort+0x474>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00e      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a59      	ldr	r2, [pc, #356]	@ (8003e7c <HAL_DMA_Abort+0x478>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d009      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a58      	ldr	r2, [pc, #352]	@ (8003e80 <HAL_DMA_Abort+0x47c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d004      	beq.n	8003d2e <HAL_DMA_Abort+0x32a>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a56      	ldr	r2, [pc, #344]	@ (8003e84 <HAL_DMA_Abort+0x480>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d108      	bne.n	8003d40 <HAL_DMA_Abort+0x33c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e007      	b.n	8003d50 <HAL_DMA_Abort+0x34c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d50:	e013      	b.n	8003d7a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d52:	f7fd fa29 	bl	80011a8 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d90c      	bls.n	8003d7a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2203      	movs	r2, #3
 8003d6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e12d      	b.n	8003fd6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e48 <HAL_DMA_Abort+0x444>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d04a      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a2d      	ldr	r2, [pc, #180]	@ (8003e4c <HAL_DMA_Abort+0x448>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d045      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e50 <HAL_DMA_Abort+0x44c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d040      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e54 <HAL_DMA_Abort+0x450>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d03b      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a29      	ldr	r2, [pc, #164]	@ (8003e58 <HAL_DMA_Abort+0x454>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d036      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a27      	ldr	r2, [pc, #156]	@ (8003e5c <HAL_DMA_Abort+0x458>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d031      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a26      	ldr	r2, [pc, #152]	@ (8003e60 <HAL_DMA_Abort+0x45c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d02c      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a24      	ldr	r2, [pc, #144]	@ (8003e64 <HAL_DMA_Abort+0x460>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d027      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a23      	ldr	r2, [pc, #140]	@ (8003e68 <HAL_DMA_Abort+0x464>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d022      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a21      	ldr	r2, [pc, #132]	@ (8003e6c <HAL_DMA_Abort+0x468>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01d      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a20      	ldr	r2, [pc, #128]	@ (8003e70 <HAL_DMA_Abort+0x46c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d018      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a1e      	ldr	r2, [pc, #120]	@ (8003e74 <HAL_DMA_Abort+0x470>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <HAL_DMA_Abort+0x474>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00e      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e7c <HAL_DMA_Abort+0x478>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1a      	ldr	r2, [pc, #104]	@ (8003e80 <HAL_DMA_Abort+0x47c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_DMA_Abort+0x422>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a18      	ldr	r2, [pc, #96]	@ (8003e84 <HAL_DMA_Abort+0x480>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_DMA_Abort+0x426>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_DMA_Abort+0x428>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d02b      	beq.n	8003e88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	223f      	movs	r2, #63	@ 0x3f
 8003e40:	409a      	lsls	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	609a      	str	r2, [r3, #8]
 8003e46:	e02a      	b.n	8003e9e <HAL_DMA_Abort+0x49a>
 8003e48:	40020010 	.word	0x40020010
 8003e4c:	40020028 	.word	0x40020028
 8003e50:	40020040 	.word	0x40020040
 8003e54:	40020058 	.word	0x40020058
 8003e58:	40020070 	.word	0x40020070
 8003e5c:	40020088 	.word	0x40020088
 8003e60:	400200a0 	.word	0x400200a0
 8003e64:	400200b8 	.word	0x400200b8
 8003e68:	40020410 	.word	0x40020410
 8003e6c:	40020428 	.word	0x40020428
 8003e70:	40020440 	.word	0x40020440
 8003e74:	40020458 	.word	0x40020458
 8003e78:	40020470 	.word	0x40020470
 8003e7c:	40020488 	.word	0x40020488
 8003e80:	400204a0 	.word	0x400204a0
 8003e84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	2201      	movs	r2, #1
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a4f      	ldr	r2, [pc, #316]	@ (8003fe0 <HAL_DMA_Abort+0x5dc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d072      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a4d      	ldr	r2, [pc, #308]	@ (8003fe4 <HAL_DMA_Abort+0x5e0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d06d      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8003fe8 <HAL_DMA_Abort+0x5e4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d068      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8003fec <HAL_DMA_Abort+0x5e8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d063      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a49      	ldr	r2, [pc, #292]	@ (8003ff0 <HAL_DMA_Abort+0x5ec>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d05e      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a47      	ldr	r2, [pc, #284]	@ (8003ff4 <HAL_DMA_Abort+0x5f0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d059      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a46      	ldr	r2, [pc, #280]	@ (8003ff8 <HAL_DMA_Abort+0x5f4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d054      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a44      	ldr	r2, [pc, #272]	@ (8003ffc <HAL_DMA_Abort+0x5f8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d04f      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a43      	ldr	r2, [pc, #268]	@ (8004000 <HAL_DMA_Abort+0x5fc>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d04a      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a41      	ldr	r2, [pc, #260]	@ (8004004 <HAL_DMA_Abort+0x600>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d045      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a40      	ldr	r2, [pc, #256]	@ (8004008 <HAL_DMA_Abort+0x604>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d040      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a3e      	ldr	r2, [pc, #248]	@ (800400c <HAL_DMA_Abort+0x608>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d03b      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a3d      	ldr	r2, [pc, #244]	@ (8004010 <HAL_DMA_Abort+0x60c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d036      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a3b      	ldr	r2, [pc, #236]	@ (8004014 <HAL_DMA_Abort+0x610>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a3a      	ldr	r2, [pc, #232]	@ (8004018 <HAL_DMA_Abort+0x614>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d02c      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a38      	ldr	r2, [pc, #224]	@ (800401c <HAL_DMA_Abort+0x618>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d027      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a37      	ldr	r2, [pc, #220]	@ (8004020 <HAL_DMA_Abort+0x61c>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a35      	ldr	r2, [pc, #212]	@ (8004024 <HAL_DMA_Abort+0x620>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a34      	ldr	r2, [pc, #208]	@ (8004028 <HAL_DMA_Abort+0x624>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a32      	ldr	r2, [pc, #200]	@ (800402c <HAL_DMA_Abort+0x628>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a31      	ldr	r2, [pc, #196]	@ (8004030 <HAL_DMA_Abort+0x62c>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a2f      	ldr	r2, [pc, #188]	@ (8004034 <HAL_DMA_Abort+0x630>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004038 <HAL_DMA_Abort+0x634>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_DMA_Abort+0x58a>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a2c      	ldr	r2, [pc, #176]	@ (800403c <HAL_DMA_Abort+0x638>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_DMA_Abort+0x58e>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e000      	b.n	8003f94 <HAL_DMA_Abort+0x590>
 8003f92:	2300      	movs	r3, #0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d015      	beq.n	8003fc4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003fa0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003fc2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40020010 	.word	0x40020010
 8003fe4:	40020028 	.word	0x40020028
 8003fe8:	40020040 	.word	0x40020040
 8003fec:	40020058 	.word	0x40020058
 8003ff0:	40020070 	.word	0x40020070
 8003ff4:	40020088 	.word	0x40020088
 8003ff8:	400200a0 	.word	0x400200a0
 8003ffc:	400200b8 	.word	0x400200b8
 8004000:	40020410 	.word	0x40020410
 8004004:	40020428 	.word	0x40020428
 8004008:	40020440 	.word	0x40020440
 800400c:	40020458 	.word	0x40020458
 8004010:	40020470 	.word	0x40020470
 8004014:	40020488 	.word	0x40020488
 8004018:	400204a0 	.word	0x400204a0
 800401c:	400204b8 	.word	0x400204b8
 8004020:	58025408 	.word	0x58025408
 8004024:	5802541c 	.word	0x5802541c
 8004028:	58025430 	.word	0x58025430
 800402c:	58025444 	.word	0x58025444
 8004030:	58025458 	.word	0x58025458
 8004034:	5802546c 	.word	0x5802546c
 8004038:	58025480 	.word	0x58025480
 800403c:	58025494 	.word	0x58025494

08004040 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e237      	b.n	80044c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d004      	beq.n	8004068 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2280      	movs	r2, #128	@ 0x80
 8004062:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e22c      	b.n	80044c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a5c      	ldr	r2, [pc, #368]	@ (80041e0 <HAL_DMA_Abort_IT+0x1a0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d04a      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a5b      	ldr	r2, [pc, #364]	@ (80041e4 <HAL_DMA_Abort_IT+0x1a4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d045      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a59      	ldr	r2, [pc, #356]	@ (80041e8 <HAL_DMA_Abort_IT+0x1a8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d040      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a58      	ldr	r2, [pc, #352]	@ (80041ec <HAL_DMA_Abort_IT+0x1ac>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d03b      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a56      	ldr	r2, [pc, #344]	@ (80041f0 <HAL_DMA_Abort_IT+0x1b0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d036      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a55      	ldr	r2, [pc, #340]	@ (80041f4 <HAL_DMA_Abort_IT+0x1b4>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d031      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a53      	ldr	r2, [pc, #332]	@ (80041f8 <HAL_DMA_Abort_IT+0x1b8>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d02c      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a52      	ldr	r2, [pc, #328]	@ (80041fc <HAL_DMA_Abort_IT+0x1bc>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d027      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a50      	ldr	r2, [pc, #320]	@ (8004200 <HAL_DMA_Abort_IT+0x1c0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d022      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a4f      	ldr	r2, [pc, #316]	@ (8004204 <HAL_DMA_Abort_IT+0x1c4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d01d      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a4d      	ldr	r2, [pc, #308]	@ (8004208 <HAL_DMA_Abort_IT+0x1c8>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d018      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a4c      	ldr	r2, [pc, #304]	@ (800420c <HAL_DMA_Abort_IT+0x1cc>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d013      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004210 <HAL_DMA_Abort_IT+0x1d0>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d00e      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a49      	ldr	r2, [pc, #292]	@ (8004214 <HAL_DMA_Abort_IT+0x1d4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d009      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a47      	ldr	r2, [pc, #284]	@ (8004218 <HAL_DMA_Abort_IT+0x1d8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d004      	beq.n	8004108 <HAL_DMA_Abort_IT+0xc8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a46      	ldr	r2, [pc, #280]	@ (800421c <HAL_DMA_Abort_IT+0x1dc>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d101      	bne.n	800410c <HAL_DMA_Abort_IT+0xcc>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <HAL_DMA_Abort_IT+0xce>
 800410c:	2300      	movs	r3, #0
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8086 	beq.w	8004220 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2204      	movs	r2, #4
 8004118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2f      	ldr	r2, [pc, #188]	@ (80041e0 <HAL_DMA_Abort_IT+0x1a0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d04a      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2e      	ldr	r2, [pc, #184]	@ (80041e4 <HAL_DMA_Abort_IT+0x1a4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d045      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2c      	ldr	r2, [pc, #176]	@ (80041e8 <HAL_DMA_Abort_IT+0x1a8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d040      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2b      	ldr	r2, [pc, #172]	@ (80041ec <HAL_DMA_Abort_IT+0x1ac>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d03b      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a29      	ldr	r2, [pc, #164]	@ (80041f0 <HAL_DMA_Abort_IT+0x1b0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d036      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a28      	ldr	r2, [pc, #160]	@ (80041f4 <HAL_DMA_Abort_IT+0x1b4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d031      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a26      	ldr	r2, [pc, #152]	@ (80041f8 <HAL_DMA_Abort_IT+0x1b8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02c      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a25      	ldr	r2, [pc, #148]	@ (80041fc <HAL_DMA_Abort_IT+0x1bc>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d027      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a23      	ldr	r2, [pc, #140]	@ (8004200 <HAL_DMA_Abort_IT+0x1c0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d022      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a22      	ldr	r2, [pc, #136]	@ (8004204 <HAL_DMA_Abort_IT+0x1c4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d01d      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a20      	ldr	r2, [pc, #128]	@ (8004208 <HAL_DMA_Abort_IT+0x1c8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1f      	ldr	r2, [pc, #124]	@ (800420c <HAL_DMA_Abort_IT+0x1cc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1d      	ldr	r2, [pc, #116]	@ (8004210 <HAL_DMA_Abort_IT+0x1d0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <HAL_DMA_Abort_IT+0x1d4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004218 <HAL_DMA_Abort_IT+0x1d8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_DMA_Abort_IT+0x17c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a19      	ldr	r2, [pc, #100]	@ (800421c <HAL_DMA_Abort_IT+0x1dc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d108      	bne.n	80041ce <HAL_DMA_Abort_IT+0x18e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e178      	b.n	80044c0 <HAL_DMA_Abort_IT+0x480>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0201 	bic.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	e16f      	b.n	80044c0 <HAL_DMA_Abort_IT+0x480>
 80041e0:	40020010 	.word	0x40020010
 80041e4:	40020028 	.word	0x40020028
 80041e8:	40020040 	.word	0x40020040
 80041ec:	40020058 	.word	0x40020058
 80041f0:	40020070 	.word	0x40020070
 80041f4:	40020088 	.word	0x40020088
 80041f8:	400200a0 	.word	0x400200a0
 80041fc:	400200b8 	.word	0x400200b8
 8004200:	40020410 	.word	0x40020410
 8004204:	40020428 	.word	0x40020428
 8004208:	40020440 	.word	0x40020440
 800420c:	40020458 	.word	0x40020458
 8004210:	40020470 	.word	0x40020470
 8004214:	40020488 	.word	0x40020488
 8004218:	400204a0 	.word	0x400204a0
 800421c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 020e 	bic.w	r2, r2, #14
 800422e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a6c      	ldr	r2, [pc, #432]	@ (80043e8 <HAL_DMA_Abort_IT+0x3a8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d04a      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a6b      	ldr	r2, [pc, #428]	@ (80043ec <HAL_DMA_Abort_IT+0x3ac>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d045      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a69      	ldr	r2, [pc, #420]	@ (80043f0 <HAL_DMA_Abort_IT+0x3b0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d040      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a68      	ldr	r2, [pc, #416]	@ (80043f4 <HAL_DMA_Abort_IT+0x3b4>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d03b      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a66      	ldr	r2, [pc, #408]	@ (80043f8 <HAL_DMA_Abort_IT+0x3b8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d036      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a65      	ldr	r2, [pc, #404]	@ (80043fc <HAL_DMA_Abort_IT+0x3bc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d031      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a63      	ldr	r2, [pc, #396]	@ (8004400 <HAL_DMA_Abort_IT+0x3c0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d02c      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a62      	ldr	r2, [pc, #392]	@ (8004404 <HAL_DMA_Abort_IT+0x3c4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d027      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a60      	ldr	r2, [pc, #384]	@ (8004408 <HAL_DMA_Abort_IT+0x3c8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d022      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a5f      	ldr	r2, [pc, #380]	@ (800440c <HAL_DMA_Abort_IT+0x3cc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d01d      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a5d      	ldr	r2, [pc, #372]	@ (8004410 <HAL_DMA_Abort_IT+0x3d0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d018      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a5c      	ldr	r2, [pc, #368]	@ (8004414 <HAL_DMA_Abort_IT+0x3d4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d013      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a5a      	ldr	r2, [pc, #360]	@ (8004418 <HAL_DMA_Abort_IT+0x3d8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00e      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a59      	ldr	r2, [pc, #356]	@ (800441c <HAL_DMA_Abort_IT+0x3dc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a57      	ldr	r2, [pc, #348]	@ (8004420 <HAL_DMA_Abort_IT+0x3e0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_DMA_Abort_IT+0x290>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a56      	ldr	r2, [pc, #344]	@ (8004424 <HAL_DMA_Abort_IT+0x3e4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d108      	bne.n	80042e2 <HAL_DMA_Abort_IT+0x2a2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e007      	b.n	80042f2 <HAL_DMA_Abort_IT+0x2b2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3c      	ldr	r2, [pc, #240]	@ (80043e8 <HAL_DMA_Abort_IT+0x3a8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d072      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3a      	ldr	r2, [pc, #232]	@ (80043ec <HAL_DMA_Abort_IT+0x3ac>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d06d      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a39      	ldr	r2, [pc, #228]	@ (80043f0 <HAL_DMA_Abort_IT+0x3b0>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d068      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a37      	ldr	r2, [pc, #220]	@ (80043f4 <HAL_DMA_Abort_IT+0x3b4>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d063      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a36      	ldr	r2, [pc, #216]	@ (80043f8 <HAL_DMA_Abort_IT+0x3b8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d05e      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a34      	ldr	r2, [pc, #208]	@ (80043fc <HAL_DMA_Abort_IT+0x3bc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d059      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a33      	ldr	r2, [pc, #204]	@ (8004400 <HAL_DMA_Abort_IT+0x3c0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d054      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a31      	ldr	r2, [pc, #196]	@ (8004404 <HAL_DMA_Abort_IT+0x3c4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d04f      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a30      	ldr	r2, [pc, #192]	@ (8004408 <HAL_DMA_Abort_IT+0x3c8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d04a      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a2e      	ldr	r2, [pc, #184]	@ (800440c <HAL_DMA_Abort_IT+0x3cc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d045      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2d      	ldr	r2, [pc, #180]	@ (8004410 <HAL_DMA_Abort_IT+0x3d0>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d040      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2b      	ldr	r2, [pc, #172]	@ (8004414 <HAL_DMA_Abort_IT+0x3d4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d03b      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2a      	ldr	r2, [pc, #168]	@ (8004418 <HAL_DMA_Abort_IT+0x3d8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d036      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a28      	ldr	r2, [pc, #160]	@ (800441c <HAL_DMA_Abort_IT+0x3dc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d031      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a27      	ldr	r2, [pc, #156]	@ (8004420 <HAL_DMA_Abort_IT+0x3e0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d02c      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a25      	ldr	r2, [pc, #148]	@ (8004424 <HAL_DMA_Abort_IT+0x3e4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d027      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a24      	ldr	r2, [pc, #144]	@ (8004428 <HAL_DMA_Abort_IT+0x3e8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d022      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a22      	ldr	r2, [pc, #136]	@ (800442c <HAL_DMA_Abort_IT+0x3ec>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d01d      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a21      	ldr	r2, [pc, #132]	@ (8004430 <HAL_DMA_Abort_IT+0x3f0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004434 <HAL_DMA_Abort_IT+0x3f4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d013      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a1e      	ldr	r2, [pc, #120]	@ (8004438 <HAL_DMA_Abort_IT+0x3f8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1c      	ldr	r2, [pc, #112]	@ (800443c <HAL_DMA_Abort_IT+0x3fc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004440 <HAL_DMA_Abort_IT+0x400>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_DMA_Abort_IT+0x3a2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a19      	ldr	r2, [pc, #100]	@ (8004444 <HAL_DMA_Abort_IT+0x404>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d132      	bne.n	8004448 <HAL_DMA_Abort_IT+0x408>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e031      	b.n	800444a <HAL_DMA_Abort_IT+0x40a>
 80043e6:	bf00      	nop
 80043e8:	40020010 	.word	0x40020010
 80043ec:	40020028 	.word	0x40020028
 80043f0:	40020040 	.word	0x40020040
 80043f4:	40020058 	.word	0x40020058
 80043f8:	40020070 	.word	0x40020070
 80043fc:	40020088 	.word	0x40020088
 8004400:	400200a0 	.word	0x400200a0
 8004404:	400200b8 	.word	0x400200b8
 8004408:	40020410 	.word	0x40020410
 800440c:	40020428 	.word	0x40020428
 8004410:	40020440 	.word	0x40020440
 8004414:	40020458 	.word	0x40020458
 8004418:	40020470 	.word	0x40020470
 800441c:	40020488 	.word	0x40020488
 8004420:	400204a0 	.word	0x400204a0
 8004424:	400204b8 	.word	0x400204b8
 8004428:	58025408 	.word	0x58025408
 800442c:	5802541c 	.word	0x5802541c
 8004430:	58025430 	.word	0x58025430
 8004434:	58025444 	.word	0x58025444
 8004438:	58025458 	.word	0x58025458
 800443c:	5802546c 	.word	0x5802546c
 8004440:	58025480 	.word	0x58025480
 8004444:	58025494 	.word	0x58025494
 8004448:	2300      	movs	r3, #0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d028      	beq.n	80044a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800445c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	2201      	movs	r2, #1
 800446e:	409a      	lsls	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800447c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00c      	beq.n	80044a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004490:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004494:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800449e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop

080044cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	@ 0x28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044d8:	4b67      	ldr	r3, [pc, #412]	@ (8004678 <HAL_DMA_IRQHandler+0x1ac>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a67      	ldr	r2, [pc, #412]	@ (800467c <HAL_DMA_IRQHandler+0x1b0>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0a9b      	lsrs	r3, r3, #10
 80044e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a5f      	ldr	r2, [pc, #380]	@ (8004680 <HAL_DMA_IRQHandler+0x1b4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d04a      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a5d      	ldr	r2, [pc, #372]	@ (8004684 <HAL_DMA_IRQHandler+0x1b8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d045      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a5c      	ldr	r2, [pc, #368]	@ (8004688 <HAL_DMA_IRQHandler+0x1bc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d040      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a5a      	ldr	r2, [pc, #360]	@ (800468c <HAL_DMA_IRQHandler+0x1c0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d03b      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a59      	ldr	r2, [pc, #356]	@ (8004690 <HAL_DMA_IRQHandler+0x1c4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d036      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a57      	ldr	r2, [pc, #348]	@ (8004694 <HAL_DMA_IRQHandler+0x1c8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d031      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a56      	ldr	r2, [pc, #344]	@ (8004698 <HAL_DMA_IRQHandler+0x1cc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d02c      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a54      	ldr	r2, [pc, #336]	@ (800469c <HAL_DMA_IRQHandler+0x1d0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d027      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a53      	ldr	r2, [pc, #332]	@ (80046a0 <HAL_DMA_IRQHandler+0x1d4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d022      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a51      	ldr	r2, [pc, #324]	@ (80046a4 <HAL_DMA_IRQHandler+0x1d8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01d      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a50      	ldr	r2, [pc, #320]	@ (80046a8 <HAL_DMA_IRQHandler+0x1dc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d018      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a4e      	ldr	r2, [pc, #312]	@ (80046ac <HAL_DMA_IRQHandler+0x1e0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a4d      	ldr	r2, [pc, #308]	@ (80046b0 <HAL_DMA_IRQHandler+0x1e4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a4b      	ldr	r2, [pc, #300]	@ (80046b4 <HAL_DMA_IRQHandler+0x1e8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d009      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a4a      	ldr	r2, [pc, #296]	@ (80046b8 <HAL_DMA_IRQHandler+0x1ec>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_DMA_IRQHandler+0xd2>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a48      	ldr	r2, [pc, #288]	@ (80046bc <HAL_DMA_IRQHandler+0x1f0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d101      	bne.n	80045a2 <HAL_DMA_IRQHandler+0xd6>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_DMA_IRQHandler+0xd8>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 842b 	beq.w	8004e00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ae:	f003 031f 	and.w	r3, r3, #31
 80045b2:	2208      	movs	r2, #8
 80045b4:	409a      	lsls	r2, r3
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f000 80a2 	beq.w	8004704 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2e      	ldr	r2, [pc, #184]	@ (8004680 <HAL_DMA_IRQHandler+0x1b4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d04a      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004684 <HAL_DMA_IRQHandler+0x1b8>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d045      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a2b      	ldr	r2, [pc, #172]	@ (8004688 <HAL_DMA_IRQHandler+0x1bc>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d040      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a2a      	ldr	r2, [pc, #168]	@ (800468c <HAL_DMA_IRQHandler+0x1c0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d03b      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a28      	ldr	r2, [pc, #160]	@ (8004690 <HAL_DMA_IRQHandler+0x1c4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d036      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a27      	ldr	r2, [pc, #156]	@ (8004694 <HAL_DMA_IRQHandler+0x1c8>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d031      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a25      	ldr	r2, [pc, #148]	@ (8004698 <HAL_DMA_IRQHandler+0x1cc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02c      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a24      	ldr	r2, [pc, #144]	@ (800469c <HAL_DMA_IRQHandler+0x1d0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d027      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a22      	ldr	r2, [pc, #136]	@ (80046a0 <HAL_DMA_IRQHandler+0x1d4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d022      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a21      	ldr	r2, [pc, #132]	@ (80046a4 <HAL_DMA_IRQHandler+0x1d8>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d01d      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a1f      	ldr	r2, [pc, #124]	@ (80046a8 <HAL_DMA_IRQHandler+0x1dc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d018      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a1e      	ldr	r2, [pc, #120]	@ (80046ac <HAL_DMA_IRQHandler+0x1e0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d013      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1c      	ldr	r2, [pc, #112]	@ (80046b0 <HAL_DMA_IRQHandler+0x1e4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1b      	ldr	r2, [pc, #108]	@ (80046b4 <HAL_DMA_IRQHandler+0x1e8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a19      	ldr	r2, [pc, #100]	@ (80046b8 <HAL_DMA_IRQHandler+0x1ec>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <HAL_DMA_IRQHandler+0x194>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a18      	ldr	r2, [pc, #96]	@ (80046bc <HAL_DMA_IRQHandler+0x1f0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d12f      	bne.n	80046c0 <HAL_DMA_IRQHandler+0x1f4>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0304 	and.w	r3, r3, #4
 800466a:	2b00      	cmp	r3, #0
 800466c:	bf14      	ite	ne
 800466e:	2301      	movne	r3, #1
 8004670:	2300      	moveq	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	e02e      	b.n	80046d4 <HAL_DMA_IRQHandler+0x208>
 8004676:	bf00      	nop
 8004678:	24000000 	.word	0x24000000
 800467c:	1b4e81b5 	.word	0x1b4e81b5
 8004680:	40020010 	.word	0x40020010
 8004684:	40020028 	.word	0x40020028
 8004688:	40020040 	.word	0x40020040
 800468c:	40020058 	.word	0x40020058
 8004690:	40020070 	.word	0x40020070
 8004694:	40020088 	.word	0x40020088
 8004698:	400200a0 	.word	0x400200a0
 800469c:	400200b8 	.word	0x400200b8
 80046a0:	40020410 	.word	0x40020410
 80046a4:	40020428 	.word	0x40020428
 80046a8:	40020440 	.word	0x40020440
 80046ac:	40020458 	.word	0x40020458
 80046b0:	40020470 	.word	0x40020470
 80046b4:	40020488 	.word	0x40020488
 80046b8:	400204a0 	.word	0x400204a0
 80046bc:	400204b8 	.word	0x400204b8
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0308 	and.w	r3, r3, #8
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bf14      	ite	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	2300      	moveq	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d015      	beq.n	8004704 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0204 	bic.w	r2, r2, #4
 80046e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2208      	movs	r2, #8
 80046f2:	409a      	lsls	r2, r3
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046fc:	f043 0201 	orr.w	r2, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	fa22 f303 	lsr.w	r3, r2, r3
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d06e      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a69      	ldr	r2, [pc, #420]	@ (80048c4 <HAL_DMA_IRQHandler+0x3f8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d04a      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a67      	ldr	r2, [pc, #412]	@ (80048c8 <HAL_DMA_IRQHandler+0x3fc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d045      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a66      	ldr	r2, [pc, #408]	@ (80048cc <HAL_DMA_IRQHandler+0x400>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d040      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a64      	ldr	r2, [pc, #400]	@ (80048d0 <HAL_DMA_IRQHandler+0x404>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d03b      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a63      	ldr	r2, [pc, #396]	@ (80048d4 <HAL_DMA_IRQHandler+0x408>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d036      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a61      	ldr	r2, [pc, #388]	@ (80048d8 <HAL_DMA_IRQHandler+0x40c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d031      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a60      	ldr	r2, [pc, #384]	@ (80048dc <HAL_DMA_IRQHandler+0x410>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d02c      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a5e      	ldr	r2, [pc, #376]	@ (80048e0 <HAL_DMA_IRQHandler+0x414>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d027      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a5d      	ldr	r2, [pc, #372]	@ (80048e4 <HAL_DMA_IRQHandler+0x418>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a5b      	ldr	r2, [pc, #364]	@ (80048e8 <HAL_DMA_IRQHandler+0x41c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01d      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a5a      	ldr	r2, [pc, #360]	@ (80048ec <HAL_DMA_IRQHandler+0x420>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d018      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a58      	ldr	r2, [pc, #352]	@ (80048f0 <HAL_DMA_IRQHandler+0x424>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a57      	ldr	r2, [pc, #348]	@ (80048f4 <HAL_DMA_IRQHandler+0x428>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00e      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a55      	ldr	r2, [pc, #340]	@ (80048f8 <HAL_DMA_IRQHandler+0x42c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a54      	ldr	r2, [pc, #336]	@ (80048fc <HAL_DMA_IRQHandler+0x430>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_DMA_IRQHandler+0x2ee>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a52      	ldr	r2, [pc, #328]	@ (8004900 <HAL_DMA_IRQHandler+0x434>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d10a      	bne.n	80047d0 <HAL_DMA_IRQHandler+0x304>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e003      	b.n	80047d8 <HAL_DMA_IRQHandler+0x30c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00d      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e0:	f003 031f 	and.w	r3, r3, #31
 80047e4:	2201      	movs	r2, #1
 80047e6:	409a      	lsls	r2, r3
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	f043 0202 	orr.w	r2, r3, #2
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2204      	movs	r2, #4
 8004802:	409a      	lsls	r2, r3
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 808f 	beq.w	800492c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a2c      	ldr	r2, [pc, #176]	@ (80048c4 <HAL_DMA_IRQHandler+0x3f8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d04a      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2a      	ldr	r2, [pc, #168]	@ (80048c8 <HAL_DMA_IRQHandler+0x3fc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d045      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a29      	ldr	r2, [pc, #164]	@ (80048cc <HAL_DMA_IRQHandler+0x400>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d040      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a27      	ldr	r2, [pc, #156]	@ (80048d0 <HAL_DMA_IRQHandler+0x404>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d03b      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a26      	ldr	r2, [pc, #152]	@ (80048d4 <HAL_DMA_IRQHandler+0x408>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d036      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a24      	ldr	r2, [pc, #144]	@ (80048d8 <HAL_DMA_IRQHandler+0x40c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d031      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a23      	ldr	r2, [pc, #140]	@ (80048dc <HAL_DMA_IRQHandler+0x410>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d02c      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a21      	ldr	r2, [pc, #132]	@ (80048e0 <HAL_DMA_IRQHandler+0x414>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d027      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a20      	ldr	r2, [pc, #128]	@ (80048e4 <HAL_DMA_IRQHandler+0x418>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d022      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a1e      	ldr	r2, [pc, #120]	@ (80048e8 <HAL_DMA_IRQHandler+0x41c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d01d      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a1d      	ldr	r2, [pc, #116]	@ (80048ec <HAL_DMA_IRQHandler+0x420>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d018      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a1b      	ldr	r2, [pc, #108]	@ (80048f0 <HAL_DMA_IRQHandler+0x424>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1a      	ldr	r2, [pc, #104]	@ (80048f4 <HAL_DMA_IRQHandler+0x428>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00e      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a18      	ldr	r2, [pc, #96]	@ (80048f8 <HAL_DMA_IRQHandler+0x42c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d009      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a17      	ldr	r2, [pc, #92]	@ (80048fc <HAL_DMA_IRQHandler+0x430>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_DMA_IRQHandler+0x3e2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a15      	ldr	r2, [pc, #84]	@ (8004900 <HAL_DMA_IRQHandler+0x434>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d12a      	bne.n	8004904 <HAL_DMA_IRQHandler+0x438>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	bf14      	ite	ne
 80048bc:	2301      	movne	r3, #1
 80048be:	2300      	moveq	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	e023      	b.n	800490c <HAL_DMA_IRQHandler+0x440>
 80048c4:	40020010 	.word	0x40020010
 80048c8:	40020028 	.word	0x40020028
 80048cc:	40020040 	.word	0x40020040
 80048d0:	40020058 	.word	0x40020058
 80048d4:	40020070 	.word	0x40020070
 80048d8:	40020088 	.word	0x40020088
 80048dc:	400200a0 	.word	0x400200a0
 80048e0:	400200b8 	.word	0x400200b8
 80048e4:	40020410 	.word	0x40020410
 80048e8:	40020428 	.word	0x40020428
 80048ec:	40020440 	.word	0x40020440
 80048f0:	40020458 	.word	0x40020458
 80048f4:	40020470 	.word	0x40020470
 80048f8:	40020488 	.word	0x40020488
 80048fc:	400204a0 	.word	0x400204a0
 8004900:	400204b8 	.word	0x400204b8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2300      	movs	r3, #0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2204      	movs	r2, #4
 800491a:	409a      	lsls	r2, r3
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004924:	f043 0204 	orr.w	r2, r3, #4
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2210      	movs	r2, #16
 8004936:	409a      	lsls	r2, r3
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 80a6 	beq.w	8004a8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a85      	ldr	r2, [pc, #532]	@ (8004b5c <HAL_DMA_IRQHandler+0x690>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d04a      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a83      	ldr	r2, [pc, #524]	@ (8004b60 <HAL_DMA_IRQHandler+0x694>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d045      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a82      	ldr	r2, [pc, #520]	@ (8004b64 <HAL_DMA_IRQHandler+0x698>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d040      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a80      	ldr	r2, [pc, #512]	@ (8004b68 <HAL_DMA_IRQHandler+0x69c>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d03b      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a7f      	ldr	r2, [pc, #508]	@ (8004b6c <HAL_DMA_IRQHandler+0x6a0>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d036      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a7d      	ldr	r2, [pc, #500]	@ (8004b70 <HAL_DMA_IRQHandler+0x6a4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d031      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a7c      	ldr	r2, [pc, #496]	@ (8004b74 <HAL_DMA_IRQHandler+0x6a8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d02c      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a7a      	ldr	r2, [pc, #488]	@ (8004b78 <HAL_DMA_IRQHandler+0x6ac>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d027      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a79      	ldr	r2, [pc, #484]	@ (8004b7c <HAL_DMA_IRQHandler+0x6b0>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a77      	ldr	r2, [pc, #476]	@ (8004b80 <HAL_DMA_IRQHandler+0x6b4>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01d      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a76      	ldr	r2, [pc, #472]	@ (8004b84 <HAL_DMA_IRQHandler+0x6b8>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a74      	ldr	r2, [pc, #464]	@ (8004b88 <HAL_DMA_IRQHandler+0x6bc>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a73      	ldr	r2, [pc, #460]	@ (8004b8c <HAL_DMA_IRQHandler+0x6c0>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a71      	ldr	r2, [pc, #452]	@ (8004b90 <HAL_DMA_IRQHandler+0x6c4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a70      	ldr	r2, [pc, #448]	@ (8004b94 <HAL_DMA_IRQHandler+0x6c8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x516>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004b98 <HAL_DMA_IRQHandler+0x6cc>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10a      	bne.n	80049f8 <HAL_DMA_IRQHandler+0x52c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e009      	b.n	8004a0c <HAL_DMA_IRQHandler+0x540>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	bf14      	ite	ne
 8004a06:	2301      	movne	r3, #1
 8004a08:	2300      	moveq	r3, #0
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d03e      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a14:	f003 031f 	and.w	r3, r3, #31
 8004a18:	2210      	movs	r2, #16
 8004a1a:	409a      	lsls	r2, r3
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d108      	bne.n	8004a4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d024      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
 8004a4c:	e01f      	b.n	8004a8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01b      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
 8004a5e:	e016      	b.n	8004a8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0208 	bic.w	r2, r2, #8
 8004a7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2220      	movs	r2, #32
 8004a98:	409a      	lsls	r2, r3
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8110 	beq.w	8004cc4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a2c      	ldr	r2, [pc, #176]	@ (8004b5c <HAL_DMA_IRQHandler+0x690>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d04a      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a2b      	ldr	r2, [pc, #172]	@ (8004b60 <HAL_DMA_IRQHandler+0x694>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d045      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a29      	ldr	r2, [pc, #164]	@ (8004b64 <HAL_DMA_IRQHandler+0x698>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d040      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a28      	ldr	r2, [pc, #160]	@ (8004b68 <HAL_DMA_IRQHandler+0x69c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d03b      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a26      	ldr	r2, [pc, #152]	@ (8004b6c <HAL_DMA_IRQHandler+0x6a0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d036      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a25      	ldr	r2, [pc, #148]	@ (8004b70 <HAL_DMA_IRQHandler+0x6a4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d031      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a23      	ldr	r2, [pc, #140]	@ (8004b74 <HAL_DMA_IRQHandler+0x6a8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d02c      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a22      	ldr	r2, [pc, #136]	@ (8004b78 <HAL_DMA_IRQHandler+0x6ac>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d027      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a20      	ldr	r2, [pc, #128]	@ (8004b7c <HAL_DMA_IRQHandler+0x6b0>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d022      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1f      	ldr	r2, [pc, #124]	@ (8004b80 <HAL_DMA_IRQHandler+0x6b4>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d01d      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1d      	ldr	r2, [pc, #116]	@ (8004b84 <HAL_DMA_IRQHandler+0x6b8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d018      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a1c      	ldr	r2, [pc, #112]	@ (8004b88 <HAL_DMA_IRQHandler+0x6bc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d013      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a1a      	ldr	r2, [pc, #104]	@ (8004b8c <HAL_DMA_IRQHandler+0x6c0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00e      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a19      	ldr	r2, [pc, #100]	@ (8004b90 <HAL_DMA_IRQHandler+0x6c4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d009      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a17      	ldr	r2, [pc, #92]	@ (8004b94 <HAL_DMA_IRQHandler+0x6c8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_DMA_IRQHandler+0x678>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a16      	ldr	r2, [pc, #88]	@ (8004b98 <HAL_DMA_IRQHandler+0x6cc>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d12b      	bne.n	8004b9c <HAL_DMA_IRQHandler+0x6d0>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	e02a      	b.n	8004bb0 <HAL_DMA_IRQHandler+0x6e4>
 8004b5a:	bf00      	nop
 8004b5c:	40020010 	.word	0x40020010
 8004b60:	40020028 	.word	0x40020028
 8004b64:	40020040 	.word	0x40020040
 8004b68:	40020058 	.word	0x40020058
 8004b6c:	40020070 	.word	0x40020070
 8004b70:	40020088 	.word	0x40020088
 8004b74:	400200a0 	.word	0x400200a0
 8004b78:	400200b8 	.word	0x400200b8
 8004b7c:	40020410 	.word	0x40020410
 8004b80:	40020428 	.word	0x40020428
 8004b84:	40020440 	.word	0x40020440
 8004b88:	40020458 	.word	0x40020458
 8004b8c:	40020470 	.word	0x40020470
 8004b90:	40020488 	.word	0x40020488
 8004b94:	400204a0 	.word	0x400204a0
 8004b98:	400204b8 	.word	0x400204b8
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bf14      	ite	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	2300      	moveq	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8087 	beq.w	8004cc4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d139      	bne.n	8004c46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f022 0216 	bic.w	r2, r2, #22
 8004be0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	695a      	ldr	r2, [r3, #20]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bf0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <HAL_DMA_IRQHandler+0x736>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0208 	bic.w	r2, r2, #8
 8004c10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	223f      	movs	r2, #63	@ 0x3f
 8004c1c:	409a      	lsls	r2, r3
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 8382 	beq.w	8005340 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
          }
          return;
 8004c44:	e37c      	b.n	8005340 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d018      	beq.n	8004c86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d02c      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	4798      	blx	r3
 8004c72:	e027      	b.n	8004cc4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d023      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	4798      	blx	r3
 8004c84:	e01e      	b.n	8004cc4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d10f      	bne.n	8004cb4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0210 	bic.w	r2, r2, #16
 8004ca2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 833e 	beq.w	800534a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 8088 	beq.w	8004dec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2204      	movs	r2, #4
 8004ce0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a89      	ldr	r2, [pc, #548]	@ (8004f10 <HAL_DMA_IRQHandler+0xa44>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d04a      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a88      	ldr	r2, [pc, #544]	@ (8004f14 <HAL_DMA_IRQHandler+0xa48>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d045      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a86      	ldr	r2, [pc, #536]	@ (8004f18 <HAL_DMA_IRQHandler+0xa4c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d040      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a85      	ldr	r2, [pc, #532]	@ (8004f1c <HAL_DMA_IRQHandler+0xa50>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d03b      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a83      	ldr	r2, [pc, #524]	@ (8004f20 <HAL_DMA_IRQHandler+0xa54>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d036      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a82      	ldr	r2, [pc, #520]	@ (8004f24 <HAL_DMA_IRQHandler+0xa58>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d031      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a80      	ldr	r2, [pc, #512]	@ (8004f28 <HAL_DMA_IRQHandler+0xa5c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d02c      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a7f      	ldr	r2, [pc, #508]	@ (8004f2c <HAL_DMA_IRQHandler+0xa60>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d027      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a7d      	ldr	r2, [pc, #500]	@ (8004f30 <HAL_DMA_IRQHandler+0xa64>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d022      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a7c      	ldr	r2, [pc, #496]	@ (8004f34 <HAL_DMA_IRQHandler+0xa68>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d01d      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a7a      	ldr	r2, [pc, #488]	@ (8004f38 <HAL_DMA_IRQHandler+0xa6c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d018      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a79      	ldr	r2, [pc, #484]	@ (8004f3c <HAL_DMA_IRQHandler+0xa70>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d013      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a77      	ldr	r2, [pc, #476]	@ (8004f40 <HAL_DMA_IRQHandler+0xa74>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d00e      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a76      	ldr	r2, [pc, #472]	@ (8004f44 <HAL_DMA_IRQHandler+0xa78>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d009      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a74      	ldr	r2, [pc, #464]	@ (8004f48 <HAL_DMA_IRQHandler+0xa7c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x8b8>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a73      	ldr	r2, [pc, #460]	@ (8004f4c <HAL_DMA_IRQHandler+0xa80>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d108      	bne.n	8004d96 <HAL_DMA_IRQHandler+0x8ca>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]
 8004d94:	e007      	b.n	8004da6 <HAL_DMA_IRQHandler+0x8da>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	3301      	adds	r3, #1
 8004daa:	60fb      	str	r3, [r7, #12]
 8004dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d307      	bcc.n	8004dc2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f2      	bne.n	8004da6 <HAL_DMA_IRQHandler+0x8da>
 8004dc0:	e000      	b.n	8004dc4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004dc2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2203      	movs	r2, #3
 8004dd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004dda:	e003      	b.n	8004de4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 82aa 	beq.w	800534a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
 8004dfe:	e2a4      	b.n	800534a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a52      	ldr	r2, [pc, #328]	@ (8004f50 <HAL_DMA_IRQHandler+0xa84>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d04a      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a51      	ldr	r2, [pc, #324]	@ (8004f54 <HAL_DMA_IRQHandler+0xa88>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d045      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a4f      	ldr	r2, [pc, #316]	@ (8004f58 <HAL_DMA_IRQHandler+0xa8c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d040      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a4e      	ldr	r2, [pc, #312]	@ (8004f5c <HAL_DMA_IRQHandler+0xa90>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d03b      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a4c      	ldr	r2, [pc, #304]	@ (8004f60 <HAL_DMA_IRQHandler+0xa94>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d036      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a4b      	ldr	r2, [pc, #300]	@ (8004f64 <HAL_DMA_IRQHandler+0xa98>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d031      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a49      	ldr	r2, [pc, #292]	@ (8004f68 <HAL_DMA_IRQHandler+0xa9c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d02c      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a48      	ldr	r2, [pc, #288]	@ (8004f6c <HAL_DMA_IRQHandler+0xaa0>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d027      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a46      	ldr	r2, [pc, #280]	@ (8004f70 <HAL_DMA_IRQHandler+0xaa4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d022      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a45      	ldr	r2, [pc, #276]	@ (8004f74 <HAL_DMA_IRQHandler+0xaa8>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d01d      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a43      	ldr	r2, [pc, #268]	@ (8004f78 <HAL_DMA_IRQHandler+0xaac>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d018      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a42      	ldr	r2, [pc, #264]	@ (8004f7c <HAL_DMA_IRQHandler+0xab0>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d013      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a40      	ldr	r2, [pc, #256]	@ (8004f80 <HAL_DMA_IRQHandler+0xab4>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00e      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a3f      	ldr	r2, [pc, #252]	@ (8004f84 <HAL_DMA_IRQHandler+0xab8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d009      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a3d      	ldr	r2, [pc, #244]	@ (8004f88 <HAL_DMA_IRQHandler+0xabc>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_DMA_IRQHandler+0x9d4>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a3c      	ldr	r2, [pc, #240]	@ (8004f8c <HAL_DMA_IRQHandler+0xac0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x9d8>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <HAL_DMA_IRQHandler+0x9da>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 824f 	beq.w	800534a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80dd 	beq.w	8005084 <HAL_DMA_IRQHandler+0xbb8>
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 80d7 	beq.w	8005084 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eda:	f003 031f 	and.w	r3, r3, #31
 8004ede:	2204      	movs	r2, #4
 8004ee0:	409a      	lsls	r2, r3
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d059      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d14a      	bne.n	8004f90 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 8220 	beq.w	8005344 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f0c:	e21a      	b.n	8005344 <HAL_DMA_IRQHandler+0xe78>
 8004f0e:	bf00      	nop
 8004f10:	40020010 	.word	0x40020010
 8004f14:	40020028 	.word	0x40020028
 8004f18:	40020040 	.word	0x40020040
 8004f1c:	40020058 	.word	0x40020058
 8004f20:	40020070 	.word	0x40020070
 8004f24:	40020088 	.word	0x40020088
 8004f28:	400200a0 	.word	0x400200a0
 8004f2c:	400200b8 	.word	0x400200b8
 8004f30:	40020410 	.word	0x40020410
 8004f34:	40020428 	.word	0x40020428
 8004f38:	40020440 	.word	0x40020440
 8004f3c:	40020458 	.word	0x40020458
 8004f40:	40020470 	.word	0x40020470
 8004f44:	40020488 	.word	0x40020488
 8004f48:	400204a0 	.word	0x400204a0
 8004f4c:	400204b8 	.word	0x400204b8
 8004f50:	48022c08 	.word	0x48022c08
 8004f54:	48022c1c 	.word	0x48022c1c
 8004f58:	48022c30 	.word	0x48022c30
 8004f5c:	48022c44 	.word	0x48022c44
 8004f60:	48022c58 	.word	0x48022c58
 8004f64:	48022c6c 	.word	0x48022c6c
 8004f68:	48022c80 	.word	0x48022c80
 8004f6c:	48022c94 	.word	0x48022c94
 8004f70:	58025408 	.word	0x58025408
 8004f74:	5802541c 	.word	0x5802541c
 8004f78:	58025430 	.word	0x58025430
 8004f7c:	58025444 	.word	0x58025444
 8004f80:	58025458 	.word	0x58025458
 8004f84:	5802546c 	.word	0x5802546c
 8004f88:	58025480 	.word	0x58025480
 8004f8c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 81d5 	beq.w	8005344 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fa2:	e1cf      	b.n	8005344 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	f003 0320 	and.w	r3, r3, #32
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d160      	bne.n	8005070 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a7f      	ldr	r2, [pc, #508]	@ (80051b0 <HAL_DMA_IRQHandler+0xce4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d04a      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a7d      	ldr	r2, [pc, #500]	@ (80051b4 <HAL_DMA_IRQHandler+0xce8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d045      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a7c      	ldr	r2, [pc, #496]	@ (80051b8 <HAL_DMA_IRQHandler+0xcec>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d040      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a7a      	ldr	r2, [pc, #488]	@ (80051bc <HAL_DMA_IRQHandler+0xcf0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d03b      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a79      	ldr	r2, [pc, #484]	@ (80051c0 <HAL_DMA_IRQHandler+0xcf4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d036      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a77      	ldr	r2, [pc, #476]	@ (80051c4 <HAL_DMA_IRQHandler+0xcf8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d031      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a76      	ldr	r2, [pc, #472]	@ (80051c8 <HAL_DMA_IRQHandler+0xcfc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d02c      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a74      	ldr	r2, [pc, #464]	@ (80051cc <HAL_DMA_IRQHandler+0xd00>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d027      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a73      	ldr	r2, [pc, #460]	@ (80051d0 <HAL_DMA_IRQHandler+0xd04>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d022      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a71      	ldr	r2, [pc, #452]	@ (80051d4 <HAL_DMA_IRQHandler+0xd08>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d01d      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a70      	ldr	r2, [pc, #448]	@ (80051d8 <HAL_DMA_IRQHandler+0xd0c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d018      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a6e      	ldr	r2, [pc, #440]	@ (80051dc <HAL_DMA_IRQHandler+0xd10>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a6d      	ldr	r2, [pc, #436]	@ (80051e0 <HAL_DMA_IRQHandler+0xd14>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d00e      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a6b      	ldr	r2, [pc, #428]	@ (80051e4 <HAL_DMA_IRQHandler+0xd18>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d009      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a6a      	ldr	r2, [pc, #424]	@ (80051e8 <HAL_DMA_IRQHandler+0xd1c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d004      	beq.n	800504e <HAL_DMA_IRQHandler+0xb82>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a68      	ldr	r2, [pc, #416]	@ (80051ec <HAL_DMA_IRQHandler+0xd20>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d108      	bne.n	8005060 <HAL_DMA_IRQHandler+0xb94>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0208 	bic.w	r2, r2, #8
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e007      	b.n	8005070 <HAL_DMA_IRQHandler+0xba4>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0204 	bic.w	r2, r2, #4
 800506e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8165 	beq.w	8005344 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005082:	e15f      	b.n	8005344 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2202      	movs	r2, #2
 800508e:	409a      	lsls	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80c5 	beq.w	8005224 <HAL_DMA_IRQHandler+0xd58>
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80bf 	beq.w	8005224 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050aa:	f003 031f 	and.w	r3, r3, #31
 80050ae:	2202      	movs	r2, #2
 80050b0:	409a      	lsls	r2, r3
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d018      	beq.n	80050f2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f000 813a 	beq.w	8005348 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050dc:	e134      	b.n	8005348 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 8130 	beq.w	8005348 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050f0:	e12a      	b.n	8005348 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f040 8089 	bne.w	8005210 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a2b      	ldr	r2, [pc, #172]	@ (80051b0 <HAL_DMA_IRQHandler+0xce4>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d04a      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a29      	ldr	r2, [pc, #164]	@ (80051b4 <HAL_DMA_IRQHandler+0xce8>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d045      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a28      	ldr	r2, [pc, #160]	@ (80051b8 <HAL_DMA_IRQHandler+0xcec>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d040      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a26      	ldr	r2, [pc, #152]	@ (80051bc <HAL_DMA_IRQHandler+0xcf0>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d03b      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a25      	ldr	r2, [pc, #148]	@ (80051c0 <HAL_DMA_IRQHandler+0xcf4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d036      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a23      	ldr	r2, [pc, #140]	@ (80051c4 <HAL_DMA_IRQHandler+0xcf8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d031      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a22      	ldr	r2, [pc, #136]	@ (80051c8 <HAL_DMA_IRQHandler+0xcfc>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d02c      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a20      	ldr	r2, [pc, #128]	@ (80051cc <HAL_DMA_IRQHandler+0xd00>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d027      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1f      	ldr	r2, [pc, #124]	@ (80051d0 <HAL_DMA_IRQHandler+0xd04>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d022      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1d      	ldr	r2, [pc, #116]	@ (80051d4 <HAL_DMA_IRQHandler+0xd08>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01d      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1c      	ldr	r2, [pc, #112]	@ (80051d8 <HAL_DMA_IRQHandler+0xd0c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d018      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a1a      	ldr	r2, [pc, #104]	@ (80051dc <HAL_DMA_IRQHandler+0xd10>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d013      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a19      	ldr	r2, [pc, #100]	@ (80051e0 <HAL_DMA_IRQHandler+0xd14>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00e      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a17      	ldr	r2, [pc, #92]	@ (80051e4 <HAL_DMA_IRQHandler+0xd18>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d009      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a16      	ldr	r2, [pc, #88]	@ (80051e8 <HAL_DMA_IRQHandler+0xd1c>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d004      	beq.n	800519e <HAL_DMA_IRQHandler+0xcd2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a14      	ldr	r2, [pc, #80]	@ (80051ec <HAL_DMA_IRQHandler+0xd20>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d128      	bne.n	80051f0 <HAL_DMA_IRQHandler+0xd24>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 0214 	bic.w	r2, r2, #20
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e027      	b.n	8005200 <HAL_DMA_IRQHandler+0xd34>
 80051b0:	40020010 	.word	0x40020010
 80051b4:	40020028 	.word	0x40020028
 80051b8:	40020040 	.word	0x40020040
 80051bc:	40020058 	.word	0x40020058
 80051c0:	40020070 	.word	0x40020070
 80051c4:	40020088 	.word	0x40020088
 80051c8:	400200a0 	.word	0x400200a0
 80051cc:	400200b8 	.word	0x400200b8
 80051d0:	40020410 	.word	0x40020410
 80051d4:	40020428 	.word	0x40020428
 80051d8:	40020440 	.word	0x40020440
 80051dc:	40020458 	.word	0x40020458
 80051e0:	40020470 	.word	0x40020470
 80051e4:	40020488 	.word	0x40020488
 80051e8:	400204a0 	.word	0x400204a0
 80051ec:	400204b8 	.word	0x400204b8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 020a 	bic.w	r2, r2, #10
 80051fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 8097 	beq.w	8005348 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005222:	e091      	b.n	8005348 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005228:	f003 031f 	and.w	r3, r3, #31
 800522c:	2208      	movs	r2, #8
 800522e:	409a      	lsls	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8088 	beq.w	800534a <HAL_DMA_IRQHandler+0xe7e>
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8082 	beq.w	800534a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a41      	ldr	r2, [pc, #260]	@ (8005350 <HAL_DMA_IRQHandler+0xe84>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d04a      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a3f      	ldr	r2, [pc, #252]	@ (8005354 <HAL_DMA_IRQHandler+0xe88>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d045      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a3e      	ldr	r2, [pc, #248]	@ (8005358 <HAL_DMA_IRQHandler+0xe8c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d040      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a3c      	ldr	r2, [pc, #240]	@ (800535c <HAL_DMA_IRQHandler+0xe90>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d03b      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3b      	ldr	r2, [pc, #236]	@ (8005360 <HAL_DMA_IRQHandler+0xe94>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d036      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a39      	ldr	r2, [pc, #228]	@ (8005364 <HAL_DMA_IRQHandler+0xe98>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d031      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a38      	ldr	r2, [pc, #224]	@ (8005368 <HAL_DMA_IRQHandler+0xe9c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d02c      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a36      	ldr	r2, [pc, #216]	@ (800536c <HAL_DMA_IRQHandler+0xea0>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d027      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a35      	ldr	r2, [pc, #212]	@ (8005370 <HAL_DMA_IRQHandler+0xea4>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d022      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a33      	ldr	r2, [pc, #204]	@ (8005374 <HAL_DMA_IRQHandler+0xea8>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01d      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a32      	ldr	r2, [pc, #200]	@ (8005378 <HAL_DMA_IRQHandler+0xeac>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d018      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a30      	ldr	r2, [pc, #192]	@ (800537c <HAL_DMA_IRQHandler+0xeb0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d013      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005380 <HAL_DMA_IRQHandler+0xeb4>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00e      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005384 <HAL_DMA_IRQHandler+0xeb8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d009      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005388 <HAL_DMA_IRQHandler+0xebc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d004      	beq.n	80052e6 <HAL_DMA_IRQHandler+0xe1a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a2a      	ldr	r2, [pc, #168]	@ (800538c <HAL_DMA_IRQHandler+0xec0>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d108      	bne.n	80052f8 <HAL_DMA_IRQHandler+0xe2c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f022 021c 	bic.w	r2, r2, #28
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e007      	b.n	8005308 <HAL_DMA_IRQHandler+0xe3c>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 020e 	bic.w	r2, r2, #14
 8005306:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2201      	movs	r2, #1
 8005312:	409a      	lsls	r2, r3
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d009      	beq.n	800534a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
 800533e:	e004      	b.n	800534a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005340:	bf00      	nop
 8005342:	e002      	b.n	800534a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005344:	bf00      	nop
 8005346:	e000      	b.n	800534a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005348:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800534a:	3728      	adds	r7, #40	@ 0x28
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40020010 	.word	0x40020010
 8005354:	40020028 	.word	0x40020028
 8005358:	40020040 	.word	0x40020040
 800535c:	40020058 	.word	0x40020058
 8005360:	40020070 	.word	0x40020070
 8005364:	40020088 	.word	0x40020088
 8005368:	400200a0 	.word	0x400200a0
 800536c:	400200b8 	.word	0x400200b8
 8005370:	40020410 	.word	0x40020410
 8005374:	40020428 	.word	0x40020428
 8005378:	40020440 	.word	0x40020440
 800537c:	40020458 	.word	0x40020458
 8005380:	40020470 	.word	0x40020470
 8005384:	40020488 	.word	0x40020488
 8005388:	400204a0 	.word	0x400204a0
 800538c:	400204b8 	.word	0x400204b8

08005390 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7f      	ldr	r2, [pc, #508]	@ (80055ac <DMA_SetConfig+0x21c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d072      	beq.n	800549a <DMA_SetConfig+0x10a>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a7d      	ldr	r2, [pc, #500]	@ (80055b0 <DMA_SetConfig+0x220>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d06d      	beq.n	800549a <DMA_SetConfig+0x10a>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7c      	ldr	r2, [pc, #496]	@ (80055b4 <DMA_SetConfig+0x224>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d068      	beq.n	800549a <DMA_SetConfig+0x10a>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7a      	ldr	r2, [pc, #488]	@ (80055b8 <DMA_SetConfig+0x228>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d063      	beq.n	800549a <DMA_SetConfig+0x10a>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a79      	ldr	r2, [pc, #484]	@ (80055bc <DMA_SetConfig+0x22c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d05e      	beq.n	800549a <DMA_SetConfig+0x10a>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a77      	ldr	r2, [pc, #476]	@ (80055c0 <DMA_SetConfig+0x230>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d059      	beq.n	800549a <DMA_SetConfig+0x10a>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a76      	ldr	r2, [pc, #472]	@ (80055c4 <DMA_SetConfig+0x234>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d054      	beq.n	800549a <DMA_SetConfig+0x10a>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a74      	ldr	r2, [pc, #464]	@ (80055c8 <DMA_SetConfig+0x238>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d04f      	beq.n	800549a <DMA_SetConfig+0x10a>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a73      	ldr	r2, [pc, #460]	@ (80055cc <DMA_SetConfig+0x23c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d04a      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a71      	ldr	r2, [pc, #452]	@ (80055d0 <DMA_SetConfig+0x240>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d045      	beq.n	800549a <DMA_SetConfig+0x10a>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a70      	ldr	r2, [pc, #448]	@ (80055d4 <DMA_SetConfig+0x244>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d040      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a6e      	ldr	r2, [pc, #440]	@ (80055d8 <DMA_SetConfig+0x248>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d03b      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6d      	ldr	r2, [pc, #436]	@ (80055dc <DMA_SetConfig+0x24c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d036      	beq.n	800549a <DMA_SetConfig+0x10a>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6b      	ldr	r2, [pc, #428]	@ (80055e0 <DMA_SetConfig+0x250>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d031      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a6a      	ldr	r2, [pc, #424]	@ (80055e4 <DMA_SetConfig+0x254>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d02c      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a68      	ldr	r2, [pc, #416]	@ (80055e8 <DMA_SetConfig+0x258>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d027      	beq.n	800549a <DMA_SetConfig+0x10a>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a67      	ldr	r2, [pc, #412]	@ (80055ec <DMA_SetConfig+0x25c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d022      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a65      	ldr	r2, [pc, #404]	@ (80055f0 <DMA_SetConfig+0x260>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d01d      	beq.n	800549a <DMA_SetConfig+0x10a>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a64      	ldr	r2, [pc, #400]	@ (80055f4 <DMA_SetConfig+0x264>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d018      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a62      	ldr	r2, [pc, #392]	@ (80055f8 <DMA_SetConfig+0x268>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d013      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a61      	ldr	r2, [pc, #388]	@ (80055fc <DMA_SetConfig+0x26c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00e      	beq.n	800549a <DMA_SetConfig+0x10a>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a5f      	ldr	r2, [pc, #380]	@ (8005600 <DMA_SetConfig+0x270>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d009      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a5e      	ldr	r2, [pc, #376]	@ (8005604 <DMA_SetConfig+0x274>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d004      	beq.n	800549a <DMA_SetConfig+0x10a>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a5c      	ldr	r2, [pc, #368]	@ (8005608 <DMA_SetConfig+0x278>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <DMA_SetConfig+0x10e>
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <DMA_SetConfig+0x110>
 800549e:	2300      	movs	r3, #0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00d      	beq.n	80054c0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80054ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80054be:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a39      	ldr	r2, [pc, #228]	@ (80055ac <DMA_SetConfig+0x21c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d04a      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a38      	ldr	r2, [pc, #224]	@ (80055b0 <DMA_SetConfig+0x220>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d045      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a36      	ldr	r2, [pc, #216]	@ (80055b4 <DMA_SetConfig+0x224>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d040      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a35      	ldr	r2, [pc, #212]	@ (80055b8 <DMA_SetConfig+0x228>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d03b      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a33      	ldr	r2, [pc, #204]	@ (80055bc <DMA_SetConfig+0x22c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d036      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a32      	ldr	r2, [pc, #200]	@ (80055c0 <DMA_SetConfig+0x230>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d031      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a30      	ldr	r2, [pc, #192]	@ (80055c4 <DMA_SetConfig+0x234>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d02c      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a2f      	ldr	r2, [pc, #188]	@ (80055c8 <DMA_SetConfig+0x238>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d027      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2d      	ldr	r2, [pc, #180]	@ (80055cc <DMA_SetConfig+0x23c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2c      	ldr	r2, [pc, #176]	@ (80055d0 <DMA_SetConfig+0x240>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d01d      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <DMA_SetConfig+0x244>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a29      	ldr	r2, [pc, #164]	@ (80055d8 <DMA_SetConfig+0x248>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a27      	ldr	r2, [pc, #156]	@ (80055dc <DMA_SetConfig+0x24c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a26      	ldr	r2, [pc, #152]	@ (80055e0 <DMA_SetConfig+0x250>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a24      	ldr	r2, [pc, #144]	@ (80055e4 <DMA_SetConfig+0x254>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <DMA_SetConfig+0x1d0>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a23      	ldr	r2, [pc, #140]	@ (80055e8 <DMA_SetConfig+0x258>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d101      	bne.n	8005564 <DMA_SetConfig+0x1d4>
 8005560:	2301      	movs	r3, #1
 8005562:	e000      	b.n	8005566 <DMA_SetConfig+0x1d6>
 8005564:	2300      	movs	r3, #0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d059      	beq.n	800561e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800556e:	f003 031f 	and.w	r3, r3, #31
 8005572:	223f      	movs	r2, #63	@ 0x3f
 8005574:	409a      	lsls	r2, r3
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005588:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b40      	cmp	r3, #64	@ 0x40
 8005598:	d138      	bne.n	800560c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055aa:	e0ae      	b.n	800570a <DMA_SetConfig+0x37a>
 80055ac:	40020010 	.word	0x40020010
 80055b0:	40020028 	.word	0x40020028
 80055b4:	40020040 	.word	0x40020040
 80055b8:	40020058 	.word	0x40020058
 80055bc:	40020070 	.word	0x40020070
 80055c0:	40020088 	.word	0x40020088
 80055c4:	400200a0 	.word	0x400200a0
 80055c8:	400200b8 	.word	0x400200b8
 80055cc:	40020410 	.word	0x40020410
 80055d0:	40020428 	.word	0x40020428
 80055d4:	40020440 	.word	0x40020440
 80055d8:	40020458 	.word	0x40020458
 80055dc:	40020470 	.word	0x40020470
 80055e0:	40020488 	.word	0x40020488
 80055e4:	400204a0 	.word	0x400204a0
 80055e8:	400204b8 	.word	0x400204b8
 80055ec:	58025408 	.word	0x58025408
 80055f0:	5802541c 	.word	0x5802541c
 80055f4:	58025430 	.word	0x58025430
 80055f8:	58025444 	.word	0x58025444
 80055fc:	58025458 	.word	0x58025458
 8005600:	5802546c 	.word	0x5802546c
 8005604:	58025480 	.word	0x58025480
 8005608:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	60da      	str	r2, [r3, #12]
}
 800561c:	e075      	b.n	800570a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a3d      	ldr	r2, [pc, #244]	@ (8005718 <DMA_SetConfig+0x388>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d04a      	beq.n	80056be <DMA_SetConfig+0x32e>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a3b      	ldr	r2, [pc, #236]	@ (800571c <DMA_SetConfig+0x38c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d045      	beq.n	80056be <DMA_SetConfig+0x32e>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a3a      	ldr	r2, [pc, #232]	@ (8005720 <DMA_SetConfig+0x390>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d040      	beq.n	80056be <DMA_SetConfig+0x32e>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a38      	ldr	r2, [pc, #224]	@ (8005724 <DMA_SetConfig+0x394>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d03b      	beq.n	80056be <DMA_SetConfig+0x32e>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a37      	ldr	r2, [pc, #220]	@ (8005728 <DMA_SetConfig+0x398>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d036      	beq.n	80056be <DMA_SetConfig+0x32e>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a35      	ldr	r2, [pc, #212]	@ (800572c <DMA_SetConfig+0x39c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d031      	beq.n	80056be <DMA_SetConfig+0x32e>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a34      	ldr	r2, [pc, #208]	@ (8005730 <DMA_SetConfig+0x3a0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d02c      	beq.n	80056be <DMA_SetConfig+0x32e>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a32      	ldr	r2, [pc, #200]	@ (8005734 <DMA_SetConfig+0x3a4>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d027      	beq.n	80056be <DMA_SetConfig+0x32e>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a31      	ldr	r2, [pc, #196]	@ (8005738 <DMA_SetConfig+0x3a8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d022      	beq.n	80056be <DMA_SetConfig+0x32e>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a2f      	ldr	r2, [pc, #188]	@ (800573c <DMA_SetConfig+0x3ac>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d01d      	beq.n	80056be <DMA_SetConfig+0x32e>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a2e      	ldr	r2, [pc, #184]	@ (8005740 <DMA_SetConfig+0x3b0>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d018      	beq.n	80056be <DMA_SetConfig+0x32e>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a2c      	ldr	r2, [pc, #176]	@ (8005744 <DMA_SetConfig+0x3b4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d013      	beq.n	80056be <DMA_SetConfig+0x32e>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a2b      	ldr	r2, [pc, #172]	@ (8005748 <DMA_SetConfig+0x3b8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d00e      	beq.n	80056be <DMA_SetConfig+0x32e>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a29      	ldr	r2, [pc, #164]	@ (800574c <DMA_SetConfig+0x3bc>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d009      	beq.n	80056be <DMA_SetConfig+0x32e>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a28      	ldr	r2, [pc, #160]	@ (8005750 <DMA_SetConfig+0x3c0>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d004      	beq.n	80056be <DMA_SetConfig+0x32e>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a26      	ldr	r2, [pc, #152]	@ (8005754 <DMA_SetConfig+0x3c4>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <DMA_SetConfig+0x332>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <DMA_SetConfig+0x334>
 80056c2:	2300      	movs	r3, #0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d020      	beq.n	800570a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	2201      	movs	r2, #1
 80056d2:	409a      	lsls	r2, r3
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b40      	cmp	r3, #64	@ 0x40
 80056e6:	d108      	bne.n	80056fa <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	60da      	str	r2, [r3, #12]
}
 80056f8:	e007      	b.n	800570a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	60da      	str	r2, [r3, #12]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	48022c08 	.word	0x48022c08
 800571c:	48022c1c 	.word	0x48022c1c
 8005720:	48022c30 	.word	0x48022c30
 8005724:	48022c44 	.word	0x48022c44
 8005728:	48022c58 	.word	0x48022c58
 800572c:	48022c6c 	.word	0x48022c6c
 8005730:	48022c80 	.word	0x48022c80
 8005734:	48022c94 	.word	0x48022c94
 8005738:	58025408 	.word	0x58025408
 800573c:	5802541c 	.word	0x5802541c
 8005740:	58025430 	.word	0x58025430
 8005744:	58025444 	.word	0x58025444
 8005748:	58025458 	.word	0x58025458
 800574c:	5802546c 	.word	0x5802546c
 8005750:	58025480 	.word	0x58025480
 8005754:	58025494 	.word	0x58025494

08005758 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a42      	ldr	r2, [pc, #264]	@ (8005870 <DMA_CalcBaseAndBitshift+0x118>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d04a      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a41      	ldr	r2, [pc, #260]	@ (8005874 <DMA_CalcBaseAndBitshift+0x11c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d045      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a3f      	ldr	r2, [pc, #252]	@ (8005878 <DMA_CalcBaseAndBitshift+0x120>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d040      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a3e      	ldr	r2, [pc, #248]	@ (800587c <DMA_CalcBaseAndBitshift+0x124>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d03b      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a3c      	ldr	r2, [pc, #240]	@ (8005880 <DMA_CalcBaseAndBitshift+0x128>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d036      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a3b      	ldr	r2, [pc, #236]	@ (8005884 <DMA_CalcBaseAndBitshift+0x12c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d031      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a39      	ldr	r2, [pc, #228]	@ (8005888 <DMA_CalcBaseAndBitshift+0x130>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d02c      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a38      	ldr	r2, [pc, #224]	@ (800588c <DMA_CalcBaseAndBitshift+0x134>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d027      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a36      	ldr	r2, [pc, #216]	@ (8005890 <DMA_CalcBaseAndBitshift+0x138>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d022      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a35      	ldr	r2, [pc, #212]	@ (8005894 <DMA_CalcBaseAndBitshift+0x13c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d01d      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a33      	ldr	r2, [pc, #204]	@ (8005898 <DMA_CalcBaseAndBitshift+0x140>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d018      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a32      	ldr	r2, [pc, #200]	@ (800589c <DMA_CalcBaseAndBitshift+0x144>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d013      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a30      	ldr	r2, [pc, #192]	@ (80058a0 <DMA_CalcBaseAndBitshift+0x148>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d00e      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a2f      	ldr	r2, [pc, #188]	@ (80058a4 <DMA_CalcBaseAndBitshift+0x14c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d009      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a2d      	ldr	r2, [pc, #180]	@ (80058a8 <DMA_CalcBaseAndBitshift+0x150>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d004      	beq.n	8005800 <DMA_CalcBaseAndBitshift+0xa8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a2c      	ldr	r2, [pc, #176]	@ (80058ac <DMA_CalcBaseAndBitshift+0x154>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d101      	bne.n	8005804 <DMA_CalcBaseAndBitshift+0xac>
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <DMA_CalcBaseAndBitshift+0xae>
 8005804:	2300      	movs	r3, #0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d024      	beq.n	8005854 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	3b10      	subs	r3, #16
 8005812:	4a27      	ldr	r2, [pc, #156]	@ (80058b0 <DMA_CalcBaseAndBitshift+0x158>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	091b      	lsrs	r3, r3, #4
 800581a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	4a24      	ldr	r2, [pc, #144]	@ (80058b4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005824:	5cd3      	ldrb	r3, [r2, r3]
 8005826:	461a      	mov	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b03      	cmp	r3, #3
 8005830:	d908      	bls.n	8005844 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	4b1f      	ldr	r3, [pc, #124]	@ (80058b8 <DMA_CalcBaseAndBitshift+0x160>)
 800583a:	4013      	ands	r3, r2
 800583c:	1d1a      	adds	r2, r3, #4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	659a      	str	r2, [r3, #88]	@ 0x58
 8005842:	e00d      	b.n	8005860 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	4b1b      	ldr	r3, [pc, #108]	@ (80058b8 <DMA_CalcBaseAndBitshift+0x160>)
 800584c:	4013      	ands	r3, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6593      	str	r3, [r2, #88]	@ 0x58
 8005852:	e005      	b.n	8005860 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40020010 	.word	0x40020010
 8005874:	40020028 	.word	0x40020028
 8005878:	40020040 	.word	0x40020040
 800587c:	40020058 	.word	0x40020058
 8005880:	40020070 	.word	0x40020070
 8005884:	40020088 	.word	0x40020088
 8005888:	400200a0 	.word	0x400200a0
 800588c:	400200b8 	.word	0x400200b8
 8005890:	40020410 	.word	0x40020410
 8005894:	40020428 	.word	0x40020428
 8005898:	40020440 	.word	0x40020440
 800589c:	40020458 	.word	0x40020458
 80058a0:	40020470 	.word	0x40020470
 80058a4:	40020488 	.word	0x40020488
 80058a8:	400204a0 	.word	0x400204a0
 80058ac:	400204b8 	.word	0x400204b8
 80058b0:	aaaaaaab 	.word	0xaaaaaaab
 80058b4:	0800b5c4 	.word	0x0800b5c4
 80058b8:	fffffc00 	.word	0xfffffc00

080058bc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058c4:	2300      	movs	r3, #0
 80058c6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d120      	bne.n	8005912 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d858      	bhi.n	800598a <DMA_CheckFifoParam+0xce>
 80058d8:	a201      	add	r2, pc, #4	@ (adr r2, 80058e0 <DMA_CheckFifoParam+0x24>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	080058f1 	.word	0x080058f1
 80058e4:	08005903 	.word	0x08005903
 80058e8:	080058f1 	.word	0x080058f1
 80058ec:	0800598b 	.word	0x0800598b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d048      	beq.n	800598e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005900:	e045      	b.n	800598e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800590a:	d142      	bne.n	8005992 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005910:	e03f      	b.n	8005992 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800591a:	d123      	bne.n	8005964 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005920:	2b03      	cmp	r3, #3
 8005922:	d838      	bhi.n	8005996 <DMA_CheckFifoParam+0xda>
 8005924:	a201      	add	r2, pc, #4	@ (adr r2, 800592c <DMA_CheckFifoParam+0x70>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	0800593d 	.word	0x0800593d
 8005930:	08005943 	.word	0x08005943
 8005934:	0800593d 	.word	0x0800593d
 8005938:	08005955 	.word	0x08005955
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	73fb      	strb	r3, [r7, #15]
        break;
 8005940:	e030      	b.n	80059a4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d025      	beq.n	800599a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005952:	e022      	b.n	800599a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800595c:	d11f      	bne.n	800599e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005962:	e01c      	b.n	800599e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005968:	2b02      	cmp	r3, #2
 800596a:	d902      	bls.n	8005972 <DMA_CheckFifoParam+0xb6>
 800596c:	2b03      	cmp	r3, #3
 800596e:	d003      	beq.n	8005978 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005970:	e018      	b.n	80059a4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	73fb      	strb	r3, [r7, #15]
        break;
 8005976:	e015      	b.n	80059a4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00e      	beq.n	80059a2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
    break;
 8005988:	e00b      	b.n	80059a2 <DMA_CheckFifoParam+0xe6>
        break;
 800598a:	bf00      	nop
 800598c:	e00a      	b.n	80059a4 <DMA_CheckFifoParam+0xe8>
        break;
 800598e:	bf00      	nop
 8005990:	e008      	b.n	80059a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005992:	bf00      	nop
 8005994:	e006      	b.n	80059a4 <DMA_CheckFifoParam+0xe8>
        break;
 8005996:	bf00      	nop
 8005998:	e004      	b.n	80059a4 <DMA_CheckFifoParam+0xe8>
        break;
 800599a:	bf00      	nop
 800599c:	e002      	b.n	80059a4 <DMA_CheckFifoParam+0xe8>
        break;
 800599e:	bf00      	nop
 80059a0:	e000      	b.n	80059a4 <DMA_CheckFifoParam+0xe8>
    break;
 80059a2:	bf00      	nop
    }
  }

  return status;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop

080059b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a38      	ldr	r2, [pc, #224]	@ (8005aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d022      	beq.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a36      	ldr	r2, [pc, #216]	@ (8005aac <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d01d      	beq.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a35      	ldr	r2, [pc, #212]	@ (8005ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d018      	beq.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a33      	ldr	r2, [pc, #204]	@ (8005ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d013      	beq.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a32      	ldr	r2, [pc, #200]	@ (8005ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00e      	beq.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a30      	ldr	r2, [pc, #192]	@ (8005abc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d009      	beq.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a2f      	ldr	r2, [pc, #188]	@ (8005ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d004      	beq.n	8005a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d101      	bne.n	8005a16 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d01a      	beq.n	8005a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	3b08      	subs	r3, #8
 8005a24:	4a28      	ldr	r2, [pc, #160]	@ (8005ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	091b      	lsrs	r3, r3, #4
 8005a2c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	4b26      	ldr	r3, [pc, #152]	@ (8005acc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	461a      	mov	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a24      	ldr	r2, [pc, #144]	@ (8005ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005a40:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 031f 	and.w	r3, r3, #31
 8005a48:	2201      	movs	r2, #1
 8005a4a:	409a      	lsls	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005a50:	e024      	b.n	8005a9c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	3b10      	subs	r3, #16
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a60:	091b      	lsrs	r3, r3, #4
 8005a62:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d806      	bhi.n	8005a7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005adc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d902      	bls.n	8005a7a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3308      	adds	r3, #8
 8005a78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4b18      	ldr	r3, [pc, #96]	@ (8005ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	461a      	mov	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a16      	ldr	r2, [pc, #88]	@ (8005ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005a8c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	2201      	movs	r2, #1
 8005a96:	409a      	lsls	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a9c:	bf00      	nop
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	58025408 	.word	0x58025408
 8005aac:	5802541c 	.word	0x5802541c
 8005ab0:	58025430 	.word	0x58025430
 8005ab4:	58025444 	.word	0x58025444
 8005ab8:	58025458 	.word	0x58025458
 8005abc:	5802546c 	.word	0x5802546c
 8005ac0:	58025480 	.word	0x58025480
 8005ac4:	58025494 	.word	0x58025494
 8005ac8:	cccccccd 	.word	0xcccccccd
 8005acc:	16009600 	.word	0x16009600
 8005ad0:	58025880 	.word	0x58025880
 8005ad4:	aaaaaaab 	.word	0xaaaaaaab
 8005ad8:	400204b8 	.word	0x400204b8
 8005adc:	4002040f 	.word	0x4002040f
 8005ae0:	10008200 	.word	0x10008200
 8005ae4:	40020880 	.word	0x40020880

08005ae8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d04a      	beq.n	8005b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d847      	bhi.n	8005b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a25      	ldr	r2, [pc, #148]	@ (8005ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d022      	beq.n	8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a24      	ldr	r2, [pc, #144]	@ (8005ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d01d      	beq.n	8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a22      	ldr	r2, [pc, #136]	@ (8005ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a21      	ldr	r2, [pc, #132]	@ (8005bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d101      	bne.n	8005b58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4b17      	ldr	r3, [pc, #92]	@ (8005bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005b62:	4413      	add	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	461a      	mov	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a15      	ldr	r2, [pc, #84]	@ (8005bc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005b70:	671a      	str	r2, [r3, #112]	@ 0x70
 8005b72:	e009      	b.n	8005b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4b14      	ldr	r3, [pc, #80]	@ (8005bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005b78:	4413      	add	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a11      	ldr	r2, [pc, #68]	@ (8005bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005b86:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	409a      	lsls	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr
 8005ba0:	58025408 	.word	0x58025408
 8005ba4:	5802541c 	.word	0x5802541c
 8005ba8:	58025430 	.word	0x58025430
 8005bac:	58025444 	.word	0x58025444
 8005bb0:	58025458 	.word	0x58025458
 8005bb4:	5802546c 	.word	0x5802546c
 8005bb8:	58025480 	.word	0x58025480
 8005bbc:	58025494 	.word	0x58025494
 8005bc0:	1600963f 	.word	0x1600963f
 8005bc4:	58025940 	.word	0x58025940
 8005bc8:	1000823f 	.word	0x1000823f
 8005bcc:	40020940 	.word	0x40020940

08005bd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b089      	sub	sp, #36	@ 0x24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005bde:	4b89      	ldr	r3, [pc, #548]	@ (8005e04 <HAL_GPIO_Init+0x234>)
 8005be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005be2:	e194      	b.n	8005f0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	2101      	movs	r1, #1
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 8186 	beq.w	8005f08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f003 0303 	and.w	r3, r3, #3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d005      	beq.n	8005c14 <HAL_GPIO_Init+0x44>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d130      	bne.n	8005c76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	2203      	movs	r2, #3
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	43db      	mvns	r3, r3
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	fa02 f303 	lsl.w	r3, r2, r3
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	43db      	mvns	r3, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	4013      	ands	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	f003 0201 	and.w	r2, r3, #1
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	f003 0303 	and.w	r3, r3, #3
 8005c7e:	2b03      	cmp	r3, #3
 8005c80:	d017      	beq.n	8005cb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	43db      	mvns	r3, r3
 8005c94:	69ba      	ldr	r2, [r7, #24]
 8005c96:	4013      	ands	r3, r2
 8005c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689a      	ldr	r2, [r3, #8]
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	69ba      	ldr	r2, [r7, #24]
 8005cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d123      	bne.n	8005d06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	08da      	lsrs	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	3208      	adds	r2, #8
 8005cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	220f      	movs	r2, #15
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf2:	69ba      	ldr	r2, [r7, #24]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	08da      	lsrs	r2, r3, #3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	3208      	adds	r2, #8
 8005d00:	69b9      	ldr	r1, [r7, #24]
 8005d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	2203      	movs	r2, #3
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	43db      	mvns	r3, r3
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f003 0203 	and.w	r2, r3, #3
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80e0 	beq.w	8005f08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d48:	4b2f      	ldr	r3, [pc, #188]	@ (8005e08 <HAL_GPIO_Init+0x238>)
 8005d4a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005d4e:	4a2e      	ldr	r2, [pc, #184]	@ (8005e08 <HAL_GPIO_Init+0x238>)
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8005d58:	4b2b      	ldr	r3, [pc, #172]	@ (8005e08 <HAL_GPIO_Init+0x238>)
 8005d5a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d66:	4a29      	ldr	r2, [pc, #164]	@ (8005e0c <HAL_GPIO_Init+0x23c>)
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	089b      	lsrs	r3, r3, #2
 8005d6c:	3302      	adds	r3, #2
 8005d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	220f      	movs	r2, #15
 8005d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d82:	43db      	mvns	r3, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4013      	ands	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a20      	ldr	r2, [pc, #128]	@ (8005e10 <HAL_GPIO_Init+0x240>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d052      	beq.n	8005e38 <HAL_GPIO_Init+0x268>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1f      	ldr	r2, [pc, #124]	@ (8005e14 <HAL_GPIO_Init+0x244>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d031      	beq.n	8005dfe <HAL_GPIO_Init+0x22e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8005e18 <HAL_GPIO_Init+0x248>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d02b      	beq.n	8005dfa <HAL_GPIO_Init+0x22a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e1c <HAL_GPIO_Init+0x24c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d025      	beq.n	8005df6 <HAL_GPIO_Init+0x226>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a1c      	ldr	r2, [pc, #112]	@ (8005e20 <HAL_GPIO_Init+0x250>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d01f      	beq.n	8005df2 <HAL_GPIO_Init+0x222>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a1b      	ldr	r2, [pc, #108]	@ (8005e24 <HAL_GPIO_Init+0x254>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d019      	beq.n	8005dee <HAL_GPIO_Init+0x21e>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005e28 <HAL_GPIO_Init+0x258>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d013      	beq.n	8005dea <HAL_GPIO_Init+0x21a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a19      	ldr	r2, [pc, #100]	@ (8005e2c <HAL_GPIO_Init+0x25c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d00d      	beq.n	8005de6 <HAL_GPIO_Init+0x216>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a18      	ldr	r2, [pc, #96]	@ (8005e30 <HAL_GPIO_Init+0x260>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d007      	beq.n	8005de2 <HAL_GPIO_Init+0x212>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a17      	ldr	r2, [pc, #92]	@ (8005e34 <HAL_GPIO_Init+0x264>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d101      	bne.n	8005dde <HAL_GPIO_Init+0x20e>
 8005dda:	2309      	movs	r3, #9
 8005ddc:	e02d      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005dde:	230a      	movs	r3, #10
 8005de0:	e02b      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005de2:	2308      	movs	r3, #8
 8005de4:	e029      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005de6:	2307      	movs	r3, #7
 8005de8:	e027      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005dea:	2306      	movs	r3, #6
 8005dec:	e025      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005dee:	2305      	movs	r3, #5
 8005df0:	e023      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005df2:	2304      	movs	r3, #4
 8005df4:	e021      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005df6:	2303      	movs	r3, #3
 8005df8:	e01f      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e01d      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e01b      	b.n	8005e3a <HAL_GPIO_Init+0x26a>
 8005e02:	bf00      	nop
 8005e04:	58000080 	.word	0x58000080
 8005e08:	58024400 	.word	0x58024400
 8005e0c:	58000400 	.word	0x58000400
 8005e10:	58020000 	.word	0x58020000
 8005e14:	58020400 	.word	0x58020400
 8005e18:	58020800 	.word	0x58020800
 8005e1c:	58020c00 	.word	0x58020c00
 8005e20:	58021000 	.word	0x58021000
 8005e24:	58021400 	.word	0x58021400
 8005e28:	58021800 	.word	0x58021800
 8005e2c:	58021c00 	.word	0x58021c00
 8005e30:	58022000 	.word	0x58022000
 8005e34:	58022400 	.word	0x58022400
 8005e38:	2300      	movs	r3, #0
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	f002 0203 	and.w	r2, r2, #3
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	4093      	lsls	r3, r2
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e4a:	4938      	ldr	r1, [pc, #224]	@ (8005f2c <HAL_GPIO_Init+0x35c>)
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	089b      	lsrs	r3, r3, #2
 8005e50:	3302      	adds	r3, #2
 8005e52:	69ba      	ldr	r2, [r7, #24]
 8005e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	43db      	mvns	r3, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4013      	ands	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	43db      	mvns	r3, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	4013      	ands	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005ea4:	69ba      	ldr	r2, [r7, #24]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005eac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	43db      	mvns	r3, r3
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	69ba      	ldr	r2, [r7, #24]
 8005edc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4013      	ands	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	fa22 f303 	lsr.w	r3, r2, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f47f ae63 	bne.w	8005be4 <HAL_GPIO_Init+0x14>
  }
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	3724      	adds	r7, #36	@ 0x24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	58000400 	.word	0x58000400

08005f30 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8005f30:	b480      	push	{r7}
 8005f32:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8005f34:	4b05      	ldr	r3, [pc, #20]	@ (8005f4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a04      	ldr	r2, [pc, #16]	@ (8005f4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f3e:	6013      	str	r3, [r2, #0]
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	58024800 	.word	0x58024800

08005f50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005f58:	4b29      	ldr	r3, [pc, #164]	@ (8006000 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	2b06      	cmp	r3, #6
 8005f62:	d00a      	beq.n	8005f7a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005f64:	4b26      	ldr	r3, [pc, #152]	@ (8006000 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d001      	beq.n	8005f76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e040      	b.n	8005ff8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e03e      	b.n	8005ff8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005f7a:	4b21      	ldr	r3, [pc, #132]	@ (8006000 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005f82:	491f      	ldr	r1, [pc, #124]	@ (8006000 <HAL_PWREx_ConfigSupply+0xb0>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005f8a:	f7fb f90d 	bl	80011a8 <HAL_GetTick>
 8005f8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005f90:	e009      	b.n	8005fa6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005f92:	f7fb f909 	bl	80011a8 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fa0:	d901      	bls.n	8005fa6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e028      	b.n	8005ff8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005fa6:	4b16      	ldr	r3, [pc, #88]	@ (8006000 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb2:	d1ee      	bne.n	8005f92 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b1e      	cmp	r3, #30
 8005fb8:	d008      	beq.n	8005fcc <HAL_PWREx_ConfigSupply+0x7c>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fbe:	d005      	beq.n	8005fcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b1d      	cmp	r3, #29
 8005fc4:	d002      	beq.n	8005fcc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b2d      	cmp	r3, #45	@ 0x2d
 8005fca:	d114      	bne.n	8005ff6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005fcc:	f7fb f8ec 	bl	80011a8 <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005fd2:	e009      	b.n	8005fe8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005fd4:	f7fb f8e8 	bl	80011a8 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fe2:	d901      	bls.n	8005fe8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e007      	b.n	8005ff8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005fe8:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <HAL_PWREx_ConfigSupply+0xb0>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff4:	d1ee      	bne.n	8005fd4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	58024800 	.word	0x58024800

08006004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b08c      	sub	sp, #48	@ 0x30
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f000 bc1f 	b.w	8006856 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	f000 80b3 	beq.w	800618c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006026:	4b95      	ldr	r3, [pc, #596]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800602e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006030:	4b92      	ldr	r3, [pc, #584]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006038:	2b10      	cmp	r3, #16
 800603a:	d007      	beq.n	800604c <HAL_RCC_OscConfig+0x48>
 800603c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603e:	2b18      	cmp	r3, #24
 8006040:	d112      	bne.n	8006068 <HAL_RCC_OscConfig+0x64>
 8006042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d10d      	bne.n	8006068 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800604c:	4b8b      	ldr	r3, [pc, #556]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8098 	beq.w	800618a <HAL_RCC_OscConfig+0x186>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 8093 	bne.w	800618a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e3f6      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006070:	d106      	bne.n	8006080 <HAL_RCC_OscConfig+0x7c>
 8006072:	4b82      	ldr	r3, [pc, #520]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a81      	ldr	r2, [pc, #516]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e058      	b.n	8006132 <HAL_RCC_OscConfig+0x12e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d112      	bne.n	80060ae <HAL_RCC_OscConfig+0xaa>
 8006088:	4b7c      	ldr	r3, [pc, #496]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a7b      	ldr	r2, [pc, #492]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800608e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006092:	6013      	str	r3, [r2, #0]
 8006094:	4b79      	ldr	r3, [pc, #484]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a78      	ldr	r2, [pc, #480]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800609a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	4b76      	ldr	r3, [pc, #472]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a75      	ldr	r2, [pc, #468]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	e041      	b.n	8006132 <HAL_RCC_OscConfig+0x12e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060b6:	d112      	bne.n	80060de <HAL_RCC_OscConfig+0xda>
 80060b8:	4b70      	ldr	r3, [pc, #448]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a6f      	ldr	r2, [pc, #444]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	4b6d      	ldr	r3, [pc, #436]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a6c      	ldr	r2, [pc, #432]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060ca:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	4b6a      	ldr	r3, [pc, #424]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a69      	ldr	r2, [pc, #420]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060da:	6013      	str	r3, [r2, #0]
 80060dc:	e029      	b.n	8006132 <HAL_RCC_OscConfig+0x12e>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80060e6:	d112      	bne.n	800610e <HAL_RCC_OscConfig+0x10a>
 80060e8:	4b64      	ldr	r3, [pc, #400]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a63      	ldr	r2, [pc, #396]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	4b61      	ldr	r3, [pc, #388]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a60      	ldr	r2, [pc, #384]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80060fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	4b5e      	ldr	r3, [pc, #376]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a5d      	ldr	r2, [pc, #372]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	e011      	b.n	8006132 <HAL_RCC_OscConfig+0x12e>
 800610e:	4b5b      	ldr	r3, [pc, #364]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5a      	ldr	r2, [pc, #360]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4b58      	ldr	r3, [pc, #352]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a57      	ldr	r2, [pc, #348]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	4b55      	ldr	r3, [pc, #340]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a54      	ldr	r2, [pc, #336]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800612c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006130:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d013      	beq.n	8006162 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613a:	f7fb f835 	bl	80011a8 <HAL_GetTick>
 800613e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006140:	e008      	b.n	8006154 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006142:	f7fb f831 	bl	80011a8 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b64      	cmp	r3, #100	@ 0x64
 800614e:	d901      	bls.n	8006154 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e380      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006154:	4b49      	ldr	r3, [pc, #292]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f0      	beq.n	8006142 <HAL_RCC_OscConfig+0x13e>
 8006160:	e014      	b.n	800618c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006162:	f7fb f821 	bl	80011a8 <HAL_GetTick>
 8006166:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006168:	e008      	b.n	800617c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800616a:	f7fb f81d 	bl	80011a8 <HAL_GetTick>
 800616e:	4602      	mov	r2, r0
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	2b64      	cmp	r3, #100	@ 0x64
 8006176:	d901      	bls.n	800617c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e36c      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800617c:	4b3f      	ldr	r3, [pc, #252]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1f0      	bne.n	800616a <HAL_RCC_OscConfig+0x166>
 8006188:	e000      	b.n	800618c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800618a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 808c 	beq.w	80062b2 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800619a:	4b38      	ldr	r3, [pc, #224]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061a2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061a4:	4b35      	ldr	r3, [pc, #212]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d007      	beq.n	80061c0 <HAL_RCC_OscConfig+0x1bc>
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	2b18      	cmp	r3, #24
 80061b4:	d137      	bne.n	8006226 <HAL_RCC_OscConfig+0x222>
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d132      	bne.n	8006226 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061c0:	4b2e      	ldr	r3, [pc, #184]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_RCC_OscConfig+0x1d4>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d101      	bne.n	80061d8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e33e      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80061d8:	4b28      	ldr	r3, [pc, #160]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f023 0219 	bic.w	r2, r3, #25
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4925      	ldr	r1, [pc, #148]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ea:	f7fa ffdd 	bl	80011a8 <HAL_GetTick>
 80061ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061f0:	e008      	b.n	8006204 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061f2:	f7fa ffd9 	bl	80011a8 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e328      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006204:	4b1d      	ldr	r3, [pc, #116]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f0      	beq.n	80061f2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006210:	4b1a      	ldr	r3, [pc, #104]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	061b      	lsls	r3, r3, #24
 800621e:	4917      	ldr	r1, [pc, #92]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006220:	4313      	orrs	r3, r2
 8006222:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006224:	e045      	b.n	80062b2 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d028      	beq.n	8006280 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800622e:	4b13      	ldr	r3, [pc, #76]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 0219 	bic.w	r2, r3, #25
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	4910      	ldr	r1, [pc, #64]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800623c:	4313      	orrs	r3, r2
 800623e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fa ffb2 	bl	80011a8 <HAL_GetTick>
 8006244:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006248:	f7fa ffae 	bl	80011a8 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e2fd      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800625a:	4b08      	ldr	r3, [pc, #32]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006266:	4b05      	ldr	r3, [pc, #20]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	061b      	lsls	r3, r3, #24
 8006274:	4901      	ldr	r1, [pc, #4]	@ (800627c <HAL_RCC_OscConfig+0x278>)
 8006276:	4313      	orrs	r3, r2
 8006278:	604b      	str	r3, [r1, #4]
 800627a:	e01a      	b.n	80062b2 <HAL_RCC_OscConfig+0x2ae>
 800627c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006280:	4b97      	ldr	r3, [pc, #604]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a96      	ldr	r2, [pc, #600]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006286:	f023 0301 	bic.w	r3, r3, #1
 800628a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fa ff8c 	bl	80011a8 <HAL_GetTick>
 8006290:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006294:	f7fa ff88 	bl	80011a8 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b02      	cmp	r3, #2
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e2d7      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80062a6:	4b8e      	ldr	r3, [pc, #568]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1f0      	bne.n	8006294 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0310 	and.w	r3, r3, #16
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d06a      	beq.n	8006394 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062be:	4b88      	ldr	r3, [pc, #544]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062c6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062c8:	4b85      	ldr	r3, [pc, #532]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80062ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062cc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	2b08      	cmp	r3, #8
 80062d2:	d007      	beq.n	80062e4 <HAL_RCC_OscConfig+0x2e0>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b18      	cmp	r3, #24
 80062d8:	d11b      	bne.n	8006312 <HAL_RCC_OscConfig+0x30e>
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d116      	bne.n	8006312 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80062e4:	4b7e      	ldr	r3, [pc, #504]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_OscConfig+0x2f8>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	69db      	ldr	r3, [r3, #28]
 80062f4:	2b80      	cmp	r3, #128	@ 0x80
 80062f6:	d001      	beq.n	80062fc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e2ac      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80062fc:	4b78      	ldr	r3, [pc, #480]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	061b      	lsls	r3, r3, #24
 800630a:	4975      	ldr	r1, [pc, #468]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 800630c:	4313      	orrs	r3, r2
 800630e:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006310:	e040      	b.n	8006394 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d023      	beq.n	8006362 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800631a:	4b71      	ldr	r3, [pc, #452]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a70      	ldr	r2, [pc, #448]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006326:	f7fa ff3f 	bl	80011a8 <HAL_GetTick>
 800632a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800632e:	f7fa ff3b 	bl	80011a8 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e28a      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006340:	4b67      	ldr	r3, [pc, #412]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800634c:	4b64      	ldr	r3, [pc, #400]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	061b      	lsls	r3, r3, #24
 800635a:	4961      	ldr	r1, [pc, #388]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 800635c:	4313      	orrs	r3, r2
 800635e:	60cb      	str	r3, [r1, #12]
 8006360:	e018      	b.n	8006394 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006362:	4b5f      	ldr	r3, [pc, #380]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a5e      	ldr	r2, [pc, #376]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800636c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636e:	f7fa ff1b 	bl	80011a8 <HAL_GetTick>
 8006372:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006374:	e008      	b.n	8006388 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006376:	f7fa ff17 	bl	80011a8 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d901      	bls.n	8006388 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e266      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006388:	4b55      	ldr	r3, [pc, #340]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1f0      	bne.n	8006376 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d036      	beq.n	800640e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d019      	beq.n	80063dc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063a8:	4b4d      	ldr	r3, [pc, #308]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80063aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063ac:	4a4c      	ldr	r2, [pc, #304]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80063ae:	f043 0301 	orr.w	r3, r3, #1
 80063b2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b4:	f7fa fef8 	bl	80011a8 <HAL_GetTick>
 80063b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063bc:	f7fa fef4 	bl	80011a8 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e243      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80063ce:	4b44      	ldr	r3, [pc, #272]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80063d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d0f0      	beq.n	80063bc <HAL_RCC_OscConfig+0x3b8>
 80063da:	e018      	b.n	800640e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063dc:	4b40      	ldr	r3, [pc, #256]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80063de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063e0:	4a3f      	ldr	r2, [pc, #252]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80063e2:	f023 0301 	bic.w	r3, r3, #1
 80063e6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fa fede 	bl	80011a8 <HAL_GetTick>
 80063ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063f0:	f7fa feda 	bl	80011a8 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e229      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006402:	4b37      	ldr	r3, [pc, #220]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1f0      	bne.n	80063f0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d036      	beq.n	8006488 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d019      	beq.n	8006456 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006422:	4b2f      	ldr	r3, [pc, #188]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a2e      	ldr	r2, [pc, #184]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006428:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800642c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800642e:	f7fa febb 	bl	80011a8 <HAL_GetTick>
 8006432:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006436:	f7fa feb7 	bl	80011a8 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e206      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006448:	4b25      	ldr	r3, [pc, #148]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x432>
 8006454:	e018      	b.n	8006488 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006456:	4b22      	ldr	r3, [pc, #136]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a21      	ldr	r2, [pc, #132]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 800645c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006460:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006462:	f7fa fea1 	bl	80011a8 <HAL_GetTick>
 8006466:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800646a:	f7fa fe9d 	bl	80011a8 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e1ec      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800647c:	4b18      	ldr	r3, [pc, #96]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1f0      	bne.n	800646a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80af 	beq.w	80065f4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006496:	4b13      	ldr	r3, [pc, #76]	@ (80064e4 <HAL_RCC_OscConfig+0x4e0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a12      	ldr	r2, [pc, #72]	@ (80064e4 <HAL_RCC_OscConfig+0x4e0>)
 800649c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064a2:	f7fa fe81 	bl	80011a8 <HAL_GetTick>
 80064a6:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064a8:	e008      	b.n	80064bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064aa:	f7fa fe7d 	bl	80011a8 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	2b64      	cmp	r3, #100	@ 0x64
 80064b6:	d901      	bls.n	80064bc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e1cc      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064bc:	4b09      	ldr	r3, [pc, #36]	@ (80064e4 <HAL_RCC_OscConfig+0x4e0>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d0f0      	beq.n	80064aa <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d10b      	bne.n	80064e8 <HAL_RCC_OscConfig+0x4e4>
 80064d0:	4b03      	ldr	r3, [pc, #12]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80064d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064d4:	4a02      	ldr	r2, [pc, #8]	@ (80064e0 <HAL_RCC_OscConfig+0x4dc>)
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	6713      	str	r3, [r2, #112]	@ 0x70
 80064dc:	e05b      	b.n	8006596 <HAL_RCC_OscConfig+0x592>
 80064de:	bf00      	nop
 80064e0:	58024400 	.word	0x58024400
 80064e4:	58024800 	.word	0x58024800
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d112      	bne.n	8006516 <HAL_RCC_OscConfig+0x512>
 80064f0:	4b9d      	ldr	r3, [pc, #628]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80064f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064f4:	4a9c      	ldr	r2, [pc, #624]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80064f6:	f023 0301 	bic.w	r3, r3, #1
 80064fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80064fc:	4b9a      	ldr	r3, [pc, #616]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006500:	4a99      	ldr	r2, [pc, #612]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006506:	6713      	str	r3, [r2, #112]	@ 0x70
 8006508:	4b97      	ldr	r3, [pc, #604]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800650a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800650c:	4a96      	ldr	r2, [pc, #600]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800650e:	f023 0304 	bic.w	r3, r3, #4
 8006512:	6713      	str	r3, [r2, #112]	@ 0x70
 8006514:	e03f      	b.n	8006596 <HAL_RCC_OscConfig+0x592>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	2b05      	cmp	r3, #5
 800651c:	d112      	bne.n	8006544 <HAL_RCC_OscConfig+0x540>
 800651e:	4b92      	ldr	r3, [pc, #584]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006522:	4a91      	ldr	r2, [pc, #580]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006524:	f043 0304 	orr.w	r3, r3, #4
 8006528:	6713      	str	r3, [r2, #112]	@ 0x70
 800652a:	4b8f      	ldr	r3, [pc, #572]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800652e:	4a8e      	ldr	r2, [pc, #568]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006534:	6713      	str	r3, [r2, #112]	@ 0x70
 8006536:	4b8c      	ldr	r3, [pc, #560]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800653a:	4a8b      	ldr	r2, [pc, #556]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	6713      	str	r3, [r2, #112]	@ 0x70
 8006542:	e028      	b.n	8006596 <HAL_RCC_OscConfig+0x592>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	2b85      	cmp	r3, #133	@ 0x85
 800654a:	d112      	bne.n	8006572 <HAL_RCC_OscConfig+0x56e>
 800654c:	4b86      	ldr	r3, [pc, #536]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800654e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006550:	4a85      	ldr	r2, [pc, #532]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006552:	f043 0304 	orr.w	r3, r3, #4
 8006556:	6713      	str	r3, [r2, #112]	@ 0x70
 8006558:	4b83      	ldr	r3, [pc, #524]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655c:	4a82      	ldr	r2, [pc, #520]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800655e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006562:	6713      	str	r3, [r2, #112]	@ 0x70
 8006564:	4b80      	ldr	r3, [pc, #512]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006568:	4a7f      	ldr	r2, [pc, #508]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006570:	e011      	b.n	8006596 <HAL_RCC_OscConfig+0x592>
 8006572:	4b7d      	ldr	r3, [pc, #500]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006576:	4a7c      	ldr	r2, [pc, #496]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006578:	f023 0301 	bic.w	r3, r3, #1
 800657c:	6713      	str	r3, [r2, #112]	@ 0x70
 800657e:	4b7a      	ldr	r3, [pc, #488]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006582:	4a79      	ldr	r2, [pc, #484]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006584:	f023 0304 	bic.w	r3, r3, #4
 8006588:	6713      	str	r3, [r2, #112]	@ 0x70
 800658a:	4b77      	ldr	r3, [pc, #476]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800658c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800658e:	4a76      	ldr	r2, [pc, #472]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006594:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d015      	beq.n	80065ca <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800659e:	f7fa fe03 	bl	80011a8 <HAL_GetTick>
 80065a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065a4:	e00a      	b.n	80065bc <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065a6:	f7fa fdff 	bl	80011a8 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d901      	bls.n	80065bc <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e14c      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80065bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80065be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0ee      	beq.n	80065a6 <HAL_RCC_OscConfig+0x5a2>
 80065c8:	e014      	b.n	80065f4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ca:	f7fa fded 	bl	80011a8 <HAL_GetTick>
 80065ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065d0:	e00a      	b.n	80065e8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065d2:	f7fa fde9 	bl	80011a8 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d901      	bls.n	80065e8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e136      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80065e8:	4b5f      	ldr	r3, [pc, #380]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80065ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1ee      	bne.n	80065d2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 812b 	beq.w	8006854 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80065fe:	4b5a      	ldr	r3, [pc, #360]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006606:	2b18      	cmp	r3, #24
 8006608:	f000 80bb 	beq.w	8006782 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006610:	2b02      	cmp	r3, #2
 8006612:	f040 8095 	bne.w	8006740 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006616:	4b54      	ldr	r3, [pc, #336]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a53      	ldr	r2, [pc, #332]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800661c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006622:	f7fa fdc1 	bl	80011a8 <HAL_GetTick>
 8006626:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006628:	e008      	b.n	800663c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800662a:	f7fa fdbd 	bl	80011a8 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	2b02      	cmp	r3, #2
 8006636:	d901      	bls.n	800663c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e10c      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800663c:	4b4a      	ldr	r3, [pc, #296]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1f0      	bne.n	800662a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006648:	4b47      	ldr	r3, [pc, #284]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800664a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800664c:	4b47      	ldr	r3, [pc, #284]	@ (800676c <HAL_RCC_OscConfig+0x768>)
 800664e:	4013      	ands	r3, r2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006658:	0112      	lsls	r2, r2, #4
 800665a:	430a      	orrs	r2, r1
 800665c:	4942      	ldr	r1, [pc, #264]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800665e:	4313      	orrs	r3, r2
 8006660:	628b      	str	r3, [r1, #40]	@ 0x28
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006666:	3b01      	subs	r3, #1
 8006668:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006670:	3b01      	subs	r3, #1
 8006672:	025b      	lsls	r3, r3, #9
 8006674:	b29b      	uxth	r3, r3
 8006676:	431a      	orrs	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667c:	3b01      	subs	r3, #1
 800667e:	041b      	lsls	r3, r3, #16
 8006680:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006684:	431a      	orrs	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668a:	3b01      	subs	r3, #1
 800668c:	061b      	lsls	r3, r3, #24
 800668e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006692:	4935      	ldr	r1, [pc, #212]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006694:	4313      	orrs	r3, r2
 8006696:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006698:	4b33      	ldr	r3, [pc, #204]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800669a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800669c:	4a32      	ldr	r2, [pc, #200]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80066a4:	4b30      	ldr	r3, [pc, #192]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066a8:	4b31      	ldr	r3, [pc, #196]	@ (8006770 <HAL_RCC_OscConfig+0x76c>)
 80066aa:	4013      	ands	r3, r2
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80066b0:	00d2      	lsls	r2, r2, #3
 80066b2:	492d      	ldr	r1, [pc, #180]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80066b8:	4b2b      	ldr	r3, [pc, #172]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	f023 020c 	bic.w	r2, r3, #12
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c4:	4928      	ldr	r1, [pc, #160]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80066ca:	4b27      	ldr	r3, [pc, #156]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ce:	f023 0202 	bic.w	r2, r3, #2
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d6:	4924      	ldr	r1, [pc, #144]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066dc:	4b22      	ldr	r3, [pc, #136]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e0:	4a21      	ldr	r2, [pc, #132]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e8:	4b1f      	ldr	r3, [pc, #124]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80066f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 80066fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006700:	4b19      	ldr	r3, [pc, #100]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006704:	4a18      	ldr	r2, [pc, #96]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800670c:	4b16      	ldr	r3, [pc, #88]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a15      	ldr	r2, [pc, #84]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006718:	f7fa fd46 	bl	80011a8 <HAL_GetTick>
 800671c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006720:	f7fa fd42 	bl	80011a8 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e091      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006732:	4b0d      	ldr	r3, [pc, #52]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0x71c>
 800673e:	e089      	b.n	8006854 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006740:	4b09      	ldr	r3, [pc, #36]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a08      	ldr	r2, [pc, #32]	@ (8006768 <HAL_RCC_OscConfig+0x764>)
 8006746:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800674a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674c:	f7fa fd2c 	bl	80011a8 <HAL_GetTick>
 8006750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006752:	e00f      	b.n	8006774 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006754:	f7fa fd28 	bl	80011a8 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b02      	cmp	r3, #2
 8006760:	d908      	bls.n	8006774 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e077      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
 8006766:	bf00      	nop
 8006768:	58024400 	.word	0x58024400
 800676c:	fffffc0c 	.word	0xfffffc0c
 8006770:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006774:	4b3a      	ldr	r3, [pc, #232]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e9      	bne.n	8006754 <HAL_RCC_OscConfig+0x750>
 8006780:	e068      	b.n	8006854 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006782:	4b37      	ldr	r3, [pc, #220]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 8006784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006786:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006788:	4b35      	ldr	r3, [pc, #212]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 800678a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800678c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006792:	2b01      	cmp	r3, #1
 8006794:	d031      	beq.n	80067fa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f003 0203 	and.w	r2, r3, #3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d12a      	bne.n	80067fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	091b      	lsrs	r3, r3, #4
 80067a8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d122      	bne.n	80067fa <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067be:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d11a      	bne.n	80067fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	0a5b      	lsrs	r3, r3, #9
 80067c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d111      	bne.n	80067fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	0c1b      	lsrs	r3, r3, #16
 80067da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d108      	bne.n	80067fa <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	0e1b      	lsrs	r3, r3, #24
 80067ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d001      	beq.n	80067fe <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e02b      	b.n	8006856 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80067fe:	4b18      	ldr	r3, [pc, #96]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 8006800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006802:	08db      	lsrs	r3, r3, #3
 8006804:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006808:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	429a      	cmp	r2, r3
 8006812:	d01f      	beq.n	8006854 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006814:	4b12      	ldr	r3, [pc, #72]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 8006816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006818:	4a11      	ldr	r2, [pc, #68]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006820:	f7fa fcc2 	bl	80011a8 <HAL_GetTick>
 8006824:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006826:	bf00      	nop
 8006828:	f7fa fcbe 	bl	80011a8 <HAL_GetTick>
 800682c:	4602      	mov	r2, r0
 800682e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006830:	4293      	cmp	r3, r2
 8006832:	d0f9      	beq.n	8006828 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006834:	4b0a      	ldr	r3, [pc, #40]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 8006836:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006838:	4b0a      	ldr	r3, [pc, #40]	@ (8006864 <HAL_RCC_OscConfig+0x860>)
 800683a:	4013      	ands	r3, r2
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006840:	00d2      	lsls	r2, r2, #3
 8006842:	4907      	ldr	r1, [pc, #28]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 8006844:	4313      	orrs	r3, r2
 8006846:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006848:	4b05      	ldr	r3, [pc, #20]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 800684a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800684c:	4a04      	ldr	r2, [pc, #16]	@ (8006860 <HAL_RCC_OscConfig+0x85c>)
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3730      	adds	r7, #48	@ 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	58024400 	.word	0x58024400
 8006864:	ffff0007 	.word	0xffff0007

08006868 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e19c      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800687c:	4b8a      	ldr	r3, [pc, #552]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d910      	bls.n	80068ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688a:	4b87      	ldr	r3, [pc, #540]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f023 020f 	bic.w	r2, r3, #15
 8006892:	4985      	ldr	r1, [pc, #532]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	4313      	orrs	r3, r2
 8006898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800689a:	4b83      	ldr	r3, [pc, #524]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d001      	beq.n	80068ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e184      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0304 	and.w	r3, r3, #4
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d010      	beq.n	80068da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691a      	ldr	r2, [r3, #16]
 80068bc:	4b7b      	ldr	r3, [pc, #492]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d908      	bls.n	80068da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80068c8:	4b78      	ldr	r3, [pc, #480]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	4975      	ldr	r1, [pc, #468]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d010      	beq.n	8006908 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	695a      	ldr	r2, [r3, #20]
 80068ea:	4b70      	ldr	r3, [pc, #448]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d908      	bls.n	8006908 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80068f6:	4b6d      	ldr	r3, [pc, #436]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	496a      	ldr	r1, [pc, #424]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006904:	4313      	orrs	r3, r2
 8006906:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0310 	and.w	r3, r3, #16
 8006910:	2b00      	cmp	r3, #0
 8006912:	d010      	beq.n	8006936 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	699a      	ldr	r2, [r3, #24]
 8006918:	4b64      	ldr	r3, [pc, #400]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 800691a:	69db      	ldr	r3, [r3, #28]
 800691c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006920:	429a      	cmp	r2, r3
 8006922:	d908      	bls.n	8006936 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006924:	4b61      	ldr	r3, [pc, #388]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	495e      	ldr	r1, [pc, #376]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006932:	4313      	orrs	r3, r2
 8006934:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d010      	beq.n	8006964 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	4b59      	ldr	r3, [pc, #356]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800694e:	429a      	cmp	r2, r3
 8006950:	d908      	bls.n	8006964 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006952:	4b56      	ldr	r3, [pc, #344]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	4953      	ldr	r1, [pc, #332]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006960:	4313      	orrs	r3, r2
 8006962:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d010      	beq.n	8006992 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	4b4d      	ldr	r3, [pc, #308]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f003 030f 	and.w	r3, r3, #15
 800697c:	429a      	cmp	r2, r3
 800697e:	d908      	bls.n	8006992 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006980:	4b4a      	ldr	r3, [pc, #296]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	f023 020f 	bic.w	r2, r3, #15
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	4947      	ldr	r1, [pc, #284]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 800698e:	4313      	orrs	r3, r2
 8006990:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d055      	beq.n	8006a4a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800699e:	4b43      	ldr	r3, [pc, #268]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	4940      	ldr	r1, [pc, #256]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d107      	bne.n	80069c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069b8:	4b3c      	ldr	r3, [pc, #240]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d121      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e0f6      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b03      	cmp	r3, #3
 80069ce:	d107      	bne.n	80069e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80069d0:	4b36      	ldr	r3, [pc, #216]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d115      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e0ea      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d107      	bne.n	80069f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80069e8:	4b30      	ldr	r3, [pc, #192]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d109      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0de      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069f8:	4b2c      	ldr	r3, [pc, #176]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0d6      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006a08:	4b28      	ldr	r3, [pc, #160]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	f023 0207 	bic.w	r2, r3, #7
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4925      	ldr	r1, [pc, #148]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a1a:	f7fa fbc5 	bl	80011a8 <HAL_GetTick>
 8006a1e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a20:	e00a      	b.n	8006a38 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a22:	f7fa fbc1 	bl	80011a8 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e0be      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a38:	4b1c      	ldr	r3, [pc, #112]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d1eb      	bne.n	8006a22 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d010      	beq.n	8006a78 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	68da      	ldr	r2, [r3, #12]
 8006a5a:	4b14      	ldr	r3, [pc, #80]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d208      	bcs.n	8006a78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a66:	4b11      	ldr	r3, [pc, #68]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f023 020f 	bic.w	r2, r3, #15
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	490e      	ldr	r1, [pc, #56]	@ (8006aac <HAL_RCC_ClockConfig+0x244>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d214      	bcs.n	8006ab0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a86:	4b08      	ldr	r3, [pc, #32]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 020f 	bic.w	r2, r3, #15
 8006a8e:	4906      	ldr	r1, [pc, #24]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a96:	4b04      	ldr	r3, [pc, #16]	@ (8006aa8 <HAL_RCC_ClockConfig+0x240>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e086      	b.n	8006bb6 <HAL_RCC_ClockConfig+0x34e>
 8006aa8:	52002000 	.word	0x52002000
 8006aac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0304 	and.w	r3, r3, #4
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d010      	beq.n	8006ade <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d208      	bcs.n	8006ade <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006acc:	4b3c      	ldr	r3, [pc, #240]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	4939      	ldr	r1, [pc, #228]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0308 	and.w	r3, r3, #8
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d010      	beq.n	8006b0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	4b34      	ldr	r3, [pc, #208]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d208      	bcs.n	8006b0c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006afa:	4b31      	ldr	r3, [pc, #196]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	492e      	ldr	r1, [pc, #184]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0310 	and.w	r3, r3, #16
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d010      	beq.n	8006b3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	699a      	ldr	r2, [r3, #24]
 8006b1c:	4b28      	ldr	r3, [pc, #160]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d208      	bcs.n	8006b3a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b28:	4b25      	ldr	r3, [pc, #148]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b2a:	69db      	ldr	r3, [r3, #28]
 8006b2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	4922      	ldr	r1, [pc, #136]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d010      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69da      	ldr	r2, [r3, #28]
 8006b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d208      	bcs.n	8006b68 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b56:	4b1a      	ldr	r3, [pc, #104]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	4917      	ldr	r1, [pc, #92]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006b68:	f000 f89e 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	4b14      	ldr	r3, [pc, #80]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	0a1b      	lsrs	r3, r3, #8
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	4912      	ldr	r1, [pc, #72]	@ (8006bc4 <HAL_RCC_ClockConfig+0x35c>)
 8006b7a:	5ccb      	ldrb	r3, [r1, r3]
 8006b7c:	f003 031f 	and.w	r3, r3, #31
 8006b80:	fa22 f303 	lsr.w	r3, r2, r3
 8006b84:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006b86:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc0 <HAL_RCC_ClockConfig+0x358>)
 8006b88:	699b      	ldr	r3, [r3, #24]
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006bc4 <HAL_RCC_ClockConfig+0x35c>)
 8006b90:	5cd3      	ldrb	r3, [r2, r3]
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	fa22 f303 	lsr.w	r3, r2, r3
 8006b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8006bc8 <HAL_RCC_ClockConfig+0x360>)
 8006b9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8006bcc <HAL_RCC_ClockConfig+0x364>)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <HAL_RCC_ClockConfig+0x368>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7fa fab2 	bl	8001114 <HAL_InitTick>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	58024400 	.word	0x58024400
 8006bc4:	0800b5b4 	.word	0x0800b5b4
 8006bc8:	24000004 	.word	0x24000004
 8006bcc:	24000000 	.word	0x24000000
 8006bd0:	24000008 	.word	0x24000008

08006bd4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b08c      	sub	sp, #48	@ 0x30
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d12a      	bne.n	8006c3c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006be6:	4b2d      	ldr	r3, [pc, #180]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006be8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006bec:	4a2b      	ldr	r2, [pc, #172]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006bee:	f043 0301 	orr.w	r3, r3, #1
 8006bf2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8006bf6:	4b29      	ldr	r3, [pc, #164]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006bf8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006c04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006c16:	2300      	movs	r3, #0
 8006c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006c1a:	f107 031c 	add.w	r3, r7, #28
 8006c1e:	4619      	mov	r1, r3
 8006c20:	481f      	ldr	r0, [pc, #124]	@ (8006ca0 <HAL_RCC_MCOConfig+0xcc>)
 8006c22:	f7fe ffd5 	bl	8005bd0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006c26:	4b1d      	ldr	r3, [pc, #116]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8006c2e:	68b9      	ldr	r1, [r7, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	430b      	orrs	r3, r1
 8006c34:	4919      	ldr	r1, [pc, #100]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006c3a:	e02a      	b.n	8006c92 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006c3c:	4b17      	ldr	r3, [pc, #92]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006c3e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006c42:	4a16      	ldr	r2, [pc, #88]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006c44:	f043 0304 	orr.w	r3, r3, #4
 8006c48:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8006c4c:	4b13      	ldr	r3, [pc, #76]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006c5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c60:	2302      	movs	r3, #2
 8006c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c64:	2303      	movs	r3, #3
 8006c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006c70:	f107 031c 	add.w	r3, r7, #28
 8006c74:	4619      	mov	r1, r3
 8006c76:	480b      	ldr	r0, [pc, #44]	@ (8006ca4 <HAL_RCC_MCOConfig+0xd0>)
 8006c78:	f7fe ffaa 	bl	8005bd0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006c7c:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	01d9      	lsls	r1, r3, #7
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	4903      	ldr	r1, [pc, #12]	@ (8006c9c <HAL_RCC_MCOConfig+0xc8>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	610b      	str	r3, [r1, #16]
}
 8006c92:	bf00      	nop
 8006c94:	3730      	adds	r7, #48	@ 0x30
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	58020000 	.word	0x58020000
 8006ca4:	58020800 	.word	0x58020800

08006ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b089      	sub	sp, #36	@ 0x24
 8006cac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cae:	4bb3      	ldr	r3, [pc, #716]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cb6:	2b18      	cmp	r3, #24
 8006cb8:	f200 8155 	bhi.w	8006f66 <HAL_RCC_GetSysClockFreq+0x2be>
 8006cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8006cc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006d29 	.word	0x08006d29
 8006cc8:	08006f67 	.word	0x08006f67
 8006ccc:	08006f67 	.word	0x08006f67
 8006cd0:	08006f67 	.word	0x08006f67
 8006cd4:	08006f67 	.word	0x08006f67
 8006cd8:	08006f67 	.word	0x08006f67
 8006cdc:	08006f67 	.word	0x08006f67
 8006ce0:	08006f67 	.word	0x08006f67
 8006ce4:	08006d4f 	.word	0x08006d4f
 8006ce8:	08006f67 	.word	0x08006f67
 8006cec:	08006f67 	.word	0x08006f67
 8006cf0:	08006f67 	.word	0x08006f67
 8006cf4:	08006f67 	.word	0x08006f67
 8006cf8:	08006f67 	.word	0x08006f67
 8006cfc:	08006f67 	.word	0x08006f67
 8006d00:	08006f67 	.word	0x08006f67
 8006d04:	08006d55 	.word	0x08006d55
 8006d08:	08006f67 	.word	0x08006f67
 8006d0c:	08006f67 	.word	0x08006f67
 8006d10:	08006f67 	.word	0x08006f67
 8006d14:	08006f67 	.word	0x08006f67
 8006d18:	08006f67 	.word	0x08006f67
 8006d1c:	08006f67 	.word	0x08006f67
 8006d20:	08006f67 	.word	0x08006f67
 8006d24:	08006d5b 	.word	0x08006d5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d28:	4b94      	ldr	r3, [pc, #592]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0320 	and.w	r3, r3, #32
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d34:	4b91      	ldr	r3, [pc, #580]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	08db      	lsrs	r3, r3, #3
 8006d3a:	f003 0303 	and.w	r3, r3, #3
 8006d3e:	4a90      	ldr	r2, [pc, #576]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d40:	fa22 f303 	lsr.w	r3, r2, r3
 8006d44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006d46:	e111      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006d48:	4b8d      	ldr	r3, [pc, #564]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006d4a:	61bb      	str	r3, [r7, #24]
      break;
 8006d4c:	e10e      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006d4e:	4b8d      	ldr	r3, [pc, #564]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d50:	61bb      	str	r3, [r7, #24]
      break;
 8006d52:	e10b      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006d54:	4b8c      	ldr	r3, [pc, #560]	@ (8006f88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006d56:	61bb      	str	r3, [r7, #24]
      break;
 8006d58:	e108      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d5a:	4b88      	ldr	r3, [pc, #544]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006d64:	4b85      	ldr	r3, [pc, #532]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006d70:	4b82      	ldr	r3, [pc, #520]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006d7a:	4b80      	ldr	r3, [pc, #512]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d7e:	08db      	lsrs	r3, r3, #3
 8006d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80e1 	beq.w	8006f60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	f000 8083 	beq.w	8006eac <HAL_RCC_GetSysClockFreq+0x204>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	f200 80a1 	bhi.w	8006ef0 <HAL_RCC_GetSysClockFreq+0x248>
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <HAL_RCC_GetSysClockFreq+0x114>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d056      	beq.n	8006e68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006dba:	e099      	b.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0320 	and.w	r3, r3, #32
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d02d      	beq.n	8006e24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dc8:	4b6c      	ldr	r3, [pc, #432]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	08db      	lsrs	r3, r3, #3
 8006dce:	f003 0303 	and.w	r3, r3, #3
 8006dd2:	4a6b      	ldr	r2, [pc, #428]	@ (8006f80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006df2:	4b62      	ldr	r3, [pc, #392]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e06:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006e22:	e087      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e2e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006f90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e36:	4b51      	ldr	r3, [pc, #324]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e4a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006e66:	e065      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e72:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006f94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e7a:	4b40      	ldr	r3, [pc, #256]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e8e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eaa:	e043      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eb6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006f98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ebe:	4b2f      	ldr	r3, [pc, #188]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ed2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006eee:	e021      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006f94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f02:	4b1e      	ldr	r3, [pc, #120]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f16:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006f8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006f32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006f34:	4b11      	ldr	r3, [pc, #68]	@ (8006f7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f38:	0a5b      	lsrs	r3, r3, #9
 8006f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f3e:	3301      	adds	r3, #1
 8006f40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	ee07 3a90 	vmov	s15, r3
 8006f48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f58:	ee17 3a90 	vmov	r3, s15
 8006f5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006f5e:	e005      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	61bb      	str	r3, [r7, #24]
      break;
 8006f64:	e002      	b.n	8006f6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006f66:	4b07      	ldr	r3, [pc, #28]	@ (8006f84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f68:	61bb      	str	r3, [r7, #24]
      break;
 8006f6a:	bf00      	nop
  }

  return sysclockfreq;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3724      	adds	r7, #36	@ 0x24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	58024400 	.word	0x58024400
 8006f80:	03d09000 	.word	0x03d09000
 8006f84:	003d0900 	.word	0x003d0900
 8006f88:	007a1200 	.word	0x007a1200
 8006f8c:	46000000 	.word	0x46000000
 8006f90:	4c742400 	.word	0x4c742400
 8006f94:	4a742400 	.word	0x4a742400
 8006f98:	4af42400 	.word	0x4af42400

08006f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006fa2:	f7ff fe81 	bl	8006ca8 <HAL_RCC_GetSysClockFreq>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	4b10      	ldr	r3, [pc, #64]	@ (8006fec <HAL_RCC_GetHCLKFreq+0x50>)
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	0a1b      	lsrs	r3, r3, #8
 8006fae:	f003 030f 	and.w	r3, r3, #15
 8006fb2:	490f      	ldr	r1, [pc, #60]	@ (8006ff0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fb4:	5ccb      	ldrb	r3, [r1, r3]
 8006fb6:	f003 031f 	and.w	r3, r3, #31
 8006fba:	fa22 f303 	lsr.w	r3, r2, r3
 8006fbe:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8006fec <HAL_RCC_GetHCLKFreq+0x50>)
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f003 030f 	and.w	r3, r3, #15
 8006fc8:	4a09      	ldr	r2, [pc, #36]	@ (8006ff0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006fca:	5cd3      	ldrb	r3, [r2, r3]
 8006fcc:	f003 031f 	and.w	r3, r3, #31
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd6:	4a07      	ldr	r2, [pc, #28]	@ (8006ff4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006fda:	4a07      	ldr	r2, [pc, #28]	@ (8006ff8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006fe0:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	58024400 	.word	0x58024400
 8006ff0:	0800b5b4 	.word	0x0800b5b4
 8006ff4:	24000004 	.word	0x24000004
 8006ff8:	24000000 	.word	0x24000000

08006ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007000:	f7ff ffcc 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8007004:	4602      	mov	r2, r0
 8007006:	4b06      	ldr	r3, [pc, #24]	@ (8007020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	091b      	lsrs	r3, r3, #4
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	4904      	ldr	r1, [pc, #16]	@ (8007024 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007012:	5ccb      	ldrb	r3, [r1, r3]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	58024400 	.word	0x58024400
 8007024:	0800b5b4 	.word	0x0800b5b4

08007028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800702c:	f7ff ffb6 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8007030:	4602      	mov	r2, r0
 8007032:	4b06      	ldr	r3, [pc, #24]	@ (800704c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	0a1b      	lsrs	r3, r3, #8
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	4904      	ldr	r1, [pc, #16]	@ (8007050 <HAL_RCC_GetPCLK2Freq+0x28>)
 800703e:	5ccb      	ldrb	r3, [r1, r3]
 8007040:	f003 031f 	and.w	r3, r3, #31
 8007044:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007048:	4618      	mov	r0, r3
 800704a:	bd80      	pop	{r7, pc}
 800704c:	58024400 	.word	0x58024400
 8007050:	0800b5b4 	.word	0x0800b5b4

08007054 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007054:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007058:	b0c8      	sub	sp, #288	@ 0x120
 800705a:	af00      	add	r7, sp, #0
 800705c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007060:	2300      	movs	r3, #0
 8007062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007066:	2300      	movs	r3, #0
 8007068:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800706c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007078:	2500      	movs	r5, #0
 800707a:	ea54 0305 	orrs.w	r3, r4, r5
 800707e:	d049      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007086:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800708a:	d02f      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800708c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007090:	d828      	bhi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007096:	d01a      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007098:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800709c:	d822      	bhi.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d003      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070a6:	d007      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070a8:	e01c      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070aa:	4ba7      	ldr	r3, [pc, #668]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ae:	4aa6      	ldr	r2, [pc, #664]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070b6:	e01a      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070bc:	3308      	adds	r3, #8
 80070be:	2102      	movs	r1, #2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f002 fac3 	bl	800964c <RCCEx_PLL2_Config>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070cc:	e00f      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80070d2:	3328      	adds	r3, #40	@ 0x28
 80070d4:	2102      	movs	r1, #2
 80070d6:	4618      	mov	r0, r3
 80070d8:	f002 fb6a 	bl	80097b0 <RCCEx_PLL3_Config>
 80070dc:	4603      	mov	r3, r0
 80070de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80070e2:	e004      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80070ea:	e000      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80070ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ee:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80070f6:	4b94      	ldr	r3, [pc, #592]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80070fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007104:	4a90      	ldr	r2, [pc, #576]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007106:	430b      	orrs	r3, r1
 8007108:	6513      	str	r3, [r2, #80]	@ 0x50
 800710a:	e003      	b.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800710c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007110:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007114:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007120:	f04f 0900 	mov.w	r9, #0
 8007124:	ea58 0309 	orrs.w	r3, r8, r9
 8007128:	d047      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800712a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800712e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007130:	2b04      	cmp	r3, #4
 8007132:	d82a      	bhi.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007134:	a201      	add	r2, pc, #4	@ (adr r2, 800713c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	08007151 	.word	0x08007151
 8007140:	0800715f 	.word	0x0800715f
 8007144:	08007175 	.word	0x08007175
 8007148:	08007193 	.word	0x08007193
 800714c:	08007193 	.word	0x08007193
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007150:	4b7d      	ldr	r3, [pc, #500]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007154:	4a7c      	ldr	r2, [pc, #496]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800715a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800715c:	e01a      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800715e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007162:	3308      	adds	r3, #8
 8007164:	2100      	movs	r1, #0
 8007166:	4618      	mov	r0, r3
 8007168:	f002 fa70 	bl	800964c <RCCEx_PLL2_Config>
 800716c:	4603      	mov	r3, r0
 800716e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007172:	e00f      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007178:	3328      	adds	r3, #40	@ 0x28
 800717a:	2100      	movs	r1, #0
 800717c:	4618      	mov	r0, r3
 800717e:	f002 fb17 	bl	80097b0 <RCCEx_PLL3_Config>
 8007182:	4603      	mov	r3, r0
 8007184:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007188:	e004      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007190:	e000      	b.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007194:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10a      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800719c:	4b6a      	ldr	r3, [pc, #424]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800719e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071a0:	f023 0107 	bic.w	r1, r3, #7
 80071a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071aa:	4a67      	ldr	r2, [pc, #412]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80071ac:	430b      	orrs	r3, r1
 80071ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80071b0:	e003      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80071b6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80071ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80071c6:	f04f 0b00 	mov.w	fp, #0
 80071ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80071ce:	d054      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80071d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80071d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80071da:	d036      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80071dc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80071e0:	d82f      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80071e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071e6:	d032      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80071e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071ec:	d829      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80071ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80071f0:	d02f      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80071f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80071f4:	d825      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80071f6:	2b80      	cmp	r3, #128	@ 0x80
 80071f8:	d018      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80071fa:	2b80      	cmp	r3, #128	@ 0x80
 80071fc:	d821      	bhi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007202:	2b40      	cmp	r3, #64	@ 0x40
 8007204:	d007      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8007206:	e01c      	b.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007208:	4b4f      	ldr	r3, [pc, #316]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720c:	4a4e      	ldr	r2, [pc, #312]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800720e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007214:	e01e      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007216:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800721a:	3308      	adds	r3, #8
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f002 fa14 	bl	800964c <RCCEx_PLL2_Config>
 8007224:	4603      	mov	r3, r0
 8007226:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800722a:	e013      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800722c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007230:	3328      	adds	r3, #40	@ 0x28
 8007232:	2100      	movs	r1, #0
 8007234:	4618      	mov	r0, r3
 8007236:	f002 fabb 	bl	80097b0 <RCCEx_PLL3_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007240:	e008      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007248:	e004      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800724a:	bf00      	nop
 800724c:	e002      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800724e:	bf00      	nop
 8007250:	e000      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007254:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007258:	2b00      	cmp	r3, #0
 800725a:	d10a      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800725c:	4b3a      	ldr	r3, [pc, #232]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800725e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007260:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007264:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800726a:	4a37      	ldr	r2, [pc, #220]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800726c:	430b      	orrs	r3, r1
 800726e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007270:	e003      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007272:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007276:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800727a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800727e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007282:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007286:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800728a:	2300      	movs	r3, #0
 800728c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007290:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8007294:	460b      	mov	r3, r1
 8007296:	4313      	orrs	r3, r2
 8007298:	d05c      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800729a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800729e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072a0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80072a4:	d03b      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80072a6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80072aa:	d834      	bhi.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80072ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072b0:	d037      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80072b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072b6:	d82e      	bhi.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80072b8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072bc:	d033      	beq.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80072be:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80072c2:	d828      	bhi.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80072c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c8:	d01a      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80072ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ce:	d822      	bhi.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x288>
 80072d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d8:	d007      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x296>
 80072da:	e01c      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e0:	4a19      	ldr	r2, [pc, #100]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80072e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80072e8:	e01e      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80072ee:	3308      	adds	r3, #8
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f002 f9aa 	bl	800964c <RCCEx_PLL2_Config>
 80072f8:	4603      	mov	r3, r0
 80072fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80072fe:	e013      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007304:	3328      	adds	r3, #40	@ 0x28
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f002 fa51 	bl	80097b0 <RCCEx_PLL3_Config>
 800730e:	4603      	mov	r3, r0
 8007310:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007314:	e008      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800731c:	e004      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007328:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10d      	bne.n	800734c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007330:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007334:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800733c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800733e:	4a02      	ldr	r2, [pc, #8]	@ (8007348 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007340:	430b      	orrs	r3, r1
 8007342:	6513      	str	r3, [r2, #80]	@ 0x50
 8007344:	e006      	b.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8007346:	bf00      	nop
 8007348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800734c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007350:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007360:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007364:	2300      	movs	r3, #0
 8007366:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800736a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800736e:	460b      	mov	r3, r1
 8007370:	4313      	orrs	r3, r2
 8007372:	d03a      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800737a:	2b30      	cmp	r3, #48	@ 0x30
 800737c:	d01f      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800737e:	2b30      	cmp	r3, #48	@ 0x30
 8007380:	d819      	bhi.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007382:	2b20      	cmp	r3, #32
 8007384:	d00c      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007386:	2b20      	cmp	r3, #32
 8007388:	d815      	bhi.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d019      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800738e:	2b10      	cmp	r3, #16
 8007390:	d111      	bne.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007392:	4bae      	ldr	r3, [pc, #696]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007396:	4aad      	ldr	r2, [pc, #692]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800739c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800739e:	e011      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073a4:	3308      	adds	r3, #8
 80073a6:	2102      	movs	r1, #2
 80073a8:	4618      	mov	r0, r3
 80073aa:	f002 f94f 	bl	800964c <RCCEx_PLL2_Config>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80073b4:	e006      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073bc:	e002      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80073be:	bf00      	nop
 80073c0:	e000      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80073c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10a      	bne.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80073cc:	4b9f      	ldr	r3, [pc, #636]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80073d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073da:	4a9c      	ldr	r2, [pc, #624]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80073dc:	430b      	orrs	r3, r1
 80073de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80073e0:	e003      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80073e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80073ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80073f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80073fa:	2300      	movs	r3, #0
 80073fc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007400:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007404:	460b      	mov	r3, r1
 8007406:	4313      	orrs	r3, r2
 8007408:	d051      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800740a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800740e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007410:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007414:	d035      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007416:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800741a:	d82e      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x426>
 800741c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007420:	d031      	beq.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007422:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007426:	d828      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007428:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800742c:	d01a      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800742e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007432:	d822      	bhi.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d003      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8007438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800743c:	d007      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800743e:	e01c      	b.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007440:	4b82      	ldr	r3, [pc, #520]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007444:	4a81      	ldr	r2, [pc, #516]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800744a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800744c:	e01c      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800744e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007452:	3308      	adds	r3, #8
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f002 f8f8 	bl	800964c <RCCEx_PLL2_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007462:	e011      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007464:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007468:	3328      	adds	r3, #40	@ 0x28
 800746a:	2100      	movs	r1, #0
 800746c:	4618      	mov	r0, r3
 800746e:	f002 f99f 	bl	80097b0 <RCCEx_PLL3_Config>
 8007472:	4603      	mov	r3, r0
 8007474:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007480:	e002      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007482:	bf00      	nop
 8007484:	e000      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007488:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007490:	4b6e      	ldr	r3, [pc, #440]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007494:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007498:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800749c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800749e:	4a6b      	ldr	r2, [pc, #428]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80074a0:	430b      	orrs	r3, r1
 80074a2:	6513      	str	r3, [r2, #80]	@ 0x50
 80074a4:	e003      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80074ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80074ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074be:	2300      	movs	r3, #0
 80074c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80074c4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80074c8:	460b      	mov	r3, r1
 80074ca:	4313      	orrs	r3, r2
 80074cc:	d053      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80074ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80074d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074d8:	d033      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80074da:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074de:	d82c      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80074e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074e4:	d02f      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80074e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80074ea:	d826      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80074ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074f0:	d02b      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074f6:	d820      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80074f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074fc:	d012      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80074fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007502:	d81a      	bhi.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007504:	2b00      	cmp	r3, #0
 8007506:	d022      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8007508:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800750c:	d115      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800750e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007512:	3308      	adds	r3, #8
 8007514:	2101      	movs	r1, #1
 8007516:	4618      	mov	r0, r3
 8007518:	f002 f898 	bl	800964c <RCCEx_PLL2_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007522:	e015      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007524:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007528:	3328      	adds	r3, #40	@ 0x28
 800752a:	2101      	movs	r1, #1
 800752c:	4618      	mov	r0, r3
 800752e:	f002 f93f 	bl	80097b0 <RCCEx_PLL3_Config>
 8007532:	4603      	mov	r3, r0
 8007534:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007538:	e00a      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007540:	e006      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007542:	bf00      	nop
 8007544:	e004      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007546:	bf00      	nop
 8007548:	e002      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800754a:	bf00      	nop
 800754c:	e000      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800754e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007550:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007554:	2b00      	cmp	r3, #0
 8007556:	d10a      	bne.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007558:	4b3c      	ldr	r3, [pc, #240]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800755a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800755c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007566:	4a39      	ldr	r2, [pc, #228]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007568:	430b      	orrs	r3, r1
 800756a:	6513      	str	r3, [r2, #80]	@ 0x50
 800756c:	e003      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800756e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007572:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800757a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007582:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007586:	2300      	movs	r3, #0
 8007588:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800758c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007590:	460b      	mov	r3, r1
 8007592:	4313      	orrs	r3, r2
 8007594:	d060      	beq.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007596:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800759a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800759e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80075a2:	d039      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80075a4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80075a8:	d832      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80075aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075ae:	d035      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80075b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075b4:	d82c      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80075b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075ba:	d031      	beq.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80075bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075c0:	d826      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80075c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075c6:	d02d      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80075c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80075cc:	d820      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80075ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075d2:	d012      	beq.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80075d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075d8:	d81a      	bhi.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d024      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80075de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075e2:	d115      	bne.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075e8:	3308      	adds	r3, #8
 80075ea:	2101      	movs	r1, #1
 80075ec:	4618      	mov	r0, r3
 80075ee:	f002 f82d 	bl	800964c <RCCEx_PLL2_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80075f8:	e017      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075fe:	3328      	adds	r3, #40	@ 0x28
 8007600:	2101      	movs	r1, #1
 8007602:	4618      	mov	r0, r3
 8007604:	f002 f8d4 	bl	80097b0 <RCCEx_PLL3_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800760e:	e00c      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007616:	e008      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007618:	bf00      	nop
 800761a:	e006      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800761c:	bf00      	nop
 800761e:	e004      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007620:	bf00      	nop
 8007622:	e002      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007624:	bf00      	nop
 8007626:	e000      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007628:	bf00      	nop
    }

    if (ret == HAL_OK)
 800762a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10e      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007632:	4b06      	ldr	r3, [pc, #24]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007636:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800763a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800763e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007642:	4a02      	ldr	r2, [pc, #8]	@ (800764c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007644:	430b      	orrs	r3, r1
 8007646:	6593      	str	r3, [r2, #88]	@ 0x58
 8007648:	e006      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800764a:	bf00      	nop
 800764c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007650:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007654:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007658:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007660:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007668:	2300      	movs	r3, #0
 800766a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800766e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007672:	460b      	mov	r3, r1
 8007674:	4313      	orrs	r3, r2
 8007676:	d037      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007678:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800767c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800767e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007682:	d00e      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007688:	d816      	bhi.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d018      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800768e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007692:	d111      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007694:	4bc4      	ldr	r3, [pc, #784]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007698:	4ac3      	ldr	r2, [pc, #780]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800769a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800769e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80076a0:	e00f      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076a6:	3308      	adds	r3, #8
 80076a8:	2101      	movs	r1, #1
 80076aa:	4618      	mov	r0, r3
 80076ac:	f001 ffce 	bl	800964c <RCCEx_PLL2_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80076b6:	e004      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076be:	e000      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80076c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076ca:	4bb7      	ldr	r3, [pc, #732]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80076d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80076d8:	4ab3      	ldr	r2, [pc, #716]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80076da:	430b      	orrs	r3, r1
 80076dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80076de:	e003      	b.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076e4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80076e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80076f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80076f8:	2300      	movs	r3, #0
 80076fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80076fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007702:	460b      	mov	r3, r1
 8007704:	4313      	orrs	r3, r2
 8007706:	d039      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800770c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800770e:	2b03      	cmp	r3, #3
 8007710:	d81c      	bhi.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007712:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007755 	.word	0x08007755
 800771c:	08007729 	.word	0x08007729
 8007720:	08007737 	.word	0x08007737
 8007724:	08007755 	.word	0x08007755
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007728:	4b9f      	ldr	r3, [pc, #636]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800772a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772c:	4a9e      	ldr	r2, [pc, #632]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800772e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007732:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007734:	e00f      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007736:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800773a:	3308      	adds	r3, #8
 800773c:	2102      	movs	r1, #2
 800773e:	4618      	mov	r0, r3
 8007740:	f001 ff84 	bl	800964c <RCCEx_PLL2_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800774a:	e004      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007752:	e000      	b.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007756:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800775e:	4b92      	ldr	r3, [pc, #584]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007762:	f023 0103 	bic.w	r1, r3, #3
 8007766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800776a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800776c:	4a8e      	ldr	r2, [pc, #568]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800776e:	430b      	orrs	r3, r1
 8007770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007772:	e003      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007774:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007778:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800777c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007788:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800778c:	2300      	movs	r3, #0
 800778e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007792:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007796:	460b      	mov	r3, r1
 8007798:	4313      	orrs	r3, r2
 800779a:	f000 8099 	beq.w	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800779e:	4b83      	ldr	r3, [pc, #524]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a82      	ldr	r2, [pc, #520]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077aa:	f7f9 fcfd 	bl	80011a8 <HAL_GetTick>
 80077ae:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077b2:	e00b      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077b4:	f7f9 fcf8 	bl	80011a8 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b64      	cmp	r3, #100	@ 0x64
 80077c2:	d903      	bls.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80077ca:	e005      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077cc:	4b77      	ldr	r3, [pc, #476]	@ (80079ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d0ed      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80077d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d173      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80077e0:	4b71      	ldr	r3, [pc, #452]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80077e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80077ec:	4053      	eors	r3, r2
 80077ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d015      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80077f6:	4b6c      	ldr	r3, [pc, #432]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80077f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007802:	4b69      	ldr	r3, [pc, #420]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007806:	4a68      	ldr	r2, [pc, #416]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800780c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800780e:	4b66      	ldr	r3, [pc, #408]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007812:	4a65      	ldr	r2, [pc, #404]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007818:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800781a:	4a63      	ldr	r2, [pc, #396]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800781c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007820:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007826:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800782a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800782e:	d118      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007830:	f7f9 fcba 	bl	80011a8 <HAL_GetTick>
 8007834:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007838:	e00d      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800783a:	f7f9 fcb5 	bl	80011a8 <HAL_GetTick>
 800783e:	4602      	mov	r2, r0
 8007840:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007844:	1ad2      	subs	r2, r2, r3
 8007846:	f241 3388 	movw	r3, #5000	@ 0x1388
 800784a:	429a      	cmp	r2, r3
 800784c:	d903      	bls.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8007854:	e005      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007856:	4b54      	ldr	r3, [pc, #336]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0eb      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007862:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007866:	2b00      	cmp	r3, #0
 8007868:	d129      	bne.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800786a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800786e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007876:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800787a:	d10e      	bne.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800787c:	4b4a      	ldr	r3, [pc, #296]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007884:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007888:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800788c:	091a      	lsrs	r2, r3, #4
 800788e:	4b48      	ldr	r3, [pc, #288]	@ (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007890:	4013      	ands	r3, r2
 8007892:	4a45      	ldr	r2, [pc, #276]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007894:	430b      	orrs	r3, r1
 8007896:	6113      	str	r3, [r2, #16]
 8007898:	e005      	b.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800789a:	4b43      	ldr	r3, [pc, #268]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	4a42      	ldr	r2, [pc, #264]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80078a4:	6113      	str	r3, [r2, #16]
 80078a6:	4b40      	ldr	r3, [pc, #256]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80078aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80078b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078b6:	4a3c      	ldr	r2, [pc, #240]	@ (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80078b8:	430b      	orrs	r3, r1
 80078ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80078bc:	e008      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078c2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 80078c6:	e003      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80078cc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80078d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d8:	f002 0301 	and.w	r3, r2, #1
 80078dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078e0:	2300      	movs	r3, #0
 80078e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4313      	orrs	r3, r2
 80078ee:	f000 8090 	beq.w	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80078f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80078fa:	2b28      	cmp	r3, #40	@ 0x28
 80078fc:	d870      	bhi.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80078fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007904 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007904:	080079e9 	.word	0x080079e9
 8007908:	080079e1 	.word	0x080079e1
 800790c:	080079e1 	.word	0x080079e1
 8007910:	080079e1 	.word	0x080079e1
 8007914:	080079e1 	.word	0x080079e1
 8007918:	080079e1 	.word	0x080079e1
 800791c:	080079e1 	.word	0x080079e1
 8007920:	080079e1 	.word	0x080079e1
 8007924:	080079b5 	.word	0x080079b5
 8007928:	080079e1 	.word	0x080079e1
 800792c:	080079e1 	.word	0x080079e1
 8007930:	080079e1 	.word	0x080079e1
 8007934:	080079e1 	.word	0x080079e1
 8007938:	080079e1 	.word	0x080079e1
 800793c:	080079e1 	.word	0x080079e1
 8007940:	080079e1 	.word	0x080079e1
 8007944:	080079cb 	.word	0x080079cb
 8007948:	080079e1 	.word	0x080079e1
 800794c:	080079e1 	.word	0x080079e1
 8007950:	080079e1 	.word	0x080079e1
 8007954:	080079e1 	.word	0x080079e1
 8007958:	080079e1 	.word	0x080079e1
 800795c:	080079e1 	.word	0x080079e1
 8007960:	080079e1 	.word	0x080079e1
 8007964:	080079e9 	.word	0x080079e9
 8007968:	080079e1 	.word	0x080079e1
 800796c:	080079e1 	.word	0x080079e1
 8007970:	080079e1 	.word	0x080079e1
 8007974:	080079e1 	.word	0x080079e1
 8007978:	080079e1 	.word	0x080079e1
 800797c:	080079e1 	.word	0x080079e1
 8007980:	080079e1 	.word	0x080079e1
 8007984:	080079e9 	.word	0x080079e9
 8007988:	080079e1 	.word	0x080079e1
 800798c:	080079e1 	.word	0x080079e1
 8007990:	080079e1 	.word	0x080079e1
 8007994:	080079e1 	.word	0x080079e1
 8007998:	080079e1 	.word	0x080079e1
 800799c:	080079e1 	.word	0x080079e1
 80079a0:	080079e1 	.word	0x080079e1
 80079a4:	080079e9 	.word	0x080079e9
 80079a8:	58024400 	.word	0x58024400
 80079ac:	58024800 	.word	0x58024800
 80079b0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079b8:	3308      	adds	r3, #8
 80079ba:	2101      	movs	r1, #1
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 fe45 	bl	800964c <RCCEx_PLL2_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80079c8:	e00f      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ce:	3328      	adds	r3, #40	@ 0x28
 80079d0:	2101      	movs	r1, #1
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 feec 	bl	80097b0 <RCCEx_PLL3_Config>
 80079d8:	4603      	mov	r3, r0
 80079da:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80079de:	e004      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80079e6:	e000      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80079e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10b      	bne.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80079f2:	4bc0      	ldr	r3, [pc, #768]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80079f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80079fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a02:	4abc      	ldr	r2, [pc, #752]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a08:	e003      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1a:	f002 0302 	and.w	r3, r2, #2
 8007a1e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a22:	2300      	movs	r3, #0
 8007a24:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007a28:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	d043      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	d824      	bhi.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007a91 	.word	0x08007a91
 8007a48:	08007a5d 	.word	0x08007a5d
 8007a4c:	08007a73 	.word	0x08007a73
 8007a50:	08007a91 	.word	0x08007a91
 8007a54:	08007a91 	.word	0x08007a91
 8007a58:	08007a91 	.word	0x08007a91
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a60:	3308      	adds	r3, #8
 8007a62:	2101      	movs	r1, #1
 8007a64:	4618      	mov	r0, r3
 8007a66:	f001 fdf1 	bl	800964c <RCCEx_PLL2_Config>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a70:	e00f      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a76:	3328      	adds	r3, #40	@ 0x28
 8007a78:	2101      	movs	r1, #1
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f001 fe98 	bl	80097b0 <RCCEx_PLL3_Config>
 8007a80:	4603      	mov	r3, r0
 8007a82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007a86:	e004      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a8e:	e000      	b.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10b      	bne.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007a9a:	4b96      	ldr	r3, [pc, #600]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a9e:	f023 0107 	bic.w	r1, r3, #7
 8007aa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aaa:	4a92      	ldr	r2, [pc, #584]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007aac:	430b      	orrs	r3, r1
 8007aae:	6553      	str	r3, [r2, #84]	@ 0x54
 8007ab0:	e003      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ab2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007ab6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007aba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	f002 0304 	and.w	r3, r2, #4
 8007ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007aca:	2300      	movs	r3, #0
 8007acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ad0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	d043      	beq.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ae2:	2b05      	cmp	r3, #5
 8007ae4:	d824      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8007aec <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b39 	.word	0x08007b39
 8007af0:	08007b05 	.word	0x08007b05
 8007af4:	08007b1b 	.word	0x08007b1b
 8007af8:	08007b39 	.word	0x08007b39
 8007afc:	08007b39 	.word	0x08007b39
 8007b00:	08007b39 	.word	0x08007b39
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b08:	3308      	adds	r3, #8
 8007b0a:	2101      	movs	r1, #1
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 fd9d 	bl	800964c <RCCEx_PLL2_Config>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b18:	e00f      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b1e:	3328      	adds	r3, #40	@ 0x28
 8007b20:	2101      	movs	r1, #1
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 fe44 	bl	80097b0 <RCCEx_PLL3_Config>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007b2e:	e004      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007b36:	e000      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d10b      	bne.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b42:	4b6c      	ldr	r3, [pc, #432]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b46:	f023 0107 	bic.w	r1, r3, #7
 8007b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b52:	4a68      	ldr	r2, [pc, #416]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b58:	e003      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b5a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b5e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f002 0320 	and.w	r3, r2, #32
 8007b6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007b72:	2300      	movs	r3, #0
 8007b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	d055      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007b82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b8e:	d033      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007b90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b94:	d82c      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9a:	d02f      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ba0:	d826      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007ba2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ba6:	d02b      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007ba8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007bac:	d820      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bb2:	d012      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bb8:	d81a      	bhi.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d022      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007bbe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bc2:	d115      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bc8:	3308      	adds	r3, #8
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f001 fd3d 	bl	800964c <RCCEx_PLL2_Config>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007bd8:	e015      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007bda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bde:	3328      	adds	r3, #40	@ 0x28
 8007be0:	2102      	movs	r1, #2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f001 fde4 	bl	80097b0 <RCCEx_PLL3_Config>
 8007be8:	4603      	mov	r3, r0
 8007bea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007bee:	e00a      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007bf6:	e006      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007bf8:	bf00      	nop
 8007bfa:	e004      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007bfc:	bf00      	nop
 8007bfe:	e002      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007c00:	bf00      	nop
 8007c02:	e000      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c06:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10b      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c0e:	4b39      	ldr	r3, [pc, #228]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c12:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007c16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007c1e:	4a35      	ldr	r2, [pc, #212]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007c20:	430b      	orrs	r3, r1
 8007c22:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c24:	e003      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c26:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007c2a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007c44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007c48:	460b      	mov	r3, r1
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	d058      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007c4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c56:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c5a:	d033      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007c5c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007c60:	d82c      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007c62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c66:	d02f      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c6c:	d826      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007c6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c72:	d02b      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007c74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c78:	d820      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007c7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c7e:	d012      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007c80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c84:	d81a      	bhi.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d022      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c8e:	d115      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c94:	3308      	adds	r3, #8
 8007c96:	2100      	movs	r1, #0
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f001 fcd7 	bl	800964c <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007ca4:	e015      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007caa:	3328      	adds	r3, #40	@ 0x28
 8007cac:	2102      	movs	r1, #2
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f001 fd7e 	bl	80097b0 <RCCEx_PLL3_Config>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007cba:	e00a      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cc2:	e006      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007cc4:	bf00      	nop
 8007cc6:	e004      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007cc8:	bf00      	nop
 8007cca:	e002      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007ccc:	bf00      	nop
 8007cce:	e000      	b.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10e      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007cda:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cde:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007cea:	4a02      	ldr	r2, [pc, #8]	@ (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007cec:	430b      	orrs	r3, r1
 8007cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8007cf0:	e006      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8007cf2:	bf00      	nop
 8007cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007cfc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007d0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d10:	2300      	movs	r3, #0
 8007d12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d16:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	d055      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007d28:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d2c:	d033      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007d2e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007d32:	d82c      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007d34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d38:	d02f      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8007d3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d3e:	d826      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007d40:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d44:	d02b      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007d46:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007d4a:	d820      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007d4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d50:	d012      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8007d52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d56:	d81a      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d022      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8007d5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d60:	d115      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d66:	3308      	adds	r3, #8
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 fc6e 	bl	800964c <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d76:	e015      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d7c:	3328      	adds	r3, #40	@ 0x28
 8007d7e:	2102      	movs	r1, #2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f001 fd15 	bl	80097b0 <RCCEx_PLL3_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007d8c:	e00a      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007d94:	e006      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007d96:	bf00      	nop
 8007d98:	e004      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007d9a:	bf00      	nop
 8007d9c:	e002      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007d9e:	bf00      	nop
 8007da0:	e000      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8007da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10b      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007dac:	4ba1      	ldr	r3, [pc, #644]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007db4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007db8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007dbc:	4a9d      	ldr	r2, [pc, #628]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dc2:	e003      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007dcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f002 0308 	and.w	r3, r2, #8
 8007dd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007de2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007de6:	460b      	mov	r3, r1
 8007de8:	4313      	orrs	r3, r2
 8007dea:	d01e      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007dec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007df8:	d10c      	bne.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dfe:	3328      	adds	r3, #40	@ 0x28
 8007e00:	2102      	movs	r1, #2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f001 fcd4 	bl	80097b0 <RCCEx_PLL3_Config>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e14:	4b87      	ldr	r3, [pc, #540]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e18:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e24:	4a83      	ldr	r2, [pc, #524]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e26:	430b      	orrs	r3, r1
 8007e28:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	f002 0310 	and.w	r3, r2, #16
 8007e36:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e40:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007e44:	460b      	mov	r3, r1
 8007e46:	4313      	orrs	r3, r2
 8007e48:	d01e      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e56:	d10c      	bne.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e5c:	3328      	adds	r3, #40	@ 0x28
 8007e5e:	2102      	movs	r1, #2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 fca5 	bl	80097b0 <RCCEx_PLL3_Config>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e72:	4b70      	ldr	r3, [pc, #448]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e82:	4a6c      	ldr	r2, [pc, #432]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007e84:	430b      	orrs	r3, r1
 8007e86:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007e94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e9e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	d03e      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007eb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eb4:	d022      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8007eb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007eba:	d81b      	bhi.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d003      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8007ec0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ec4:	d00b      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8007ec6:	e015      	b.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ecc:	3308      	adds	r3, #8
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 fbbb 	bl	800964c <RCCEx_PLL2_Config>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007edc:	e00f      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee2:	3328      	adds	r3, #40	@ 0x28
 8007ee4:	2102      	movs	r1, #2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f001 fc62 	bl	80097b0 <RCCEx_PLL3_Config>
 8007eec:	4603      	mov	r3, r0
 8007eee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007ef2:	e004      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007efa:	e000      	b.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8007efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007efe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10b      	bne.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f06:	4b4b      	ldr	r3, [pc, #300]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f0a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007f0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007f16:	4a47      	ldr	r2, [pc, #284]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f18:	430b      	orrs	r3, r1
 8007f1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f1c:	e003      	b.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007f32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f34:	2300      	movs	r3, #0
 8007f36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f38:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	d03b      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f4a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f4e:	d01f      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8007f50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007f54:	d818      	bhi.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007f56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f5a:	d003      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8007f5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f60:	d007      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8007f62:	e011      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f64:	4b33      	ldr	r3, [pc, #204]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f68:	4a32      	ldr	r2, [pc, #200]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f70:	e00f      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f76:	3328      	adds	r3, #40	@ 0x28
 8007f78:	2101      	movs	r1, #1
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f001 fc18 	bl	80097b0 <RCCEx_PLL3_Config>
 8007f80:	4603      	mov	r3, r0
 8007f82:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8007f86:	e004      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f8e:	e000      	b.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8007f90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f92:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f9a:	4b26      	ldr	r3, [pc, #152]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f9e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007faa:	4a22      	ldr	r2, [pc, #136]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fb0:	e003      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fb6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007fc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007fc8:	2300      	movs	r3, #0
 8007fca:	677b      	str	r3, [r7, #116]	@ 0x74
 8007fcc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d034      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d003      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8007fe0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fe4:	d007      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8007fe6:	e011      	b.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe8:	4b12      	ldr	r3, [pc, #72]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	4a11      	ldr	r2, [pc, #68]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8007fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007ff4:	e00e      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	2102      	movs	r1, #2
 8007ffe:	4618      	mov	r0, r3
 8008000:	f001 fb24 	bl	800964c <RCCEx_PLL2_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800800a:	e003      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10d      	bne.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800801c:	4b05      	ldr	r3, [pc, #20]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800801e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008020:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008024:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802a:	4a02      	ldr	r2, [pc, #8]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800802c:	430b      	orrs	r3, r1
 800802e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008030:	e006      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008032:	bf00      	nop
 8008034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008038:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800803c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008040:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008048:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800804c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800804e:	2300      	movs	r3, #0
 8008050:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008052:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008056:	460b      	mov	r3, r1
 8008058:	4313      	orrs	r3, r2
 800805a:	d00c      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800805c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008060:	3328      	adds	r3, #40	@ 0x28
 8008062:	2102      	movs	r1, #2
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fba3 	bl	80097b0 <RCCEx_PLL3_Config>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008082:	663b      	str	r3, [r7, #96]	@ 0x60
 8008084:	2300      	movs	r3, #0
 8008086:	667b      	str	r3, [r7, #100]	@ 0x64
 8008088:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800808c:	460b      	mov	r3, r1
 800808e:	4313      	orrs	r3, r2
 8008090:	d038      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008092:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800809a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800809e:	d018      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80080a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080a4:	d811      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80080a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080aa:	d014      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80080ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080b0:	d80b      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d011      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80080b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ba:	d106      	bne.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080bc:	4bc3      	ldr	r3, [pc, #780]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80080be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080c0:	4ac2      	ldr	r2, [pc, #776]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80080c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80080c8:	e008      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080d0:	e004      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80080d2:	bf00      	nop
 80080d4:	e002      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80080d6:	bf00      	nop
 80080d8:	e000      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80080da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10b      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080e4:	4bb9      	ldr	r3, [pc, #740]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80080e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80080ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080f4:	4ab5      	ldr	r2, [pc, #724]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80080f6:	430b      	orrs	r3, r1
 80080f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80080fa:	e003      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008100:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008104:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008110:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008112:	2300      	movs	r3, #0
 8008114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008116:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800811a:	460b      	mov	r3, r1
 800811c:	4313      	orrs	r3, r2
 800811e:	d009      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008120:	4baa      	ldr	r3, [pc, #680]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008124:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008128:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800812c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800812e:	4aa7      	ldr	r2, [pc, #668]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008130:	430b      	orrs	r3, r1
 8008132:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008140:	653b      	str	r3, [r7, #80]	@ 0x50
 8008142:	2300      	movs	r3, #0
 8008144:	657b      	str	r3, [r7, #84]	@ 0x54
 8008146:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800814a:	460b      	mov	r3, r1
 800814c:	4313      	orrs	r3, r2
 800814e:	d009      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008150:	4b9e      	ldr	r3, [pc, #632]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008152:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008154:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800815c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800815e:	4a9b      	ldr	r2, [pc, #620]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008160:	430b      	orrs	r3, r1
 8008162:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008172:	2300      	movs	r3, #0
 8008174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008176:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800817a:	460b      	mov	r3, r1
 800817c:	4313      	orrs	r3, r2
 800817e:	d009      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008180:	4b92      	ldr	r3, [pc, #584]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008184:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008188:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800818c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800818e:	4a8f      	ldr	r2, [pc, #572]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008190:	430b      	orrs	r3, r1
 8008192:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008194:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80081a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80081a2:	2300      	movs	r3, #0
 80081a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081a6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80081aa:	460b      	mov	r3, r1
 80081ac:	4313      	orrs	r3, r2
 80081ae:	d00e      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081b0:	4b86      	ldr	r3, [pc, #536]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	4a85      	ldr	r2, [pc, #532]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081ba:	6113      	str	r3, [r2, #16]
 80081bc:	4b83      	ldr	r3, [pc, #524]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081be:	6919      	ldr	r1, [r3, #16]
 80081c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80081c8:	4a80      	ldr	r2, [pc, #512]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081ca:	430b      	orrs	r3, r1
 80081cc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80081ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80081da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081dc:	2300      	movs	r3, #0
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80081e4:	460b      	mov	r3, r1
 80081e6:	4313      	orrs	r3, r2
 80081e8:	d009      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80081ea:	4b78      	ldr	r3, [pc, #480]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ee:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80081f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f8:	4a74      	ldr	r2, [pc, #464]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80081fa:	430b      	orrs	r3, r1
 80081fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80081fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800820a:	633b      	str	r3, [r7, #48]	@ 0x30
 800820c:	2300      	movs	r3, #0
 800820e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008210:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008214:	460b      	mov	r3, r1
 8008216:	4313      	orrs	r3, r2
 8008218:	d00a      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800821a:	4b6c      	ldr	r3, [pc, #432]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800821c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008226:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800822a:	4a68      	ldr	r2, [pc, #416]	@ (80083cc <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800822c:	430b      	orrs	r3, r1
 800822e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008230:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	2100      	movs	r1, #0
 800823a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008242:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008246:	460b      	mov	r3, r1
 8008248:	4313      	orrs	r3, r2
 800824a:	d011      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800824c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008250:	3308      	adds	r3, #8
 8008252:	2100      	movs	r1, #0
 8008254:	4618      	mov	r0, r3
 8008256:	f001 f9f9 	bl	800964c <RCCEx_PLL2_Config>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008260:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008268:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800826c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008270:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008278:	2100      	movs	r1, #0
 800827a:	6239      	str	r1, [r7, #32]
 800827c:	f003 0302 	and.w	r3, r3, #2
 8008280:	627b      	str	r3, [r7, #36]	@ 0x24
 8008282:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008286:	460b      	mov	r3, r1
 8008288:	4313      	orrs	r3, r2
 800828a:	d011      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800828c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008290:	3308      	adds	r3, #8
 8008292:	2101      	movs	r1, #1
 8008294:	4618      	mov	r0, r3
 8008296:	f001 f9d9 	bl	800964c <RCCEx_PLL2_Config>
 800829a:	4603      	mov	r3, r0
 800829c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80082a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d003      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80082b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	2100      	movs	r1, #0
 80082ba:	61b9      	str	r1, [r7, #24]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	61fb      	str	r3, [r7, #28]
 80082c2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80082c6:	460b      	mov	r3, r1
 80082c8:	4313      	orrs	r3, r2
 80082ca:	d011      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80082cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d0:	3308      	adds	r3, #8
 80082d2:	2102      	movs	r1, #2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f9b9 	bl	800964c <RCCEx_PLL2_Config>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80082e0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d003      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082ec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80082f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	2100      	movs	r1, #0
 80082fa:	6139      	str	r1, [r7, #16]
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008306:	460b      	mov	r3, r1
 8008308:	4313      	orrs	r3, r2
 800830a:	d011      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800830c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008310:	3328      	adds	r3, #40	@ 0x28
 8008312:	2100      	movs	r1, #0
 8008314:	4618      	mov	r0, r3
 8008316:	f001 fa4b 	bl	80097b0 <RCCEx_PLL3_Config>
 800831a:	4603      	mov	r3, r0
 800831c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008320:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008328:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800832c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008330:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	2100      	movs	r1, #0
 800833a:	60b9      	str	r1, [r7, #8]
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008346:	460b      	mov	r3, r1
 8008348:	4313      	orrs	r3, r2
 800834a:	d011      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800834c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008350:	3328      	adds	r3, #40	@ 0x28
 8008352:	2101      	movs	r1, #1
 8008354:	4618      	mov	r0, r3
 8008356:	f001 fa2b 	bl	80097b0 <RCCEx_PLL3_Config>
 800835a:	4603      	mov	r3, r0
 800835c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008360:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008368:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800836c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	2100      	movs	r1, #0
 800837a:	6039      	str	r1, [r7, #0]
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	607b      	str	r3, [r7, #4]
 8008382:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008386:	460b      	mov	r3, r1
 8008388:	4313      	orrs	r3, r2
 800838a:	d011      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800838c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008390:	3328      	adds	r3, #40	@ 0x28
 8008392:	2102      	movs	r1, #2
 8008394:	4618      	mov	r0, r3
 8008396:	f001 fa0b 	bl	80097b0 <RCCEx_PLL3_Config>
 800839a:	4603      	mov	r3, r0
 800839c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80083a0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80083b0:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d101      	bne.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	e000      	b.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
}
 80083be:	4618      	mov	r0, r3
 80083c0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80083c4:	46bd      	mov	sp, r7
 80083c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083ca:	bf00      	nop
 80083cc:	58024400 	.word	0x58024400

080083d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b090      	sub	sp, #64	@ 0x40
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80083da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083de:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80083e2:	430b      	orrs	r3, r1
 80083e4:	f040 8094 	bne.w	8008510 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80083e8:	4b97      	ldr	r3, [pc, #604]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80083ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ec:	f003 0307 	and.w	r3, r3, #7
 80083f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	f200 8087 	bhi.w	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80083fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008400 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008415 	.word	0x08008415
 8008404:	0800843d 	.word	0x0800843d
 8008408:	08008465 	.word	0x08008465
 800840c:	08008501 	.word	0x08008501
 8008410:	0800848d 	.word	0x0800848d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008414:	4b8c      	ldr	r3, [pc, #560]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800841c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008420:	d108      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008426:	4618      	mov	r0, r3
 8008428:	f000 ff68 	bl	80092fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800842c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008430:	f000 bc97 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008438:	f000 bc93 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800843c:	4b82      	ldr	r3, [pc, #520]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008448:	d108      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800844a:	f107 0318 	add.w	r3, r7, #24
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fcac 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008458:	f000 bc83 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008460:	f000 bc7f 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008464:	4b78      	ldr	r3, [pc, #480]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800846c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008470:	d108      	bne.n	8008484 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008472:	f107 030c 	add.w	r3, r7, #12
 8008476:	4618      	mov	r0, r3
 8008478:	f000 fdec 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008480:	f000 bc6f 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008488:	f000 bc6b 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800848c:	4b6e      	ldr	r3, [pc, #440]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800848e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008490:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008494:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008496:	4b6c      	ldr	r3, [pc, #432]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d10c      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80084a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d109      	bne.n	80084bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084a8:	4b67      	ldr	r3, [pc, #412]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	08db      	lsrs	r3, r3, #3
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	4a66      	ldr	r2, [pc, #408]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80084b4:	fa22 f303 	lsr.w	r3, r2, r3
 80084b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084ba:	e01f      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084bc:	4b62      	ldr	r3, [pc, #392]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084c8:	d106      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80084ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084d0:	d102      	bne.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80084d2:	4b5f      	ldr	r3, [pc, #380]	@ (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80084d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084d6:	e011      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084d8:	4b5b      	ldr	r3, [pc, #364]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084e4:	d106      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80084e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ec:	d102      	bne.n	80084f4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80084ee:	4b59      	ldr	r3, [pc, #356]	@ (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80084f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084f2:	e003      	b.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80084f4:	2300      	movs	r3, #0
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80084f8:	f000 bc33 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80084fc:	f000 bc31 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008500:	4b55      	ldr	r3, [pc, #340]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008504:	f000 bc2d 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008508:	2300      	movs	r3, #0
 800850a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800850c:	f000 bc29 	b.w	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008510:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008514:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008518:	430b      	orrs	r3, r1
 800851a:	f040 809f 	bne.w	800865c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800851e:	4b4a      	ldr	r3, [pc, #296]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008522:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008526:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800852a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800852e:	d04d      	beq.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008532:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008536:	f200 8084 	bhi.w	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	2bc0      	cmp	r3, #192	@ 0xc0
 800853e:	d07d      	beq.n	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	2bc0      	cmp	r3, #192	@ 0xc0
 8008544:	d87d      	bhi.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008548:	2b80      	cmp	r3, #128	@ 0x80
 800854a:	d02d      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854e:	2b80      	cmp	r3, #128	@ 0x80
 8008550:	d877      	bhi.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008554:	2b00      	cmp	r3, #0
 8008556:	d003      	beq.n	8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8008558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855a:	2b40      	cmp	r3, #64	@ 0x40
 800855c:	d012      	beq.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800855e:	e070      	b.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008560:	4b39      	ldr	r3, [pc, #228]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800856c:	d107      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800856e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008572:	4618      	mov	r0, r3
 8008574:	f000 fec2 	bl	80092fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800857c:	e3f1      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008582:	e3ee      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008584:	4b30      	ldr	r3, [pc, #192]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800858c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008590:	d107      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008592:	f107 0318 	add.w	r3, r7, #24
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fc08 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085a0:	e3df      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a6:	e3dc      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085a8:	4b27      	ldr	r3, [pc, #156]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085b4:	d107      	bne.n	80085c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085b6:	f107 030c 	add.w	r3, r7, #12
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fd4a 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80085c4:	e3cd      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ca:	e3ca      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80085d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085d6:	4b1c      	ldr	r3, [pc, #112]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f003 0304 	and.w	r3, r3, #4
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d10c      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80085e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d109      	bne.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085e8:	4b17      	ldr	r3, [pc, #92]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	08db      	lsrs	r3, r3, #3
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	4a16      	ldr	r2, [pc, #88]	@ (800864c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80085f4:	fa22 f303 	lsr.w	r3, r2, r3
 80085f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085fa:	e01e      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085fc:	4b12      	ldr	r3, [pc, #72]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008604:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008608:	d106      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800860a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008610:	d102      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008612:	4b0f      	ldr	r3, [pc, #60]	@ (8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008616:	e010      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008618:	4b0b      	ldr	r3, [pc, #44]	@ (8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008624:	d106      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800862c:	d102      	bne.n	8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800862e:	4b09      	ldr	r3, [pc, #36]	@ (8008654 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008630:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008632:	e002      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008634:	2300      	movs	r3, #0
 8008636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008638:	e393      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800863a:	e392      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800863c:	4b06      	ldr	r3, [pc, #24]	@ (8008658 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008640:	e38f      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008646:	e38c      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008648:	58024400 	.word	0x58024400
 800864c:	03d09000 	.word	0x03d09000
 8008650:	003d0900 	.word	0x003d0900
 8008654:	007a1200 	.word	0x007a1200
 8008658:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800865c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008660:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008664:	430b      	orrs	r3, r1
 8008666:	f040 809c 	bne.w	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800866a:	4b9e      	ldr	r3, [pc, #632]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800866c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800866e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008672:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800867a:	d054      	beq.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008682:	f200 808b 	bhi.w	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800868c:	f000 8083 	beq.w	8008796 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8008690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008692:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008696:	f200 8081 	bhi.w	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800869a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a0:	d02f      	beq.n	8008702 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086a8:	d878      	bhi.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80086aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d004      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80086b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086b6:	d012      	beq.n	80086de <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80086b8:	e070      	b.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80086ba:	4b8a      	ldr	r3, [pc, #552]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086c6:	d107      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 fe15 	bl	80092fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d6:	e344      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086d8:	2300      	movs	r3, #0
 80086da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086dc:	e341      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086de:	4b81      	ldr	r3, [pc, #516]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086ea:	d107      	bne.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ec:	f107 0318 	add.w	r3, r7, #24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fb5b 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086fa:	e332      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80086fc:	2300      	movs	r3, #0
 80086fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008700:	e32f      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008702:	4b78      	ldr	r3, [pc, #480]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800870a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800870e:	d107      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008710:	f107 030c 	add.w	r3, r7, #12
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fc9d 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800871e:	e320      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008724:	e31d      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008726:	4b6f      	ldr	r3, [pc, #444]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800872a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008730:	4b6c      	ldr	r3, [pc, #432]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b04      	cmp	r3, #4
 800873a:	d10c      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800873c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008742:	4b68      	ldr	r3, [pc, #416]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	08db      	lsrs	r3, r3, #3
 8008748:	f003 0303 	and.w	r3, r3, #3
 800874c:	4a66      	ldr	r2, [pc, #408]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800874e:	fa22 f303 	lsr.w	r3, r2, r3
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008754:	e01e      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008756:	4b63      	ldr	r3, [pc, #396]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800875e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008762:	d106      	bne.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008766:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800876a:	d102      	bne.n	8008772 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800876c:	4b5f      	ldr	r3, [pc, #380]	@ (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800876e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008770:	e010      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008772:	4b5c      	ldr	r3, [pc, #368]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800877a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800877e:	d106      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008782:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008786:	d102      	bne.n	800878e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008788:	4b59      	ldr	r3, [pc, #356]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800878a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800878c:	e002      	b.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8008792:	e2e6      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008794:	e2e5      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008796:	4b57      	ldr	r3, [pc, #348]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879a:	e2e2      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a0:	e2df      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80087a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087a6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80087aa:	430b      	orrs	r3, r1
 80087ac:	f040 80a7 	bne.w	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80087b0:	4b4c      	ldr	r3, [pc, #304]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80087b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087b4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80087b8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80087ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087c0:	d055      	beq.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80087c8:	f200 8096 	bhi.w	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80087cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087d2:	f000 8084 	beq.w	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80087d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80087dc:	f200 808c 	bhi.w	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80087e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087e6:	d030      	beq.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80087e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ee:	f200 8083 	bhi.w	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80087f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d004      	beq.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80087f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087fe:	d012      	beq.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8008800:	e07a      	b.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008802:	4b38      	ldr	r3, [pc, #224]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800880a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800880e:	d107      	bne.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fd71 	bl	80092fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800881a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800881e:	e2a0      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008820:	2300      	movs	r3, #0
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008824:	e29d      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008826:	4b2f      	ldr	r3, [pc, #188]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800882e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008832:	d107      	bne.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008834:	f107 0318 	add.w	r3, r7, #24
 8008838:	4618      	mov	r0, r3
 800883a:	f000 fab7 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008842:	e28e      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008844:	2300      	movs	r3, #0
 8008846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008848:	e28b      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800884a:	4b26      	ldr	r3, [pc, #152]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008856:	d107      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008858:	f107 030c 	add.w	r3, r7, #12
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fbf9 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008866:	e27c      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800886c:	e279      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800886e:	4b1d      	ldr	r3, [pc, #116]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008872:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008876:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008878:	4b1a      	ldr	r3, [pc, #104]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b04      	cmp	r3, #4
 8008882:	d10c      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800888a:	4b16      	ldr	r3, [pc, #88]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	08db      	lsrs	r3, r3, #3
 8008890:	f003 0303 	and.w	r3, r3, #3
 8008894:	4a14      	ldr	r2, [pc, #80]	@ (80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008896:	fa22 f303 	lsr.w	r3, r2, r3
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800889c:	e01e      	b.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800889e:	4b11      	ldr	r3, [pc, #68]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088aa:	d106      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80088ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088b2:	d102      	bne.n	80088ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80088b4:	4b0d      	ldr	r3, [pc, #52]	@ (80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088b8:	e010      	b.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80088ba:	4b0a      	ldr	r3, [pc, #40]	@ (80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80088c6:	d106      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80088c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088ce:	d102      	bne.n	80088d6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80088d0:	4b07      	ldr	r3, [pc, #28]	@ (80088f0 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80088d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088d4:	e002      	b.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80088da:	e242      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80088dc:	e241      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80088de:	4b05      	ldr	r3, [pc, #20]	@ (80088f4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80088e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e2:	e23e      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80088e4:	58024400 	.word	0x58024400
 80088e8:	03d09000 	.word	0x03d09000
 80088ec:	003d0900 	.word	0x003d0900
 80088f0:	007a1200 	.word	0x007a1200
 80088f4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088fc:	e231      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80088fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008902:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008906:	430b      	orrs	r3, r1
 8008908:	f040 8085 	bne.w	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800890c:	4b9c      	ldr	r3, [pc, #624]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800890e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008910:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008914:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008918:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800891c:	d06b      	beq.n	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008924:	d874      	bhi.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008928:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800892c:	d056      	beq.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800892e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008930:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008934:	d86c      	bhi.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008938:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800893c:	d03b      	beq.n	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800893e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008940:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008944:	d864      	bhi.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008948:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800894c:	d021      	beq.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800894e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008954:	d85c      	bhi.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008958:	2b00      	cmp	r3, #0
 800895a:	d004      	beq.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800895c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800895e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008962:	d004      	beq.n	800896e <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008964:	e054      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008966:	f7fe fb49 	bl	8006ffc <HAL_RCC_GetPCLK1Freq>
 800896a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800896c:	e1f9      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800896e:	4b84      	ldr	r3, [pc, #528]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008976:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800897a:	d107      	bne.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800897c:	f107 0318 	add.w	r3, r7, #24
 8008980:	4618      	mov	r0, r3
 8008982:	f000 fa13 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800898a:	e1ea      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008990:	e1e7      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008992:	4b7b      	ldr	r3, [pc, #492]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800899a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800899e:	d107      	bne.n	80089b0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089a0:	f107 030c 	add.w	r3, r7, #12
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fb55 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ae:	e1d8      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b4:	e1d5      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80089b6:	4b72      	ldr	r3, [pc, #456]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0304 	and.w	r3, r3, #4
 80089be:	2b04      	cmp	r3, #4
 80089c0:	d109      	bne.n	80089d6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80089c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	08db      	lsrs	r3, r3, #3
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	4a6d      	ldr	r2, [pc, #436]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80089ce:	fa22 f303 	lsr.w	r3, r2, r3
 80089d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089d4:	e1c5      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089da:	e1c2      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80089dc:	4b68      	ldr	r3, [pc, #416]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089e8:	d102      	bne.n	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80089ea:	4b67      	ldr	r3, [pc, #412]	@ (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80089ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ee:	e1b8      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f4:	e1b5      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089f6:	4b62      	ldr	r3, [pc, #392]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a02:	d102      	bne.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8008a04:	4b61      	ldr	r3, [pc, #388]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a08:	e1ab      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a0e:	e1a8      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a14:	e1a5      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a1a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008a1e:	430b      	orrs	r3, r1
 8008a20:	d173      	bne.n	8008b0a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008a22:	4b57      	ldr	r3, [pc, #348]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a2a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a32:	d02f      	beq.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8008a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a3a:	d863      	bhi.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d004      	beq.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a48:	d012      	beq.n	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008a4a:	e05b      	b.n	8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a4c:	4b4c      	ldr	r3, [pc, #304]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a58:	d107      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a5a:	f107 0318 	add.w	r3, r7, #24
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 f9a4 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a68:	e17b      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a6e:	e178      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a70:	4b43      	ldr	r3, [pc, #268]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a7c:	d107      	bne.n	8008a8e <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a7e:	f107 030c 	add.w	r3, r7, #12
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fae6 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a8c:	e169      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a92:	e166      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a94:	4b3a      	ldr	r3, [pc, #232]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a9c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a9e:	4b38      	ldr	r3, [pc, #224]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f003 0304 	and.w	r3, r3, #4
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8008aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d109      	bne.n	8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ab0:	4b33      	ldr	r3, [pc, #204]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	08db      	lsrs	r3, r3, #3
 8008ab6:	f003 0303 	and.w	r3, r3, #3
 8008aba:	4a32      	ldr	r2, [pc, #200]	@ (8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ac2:	e01e      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ac4:	4b2e      	ldr	r3, [pc, #184]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ad0:	d106      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8008ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ada:	4b2b      	ldr	r3, [pc, #172]	@ (8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ade:	e010      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ae0:	4b27      	ldr	r3, [pc, #156]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008aec:	d106      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008af4:	d102      	bne.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008af6:	4b25      	ldr	r3, [pc, #148]	@ (8008b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008afa:	e002      	b.n	8008b02 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008afc:	2300      	movs	r3, #0
 8008afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008b00:	e12f      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008b02:	e12e      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b08:	e12b      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b0e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008b12:	430b      	orrs	r3, r1
 8008b14:	d13c      	bne.n	8008b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008b16:	4b1a      	ldr	r3, [pc, #104]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b1e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b2c:	d012      	beq.n	8008b54 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8008b2e:	e023      	b.n	8008b78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b30:	4b13      	ldr	r3, [pc, #76]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b3c:	d107      	bne.n	8008b4e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 fbda 	bl	80092fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b4c:	e109      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b52:	e106      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b54:	4b0a      	ldr	r3, [pc, #40]	@ (8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b60:	d107      	bne.n	8008b72 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b62:	f107 0318 	add.w	r3, r7, #24
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f920 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b70:	e0f7      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b76:	e0f4      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b7c:	e0f1      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008b7e:	bf00      	nop
 8008b80:	58024400 	.word	0x58024400
 8008b84:	03d09000 	.word	0x03d09000
 8008b88:	003d0900 	.word	0x003d0900
 8008b8c:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008b90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b94:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008b98:	430b      	orrs	r3, r1
 8008b9a:	f040 8091 	bne.w	8008cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008b9e:	4b73      	ldr	r3, [pc, #460]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008ba6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008baa:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008bae:	f000 8081 	beq.w	8008cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb4:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008bb8:	d87f      	bhi.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bc0:	d06b      	beq.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bc8:	d877      	bhi.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd0:	d056      	beq.n	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd8:	d86f      	bhi.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008be0:	d03b      	beq.n	8008c5a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008be8:	d867      	bhi.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bf0:	d021      	beq.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bf8:	d85f      	bhi.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d004      	beq.n	8008c0a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c06:	d004      	beq.n	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008c08:	e057      	b.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008c0a:	f000 f8b9 	bl	8008d80 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c10:	e0a7      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c12:	4b56      	ldr	r3, [pc, #344]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c1e:	d107      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c20:	f107 0318 	add.w	r3, r7, #24
 8008c24:	4618      	mov	r0, r3
 8008c26:	f000 f8c1 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c2e:	e098      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c34:	e095      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008c36:	4b4d      	ldr	r3, [pc, #308]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c42:	d107      	bne.n	8008c54 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c44:	f107 030c 	add.w	r3, r7, #12
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f000 fa03 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c52:	e086      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c58:	e083      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008c5a:	4b44      	ldr	r3, [pc, #272]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0304 	and.w	r3, r3, #4
 8008c62:	2b04      	cmp	r3, #4
 8008c64:	d109      	bne.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c66:	4b41      	ldr	r3, [pc, #260]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	08db      	lsrs	r3, r3, #3
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	4a3f      	ldr	r2, [pc, #252]	@ (8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008c72:	fa22 f303 	lsr.w	r3, r2, r3
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c78:	e073      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c7e:	e070      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008c80:	4b3a      	ldr	r3, [pc, #232]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c8c:	d102      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8008c8e:	4b39      	ldr	r3, [pc, #228]	@ (8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c92:	e066      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c98:	e063      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008c9a:	4b34      	ldr	r3, [pc, #208]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ca6:	d102      	bne.n	8008cae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008ca8:	4b33      	ldr	r3, [pc, #204]	@ (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cac:	e059      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb2:	e056      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008cb4:	4b31      	ldr	r3, [pc, #196]	@ (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cb8:	e053      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cbe:	e050      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cc4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	d148      	bne.n	8008d5e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ccc:	4b27      	ldr	r3, [pc, #156]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cd0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008cd4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cdc:	d02a      	beq.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ce4:	d838      	bhi.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d004      	beq.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8008cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cf2:	d00d      	beq.n	8008d10 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8008cf4:	e030      	b.n	8008d58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d02:	d102      	bne.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8008d04:	4b1c      	ldr	r3, [pc, #112]	@ (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d08:	e02b      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d0e:	e028      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008d10:	4b16      	ldr	r3, [pc, #88]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d1c:	d107      	bne.n	8008d2e <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 faea 	bl	80092fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d2c:	e019      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d32:	e016      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d34:	4b0d      	ldr	r3, [pc, #52]	@ (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d40:	d107      	bne.n	8008d52 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d42:	f107 0318 	add.w	r3, r7, #24
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 f830 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d50:	e007      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d52:	2300      	movs	r3, #0
 8008d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d56:	e004      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d5c:	e001      	b.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3740      	adds	r7, #64	@ 0x40
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	58024400 	.word	0x58024400
 8008d70:	03d09000 	.word	0x03d09000
 8008d74:	003d0900 	.word	0x003d0900
 8008d78:	007a1200 	.word	0x007a1200
 8008d7c:	00bb8000 	.word	0x00bb8000

08008d80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8008d84:	f7fe f90a 	bl	8006f9c <HAL_RCC_GetHCLKFreq>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	4b06      	ldr	r3, [pc, #24]	@ (8008da4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	091b      	lsrs	r3, r3, #4
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	4904      	ldr	r1, [pc, #16]	@ (8008da8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008d96:	5ccb      	ldrb	r3, [r1, r3]
 8008d98:	f003 031f 	and.w	r3, r3, #31
 8008d9c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	58024400 	.word	0x58024400
 8008da8:	0800b5b4 	.word	0x0800b5b4

08008dac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b089      	sub	sp, #36	@ 0x24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008db4:	4ba1      	ldr	r3, [pc, #644]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008db8:	f003 0303 	and.w	r3, r3, #3
 8008dbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008dbe:	4b9f      	ldr	r3, [pc, #636]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc2:	0b1b      	lsrs	r3, r3, #12
 8008dc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008dca:	4b9c      	ldr	r3, [pc, #624]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dce:	091b      	lsrs	r3, r3, #4
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008dd6:	4b99      	ldr	r3, [pc, #612]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dda:	08db      	lsrs	r3, r3, #3
 8008ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	fb02 f303 	mul.w	r3, r2, r3
 8008de6:	ee07 3a90 	vmov	s15, r3
 8008dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8111 	beq.w	800901c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	f000 8083 	beq.w	8008f08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	f200 80a1 	bhi.w	8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d003      	beq.n	8008e18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008e10:	69bb      	ldr	r3, [r7, #24]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d056      	beq.n	8008ec4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008e16:	e099      	b.n	8008f4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e18:	4b88      	ldr	r3, [pc, #544]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0320 	and.w	r3, r3, #32
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d02d      	beq.n	8008e80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e24:	4b85      	ldr	r3, [pc, #532]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	08db      	lsrs	r3, r3, #3
 8008e2a:	f003 0303 	and.w	r3, r3, #3
 8008e2e:	4a84      	ldr	r2, [pc, #528]	@ (8009040 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008e30:	fa22 f303 	lsr.w	r3, r2, r3
 8008e34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	ee07 3a90 	vmov	s15, r3
 8008e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4e:	4b7b      	ldr	r3, [pc, #492]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008e7e:	e087      	b.n	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009048 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e92:	4b6a      	ldr	r3, [pc, #424]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec2:	e065      	b.n	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800904c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed6:	4b59      	ldr	r3, [pc, #356]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f06:	e043      	b.n	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	ee07 3a90 	vmov	s15, r3
 8008f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009050 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f1a:	4b48      	ldr	r3, [pc, #288]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f4a:	e021      	b.n	8008f90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800904c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f5e:	4b37      	ldr	r3, [pc, #220]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f66:	ee07 3a90 	vmov	s15, r3
 8008f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009044 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008f90:	4b2a      	ldr	r3, [pc, #168]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f94:	0a5b      	lsrs	r3, r3, #9
 8008f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb6:	ee17 2a90 	vmov	r2, s15
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fc2:	0c1b      	lsrs	r3, r3, #16
 8008fc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fc8:	ee07 3a90 	vmov	s15, r3
 8008fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fe4:	ee17 2a90 	vmov	r2, s15
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008fec:	4b13      	ldr	r3, [pc, #76]	@ (800903c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff0:	0e1b      	lsrs	r3, r3, #24
 8008ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ff6:	ee07 3a90 	vmov	s15, r3
 8008ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ffe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009006:	edd7 6a07 	vldr	s13, [r7, #28]
 800900a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800900e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009012:	ee17 2a90 	vmov	r2, s15
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800901a:	e008      	b.n	800902e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	609a      	str	r2, [r3, #8]
}
 800902e:	bf00      	nop
 8009030:	3724      	adds	r7, #36	@ 0x24
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	58024400 	.word	0x58024400
 8009040:	03d09000 	.word	0x03d09000
 8009044:	46000000 	.word	0x46000000
 8009048:	4c742400 	.word	0x4c742400
 800904c:	4a742400 	.word	0x4a742400
 8009050:	4af42400 	.word	0x4af42400

08009054 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009054:	b480      	push	{r7}
 8009056:	b089      	sub	sp, #36	@ 0x24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800905c:	4ba1      	ldr	r3, [pc, #644]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800905e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009060:	f003 0303 	and.w	r3, r3, #3
 8009064:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009066:	4b9f      	ldr	r3, [pc, #636]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906a:	0d1b      	lsrs	r3, r3, #20
 800906c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009070:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009072:	4b9c      	ldr	r3, [pc, #624]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009076:	0a1b      	lsrs	r3, r3, #8
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800907e:	4b99      	ldr	r3, [pc, #612]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009082:	08db      	lsrs	r3, r3, #3
 8009084:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	fb02 f303 	mul.w	r3, r2, r3
 800908e:	ee07 3a90 	vmov	s15, r3
 8009092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009096:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 8111 	beq.w	80092c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	2b02      	cmp	r3, #2
 80090a6:	f000 8083 	beq.w	80091b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	f200 80a1 	bhi.w	80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d003      	beq.n	80090c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d056      	beq.n	800916c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80090be:	e099      	b.n	80091f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090c0:	4b88      	ldr	r3, [pc, #544]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02d      	beq.n	8009128 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090cc:	4b85      	ldr	r3, [pc, #532]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	08db      	lsrs	r3, r3, #3
 80090d2:	f003 0303 	and.w	r3, r3, #3
 80090d6:	4a84      	ldr	r2, [pc, #528]	@ (80092e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80090d8:	fa22 f303 	lsr.w	r3, r2, r3
 80090dc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	ee07 3a90 	vmov	s15, r3
 80090e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	ee07 3a90 	vmov	s15, r3
 80090ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f6:	4b7b      	ldr	r3, [pc, #492]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fe:	ee07 3a90 	vmov	s15, r3
 8009102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009106:	ed97 6a03 	vldr	s12, [r7, #12]
 800910a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80092ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800910e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800911a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009122:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009126:	e087      	b.n	8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009132:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80092f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800913a:	4b6a      	ldr	r3, [pc, #424]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800913c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800913e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009142:	ee07 3a90 	vmov	s15, r3
 8009146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800914a:	ed97 6a03 	vldr	s12, [r7, #12]
 800914e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80092ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800915a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800915e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800916a:	e065      	b.n	8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	ee07 3a90 	vmov	s15, r3
 8009172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009176:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800917a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917e:	4b59      	ldr	r3, [pc, #356]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009186:	ee07 3a90 	vmov	s15, r3
 800918a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009192:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80092ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800919a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ae:	e043      	b.n	8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80092f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80091be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c2:	4b48      	ldr	r3, [pc, #288]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80091d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80092ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80091da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091f2:	e021      	b.n	8009238 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	ee07 3a90 	vmov	s15, r3
 80091fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80092f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009206:	4b37      	ldr	r3, [pc, #220]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009216:	ed97 6a03 	vldr	s12, [r7, #12]
 800921a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80092ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800921e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800922a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009236:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009238:	4b2a      	ldr	r3, [pc, #168]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800923a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923c:	0a5b      	lsrs	r3, r3, #9
 800923e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009242:	ee07 3a90 	vmov	s15, r3
 8009246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800924e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009252:	edd7 6a07 	vldr	s13, [r7, #28]
 8009256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800925a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800925e:	ee17 2a90 	vmov	r2, s15
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009266:	4b1f      	ldr	r3, [pc, #124]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800926a:	0c1b      	lsrs	r3, r3, #16
 800926c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009270:	ee07 3a90 	vmov	s15, r3
 8009274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009278:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800927c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009280:	edd7 6a07 	vldr	s13, [r7, #28]
 8009284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800928c:	ee17 2a90 	vmov	r2, s15
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009294:	4b13      	ldr	r3, [pc, #76]	@ (80092e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009298:	0e1b      	lsrs	r3, r3, #24
 800929a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800929e:	ee07 3a90 	vmov	s15, r3
 80092a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80092b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ba:	ee17 2a90 	vmov	r2, s15
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80092c2:	e008      	b.n	80092d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	609a      	str	r2, [r3, #8]
}
 80092d6:	bf00      	nop
 80092d8:	3724      	adds	r7, #36	@ 0x24
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	58024400 	.word	0x58024400
 80092e8:	03d09000 	.word	0x03d09000
 80092ec:	46000000 	.word	0x46000000
 80092f0:	4c742400 	.word	0x4c742400
 80092f4:	4a742400 	.word	0x4a742400
 80092f8:	4af42400 	.word	0x4af42400

080092fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b089      	sub	sp, #36	@ 0x24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009304:	4ba0      	ldr	r3, [pc, #640]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009308:	f003 0303 	and.w	r3, r3, #3
 800930c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800930e:	4b9e      	ldr	r3, [pc, #632]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009312:	091b      	lsrs	r3, r3, #4
 8009314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009318:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800931a:	4b9b      	ldr	r3, [pc, #620]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800931c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009324:	4b98      	ldr	r3, [pc, #608]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009328:	08db      	lsrs	r3, r3, #3
 800932a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	fb02 f303 	mul.w	r3, r2, r3
 8009334:	ee07 3a90 	vmov	s15, r3
 8009338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800933c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 8111 	beq.w	800956a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009348:	69bb      	ldr	r3, [r7, #24]
 800934a:	2b02      	cmp	r3, #2
 800934c:	f000 8083 	beq.w	8009456 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	2b02      	cmp	r3, #2
 8009354:	f200 80a1 	bhi.w	800949a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009358:	69bb      	ldr	r3, [r7, #24]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d056      	beq.n	8009412 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009364:	e099      	b.n	800949a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009366:	4b88      	ldr	r3, [pc, #544]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0320 	and.w	r3, r3, #32
 800936e:	2b00      	cmp	r3, #0
 8009370:	d02d      	beq.n	80093ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009372:	4b85      	ldr	r3, [pc, #532]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	08db      	lsrs	r3, r3, #3
 8009378:	f003 0303 	and.w	r3, r3, #3
 800937c:	4a83      	ldr	r2, [pc, #524]	@ (800958c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800937e:	fa22 f303 	lsr.w	r3, r2, r3
 8009382:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	ee07 3a90 	vmov	s15, r3
 8009394:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009398:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939c:	4b7a      	ldr	r3, [pc, #488]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800939e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a4:	ee07 3a90 	vmov	s15, r3
 80093a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ac:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093c8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80093cc:	e087      	b.n	80094de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	ee07 3a90 	vmov	s15, r3
 80093d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80093dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e0:	4b69      	ldr	r3, [pc, #420]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80093e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093e8:	ee07 3a90 	vmov	s15, r3
 80093ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f0:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80093f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009400:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009404:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009410:	e065      	b.n	80094de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	ee07 3a90 	vmov	s15, r3
 8009418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009598 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009424:	4b58      	ldr	r3, [pc, #352]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800942c:	ee07 3a90 	vmov	s15, r3
 8009430:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009434:	ed97 6a03 	vldr	s12, [r7, #12]
 8009438:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800943c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009440:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009444:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009448:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800944c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009450:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009454:	e043      	b.n	80094de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	ee07 3a90 	vmov	s15, r3
 800945c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009460:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800959c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009464:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009468:	4b47      	ldr	r3, [pc, #284]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800946a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009470:	ee07 3a90 	vmov	s15, r3
 8009474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009478:	ed97 6a03 	vldr	s12, [r7, #12]
 800947c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009480:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009484:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009488:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800948c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009494:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009498:	e021      	b.n	80094de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	ee07 3a90 	vmov	s15, r3
 80094a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094a4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009594 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80094a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ac:	4b36      	ldr	r3, [pc, #216]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b4:	ee07 3a90 	vmov	s15, r3
 80094b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80094c0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009590 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80094c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80094de:	4b2a      	ldr	r3, [pc, #168]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80094e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e2:	0a5b      	lsrs	r3, r3, #9
 80094e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094e8:	ee07 3a90 	vmov	s15, r3
 80094ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80094fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009504:	ee17 2a90 	vmov	r2, s15
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800950c:	4b1e      	ldr	r3, [pc, #120]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800950e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009510:	0c1b      	lsrs	r3, r3, #16
 8009512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009516:	ee07 3a90 	vmov	s15, r3
 800951a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800951e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009522:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009526:	edd7 6a07 	vldr	s13, [r7, #28]
 800952a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800952e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009532:	ee17 2a90 	vmov	r2, s15
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800953a:	4b13      	ldr	r3, [pc, #76]	@ (8009588 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800953c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800953e:	0e1b      	lsrs	r3, r3, #24
 8009540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009544:	ee07 3a90 	vmov	s15, r3
 8009548:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009550:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009554:	edd7 6a07 	vldr	s13, [r7, #28]
 8009558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800955c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009560:	ee17 2a90 	vmov	r2, s15
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009568:	e008      	b.n	800957c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	609a      	str	r2, [r3, #8]
}
 800957c:	bf00      	nop
 800957e:	3724      	adds	r7, #36	@ 0x24
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr
 8009588:	58024400 	.word	0x58024400
 800958c:	03d09000 	.word	0x03d09000
 8009590:	46000000 	.word	0x46000000
 8009594:	4c742400 	.word	0x4c742400
 8009598:	4a742400 	.word	0x4a742400
 800959c:	4af42400 	.word	0x4af42400

080095a0 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b084      	sub	sp, #16
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80095a8:	4b26      	ldr	r3, [pc, #152]	@ (8009644 <HAL_RCCEx_CRSConfig+0xa4>)
 80095aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095ae:	4a25      	ldr	r2, [pc, #148]	@ (8009644 <HAL_RCCEx_CRSConfig+0xa4>)
 80095b0:	f043 0302 	orr.w	r3, r3, #2
 80095b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 80095b8:	4b22      	ldr	r3, [pc, #136]	@ (8009644 <HAL_RCCEx_CRSConfig+0xa4>)
 80095ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095be:	4a21      	ldr	r2, [pc, #132]	@ (8009644 <HAL_RCCEx_CRSConfig+0xa4>)
 80095c0:	f023 0302 	bic.w	r3, r3, #2
 80095c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80095c8:	f7f7 fdfa 	bl	80011c0 <HAL_GetREVID>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d80b      	bhi.n	80095ee <HAL_RCCEx_CRSConfig+0x4e>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095de:	d106      	bne.n	80095ee <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
 80095ec:	e008      	b.n	8009600 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	4313      	orrs	r3, r2
 8009608:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	691b      	ldr	r3, [r3, #16]
 800960e:	041b      	lsls	r3, r3, #16
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	4313      	orrs	r3, r2
 8009614:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8009616:	4a0c      	ldr	r2, [pc, #48]	@ (8009648 <HAL_RCCEx_CRSConfig+0xa8>)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800961c:	4b0a      	ldr	r3, [pc, #40]	@ (8009648 <HAL_RCCEx_CRSConfig+0xa8>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	4907      	ldr	r1, [pc, #28]	@ (8009648 <HAL_RCCEx_CRSConfig+0xa8>)
 800962c:	4313      	orrs	r3, r2
 800962e:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009630:	4b05      	ldr	r3, [pc, #20]	@ (8009648 <HAL_RCCEx_CRSConfig+0xa8>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a04      	ldr	r2, [pc, #16]	@ (8009648 <HAL_RCCEx_CRSConfig+0xa8>)
 8009636:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800963a:	6013      	str	r3, [r2, #0]
}
 800963c:	bf00      	nop
 800963e:	3710      	adds	r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	58024400 	.word	0x58024400
 8009648:	40008400 	.word	0x40008400

0800964c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800965a:	4b53      	ldr	r3, [pc, #332]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 800965c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	2b03      	cmp	r3, #3
 8009664:	d101      	bne.n	800966a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e099      	b.n	800979e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800966a:	4b4f      	ldr	r3, [pc, #316]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a4e      	ldr	r2, [pc, #312]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009670:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009676:	f7f7 fd97 	bl	80011a8 <HAL_GetTick>
 800967a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800967c:	e008      	b.n	8009690 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800967e:	f7f7 fd93 	bl	80011a8 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	2b02      	cmp	r3, #2
 800968a:	d901      	bls.n	8009690 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e086      	b.n	800979e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009690:	4b45      	ldr	r3, [pc, #276]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1f0      	bne.n	800967e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800969c:	4b42      	ldr	r3, [pc, #264]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 800969e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	031b      	lsls	r3, r3, #12
 80096aa:	493f      	ldr	r1, [pc, #252]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 80096ac:	4313      	orrs	r3, r2
 80096ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	3b01      	subs	r3, #1
 80096b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	3b01      	subs	r3, #1
 80096c0:	025b      	lsls	r3, r3, #9
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	431a      	orrs	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	041b      	lsls	r3, r3, #16
 80096ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	3b01      	subs	r3, #1
 80096da:	061b      	lsls	r3, r3, #24
 80096dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80096e0:	4931      	ldr	r1, [pc, #196]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80096e6:	4b30      	ldr	r3, [pc, #192]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 80096e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	492d      	ldr	r1, [pc, #180]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 80096f4:	4313      	orrs	r3, r2
 80096f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80096f8:	4b2b      	ldr	r3, [pc, #172]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 80096fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096fc:	f023 0220 	bic.w	r2, r3, #32
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	4928      	ldr	r1, [pc, #160]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009706:	4313      	orrs	r3, r2
 8009708:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800970a:	4b27      	ldr	r3, [pc, #156]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 800970c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800970e:	4a26      	ldr	r2, [pc, #152]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009710:	f023 0310 	bic.w	r3, r3, #16
 8009714:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009716:	4b24      	ldr	r3, [pc, #144]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800971a:	4b24      	ldr	r3, [pc, #144]	@ (80097ac <RCCEx_PLL2_Config+0x160>)
 800971c:	4013      	ands	r3, r2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	69d2      	ldr	r2, [r2, #28]
 8009722:	00d2      	lsls	r2, r2, #3
 8009724:	4920      	ldr	r1, [pc, #128]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009726:	4313      	orrs	r3, r2
 8009728:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800972a:	4b1f      	ldr	r3, [pc, #124]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 800972c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800972e:	4a1e      	ldr	r2, [pc, #120]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009730:	f043 0310 	orr.w	r3, r3, #16
 8009734:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d106      	bne.n	800974a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800973c:	4b1a      	ldr	r3, [pc, #104]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 800973e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009740:	4a19      	ldr	r2, [pc, #100]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009742:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009746:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009748:	e00f      	b.n	800976a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d106      	bne.n	800975e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009750:	4b15      	ldr	r3, [pc, #84]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009754:	4a14      	ldr	r2, [pc, #80]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800975a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800975c:	e005      	b.n	800976a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800975e:	4b12      	ldr	r3, [pc, #72]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009762:	4a11      	ldr	r2, [pc, #68]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009768:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800976a:	4b0f      	ldr	r3, [pc, #60]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a0e      	ldr	r2, [pc, #56]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009770:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009776:	f7f7 fd17 	bl	80011a8 <HAL_GetTick>
 800977a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800977c:	e008      	b.n	8009790 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800977e:	f7f7 fd13 	bl	80011a8 <HAL_GetTick>
 8009782:	4602      	mov	r2, r0
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	1ad3      	subs	r3, r2, r3
 8009788:	2b02      	cmp	r3, #2
 800978a:	d901      	bls.n	8009790 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800978c:	2303      	movs	r3, #3
 800978e:	e006      	b.n	800979e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009790:	4b05      	ldr	r3, [pc, #20]	@ (80097a8 <RCCEx_PLL2_Config+0x15c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d0f0      	beq.n	800977e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	58024400 	.word	0x58024400
 80097ac:	ffff0007 	.word	0xffff0007

080097b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097be:	4b53      	ldr	r3, [pc, #332]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80097c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d101      	bne.n	80097ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e099      	b.n	8009902 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80097ce:	4b4f      	ldr	r3, [pc, #316]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a4e      	ldr	r2, [pc, #312]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80097d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097da:	f7f7 fce5 	bl	80011a8 <HAL_GetTick>
 80097de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80097e0:	e008      	b.n	80097f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80097e2:	f7f7 fce1 	bl	80011a8 <HAL_GetTick>
 80097e6:	4602      	mov	r2, r0
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	1ad3      	subs	r3, r2, r3
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d901      	bls.n	80097f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80097f0:	2303      	movs	r3, #3
 80097f2:	e086      	b.n	8009902 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80097f4:	4b45      	ldr	r3, [pc, #276]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1f0      	bne.n	80097e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009800:	4b42      	ldr	r3, [pc, #264]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 8009802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009804:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	051b      	lsls	r3, r3, #20
 800980e:	493f      	ldr	r1, [pc, #252]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 8009810:	4313      	orrs	r3, r2
 8009812:	628b      	str	r3, [r1, #40]	@ 0x28
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	3b01      	subs	r3, #1
 800981a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	689b      	ldr	r3, [r3, #8]
 8009822:	3b01      	subs	r3, #1
 8009824:	025b      	lsls	r3, r3, #9
 8009826:	b29b      	uxth	r3, r3
 8009828:	431a      	orrs	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68db      	ldr	r3, [r3, #12]
 800982e:	3b01      	subs	r3, #1
 8009830:	041b      	lsls	r3, r3, #16
 8009832:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009836:	431a      	orrs	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	3b01      	subs	r3, #1
 800983e:	061b      	lsls	r3, r3, #24
 8009840:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009844:	4931      	ldr	r1, [pc, #196]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 8009846:	4313      	orrs	r3, r2
 8009848:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800984a:	4b30      	ldr	r3, [pc, #192]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 800984c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800984e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	695b      	ldr	r3, [r3, #20]
 8009856:	492d      	ldr	r1, [pc, #180]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 8009858:	4313      	orrs	r3, r2
 800985a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800985c:	4b2b      	ldr	r3, [pc, #172]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 800985e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009860:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	4928      	ldr	r1, [pc, #160]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 800986a:	4313      	orrs	r3, r2
 800986c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800986e:	4b27      	ldr	r3, [pc, #156]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 8009870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009872:	4a26      	ldr	r2, [pc, #152]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 8009874:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009878:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800987a:	4b24      	ldr	r3, [pc, #144]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 800987c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800987e:	4b24      	ldr	r3, [pc, #144]	@ (8009910 <RCCEx_PLL3_Config+0x160>)
 8009880:	4013      	ands	r3, r2
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	69d2      	ldr	r2, [r2, #28]
 8009886:	00d2      	lsls	r2, r2, #3
 8009888:	4920      	ldr	r1, [pc, #128]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 800988a:	4313      	orrs	r3, r2
 800988c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800988e:	4b1f      	ldr	r3, [pc, #124]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 8009890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009892:	4a1e      	ldr	r2, [pc, #120]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 8009894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009898:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d106      	bne.n	80098ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80098a0:	4b1a      	ldr	r3, [pc, #104]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80098a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098a4:	4a19      	ldr	r2, [pc, #100]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80098a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80098aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098ac:	e00f      	b.n	80098ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d106      	bne.n	80098c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80098b4:	4b15      	ldr	r3, [pc, #84]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80098b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b8:	4a14      	ldr	r2, [pc, #80]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80098ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80098be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098c0:	e005      	b.n	80098ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80098c2:	4b12      	ldr	r3, [pc, #72]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80098c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c6:	4a11      	ldr	r2, [pc, #68]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80098c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80098cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80098ce:	4b0f      	ldr	r3, [pc, #60]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a0e      	ldr	r2, [pc, #56]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80098d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098da:	f7f7 fc65 	bl	80011a8 <HAL_GetTick>
 80098de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80098e0:	e008      	b.n	80098f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80098e2:	f7f7 fc61 	bl	80011a8 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d901      	bls.n	80098f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e006      	b.n	8009902 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80098f4:	4b05      	ldr	r3, [pc, #20]	@ (800990c <RCCEx_PLL3_Config+0x15c>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d0f0      	beq.n	80098e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009900:	7bfb      	ldrb	r3, [r7, #15]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	58024400 	.word	0x58024400
 8009910:	ffff0007 	.word	0xffff0007

08009914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e042      	b.n	80099ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992c:	2b00      	cmp	r3, #0
 800992e:	d106      	bne.n	800993e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7f7 fa57 	bl	8000dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2224      	movs	r2, #36	@ 0x24
 8009942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f022 0201 	bic.w	r2, r2, #1
 8009954:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 fa6e 	bl	800ae40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fbff 	bl	800a168 <UART_SetConfig>
 800996a:	4603      	mov	r3, r0
 800996c:	2b01      	cmp	r3, #1
 800996e:	d101      	bne.n	8009974 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e01b      	b.n	80099ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009982:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009992:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f042 0201 	orr.w	r2, r2, #1
 80099a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 faed 	bl	800af84 <UART_CheckIdleState>
 80099aa:	4603      	mov	r3, r0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b0ba      	sub	sp, #232	@ 0xe8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80099da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80099de:	f640 030f 	movw	r3, #2063	@ 0x80f
 80099e2:	4013      	ands	r3, r2
 80099e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80099e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d11b      	bne.n	8009a28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099f4:	f003 0320 	and.w	r3, r3, #32
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d015      	beq.n	8009a28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a00:	f003 0320 	and.w	r3, r3, #32
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d105      	bne.n	8009a14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d009      	beq.n	8009a28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 8377 	beq.w	800a10c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
      }
      return;
 8009a26:	e371      	b.n	800a10c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	f000 8123 	beq.w	8009c78 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a36:	4b8d      	ldr	r3, [pc, #564]	@ (8009c6c <HAL_UART_IRQHandler+0x2b8>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d106      	bne.n	8009a4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009a42:	4b8b      	ldr	r3, [pc, #556]	@ (8009c70 <HAL_UART_IRQHandler+0x2bc>)
 8009a44:	4013      	ands	r3, r2
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	f000 8116 	beq.w	8009c78 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d011      	beq.n	8009a7c <HAL_UART_IRQHandler+0xc8>
 8009a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00b      	beq.n	8009a7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a72:	f043 0201 	orr.w	r2, r3, #1
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a80:	f003 0302 	and.w	r3, r3, #2
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d011      	beq.n	8009aac <HAL_UART_IRQHandler+0xf8>
 8009a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00b      	beq.n	8009aac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2202      	movs	r2, #2
 8009a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa2:	f043 0204 	orr.w	r2, r3, #4
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ab0:	f003 0304 	and.w	r3, r3, #4
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d011      	beq.n	8009adc <HAL_UART_IRQHandler+0x128>
 8009ab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009abc:	f003 0301 	and.w	r3, r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00b      	beq.n	8009adc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2204      	movs	r2, #4
 8009aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad2:	f043 0202 	orr.w	r2, r3, #2
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ae0:	f003 0308 	and.w	r3, r3, #8
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d017      	beq.n	8009b18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d105      	bne.n	8009b00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009af4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009af8:	4b5c      	ldr	r3, [pc, #368]	@ (8009c6c <HAL_UART_IRQHandler+0x2b8>)
 8009afa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d00b      	beq.n	8009b18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2208      	movs	r2, #8
 8009b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b0e:	f043 0208 	orr.w	r2, r3, #8
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d012      	beq.n	8009b4a <HAL_UART_IRQHandler+0x196>
 8009b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00c      	beq.n	8009b4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b40:	f043 0220 	orr.w	r2, r3, #32
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 82dd 	beq.w	800a110 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b5a:	f003 0320 	and.w	r3, r3, #32
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d013      	beq.n	8009b8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b66:	f003 0320 	and.w	r3, r3, #32
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d105      	bne.n	8009b7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d007      	beq.n	8009b8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b9e:	2b40      	cmp	r3, #64	@ 0x40
 8009ba0:	d005      	beq.n	8009bae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ba2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009ba6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d054      	beq.n	8009c58 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f001 fb00 	bl	800b1b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	689b      	ldr	r3, [r3, #8]
 8009bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bbe:	2b40      	cmp	r3, #64	@ 0x40
 8009bc0:	d146      	bne.n	8009c50 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009bdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	3308      	adds	r3, #8
 8009bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009bee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1d9      	bne.n	8009bc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d017      	beq.n	8009c48 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c1e:	4a15      	ldr	r2, [pc, #84]	@ (8009c74 <HAL_UART_IRQHandler+0x2c0>)
 8009c20:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7fa fa09 	bl	8004040 <HAL_DMA_Abort_IT>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d019      	beq.n	8009c68 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009c42:	4610      	mov	r0, r2
 8009c44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c46:	e00f      	b.n	8009c68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fa77 	bl	800a13c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c4e:	e00b      	b.n	8009c68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fa73 	bl	800a13c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c56:	e007      	b.n	8009c68 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fa6f 	bl	800a13c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009c66:	e253      	b.n	800a110 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c68:	bf00      	nop
    return;
 8009c6a:	e251      	b.n	800a110 <HAL_UART_IRQHandler+0x75c>
 8009c6c:	10000001 	.word	0x10000001
 8009c70:	04000120 	.word	0x04000120
 8009c74:	0800b281 	.word	0x0800b281

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	f040 81e7 	bne.w	800a050 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c86:	f003 0310 	and.w	r3, r3, #16
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 81e0 	beq.w	800a050 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c94:	f003 0310 	and.w	r3, r3, #16
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	f000 81d9 	beq.w	800a050 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2210      	movs	r2, #16
 8009ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb0:	2b40      	cmp	r3, #64	@ 0x40
 8009cb2:	f040 8151 	bne.w	8009f58 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a96      	ldr	r2, [pc, #600]	@ (8009f18 <HAL_UART_IRQHandler+0x564>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d068      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a93      	ldr	r2, [pc, #588]	@ (8009f1c <HAL_UART_IRQHandler+0x568>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d061      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a91      	ldr	r2, [pc, #580]	@ (8009f20 <HAL_UART_IRQHandler+0x56c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d05a      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a8e      	ldr	r2, [pc, #568]	@ (8009f24 <HAL_UART_IRQHandler+0x570>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d053      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a8c      	ldr	r2, [pc, #560]	@ (8009f28 <HAL_UART_IRQHandler+0x574>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d04c      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a89      	ldr	r2, [pc, #548]	@ (8009f2c <HAL_UART_IRQHandler+0x578>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d045      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a87      	ldr	r2, [pc, #540]	@ (8009f30 <HAL_UART_IRQHandler+0x57c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d03e      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a84      	ldr	r2, [pc, #528]	@ (8009f34 <HAL_UART_IRQHandler+0x580>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d037      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a82      	ldr	r2, [pc, #520]	@ (8009f38 <HAL_UART_IRQHandler+0x584>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d030      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a7f      	ldr	r2, [pc, #508]	@ (8009f3c <HAL_UART_IRQHandler+0x588>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d029      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8009f40 <HAL_UART_IRQHandler+0x58c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d022      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a7a      	ldr	r2, [pc, #488]	@ (8009f44 <HAL_UART_IRQHandler+0x590>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d01b      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4a78      	ldr	r2, [pc, #480]	@ (8009f48 <HAL_UART_IRQHandler+0x594>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d014      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a75      	ldr	r2, [pc, #468]	@ (8009f4c <HAL_UART_IRQHandler+0x598>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00d      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a73      	ldr	r2, [pc, #460]	@ (8009f50 <HAL_UART_IRQHandler+0x59c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d006      	beq.n	8009d96 <HAL_UART_IRQHandler+0x3e2>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a70      	ldr	r2, [pc, #448]	@ (8009f54 <HAL_UART_IRQHandler+0x5a0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d106      	bne.n	8009da4 <HAL_UART_IRQHandler+0x3f0>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	e005      	b.n	8009db0 <HAL_UART_IRQHandler+0x3fc>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009db4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 81ab 	beq.w	800a114 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009dc4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	f080 81a3 	bcs.w	800a114 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009dd4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009de4:	f000 8087 	beq.w	8009ef6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e16:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e22:	e841 2300 	strex	r3, r2, [r1]
 8009e26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1da      	bne.n	8009de8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3308      	adds	r3, #8
 8009e38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e44:	f023 0301 	bic.w	r3, r3, #1
 8009e48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3308      	adds	r3, #8
 8009e52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009e56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009e5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009e62:	e841 2300 	strex	r3, r2, [r1]
 8009e66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d1e1      	bne.n	8009e32 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3308      	adds	r3, #8
 8009e8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009e92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009e94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009e98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009e9a:	e841 2300 	strex	r3, r2, [r1]
 8009e9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ea0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e3      	bne.n	8009e6e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ebc:	e853 3f00 	ldrex	r3, [r3]
 8009ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ec4:	f023 0310 	bic.w	r3, r3, #16
 8009ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009ed6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ed8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009edc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ede:	e841 2300 	strex	r3, r2, [r1]
 8009ee2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009ee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1e4      	bne.n	8009eb4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7f9 fd87 	bl	8003a04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2202      	movs	r2, #2
 8009efa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	1ad3      	subs	r3, r2, r3
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	4619      	mov	r1, r3
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f91d 	bl	800a150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f16:	e0fd      	b.n	800a114 <HAL_UART_IRQHandler+0x760>
 8009f18:	40020010 	.word	0x40020010
 8009f1c:	40020028 	.word	0x40020028
 8009f20:	40020040 	.word	0x40020040
 8009f24:	40020058 	.word	0x40020058
 8009f28:	40020070 	.word	0x40020070
 8009f2c:	40020088 	.word	0x40020088
 8009f30:	400200a0 	.word	0x400200a0
 8009f34:	400200b8 	.word	0x400200b8
 8009f38:	40020410 	.word	0x40020410
 8009f3c:	40020428 	.word	0x40020428
 8009f40:	40020440 	.word	0x40020440
 8009f44:	40020458 	.word	0x40020458
 8009f48:	40020470 	.word	0x40020470
 8009f4c:	40020488 	.word	0x40020488
 8009f50:	400204a0 	.word	0x400204a0
 8009f54:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	1ad3      	subs	r3, r2, r3
 8009f68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f000 80cf 	beq.w	800a118 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009f7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f000 80ca 	beq.w	800a118 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f8c:	e853 3f00 	ldrex	r3, [r3]
 8009f90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009fa6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fa8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009faa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fae:	e841 2300 	strex	r3, r2, [r1]
 8009fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1e4      	bne.n	8009f84 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	3308      	adds	r3, #8
 8009fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc4:	e853 3f00 	ldrex	r3, [r3]
 8009fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8009fca:	6a3a      	ldr	r2, [r7, #32]
 8009fcc:	4b55      	ldr	r3, [pc, #340]	@ (800a124 <HAL_UART_IRQHandler+0x770>)
 8009fce:	4013      	ands	r3, r2
 8009fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	3308      	adds	r3, #8
 8009fda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009fde:	633a      	str	r2, [r7, #48]	@ 0x30
 8009fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1e3      	bne.n	8009fba <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2220      	movs	r2, #32
 8009ff6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	e853 3f00 	ldrex	r3, [r3]
 800a012:	60fb      	str	r3, [r7, #12]
   return(result);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0310 	bic.w	r3, r3, #16
 800a01a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a028:	61fb      	str	r3, [r7, #28]
 800a02a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02c:	69b9      	ldr	r1, [r7, #24]
 800a02e:	69fa      	ldr	r2, [r7, #28]
 800a030:	e841 2300 	strex	r3, r2, [r1]
 800a034:	617b      	str	r3, [r7, #20]
   return(result);
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1e4      	bne.n	800a006 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2202      	movs	r2, #2
 800a040:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a042:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f881 	bl	800a150 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a04e:	e063      	b.n	800a118 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00e      	beq.n	800a07a <HAL_UART_IRQHandler+0x6c6>
 800a05c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a060:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d008      	beq.n	800a07a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a070:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 f945 	bl	800b302 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a078:	e051      	b.n	800a11e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a07e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a082:	2b00      	cmp	r3, #0
 800a084:	d014      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a08a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d105      	bne.n	800a09e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a096:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d008      	beq.n	800a0b0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d03a      	beq.n	800a11c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	4798      	blx	r3
    }
    return;
 800a0ae:	e035      	b.n	800a11c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d009      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x71c>
 800a0bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f001 f8ef 	bl	800b2ac <UART_EndTransmit_IT>
    return;
 800a0ce:	e026      	b.n	800a11e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x73c>
 800a0dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d003      	beq.n	800a0f0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f001 f91e 	bl	800b32a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0ee:	e016      	b.n	800a11e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d010      	beq.n	800a11e <HAL_UART_IRQHandler+0x76a>
 800a0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a100:	2b00      	cmp	r3, #0
 800a102:	da0c      	bge.n	800a11e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f001 f906 	bl	800b316 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a10a:	e008      	b.n	800a11e <HAL_UART_IRQHandler+0x76a>
      return;
 800a10c:	bf00      	nop
 800a10e:	e006      	b.n	800a11e <HAL_UART_IRQHandler+0x76a>
    return;
 800a110:	bf00      	nop
 800a112:	e004      	b.n	800a11e <HAL_UART_IRQHandler+0x76a>
      return;
 800a114:	bf00      	nop
 800a116:	e002      	b.n	800a11e <HAL_UART_IRQHandler+0x76a>
      return;
 800a118:	bf00      	nop
 800a11a:	e000      	b.n	800a11e <HAL_UART_IRQHandler+0x76a>
    return;
 800a11c:	bf00      	nop
  }
}
 800a11e:	37e8      	adds	r7, #232	@ 0xe8
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}
 800a124:	effffffe 	.word	0xeffffffe

0800a128 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a16c:	b092      	sub	sp, #72	@ 0x48
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	689a      	ldr	r2, [r3, #8]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	431a      	orrs	r2, r3
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	431a      	orrs	r2, r3
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	69db      	ldr	r3, [r3, #28]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	4bbe      	ldr	r3, [pc, #760]	@ (800a490 <UART_SetConfig+0x328>)
 800a198:	4013      	ands	r3, r2
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	6812      	ldr	r2, [r2, #0]
 800a19e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1a0:	430b      	orrs	r3, r1
 800a1a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	68da      	ldr	r2, [r3, #12]
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	699b      	ldr	r3, [r3, #24]
 800a1be:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4ab3      	ldr	r2, [pc, #716]	@ (800a494 <UART_SetConfig+0x32c>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d004      	beq.n	800a1d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	689a      	ldr	r2, [r3, #8]
 800a1da:	4baf      	ldr	r3, [pc, #700]	@ (800a498 <UART_SetConfig+0x330>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	697a      	ldr	r2, [r7, #20]
 800a1e0:	6812      	ldr	r2, [r2, #0]
 800a1e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a1e4:	430b      	orrs	r3, r1
 800a1e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1ee:	f023 010f 	bic.w	r1, r3, #15
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4aa6      	ldr	r2, [pc, #664]	@ (800a49c <UART_SetConfig+0x334>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d177      	bne.n	800a2f8 <UART_SetConfig+0x190>
 800a208:	4ba5      	ldr	r3, [pc, #660]	@ (800a4a0 <UART_SetConfig+0x338>)
 800a20a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a20c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a210:	2b28      	cmp	r3, #40	@ 0x28
 800a212:	d86d      	bhi.n	800a2f0 <UART_SetConfig+0x188>
 800a214:	a201      	add	r2, pc, #4	@ (adr r2, 800a21c <UART_SetConfig+0xb4>)
 800a216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21a:	bf00      	nop
 800a21c:	0800a2c1 	.word	0x0800a2c1
 800a220:	0800a2f1 	.word	0x0800a2f1
 800a224:	0800a2f1 	.word	0x0800a2f1
 800a228:	0800a2f1 	.word	0x0800a2f1
 800a22c:	0800a2f1 	.word	0x0800a2f1
 800a230:	0800a2f1 	.word	0x0800a2f1
 800a234:	0800a2f1 	.word	0x0800a2f1
 800a238:	0800a2f1 	.word	0x0800a2f1
 800a23c:	0800a2c9 	.word	0x0800a2c9
 800a240:	0800a2f1 	.word	0x0800a2f1
 800a244:	0800a2f1 	.word	0x0800a2f1
 800a248:	0800a2f1 	.word	0x0800a2f1
 800a24c:	0800a2f1 	.word	0x0800a2f1
 800a250:	0800a2f1 	.word	0x0800a2f1
 800a254:	0800a2f1 	.word	0x0800a2f1
 800a258:	0800a2f1 	.word	0x0800a2f1
 800a25c:	0800a2d1 	.word	0x0800a2d1
 800a260:	0800a2f1 	.word	0x0800a2f1
 800a264:	0800a2f1 	.word	0x0800a2f1
 800a268:	0800a2f1 	.word	0x0800a2f1
 800a26c:	0800a2f1 	.word	0x0800a2f1
 800a270:	0800a2f1 	.word	0x0800a2f1
 800a274:	0800a2f1 	.word	0x0800a2f1
 800a278:	0800a2f1 	.word	0x0800a2f1
 800a27c:	0800a2d9 	.word	0x0800a2d9
 800a280:	0800a2f1 	.word	0x0800a2f1
 800a284:	0800a2f1 	.word	0x0800a2f1
 800a288:	0800a2f1 	.word	0x0800a2f1
 800a28c:	0800a2f1 	.word	0x0800a2f1
 800a290:	0800a2f1 	.word	0x0800a2f1
 800a294:	0800a2f1 	.word	0x0800a2f1
 800a298:	0800a2f1 	.word	0x0800a2f1
 800a29c:	0800a2e1 	.word	0x0800a2e1
 800a2a0:	0800a2f1 	.word	0x0800a2f1
 800a2a4:	0800a2f1 	.word	0x0800a2f1
 800a2a8:	0800a2f1 	.word	0x0800a2f1
 800a2ac:	0800a2f1 	.word	0x0800a2f1
 800a2b0:	0800a2f1 	.word	0x0800a2f1
 800a2b4:	0800a2f1 	.word	0x0800a2f1
 800a2b8:	0800a2f1 	.word	0x0800a2f1
 800a2bc:	0800a2e9 	.word	0x0800a2e9
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c6:	e326      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a2c8:	2304      	movs	r3, #4
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ce:	e322      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a2d0:	2308      	movs	r3, #8
 800a2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d6:	e31e      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a2d8:	2310      	movs	r3, #16
 800a2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2de:	e31a      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a2e0:	2320      	movs	r3, #32
 800a2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e6:	e316      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a2e8:	2340      	movs	r3, #64	@ 0x40
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ee:	e312      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a2f0:	2380      	movs	r3, #128	@ 0x80
 800a2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2f6:	e30e      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a69      	ldr	r2, [pc, #420]	@ (800a4a4 <UART_SetConfig+0x33c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d130      	bne.n	800a364 <UART_SetConfig+0x1fc>
 800a302:	4b67      	ldr	r3, [pc, #412]	@ (800a4a0 <UART_SetConfig+0x338>)
 800a304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a306:	f003 0307 	and.w	r3, r3, #7
 800a30a:	2b05      	cmp	r3, #5
 800a30c:	d826      	bhi.n	800a35c <UART_SetConfig+0x1f4>
 800a30e:	a201      	add	r2, pc, #4	@ (adr r2, 800a314 <UART_SetConfig+0x1ac>)
 800a310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a314:	0800a32d 	.word	0x0800a32d
 800a318:	0800a335 	.word	0x0800a335
 800a31c:	0800a33d 	.word	0x0800a33d
 800a320:	0800a345 	.word	0x0800a345
 800a324:	0800a34d 	.word	0x0800a34d
 800a328:	0800a355 	.word	0x0800a355
 800a32c:	2300      	movs	r3, #0
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a332:	e2f0      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a334:	2304      	movs	r3, #4
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33a:	e2ec      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a33c:	2308      	movs	r3, #8
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a342:	e2e8      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a344:	2310      	movs	r3, #16
 800a346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34a:	e2e4      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a34c:	2320      	movs	r3, #32
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e2e0      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a354:	2340      	movs	r3, #64	@ 0x40
 800a356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a35a:	e2dc      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a35c:	2380      	movs	r3, #128	@ 0x80
 800a35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a362:	e2d8      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a4f      	ldr	r2, [pc, #316]	@ (800a4a8 <UART_SetConfig+0x340>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d130      	bne.n	800a3d0 <UART_SetConfig+0x268>
 800a36e:	4b4c      	ldr	r3, [pc, #304]	@ (800a4a0 <UART_SetConfig+0x338>)
 800a370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a372:	f003 0307 	and.w	r3, r3, #7
 800a376:	2b05      	cmp	r3, #5
 800a378:	d826      	bhi.n	800a3c8 <UART_SetConfig+0x260>
 800a37a:	a201      	add	r2, pc, #4	@ (adr r2, 800a380 <UART_SetConfig+0x218>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a399 	.word	0x0800a399
 800a384:	0800a3a1 	.word	0x0800a3a1
 800a388:	0800a3a9 	.word	0x0800a3a9
 800a38c:	0800a3b1 	.word	0x0800a3b1
 800a390:	0800a3b9 	.word	0x0800a3b9
 800a394:	0800a3c1 	.word	0x0800a3c1
 800a398:	2300      	movs	r3, #0
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e2ba      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a3a0:	2304      	movs	r3, #4
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a6:	e2b6      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a3a8:	2308      	movs	r3, #8
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ae:	e2b2      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a3b0:	2310      	movs	r3, #16
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b6:	e2ae      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a3b8:	2320      	movs	r3, #32
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e2aa      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a3c0:	2340      	movs	r3, #64	@ 0x40
 800a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3c6:	e2a6      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a3c8:	2380      	movs	r3, #128	@ 0x80
 800a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ce:	e2a2      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a35      	ldr	r2, [pc, #212]	@ (800a4ac <UART_SetConfig+0x344>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d130      	bne.n	800a43c <UART_SetConfig+0x2d4>
 800a3da:	4b31      	ldr	r3, [pc, #196]	@ (800a4a0 <UART_SetConfig+0x338>)
 800a3dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3de:	f003 0307 	and.w	r3, r3, #7
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	d826      	bhi.n	800a434 <UART_SetConfig+0x2cc>
 800a3e6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3ec <UART_SetConfig+0x284>)
 800a3e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ec:	0800a405 	.word	0x0800a405
 800a3f0:	0800a40d 	.word	0x0800a40d
 800a3f4:	0800a415 	.word	0x0800a415
 800a3f8:	0800a41d 	.word	0x0800a41d
 800a3fc:	0800a425 	.word	0x0800a425
 800a400:	0800a42d 	.word	0x0800a42d
 800a404:	2300      	movs	r3, #0
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e284      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a40c:	2304      	movs	r3, #4
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e280      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a414:	2308      	movs	r3, #8
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41a:	e27c      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a41c:	2310      	movs	r3, #16
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a422:	e278      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a424:	2320      	movs	r3, #32
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e274      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a42c:	2340      	movs	r3, #64	@ 0x40
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a432:	e270      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a434:	2380      	movs	r3, #128	@ 0x80
 800a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43a:	e26c      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a1b      	ldr	r2, [pc, #108]	@ (800a4b0 <UART_SetConfig+0x348>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d142      	bne.n	800a4cc <UART_SetConfig+0x364>
 800a446:	4b16      	ldr	r3, [pc, #88]	@ (800a4a0 <UART_SetConfig+0x338>)
 800a448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a44a:	f003 0307 	and.w	r3, r3, #7
 800a44e:	2b05      	cmp	r3, #5
 800a450:	d838      	bhi.n	800a4c4 <UART_SetConfig+0x35c>
 800a452:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <UART_SetConfig+0x2f0>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a471 	.word	0x0800a471
 800a45c:	0800a479 	.word	0x0800a479
 800a460:	0800a481 	.word	0x0800a481
 800a464:	0800a489 	.word	0x0800a489
 800a468:	0800a4b5 	.word	0x0800a4b5
 800a46c:	0800a4bd 	.word	0x0800a4bd
 800a470:	2300      	movs	r3, #0
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e24e      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a478:	2304      	movs	r3, #4
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47e:	e24a      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a480:	2308      	movs	r3, #8
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a486:	e246      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a488:	2310      	movs	r3, #16
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48e:	e242      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a490:	cfff69f3 	.word	0xcfff69f3
 800a494:	58000c00 	.word	0x58000c00
 800a498:	11fff4ff 	.word	0x11fff4ff
 800a49c:	40011000 	.word	0x40011000
 800a4a0:	58024400 	.word	0x58024400
 800a4a4:	40004400 	.word	0x40004400
 800a4a8:	40004800 	.word	0x40004800
 800a4ac:	40004c00 	.word	0x40004c00
 800a4b0:	40005000 	.word	0x40005000
 800a4b4:	2320      	movs	r3, #32
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e22c      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a4bc:	2340      	movs	r3, #64	@ 0x40
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e228      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a4c4:	2380      	movs	r3, #128	@ 0x80
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ca:	e224      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4ab1      	ldr	r2, [pc, #708]	@ (800a798 <UART_SetConfig+0x630>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d176      	bne.n	800a5c4 <UART_SetConfig+0x45c>
 800a4d6:	4bb1      	ldr	r3, [pc, #708]	@ (800a79c <UART_SetConfig+0x634>)
 800a4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4de:	2b28      	cmp	r3, #40	@ 0x28
 800a4e0:	d86c      	bhi.n	800a5bc <UART_SetConfig+0x454>
 800a4e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4e8 <UART_SetConfig+0x380>)
 800a4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e8:	0800a58d 	.word	0x0800a58d
 800a4ec:	0800a5bd 	.word	0x0800a5bd
 800a4f0:	0800a5bd 	.word	0x0800a5bd
 800a4f4:	0800a5bd 	.word	0x0800a5bd
 800a4f8:	0800a5bd 	.word	0x0800a5bd
 800a4fc:	0800a5bd 	.word	0x0800a5bd
 800a500:	0800a5bd 	.word	0x0800a5bd
 800a504:	0800a5bd 	.word	0x0800a5bd
 800a508:	0800a595 	.word	0x0800a595
 800a50c:	0800a5bd 	.word	0x0800a5bd
 800a510:	0800a5bd 	.word	0x0800a5bd
 800a514:	0800a5bd 	.word	0x0800a5bd
 800a518:	0800a5bd 	.word	0x0800a5bd
 800a51c:	0800a5bd 	.word	0x0800a5bd
 800a520:	0800a5bd 	.word	0x0800a5bd
 800a524:	0800a5bd 	.word	0x0800a5bd
 800a528:	0800a59d 	.word	0x0800a59d
 800a52c:	0800a5bd 	.word	0x0800a5bd
 800a530:	0800a5bd 	.word	0x0800a5bd
 800a534:	0800a5bd 	.word	0x0800a5bd
 800a538:	0800a5bd 	.word	0x0800a5bd
 800a53c:	0800a5bd 	.word	0x0800a5bd
 800a540:	0800a5bd 	.word	0x0800a5bd
 800a544:	0800a5bd 	.word	0x0800a5bd
 800a548:	0800a5a5 	.word	0x0800a5a5
 800a54c:	0800a5bd 	.word	0x0800a5bd
 800a550:	0800a5bd 	.word	0x0800a5bd
 800a554:	0800a5bd 	.word	0x0800a5bd
 800a558:	0800a5bd 	.word	0x0800a5bd
 800a55c:	0800a5bd 	.word	0x0800a5bd
 800a560:	0800a5bd 	.word	0x0800a5bd
 800a564:	0800a5bd 	.word	0x0800a5bd
 800a568:	0800a5ad 	.word	0x0800a5ad
 800a56c:	0800a5bd 	.word	0x0800a5bd
 800a570:	0800a5bd 	.word	0x0800a5bd
 800a574:	0800a5bd 	.word	0x0800a5bd
 800a578:	0800a5bd 	.word	0x0800a5bd
 800a57c:	0800a5bd 	.word	0x0800a5bd
 800a580:	0800a5bd 	.word	0x0800a5bd
 800a584:	0800a5bd 	.word	0x0800a5bd
 800a588:	0800a5b5 	.word	0x0800a5b5
 800a58c:	2301      	movs	r3, #1
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a592:	e1c0      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a594:	2304      	movs	r3, #4
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59a:	e1bc      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a59c:	2308      	movs	r3, #8
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a2:	e1b8      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a5a4:	2310      	movs	r3, #16
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5aa:	e1b4      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a5ac:	2320      	movs	r3, #32
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b2:	e1b0      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a5b4:	2340      	movs	r3, #64	@ 0x40
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e1ac      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a5bc:	2380      	movs	r3, #128	@ 0x80
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c2:	e1a8      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a75      	ldr	r2, [pc, #468]	@ (800a7a0 <UART_SetConfig+0x638>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d130      	bne.n	800a630 <UART_SetConfig+0x4c8>
 800a5ce:	4b73      	ldr	r3, [pc, #460]	@ (800a79c <UART_SetConfig+0x634>)
 800a5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5d2:	f003 0307 	and.w	r3, r3, #7
 800a5d6:	2b05      	cmp	r3, #5
 800a5d8:	d826      	bhi.n	800a628 <UART_SetConfig+0x4c0>
 800a5da:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e0 <UART_SetConfig+0x478>)
 800a5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e0:	0800a5f9 	.word	0x0800a5f9
 800a5e4:	0800a601 	.word	0x0800a601
 800a5e8:	0800a609 	.word	0x0800a609
 800a5ec:	0800a611 	.word	0x0800a611
 800a5f0:	0800a619 	.word	0x0800a619
 800a5f4:	0800a621 	.word	0x0800a621
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fe:	e18a      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a600:	2304      	movs	r3, #4
 800a602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a606:	e186      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a608:	2308      	movs	r3, #8
 800a60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60e:	e182      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a610:	2310      	movs	r3, #16
 800a612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a616:	e17e      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a618:	2320      	movs	r3, #32
 800a61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a61e:	e17a      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a620:	2340      	movs	r3, #64	@ 0x40
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e176      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a628:	2380      	movs	r3, #128	@ 0x80
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62e:	e172      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a5b      	ldr	r2, [pc, #364]	@ (800a7a4 <UART_SetConfig+0x63c>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d130      	bne.n	800a69c <UART_SetConfig+0x534>
 800a63a:	4b58      	ldr	r3, [pc, #352]	@ (800a79c <UART_SetConfig+0x634>)
 800a63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63e:	f003 0307 	and.w	r3, r3, #7
 800a642:	2b05      	cmp	r3, #5
 800a644:	d826      	bhi.n	800a694 <UART_SetConfig+0x52c>
 800a646:	a201      	add	r2, pc, #4	@ (adr r2, 800a64c <UART_SetConfig+0x4e4>)
 800a648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64c:	0800a665 	.word	0x0800a665
 800a650:	0800a66d 	.word	0x0800a66d
 800a654:	0800a675 	.word	0x0800a675
 800a658:	0800a67d 	.word	0x0800a67d
 800a65c:	0800a685 	.word	0x0800a685
 800a660:	0800a68d 	.word	0x0800a68d
 800a664:	2300      	movs	r3, #0
 800a666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66a:	e154      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a66c:	2304      	movs	r3, #4
 800a66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a672:	e150      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a674:	2308      	movs	r3, #8
 800a676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a67a:	e14c      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a67c:	2310      	movs	r3, #16
 800a67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a682:	e148      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a684:	2320      	movs	r3, #32
 800a686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a68a:	e144      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a68c:	2340      	movs	r3, #64	@ 0x40
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e140      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a694:	2380      	movs	r3, #128	@ 0x80
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e13c      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	4a41      	ldr	r2, [pc, #260]	@ (800a7a8 <UART_SetConfig+0x640>)
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	f040 8082 	bne.w	800a7ac <UART_SetConfig+0x644>
 800a6a8:	4b3c      	ldr	r3, [pc, #240]	@ (800a79c <UART_SetConfig+0x634>)
 800a6aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6b0:	2b28      	cmp	r3, #40	@ 0x28
 800a6b2:	d86d      	bhi.n	800a790 <UART_SetConfig+0x628>
 800a6b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a6bc <UART_SetConfig+0x554>)
 800a6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ba:	bf00      	nop
 800a6bc:	0800a761 	.word	0x0800a761
 800a6c0:	0800a791 	.word	0x0800a791
 800a6c4:	0800a791 	.word	0x0800a791
 800a6c8:	0800a791 	.word	0x0800a791
 800a6cc:	0800a791 	.word	0x0800a791
 800a6d0:	0800a791 	.word	0x0800a791
 800a6d4:	0800a791 	.word	0x0800a791
 800a6d8:	0800a791 	.word	0x0800a791
 800a6dc:	0800a769 	.word	0x0800a769
 800a6e0:	0800a791 	.word	0x0800a791
 800a6e4:	0800a791 	.word	0x0800a791
 800a6e8:	0800a791 	.word	0x0800a791
 800a6ec:	0800a791 	.word	0x0800a791
 800a6f0:	0800a791 	.word	0x0800a791
 800a6f4:	0800a791 	.word	0x0800a791
 800a6f8:	0800a791 	.word	0x0800a791
 800a6fc:	0800a771 	.word	0x0800a771
 800a700:	0800a791 	.word	0x0800a791
 800a704:	0800a791 	.word	0x0800a791
 800a708:	0800a791 	.word	0x0800a791
 800a70c:	0800a791 	.word	0x0800a791
 800a710:	0800a791 	.word	0x0800a791
 800a714:	0800a791 	.word	0x0800a791
 800a718:	0800a791 	.word	0x0800a791
 800a71c:	0800a779 	.word	0x0800a779
 800a720:	0800a791 	.word	0x0800a791
 800a724:	0800a791 	.word	0x0800a791
 800a728:	0800a791 	.word	0x0800a791
 800a72c:	0800a791 	.word	0x0800a791
 800a730:	0800a791 	.word	0x0800a791
 800a734:	0800a791 	.word	0x0800a791
 800a738:	0800a791 	.word	0x0800a791
 800a73c:	0800a781 	.word	0x0800a781
 800a740:	0800a791 	.word	0x0800a791
 800a744:	0800a791 	.word	0x0800a791
 800a748:	0800a791 	.word	0x0800a791
 800a74c:	0800a791 	.word	0x0800a791
 800a750:	0800a791 	.word	0x0800a791
 800a754:	0800a791 	.word	0x0800a791
 800a758:	0800a791 	.word	0x0800a791
 800a75c:	0800a789 	.word	0x0800a789
 800a760:	2301      	movs	r3, #1
 800a762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a766:	e0d6      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a768:	2304      	movs	r3, #4
 800a76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76e:	e0d2      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a770:	2308      	movs	r3, #8
 800a772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a776:	e0ce      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a778:	2310      	movs	r3, #16
 800a77a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a77e:	e0ca      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a780:	2320      	movs	r3, #32
 800a782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a786:	e0c6      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a788:	2340      	movs	r3, #64	@ 0x40
 800a78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a78e:	e0c2      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a790:	2380      	movs	r3, #128	@ 0x80
 800a792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a796:	e0be      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a798:	40011400 	.word	0x40011400
 800a79c:	58024400 	.word	0x58024400
 800a7a0:	40007800 	.word	0x40007800
 800a7a4:	40007c00 	.word	0x40007c00
 800a7a8:	40011800 	.word	0x40011800
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4aad      	ldr	r2, [pc, #692]	@ (800aa68 <UART_SetConfig+0x900>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d176      	bne.n	800a8a4 <UART_SetConfig+0x73c>
 800a7b6:	4bad      	ldr	r3, [pc, #692]	@ (800aa6c <UART_SetConfig+0x904>)
 800a7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a7ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7be:	2b28      	cmp	r3, #40	@ 0x28
 800a7c0:	d86c      	bhi.n	800a89c <UART_SetConfig+0x734>
 800a7c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c8 <UART_SetConfig+0x660>)
 800a7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c8:	0800a86d 	.word	0x0800a86d
 800a7cc:	0800a89d 	.word	0x0800a89d
 800a7d0:	0800a89d 	.word	0x0800a89d
 800a7d4:	0800a89d 	.word	0x0800a89d
 800a7d8:	0800a89d 	.word	0x0800a89d
 800a7dc:	0800a89d 	.word	0x0800a89d
 800a7e0:	0800a89d 	.word	0x0800a89d
 800a7e4:	0800a89d 	.word	0x0800a89d
 800a7e8:	0800a875 	.word	0x0800a875
 800a7ec:	0800a89d 	.word	0x0800a89d
 800a7f0:	0800a89d 	.word	0x0800a89d
 800a7f4:	0800a89d 	.word	0x0800a89d
 800a7f8:	0800a89d 	.word	0x0800a89d
 800a7fc:	0800a89d 	.word	0x0800a89d
 800a800:	0800a89d 	.word	0x0800a89d
 800a804:	0800a89d 	.word	0x0800a89d
 800a808:	0800a87d 	.word	0x0800a87d
 800a80c:	0800a89d 	.word	0x0800a89d
 800a810:	0800a89d 	.word	0x0800a89d
 800a814:	0800a89d 	.word	0x0800a89d
 800a818:	0800a89d 	.word	0x0800a89d
 800a81c:	0800a89d 	.word	0x0800a89d
 800a820:	0800a89d 	.word	0x0800a89d
 800a824:	0800a89d 	.word	0x0800a89d
 800a828:	0800a885 	.word	0x0800a885
 800a82c:	0800a89d 	.word	0x0800a89d
 800a830:	0800a89d 	.word	0x0800a89d
 800a834:	0800a89d 	.word	0x0800a89d
 800a838:	0800a89d 	.word	0x0800a89d
 800a83c:	0800a89d 	.word	0x0800a89d
 800a840:	0800a89d 	.word	0x0800a89d
 800a844:	0800a89d 	.word	0x0800a89d
 800a848:	0800a88d 	.word	0x0800a88d
 800a84c:	0800a89d 	.word	0x0800a89d
 800a850:	0800a89d 	.word	0x0800a89d
 800a854:	0800a89d 	.word	0x0800a89d
 800a858:	0800a89d 	.word	0x0800a89d
 800a85c:	0800a89d 	.word	0x0800a89d
 800a860:	0800a89d 	.word	0x0800a89d
 800a864:	0800a89d 	.word	0x0800a89d
 800a868:	0800a895 	.word	0x0800a895
 800a86c:	2301      	movs	r3, #1
 800a86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a872:	e050      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a874:	2304      	movs	r3, #4
 800a876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a87a:	e04c      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a87c:	2308      	movs	r3, #8
 800a87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a882:	e048      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a884:	2310      	movs	r3, #16
 800a886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88a:	e044      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a88c:	2320      	movs	r3, #32
 800a88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a892:	e040      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a894:	2340      	movs	r3, #64	@ 0x40
 800a896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89a:	e03c      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a89c:	2380      	movs	r3, #128	@ 0x80
 800a89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a2:	e038      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a71      	ldr	r2, [pc, #452]	@ (800aa70 <UART_SetConfig+0x908>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d130      	bne.n	800a910 <UART_SetConfig+0x7a8>
 800a8ae:	4b6f      	ldr	r3, [pc, #444]	@ (800aa6c <UART_SetConfig+0x904>)
 800a8b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b2:	f003 0307 	and.w	r3, r3, #7
 800a8b6:	2b05      	cmp	r3, #5
 800a8b8:	d826      	bhi.n	800a908 <UART_SetConfig+0x7a0>
 800a8ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c0 <UART_SetConfig+0x758>)
 800a8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c0:	0800a8d9 	.word	0x0800a8d9
 800a8c4:	0800a8e1 	.word	0x0800a8e1
 800a8c8:	0800a8e9 	.word	0x0800a8e9
 800a8cc:	0800a8f1 	.word	0x0800a8f1
 800a8d0:	0800a8f9 	.word	0x0800a8f9
 800a8d4:	0800a901 	.word	0x0800a901
 800a8d8:	2302      	movs	r3, #2
 800a8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8de:	e01a      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a8e0:	2304      	movs	r3, #4
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8e6:	e016      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a8e8:	2308      	movs	r3, #8
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ee:	e012      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a8f0:	2310      	movs	r3, #16
 800a8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f6:	e00e      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a8f8:	2320      	movs	r3, #32
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fe:	e00a      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a900:	2340      	movs	r3, #64	@ 0x40
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a906:	e006      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a908:	2380      	movs	r3, #128	@ 0x80
 800a90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90e:	e002      	b.n	800a916 <UART_SetConfig+0x7ae>
 800a910:	2380      	movs	r3, #128	@ 0x80
 800a912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a55      	ldr	r2, [pc, #340]	@ (800aa70 <UART_SetConfig+0x908>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	f040 80f8 	bne.w	800ab12 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a922:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a926:	2b20      	cmp	r3, #32
 800a928:	dc46      	bgt.n	800a9b8 <UART_SetConfig+0x850>
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	db75      	blt.n	800aa1a <UART_SetConfig+0x8b2>
 800a92e:	3b02      	subs	r3, #2
 800a930:	2b1e      	cmp	r3, #30
 800a932:	d872      	bhi.n	800aa1a <UART_SetConfig+0x8b2>
 800a934:	a201      	add	r2, pc, #4	@ (adr r2, 800a93c <UART_SetConfig+0x7d4>)
 800a936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93a:	bf00      	nop
 800a93c:	0800a9bf 	.word	0x0800a9bf
 800a940:	0800aa1b 	.word	0x0800aa1b
 800a944:	0800a9c7 	.word	0x0800a9c7
 800a948:	0800aa1b 	.word	0x0800aa1b
 800a94c:	0800aa1b 	.word	0x0800aa1b
 800a950:	0800aa1b 	.word	0x0800aa1b
 800a954:	0800a9d7 	.word	0x0800a9d7
 800a958:	0800aa1b 	.word	0x0800aa1b
 800a95c:	0800aa1b 	.word	0x0800aa1b
 800a960:	0800aa1b 	.word	0x0800aa1b
 800a964:	0800aa1b 	.word	0x0800aa1b
 800a968:	0800aa1b 	.word	0x0800aa1b
 800a96c:	0800aa1b 	.word	0x0800aa1b
 800a970:	0800aa1b 	.word	0x0800aa1b
 800a974:	0800a9e7 	.word	0x0800a9e7
 800a978:	0800aa1b 	.word	0x0800aa1b
 800a97c:	0800aa1b 	.word	0x0800aa1b
 800a980:	0800aa1b 	.word	0x0800aa1b
 800a984:	0800aa1b 	.word	0x0800aa1b
 800a988:	0800aa1b 	.word	0x0800aa1b
 800a98c:	0800aa1b 	.word	0x0800aa1b
 800a990:	0800aa1b 	.word	0x0800aa1b
 800a994:	0800aa1b 	.word	0x0800aa1b
 800a998:	0800aa1b 	.word	0x0800aa1b
 800a99c:	0800aa1b 	.word	0x0800aa1b
 800a9a0:	0800aa1b 	.word	0x0800aa1b
 800a9a4:	0800aa1b 	.word	0x0800aa1b
 800a9a8:	0800aa1b 	.word	0x0800aa1b
 800a9ac:	0800aa1b 	.word	0x0800aa1b
 800a9b0:	0800aa1b 	.word	0x0800aa1b
 800a9b4:	0800aa0d 	.word	0x0800aa0d
 800a9b8:	2b40      	cmp	r3, #64	@ 0x40
 800a9ba:	d02a      	beq.n	800aa12 <UART_SetConfig+0x8aa>
 800a9bc:	e02d      	b.n	800aa1a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a9be:	f7fe f9df 	bl	8008d80 <HAL_RCCEx_GetD3PCLK1Freq>
 800a9c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9c4:	e02f      	b.n	800aa26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe f9ee 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9d4:	e027      	b.n	800aa26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9d6:	f107 0318 	add.w	r3, r7, #24
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fb3a 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9e4:	e01f      	b.n	800aa26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9e6:	4b21      	ldr	r3, [pc, #132]	@ (800aa6c <UART_SetConfig+0x904>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0320 	and.w	r3, r3, #32
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d009      	beq.n	800aa06 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9f2:	4b1e      	ldr	r3, [pc, #120]	@ (800aa6c <UART_SetConfig+0x904>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	08db      	lsrs	r3, r3, #3
 800a9f8:	f003 0303 	and.w	r3, r3, #3
 800a9fc:	4a1d      	ldr	r2, [pc, #116]	@ (800aa74 <UART_SetConfig+0x90c>)
 800a9fe:	fa22 f303 	lsr.w	r3, r2, r3
 800aa02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa04:	e00f      	b.n	800aa26 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aa06:	4b1b      	ldr	r3, [pc, #108]	@ (800aa74 <UART_SetConfig+0x90c>)
 800aa08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa0a:	e00c      	b.n	800aa26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa0c:	4b1a      	ldr	r3, [pc, #104]	@ (800aa78 <UART_SetConfig+0x910>)
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa10:	e009      	b.n	800aa26 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa18:	e005      	b.n	800aa26 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aa26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	f000 81ee 	beq.w	800ae0a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa32:	4a12      	ldr	r2, [pc, #72]	@ (800aa7c <UART_SetConfig+0x914>)
 800aa34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa40:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	685a      	ldr	r2, [r3, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	4413      	add	r3, r2
 800aa4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d305      	bcc.n	800aa5e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	685b      	ldr	r3, [r3, #4]
 800aa56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aa58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d910      	bls.n	800aa80 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aa64:	e1d1      	b.n	800ae0a <UART_SetConfig+0xca2>
 800aa66:	bf00      	nop
 800aa68:	40011c00 	.word	0x40011c00
 800aa6c:	58024400 	.word	0x58024400
 800aa70:	58000c00 	.word	0x58000c00
 800aa74:	03d09000 	.word	0x03d09000
 800aa78:	003d0900 	.word	0x003d0900
 800aa7c:	0800b5cc 	.word	0x0800b5cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa82:	2200      	movs	r2, #0
 800aa84:	60bb      	str	r3, [r7, #8]
 800aa86:	60fa      	str	r2, [r7, #12]
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa8c:	4ac0      	ldr	r2, [pc, #768]	@ (800ad90 <UART_SetConfig+0xc28>)
 800aa8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	2200      	movs	r2, #0
 800aa96:	603b      	str	r3, [r7, #0]
 800aa98:	607a      	str	r2, [r7, #4]
 800aa9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aaa2:	f7f5 fc23 	bl	80002ec <__aeabi_uldivmod>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	4610      	mov	r0, r2
 800aaac:	4619      	mov	r1, r3
 800aaae:	f04f 0200 	mov.w	r2, #0
 800aab2:	f04f 0300 	mov.w	r3, #0
 800aab6:	020b      	lsls	r3, r1, #8
 800aab8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aabc:	0202      	lsls	r2, r0, #8
 800aabe:	6979      	ldr	r1, [r7, #20]
 800aac0:	6849      	ldr	r1, [r1, #4]
 800aac2:	0849      	lsrs	r1, r1, #1
 800aac4:	2000      	movs	r0, #0
 800aac6:	460c      	mov	r4, r1
 800aac8:	4605      	mov	r5, r0
 800aaca:	eb12 0804 	adds.w	r8, r2, r4
 800aace:	eb43 0905 	adc.w	r9, r3, r5
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	685b      	ldr	r3, [r3, #4]
 800aad6:	2200      	movs	r2, #0
 800aad8:	469a      	mov	sl, r3
 800aada:	4693      	mov	fp, r2
 800aadc:	4652      	mov	r2, sl
 800aade:	465b      	mov	r3, fp
 800aae0:	4640      	mov	r0, r8
 800aae2:	4649      	mov	r1, r9
 800aae4:	f7f5 fc02 	bl	80002ec <__aeabi_uldivmod>
 800aae8:	4602      	mov	r2, r0
 800aaea:	460b      	mov	r3, r1
 800aaec:	4613      	mov	r3, r2
 800aaee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aaf6:	d308      	bcc.n	800ab0a <UART_SetConfig+0x9a2>
 800aaf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aafe:	d204      	bcs.n	800ab0a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab06:	60da      	str	r2, [r3, #12]
 800ab08:	e17f      	b.n	800ae0a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab10:	e17b      	b.n	800ae0a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab1a:	f040 80bd 	bne.w	800ac98 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ab1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	dc48      	bgt.n	800abb8 <UART_SetConfig+0xa50>
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	db7b      	blt.n	800ac22 <UART_SetConfig+0xaba>
 800ab2a:	2b20      	cmp	r3, #32
 800ab2c:	d879      	bhi.n	800ac22 <UART_SetConfig+0xaba>
 800ab2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab34 <UART_SetConfig+0x9cc>)
 800ab30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab34:	0800abbf 	.word	0x0800abbf
 800ab38:	0800abc7 	.word	0x0800abc7
 800ab3c:	0800ac23 	.word	0x0800ac23
 800ab40:	0800ac23 	.word	0x0800ac23
 800ab44:	0800abcf 	.word	0x0800abcf
 800ab48:	0800ac23 	.word	0x0800ac23
 800ab4c:	0800ac23 	.word	0x0800ac23
 800ab50:	0800ac23 	.word	0x0800ac23
 800ab54:	0800abdf 	.word	0x0800abdf
 800ab58:	0800ac23 	.word	0x0800ac23
 800ab5c:	0800ac23 	.word	0x0800ac23
 800ab60:	0800ac23 	.word	0x0800ac23
 800ab64:	0800ac23 	.word	0x0800ac23
 800ab68:	0800ac23 	.word	0x0800ac23
 800ab6c:	0800ac23 	.word	0x0800ac23
 800ab70:	0800ac23 	.word	0x0800ac23
 800ab74:	0800abef 	.word	0x0800abef
 800ab78:	0800ac23 	.word	0x0800ac23
 800ab7c:	0800ac23 	.word	0x0800ac23
 800ab80:	0800ac23 	.word	0x0800ac23
 800ab84:	0800ac23 	.word	0x0800ac23
 800ab88:	0800ac23 	.word	0x0800ac23
 800ab8c:	0800ac23 	.word	0x0800ac23
 800ab90:	0800ac23 	.word	0x0800ac23
 800ab94:	0800ac23 	.word	0x0800ac23
 800ab98:	0800ac23 	.word	0x0800ac23
 800ab9c:	0800ac23 	.word	0x0800ac23
 800aba0:	0800ac23 	.word	0x0800ac23
 800aba4:	0800ac23 	.word	0x0800ac23
 800aba8:	0800ac23 	.word	0x0800ac23
 800abac:	0800ac23 	.word	0x0800ac23
 800abb0:	0800ac23 	.word	0x0800ac23
 800abb4:	0800ac15 	.word	0x0800ac15
 800abb8:	2b40      	cmp	r3, #64	@ 0x40
 800abba:	d02e      	beq.n	800ac1a <UART_SetConfig+0xab2>
 800abbc:	e031      	b.n	800ac22 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abbe:	f7fc fa1d 	bl	8006ffc <HAL_RCC_GetPCLK1Freq>
 800abc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abc4:	e033      	b.n	800ac2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abc6:	f7fc fa2f 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 800abca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800abcc:	e02f      	b.n	800ac2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7fe f8ea 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abdc:	e027      	b.n	800ac2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abde:	f107 0318 	add.w	r3, r7, #24
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7fe fa36 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abec:	e01f      	b.n	800ac2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abee:	4b69      	ldr	r3, [pc, #420]	@ (800ad94 <UART_SetConfig+0xc2c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0320 	and.w	r3, r3, #32
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d009      	beq.n	800ac0e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abfa:	4b66      	ldr	r3, [pc, #408]	@ (800ad94 <UART_SetConfig+0xc2c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	08db      	lsrs	r3, r3, #3
 800ac00:	f003 0303 	and.w	r3, r3, #3
 800ac04:	4a64      	ldr	r2, [pc, #400]	@ (800ad98 <UART_SetConfig+0xc30>)
 800ac06:	fa22 f303 	lsr.w	r3, r2, r3
 800ac0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac0c:	e00f      	b.n	800ac2e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ac0e:	4b62      	ldr	r3, [pc, #392]	@ (800ad98 <UART_SetConfig+0xc30>)
 800ac10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac12:	e00c      	b.n	800ac2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac14:	4b61      	ldr	r3, [pc, #388]	@ (800ad9c <UART_SetConfig+0xc34>)
 800ac16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac18:	e009      	b.n	800ac2e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac20:	e005      	b.n	800ac2e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ac22:	2300      	movs	r3, #0
 800ac24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ac2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 80ea 	beq.w	800ae0a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3a:	4a55      	ldr	r2, [pc, #340]	@ (800ad90 <UART_SetConfig+0xc28>)
 800ac3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac40:	461a      	mov	r2, r3
 800ac42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac44:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac48:	005a      	lsls	r2, r3, #1
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	085b      	lsrs	r3, r3, #1
 800ac50:	441a      	add	r2, r3
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5e:	2b0f      	cmp	r3, #15
 800ac60:	d916      	bls.n	800ac90 <UART_SetConfig+0xb28>
 800ac62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac68:	d212      	bcs.n	800ac90 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	f023 030f 	bic.w	r3, r3, #15
 800ac72:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac76:	085b      	lsrs	r3, r3, #1
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	f003 0307 	and.w	r3, r3, #7
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ac82:	4313      	orrs	r3, r2
 800ac84:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ac8c:	60da      	str	r2, [r3, #12]
 800ac8e:	e0bc      	b.n	800ae0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ac96:	e0b8      	b.n	800ae0a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac98:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ac9c:	2b20      	cmp	r3, #32
 800ac9e:	dc4b      	bgt.n	800ad38 <UART_SetConfig+0xbd0>
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f2c0 8087 	blt.w	800adb4 <UART_SetConfig+0xc4c>
 800aca6:	2b20      	cmp	r3, #32
 800aca8:	f200 8084 	bhi.w	800adb4 <UART_SetConfig+0xc4c>
 800acac:	a201      	add	r2, pc, #4	@ (adr r2, 800acb4 <UART_SetConfig+0xb4c>)
 800acae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acb2:	bf00      	nop
 800acb4:	0800ad3f 	.word	0x0800ad3f
 800acb8:	0800ad47 	.word	0x0800ad47
 800acbc:	0800adb5 	.word	0x0800adb5
 800acc0:	0800adb5 	.word	0x0800adb5
 800acc4:	0800ad4f 	.word	0x0800ad4f
 800acc8:	0800adb5 	.word	0x0800adb5
 800accc:	0800adb5 	.word	0x0800adb5
 800acd0:	0800adb5 	.word	0x0800adb5
 800acd4:	0800ad5f 	.word	0x0800ad5f
 800acd8:	0800adb5 	.word	0x0800adb5
 800acdc:	0800adb5 	.word	0x0800adb5
 800ace0:	0800adb5 	.word	0x0800adb5
 800ace4:	0800adb5 	.word	0x0800adb5
 800ace8:	0800adb5 	.word	0x0800adb5
 800acec:	0800adb5 	.word	0x0800adb5
 800acf0:	0800adb5 	.word	0x0800adb5
 800acf4:	0800ad6f 	.word	0x0800ad6f
 800acf8:	0800adb5 	.word	0x0800adb5
 800acfc:	0800adb5 	.word	0x0800adb5
 800ad00:	0800adb5 	.word	0x0800adb5
 800ad04:	0800adb5 	.word	0x0800adb5
 800ad08:	0800adb5 	.word	0x0800adb5
 800ad0c:	0800adb5 	.word	0x0800adb5
 800ad10:	0800adb5 	.word	0x0800adb5
 800ad14:	0800adb5 	.word	0x0800adb5
 800ad18:	0800adb5 	.word	0x0800adb5
 800ad1c:	0800adb5 	.word	0x0800adb5
 800ad20:	0800adb5 	.word	0x0800adb5
 800ad24:	0800adb5 	.word	0x0800adb5
 800ad28:	0800adb5 	.word	0x0800adb5
 800ad2c:	0800adb5 	.word	0x0800adb5
 800ad30:	0800adb5 	.word	0x0800adb5
 800ad34:	0800ada7 	.word	0x0800ada7
 800ad38:	2b40      	cmp	r3, #64	@ 0x40
 800ad3a:	d037      	beq.n	800adac <UART_SetConfig+0xc44>
 800ad3c:	e03a      	b.n	800adb4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad3e:	f7fc f95d 	bl	8006ffc <HAL_RCC_GetPCLK1Freq>
 800ad42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad44:	e03c      	b.n	800adc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad46:	f7fc f96f 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 800ad4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ad4c:	e038      	b.n	800adc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe f82a 	bl	8008dac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ad58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad5c:	e030      	b.n	800adc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad5e:	f107 0318 	add.w	r3, r7, #24
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe f976 	bl	8009054 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad6c:	e028      	b.n	800adc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad6e:	4b09      	ldr	r3, [pc, #36]	@ (800ad94 <UART_SetConfig+0xc2c>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f003 0320 	and.w	r3, r3, #32
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d012      	beq.n	800ada0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ad7a:	4b06      	ldr	r3, [pc, #24]	@ (800ad94 <UART_SetConfig+0xc2c>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	08db      	lsrs	r3, r3, #3
 800ad80:	f003 0303 	and.w	r3, r3, #3
 800ad84:	4a04      	ldr	r2, [pc, #16]	@ (800ad98 <UART_SetConfig+0xc30>)
 800ad86:	fa22 f303 	lsr.w	r3, r2, r3
 800ad8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ad8c:	e018      	b.n	800adc0 <UART_SetConfig+0xc58>
 800ad8e:	bf00      	nop
 800ad90:	0800b5cc 	.word	0x0800b5cc
 800ad94:	58024400 	.word	0x58024400
 800ad98:	03d09000 	.word	0x03d09000
 800ad9c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ada0:	4b24      	ldr	r3, [pc, #144]	@ (800ae34 <UART_SetConfig+0xccc>)
 800ada2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada4:	e00c      	b.n	800adc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ada6:	4b24      	ldr	r3, [pc, #144]	@ (800ae38 <UART_SetConfig+0xcd0>)
 800ada8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adaa:	e009      	b.n	800adc0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb2:	e005      	b.n	800adc0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800adb4:	2300      	movs	r3, #0
 800adb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800adbe:	bf00      	nop
    }

    if (pclk != 0U)
 800adc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d021      	beq.n	800ae0a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adca:	4a1c      	ldr	r2, [pc, #112]	@ (800ae3c <UART_SetConfig+0xcd4>)
 800adcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800add0:	461a      	mov	r2, r3
 800add2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800add4:	fbb3 f2f2 	udiv	r2, r3, r2
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	085b      	lsrs	r3, r3, #1
 800adde:	441a      	add	r2, r3
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adec:	2b0f      	cmp	r3, #15
 800adee:	d909      	bls.n	800ae04 <UART_SetConfig+0xc9c>
 800adf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adf6:	d205      	bcs.n	800ae04 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	60da      	str	r2, [r3, #12]
 800ae02:	e002      	b.n	800ae0a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	2200      	movs	r2, #0
 800ae24:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ae26:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3748      	adds	r7, #72	@ 0x48
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ae34:	03d09000 	.word	0x03d09000
 800ae38:	003d0900 	.word	0x003d0900
 800ae3c:	0800b5cc 	.word	0x0800b5cc

0800ae40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4c:	f003 0308 	and.w	r3, r3, #8
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d00a      	beq.n	800ae6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	430a      	orrs	r2, r1
 800ae68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00a      	beq.n	800ae8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	430a      	orrs	r2, r1
 800ae8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae90:	f003 0302 	and.w	r3, r3, #2
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00a      	beq.n	800aeae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	430a      	orrs	r2, r1
 800aeac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb2:	f003 0304 	and.w	r3, r3, #4
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	430a      	orrs	r2, r1
 800aece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed4:	f003 0310 	and.w	r3, r3, #16
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00a      	beq.n	800aef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	430a      	orrs	r2, r1
 800aef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aef6:	f003 0320 	and.w	r3, r3, #32
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00a      	beq.n	800af14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	430a      	orrs	r2, r1
 800af12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d01a      	beq.n	800af56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	430a      	orrs	r2, r1
 800af34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af3e:	d10a      	bne.n	800af56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	430a      	orrs	r2, r1
 800af54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00a      	beq.n	800af78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	430a      	orrs	r2, r1
 800af76:	605a      	str	r2, [r3, #4]
  }
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b098      	sub	sp, #96	@ 0x60
 800af88:	af02      	add	r7, sp, #8
 800af8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af94:	f7f6 f908 	bl	80011a8 <HAL_GetTick>
 800af98:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f003 0308 	and.w	r3, r3, #8
 800afa4:	2b08      	cmp	r3, #8
 800afa6:	d12f      	bne.n	800b008 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afa8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afb0:	2200      	movs	r2, #0
 800afb2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f88e 	bl	800b0d8 <UART_WaitOnFlagUntilTimeout>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d022      	beq.n	800b008 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afca:	e853 3f00 	ldrex	r3, [r3]
 800afce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afd6:	653b      	str	r3, [r7, #80]	@ 0x50
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	461a      	mov	r2, r3
 800afde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afe0:	647b      	str	r3, [r7, #68]	@ 0x44
 800afe2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afe6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afe8:	e841 2300 	strex	r3, r2, [r1]
 800afec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d1e6      	bne.n	800afc2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2220      	movs	r2, #32
 800aff8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b004:	2303      	movs	r3, #3
 800b006:	e063      	b.n	800b0d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0304 	and.w	r3, r3, #4
 800b012:	2b04      	cmp	r3, #4
 800b014:	d149      	bne.n	800b0aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b016:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b01e:	2200      	movs	r2, #0
 800b020:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f857 	bl	800b0d8 <UART_WaitOnFlagUntilTimeout>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d03c      	beq.n	800b0aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b038:	e853 3f00 	ldrex	r3, [r3]
 800b03c:	623b      	str	r3, [r7, #32]
   return(result);
 800b03e:	6a3b      	ldr	r3, [r7, #32]
 800b040:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	461a      	mov	r2, r3
 800b04c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b04e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b050:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b056:	e841 2300 	strex	r3, r2, [r1]
 800b05a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d1e6      	bne.n	800b030 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3308      	adds	r3, #8
 800b068:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	e853 3f00 	ldrex	r3, [r3]
 800b070:	60fb      	str	r3, [r7, #12]
   return(result);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	f023 0301 	bic.w	r3, r3, #1
 800b078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3308      	adds	r3, #8
 800b080:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b082:	61fa      	str	r2, [r7, #28]
 800b084:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	69b9      	ldr	r1, [r7, #24]
 800b088:	69fa      	ldr	r2, [r7, #28]
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	617b      	str	r3, [r7, #20]
   return(result);
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e5      	bne.n	800b062 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2220      	movs	r2, #32
 800b09a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e012      	b.n	800b0d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2220      	movs	r2, #32
 800b0ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3758      	adds	r7, #88	@ 0x58
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	603b      	str	r3, [r7, #0]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0e8:	e04f      	b.n	800b18a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f0:	d04b      	beq.n	800b18a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0f2:	f7f6 f859 	bl	80011a8 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	69ba      	ldr	r2, [r7, #24]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d302      	bcc.n	800b108 <UART_WaitOnFlagUntilTimeout+0x30>
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e04e      	b.n	800b1aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0304 	and.w	r3, r3, #4
 800b116:	2b00      	cmp	r3, #0
 800b118:	d037      	beq.n	800b18a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	2b80      	cmp	r3, #128	@ 0x80
 800b11e:	d034      	beq.n	800b18a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	2b40      	cmp	r3, #64	@ 0x40
 800b124:	d031      	beq.n	800b18a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	69db      	ldr	r3, [r3, #28]
 800b12c:	f003 0308 	and.w	r3, r3, #8
 800b130:	2b08      	cmp	r3, #8
 800b132:	d110      	bne.n	800b156 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2208      	movs	r2, #8
 800b13a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f000 f839 	bl	800b1b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2208      	movs	r2, #8
 800b146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	e029      	b.n	800b1aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	69db      	ldr	r3, [r3, #28]
 800b15c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b160:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b164:	d111      	bne.n	800b18a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b16e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f000 f81f 	bl	800b1b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2220      	movs	r2, #32
 800b17a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e00f      	b.n	800b1aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	69da      	ldr	r2, [r3, #28]
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	4013      	ands	r3, r2
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	429a      	cmp	r2, r3
 800b198:	bf0c      	ite	eq
 800b19a:	2301      	moveq	r3, #1
 800b19c:	2300      	movne	r3, #0
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d0a0      	beq.n	800b0ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1a8:	2300      	movs	r3, #0
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3710      	adds	r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
	...

0800b1b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b095      	sub	sp, #84	@ 0x54
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1da:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b1e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b1e2:	e841 2300 	strex	r3, r2, [r1]
 800b1e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1e6      	bne.n	800b1bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	e853 3f00 	ldrex	r3, [r3]
 800b1fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1fe:	69fa      	ldr	r2, [r7, #28]
 800b200:	4b1e      	ldr	r3, [pc, #120]	@ (800b27c <UART_EndRxTransfer+0xc8>)
 800b202:	4013      	ands	r3, r2
 800b204:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3308      	adds	r3, #8
 800b20c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b20e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b210:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b216:	e841 2300 	strex	r3, r2, [r1]
 800b21a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1e5      	bne.n	800b1ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b226:	2b01      	cmp	r3, #1
 800b228:	d118      	bne.n	800b25c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	e853 3f00 	ldrex	r3, [r3]
 800b236:	60bb      	str	r3, [r7, #8]
   return(result);
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	f023 0310 	bic.w	r3, r3, #16
 800b23e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b248:	61bb      	str	r3, [r7, #24]
 800b24a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24c:	6979      	ldr	r1, [r7, #20]
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	e841 2300 	strex	r3, r2, [r1]
 800b254:	613b      	str	r3, [r7, #16]
   return(result);
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1e6      	bne.n	800b22a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2220      	movs	r2, #32
 800b260:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b270:	bf00      	nop
 800b272:	3754      	adds	r7, #84	@ 0x54
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	effffffe 	.word	0xeffffffe

0800b280 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b28c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2200      	movs	r2, #0
 800b292:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2200      	movs	r2, #0
 800b29a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b29e:	68f8      	ldr	r0, [r7, #12]
 800b2a0:	f7fe ff4c 	bl	800a13c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2a4:	bf00      	nop
 800b2a6:	3710      	adds	r7, #16
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	e853 3f00 	ldrex	r3, [r3]
 800b2c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2c8:	61fb      	str	r3, [r7, #28]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	61bb      	str	r3, [r7, #24]
 800b2d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2d6:	6979      	ldr	r1, [r7, #20]
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	e841 2300 	strex	r3, r2, [r1]
 800b2de:	613b      	str	r3, [r7, #16]
   return(result);
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1e6      	bne.n	800b2b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2220      	movs	r2, #32
 800b2ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f7fe ff17 	bl	800a128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2fa:	bf00      	nop
 800b2fc:	3720      	adds	r7, #32
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b302:	b480      	push	{r7}
 800b304:	b083      	sub	sp, #12
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b30a:	bf00      	nop
 800b30c:	370c      	adds	r7, #12
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b316:	b480      	push	{r7}
 800b318:	b083      	sub	sp, #12
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b31e:	bf00      	nop
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b332:	bf00      	nop
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b33e:	b480      	push	{r7}
 800b340:	b085      	sub	sp, #20
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d101      	bne.n	800b354 <HAL_UARTEx_DisableFifoMode+0x16>
 800b350:	2302      	movs	r3, #2
 800b352:	e027      	b.n	800b3a4 <HAL_UARTEx_DisableFifoMode+0x66>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2224      	movs	r2, #36	@ 0x24
 800b360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f022 0201 	bic.w	r2, r2, #1
 800b37a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b382:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	68fa      	ldr	r2, [r7, #12]
 800b390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2220      	movs	r2, #32
 800b396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2200      	movs	r2, #0
 800b39e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3714      	adds	r7, #20
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d101      	bne.n	800b3c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	e02d      	b.n	800b424 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2224      	movs	r2, #36	@ 0x24
 800b3d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f022 0201 	bic.w	r2, r2, #1
 800b3ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	683a      	ldr	r2, [r7, #0]
 800b400:	430a      	orrs	r2, r1
 800b402:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f84f 	bl	800b4a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2220      	movs	r2, #32
 800b416:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d101      	bne.n	800b444 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b440:	2302      	movs	r3, #2
 800b442:	e02d      	b.n	800b4a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2224      	movs	r2, #36	@ 0x24
 800b450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	681a      	ldr	r2, [r3, #0]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f022 0201 	bic.w	r2, r2, #1
 800b46a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f811 	bl	800b4a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68fa      	ldr	r2, [r7, #12]
 800b48c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2220      	movs	r2, #32
 800b492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d108      	bne.n	800b4ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4c8:	e031      	b.n	800b52e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4ca:	2310      	movs	r3, #16
 800b4cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4ce:	2310      	movs	r3, #16
 800b4d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	0e5b      	lsrs	r3, r3, #25
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	f003 0307 	and.w	r3, r3, #7
 800b4e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	0f5b      	lsrs	r3, r3, #29
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	f003 0307 	and.w	r3, r3, #7
 800b4f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4f2:	7bbb      	ldrb	r3, [r7, #14]
 800b4f4:	7b3a      	ldrb	r2, [r7, #12]
 800b4f6:	4911      	ldr	r1, [pc, #68]	@ (800b53c <UARTEx_SetNbDataToProcess+0x94>)
 800b4f8:	5c8a      	ldrb	r2, [r1, r2]
 800b4fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4fe:	7b3a      	ldrb	r2, [r7, #12]
 800b500:	490f      	ldr	r1, [pc, #60]	@ (800b540 <UARTEx_SetNbDataToProcess+0x98>)
 800b502:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b504:	fb93 f3f2 	sdiv	r3, r3, r2
 800b508:	b29a      	uxth	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b510:	7bfb      	ldrb	r3, [r7, #15]
 800b512:	7b7a      	ldrb	r2, [r7, #13]
 800b514:	4909      	ldr	r1, [pc, #36]	@ (800b53c <UARTEx_SetNbDataToProcess+0x94>)
 800b516:	5c8a      	ldrb	r2, [r1, r2]
 800b518:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b51c:	7b7a      	ldrb	r2, [r7, #13]
 800b51e:	4908      	ldr	r1, [pc, #32]	@ (800b540 <UARTEx_SetNbDataToProcess+0x98>)
 800b520:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b522:	fb93 f3f2 	sdiv	r3, r3, r2
 800b526:	b29a      	uxth	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b52e:	bf00      	nop
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
 800b53a:	bf00      	nop
 800b53c:	0800b5e4 	.word	0x0800b5e4
 800b540:	0800b5ec 	.word	0x0800b5ec

0800b544 <memset>:
 800b544:	4402      	add	r2, r0
 800b546:	4603      	mov	r3, r0
 800b548:	4293      	cmp	r3, r2
 800b54a:	d100      	bne.n	800b54e <memset+0xa>
 800b54c:	4770      	bx	lr
 800b54e:	f803 1b01 	strb.w	r1, [r3], #1
 800b552:	e7f9      	b.n	800b548 <memset+0x4>

0800b554 <__libc_init_array>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	4d0d      	ldr	r5, [pc, #52]	@ (800b58c <__libc_init_array+0x38>)
 800b558:	4c0d      	ldr	r4, [pc, #52]	@ (800b590 <__libc_init_array+0x3c>)
 800b55a:	1b64      	subs	r4, r4, r5
 800b55c:	10a4      	asrs	r4, r4, #2
 800b55e:	2600      	movs	r6, #0
 800b560:	42a6      	cmp	r6, r4
 800b562:	d109      	bne.n	800b578 <__libc_init_array+0x24>
 800b564:	4d0b      	ldr	r5, [pc, #44]	@ (800b594 <__libc_init_array+0x40>)
 800b566:	4c0c      	ldr	r4, [pc, #48]	@ (800b598 <__libc_init_array+0x44>)
 800b568:	f000 f818 	bl	800b59c <_init>
 800b56c:	1b64      	subs	r4, r4, r5
 800b56e:	10a4      	asrs	r4, r4, #2
 800b570:	2600      	movs	r6, #0
 800b572:	42a6      	cmp	r6, r4
 800b574:	d105      	bne.n	800b582 <__libc_init_array+0x2e>
 800b576:	bd70      	pop	{r4, r5, r6, pc}
 800b578:	f855 3b04 	ldr.w	r3, [r5], #4
 800b57c:	4798      	blx	r3
 800b57e:	3601      	adds	r6, #1
 800b580:	e7ee      	b.n	800b560 <__libc_init_array+0xc>
 800b582:	f855 3b04 	ldr.w	r3, [r5], #4
 800b586:	4798      	blx	r3
 800b588:	3601      	adds	r6, #1
 800b58a:	e7f2      	b.n	800b572 <__libc_init_array+0x1e>
 800b58c:	0800b5fc 	.word	0x0800b5fc
 800b590:	0800b5fc 	.word	0x0800b5fc
 800b594:	0800b5fc 	.word	0x0800b5fc
 800b598:	0800b600 	.word	0x0800b600

0800b59c <_init>:
 800b59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b59e:	bf00      	nop
 800b5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5a2:	bc08      	pop	{r3}
 800b5a4:	469e      	mov	lr, r3
 800b5a6:	4770      	bx	lr

0800b5a8 <_fini>:
 800b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5aa:	bf00      	nop
 800b5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ae:	bc08      	pop	{r3}
 800b5b0:	469e      	mov	lr, r3
 800b5b2:	4770      	bx	lr
