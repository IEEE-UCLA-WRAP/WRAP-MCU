
WRAP_RX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e458  080002b0  080002b0  000012b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  0800e708  0800e708  0000f708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e930  0800e930  0000f930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e938  0800e938  0000f938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e93c  0800e93c  0000f93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000498  24000000  0800e940  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000278d8  24000498  0800edd8  00010498  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24027d70  0800edd8  00010d70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00010498  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d231  00000000  00000000  000104c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003360  00000000  00000000  0002d6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015f0  00000000  00000000  00030a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010f8  00000000  00000000  00032048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032d22  00000000  00000000  00033140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e0ca  00000000  00000000  00065e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154a88  00000000  00000000  00083f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000b8  00000000  00000000  001d89b4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000062d4  00000000  00000000  001d8a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001ded40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loc    000026a0  00000000  00000000  001dedaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000020  00000000  00000000  001e144f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	@ (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000498 	.word	0x24000498
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0800e6f0 	.word	0x0800e6f0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	@ (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	@ (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	2400049c 	.word	0x2400049c
 80002ec:	0800e6f0 	.word	0x0800e6f0

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08c      	sub	sp, #48	@ 0x30
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e6:	f000 ff7d 	bl	80014e4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f001 fc2d 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f90f 	bl	8000810 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005f2:	f000 f9cf 	bl	8000994 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f6:	f000 fb95 	bl	8000d24 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fa:	f000 fb73 	bl	8000ce4 <MX_DMA_Init>
  MX_ADC1_Init();
 80005fe:	f000 f9f9 	bl	80009f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000602:	f000 fa75 	bl	8000af0 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000606:	f000 fb21 	bl	8000c4c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 800060a:	f000 fad1 	bl	8000bb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start timers
  HAL_TIM_Base_Start(&htim2);
 800060e:	486b      	ldr	r0, [pc, #428]	@ (80007bc <main+0x1dc>)
 8000610:	f00a f90c 	bl	800a82c <HAL_TIM_Base_Start>

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
  HAL_ADC_Start(&hadc2);
 8000614:	486a      	ldr	r0, [pc, #424]	@ (80007c0 <main+0x1e0>)
 8000616:	f002 f805 	bl	8002624 <HAL_ADC_Start>

  // Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800061a:	f241 6244 	movw	r2, #5700	@ 0x1644
 800061e:	4969      	ldr	r1, [pc, #420]	@ (80007c4 <main+0x1e4>)
 8000620:	4869      	ldr	r0, [pc, #420]	@ (80007c8 <main+0x1e8>)
 8000622:	f002 ffeb 	bl	80035fc <HAL_ADCEx_MultiModeStart_DMA>

  uint16_t * samples;
  uint8_t packet_found;

  // setup params
  params_r params = {.CL_phase = 0,
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	f04f 0300 	mov.w	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	f04f 0300 	mov.w	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	f04f 0300 	mov.w	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b63      	ldr	r3, [pc, #396]	@ (80007cc <main+0x1ec>)
 8000640:	617b      	str	r3, [r7, #20]

    /* USER CODE BEGIN 3 */

	// execute one buffer at a time. Look at SWV console to see if computation time is too long
	// alias buffer for ease
	if (buff_flag_1) {
 8000642:	4b63      	ldr	r3, [pc, #396]	@ (80007d0 <main+0x1f0>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <main+0x70>
	  samples = buffer_1;
 800064c:	4b61      	ldr	r3, [pc, #388]	@ (80007d4 <main+0x1f4>)
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	if (buff_flag_2) {
 8000650:	4b61      	ldr	r3, [pc, #388]	@ (80007d8 <main+0x1f8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <main+0x7e>
	  samples = buffer_2;
 800065a:	4b60      	ldr	r3, [pc, #384]	@ (80007dc <main+0x1fc>)
 800065c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	if (buff_flag_1 || buff_flag_2) {
 800065e:	4b5c      	ldr	r3, [pc, #368]	@ (80007d0 <main+0x1f0>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2b00      	cmp	r3, #0
 8000666:	d104      	bne.n	8000672 <main+0x92>
 8000668:	4b5b      	ldr	r3, [pc, #364]	@ (80007d8 <main+0x1f8>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0e7      	beq.n	8000642 <main+0x62>
	  packet_found = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	76fb      	strb	r3, [r7, #27]
	  // demodulate buffer
	  start = __HAL_TIM_GET_COUNTER(&htim2);
 8000676:	4b51      	ldr	r3, [pc, #324]	@ (80007bc <main+0x1dc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800067c:	4a58      	ldr	r2, [pc, #352]	@ (80007e0 <main+0x200>)
 800067e:	6013      	str	r3, [r2, #0]
	  num_symbs = demodulate(samples, temp_symbs, &params);
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	461a      	mov	r2, r3
 8000684:	4957      	ldr	r1, [pc, #348]	@ (80007e4 <main+0x204>)
 8000686:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000688:	f000 fc84 	bl	8000f94 <demodulate>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b55      	ldr	r3, [pc, #340]	@ (80007e8 <main+0x208>)
 8000692:	601a      	str	r2, [r3, #0]
	  end = __HAL_TIM_GET_COUNTER(&htim2);
 8000694:	4b49      	ldr	r3, [pc, #292]	@ (80007bc <main+0x1dc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069a:	4a54      	ldr	r2, [pc, #336]	@ (80007ec <main+0x20c>)
 800069c:	6013      	str	r3, [r2, #0]

	  demod_time = end - start;
 800069e:	4b53      	ldr	r3, [pc, #332]	@ (80007ec <main+0x20c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b4f      	ldr	r3, [pc, #316]	@ (80007e0 <main+0x200>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	4a51      	ldr	r2, [pc, #324]	@ (80007f0 <main+0x210>)
 80006aa:	6013      	str	r3, [r2, #0]

	  total_symbs += num_symbs;
 80006ac:	4b51      	ldr	r3, [pc, #324]	@ (80007f4 <main+0x214>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <main+0x208>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4413      	add	r3, r2
 80006b6:	4a4f      	ldr	r2, [pc, #316]	@ (80007f4 <main+0x214>)
 80006b8:	6013      	str	r3, [r2, #0]
	  // add temp_symbs to running buffer for correlation
	  // shift latest entries
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 80006ba:	2300      	movs	r3, #0
 80006bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006be:	e00f      	b.n	80006e0 <main+0x100>
		  symbol_buffer[j] = symbol_buffer[j+num_symbs];
 80006c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80006c2:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <main+0x208>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a4b      	ldr	r2, [pc, #300]	@ (80007f8 <main+0x218>)
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4949      	ldr	r1, [pc, #292]	@ (80007f8 <main+0x218>)
 80006d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < SYMBOL_BUFF-num_symbs; j++) {
 80006da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006dc:	3301      	adds	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80006e0:	4b41      	ldr	r3, [pc, #260]	@ (80007e8 <main+0x208>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f1c3 0239 	rsb	r2, r3, #57	@ 0x39
 80006e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d8e8      	bhi.n	80006c0 <main+0xe0>
	  }
	  for (int j = 0; j < num_symbs; j++) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80006f2:	e010      	b.n	8000716 <main+0x136>
		  symbol_buffer[SYMBOL_BUFF-1-num_symbs+j] = temp_symbs[j];
 80006f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f6:	4b3c      	ldr	r3, [pc, #240]	@ (80007e8 <main+0x208>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	3338      	adds	r3, #56	@ 0x38
 80006fe:	4939      	ldr	r1, [pc, #228]	@ (80007e4 <main+0x204>)
 8000700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	440a      	add	r2, r1
 8000706:	6812      	ldr	r2, [r2, #0]
 8000708:	493b      	ldr	r1, [pc, #236]	@ (80007f8 <main+0x218>)
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	440b      	add	r3, r1
 800070e:	601a      	str	r2, [r3, #0]
	  for (int j = 0; j < num_symbs; j++) {
 8000710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000712:	3301      	adds	r3, #1
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
 8000716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000718:	4b33      	ldr	r3, [pc, #204]	@ (80007e8 <main+0x208>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	429a      	cmp	r2, r3
 800071e:	d3e9      	bcc.n	80006f4 <main+0x114>
	  }

	  if (total_symbs >= NUM_SYMBS) {
 8000720:	4b34      	ldr	r3, [pc, #208]	@ (80007f4 <main+0x214>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b1c      	cmp	r3, #28
 8000726:	d93e      	bls.n	80007a6 <main+0x1c6>
			packet_found = find_packet(symbol_buffer, bits, SYMBOL_BUFF);
 8000728:	2239      	movs	r2, #57	@ 0x39
 800072a:	4934      	ldr	r1, [pc, #208]	@ (80007fc <main+0x21c>)
 800072c:	4832      	ldr	r0, [pc, #200]	@ (80007f8 <main+0x218>)
 800072e:	f000 fe01 	bl	8001334 <find_packet>
 8000732:	4603      	mov	r3, r0
 8000734:	76fb      	strb	r3, [r7, #27]
			if (packet_found) {
 8000736:	7efb      	ldrb	r3, [r7, #27]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d031      	beq.n	80007a0 <main+0x1c0>
				for (int i = 0; i < NUM_SYMBS - (NUM_PACKET_H * PACKET_HEADER_LEN); i = i+8) {
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
 8000740:	e025      	b.n	800078e <main+0x1ae>
					result = 0;
 8000742:	4b2f      	ldr	r3, [pc, #188]	@ (8000800 <main+0x220>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 8; j++)
 8000748:	2300      	movs	r3, #0
 800074a:	61fb      	str	r3, [r7, #28]
 800074c:	e013      	b.n	8000776 <main+0x196>
					{
						result <<= 1;
 800074e:	4b2c      	ldr	r3, [pc, #176]	@ (8000800 <main+0x220>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <main+0x220>)
 8000758:	701a      	strb	r2, [r3, #0]
						result += bits[i + j];
 800075a:	6a3a      	ldr	r2, [r7, #32]
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	4413      	add	r3, r2
 8000760:	4a26      	ldr	r2, [pc, #152]	@ (80007fc <main+0x21c>)
 8000762:	5cd2      	ldrb	r2, [r2, r3]
 8000764:	4b26      	ldr	r3, [pc, #152]	@ (8000800 <main+0x220>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4413      	add	r3, r2
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b24      	ldr	r3, [pc, #144]	@ (8000800 <main+0x220>)
 800076e:	701a      	strb	r2, [r3, #0]
					for(int j = 0; j < 8; j++)
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	3301      	adds	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	2b07      	cmp	r3, #7
 800077a:	dde8      	ble.n	800074e <main+0x16e>
					}
					t_str[i>>3] = result;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	10db      	asrs	r3, r3, #3
 8000780:	4a1f      	ldr	r2, [pc, #124]	@ (8000800 <main+0x220>)
 8000782:	7811      	ldrb	r1, [r2, #0]
 8000784:	4a1f      	ldr	r2, [pc, #124]	@ (8000804 <main+0x224>)
 8000786:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < NUM_SYMBS - (NUM_PACKET_H * PACKET_HEADER_LEN); i = i+8) {
 8000788:	6a3b      	ldr	r3, [r7, #32]
 800078a:	3308      	adds	r3, #8
 800078c:	623b      	str	r3, [r7, #32]
 800078e:	6a3b      	ldr	r3, [r7, #32]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	ddd6      	ble.n	8000742 <main+0x162>
				}
				HAL_UART_Transmit(&huart3, (uint8_t *)t_str, sizeof(t_str), 100);
 8000794:	2364      	movs	r3, #100	@ 0x64
 8000796:	2202      	movs	r2, #2
 8000798:	491a      	ldr	r1, [pc, #104]	@ (8000804 <main+0x224>)
 800079a:	481b      	ldr	r0, [pc, #108]	@ (8000808 <main+0x228>)
 800079c:	f00a fbd0 	bl	800af40 <HAL_UART_Transmit>
			}

			total_symbs = 0;
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <main+0x214>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
	  }
	  buff_process = RESET;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <main+0x22c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <main+0x1f0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <main+0x1f8>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
	if (buff_flag_1) {
 80007b8:	e743      	b.n	8000642 <main+0x62>
 80007ba:	bf00      	nop
 80007bc:	240005f4 	.word	0x240005f4
 80007c0:	24000518 	.word	0x24000518
 80007c4:	240006d4 	.word	0x240006d4
 80007c8:	240004b4 	.word	0x240004b4
 80007cc:	42c80000 	.word	0x42c80000
 80007d0:	2400bad0 	.word	0x2400bad0
 80007d4:	24005fe4 	.word	0x24005fe4
 80007d8:	2400bad1 	.word	0x2400bad1
 80007dc:	24008c6c 	.word	0x24008c6c
 80007e0:	2400bad4 	.word	0x2400bad4
 80007e4:	2400b8f4 	.word	0x2400b8f4
 80007e8:	2400bae0 	.word	0x2400bae0
 80007ec:	2400bad8 	.word	0x2400bad8
 80007f0:	2400badc 	.word	0x2400badc
 80007f4:	2400bae4 	.word	0x2400bae4
 80007f8:	2400b9dc 	.word	0x2400b9dc
 80007fc:	2400bac0 	.word	0x2400bac0
 8000800:	24022321 	.word	0x24022321
 8000804:	2400baf4 	.word	0x2400baf4
 8000808:	24000640 	.word	0x24000640
 800080c:	2400bad2 	.word	0x2400bad2

08000810 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0a4      	sub	sp, #144	@ 0x90
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800081a:	224c      	movs	r2, #76	@ 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f00c ff34 	bl	800d68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000828:	2220      	movs	r2, #32
 800082a:	2100      	movs	r1, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f00c ff2d 	bl	800d68c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
 8000842:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000844:	4b51      	ldr	r3, [pc, #324]	@ (800098c <SystemClock_Config+0x17c>)
 8000846:	f04f 32ff 	mov.w	r2, #4294967295
 800084a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800084e:	2004      	movs	r0, #4
 8000850:	f006 fab2 	bl	8006db8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b4d      	ldr	r3, [pc, #308]	@ (8000990 <SystemClock_Config+0x180>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a4c      	ldr	r2, [pc, #304]	@ (8000990 <SystemClock_Config+0x180>)
 800085e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b4a      	ldr	r3, [pc, #296]	@ (8000990 <SystemClock_Config+0x180>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000870:	bf00      	nop
 8000872:	4b47      	ldr	r3, [pc, #284]	@ (8000990 <SystemClock_Config+0x180>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800087a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800087e:	d1f8      	bne.n	8000872 <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000880:	f006 fa8a 	bl	8006d98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000884:	4b41      	ldr	r3, [pc, #260]	@ (800098c <SystemClock_Config+0x17c>)
 8000886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000888:	4a40      	ldr	r2, [pc, #256]	@ (800098c <SystemClock_Config+0x17c>)
 800088a:	f023 0318 	bic.w	r3, r3, #24
 800088e:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000890:	2327      	movs	r3, #39	@ 0x27
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800089a:	2301      	movs	r3, #1
 800089c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800089e:	2301      	movs	r3, #1
 80008a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008a2:	2340      	movs	r3, #64	@ 0x40
 80008a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008a6:	2301      	movs	r3, #1
 80008a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	2302      	movs	r3, #2
 80008b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 80008b6:	2346      	movs	r3, #70	@ 0x46
 80008b8:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008be:	2304      	movs	r3, #4
 80008c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008c8:	230c      	movs	r3, #12
 80008ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80008de:	4618      	mov	r0, r3
 80008e0:	f006 fac4 	bl	8006e6c <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0xde>
  {
    Error_Handler();
 80008ea:	f000 fe27 	bl	800153c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	233f      	movs	r3, #63	@ 0x3f
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2303      	movs	r3, #3
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008fe:	2340      	movs	r3, #64	@ 0x40
 8000900:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000906:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090c:	2340      	movs	r3, #64	@ 0x40
 800090e:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	2106      	movs	r1, #6
 8000916:	4618      	mov	r0, r3
 8000918:	f006 feda 	bl	80076d0 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000922:	f000 fe0b 	bl	800153c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000926:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800092a:	2100      	movs	r1, #0
 800092c:	2000      	movs	r0, #0
 800092e:	f007 f885 	bl	8007a3c <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 8000932:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000936:	2100      	movs	r1, #0
 8000938:	2001      	movs	r0, #1
 800093a:	f007 f87f 	bl	8007a3c <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <SystemClock_Config+0x17c>)
 8000940:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000944:	4a11      	ldr	r2, [pc, #68]	@ (800098c <SystemClock_Config+0x17c>)
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <SystemClock_Config+0x17c>)
 8000950:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8000954:	f003 0302 	and.w	r3, r3, #2
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8000960:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000964:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800096a:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 800096e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8000970:	2322      	movs	r3, #34	@ 0x22
 8000972:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000974:	2320      	movs	r3, #32
 8000976:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4618      	mov	r0, r3
 800097e:	f009 fd43 	bl	800a408 <HAL_RCCEx_CRSConfig>
}
 8000982:	bf00      	nop
 8000984:	3790      	adds	r7, #144	@ 0x90
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	58024400 	.word	0x58024400
 8000990:	58024800 	.word	0x58024800

08000994 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0b0      	sub	sp, #192	@ 0xc0
 8000998:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	22c0      	movs	r2, #192	@ 0xc0
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f00c fe73 	bl	800d68c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 80009b6:	2312      	movs	r3, #18
 80009b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 80009ba:	2303      	movs	r3, #3
 80009bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009be:	2302      	movs	r3, #2
 80009c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009c6:	23c0      	movs	r3, #192	@ 0xc0
 80009c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 80009ce:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4618      	mov	r0, r3
 80009de:	f007 fa6d 	bl	8007ebc <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 80009e8:	f000 fda8 	bl	800153c <Error_Handler>
  }
}
 80009ec:	bf00      	nop
 80009ee:	37c0      	adds	r7, #192	@ 0xc0
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
 8000a14:	615a      	str	r2, [r3, #20]
 8000a16:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a18:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a1a:	4a33      	ldr	r2, [pc, #204]	@ (8000ae8 <MX_ADC1_Init+0xf4>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a42:	4b28      	ldr	r3, [pc, #160]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a48:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a54:	4b23      	ldr	r3, [pc, #140]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a60:	4b20      	ldr	r3, [pc, #128]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a74:	481b      	ldr	r0, [pc, #108]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a76:	f001 fc7b 	bl	8002370 <HAL_ADC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a80:	f000 fd5c 	bl	800153c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 8000a84:	2307      	movs	r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8000a88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a8c:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 8000a8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000a9c:	f002 feb0 	bl	8003800 <HAL_ADCEx_MultiModeConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000aa6:	f000 fd49 	bl	800153c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_ADC1_Init+0xf8>)
 8000aac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aae:	2306      	movs	r3, #6
 8000ab0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000aba:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000abc:	2304      	movs	r3, #4
 8000abe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	@ (8000ae4 <MX_ADC1_Init+0xf0>)
 8000ace:	f002 f891 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000ad8:	f000 fd30 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	@ 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	240004b4 	.word	0x240004b4
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	0c900008 	.word	0x0c900008

08000af0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b08:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ba8 <MX_ADC2_Init+0xb8>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b14:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b20:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b22:	2204      	movs	r2, #4
 8000b24:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b44:	4b17      	ldr	r3, [pc, #92]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b50:	4b14      	ldr	r3, [pc, #80]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b58:	4812      	ldr	r0, [pc, #72]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b5a:	f001 fc09 	bl	8002370 <HAL_ADC_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 8000b64:	f000 fcea 	bl	800153c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b68:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_ADC2_Init+0xbc>)
 8000b6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6c:	2306      	movs	r3, #6
 8000b6e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b74:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b78:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b8c:	f002 f832 	bl	8002bf4 <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b96:	f000 fcd1 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24000518 	.word	0x24000518
 8000ba8:	40022100 	.word	0x40022100
 8000bac:	0c900008 	.word	0x0c900008

08000bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bd8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000bdc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000be6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf8:	4813      	ldr	r0, [pc, #76]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000bfa:	f009 fdbf 	bl	800a77c <HAL_TIM_Base_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c04:	f000 fc9a 	bl	800153c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000c16:	f009 fe79 	bl	800a90c <HAL_TIM_ConfigClockSource>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c20:	f000 fc8c 	bl	800153c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c24:	2300      	movs	r3, #0
 8000c26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2c:	1d3b      	adds	r3, r7, #4
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_TIM2_Init+0x98>)
 8000c32:	f00a f8a7 	bl	800ad84 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c3c:	f000 fc7e 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	3720      	adds	r7, #32
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	240005f4 	.word	0x240005f4

08000c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c52:	4a23      	ldr	r2, [pc, #140]	@ (8000ce0 <MX_USART3_UART_Init+0x94>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c56:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c72:	220c      	movs	r2, #12
 8000c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c88:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c8e:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c94:	4811      	ldr	r0, [pc, #68]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000c96:	f00a f903 	bl	800aea0 <HAL_UART_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f000 fc4c 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000ca8:	f00b fed6 	bl	800ca58 <HAL_UARTEx_SetTxFifoThreshold>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 fc43 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4808      	ldr	r0, [pc, #32]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cba:	f00b ff0b 	bl	800cad4 <HAL_UARTEx_SetRxFifoThreshold>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cc4:	f000 fc3a 	bl	800153c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_USART3_UART_Init+0x90>)
 8000cca:	f00b fe8c 	bl	800c9e6 <HAL_UARTEx_DisableFifoMode>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cd4:	f000 fc32 	bl	800153c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	24000640 	.word	0x24000640
 8000ce0:	40004800 	.word	0x40004800

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cea:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <MX_DMA_Init+0x3c>)
 8000cec:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d20 <MX_DMA_Init+0x3c>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000cfa:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_DMA_Init+0x3c>)
 8000cfc:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	200b      	movs	r0, #11
 8000d0e:	f002 feee 	bl	8003aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d12:	200b      	movs	r0, #11
 8000d14:	f002 ff05 	bl	8003b22 <HAL_NVIC_EnableIRQ>

}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	58024400 	.word	0x58024400

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	@ 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d40:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d42:	f043 0304 	orr.w	r3, r3, #4
 8000d46:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d4a:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d4c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d58:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d5e:	4a31      	ldr	r2, [pc, #196]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d64:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d68:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d6a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b2b      	ldr	r3, [pc, #172]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d7c:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000d86:	4b27      	ldr	r3, [pc, #156]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d88:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d94:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d96:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000d9a:	4a22      	ldr	r2, [pc, #136]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000da4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <MX_GPIO_Init+0x100>)
 8000da6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	607b      	str	r3, [r7, #4]
 8000db0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2120      	movs	r1, #32
 8000db6:	481c      	ldr	r0, [pc, #112]	@ (8000e28 <MX_GPIO_Init+0x104>)
 8000db8:	f005 ffd4 	bl	8006d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4815      	ldr	r0, [pc, #84]	@ (8000e28 <MX_GPIO_Init+0x104>)
 8000dd4:	f005 fe16 	bl	8006a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dee:	f107 0314 	add.w	r3, r7, #20
 8000df2:	4619      	mov	r1, r3
 8000df4:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_GPIO_Init+0x108>)
 8000df6:	f005 fe05 	bl	8006a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e00:	2302      	movs	r3, #2
 8000e02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4804      	ldr	r0, [pc, #16]	@ (8000e28 <MX_GPIO_Init+0x104>)
 8000e18:	f005 fdf4 	bl	8006a04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	@ 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020000 	.word	0x58020000
 8000e2c:	58020800 	.word	0x58020800

08000e30 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2120      	movs	r1, #32
 8000e3c:	481d      	ldr	r0, [pc, #116]	@ (8000eb4 <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000e3e:	f005 ff91 	bl	8006d64 <HAL_GPIO_WritePin>

  adc_start = __HAL_TIM_GET_COUNTER(&htim2);
 8000e42:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e48:	4a1c      	ldr	r2, [pc, #112]	@ (8000ebc <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8000e4a:	6013      	str	r3, [r2, #0]

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec0 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d129      	bne.n	8000eaa <HAL_ADC_ConvHalfCpltCallback+0x7a>
	  buff_process = SET;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <HAL_ADC_ConvHalfCpltCallback+0x90>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = SET;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <HAL_ADC_ConvHalfCpltCallback+0x94>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 8000e62:	4b19      	ldr	r3, [pc, #100]	@ (8000ec8 <HAL_ADC_ConvHalfCpltCallback+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	e018      	b.n	8000ea0 <HAL_ADC_ConvHalfCpltCallback+0x70>
	  {
		  buffer_1[2*j] = (uint16_t)(adc_buf[j]&0x0000FFFF);
 8000e6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	b291      	uxth	r1, r2
 8000e7c:	4a14      	ldr	r2, [pc, #80]	@ (8000ed0 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000e7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_1[2*j+1] = (uint16_t)(adc_buf[j]>>16);
 8000e82:	4a12      	ldr	r2, [pc, #72]	@ (8000ecc <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8a:	0c1a      	lsrs	r2, r3, #16
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	3301      	adds	r3, #1
 8000e92:	b291      	uxth	r1, r2
 8000e94:	4a0e      	ldr	r2, [pc, #56]	@ (8000ed0 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000e96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f640 3221 	movw	r2, #2849	@ 0xb21
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	dde1      	ble.n	8000e6e <HAL_ADC_ConvHalfCpltCallback+0x3e>
	  }
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	58020000 	.word	0x58020000
 8000eb8:	240005f4 	.word	0x240005f4
 8000ebc:	2400bae8 	.word	0x2400bae8
 8000ec0:	2400bad2 	.word	0x2400bad2
 8000ec4:	2400bad0 	.word	0x2400bad0
 8000ec8:	2400bad1 	.word	0x2400bad1
 8000ecc:	240006d4 	.word	0x240006d4
 8000ed0:	24005fe4 	.word	0x24005fe4

08000ed4 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2120      	movs	r1, #32
 8000ee0:	4822      	ldr	r0, [pc, #136]	@ (8000f6c <HAL_ADC_ConvCpltCallback+0x98>)
 8000ee2:	f005 ff3f 	bl	8006d64 <HAL_GPIO_WritePin>

  adc_end = __HAL_TIM_GET_COUNTER(&htim2);
 8000ee6:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <HAL_ADC_ConvCpltCallback+0x9c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eec:	4a21      	ldr	r2, [pc, #132]	@ (8000f74 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000eee:	6013      	str	r3, [r2, #0]
  adc_time = adc_end - adc_start;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	@ (8000f74 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	4a20      	ldr	r2, [pc, #128]	@ (8000f7c <HAL_ADC_ConvCpltCallback+0xa8>)
 8000efc:	6013      	str	r3, [r2, #0]

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <HAL_ADC_ConvCpltCallback+0xac>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d12d      	bne.n	8000f64 <HAL_ADC_ConvCpltCallback+0x90>
	  buff_process = SET;
 8000f08:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_ADC_ConvCpltCallback+0xac>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = SET;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f84 <HAL_ADC_ConvCpltCallback+0xb0>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 8000f14:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <HAL_ADC_ConvCpltCallback+0xb4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	e01c      	b.n	8000f5a <HAL_ADC_ConvCpltCallback+0x86>
		  buffer_2[2*j] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]&0x0000FFFF);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f603 3322 	addw	r3, r3, #2850	@ 0xb22
 8000f26:	4a19      	ldr	r2, [pc, #100]	@ (8000f8c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	b291      	uxth	r1, r2
 8000f32:	4a17      	ldr	r2, [pc, #92]	@ (8000f90 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_2[2*j+1] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]>>16);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f603 3322 	addw	r3, r3, #2850	@ 0xb22
 8000f3e:	4a13      	ldr	r2, [pc, #76]	@ (8000f8c <HAL_ADC_ConvCpltCallback+0xb8>)
 8000f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f44:	0c1a      	lsrs	r2, r3, #16
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b291      	uxth	r1, r2
 8000f4e:	4a10      	ldr	r2, [pc, #64]	@ (8000f90 <HAL_ADC_ConvCpltCallback+0xbc>)
 8000f50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3301      	adds	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f640 3221 	movw	r2, #2849	@ 0xb21
 8000f60:	4293      	cmp	r3, r2
 8000f62:	dddd      	ble.n	8000f20 <HAL_ADC_ConvCpltCallback+0x4c>
	  }
  }
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	58020000 	.word	0x58020000
 8000f70:	240005f4 	.word	0x240005f4
 8000f74:	2400baec 	.word	0x2400baec
 8000f78:	2400bae8 	.word	0x2400bae8
 8000f7c:	2400baf0 	.word	0x2400baf0
 8000f80:	2400bad2 	.word	0x2400bad2
 8000f84:	2400bad1 	.word	0x2400bad1
 8000f88:	2400bad0 	.word	0x2400bad0
 8000f8c:	240006d4 	.word	0x240006d4
 8000f90:	24008c6c 	.word	0x24008c6c

08000f94 <demodulate>:

int demodulate(const uint16_t * samples, int * symbs, params_r * params) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af02      	add	r7, sp, #8
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]

    normalize(samples, norm_samples);
 8000fa0:	4928      	ldr	r1, [pc, #160]	@ (8001044 <demodulate+0xb0>)
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 fad0 	bl	8001548 <normalize>

//     Costas Loop
    costas_loop(norm_samples, samples_d, params);
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	4927      	ldr	r1, [pc, #156]	@ (8001048 <demodulate+0xb4>)
 8000fac:	4825      	ldr	r0, [pc, #148]	@ (8001044 <demodulate+0xb0>)
 8000fae:	f000 f857 	bl	8001060 <costas_loop>
    // filter w SRRC
    arm_conv_f32(samples_d, ADC_BUF_LEN, RRC, RRC_LEN, filtered_samps);
 8000fb2:	4b26      	ldr	r3, [pc, #152]	@ (800104c <demodulate+0xb8>)
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	23fb      	movs	r3, #251	@ 0xfb
 8000fb8:	4a25      	ldr	r2, [pc, #148]	@ (8001050 <demodulate+0xbc>)
 8000fba:	f241 6144 	movw	r1, #5700	@ 0x1644
 8000fbe:	4822      	ldr	r0, [pc, #136]	@ (8001048 <demodulate+0xb4>)
 8000fc0:	f00c f8ca 	bl	800d158 <arm_conv_f32>
    // readjust window
    float shift = RRC_LEN/2. - 0.5;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <demodulate+0xc0>)
 8000fc6:	61bb      	str	r3, [r7, #24]
    int k;
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 8000fc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fd0:	ee17 3a90 	vmov	r3, s15
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e01a      	b.n	800100e <demodulate+0x7a>
        k = i - shift;
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe2:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fee:	ee17 3a90 	vmov	r3, s15
 8000ff2:	613b      	str	r3, [r7, #16]
        filtered_samps[k] = filtered_samps[i];
 8000ff4:	4a15      	ldr	r2, [pc, #84]	@ (800104c <demodulate+0xb8>)
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4913      	ldr	r1, [pc, #76]	@ (800104c <demodulate+0xb8>)
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	601a      	str	r2, [r3, #0]
    for (int i = shift ; i < ADC_BUF_LEN+RRC_LEN-1-shift; i++) {
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	3301      	adds	r3, #1
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001018:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001058 <demodulate+0xc4>
 800101c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001020:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	d4d4      	bmi.n	8000fd8 <demodulate+0x44>
    }

    // timing recovery
    int bit_len = timing_recovery(filtered_samps, symbs, params);
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	4806      	ldr	r0, [pc, #24]	@ (800104c <demodulate+0xb8>)
 8001034:	f000 fb20 	bl	8001678 <timing_recovery>
 8001038:	6178      	str	r0, [r7, #20]

    return bit_len;
 800103a:	697b      	ldr	r3, [r7, #20]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2400baf8 	.word	0x2400baf8
 8001048:	24011408 	.word	0x24011408
 800104c:	2401c628 	.word	0x2401c628
 8001050:	24000000 	.word	0x24000000
 8001054:	42fa0000 	.word	0x42fa0000
 8001058:	45b9f000 	.word	0x45b9f000
 800105c:	00000000 	.word	0x00000000

08001060 <costas_loop>:

void costas_loop(float * norm_samples, float * samples_d, params_r * params) {
 8001060:	b580      	push	{r7, lr}
 8001062:	ed2d 8b02 	vpush	{d8}
 8001066:	b0b2      	sub	sp, #200	@ 0xc8
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
    float phase = params->CL_phase;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    float inph[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001078:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800107c:	222c      	movs	r2, #44	@ 0x2c
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f00c fb03 	bl	800d68c <memset>
    float quad[2*ORDER+1] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 8001086:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800108a:	222c      	movs	r2, #44	@ 0x2c
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f00c fafc 	bl	800d68c <memset>
    float inph_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 8001094:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	615a      	str	r2, [r3, #20]
    float quad_[ORDER+1] = {0, 0, 0, 0, 0, 0};
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
 80010b6:	615a      	str	r2, [r3, #20]
    double error = 0;
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	f04f 0300 	mov.w	r3, #0
 80010c0:	e9c7 232a 	strd	r2, r3, [r7, #168]	@ 0xa8
    float integrator = 0; //params->CL_integrator;
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

    float kp = 8.5;
 80010cc:	4b94      	ldr	r3, [pc, #592]	@ (8001320 <costas_loop+0x2c0>)
 80010ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    float ki = 0.1;
 80010d2:	4b94      	ldr	r3, [pc, #592]	@ (8001324 <costas_loop+0x2c4>)
 80010d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    float dt = (float)FC / (float)FS;
 80010d8:	4b93      	ldr	r3, [pc, #588]	@ (8001328 <costas_loop+0x2c8>)
 80010da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 80010de:	2305      	movs	r3, #5
 80010e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80010e4:	e0e7      	b.n	80012b6 <costas_loop+0x256>
        // define t from microcontroller
        int k = i - ORDER;
 80010e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80010ea:	3b05      	subs	r3, #5
 80010ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        inph_[ORDER] = norm_samples[k]*2*cos(2*M_PI*dt*k + phase);
 80010f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001102:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001106:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800110a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800110e:	ed9f 6b82 	vldr	d6, [pc, #520]	@ 8001318 <costas_loop+0x2b8>
 8001112:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001116:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001122:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001126:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800112a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800112e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001132:	eeb0 0b47 	vmov.f64	d0, d7
 8001136:	f00c fb2f 	bl	800d798 <cos>
 800113a:	eeb0 7b40 	vmov.f64	d7, d0
 800113e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001142:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001146:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        quad_[ORDER] = norm_samples[k]*-2*sin(2*M_PI*dt*k + phase);
 800114a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	edd3 7a00 	vldr	s15, [r3]
 8001158:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800115c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001160:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001164:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8001168:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116c:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 8001318 <costas_loop+0x2b8>
 8001170:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001174:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001178:	ee07 3a90 	vmov	s15, r3
 800117c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001180:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001184:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8001188:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800118c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001190:	eeb0 0b47 	vmov.f64	d0, d7
 8001194:	f00c fb4c 	bl	800d830 <sin>
 8001198:	eeb0 7b40 	vmov.f64	d7, d0
 800119c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80011a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        arm_conv_f32(inph_, ORDER+1, lp, ORDER+1, inph);
 80011a8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80011ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2306      	movs	r3, #6
 80011b4:	4a5d      	ldr	r2, [pc, #372]	@ (800132c <costas_loop+0x2cc>)
 80011b6:	2106      	movs	r1, #6
 80011b8:	f00b ffce 	bl	800d158 <arm_conv_f32>
        arm_conv_f32(quad_, ORDER+1, lp, ORDER+1, quad);
 80011bc:	f107 0010 	add.w	r0, r7, #16
 80011c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2306      	movs	r3, #6
 80011c8:	4a58      	ldr	r2, [pc, #352]	@ (800132c <costas_loop+0x2cc>)
 80011ca:	2106      	movs	r1, #6
 80011cc:	f00b ffc4 	bl	800d158 <arm_conv_f32>

        samples_d[k] = inph[ORDER];
 80011d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	4413      	add	r3, r2
 80011da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80011de:	601a      	str	r2, [r3, #0]
        Quad[k] = quad[ORDER];
 80011e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80011e2:	4953      	ldr	r1, [pc, #332]	@ (8001330 <costas_loop+0x2d0>)
 80011e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	440b      	add	r3, r1
 80011ec:	601a      	str	r2, [r3, #0]

        error = inph[ORDER] * quad[ORDER];
 80011ee:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80011f2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011fe:	ed87 7b2a 	vstr	d7, [r7, #168]	@ 0xa8
        integrator += ki*error;
 8001202:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001206:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800120a:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800120e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001212:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 8001216:	ee25 7b07 	vmul.f64	d7, d5, d7
 800121a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800121e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001222:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
        phase = phase + kp*error + integrator;
 8001226:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 800122a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800122e:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001232:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001236:	ed97 7b2a 	vldr	d7, [r7, #168]	@ 0xa8
 800123a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800123e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001242:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8001246:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800124a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800124e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001252:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc

        // shift the values of inph_ and quad_
        for (int jx = 1; jx < ORDER+1; jx++) {
 8001256:	2301      	movs	r3, #1
 8001258:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800125c:	e022      	b.n	80012a4 <costas_loop+0x244>
            inph_[jx-1] = inph_[jx];
 800125e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001262:	3b01      	subs	r3, #1
 8001264:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	32c0      	adds	r2, #192	@ 0xc0
 800126c:	443a      	add	r2, r7
 800126e:	3a98      	subs	r2, #152	@ 0x98
 8001270:	6812      	ldr	r2, [r2, #0]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	33c0      	adds	r3, #192	@ 0xc0
 8001276:	443b      	add	r3, r7
 8001278:	3b98      	subs	r3, #152	@ 0x98
 800127a:	601a      	str	r2, [r3, #0]
            quad_[jx-1] = quad_[jx];
 800127c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001280:	3b01      	subs	r3, #1
 8001282:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	32c0      	adds	r2, #192	@ 0xc0
 800128a:	443a      	add	r2, r7
 800128c:	3ab0      	subs	r2, #176	@ 0xb0
 800128e:	6812      	ldr	r2, [r2, #0]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	33c0      	adds	r3, #192	@ 0xc0
 8001294:	443b      	add	r3, r7
 8001296:	3bb0      	subs	r3, #176	@ 0xb0
 8001298:	601a      	str	r2, [r3, #0]
        for (int jx = 1; jx < ORDER+1; jx++) {
 800129a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800129e:	3301      	adds	r3, #1
 80012a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80012a8:	2b05      	cmp	r3, #5
 80012aa:	ddd8      	ble.n	800125e <costas_loop+0x1fe>
    for (int i = ORDER; i < ADC_BUF_LEN+ORDER; i++) {
 80012ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012b0:	3301      	adds	r3, #1
 80012b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80012b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80012ba:	f241 6248 	movw	r2, #5704	@ 0x1648
 80012be:	4293      	cmp	r3, r2
 80012c0:	f77f af11 	ble.w	80010e6 <costas_loop+0x86>
        }
    }
    params->CL_phase = remainder(phase, 2*M_PI);
 80012c4:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 80012c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012cc:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001318 <costas_loop+0x2b8>
 80012d0:	eeb0 0b47 	vmov.f64	d0, d7
 80012d4:	f00c fa20 	bl	800d718 <remainder>
 80012d8:	eeb0 7b40 	vmov.f64	d7, d0
 80012dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a01 	vstr	s15, [r3, #4]
    params->CL_integrator = remainder(integrator, 2*M_PI);
 80012e6:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80012ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012ee:	ed9f 1b0a 	vldr	d1, [pc, #40]	@ 8001318 <costas_loop+0x2b8>
 80012f2:	eeb0 0b47 	vmov.f64	d0, d7
 80012f6:	f00c fa0f 	bl	800d718 <remainder>
 80012fa:	eeb0 7b40 	vmov.f64	d7, d0
 80012fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edc3 7a00 	vstr	s15, [r3]
}
 8001308:	bf00      	nop
 800130a:	37c0      	adds	r7, #192	@ 0xc0
 800130c:	46bd      	mov	sp, r7
 800130e:	ecbd 8b02 	vpop	{d8}
 8001312:	bd80      	pop	{r7, pc}
 8001314:	f3af 8000 	nop.w
 8001318:	54442d18 	.word	0x54442d18
 800131c:	401921fb 	.word	0x401921fb
 8001320:	41080000 	.word	0x41080000
 8001324:	3dcccccd 	.word	0x3dcccccd
 8001328:	3e3851ec 	.word	0x3e3851ec
 800132c:	240003ec 	.word	0x240003ec
 8001330:	24016d18 	.word	0x24016d18

08001334 <find_packet>:

uint8_t find_packet(float * symbs, uint8_t * bits, const int num_symbs) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b0d0      	sub	sp, #320	@ 0x140
 8001338:	af02      	add	r7, sp, #8
 800133a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800133e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001342:	6018      	str	r0, [r3, #0]
 8001344:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001348:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800134c:	6019      	str	r1, [r3, #0]
 800134e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001352:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001356:	601a      	str	r2, [r3, #0]
    // take cross correlation
    float xcorr_out[SYMBOL_BUFF+PACKET_HEADER_LEN-1];
    packet_found = 0;
 8001358:	4b60      	ldr	r3, [pc, #384]	@ (80014dc <find_packet+0x1a8>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
    arm_correlate_f32(packet_header, PACKET_HEADER_LEN, symbs, num_symbs, xcorr_out);
 800135e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001362:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800136c:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	460b      	mov	r3, r1
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	210d      	movs	r1, #13
 800137c:	4858      	ldr	r0, [pc, #352]	@ (80014e0 <find_packet+0x1ac>)
 800137e:	f00b fc35 	bl	800cbec <arm_correlate_f32>

    // find packet
    int shift = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = num_symbs-(NUM_PACKET_H-1)*PACKET_HEADER_LEN - 1; i >= 0; i--) {
 8001388:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800138c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3b01      	subs	r3, #1
 8001394:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001398:	e05c      	b.n	8001454 <find_packet+0x120>
        if (fabs(xcorr_out[i]) > PACKET_HEADER_LEN-1) {
 800139a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800139e:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80013a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	edd3 7a00 	vldr	s15, [r3]
 80013ae:	eef0 7ae7 	vabs.f32	s15, s15
 80013b2:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80013b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	dd44      	ble.n	800144a <find_packet+0x116>
            shift = SYMBOL_BUFF+PACKET_HEADER_LEN-1-i;
 80013c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013c4:	f1c3 0345 	rsb	r3, r3, #69	@ 0x45
 80013c8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            packet_found = 1;
 80013cc:	4b43      	ldr	r3, [pc, #268]	@ (80014dc <find_packet+0x1a8>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
            if (xcorr_out[i] < 0) {
 80013d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80013d6:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 80013da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d400      	bmi.n	80013f2 <find_packet+0xbe>
				for (int j = 0; j < BITS; j++) {
					symbs[shift + j] = symbs[shift+ j]*-1;
				}
            }
            break;
 80013f0:	e034      	b.n	800145c <find_packet+0x128>
				for (int j = 0; j < BITS; j++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80013f8:	e022      	b.n	8001440 <find_packet+0x10c>
					symbs[shift + j] = symbs[shift+ j]*-1;
 80013fa:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80013fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800140a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	4413      	add	r3, r2
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800141a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800141e:	4413      	add	r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001426:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	4413      	add	r3, r2
 800142e:	eef1 7a67 	vneg.f32	s15, s15
 8001432:	edc3 7a00 	vstr	s15, [r3]
				for (int j = 0; j < BITS; j++) {
 8001436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800143a:	3301      	adds	r3, #1
 800143c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001440:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001444:	2b0f      	cmp	r3, #15
 8001446:	ddd8      	ble.n	80013fa <find_packet+0xc6>
            break;
 8001448:	e008      	b.n	800145c <find_packet+0x128>
    for (int i = num_symbs-(NUM_PACKET_H-1)*PACKET_HEADER_LEN - 1; i >= 0; i--) {
 800144a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800144e:	3b01      	subs	r3, #1
 8001450:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001454:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001458:	2b00      	cmp	r3, #0
 800145a:	da9e      	bge.n	800139a <find_packet+0x66>
        }
    }

    if (!packet_found)
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <find_packet+0x1a8>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <find_packet+0x134>
        return 0;
 8001464:	2300      	movs	r3, #0
 8001466:	e034      	b.n	80014d2 <find_packet+0x19e>

    // convert symbols to bits
    for (int i = 0; i < BITS; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800146e:	e02b      	b.n	80014c8 <find_packet+0x194>
        bits[i] = (symbs[shift+i]+1)*0.5;
 8001470:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001474:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8001480:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8001484:	6812      	ldr	r2, [r2, #0]
 8001486:	4413      	add	r3, r2
 8001488:	edd3 7a00 	vldr	s15, [r3]
 800148c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001498:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 800149c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014a4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80014a8:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80014ac:	6812      	ldr	r2, [r2, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014b4:	edc7 7a00 	vstr	s15, [r7]
 80014b8:	783a      	ldrb	r2, [r7, #0]
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < BITS; i++) {
 80014be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014c2:	3301      	adds	r3, #1
 80014c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80014c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	ddcf      	ble.n	8001470 <find_packet+0x13c>
    }
    return 1;
 80014d0:	2301      	movs	r3, #1
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	24022320 	.word	0x24022320
 80014e0:	24000404 	.word	0x24000404

080014e4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80014f6:	f002 fb2f 	bl	8003b58 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80014fe:	2300      	movs	r3, #0
 8001500:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001506:	231f      	movs	r3, #31
 8001508:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800150a:	2387      	movs	r3, #135	@ 0x87
 800150c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800150e:	2300      	movs	r3, #0
 8001510:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001512:	2300      	movs	r3, #0
 8001514:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001516:	2301      	movs	r3, #1
 8001518:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800151a:	2301      	movs	r3, #1
 800151c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800151e:	2300      	movs	r3, #0
 8001520:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001526:	463b      	mov	r3, r7
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fb4d 	bl	8003bc8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800152e:	2004      	movs	r0, #4
 8001530:	f002 fb2a 	bl	8003b88 <HAL_MPU_Enable>

}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <Error_Handler+0x8>

08001548 <normalize>:
params: parameters that need to be stored intermediately
returns length of symbs array. symbs array must be
allocated for longer than samples/sps + some margin
*/

void normalize(const uint16_t * samples, float * norm_samples) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
        // Normalize signal
    float var = 0, mean = 0;
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
 8001558:	f04f 0300 	mov.w	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
    // find mean
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	e011      	b.n	8001588 <normalize+0x40>
        mean += (float)samples[i];
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001576:	ed97 7a06 	vldr	s14, [r7, #24]
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc7 7a06 	vstr	s15, [r7, #24]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	f241 6243 	movw	r2, #5699	@ 0x1643
 800158e:	4293      	cmp	r3, r2
 8001590:	dde8      	ble.n	8001564 <normalize+0x1c>
    }
    mean /= ADC_BUF_LEN;
 8001592:	ed97 7a06 	vldr	s14, [r7, #24]
 8001596:	eddf 6a35 	vldr	s13, [pc, #212]	@ 800166c <normalize+0x124>
 800159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159e:	edc7 7a06 	vstr	s15, [r7, #24]
    // find sample variance
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	e01b      	b.n	80015e0 <normalize+0x98>
        float temp = (float)samples[i]-mean;
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80015be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c2:	edc7 7a02 	vstr	s15, [r7, #8]
        var += temp * temp;
 80015c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80015ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80015ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80015d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d6:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	3301      	adds	r3, #1
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	f241 6243 	movw	r2, #5699	@ 0x1643
 80015e6:	4293      	cmp	r3, r2
 80015e8:	ddde      	ble.n	80015a8 <normalize+0x60>
    }
    var = var / (ADC_BUF_LEN-1);
 80015ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80015ee:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001670 <normalize+0x128>
 80015f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f6:	edc7 7a07 	vstr	s15, [r7, #28]
    var = sqrt(var)*25;
 80015fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80015fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001602:	eeb0 0b47 	vmov.f64	d0, d7
 8001606:	f00c f8a7 	bl	800d758 <sqrt>
 800160a:	eeb0 7b40 	vmov.f64	d7, d0
 800160e:	eeb3 6b09 	vmov.f64	d6, #57	@ 0x41c80000  25.0
 8001612:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001616:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800161a:	edc7 7a07 	vstr	s15, [r7, #28]

    // normalize
    // divide by 60 arbitrary, just done to get to an ampltiude I used to tune gain values
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e019      	b.n	8001658 <normalize+0x110>
        norm_samples[i] = (((float)samples[i]) - mean)/var;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	4413      	add	r3, r2
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001636:	edd7 7a06 	vldr	s15, [r7, #24]
 800163a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	ed97 7a07 	vldr	s14, [r7, #28]
 800164a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800164e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	3301      	adds	r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f241 6243 	movw	r2, #5699	@ 0x1643
 800165e:	4293      	cmp	r3, r2
 8001660:	dde0      	ble.n	8001624 <normalize+0xdc>
    }
}
 8001662:	bf00      	nop
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	45b22000 	.word	0x45b22000
 8001670:	45b21800 	.word	0x45b21800
 8001674:	00000000 	.word	0x00000000

08001678 <timing_recovery>:



int timing_recovery(float * filtered_samps, float * symbs, params_r * params) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b090      	sub	sp, #64	@ 0x40
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
    const float kp_PLL = 0.1;
 8001684:	4b96      	ldr	r3, [pc, #600]	@ (80018e0 <timing_recovery+0x268>)
 8001686:	623b      	str	r3, [r7, #32]
    const float ki_PLL = 0.05;
 8001688:	4b96      	ldr	r3, [pc, #600]	@ (80018e4 <timing_recovery+0x26c>)
 800168a:	61fb      	str	r3, [r7, #28]
    const float margin = 0.75;
 800168c:	f04f 537d 	mov.w	r3, #1061158912	@ 0x3f400000
 8001690:	61bb      	str	r3, [r7, #24]

    float sps = params->sps;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	63fb      	str	r3, [r7, #60]	@ 0x3c
    int integrator = 0; //params->TR_integrator;
 8001698:	2300      	movs	r3, #0
 800169a:	63bb      	str	r3, [r7, #56]	@ 0x38
    int error = 0, bit_len = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	2300      	movs	r3, #0
 80016a2:	637b      	str	r3, [r7, #52]	@ 0x34
    float prev_phase = 0; // params->TR_phase
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	@ 0x30
    float phase;

    // calculate zero crossings
    for (int i = 0; i < ADC_BUF_LEN-1; i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ae:	e02e      	b.n	800170e <timing_recovery+0x96>
        int temp = copysign(1, (filtered_samps[i+1] * filtered_samps[i]));
 80016b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b2:	3301      	adds	r3, #1
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	ed93 7a00 	vldr	s14, [r3]
 80016be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4413      	add	r3, r2
 80016c6:	edd3 7a00 	vldr	s15, [r3]
 80016ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016d2:	eeb0 1b47 	vmov.f64	d1, d7
 80016d6:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80016da:	f00c f809 	bl	800d6f0 <copysign>
 80016de:	eeb0 7b40 	vmov.f64	d7, d0
 80016e2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80016e6:	ee17 3a90 	vmov	r3, s15
 80016ea:	613b      	str	r3, [r7, #16]
        zc[i] = !(temp+1);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f2:	d102      	bne.n	80016fa <timing_recovery+0x82>
 80016f4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80016f8:	e001      	b.n	80016fe <timing_recovery+0x86>
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	497a      	ldr	r1, [pc, #488]	@ (80018e8 <timing_recovery+0x270>)
 8001700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ADC_BUF_LEN-1; i++) {
 8001708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170a:	3301      	adds	r3, #1
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800170e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001710:	f241 6242 	movw	r2, #5698	@ 0x1642
 8001714:	4293      	cmp	r3, r2
 8001716:	ddcb      	ble.n	80016b0 <timing_recovery+0x38>
    }

    // timing recovery
    for (int i = 1; i < ADC_BUF_LEN; i++) {
 8001718:	2301      	movs	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
 800171c:	e0a0      	b.n	8001860 <timing_recovery+0x1e8>
        phase = prev_phase + 2*M_PI/sps;
 800171e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001722:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001726:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800172a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800172e:	ed9f 4b66 	vldr	d4, [pc, #408]	@ 80018c8 <timing_recovery+0x250>
 8001732:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001736:	ee36 7b07 	vadd.f64	d7, d6, d7
 800173a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800173e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        phase = wrap_to_pi(phase);
 8001742:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8001746:	f000 f8d3 	bl	80018f0 <wrap_to_pi>
 800174a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        if (phase < -M_PI * margin && prev_phase > M_PI * margin) {
 800174e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001752:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001756:	edd7 7a06 	vldr	s15, [r7, #24]
 800175a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800175e:	ed9f 5b5c 	vldr	d5, [pc, #368]	@ 80018d0 <timing_recovery+0x258>
 8001762:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001766:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800176a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176e:	d531      	bpl.n	80017d4 <timing_recovery+0x15c>
 8001770:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001774:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001778:	edd7 7a06 	vldr	s15, [r7, #24]
 800177c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001780:	ed9f 5b55 	vldr	d5, [pc, #340]	@ 80018d8 <timing_recovery+0x260>
 8001784:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001788:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800178c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001790:	dd20      	ble.n	80017d4 <timing_recovery+0x15c>
            symbs[bit_len] = (int)(filtered_samps[i]/fabs(filtered_samps[i]));
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4413      	add	r3, r2
 800179a:	edd3 7a00 	vldr	s15, [r3]
 800179e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	4413      	add	r3, r2
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	eef0 7ae7 	vabs.f32	s15, s15
 80017b2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017ba:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80017be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	4413      	add	r3, r2
 80017c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ca:	edc3 7a00 	vstr	s15, [r3]
            bit_len++;
 80017ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d0:	3301      	adds	r3, #1
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        if (bit_len==SYMBOL_BUFF) {
 80017d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d6:	2b39      	cmp	r3, #57	@ 0x39
 80017d8:	d049      	beq.n	800186e <timing_recovery+0x1f6>
            break;
        }
        if (zc[i-1]){
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	3b01      	subs	r3, #1
 80017de:	4a42      	ldr	r2, [pc, #264]	@ (80018e8 <timing_recovery+0x270>)
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	edd3 7a00 	vldr	s15, [r3]
 80017e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	d031      	beq.n	8001856 <timing_recovery+0x1de>
            error = phase;
 80017f2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80017f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017fa:	ee17 3a90 	vmov	r3, s15
 80017fe:	617b      	str	r3, [r7, #20]
            integrator = integrator + error * ki_PLL;
 8001800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	ee07 3a90 	vmov	s15, r3
 8001810:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001814:	edd7 7a07 	vldr	s15, [r7, #28]
 8001818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800181c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001820:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001824:	ee17 3a90 	vmov	r3, s15
 8001828:	63bb      	str	r3, [r7, #56]	@ 0x38
            sps = SPS + error*kp_PLL + integrator;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	ee07 3a90 	vmov	s15, r3
 8001830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001834:	edd7 7a08 	vldr	s15, [r7, #32]
 8001838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183c:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80018ec <timing_recovery+0x274>
 8001840:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001852:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        }
        prev_phase = phase;
 8001856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001858:	633b      	str	r3, [r7, #48]	@ 0x30
    for (int i = 1; i < ADC_BUF_LEN; i++) {
 800185a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185c:	3301      	adds	r3, #1
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001862:	f241 6243 	movw	r2, #5699	@ 0x1643
 8001866:	4293      	cmp	r3, r2
 8001868:	f77f af59 	ble.w	800171e <timing_recovery+0xa6>
 800186c:	e000      	b.n	8001870 <timing_recovery+0x1f8>
            break;
 800186e:	bf00      	nop
    }
    params->sps = sps;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001874:	611a      	str	r2, [r3, #16]
    params->TR_phase = remainder(phase, 2*M_PI);
 8001876:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800187a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800187e:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 80018c8 <timing_recovery+0x250>
 8001882:	eeb0 0b47 	vmov.f64	d0, d7
 8001886:	f00b ff47 	bl	800d718 <remainder>
 800188a:	eeb0 7b40 	vmov.f64	d7, d0
 800188e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	edc3 7a03 	vstr	s15, [r3, #12]
    params->TR_integrator = remainder(integrator, 2*M_PI);
 8001898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80018a2:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 80018c8 <timing_recovery+0x250>
 80018a6:	eeb0 0b47 	vmov.f64	d0, d7
 80018aa:	f00b ff35 	bl	800d718 <remainder>
 80018ae:	eeb0 7b40 	vmov.f64	d7, d0
 80018b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	edc3 7a02 	vstr	s15, [r3, #8]

    return bit_len;
 80018bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3740      	adds	r7, #64	@ 0x40
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	54442d18 	.word	0x54442d18
 80018cc:	401921fb 	.word	0x401921fb
 80018d0:	54442d18 	.word	0x54442d18
 80018d4:	c00921fb 	.word	0xc00921fb
 80018d8:	54442d18 	.word	0x54442d18
 80018dc:	400921fb 	.word	0x400921fb
 80018e0:	3dcccccd 	.word	0x3dcccccd
 80018e4:	3d4ccccd 	.word	0x3d4ccccd
 80018e8:	24022324 	.word	0x24022324
 80018ec:	42c80000 	.word	0x42c80000

080018f0 <wrap_to_pi>:

float wrap_to_pi(const float x) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	ed87 0a01 	vstr	s0, [r7, #4]
    float mod_x = remainder(x,2*M_PI);
 80018fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80018fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001902:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8001958 <wrap_to_pi+0x68>
 8001906:	eeb0 0b47 	vmov.f64	d0, d7
 800190a:	f00b ff05 	bl	800d718 <remainder>
 800190e:	eeb0 7b40 	vmov.f64	d7, d0
 8001912:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001916:	edc7 7a03 	vstr	s15, [r7, #12]
    return (mod_x > M_PI) ? mod_x - M_PI : mod_x;
 800191a:	edd7 7a03 	vldr	s15, [r7, #12]
 800191e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001922:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8001960 <wrap_to_pi+0x70>
 8001926:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800192a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192e:	dd0a      	ble.n	8001946 <wrap_to_pi+0x56>
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001938:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001960 <wrap_to_pi+0x70>
 800193c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001940:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001944:	e001      	b.n	800194a <wrap_to_pi+0x5a>
 8001946:	edd7 7a03 	vldr	s15, [r7, #12]
}
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	f3af 8000 	nop.w
 8001958:	54442d18 	.word	0x54442d18
 800195c:	401921fb 	.word	0x401921fb
 8001960:	54442d18 	.word	0x54442d18
 8001964:	400921fb 	.word	0x400921fb

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	4b0a      	ldr	r3, [pc, #40]	@ (8001998 <HAL_MspInit+0x30>)
 8001970:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001974:	4a08      	ldr	r2, [pc, #32]	@ (8001998 <HAL_MspInit+0x30>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_MspInit+0x30>)
 8001980:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	58024400 	.word	0x58024400

0800199c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	@ 0x30
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a59      	ldr	r2, [pc, #356]	@ (8001b20 <HAL_ADC_MspInit+0x184>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d16c      	bne.n	8001a98 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80019be:	4b59      	ldr	r3, [pc, #356]	@ (8001b24 <HAL_ADC_MspInit+0x188>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	4a57      	ldr	r2, [pc, #348]	@ (8001b24 <HAL_ADC_MspInit+0x188>)
 80019c6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80019c8:	4b56      	ldr	r3, [pc, #344]	@ (8001b24 <HAL_ADC_MspInit+0x188>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d10e      	bne.n	80019ee <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80019d0:	4b55      	ldr	r3, [pc, #340]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 80019d2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80019d6:	4a54      	ldr	r2, [pc, #336]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 80019d8:	f043 0320 	orr.w	r3, r3, #32
 80019dc:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80019e0:	4b51      	ldr	r3, [pc, #324]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 80019e2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80019e6:	f003 0320 	and.w	r3, r3, #32
 80019ea:	61bb      	str	r3, [r7, #24]
 80019ec:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b4e      	ldr	r3, [pc, #312]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 80019f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80019f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80019fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 8001a00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a0c:	2340      	movs	r3, #64	@ 0x40
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a10:	2303      	movs	r3, #3
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4843      	ldr	r0, [pc, #268]	@ (8001b2c <HAL_ADC_MspInit+0x190>)
 8001a20:	f004 fff0 	bl	8006a04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8001a24:	4b42      	ldr	r3, [pc, #264]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a26:	4a43      	ldr	r2, [pc, #268]	@ (8001b34 <HAL_ADC_MspInit+0x198>)
 8001a28:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a2a:	4b41      	ldr	r3, [pc, #260]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a2c:	2209      	movs	r2, #9
 8001a2e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a30:	4b3f      	ldr	r3, [pc, #252]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a36:	4b3e      	ldr	r3, [pc, #248]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a42:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a44:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a4a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a4c:	4b38      	ldr	r3, [pc, #224]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a52:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a54:	4b36      	ldr	r3, [pc, #216]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a5c:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a62:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a64:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a6a:	4831      	ldr	r0, [pc, #196]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a6c:	f002 f8ec 	bl	8003c48 <HAL_DMA_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8001a76:	f7ff fd61 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a7e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a80:	4a2b      	ldr	r2, [pc, #172]	@ (8001b30 <HAL_ADC_MspInit+0x194>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2012      	movs	r0, #18
 8001a8c:	f002 f82f 	bl	8003aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001a90:	2012      	movs	r0, #18
 8001a92:	f002 f846 	bl	8003b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a96:	e03f      	b.n	8001b18 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a26      	ldr	r2, [pc, #152]	@ (8001b38 <HAL_ADC_MspInit+0x19c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d13a      	bne.n	8001b18 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_ADC_MspInit+0x188>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8001b24 <HAL_ADC_MspInit+0x188>)
 8001aaa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <HAL_ADC_MspInit+0x188>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d10e      	bne.n	8001ad2 <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 8001ab6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001aba:	4a1b      	ldr	r2, [pc, #108]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 8001abc:	f043 0320 	orr.w	r3, r3, #32
 8001ac0:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001ac4:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 8001ac6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 8001ad4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ad8:	4a13      	ldr	r2, [pc, #76]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <HAL_ADC_MspInit+0x18c>)
 8001ae4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001af0:	2340      	movs	r3, #64	@ 0x40
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af4:	2303      	movs	r3, #3
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	480a      	ldr	r0, [pc, #40]	@ (8001b2c <HAL_ADC_MspInit+0x190>)
 8001b04:	f004 ff7e 	bl	8006a04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	2012      	movs	r0, #18
 8001b0e:	f001 ffee 	bl	8003aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b12:	2012      	movs	r0, #18
 8001b14:	f002 f805 	bl	8003b22 <HAL_NVIC_EnableIRQ>
}
 8001b18:	bf00      	nop
 8001b1a:	3730      	adds	r7, #48	@ 0x30
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40022000 	.word	0x40022000
 8001b24:	24027c30 	.word	0x24027c30
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	58020000 	.word	0x58020000
 8001b30:	2400057c 	.word	0x2400057c
 8001b34:	40020010 	.word	0x40020010
 8001b38:	40022100 	.word	0x40022100

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b4c:	d10e      	bne.n	8001b6c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <HAL_TIM_Base_MspInit+0x3c>)
 8001b50:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b54:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <HAL_TIM_Base_MspInit+0x3c>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_TIM_Base_MspInit+0x3c>)
 8001b60:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	58024400 	.word	0x58024400

08001b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b0ba      	sub	sp, #232	@ 0xe8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b94:	f107 0310 	add.w	r3, r7, #16
 8001b98:	22c0      	movs	r2, #192	@ 0xc0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f00b fd75 	bl	800d68c <memset>
  if(huart->Instance==USART3)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c54 <HAL_UART_MspInit+0xd8>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d14e      	bne.n	8001c4a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bac:	f04f 0202 	mov.w	r2, #2
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bbe:	f107 0310 	add.w	r3, r7, #16
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 f97a 	bl	8007ebc <HAL_RCCEx_PeriphCLKConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001bce:	f7ff fcb5 	bl	800153c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bd2:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <HAL_UART_MspInit+0xdc>)
 8001bd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001bd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c58 <HAL_UART_MspInit+0xdc>)
 8001bda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bde:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <HAL_UART_MspInit+0xdc>)
 8001be4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001be8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_UART_MspInit+0xdc>)
 8001bf2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001bf6:	4a18      	ldr	r2, [pc, #96]	@ (8001c58 <HAL_UART_MspInit+0xdc>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001c00:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_UART_MspInit+0xdc>)
 8001c02:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c28:	2307      	movs	r3, #7
 8001c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4809      	ldr	r0, [pc, #36]	@ (8001c5c <HAL_UART_MspInit+0xe0>)
 8001c36:	f004 fee5 	bl	8006a04 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	2027      	movs	r0, #39	@ 0x27
 8001c40:	f001 ff55 	bl	8003aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c44:	2027      	movs	r0, #39	@ 0x27
 8001c46:	f001 ff6c 	bl	8003b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	37e8      	adds	r7, #232	@ 0xe8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40004800 	.word	0x40004800
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	58020c00 	.word	0x58020c00

08001c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <NMI_Handler+0x4>

08001c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <HardFault_Handler+0x4>

08001c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <MemManage_Handler+0x4>

08001c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <BusFault_Handler+0x4>

08001c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <UsageFault_Handler+0x4>

08001c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cb6:	f000 f939 	bl	8001f2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	@ (8001cd0 <DMA1_Stream0_IRQHandler+0x10>)
 8001cc6:	f003 fb1b 	bl	8005300 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	2400057c 	.word	0x2400057c

08001cd4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001cd8:	4803      	ldr	r0, [pc, #12]	@ (8001ce8 <ADC_IRQHandler+0x14>)
 8001cda:	f000 fd5d 	bl	8002798 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001cde:	4803      	ldr	r0, [pc, #12]	@ (8001cec <ADC_IRQHandler+0x18>)
 8001ce0:	f000 fd5a 	bl	8002798 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	240004b4 	.word	0x240004b4
 8001cec:	24000518 	.word	0x24000518

08001cf0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cf4:	4802      	ldr	r0, [pc, #8]	@ (8001d00 <USART3_IRQHandler+0x10>)
 8001cf6:	f009 f9b1 	bl	800b05c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	24000640 	.word	0x24000640

08001d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d08:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <SystemInit+0xd0>)
 8001d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d0e:	4a31      	ldr	r2, [pc, #196]	@ (8001dd4 <SystemInit+0xd0>)
 8001d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d18:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd8 <SystemInit+0xd4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d807      	bhi.n	8001d34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d24:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd8 <SystemInit+0xd4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 030f 	bic.w	r3, r3, #15
 8001d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001dd8 <SystemInit+0xd4>)
 8001d2e:	f043 0303 	orr.w	r3, r3, #3
 8001d32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d34:	4b29      	ldr	r3, [pc, #164]	@ (8001ddc <SystemInit+0xd8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a28      	ldr	r2, [pc, #160]	@ (8001ddc <SystemInit+0xd8>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d40:	4b26      	ldr	r3, [pc, #152]	@ (8001ddc <SystemInit+0xd8>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d46:	4b25      	ldr	r3, [pc, #148]	@ (8001ddc <SystemInit+0xd8>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4924      	ldr	r1, [pc, #144]	@ (8001ddc <SystemInit+0xd8>)
 8001d4c:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <SystemInit+0xdc>)
 8001d4e:	4013      	ands	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d52:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <SystemInit+0xd4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <SystemInit+0xd4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 030f 	bic.w	r3, r3, #15
 8001d66:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd8 <SystemInit+0xd4>)
 8001d68:	f043 0303 	orr.w	r3, r3, #3
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ddc <SystemInit+0xd8>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <SystemInit+0xd8>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <SystemInit+0xd8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001d80:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <SystemInit+0xd8>)
 8001d82:	4a18      	ldr	r2, [pc, #96]	@ (8001de4 <SystemInit+0xe0>)
 8001d84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <SystemInit+0xd8>)
 8001d88:	4a17      	ldr	r2, [pc, #92]	@ (8001de8 <SystemInit+0xe4>)
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <SystemInit+0xd8>)
 8001d8e:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <SystemInit+0xe8>)
 8001d90:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001d92:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <SystemInit+0xd8>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d98:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <SystemInit+0xd8>)
 8001d9a:	4a14      	ldr	r2, [pc, #80]	@ (8001dec <SystemInit+0xe8>)
 8001d9c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <SystemInit+0xd8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <SystemInit+0xd8>)
 8001da6:	4a11      	ldr	r2, [pc, #68]	@ (8001dec <SystemInit+0xe8>)
 8001da8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <SystemInit+0xd8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <SystemInit+0xd8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <SystemInit+0xd8>)
 8001db6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <SystemInit+0xd8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <SystemInit+0xec>)
 8001dc4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001dc8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001dca:	bf00      	nop
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00
 8001dd8:	52002000 	.word	0x52002000
 8001ddc:	58024400 	.word	0x58024400
 8001de0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001de4:	02020200 	.word	0x02020200
 8001de8:	01ff0000 	.word	0x01ff0000
 8001dec:	01010280 	.word	0x01010280
 8001df0:	52004000 	.word	0x52004000

08001df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001df8:	f7ff ff84 	bl	8001d04 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dfe:	490d      	ldr	r1, [pc, #52]	@ (8001e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e14:	4c0a      	ldr	r4, [pc, #40]	@ (8001e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f00b fc41 	bl	800d6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7fe fbdb 	bl	80005e0 <main>
  bx  lr
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e2c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001e30:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e34:	24000498 	.word	0x24000498
  ldr r2, =_sidata
 8001e38:	0800e940 	.word	0x0800e940
  ldr r2, =_sbss
 8001e3c:	24000498 	.word	0x24000498
  ldr r4, =_ebss
 8001e40:	24027d70 	.word	0x24027d70

08001e44 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <BDMA1_IRQHandler>
	...

08001e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e4e:	2003      	movs	r0, #3
 8001e50:	f001 fe42 	bl	8003ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001e54:	f005 fe5c 	bl	8007b10 <HAL_RCC_GetSysClockFreq>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_Init+0x68>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	f003 030f 	and.w	r3, r3, #15
 8001e64:	4913      	ldr	r1, [pc, #76]	@ (8001eb4 <HAL_Init+0x6c>)
 8001e66:	5ccb      	ldrb	r3, [r1, r3]
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e70:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001e72:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <HAL_Init+0x68>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001eb4 <HAL_Init+0x6c>)
 8001e7c:	5cd3      	ldrb	r3, [r2, r3]
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
 8001e88:	4a0b      	ldr	r2, [pc, #44]	@ (8001eb8 <HAL_Init+0x70>)
 8001e8a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ebc <HAL_Init+0x74>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e92:	200f      	movs	r0, #15
 8001e94:	f000 f814 	bl	8001ec0 <HAL_InitTick>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e002      	b.n	8001ea8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea2:	f7ff fd61 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	58024400 	.word	0x58024400
 8001eb4:	0800e708 	.word	0x0800e708
 8001eb8:	2400043c 	.word	0x2400043c
 8001ebc:	24000438 	.word	0x24000438

08001ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ec8:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_InitTick+0x60>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e021      	b.n	8001f18 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <HAL_InitTick+0x64>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <HAL_InitTick+0x60>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f001 fe27 	bl	8003b3e <HAL_SYSTICK_Config>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00e      	b.n	8001f18 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d80a      	bhi.n	8001f16 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f001 fdf1 	bl	8003aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f0c:	4a06      	ldr	r2, [pc, #24]	@ (8001f28 <HAL_InitTick+0x68>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	24000444 	.word	0x24000444
 8001f24:	24000438 	.word	0x24000438
 8001f28:	24000440 	.word	0x24000440

08001f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x20>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_IncTick+0x24>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <HAL_IncTick+0x24>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	24000444 	.word	0x24000444
 8001f50:	24027c34 	.word	0x24027c34

08001f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <HAL_GetTick+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	24027c34 	.word	0x24027c34

08001f6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f70:	4b03      	ldr	r3, [pc, #12]	@ (8001f80 <HAL_GetREVID+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	0c1b      	lsrs	r3, r3, #16
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	5c001000 	.word	0x5c001000

08001f84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3360      	adds	r3, #96	@ 0x60
 8001ffe:	461a      	mov	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	430b      	orrs	r3, r1
 800201a:	431a      	orrs	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002020:	bf00      	nop
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	611a      	str	r2, [r3, #16]
}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800205e:	b480      	push	{r7}
 8002060:	b087      	sub	sp, #28
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3360      	adds	r3, #96	@ 0x60
 800206e:	461a      	mov	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	431a      	orrs	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]
  }
}
 8002088:	bf00      	nop
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b087      	sub	sp, #28
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	3330      	adds	r3, #48	@ 0x30
 80020ca:	461a      	mov	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	4413      	add	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f003 031f 	and.w	r3, r3, #31
 80020e4:	211f      	movs	r1, #31
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	401a      	ands	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	f003 011f 	and.w	r1, r3, #31
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002100:	431a      	orrs	r2, r3
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3314      	adds	r3, #20
 8002148:	461a      	mov	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	0e5b      	lsrs	r3, r3, #25
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	0d1b      	lsrs	r3, r3, #20
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	2107      	movs	r1, #7
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	0d1b      	lsrs	r3, r3, #20
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	fa01 f303 	lsl.w	r3, r1, r3
 800217c:	431a      	orrs	r2, r3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002182:	bf00      	nop
 8002184:	371c      	adds	r7, #28
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a8:	43db      	mvns	r3, r3
 80021aa:	401a      	ands	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f003 0318 	and.w	r3, r3, #24
 80021b2:	4908      	ldr	r1, [pc, #32]	@ (80021d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021b4:	40d9      	lsrs	r1, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	400b      	ands	r3, r1
 80021ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021be:	431a      	orrs	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	000fffff 	.word	0x000fffff

080021d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 031f 	and.w	r3, r3, #31
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	4b04      	ldr	r3, [pc, #16]	@ (8002230 <LL_ADC_DisableDeepPowerDown+0x20>)
 800221e:	4013      	ands	r3, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6093      	str	r3, [r2, #8]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	5fffffc0 	.word	0x5fffffc0

08002234 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002244:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002248:	d101      	bne.n	800224e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800224a:	2301      	movs	r3, #1
 800224c:	e000      	b.n	8002250 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	4b05      	ldr	r3, [pc, #20]	@ (8002280 <LL_ADC_EnableInternalRegulator+0x24>)
 800226a:	4013      	ands	r3, r2
 800226c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	6fffffc0 	.word	0x6fffffc0

08002284 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002298:	d101      	bne.n	800229e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <LL_ADC_Enable+0x24>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	7fffffc0 	.word	0x7fffffc0

080022d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <LL_ADC_IsEnabled+0x18>
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <LL_ADC_IsEnabled+0x1a>
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <LL_ADC_REG_StartConversion+0x24>)
 800230a:	4013      	ands	r3, r2
 800230c:	f043 0204 	orr.w	r2, r3, #4
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	7fffffc0 	.word	0x7fffffc0

08002324 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b04      	cmp	r3, #4
 8002336:	d101      	bne.n	800233c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b08      	cmp	r3, #8
 800235c:	d101      	bne.n	8002362 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800237c:	2300      	movs	r3, #0
 800237e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e138      	b.n	80025fc <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff faff 	bl	800199c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff3f 	bl	8002234 <LL_ADC_IsDeepPowerDownEnabled>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d004      	beq.n	80023c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff ff25 	bl	8002210 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff5a 	bl	8002284 <LL_ADC_IsInternalRegulatorEnabled>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d114      	bne.n	8002400 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ff3e 	bl	800225c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e0:	4b88      	ldr	r3, [pc, #544]	@ (8002604 <HAL_ADC_Init+0x294>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	4a88      	ldr	r2, [pc, #544]	@ (8002608 <HAL_ADC_Init+0x298>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	099b      	lsrs	r3, r3, #6
 80023ee:	3301      	adds	r3, #1
 80023f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023f2:	e002      	b.n	80023fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1f9      	bne.n	80023f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff3d 	bl	8002284 <LL_ADC_IsInternalRegulatorEnabled>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10d      	bne.n	800242c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002414:	f043 0210 	orr.w	r2, r3, #16
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002420:	f043 0201 	orr.w	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff77 	bl	8002324 <LL_ADC_REG_IsConversionOngoing>
 8002436:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	f040 80d2 	bne.w	80025ea <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 80ce 	bne.w	80025ea <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002452:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002456:	f043 0202 	orr.w	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff36 	bl	80022d4 <LL_ADC_IsEnabled>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d110      	bne.n	8002490 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800246e:	4867      	ldr	r0, [pc, #412]	@ (800260c <HAL_ADC_Init+0x29c>)
 8002470:	f7ff ff30 	bl	80022d4 <LL_ADC_IsEnabled>
 8002474:	4604      	mov	r4, r0
 8002476:	4866      	ldr	r0, [pc, #408]	@ (8002610 <HAL_ADC_Init+0x2a0>)
 8002478:	f7ff ff2c 	bl	80022d4 <LL_ADC_IsEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	4323      	orrs	r3, r4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d105      	bne.n	8002490 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4619      	mov	r1, r3
 800248a:	4862      	ldr	r0, [pc, #392]	@ (8002614 <HAL_ADC_Init+0x2a4>)
 800248c:	f7ff fd7a 	bl	8001f84 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7d5b      	ldrb	r3, [r3, #21]
 8002494:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800249a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80024a0:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	7f1b      	ldrb	r3, [r3, #28]
 80024a6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	7f1b      	ldrb	r3, [r3, #28]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d106      	bne.n	80024c2 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	045b      	lsls	r3, r3, #17
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ce:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68da      	ldr	r2, [r3, #12]
 80024e4:	4b4c      	ldr	r3, [pc, #304]	@ (8002618 <HAL_ADC_Init+0x2a8>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	69b9      	ldr	r1, [r7, #24]
 80024ee:	430b      	orrs	r3, r1
 80024f0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff ff14 	bl	8002324 <LL_ADC_REG_IsConversionOngoing>
 80024fc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff21 	bl	800234a <LL_ADC_INJ_IsConversionOngoing>
 8002508:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d14a      	bne.n	80025a6 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d147      	bne.n	80025a6 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7d1b      	ldrb	r3, [r3, #20]
 800251a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	4b3c      	ldr	r3, [pc, #240]	@ (800261c <HAL_ADC_Init+0x2ac>)
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	69b9      	ldr	r1, [r7, #24]
 8002534:	430b      	orrs	r3, r1
 8002536:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800253e:	2b01      	cmp	r3, #1
 8002540:	d11b      	bne.n	800257a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002546:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691a      	ldr	r2, [r3, #16]
 800254e:	4b34      	ldr	r3, [pc, #208]	@ (8002620 <HAL_ADC_Init+0x2b0>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002556:	3a01      	subs	r2, #1
 8002558:	0411      	lsls	r1, r2, #16
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800255e:	4311      	orrs	r1, r2
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002564:	4311      	orrs	r1, r2
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800256a:	430a      	orrs	r2, r1
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	611a      	str	r2, [r3, #16]
 8002578:	e007      	b.n	800258a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 ff21 	bl	80033e8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d10c      	bne.n	80025c8 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b4:	f023 010f 	bic.w	r1, r3, #15
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	1e5a      	subs	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80025c6:	e007      	b.n	80025d8 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 020f 	bic.w	r2, r2, #15
 80025d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025dc:	f023 0303 	bic.w	r3, r3, #3
 80025e0:	f043 0201 	orr.w	r2, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	655a      	str	r2, [r3, #84]	@ 0x54
 80025e8:	e007      	b.n	80025fa <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	f043 0210 	orr.w	r2, r3, #16
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3724      	adds	r7, #36	@ 0x24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd90      	pop	{r4, r7, pc}
 8002604:	24000438 	.word	0x24000438
 8002608:	053e2d63 	.word	0x053e2d63
 800260c:	40022000 	.word	0x40022000
 8002610:	40022100 	.word	0x40022100
 8002614:	40022300 	.word	0x40022300
 8002618:	fff0c003 	.word	0xfff0c003
 800261c:	ffffbffc 	.word	0xffffbffc
 8002620:	fc00f81e 	.word	0xfc00f81e

08002624 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800262c:	4856      	ldr	r0, [pc, #344]	@ (8002788 <HAL_ADC_Start+0x164>)
 800262e:	f7ff fdd3 	bl	80021d8 <LL_ADC_GetMultimode>
 8002632:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fe73 	bl	8002324 <LL_ADC_REG_IsConversionOngoing>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f040 809a 	bne.w	800277a <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_ADC_Start+0x30>
 8002650:	2302      	movs	r3, #2
 8002652:	e095      	b.n	8002780 <HAL_ADC_Start+0x15c>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fdb3 	bl	80031c8 <ADC_Enable>
 8002662:	4603      	mov	r3, r0
 8002664:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b00      	cmp	r3, #0
 800266a:	f040 8081 	bne.w	8002770 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002672:	4b46      	ldr	r3, [pc, #280]	@ (800278c <HAL_ADC_Start+0x168>)
 8002674:	4013      	ands	r3, r2
 8002676:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a43      	ldr	r2, [pc, #268]	@ (8002790 <HAL_ADC_Start+0x16c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d002      	beq.n	800268e <HAL_ADC_Start+0x6a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	e000      	b.n	8002690 <HAL_ADC_Start+0x6c>
 800268e:	4b41      	ldr	r3, [pc, #260]	@ (8002794 <HAL_ADC_Start+0x170>)
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	4293      	cmp	r3, r2
 8002696:	d002      	beq.n	800269e <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026b6:	d106      	bne.n	80026c6 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026bc:	f023 0206 	bic.w	r2, r3, #6
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80026c4:	e002      	b.n	80026cc <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	221c      	movs	r2, #28
 80026d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2b      	ldr	r2, [pc, #172]	@ (8002790 <HAL_ADC_Start+0x16c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d002      	beq.n	80026ec <HAL_ADC_Start+0xc8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	e000      	b.n	80026ee <HAL_ADC_Start+0xca>
 80026ec:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <HAL_ADC_Start+0x170>)
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d008      	beq.n	8002708 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d002      	beq.n	8002708 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b09      	cmp	r3, #9
 8002706:	d114      	bne.n	8002732 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d007      	beq.n	8002726 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800271e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff fde6 	bl	80022fc <LL_ADC_REG_StartConversion>
 8002730:	e025      	b.n	800277e <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002736:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <HAL_ADC_Start+0x16c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d002      	beq.n	800274e <HAL_ADC_Start+0x12a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	e000      	b.n	8002750 <HAL_ADC_Start+0x12c>
 800274e:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <HAL_ADC_Start+0x170>)
 8002750:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00f      	beq.n	800277e <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002762:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002766:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	655a      	str	r2, [r3, #84]	@ 0x54
 800276e:	e006      	b.n	800277e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002778:	e001      	b.n	800277e <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40022300 	.word	0x40022300
 800278c:	fffff0fe 	.word	0xfffff0fe
 8002790:	40022100 	.word	0x40022100
 8002794:	40022000 	.word	0x40022000

08002798 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027b4:	4882      	ldr	r0, [pc, #520]	@ (80029c0 <HAL_ADC_IRQHandler+0x228>)
 80027b6:	f7ff fd0f 	bl	80021d8 <LL_ADC_GetMultimode>
 80027ba:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d017      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x5e>
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d012      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e0:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 ffff 	bl	80037ec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2202      	movs	r2, #2
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_ADC_IRQHandler+0x72>
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f003 0304 	and.w	r3, r3, #4
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10a      	bne.n	8002820 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8083 	beq.w	800291c <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d07d      	beq.n	800291c <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002830:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fc29 	bl	8002094 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d062      	beq.n	800290e <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a5d      	ldr	r2, [pc, #372]	@ (80029c4 <HAL_ADC_IRQHandler+0x22c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d002      	beq.n	8002858 <HAL_ADC_IRQHandler+0xc0>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e000      	b.n	800285a <HAL_ADC_IRQHandler+0xc2>
 8002858:	4b5b      	ldr	r3, [pc, #364]	@ (80029c8 <HAL_ADC_IRQHandler+0x230>)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4293      	cmp	r3, r2
 8002860:	d008      	beq.n	8002874 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b05      	cmp	r3, #5
 800286c:	d002      	beq.n	8002874 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b09      	cmp	r3, #9
 8002872:	d104      	bne.n	800287e <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	e00c      	b.n	8002898 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a50      	ldr	r2, [pc, #320]	@ (80029c4 <HAL_ADC_IRQHandler+0x22c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d002      	beq.n	800288e <HAL_ADC_IRQHandler+0xf6>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	e000      	b.n	8002890 <HAL_ADC_IRQHandler+0xf8>
 800288e:	4b4e      	ldr	r3, [pc, #312]	@ (80029c8 <HAL_ADC_IRQHandler+0x230>)
 8002890:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d135      	bne.n	800290e <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d12e      	bne.n	800290e <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fd35 	bl	8002324 <LL_ADC_REG_IsConversionOngoing>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d11a      	bne.n	80028f6 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 020c 	bic.w	r2, r2, #12
 80028ce:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d112      	bne.n	800290e <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ec:	f043 0201 	orr.w	r2, r3, #1
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80028f4:	e00b      	b.n	800290e <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fa:	f043 0210 	orr.w	r2, r3, #16
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	f043 0201 	orr.w	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fae0 	bl	8000ed4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	220c      	movs	r2, #12
 800291a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d004      	beq.n	8002930 <HAL_ADC_IRQHandler+0x198>
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10b      	bne.n	8002948 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 809f 	beq.w	8002a7a <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 8099 	beq.w	8002a7a <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294c:	f003 0310 	and.w	r3, r3, #16
 8002950:	2b00      	cmp	r3, #0
 8002952:	d105      	bne.n	8002960 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002958:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fbd4 	bl	8002112 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800296a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fb8f 	bl	8002094 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002976:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a11      	ldr	r2, [pc, #68]	@ (80029c4 <HAL_ADC_IRQHandler+0x22c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d002      	beq.n	8002988 <HAL_ADC_IRQHandler+0x1f0>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	e000      	b.n	800298a <HAL_ADC_IRQHandler+0x1f2>
 8002988:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <HAL_ADC_IRQHandler+0x230>)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	4293      	cmp	r3, r2
 8002990:	d008      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b06      	cmp	r3, #6
 800299c:	d002      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b07      	cmp	r3, #7
 80029a2:	d104      	bne.n	80029ae <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	623b      	str	r3, [r7, #32]
 80029ac:	e013      	b.n	80029d6 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <HAL_ADC_IRQHandler+0x22c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_ADC_IRQHandler+0x234>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	e007      	b.n	80029ce <HAL_ADC_IRQHandler+0x236>
 80029be:	bf00      	nop
 80029c0:	40022300 	.word	0x40022300
 80029c4:	40022100 	.word	0x40022100
 80029c8:	40022000 	.word	0x40022000
 80029cc:	4b7d      	ldr	r3, [pc, #500]	@ (8002bc4 <HAL_ADC_IRQHandler+0x42c>)
 80029ce:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d047      	beq.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_ADC_IRQHandler+0x25e>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d03f      	beq.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d13a      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a00:	2b40      	cmp	r3, #64	@ 0x40
 8002a02:	d133      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d12e      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fc99 	bl	800234a <LL_ADC_INJ_IsConversionOngoing>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d11a      	bne.n	8002a54 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a2c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d112      	bne.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a4a:	f043 0201 	orr.w	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a52:	e00b      	b.n	8002a6c <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a58:	f043 0210 	orr.w	r2, r3, #16
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fe95 	bl	800379c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2260      	movs	r2, #96	@ 0x60
 8002a78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d011      	beq.n	8002aa8 <HAL_ADC_IRQHandler+0x310>
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f896 	bl	8002bcc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2280      	movs	r2, #128	@ 0x80
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d012      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x340>
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fe7b 	bl	80037c4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ad6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d012      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x370>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00d      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fe6d 	bl	80037d8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d036      	beq.n	8002b80 <HAL_ADC_IRQHandler+0x3e8>
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f003 0310 	and.w	r3, r3, #16
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d031      	beq.n	8002b80 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002b24:	2301      	movs	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b28:	e014      	b.n	8002b54 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b30:	4825      	ldr	r0, [pc, #148]	@ (8002bc8 <HAL_ADC_IRQHandler+0x430>)
 8002b32:	f7ff fb5f 	bl	80021f4 <LL_ADC_GetMultiDMATransfer>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b40:	e008      	b.n	8002b54 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002b50:	2301      	movs	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d10e      	bne.n	8002b78 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6a:	f043 0202 	orr.w	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f834 	bl	8002be0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d018      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x424>
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b98:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba4:	f043 0208 	orr.w	r2, r3, #8
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002bb4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fdfa 	bl	80037b0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002bbc:	bf00      	nop
 8002bbe:	3728      	adds	r7, #40	@ 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40022000 	.word	0x40022000
 8002bc8:	40022300 	.word	0x40022300

08002bcc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b0a1      	sub	sp, #132	@ 0x84
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a95      	ldr	r2, [pc, #596]	@ (8002e64 <HAL_ADC_ConfigChannel+0x270>)
 8002c0e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_ADC_ConfigChannel+0x2a>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e2c0      	b.n	80031a0 <HAL_ADC_ConfigChannel+0x5ac>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fb7a 	bl	8002324 <LL_ADC_REG_IsConversionOngoing>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 82a5 	bne.w	8003182 <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	db2c      	blt.n	8002c9a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d108      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x6a>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	2201      	movs	r2, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	e016      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x98>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c6e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002c76:	2320      	movs	r3, #32
 8002c78:	e003      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002c7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2201      	movs	r2, #1
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	69d1      	ldr	r1, [r2, #28]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	430b      	orrs	r3, r1
 8002c98:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6859      	ldr	r1, [r3, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f7ff fa07 	bl	80020ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fb37 	bl	8002324 <LL_ADC_REG_IsConversionOngoing>
 8002cb6:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fb44 	bl	800234a <LL_ADC_INJ_IsConversionOngoing>
 8002cc2:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 80a0 	bne.w	8002e0c <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ccc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 809c 	bne.w	8002e0c <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f7ff fa29 	bl	8002138 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f003 0310 	and.w	r3, r3, #16
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x118>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	e00a      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x12e>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d027      	beq.n	8002d7c <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6919      	ldr	r1, [r3, #16]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d3a:	f7ff f957 	bl	8001fec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6919      	ldr	r1, [r3, #16]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	7e5b      	ldrb	r3, [r3, #25]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x160>
 8002d4e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002d52:	e000      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x162>
 8002d54:	2300      	movs	r3, #0
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7ff f981 	bl	800205e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	6919      	ldr	r1, [r3, #16]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	7e1b      	ldrb	r3, [r3, #24]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x17e>
 8002d6c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002d70:	e000      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x180>
 8002d72:	2300      	movs	r3, #0
 8002d74:	461a      	mov	r2, r3
 8002d76:	f7ff f959 	bl	800202c <LL_ADC_SetDataRightShift>
 8002d7a:	e047      	b.n	8002e0c <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	069b      	lsls	r3, r3, #26
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d107      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002d9e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002da6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	069b      	lsls	r3, r3, #26
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d107      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002dc2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	069b      	lsls	r3, r3, #26
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d107      	bne.n	8002de8 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002de6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	069b      	lsls	r3, r3, #26
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d107      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002e0a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff fa5f 	bl	80022d4 <LL_ADC_IsEnabled>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f040 81bb 	bne.w	8003194 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6819      	ldr	r1, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f7ff f9b0 	bl	8002190 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a0b      	ldr	r2, [pc, #44]	@ (8002e64 <HAL_ADC_ConfigChannel+0x270>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	f040 8130 	bne.w	800309c <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10d      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x274>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	0e9b      	lsrs	r3, r3, #26
 8002e52:	3301      	adds	r3, #1
 8002e54:	f003 031f 	and.w	r3, r3, #31
 8002e58:	2b09      	cmp	r3, #9
 8002e5a:	bf94      	ite	ls
 8002e5c:	2301      	movls	r3, #1
 8002e5e:	2300      	movhi	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	e01b      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x2a8>
 8002e64:	47ff0000 	.word	0x47ff0000
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e003      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002e84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2b09      	cmp	r3, #9
 8002e94:	bf94      	ite	ls
 8002e96:	2301      	movls	r3, #1
 8002e98:	2300      	movhi	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d079      	beq.n	8002f94 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d107      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x2c8>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	0e9b      	lsrs	r3, r3, #26
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	069b      	lsls	r3, r3, #26
 8002eb6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002eba:	e015      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x2f4>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ec4:	fa93 f3a3 	rbit	r3, r3
 8002ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ecc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002ece:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002ed4:	2320      	movs	r3, #32
 8002ed6:	e003      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002ed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	069b      	lsls	r3, r3, #26
 8002ee4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x314>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	3301      	adds	r3, #1
 8002efc:	f003 031f 	and.w	r3, r3, #31
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	e017      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x344>
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f18:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002f1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e003      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 8002f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f003 031f 	and.w	r3, r3, #31
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f303 	lsl.w	r3, r1, r3
 8002f38:	ea42 0103 	orr.w	r1, r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x36a>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	4613      	mov	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	4413      	add	r3, r2
 8002f5a:	051b      	lsls	r3, r3, #20
 8002f5c:	e018      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x39c>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e003      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3301      	adds	r3, #1
 8002f84:	f003 021f 	and.w	r2, r3, #31
 8002f88:	4613      	mov	r3, r2
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	4413      	add	r3, r2
 8002f8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f90:	430b      	orrs	r3, r1
 8002f92:	e07e      	b.n	8003092 <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x3bc>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0e9b      	lsrs	r3, r3, #26
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	069b      	lsls	r3, r3, #26
 8002faa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fae:	e015      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x3e8>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e003      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	069b      	lsls	r3, r3, #26
 8002fd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d109      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x408>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e9b      	lsrs	r3, r3, #26
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	e017      	b.n	800302c <HAL_ADC_ConfigChannel+0x438>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	61bb      	str	r3, [r7, #24]
  return result;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e003      	b.n	8003020 <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	3301      	adds	r3, #1
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f303 	lsl.w	r3, r1, r3
 800302c:	ea42 0103 	orr.w	r1, r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10d      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x464>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	0e9b      	lsrs	r3, r3, #26
 8003042:	3301      	adds	r3, #1
 8003044:	f003 021f 	and.w	r2, r3, #31
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	3b1e      	subs	r3, #30
 8003050:	051b      	lsls	r3, r3, #20
 8003052:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003056:	e01b      	b.n	8003090 <HAL_ADC_ConfigChannel+0x49c>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	60fb      	str	r3, [r7, #12]
  return result;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003070:	2320      	movs	r3, #32
 8003072:	e003      	b.n	800307c <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3301      	adds	r3, #1
 800307e:	f003 021f 	and.w	r2, r3, #31
 8003082:	4613      	mov	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4413      	add	r3, r2
 8003088:	3b1e      	subs	r3, #30
 800308a:	051b      	lsls	r3, r3, #20
 800308c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003090:	430b      	orrs	r3, r1
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	6892      	ldr	r2, [r2, #8]
 8003096:	4619      	mov	r1, r3
 8003098:	f7ff f84e 	bl	8002138 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	da77      	bge.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030a4:	4840      	ldr	r0, [pc, #256]	@ (80031a8 <HAL_ADC_ConfigChannel+0x5b4>)
 80030a6:	f7fe ff93 	bl	8001fd0 <LL_ADC_GetCommonPathInternalCh>
 80030aa:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ac:	483f      	ldr	r0, [pc, #252]	@ (80031ac <HAL_ADC_ConfigChannel+0x5b8>)
 80030ae:	f7ff f911 	bl	80022d4 <LL_ADC_IsEnabled>
 80030b2:	4604      	mov	r4, r0
 80030b4:	483e      	ldr	r0, [pc, #248]	@ (80031b0 <HAL_ADC_ConfigChannel+0x5bc>)
 80030b6:	f7ff f90d 	bl	80022d4 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4323      	orrs	r3, r4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d155      	bne.n	800316e <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a3b      	ldr	r2, [pc, #236]	@ (80031b4 <HAL_ADC_ConfigChannel+0x5c0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d122      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x51e>
 80030cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11d      	bne.n	8003112 <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a35      	ldr	r2, [pc, #212]	@ (80031b0 <HAL_ADC_ConfigChannel+0x5bc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d159      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80030e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80030e6:	4619      	mov	r1, r3
 80030e8:	482f      	ldr	r0, [pc, #188]	@ (80031a8 <HAL_ADC_ConfigChannel+0x5b4>)
 80030ea:	f7fe ff5e 	bl	8001faa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ee:	4b32      	ldr	r3, [pc, #200]	@ (80031b8 <HAL_ADC_ConfigChannel+0x5c4>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	099b      	lsrs	r3, r3, #6
 80030f4:	4a31      	ldr	r2, [pc, #196]	@ (80031bc <HAL_ADC_ConfigChannel+0x5c8>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	3301      	adds	r3, #1
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003102:	e002      	b.n	800310a <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3b01      	subs	r3, #1
 8003108:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1f9      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003110:	e040      	b.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2a      	ldr	r2, [pc, #168]	@ (80031c0 <HAL_ADC_ConfigChannel+0x5cc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d111      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x54c>
 800311c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10c      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a21      	ldr	r2, [pc, #132]	@ (80031b0 <HAL_ADC_ConfigChannel+0x5bc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d131      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003132:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003136:	4619      	mov	r1, r3
 8003138:	481b      	ldr	r0, [pc, #108]	@ (80031a8 <HAL_ADC_ConfigChannel+0x5b4>)
 800313a:	f7fe ff36 	bl	8001faa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800313e:	e029      	b.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1f      	ldr	r2, [pc, #124]	@ (80031c4 <HAL_ADC_ConfigChannel+0x5d0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d124      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
 800314a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800314c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11f      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a15      	ldr	r2, [pc, #84]	@ (80031b0 <HAL_ADC_ConfigChannel+0x5bc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d11a      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800315e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003160:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003164:	4619      	mov	r1, r3
 8003166:	4810      	ldr	r0, [pc, #64]	@ (80031a8 <HAL_ADC_ConfigChannel+0x5b4>)
 8003168:	f7fe ff1f 	bl	8001faa <LL_ADC_SetCommonPathInternalCh>
 800316c:	e012      	b.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003180:	e008      	b.n	8003194 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800319c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3784      	adds	r7, #132	@ 0x84
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}
 80031a8:	40022300 	.word	0x40022300
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40022100 	.word	0x40022100
 80031b4:	cb840000 	.word	0xcb840000
 80031b8:	24000438 	.word	0x24000438
 80031bc:	053e2d63 	.word	0x053e2d63
 80031c0:	bac04000 	.word	0xbac04000
 80031c4:	cfb80000 	.word	0xcfb80000

080031c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff f87d 	bl	80022d4 <LL_ADC_IsEnabled>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d161      	bne.n	80032a4 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <ADC_Enable+0xe8>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00d      	beq.n	800320a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	f043 0210 	orr.w	r2, r3, #16
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fe:	f043 0201 	orr.w	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e04d      	b.n	80032a6 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f84c 	bl	80022ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003214:	f7fe fe9e 	bl	8001f54 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800321a:	4826      	ldr	r0, [pc, #152]	@ (80032b4 <ADC_Enable+0xec>)
 800321c:	f7fe ffdc 	bl	80021d8 <LL_ADC_GetMultimode>
 8003220:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a24      	ldr	r2, [pc, #144]	@ (80032b8 <ADC_Enable+0xf0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d002      	beq.n	8003232 <ADC_Enable+0x6a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	e000      	b.n	8003234 <ADC_Enable+0x6c>
 8003232:	4b22      	ldr	r3, [pc, #136]	@ (80032bc <ADC_Enable+0xf4>)
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	4293      	cmp	r3, r2
 800323a:	d02c      	beq.n	8003296 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d130      	bne.n	80032a4 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003242:	e028      	b.n	8003296 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f843 	bl	80022d4 <LL_ADC_IsEnabled>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff f827 	bl	80022ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800325e:	f7fe fe79 	bl	8001f54 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d914      	bls.n	8003296 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d00d      	beq.n	8003296 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327e:	f043 0210 	orr.w	r2, r3, #16
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e007      	b.n	80032a6 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d1cf      	bne.n	8003244 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	8000003f 	.word	0x8000003f
 80032b4:	40022300 	.word	0x40022300
 80032b8:	40022100 	.word	0x40022100
 80032bc:	40022000 	.word	0x40022000

080032c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d14b      	bne.n	8003372 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032de:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d021      	beq.n	8003338 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fe fecb 	bl	8002094 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d032      	beq.n	800336a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d12b      	bne.n	800336a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003316:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003322:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11f      	bne.n	800336a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	655a      	str	r2, [r3, #84]	@ 0x54
 8003336:	e018      	b.n	800336a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d111      	bne.n	800336a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003356:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d105      	bne.n	800336a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003362:	f043 0201 	orr.w	r2, r3, #1
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f7fd fdb2 	bl	8000ed4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003370:	e00e      	b.n	8003390 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	f003 0310 	and.w	r3, r3, #16
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7ff fc2e 	bl	8002be0 <HAL_ADC_ErrorCallback>
}
 8003384:	e004      	b.n	8003390 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f7fd fd42 	bl	8000e30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d2:	f043 0204 	orr.w	r2, r3, #4
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff fc00 	bl	8002be0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80033f0:	4b60      	ldr	r3, [pc, #384]	@ (8003574 <ADC_ConfigureBoostMode+0x18c>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01c      	beq.n	8003436 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80033fc:	f004 fd02 	bl	8007e04 <HAL_RCC_GetHCLKFreq>
 8003400:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800340a:	d010      	beq.n	800342e <ADC_ConfigureBoostMode+0x46>
 800340c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003410:	d873      	bhi.n	80034fa <ADC_ConfigureBoostMode+0x112>
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003416:	d002      	beq.n	800341e <ADC_ConfigureBoostMode+0x36>
 8003418:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800341c:	d16d      	bne.n	80034fa <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	0c1b      	lsrs	r3, r3, #16
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	fbb2 f3f3 	udiv	r3, r2, r3
 800342a:	60fb      	str	r3, [r7, #12]
        break;
 800342c:	e068      	b.n	8003500 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	089b      	lsrs	r3, r3, #2
 8003432:	60fb      	str	r3, [r7, #12]
        break;
 8003434:	e064      	b.n	8003500 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003436:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	f005 fefb 	bl	8009238 <HAL_RCCEx_GetPeriphCLKFreq>
 8003442:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800344c:	d051      	beq.n	80034f2 <ADC_ConfigureBoostMode+0x10a>
 800344e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003452:	d854      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x116>
 8003454:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003458:	d047      	beq.n	80034ea <ADC_ConfigureBoostMode+0x102>
 800345a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800345e:	d84e      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x116>
 8003460:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003464:	d03d      	beq.n	80034e2 <ADC_ConfigureBoostMode+0xfa>
 8003466:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800346a:	d848      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x116>
 800346c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003470:	d033      	beq.n	80034da <ADC_ConfigureBoostMode+0xf2>
 8003472:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003476:	d842      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x116>
 8003478:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800347c:	d029      	beq.n	80034d2 <ADC_ConfigureBoostMode+0xea>
 800347e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003482:	d83c      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x116>
 8003484:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003488:	d01a      	beq.n	80034c0 <ADC_ConfigureBoostMode+0xd8>
 800348a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800348e:	d836      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x116>
 8003490:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003494:	d014      	beq.n	80034c0 <ADC_ConfigureBoostMode+0xd8>
 8003496:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800349a:	d830      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x116>
 800349c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034a0:	d00e      	beq.n	80034c0 <ADC_ConfigureBoostMode+0xd8>
 80034a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034a6:	d82a      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x116>
 80034a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034ac:	d008      	beq.n	80034c0 <ADC_ConfigureBoostMode+0xd8>
 80034ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80034b2:	d824      	bhi.n	80034fe <ADC_ConfigureBoostMode+0x116>
 80034b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034b8:	d002      	beq.n	80034c0 <ADC_ConfigureBoostMode+0xd8>
 80034ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034be:	d11e      	bne.n	80034fe <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	0c9b      	lsrs	r3, r3, #18
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	60fb      	str	r3, [r7, #12]
        break;
 80034d0:	e016      	b.n	8003500 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
        break;
 80034d8:	e012      	b.n	8003500 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	60fb      	str	r3, [r7, #12]
        break;
 80034e0:	e00e      	b.n	8003500 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	60fb      	str	r3, [r7, #12]
        break;
 80034e8:	e00a      	b.n	8003500 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	09db      	lsrs	r3, r3, #7
 80034ee:	60fb      	str	r3, [r7, #12]
        break;
 80034f0:	e006      	b.n	8003500 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	60fb      	str	r3, [r7, #12]
        break;
 80034f8:	e002      	b.n	8003500 <ADC_ConfigureBoostMode+0x118>
        break;
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80034fe:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <ADC_ConfigureBoostMode+0x190>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d808      	bhi.n	8003520 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800351c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800351e:	e025      	b.n	800356c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a16      	ldr	r2, [pc, #88]	@ (800357c <ADC_ConfigureBoostMode+0x194>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d80a      	bhi.n	800353e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800353a:	609a      	str	r2, [r3, #8]
}
 800353c:	e016      	b.n	800356c <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4a0f      	ldr	r2, [pc, #60]	@ (8003580 <ADC_ConfigureBoostMode+0x198>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d80a      	bhi.n	800355c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	e007      	b.n	800356c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800356a:	609a      	str	r2, [r3, #8]
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40022300 	.word	0x40022300
 8003578:	005f5e10 	.word	0x005f5e10
 800357c:	00bebc20 	.word	0x00bebc20
 8003580:	017d7840 	.word	0x017d7840

08003584 <LL_ADC_IsEnabled>:
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <LL_ADC_IsEnabled+0x18>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <LL_ADC_IsEnabled+0x1a>
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <LL_ADC_REG_StartConversion>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	4b05      	ldr	r3, [pc, #20]	@ (80035d0 <LL_ADC_REG_StartConversion+0x24>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	f043 0204 	orr.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	609a      	str	r2, [r3, #8]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	7fffffc0 	.word	0x7fffffc0

080035d4 <LL_ADC_REG_IsConversionOngoing>:
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d101      	bne.n	80035ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
	...

080035fc <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b0a0      	sub	sp, #128	@ 0x80
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ffe1 	bl	80035d4 <LL_ADC_REG_IsConversionOngoing>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
 800361a:	e0ad      	b.n	8003778 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003622:	2b01      	cmp	r3, #1
 8003624:	d101      	bne.n	800362a <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8003626:	2302      	movs	r3, #2
 8003628:	e0a6      	b.n	8003778 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a52      	ldr	r2, [pc, #328]	@ (8003780 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d002      	beq.n	8003642 <HAL_ADCEx_MultiModeStart_DMA+0x46>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	e000      	b.n	8003644 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 8003642:	4b50      	ldr	r3, [pc, #320]	@ (8003784 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	4293      	cmp	r3, r2
 800364a:	d006      	beq.n	800365a <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f7ff fdbb 	bl	80031c8 <ADC_Enable>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003658:	e02e      	b.n	80036b8 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800365e:	2300      	movs	r3, #0
 8003660:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a47      	ldr	r2, [pc, #284]	@ (8003784 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d102      	bne.n	8003672 <HAL_ADCEx_MultiModeStart_DMA+0x76>
 800366c:	4b44      	ldr	r3, [pc, #272]	@ (8003780 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e001      	b.n	8003676 <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e071      	b.n	8003778 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff fd97 	bl	80031c8 <ADC_Enable>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 80036a0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d107      	bne.n	80036b8 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fd8b 	bl	80031c8 <ADC_Enable>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80036b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d155      	bne.n	800376c <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80036c4:	4b30      	ldr	r3, [pc, #192]	@ (8003788 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 80036c6:	4013      	ands	r3, r2
 80036c8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036da:	4a2c      	ldr	r2, [pc, #176]	@ (800378c <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 80036dc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e2:	4a2b      	ldr	r2, [pc, #172]	@ (8003790 <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 80036e4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003794 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 80036ec:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	221c      	movs	r2, #28
 80036f4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685a      	ldr	r2, [r3, #4]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0210 	orr.w	r2, r2, #16
 800370c:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d002      	beq.n	800371e <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	e000      	b.n	8003720 <HAL_ADCEx_MultiModeStart_DMA+0x124>
 800371e:	4b19      	ldr	r3, [pc, #100]	@ (8003784 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	4293      	cmp	r3, r2
 8003726:	d00d      	beq.n	8003744 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3340      	adds	r3, #64	@ 0x40
 8003732:	4619      	mov	r1, r3
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f000 fe14 	bl	8004364 <HAL_DMA_Start_IT>
 800373c:	4603      	mov	r3, r0
 800373e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003742:	e017      	b.n	8003774 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003744:	4b14      	ldr	r3, [pc, #80]	@ (8003798 <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 8003746:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800374c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800374e:	330c      	adds	r3, #12
 8003750:	4619      	mov	r1, r3
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f000 fe05 	bl	8004364 <HAL_DMA_Start_IT>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff21 	bl	80035ac <LL_ADC_REG_StartConversion>
 800376a:	e003      	b.n	8003774 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8003774:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 8003778:	4618      	mov	r0, r3
 800377a:	3780      	adds	r7, #128	@ 0x80
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40022100 	.word	0x40022100
 8003784:	40022000 	.word	0x40022000
 8003788:	fffff0fe 	.word	0xfffff0fe
 800378c:	080032c1 	.word	0x080032c1
 8003790:	08003399 	.word	0x08003399
 8003794:	080033b5 	.word	0x080033b5
 8003798:	40022300 	.word	0x40022300

0800379c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003800:	b590      	push	{r4, r7, lr}
 8003802:	b09f      	sub	sp, #124	@ 0x7c
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800381a:	2302      	movs	r3, #2
 800381c:	e080      	b.n	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800382a:	2300      	movs	r3, #0
 800382c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a3d      	ldr	r2, [pc, #244]	@ (8003928 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d102      	bne.n	800383e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003838:	4b3c      	ldr	r3, [pc, #240]	@ (800392c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800383a:	60bb      	str	r3, [r7, #8]
 800383c:	e001      	b.n	8003842 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d10b      	bne.n	8003860 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	f043 0220 	orr.w	r2, r3, #32
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e05f      	b.n	8003920 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff feb6 	bl	80035d4 <LL_ADC_REG_IsConversionOngoing>
 8003868:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff feb0 	bl	80035d4 <LL_ADC_REG_IsConversionOngoing>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d141      	bne.n	80038fe <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800387a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800387c:	2b00      	cmp	r3, #0
 800387e:	d13e      	bne.n	80038fe <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003880:	4b2b      	ldr	r3, [pc, #172]	@ (8003930 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003882:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d020      	beq.n	80038ce <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800388c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	431a      	orrs	r2, r3
 800389a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800389c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800389e:	4822      	ldr	r0, [pc, #136]	@ (8003928 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80038a0:	f7ff fe70 	bl	8003584 <LL_ADC_IsEnabled>
 80038a4:	4604      	mov	r4, r0
 80038a6:	4821      	ldr	r0, [pc, #132]	@ (800392c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80038a8:	f7ff fe6c 	bl	8003584 <LL_ADC_IsEnabled>
 80038ac:	4603      	mov	r3, r0
 80038ae:	4323      	orrs	r3, r4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d12e      	bne.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003934 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	6811      	ldr	r1, [r2, #0]
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	6892      	ldr	r2, [r2, #8]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	431a      	orrs	r2, r3
 80038c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038cc:	e021      	b.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80038ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80038d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038da:	4813      	ldr	r0, [pc, #76]	@ (8003928 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80038dc:	f7ff fe52 	bl	8003584 <LL_ADC_IsEnabled>
 80038e0:	4604      	mov	r4, r0
 80038e2:	4812      	ldr	r0, [pc, #72]	@ (800392c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80038e4:	f7ff fe4e 	bl	8003584 <LL_ADC_IsEnabled>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4323      	orrs	r3, r4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d110      	bne.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038fa:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038fc:	e009      	b.n	8003912 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003910:	e000      	b.n	8003914 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003912:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800391c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003920:	4618      	mov	r0, r3
 8003922:	377c      	adds	r7, #124	@ 0x7c
 8003924:	46bd      	mov	sp, r7
 8003926:	bd90      	pop	{r4, r7, pc}
 8003928:	40022000 	.word	0x40022000
 800392c:	40022100 	.word	0x40022100
 8003930:	40022300 	.word	0x40022300
 8003934:	fffff0e0 	.word	0xfffff0e0

08003938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003948:	4b0b      	ldr	r3, [pc, #44]	@ (8003978 <__NVIC_SetPriorityGrouping+0x40>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003954:	4013      	ands	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003960:	4b06      	ldr	r3, [pc, #24]	@ (800397c <__NVIC_SetPriorityGrouping+0x44>)
 8003962:	4313      	orrs	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003966:	4a04      	ldr	r2, [pc, #16]	@ (8003978 <__NVIC_SetPriorityGrouping+0x40>)
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	60d3      	str	r3, [r2, #12]
}
 800396c:	bf00      	nop
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000ed00 	.word	0xe000ed00
 800397c:	05fa0000 	.word	0x05fa0000

08003980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003984:	4b04      	ldr	r3, [pc, #16]	@ (8003998 <__NVIC_GetPriorityGrouping+0x18>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	0a1b      	lsrs	r3, r3, #8
 800398a:	f003 0307 	and.w	r3, r3, #7
}
 800398e:	4618      	mov	r0, r3
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000ed00 	.word	0xe000ed00

0800399c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db0b      	blt.n	80039c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	4907      	ldr	r1, [pc, #28]	@ (80039d4 <__NVIC_EnableIRQ+0x38>)
 80039b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2001      	movs	r0, #1
 80039be:	fa00 f202 	lsl.w	r2, r0, r2
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	e000e100 	.word	0xe000e100

080039d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db0a      	blt.n	8003a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	490c      	ldr	r1, [pc, #48]	@ (8003a24 <__NVIC_SetPriority+0x4c>)
 80039f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039f6:	0112      	lsls	r2, r2, #4
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	440b      	add	r3, r1
 80039fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a00:	e00a      	b.n	8003a18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4908      	ldr	r1, [pc, #32]	@ (8003a28 <__NVIC_SetPriority+0x50>)
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	0112      	lsls	r2, r2, #4
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	440b      	add	r3, r1
 8003a16:	761a      	strb	r2, [r3, #24]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000e100 	.word	0xe000e100
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	@ 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f1c3 0307 	rsb	r3, r3, #7
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	bf28      	it	cs
 8003a4a:	2304      	movcs	r3, #4
 8003a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d902      	bls.n	8003a5c <NVIC_EncodePriority+0x30>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3b03      	subs	r3, #3
 8003a5a:	e000      	b.n	8003a5e <NVIC_EncodePriority+0x32>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	401a      	ands	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	43d9      	mvns	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	4313      	orrs	r3, r2
         );
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	@ 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aa4:	d301      	bcc.n	8003aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00f      	b.n	8003aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <SysTick_Config+0x40>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	f7ff ff8e 	bl	80039d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003abc:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <SysTick_Config+0x40>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac2:	4b04      	ldr	r3, [pc, #16]	@ (8003ad4 <SysTick_Config+0x40>)
 8003ac4:	2207      	movs	r2, #7
 8003ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	e000e010 	.word	0xe000e010

08003ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff29 	bl	8003938 <__NVIC_SetPriorityGrouping>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4603      	mov	r3, r0
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003afc:	f7ff ff40 	bl	8003980 <__NVIC_GetPriorityGrouping>
 8003b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff90 	bl	8003a2c <NVIC_EncodePriority>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff ff5f 	bl	80039d8 <__NVIC_SetPriority>
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	4603      	mov	r3, r0
 8003b2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff ff33 	bl	800399c <__NVIC_EnableIRQ>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff ffa4 	bl	8003a94 <SysTick_Config>
 8003b4c:	4603      	mov	r3, r0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003b5c:	f3bf 8f5f 	dmb	sy
}
 8003b60:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003b62:	4b07      	ldr	r3, [pc, #28]	@ (8003b80 <HAL_MPU_Disable+0x28>)
 8003b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b66:	4a06      	ldr	r2, [pc, #24]	@ (8003b80 <HAL_MPU_Disable+0x28>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_MPU_Disable+0x2c>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	605a      	str	r2, [r3, #4]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	e000ed00 	.word	0xe000ed00
 8003b84:	e000ed90 	.word	0xe000ed90

08003b88 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003b90:	4a0b      	ldr	r2, [pc, #44]	@ (8003bc0 <HAL_MPU_Enable+0x38>)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <HAL_MPU_Enable+0x3c>)
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9e:	4a09      	ldr	r2, [pc, #36]	@ (8003bc4 <HAL_MPU_Enable+0x3c>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003ba6:	f3bf 8f4f 	dsb	sy
}
 8003baa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bac:	f3bf 8f6f 	isb	sy
}
 8003bb0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	e000ed90 	.word	0xe000ed90
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	785a      	ldrb	r2, [r3, #1]
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <HAL_MPU_ConfigRegion+0x7c>)
 8003bd6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c44 <HAL_MPU_ConfigRegion+0x7c>)
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	4a19      	ldr	r2, [pc, #100]	@ (8003c44 <HAL_MPU_ConfigRegion+0x7c>)
 8003bde:	f023 0301 	bic.w	r3, r3, #1
 8003be2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003be4:	4a17      	ldr	r2, [pc, #92]	@ (8003c44 <HAL_MPU_ConfigRegion+0x7c>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	7b1b      	ldrb	r3, [r3, #12]
 8003bf0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	7adb      	ldrb	r3, [r3, #11]
 8003bf6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003bf8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7a9b      	ldrb	r3, [r3, #10]
 8003bfe:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	7b5b      	ldrb	r3, [r3, #13]
 8003c06:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	7b9b      	ldrb	r3, [r3, #14]
 8003c0e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	7bdb      	ldrb	r3, [r3, #15]
 8003c16:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	7a5b      	ldrb	r3, [r3, #9]
 8003c1e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	7a1b      	ldrb	r3, [r3, #8]
 8003c26:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c28:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	7812      	ldrb	r2, [r2, #0]
 8003c2e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c30:	4a04      	ldr	r2, [pc, #16]	@ (8003c44 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c32:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c34:	6113      	str	r3, [r2, #16]
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000ed90 	.word	0xe000ed90

08003c48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003c50:	f7fe f980 	bl	8001f54 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e37d      	b.n	800435c <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a66      	ldr	r2, [pc, #408]	@ (8003e00 <HAL_DMA_Init+0x1b8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d04a      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a65      	ldr	r2, [pc, #404]	@ (8003e04 <HAL_DMA_Init+0x1bc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d045      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a63      	ldr	r2, [pc, #396]	@ (8003e08 <HAL_DMA_Init+0x1c0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d040      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a62      	ldr	r2, [pc, #392]	@ (8003e0c <HAL_DMA_Init+0x1c4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d03b      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a60      	ldr	r2, [pc, #384]	@ (8003e10 <HAL_DMA_Init+0x1c8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d036      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a5f      	ldr	r2, [pc, #380]	@ (8003e14 <HAL_DMA_Init+0x1cc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d031      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a5d      	ldr	r2, [pc, #372]	@ (8003e18 <HAL_DMA_Init+0x1d0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d02c      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a5c      	ldr	r2, [pc, #368]	@ (8003e1c <HAL_DMA_Init+0x1d4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d027      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e20 <HAL_DMA_Init+0x1d8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d022      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a59      	ldr	r2, [pc, #356]	@ (8003e24 <HAL_DMA_Init+0x1dc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d01d      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a57      	ldr	r2, [pc, #348]	@ (8003e28 <HAL_DMA_Init+0x1e0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d018      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a56      	ldr	r2, [pc, #344]	@ (8003e2c <HAL_DMA_Init+0x1e4>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d013      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a54      	ldr	r2, [pc, #336]	@ (8003e30 <HAL_DMA_Init+0x1e8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00e      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a53      	ldr	r2, [pc, #332]	@ (8003e34 <HAL_DMA_Init+0x1ec>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d009      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a51      	ldr	r2, [pc, #324]	@ (8003e38 <HAL_DMA_Init+0x1f0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d004      	beq.n	8003d00 <HAL_DMA_Init+0xb8>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a50      	ldr	r2, [pc, #320]	@ (8003e3c <HAL_DMA_Init+0x1f4>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d101      	bne.n	8003d04 <HAL_DMA_Init+0xbc>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_DMA_Init+0xbe>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f000 813c 	beq.w	8003f84 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a37      	ldr	r2, [pc, #220]	@ (8003e00 <HAL_DMA_Init+0x1b8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d04a      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a36      	ldr	r2, [pc, #216]	@ (8003e04 <HAL_DMA_Init+0x1bc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d045      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a34      	ldr	r2, [pc, #208]	@ (8003e08 <HAL_DMA_Init+0x1c0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d040      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a33      	ldr	r2, [pc, #204]	@ (8003e0c <HAL_DMA_Init+0x1c4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d03b      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a31      	ldr	r2, [pc, #196]	@ (8003e10 <HAL_DMA_Init+0x1c8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d036      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a30      	ldr	r2, [pc, #192]	@ (8003e14 <HAL_DMA_Init+0x1cc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d031      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	@ (8003e18 <HAL_DMA_Init+0x1d0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02c      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2d      	ldr	r2, [pc, #180]	@ (8003e1c <HAL_DMA_Init+0x1d4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d027      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	@ (8003e20 <HAL_DMA_Init+0x1d8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <HAL_DMA_Init+0x1dc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a28      	ldr	r2, [pc, #160]	@ (8003e28 <HAL_DMA_Init+0x1e0>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d018      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a27      	ldr	r2, [pc, #156]	@ (8003e2c <HAL_DMA_Init+0x1e4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a25      	ldr	r2, [pc, #148]	@ (8003e30 <HAL_DMA_Init+0x1e8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a24      	ldr	r2, [pc, #144]	@ (8003e34 <HAL_DMA_Init+0x1ec>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	@ (8003e38 <HAL_DMA_Init+0x1f0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_DMA_Init+0x174>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	@ (8003e3c <HAL_DMA_Init+0x1f4>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <HAL_DMA_Init+0x186>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e007      	b.n	8003dde <HAL_DMA_Init+0x196>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003dde:	e02f      	b.n	8003e40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003de0:	f7fe f8b8 	bl	8001f54 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d928      	bls.n	8003e40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2203      	movs	r2, #3
 8003df8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e2ad      	b.n	800435c <HAL_DMA_Init+0x714>
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1c8      	bne.n	8003de0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	4b73      	ldr	r3, [pc, #460]	@ (8004028 <HAL_DMA_Init+0x3e0>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003e66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	2b04      	cmp	r3, #4
 8003e92:	d107      	bne.n	8003ea4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b28      	cmp	r3, #40	@ 0x28
 8003eaa:	d903      	bls.n	8003eb4 <HAL_DMA_Init+0x26c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003eb2:	d91f      	bls.n	8003ef4 <HAL_DMA_Init+0x2ac>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003eba:	d903      	bls.n	8003ec4 <HAL_DMA_Init+0x27c>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b42      	cmp	r3, #66	@ 0x42
 8003ec2:	d917      	bls.n	8003ef4 <HAL_DMA_Init+0x2ac>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b46      	cmp	r3, #70	@ 0x46
 8003eca:	d903      	bls.n	8003ed4 <HAL_DMA_Init+0x28c>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	2b48      	cmp	r3, #72	@ 0x48
 8003ed2:	d90f      	bls.n	8003ef4 <HAL_DMA_Init+0x2ac>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b4e      	cmp	r3, #78	@ 0x4e
 8003eda:	d903      	bls.n	8003ee4 <HAL_DMA_Init+0x29c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b52      	cmp	r3, #82	@ 0x52
 8003ee2:	d907      	bls.n	8003ef4 <HAL_DMA_Init+0x2ac>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2b73      	cmp	r3, #115	@ 0x73
 8003eea:	d905      	bls.n	8003ef8 <HAL_DMA_Init+0x2b0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b77      	cmp	r3, #119	@ 0x77
 8003ef2:	d801      	bhi.n	8003ef8 <HAL_DMA_Init+0x2b0>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <HAL_DMA_Init+0x2b2>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d003      	beq.n	8003f06 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f04:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f023 0307 	bic.w	r3, r3, #7
 8003f1c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d117      	bne.n	8003f60 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00e      	beq.n	8003f60 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f002 fbd4 	bl	80066f0 <DMA_CheckFifoParam>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2240      	movs	r2, #64	@ 0x40
 8003f52:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e1fd      	b.n	800435c <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f002 fb0f 	bl	800658c <DMA_CalcBaseAndBitshift>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f76:	f003 031f 	and.w	r3, r3, #31
 8003f7a:	223f      	movs	r2, #63	@ 0x3f
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	609a      	str	r2, [r3, #8]
 8003f82:	e0fd      	b.n	8004180 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a28      	ldr	r2, [pc, #160]	@ (800402c <HAL_DMA_Init+0x3e4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d04a      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a27      	ldr	r2, [pc, #156]	@ (8004030 <HAL_DMA_Init+0x3e8>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d045      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a25      	ldr	r2, [pc, #148]	@ (8004034 <HAL_DMA_Init+0x3ec>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d040      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a24      	ldr	r2, [pc, #144]	@ (8004038 <HAL_DMA_Init+0x3f0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d03b      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a22      	ldr	r2, [pc, #136]	@ (800403c <HAL_DMA_Init+0x3f4>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d036      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a21      	ldr	r2, [pc, #132]	@ (8004040 <HAL_DMA_Init+0x3f8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d031      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004044 <HAL_DMA_Init+0x3fc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d02c      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <HAL_DMA_Init+0x400>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d027      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800404c <HAL_DMA_Init+0x404>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d022      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <HAL_DMA_Init+0x408>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d01d      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a19      	ldr	r2, [pc, #100]	@ (8004054 <HAL_DMA_Init+0x40c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d018      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a18      	ldr	r2, [pc, #96]	@ (8004058 <HAL_DMA_Init+0x410>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d013      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a16      	ldr	r2, [pc, #88]	@ (800405c <HAL_DMA_Init+0x414>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00e      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a15      	ldr	r2, [pc, #84]	@ (8004060 <HAL_DMA_Init+0x418>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d009      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a13      	ldr	r2, [pc, #76]	@ (8004064 <HAL_DMA_Init+0x41c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d004      	beq.n	8004024 <HAL_DMA_Init+0x3dc>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a12      	ldr	r2, [pc, #72]	@ (8004068 <HAL_DMA_Init+0x420>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d123      	bne.n	800406c <HAL_DMA_Init+0x424>
 8004024:	2301      	movs	r3, #1
 8004026:	e022      	b.n	800406e <HAL_DMA_Init+0x426>
 8004028:	fe10803f 	.word	0xfe10803f
 800402c:	48022c08 	.word	0x48022c08
 8004030:	48022c1c 	.word	0x48022c1c
 8004034:	48022c30 	.word	0x48022c30
 8004038:	48022c44 	.word	0x48022c44
 800403c:	48022c58 	.word	0x48022c58
 8004040:	48022c6c 	.word	0x48022c6c
 8004044:	48022c80 	.word	0x48022c80
 8004048:	48022c94 	.word	0x48022c94
 800404c:	58025408 	.word	0x58025408
 8004050:	5802541c 	.word	0x5802541c
 8004054:	58025430 	.word	0x58025430
 8004058:	58025444 	.word	0x58025444
 800405c:	58025458 	.word	0x58025458
 8004060:	5802546c 	.word	0x5802546c
 8004064:	58025480 	.word	0x58025480
 8004068:	58025494 	.word	0x58025494
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d07d      	beq.n	800416e <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a7f      	ldr	r2, [pc, #508]	@ (8004274 <HAL_DMA_Init+0x62c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d021      	beq.n	80040c0 <HAL_DMA_Init+0x478>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a7d      	ldr	r2, [pc, #500]	@ (8004278 <HAL_DMA_Init+0x630>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01c      	beq.n	80040c0 <HAL_DMA_Init+0x478>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a7c      	ldr	r2, [pc, #496]	@ (800427c <HAL_DMA_Init+0x634>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d017      	beq.n	80040c0 <HAL_DMA_Init+0x478>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a7a      	ldr	r2, [pc, #488]	@ (8004280 <HAL_DMA_Init+0x638>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d012      	beq.n	80040c0 <HAL_DMA_Init+0x478>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a79      	ldr	r2, [pc, #484]	@ (8004284 <HAL_DMA_Init+0x63c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00d      	beq.n	80040c0 <HAL_DMA_Init+0x478>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a77      	ldr	r2, [pc, #476]	@ (8004288 <HAL_DMA_Init+0x640>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d008      	beq.n	80040c0 <HAL_DMA_Init+0x478>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a76      	ldr	r2, [pc, #472]	@ (800428c <HAL_DMA_Init+0x644>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d003      	beq.n	80040c0 <HAL_DMA_Init+0x478>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a74      	ldr	r2, [pc, #464]	@ (8004290 <HAL_DMA_Init+0x648>)
 80040be:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2202      	movs	r2, #2
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4b6e      	ldr	r3, [pc, #440]	@ (8004294 <HAL_DMA_Init+0x64c>)
 80040dc:	4013      	ands	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b40      	cmp	r3, #64	@ 0x40
 80040e6:	d008      	beq.n	80040fa <HAL_DMA_Init+0x4b2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b80      	cmp	r3, #128	@ 0x80
 80040ee:	d102      	bne.n	80040f6 <HAL_DMA_Init+0x4ae>
 80040f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80040f4:	e002      	b.n	80040fc <HAL_DMA_Init+0x4b4>
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_DMA_Init+0x4b4>
 80040fa:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68d2      	ldr	r2, [r2, #12]
 8004100:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004102:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800410a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004112:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800411a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004122:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800412a:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	4b55      	ldr	r3, [pc, #340]	@ (8004298 <HAL_DMA_Init+0x650>)
 8004142:	4413      	add	r3, r2
 8004144:	4a55      	ldr	r2, [pc, #340]	@ (800429c <HAL_DMA_Init+0x654>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	009a      	lsls	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f002 fa1a 	bl	800658c <DMA_CalcBaseAndBitshift>
 8004158:	4603      	mov	r3, r0
 800415a:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2201      	movs	r2, #1
 8004166:	409a      	lsls	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	e008      	b.n	8004180 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2240      	movs	r2, #64	@ 0x40
 8004172:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2203      	movs	r2, #3
 8004178:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0ed      	b.n	800435c <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a46      	ldr	r2, [pc, #280]	@ (80042a0 <HAL_DMA_Init+0x658>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d072      	beq.n	8004270 <HAL_DMA_Init+0x628>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a45      	ldr	r2, [pc, #276]	@ (80042a4 <HAL_DMA_Init+0x65c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d06d      	beq.n	8004270 <HAL_DMA_Init+0x628>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a43      	ldr	r2, [pc, #268]	@ (80042a8 <HAL_DMA_Init+0x660>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d068      	beq.n	8004270 <HAL_DMA_Init+0x628>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a42      	ldr	r2, [pc, #264]	@ (80042ac <HAL_DMA_Init+0x664>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d063      	beq.n	8004270 <HAL_DMA_Init+0x628>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a40      	ldr	r2, [pc, #256]	@ (80042b0 <HAL_DMA_Init+0x668>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d05e      	beq.n	8004270 <HAL_DMA_Init+0x628>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a3f      	ldr	r2, [pc, #252]	@ (80042b4 <HAL_DMA_Init+0x66c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d059      	beq.n	8004270 <HAL_DMA_Init+0x628>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a3d      	ldr	r2, [pc, #244]	@ (80042b8 <HAL_DMA_Init+0x670>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d054      	beq.n	8004270 <HAL_DMA_Init+0x628>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a3c      	ldr	r2, [pc, #240]	@ (80042bc <HAL_DMA_Init+0x674>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d04f      	beq.n	8004270 <HAL_DMA_Init+0x628>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a3a      	ldr	r2, [pc, #232]	@ (80042c0 <HAL_DMA_Init+0x678>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d04a      	beq.n	8004270 <HAL_DMA_Init+0x628>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a39      	ldr	r2, [pc, #228]	@ (80042c4 <HAL_DMA_Init+0x67c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d045      	beq.n	8004270 <HAL_DMA_Init+0x628>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a37      	ldr	r2, [pc, #220]	@ (80042c8 <HAL_DMA_Init+0x680>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d040      	beq.n	8004270 <HAL_DMA_Init+0x628>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a36      	ldr	r2, [pc, #216]	@ (80042cc <HAL_DMA_Init+0x684>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d03b      	beq.n	8004270 <HAL_DMA_Init+0x628>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a34      	ldr	r2, [pc, #208]	@ (80042d0 <HAL_DMA_Init+0x688>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d036      	beq.n	8004270 <HAL_DMA_Init+0x628>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a33      	ldr	r2, [pc, #204]	@ (80042d4 <HAL_DMA_Init+0x68c>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d031      	beq.n	8004270 <HAL_DMA_Init+0x628>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a31      	ldr	r2, [pc, #196]	@ (80042d8 <HAL_DMA_Init+0x690>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02c      	beq.n	8004270 <HAL_DMA_Init+0x628>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a30      	ldr	r2, [pc, #192]	@ (80042dc <HAL_DMA_Init+0x694>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d027      	beq.n	8004270 <HAL_DMA_Init+0x628>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a13      	ldr	r2, [pc, #76]	@ (8004274 <HAL_DMA_Init+0x62c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d022      	beq.n	8004270 <HAL_DMA_Init+0x628>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <HAL_DMA_Init+0x630>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d01d      	beq.n	8004270 <HAL_DMA_Init+0x628>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a10      	ldr	r2, [pc, #64]	@ (800427c <HAL_DMA_Init+0x634>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d018      	beq.n	8004270 <HAL_DMA_Init+0x628>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a0f      	ldr	r2, [pc, #60]	@ (8004280 <HAL_DMA_Init+0x638>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d013      	beq.n	8004270 <HAL_DMA_Init+0x628>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a0d      	ldr	r2, [pc, #52]	@ (8004284 <HAL_DMA_Init+0x63c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00e      	beq.n	8004270 <HAL_DMA_Init+0x628>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a0c      	ldr	r2, [pc, #48]	@ (8004288 <HAL_DMA_Init+0x640>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d009      	beq.n	8004270 <HAL_DMA_Init+0x628>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <HAL_DMA_Init+0x644>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d004      	beq.n	8004270 <HAL_DMA_Init+0x628>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a09      	ldr	r2, [pc, #36]	@ (8004290 <HAL_DMA_Init+0x648>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d137      	bne.n	80042e0 <HAL_DMA_Init+0x698>
 8004270:	2301      	movs	r3, #1
 8004272:	e036      	b.n	80042e2 <HAL_DMA_Init+0x69a>
 8004274:	58025408 	.word	0x58025408
 8004278:	5802541c 	.word	0x5802541c
 800427c:	58025430 	.word	0x58025430
 8004280:	58025444 	.word	0x58025444
 8004284:	58025458 	.word	0x58025458
 8004288:	5802546c 	.word	0x5802546c
 800428c:	58025480 	.word	0x58025480
 8004290:	58025494 	.word	0x58025494
 8004294:	fffe000f 	.word	0xfffe000f
 8004298:	a7fdabf8 	.word	0xa7fdabf8
 800429c:	cccccccd 	.word	0xcccccccd
 80042a0:	40020010 	.word	0x40020010
 80042a4:	40020028 	.word	0x40020028
 80042a8:	40020040 	.word	0x40020040
 80042ac:	40020058 	.word	0x40020058
 80042b0:	40020070 	.word	0x40020070
 80042b4:	40020088 	.word	0x40020088
 80042b8:	400200a0 	.word	0x400200a0
 80042bc:	400200b8 	.word	0x400200b8
 80042c0:	40020410 	.word	0x40020410
 80042c4:	40020428 	.word	0x40020428
 80042c8:	40020440 	.word	0x40020440
 80042cc:	40020458 	.word	0x40020458
 80042d0:	40020470 	.word	0x40020470
 80042d4:	40020488 	.word	0x40020488
 80042d8:	400204a0 	.word	0x400204a0
 80042dc:	400204b8 	.word	0x400204b8
 80042e0:	2300      	movs	r3, #0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d032      	beq.n	800434c <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f002 fa7e 	bl	80067e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b80      	cmp	r3, #128	@ 0x80
 80042f2:	d102      	bne.n	80042fa <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800430e:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d010      	beq.n	800433a <HAL_DMA_Init+0x6f2>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d80c      	bhi.n	800433a <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f002 fafb 	bl	800691c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004336:	605a      	str	r2, [r3, #4]
 8004338:	e008      	b.n	800434c <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3718      	adds	r7, #24
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e226      	b.n	80047ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_DMA_Start_IT+0x2a>
 800438a:	2302      	movs	r3, #2
 800438c:	e21f      	b.n	80047ce <HAL_DMA_Start_IT+0x46a>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b01      	cmp	r3, #1
 80043a0:	f040 820a 	bne.w	80047b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2200      	movs	r2, #0
 80043b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a68      	ldr	r2, [pc, #416]	@ (8004558 <HAL_DMA_Start_IT+0x1f4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d04a      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a66      	ldr	r2, [pc, #408]	@ (800455c <HAL_DMA_Start_IT+0x1f8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d045      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a65      	ldr	r2, [pc, #404]	@ (8004560 <HAL_DMA_Start_IT+0x1fc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d040      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a63      	ldr	r2, [pc, #396]	@ (8004564 <HAL_DMA_Start_IT+0x200>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d03b      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a62      	ldr	r2, [pc, #392]	@ (8004568 <HAL_DMA_Start_IT+0x204>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d036      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a60      	ldr	r2, [pc, #384]	@ (800456c <HAL_DMA_Start_IT+0x208>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d031      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004570 <HAL_DMA_Start_IT+0x20c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d02c      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004574 <HAL_DMA_Start_IT+0x210>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d027      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a5c      	ldr	r2, [pc, #368]	@ (8004578 <HAL_DMA_Start_IT+0x214>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d022      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5a      	ldr	r2, [pc, #360]	@ (800457c <HAL_DMA_Start_IT+0x218>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01d      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a59      	ldr	r2, [pc, #356]	@ (8004580 <HAL_DMA_Start_IT+0x21c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d018      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a57      	ldr	r2, [pc, #348]	@ (8004584 <HAL_DMA_Start_IT+0x220>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a56      	ldr	r2, [pc, #344]	@ (8004588 <HAL_DMA_Start_IT+0x224>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00e      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a54      	ldr	r2, [pc, #336]	@ (800458c <HAL_DMA_Start_IT+0x228>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d009      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a53      	ldr	r2, [pc, #332]	@ (8004590 <HAL_DMA_Start_IT+0x22c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d004      	beq.n	8004452 <HAL_DMA_Start_IT+0xee>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a51      	ldr	r2, [pc, #324]	@ (8004594 <HAL_DMA_Start_IT+0x230>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d108      	bne.n	8004464 <HAL_DMA_Start_IT+0x100>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f022 0201 	bic.w	r2, r2, #1
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e007      	b.n	8004474 <HAL_DMA_Start_IT+0x110>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f022 0201 	bic.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f001 fea2 	bl	80061c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a34      	ldr	r2, [pc, #208]	@ (8004558 <HAL_DMA_Start_IT+0x1f4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d04a      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a33      	ldr	r2, [pc, #204]	@ (800455c <HAL_DMA_Start_IT+0x1f8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d045      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a31      	ldr	r2, [pc, #196]	@ (8004560 <HAL_DMA_Start_IT+0x1fc>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d040      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a30      	ldr	r2, [pc, #192]	@ (8004564 <HAL_DMA_Start_IT+0x200>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d03b      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004568 <HAL_DMA_Start_IT+0x204>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d036      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a2d      	ldr	r2, [pc, #180]	@ (800456c <HAL_DMA_Start_IT+0x208>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d031      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a2b      	ldr	r2, [pc, #172]	@ (8004570 <HAL_DMA_Start_IT+0x20c>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d02c      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004574 <HAL_DMA_Start_IT+0x210>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d027      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a28      	ldr	r2, [pc, #160]	@ (8004578 <HAL_DMA_Start_IT+0x214>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d022      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a27      	ldr	r2, [pc, #156]	@ (800457c <HAL_DMA_Start_IT+0x218>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d01d      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a25      	ldr	r2, [pc, #148]	@ (8004580 <HAL_DMA_Start_IT+0x21c>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d018      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a24      	ldr	r2, [pc, #144]	@ (8004584 <HAL_DMA_Start_IT+0x220>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d013      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a22      	ldr	r2, [pc, #136]	@ (8004588 <HAL_DMA_Start_IT+0x224>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00e      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a21      	ldr	r2, [pc, #132]	@ (800458c <HAL_DMA_Start_IT+0x228>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d009      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1f      	ldr	r2, [pc, #124]	@ (8004590 <HAL_DMA_Start_IT+0x22c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d004      	beq.n	8004520 <HAL_DMA_Start_IT+0x1bc>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1e      	ldr	r2, [pc, #120]	@ (8004594 <HAL_DMA_Start_IT+0x230>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d101      	bne.n	8004524 <HAL_DMA_Start_IT+0x1c0>
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <HAL_DMA_Start_IT+0x1c2>
 8004524:	2300      	movs	r3, #0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d036      	beq.n	8004598 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 021e 	bic.w	r2, r3, #30
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0216 	orr.w	r2, r2, #22
 800453c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	d03e      	beq.n	80045c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f042 0208 	orr.w	r2, r2, #8
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e035      	b.n	80045c4 <HAL_DMA_Start_IT+0x260>
 8004558:	40020010 	.word	0x40020010
 800455c:	40020028 	.word	0x40020028
 8004560:	40020040 	.word	0x40020040
 8004564:	40020058 	.word	0x40020058
 8004568:	40020070 	.word	0x40020070
 800456c:	40020088 	.word	0x40020088
 8004570:	400200a0 	.word	0x400200a0
 8004574:	400200b8 	.word	0x400200b8
 8004578:	40020410 	.word	0x40020410
 800457c:	40020428 	.word	0x40020428
 8004580:	40020440 	.word	0x40020440
 8004584:	40020458 	.word	0x40020458
 8004588:	40020470 	.word	0x40020470
 800458c:	40020488 	.word	0x40020488
 8004590:	400204a0 	.word	0x400204a0
 8004594:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f023 020e 	bic.w	r2, r3, #14
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f042 020a 	orr.w	r2, r2, #10
 80045aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0204 	orr.w	r2, r2, #4
 80045c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a83      	ldr	r2, [pc, #524]	@ (80047d8 <HAL_DMA_Start_IT+0x474>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d072      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a82      	ldr	r2, [pc, #520]	@ (80047dc <HAL_DMA_Start_IT+0x478>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d06d      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a80      	ldr	r2, [pc, #512]	@ (80047e0 <HAL_DMA_Start_IT+0x47c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d068      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a7f      	ldr	r2, [pc, #508]	@ (80047e4 <HAL_DMA_Start_IT+0x480>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d063      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a7d      	ldr	r2, [pc, #500]	@ (80047e8 <HAL_DMA_Start_IT+0x484>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d05e      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a7c      	ldr	r2, [pc, #496]	@ (80047ec <HAL_DMA_Start_IT+0x488>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d059      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a7a      	ldr	r2, [pc, #488]	@ (80047f0 <HAL_DMA_Start_IT+0x48c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d054      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a79      	ldr	r2, [pc, #484]	@ (80047f4 <HAL_DMA_Start_IT+0x490>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d04f      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a77      	ldr	r2, [pc, #476]	@ (80047f8 <HAL_DMA_Start_IT+0x494>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d04a      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a76      	ldr	r2, [pc, #472]	@ (80047fc <HAL_DMA_Start_IT+0x498>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d045      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a74      	ldr	r2, [pc, #464]	@ (8004800 <HAL_DMA_Start_IT+0x49c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d040      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a73      	ldr	r2, [pc, #460]	@ (8004804 <HAL_DMA_Start_IT+0x4a0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d03b      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a71      	ldr	r2, [pc, #452]	@ (8004808 <HAL_DMA_Start_IT+0x4a4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d036      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a70      	ldr	r2, [pc, #448]	@ (800480c <HAL_DMA_Start_IT+0x4a8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d031      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a6e      	ldr	r2, [pc, #440]	@ (8004810 <HAL_DMA_Start_IT+0x4ac>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d02c      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a6d      	ldr	r2, [pc, #436]	@ (8004814 <HAL_DMA_Start_IT+0x4b0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d027      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6b      	ldr	r2, [pc, #428]	@ (8004818 <HAL_DMA_Start_IT+0x4b4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d022      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6a      	ldr	r2, [pc, #424]	@ (800481c <HAL_DMA_Start_IT+0x4b8>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d01d      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a68      	ldr	r2, [pc, #416]	@ (8004820 <HAL_DMA_Start_IT+0x4bc>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d018      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a67      	ldr	r2, [pc, #412]	@ (8004824 <HAL_DMA_Start_IT+0x4c0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d013      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a65      	ldr	r2, [pc, #404]	@ (8004828 <HAL_DMA_Start_IT+0x4c4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00e      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a64      	ldr	r2, [pc, #400]	@ (800482c <HAL_DMA_Start_IT+0x4c8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d009      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a62      	ldr	r2, [pc, #392]	@ (8004830 <HAL_DMA_Start_IT+0x4cc>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_DMA_Start_IT+0x350>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a61      	ldr	r2, [pc, #388]	@ (8004834 <HAL_DMA_Start_IT+0x4d0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d101      	bne.n	80046b8 <HAL_DMA_Start_IT+0x354>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_DMA_Start_IT+0x356>
 80046b8:	2300      	movs	r3, #0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d01a      	beq.n	80046f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a37      	ldr	r2, [pc, #220]	@ (80047d8 <HAL_DMA_Start_IT+0x474>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d04a      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a36      	ldr	r2, [pc, #216]	@ (80047dc <HAL_DMA_Start_IT+0x478>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d045      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a34      	ldr	r2, [pc, #208]	@ (80047e0 <HAL_DMA_Start_IT+0x47c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d040      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a33      	ldr	r2, [pc, #204]	@ (80047e4 <HAL_DMA_Start_IT+0x480>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d03b      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a31      	ldr	r2, [pc, #196]	@ (80047e8 <HAL_DMA_Start_IT+0x484>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d036      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a30      	ldr	r2, [pc, #192]	@ (80047ec <HAL_DMA_Start_IT+0x488>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d031      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2e      	ldr	r2, [pc, #184]	@ (80047f0 <HAL_DMA_Start_IT+0x48c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d02c      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a2d      	ldr	r2, [pc, #180]	@ (80047f4 <HAL_DMA_Start_IT+0x490>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d027      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a2b      	ldr	r2, [pc, #172]	@ (80047f8 <HAL_DMA_Start_IT+0x494>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a2a      	ldr	r2, [pc, #168]	@ (80047fc <HAL_DMA_Start_IT+0x498>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d01d      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a28      	ldr	r2, [pc, #160]	@ (8004800 <HAL_DMA_Start_IT+0x49c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a27      	ldr	r2, [pc, #156]	@ (8004804 <HAL_DMA_Start_IT+0x4a0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a25      	ldr	r2, [pc, #148]	@ (8004808 <HAL_DMA_Start_IT+0x4a4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a24      	ldr	r2, [pc, #144]	@ (800480c <HAL_DMA_Start_IT+0x4a8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a22      	ldr	r2, [pc, #136]	@ (8004810 <HAL_DMA_Start_IT+0x4ac>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_DMA_Start_IT+0x430>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a21      	ldr	r2, [pc, #132]	@ (8004814 <HAL_DMA_Start_IT+0x4b0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d108      	bne.n	80047a6 <HAL_DMA_Start_IT+0x442>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e012      	b.n	80047cc <HAL_DMA_Start_IT+0x468>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e009      	b.n	80047cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40020010 	.word	0x40020010
 80047dc:	40020028 	.word	0x40020028
 80047e0:	40020040 	.word	0x40020040
 80047e4:	40020058 	.word	0x40020058
 80047e8:	40020070 	.word	0x40020070
 80047ec:	40020088 	.word	0x40020088
 80047f0:	400200a0 	.word	0x400200a0
 80047f4:	400200b8 	.word	0x400200b8
 80047f8:	40020410 	.word	0x40020410
 80047fc:	40020428 	.word	0x40020428
 8004800:	40020440 	.word	0x40020440
 8004804:	40020458 	.word	0x40020458
 8004808:	40020470 	.word	0x40020470
 800480c:	40020488 	.word	0x40020488
 8004810:	400204a0 	.word	0x400204a0
 8004814:	400204b8 	.word	0x400204b8
 8004818:	58025408 	.word	0x58025408
 800481c:	5802541c 	.word	0x5802541c
 8004820:	58025430 	.word	0x58025430
 8004824:	58025444 	.word	0x58025444
 8004828:	58025458 	.word	0x58025458
 800482c:	5802546c 	.word	0x5802546c
 8004830:	58025480 	.word	0x58025480
 8004834:	58025494 	.word	0x58025494

08004838 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004840:	f7fd fb88 	bl	8001f54 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e2dc      	b.n	8004e0a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d008      	beq.n	800486e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2280      	movs	r2, #128	@ 0x80
 8004860:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e2cd      	b.n	8004e0a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a76      	ldr	r2, [pc, #472]	@ (8004a4c <HAL_DMA_Abort+0x214>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d04a      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a74      	ldr	r2, [pc, #464]	@ (8004a50 <HAL_DMA_Abort+0x218>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d045      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a73      	ldr	r2, [pc, #460]	@ (8004a54 <HAL_DMA_Abort+0x21c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d040      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a71      	ldr	r2, [pc, #452]	@ (8004a58 <HAL_DMA_Abort+0x220>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d03b      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a70      	ldr	r2, [pc, #448]	@ (8004a5c <HAL_DMA_Abort+0x224>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d036      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a6e      	ldr	r2, [pc, #440]	@ (8004a60 <HAL_DMA_Abort+0x228>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d031      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6d      	ldr	r2, [pc, #436]	@ (8004a64 <HAL_DMA_Abort+0x22c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d02c      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a6b      	ldr	r2, [pc, #428]	@ (8004a68 <HAL_DMA_Abort+0x230>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d027      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a6a      	ldr	r2, [pc, #424]	@ (8004a6c <HAL_DMA_Abort+0x234>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d022      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a68      	ldr	r2, [pc, #416]	@ (8004a70 <HAL_DMA_Abort+0x238>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d01d      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a67      	ldr	r2, [pc, #412]	@ (8004a74 <HAL_DMA_Abort+0x23c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d018      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a65      	ldr	r2, [pc, #404]	@ (8004a78 <HAL_DMA_Abort+0x240>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a64      	ldr	r2, [pc, #400]	@ (8004a7c <HAL_DMA_Abort+0x244>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d00e      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a62      	ldr	r2, [pc, #392]	@ (8004a80 <HAL_DMA_Abort+0x248>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d009      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a61      	ldr	r2, [pc, #388]	@ (8004a84 <HAL_DMA_Abort+0x24c>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d004      	beq.n	800490e <HAL_DMA_Abort+0xd6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a5f      	ldr	r2, [pc, #380]	@ (8004a88 <HAL_DMA_Abort+0x250>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d101      	bne.n	8004912 <HAL_DMA_Abort+0xda>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_DMA_Abort+0xdc>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d013      	beq.n	8004940 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 021e 	bic.w	r2, r2, #30
 8004926:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004936:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e00a      	b.n	8004956 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 020e 	bic.w	r2, r2, #14
 800494e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a3c      	ldr	r2, [pc, #240]	@ (8004a4c <HAL_DMA_Abort+0x214>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d072      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a3a      	ldr	r2, [pc, #232]	@ (8004a50 <HAL_DMA_Abort+0x218>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d06d      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a39      	ldr	r2, [pc, #228]	@ (8004a54 <HAL_DMA_Abort+0x21c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d068      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a37      	ldr	r2, [pc, #220]	@ (8004a58 <HAL_DMA_Abort+0x220>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d063      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a36      	ldr	r2, [pc, #216]	@ (8004a5c <HAL_DMA_Abort+0x224>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d05e      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a34      	ldr	r2, [pc, #208]	@ (8004a60 <HAL_DMA_Abort+0x228>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d059      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a33      	ldr	r2, [pc, #204]	@ (8004a64 <HAL_DMA_Abort+0x22c>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d054      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a31      	ldr	r2, [pc, #196]	@ (8004a68 <HAL_DMA_Abort+0x230>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d04f      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a30      	ldr	r2, [pc, #192]	@ (8004a6c <HAL_DMA_Abort+0x234>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d04a      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2e      	ldr	r2, [pc, #184]	@ (8004a70 <HAL_DMA_Abort+0x238>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d045      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2d      	ldr	r2, [pc, #180]	@ (8004a74 <HAL_DMA_Abort+0x23c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d040      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004a78 <HAL_DMA_Abort+0x240>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d03b      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a2a      	ldr	r2, [pc, #168]	@ (8004a7c <HAL_DMA_Abort+0x244>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d036      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a28      	ldr	r2, [pc, #160]	@ (8004a80 <HAL_DMA_Abort+0x248>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d031      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a27      	ldr	r2, [pc, #156]	@ (8004a84 <HAL_DMA_Abort+0x24c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d02c      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a25      	ldr	r2, [pc, #148]	@ (8004a88 <HAL_DMA_Abort+0x250>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d027      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a24      	ldr	r2, [pc, #144]	@ (8004a8c <HAL_DMA_Abort+0x254>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d022      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a22      	ldr	r2, [pc, #136]	@ (8004a90 <HAL_DMA_Abort+0x258>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d01d      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a21      	ldr	r2, [pc, #132]	@ (8004a94 <HAL_DMA_Abort+0x25c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d018      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1f      	ldr	r2, [pc, #124]	@ (8004a98 <HAL_DMA_Abort+0x260>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d013      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <HAL_DMA_Abort+0x264>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8004aa0 <HAL_DMA_Abort+0x268>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d009      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1b      	ldr	r2, [pc, #108]	@ (8004aa4 <HAL_DMA_Abort+0x26c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_DMA_Abort+0x20e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a19      	ldr	r2, [pc, #100]	@ (8004aa8 <HAL_DMA_Abort+0x270>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d132      	bne.n	8004aac <HAL_DMA_Abort+0x274>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e031      	b.n	8004aae <HAL_DMA_Abort+0x276>
 8004a4a:	bf00      	nop
 8004a4c:	40020010 	.word	0x40020010
 8004a50:	40020028 	.word	0x40020028
 8004a54:	40020040 	.word	0x40020040
 8004a58:	40020058 	.word	0x40020058
 8004a5c:	40020070 	.word	0x40020070
 8004a60:	40020088 	.word	0x40020088
 8004a64:	400200a0 	.word	0x400200a0
 8004a68:	400200b8 	.word	0x400200b8
 8004a6c:	40020410 	.word	0x40020410
 8004a70:	40020428 	.word	0x40020428
 8004a74:	40020440 	.word	0x40020440
 8004a78:	40020458 	.word	0x40020458
 8004a7c:	40020470 	.word	0x40020470
 8004a80:	40020488 	.word	0x40020488
 8004a84:	400204a0 	.word	0x400204a0
 8004a88:	400204b8 	.word	0x400204b8
 8004a8c:	58025408 	.word	0x58025408
 8004a90:	5802541c 	.word	0x5802541c
 8004a94:	58025430 	.word	0x58025430
 8004a98:	58025444 	.word	0x58025444
 8004a9c:	58025458 	.word	0x58025458
 8004aa0:	5802546c 	.word	0x5802546c
 8004aa4:	58025480 	.word	0x58025480
 8004aa8:	58025494 	.word	0x58025494
 8004aac:	2300      	movs	r3, #0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d007      	beq.n	8004ac2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004abc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ac0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a6d      	ldr	r2, [pc, #436]	@ (8004c7c <HAL_DMA_Abort+0x444>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d04a      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a6b      	ldr	r2, [pc, #428]	@ (8004c80 <HAL_DMA_Abort+0x448>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d045      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a6a      	ldr	r2, [pc, #424]	@ (8004c84 <HAL_DMA_Abort+0x44c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d040      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a68      	ldr	r2, [pc, #416]	@ (8004c88 <HAL_DMA_Abort+0x450>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d03b      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a67      	ldr	r2, [pc, #412]	@ (8004c8c <HAL_DMA_Abort+0x454>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d036      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a65      	ldr	r2, [pc, #404]	@ (8004c90 <HAL_DMA_Abort+0x458>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d031      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a64      	ldr	r2, [pc, #400]	@ (8004c94 <HAL_DMA_Abort+0x45c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d02c      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a62      	ldr	r2, [pc, #392]	@ (8004c98 <HAL_DMA_Abort+0x460>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d027      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a61      	ldr	r2, [pc, #388]	@ (8004c9c <HAL_DMA_Abort+0x464>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d022      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a5f      	ldr	r2, [pc, #380]	@ (8004ca0 <HAL_DMA_Abort+0x468>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01d      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8004ca4 <HAL_DMA_Abort+0x46c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a5c      	ldr	r2, [pc, #368]	@ (8004ca8 <HAL_DMA_Abort+0x470>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a5b      	ldr	r2, [pc, #364]	@ (8004cac <HAL_DMA_Abort+0x474>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a59      	ldr	r2, [pc, #356]	@ (8004cb0 <HAL_DMA_Abort+0x478>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a58      	ldr	r2, [pc, #352]	@ (8004cb4 <HAL_DMA_Abort+0x47c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_DMA_Abort+0x32a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a56      	ldr	r2, [pc, #344]	@ (8004cb8 <HAL_DMA_Abort+0x480>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d108      	bne.n	8004b74 <HAL_DMA_Abort+0x33c>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e007      	b.n	8004b84 <HAL_DMA_Abort+0x34c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004b84:	e013      	b.n	8004bae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b86:	f7fd f9e5 	bl	8001f54 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d90c      	bls.n	8004bae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e12d      	b.n	8004e0a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e5      	bne.n	8004b86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8004c7c <HAL_DMA_Abort+0x444>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d04a      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c80 <HAL_DMA_Abort+0x448>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d045      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8004c84 <HAL_DMA_Abort+0x44c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d040      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2a      	ldr	r2, [pc, #168]	@ (8004c88 <HAL_DMA_Abort+0x450>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d03b      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a29      	ldr	r2, [pc, #164]	@ (8004c8c <HAL_DMA_Abort+0x454>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d036      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a27      	ldr	r2, [pc, #156]	@ (8004c90 <HAL_DMA_Abort+0x458>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d031      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a26      	ldr	r2, [pc, #152]	@ (8004c94 <HAL_DMA_Abort+0x45c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d02c      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a24      	ldr	r2, [pc, #144]	@ (8004c98 <HAL_DMA_Abort+0x460>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d027      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a23      	ldr	r2, [pc, #140]	@ (8004c9c <HAL_DMA_Abort+0x464>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d022      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a21      	ldr	r2, [pc, #132]	@ (8004ca0 <HAL_DMA_Abort+0x468>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d01d      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a20      	ldr	r2, [pc, #128]	@ (8004ca4 <HAL_DMA_Abort+0x46c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d018      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca8 <HAL_DMA_Abort+0x470>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1d      	ldr	r2, [pc, #116]	@ (8004cac <HAL_DMA_Abort+0x474>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb0 <HAL_DMA_Abort+0x478>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8004cb4 <HAL_DMA_Abort+0x47c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_DMA_Abort+0x422>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a18      	ldr	r2, [pc, #96]	@ (8004cb8 <HAL_DMA_Abort+0x480>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d101      	bne.n	8004c5e <HAL_DMA_Abort+0x426>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <HAL_DMA_Abort+0x428>
 8004c5e:	2300      	movs	r3, #0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d02b      	beq.n	8004cbc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c68:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	223f      	movs	r2, #63	@ 0x3f
 8004c74:	409a      	lsls	r2, r3
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	609a      	str	r2, [r3, #8]
 8004c7a:	e02a      	b.n	8004cd2 <HAL_DMA_Abort+0x49a>
 8004c7c:	40020010 	.word	0x40020010
 8004c80:	40020028 	.word	0x40020028
 8004c84:	40020040 	.word	0x40020040
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	40020070 	.word	0x40020070
 8004c90:	40020088 	.word	0x40020088
 8004c94:	400200a0 	.word	0x400200a0
 8004c98:	400200b8 	.word	0x400200b8
 8004c9c:	40020410 	.word	0x40020410
 8004ca0:	40020428 	.word	0x40020428
 8004ca4:	40020440 	.word	0x40020440
 8004ca8:	40020458 	.word	0x40020458
 8004cac:	40020470 	.word	0x40020470
 8004cb0:	40020488 	.word	0x40020488
 8004cb4:	400204a0 	.word	0x400204a0
 8004cb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	2201      	movs	r2, #1
 8004ccc:	409a      	lsls	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a4f      	ldr	r2, [pc, #316]	@ (8004e14 <HAL_DMA_Abort+0x5dc>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d072      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a4d      	ldr	r2, [pc, #308]	@ (8004e18 <HAL_DMA_Abort+0x5e0>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d06d      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a4c      	ldr	r2, [pc, #304]	@ (8004e1c <HAL_DMA_Abort+0x5e4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d068      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8004e20 <HAL_DMA_Abort+0x5e8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d063      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a49      	ldr	r2, [pc, #292]	@ (8004e24 <HAL_DMA_Abort+0x5ec>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d05e      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a47      	ldr	r2, [pc, #284]	@ (8004e28 <HAL_DMA_Abort+0x5f0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d059      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a46      	ldr	r2, [pc, #280]	@ (8004e2c <HAL_DMA_Abort+0x5f4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d054      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a44      	ldr	r2, [pc, #272]	@ (8004e30 <HAL_DMA_Abort+0x5f8>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d04f      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a43      	ldr	r2, [pc, #268]	@ (8004e34 <HAL_DMA_Abort+0x5fc>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d04a      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a41      	ldr	r2, [pc, #260]	@ (8004e38 <HAL_DMA_Abort+0x600>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d045      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a40      	ldr	r2, [pc, #256]	@ (8004e3c <HAL_DMA_Abort+0x604>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d040      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a3e      	ldr	r2, [pc, #248]	@ (8004e40 <HAL_DMA_Abort+0x608>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d03b      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a3d      	ldr	r2, [pc, #244]	@ (8004e44 <HAL_DMA_Abort+0x60c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d036      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a3b      	ldr	r2, [pc, #236]	@ (8004e48 <HAL_DMA_Abort+0x610>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d031      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a3a      	ldr	r2, [pc, #232]	@ (8004e4c <HAL_DMA_Abort+0x614>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d02c      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a38      	ldr	r2, [pc, #224]	@ (8004e50 <HAL_DMA_Abort+0x618>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d027      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a37      	ldr	r2, [pc, #220]	@ (8004e54 <HAL_DMA_Abort+0x61c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d022      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a35      	ldr	r2, [pc, #212]	@ (8004e58 <HAL_DMA_Abort+0x620>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01d      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a34      	ldr	r2, [pc, #208]	@ (8004e5c <HAL_DMA_Abort+0x624>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d018      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a32      	ldr	r2, [pc, #200]	@ (8004e60 <HAL_DMA_Abort+0x628>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a31      	ldr	r2, [pc, #196]	@ (8004e64 <HAL_DMA_Abort+0x62c>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00e      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a2f      	ldr	r2, [pc, #188]	@ (8004e68 <HAL_DMA_Abort+0x630>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2e      	ldr	r2, [pc, #184]	@ (8004e6c <HAL_DMA_Abort+0x634>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_DMA_Abort+0x58a>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a2c      	ldr	r2, [pc, #176]	@ (8004e70 <HAL_DMA_Abort+0x638>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <HAL_DMA_Abort+0x58e>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e000      	b.n	8004dc8 <HAL_DMA_Abort+0x590>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d015      	beq.n	8004df8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004dd4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004de8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004df6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40020010 	.word	0x40020010
 8004e18:	40020028 	.word	0x40020028
 8004e1c:	40020040 	.word	0x40020040
 8004e20:	40020058 	.word	0x40020058
 8004e24:	40020070 	.word	0x40020070
 8004e28:	40020088 	.word	0x40020088
 8004e2c:	400200a0 	.word	0x400200a0
 8004e30:	400200b8 	.word	0x400200b8
 8004e34:	40020410 	.word	0x40020410
 8004e38:	40020428 	.word	0x40020428
 8004e3c:	40020440 	.word	0x40020440
 8004e40:	40020458 	.word	0x40020458
 8004e44:	40020470 	.word	0x40020470
 8004e48:	40020488 	.word	0x40020488
 8004e4c:	400204a0 	.word	0x400204a0
 8004e50:	400204b8 	.word	0x400204b8
 8004e54:	58025408 	.word	0x58025408
 8004e58:	5802541c 	.word	0x5802541c
 8004e5c:	58025430 	.word	0x58025430
 8004e60:	58025444 	.word	0x58025444
 8004e64:	58025458 	.word	0x58025458
 8004e68:	5802546c 	.word	0x5802546c
 8004e6c:	58025480 	.word	0x58025480
 8004e70:	58025494 	.word	0x58025494

08004e74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e237      	b.n	80052f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d004      	beq.n	8004e9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2280      	movs	r2, #128	@ 0x80
 8004e96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e22c      	b.n	80052f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a5c      	ldr	r2, [pc, #368]	@ (8005014 <HAL_DMA_Abort_IT+0x1a0>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d04a      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a5b      	ldr	r2, [pc, #364]	@ (8005018 <HAL_DMA_Abort_IT+0x1a4>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d045      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a59      	ldr	r2, [pc, #356]	@ (800501c <HAL_DMA_Abort_IT+0x1a8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d040      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a58      	ldr	r2, [pc, #352]	@ (8005020 <HAL_DMA_Abort_IT+0x1ac>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d03b      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a56      	ldr	r2, [pc, #344]	@ (8005024 <HAL_DMA_Abort_IT+0x1b0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d036      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a55      	ldr	r2, [pc, #340]	@ (8005028 <HAL_DMA_Abort_IT+0x1b4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d031      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a53      	ldr	r2, [pc, #332]	@ (800502c <HAL_DMA_Abort_IT+0x1b8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d02c      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a52      	ldr	r2, [pc, #328]	@ (8005030 <HAL_DMA_Abort_IT+0x1bc>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d027      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a50      	ldr	r2, [pc, #320]	@ (8005034 <HAL_DMA_Abort_IT+0x1c0>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d022      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a4f      	ldr	r2, [pc, #316]	@ (8005038 <HAL_DMA_Abort_IT+0x1c4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d01d      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a4d      	ldr	r2, [pc, #308]	@ (800503c <HAL_DMA_Abort_IT+0x1c8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d018      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a4c      	ldr	r2, [pc, #304]	@ (8005040 <HAL_DMA_Abort_IT+0x1cc>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d013      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a4a      	ldr	r2, [pc, #296]	@ (8005044 <HAL_DMA_Abort_IT+0x1d0>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00e      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a49      	ldr	r2, [pc, #292]	@ (8005048 <HAL_DMA_Abort_IT+0x1d4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d009      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a47      	ldr	r2, [pc, #284]	@ (800504c <HAL_DMA_Abort_IT+0x1d8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_DMA_Abort_IT+0xc8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a46      	ldr	r2, [pc, #280]	@ (8005050 <HAL_DMA_Abort_IT+0x1dc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d101      	bne.n	8004f40 <HAL_DMA_Abort_IT+0xcc>
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <HAL_DMA_Abort_IT+0xce>
 8004f40:	2300      	movs	r3, #0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8086 	beq.w	8005054 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a2f      	ldr	r2, [pc, #188]	@ (8005014 <HAL_DMA_Abort_IT+0x1a0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d04a      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8005018 <HAL_DMA_Abort_IT+0x1a4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d045      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a2c      	ldr	r2, [pc, #176]	@ (800501c <HAL_DMA_Abort_IT+0x1a8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d040      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a2b      	ldr	r2, [pc, #172]	@ (8005020 <HAL_DMA_Abort_IT+0x1ac>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d03b      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a29      	ldr	r2, [pc, #164]	@ (8005024 <HAL_DMA_Abort_IT+0x1b0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d036      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a28      	ldr	r2, [pc, #160]	@ (8005028 <HAL_DMA_Abort_IT+0x1b4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d031      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a26      	ldr	r2, [pc, #152]	@ (800502c <HAL_DMA_Abort_IT+0x1b8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02c      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a25      	ldr	r2, [pc, #148]	@ (8005030 <HAL_DMA_Abort_IT+0x1bc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d027      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a23      	ldr	r2, [pc, #140]	@ (8005034 <HAL_DMA_Abort_IT+0x1c0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d022      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a22      	ldr	r2, [pc, #136]	@ (8005038 <HAL_DMA_Abort_IT+0x1c4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d01d      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a20      	ldr	r2, [pc, #128]	@ (800503c <HAL_DMA_Abort_IT+0x1c8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d018      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005040 <HAL_DMA_Abort_IT+0x1cc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8005044 <HAL_DMA_Abort_IT+0x1d0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8005048 <HAL_DMA_Abort_IT+0x1d4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800504c <HAL_DMA_Abort_IT+0x1d8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <HAL_DMA_Abort_IT+0x17c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a19      	ldr	r2, [pc, #100]	@ (8005050 <HAL_DMA_Abort_IT+0x1dc>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d108      	bne.n	8005002 <HAL_DMA_Abort_IT+0x18e>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0201 	bic.w	r2, r2, #1
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	e178      	b.n	80052f4 <HAL_DMA_Abort_IT+0x480>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0201 	bic.w	r2, r2, #1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e16f      	b.n	80052f4 <HAL_DMA_Abort_IT+0x480>
 8005014:	40020010 	.word	0x40020010
 8005018:	40020028 	.word	0x40020028
 800501c:	40020040 	.word	0x40020040
 8005020:	40020058 	.word	0x40020058
 8005024:	40020070 	.word	0x40020070
 8005028:	40020088 	.word	0x40020088
 800502c:	400200a0 	.word	0x400200a0
 8005030:	400200b8 	.word	0x400200b8
 8005034:	40020410 	.word	0x40020410
 8005038:	40020428 	.word	0x40020428
 800503c:	40020440 	.word	0x40020440
 8005040:	40020458 	.word	0x40020458
 8005044:	40020470 	.word	0x40020470
 8005048:	40020488 	.word	0x40020488
 800504c:	400204a0 	.word	0x400204a0
 8005050:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 020e 	bic.w	r2, r2, #14
 8005062:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a6c      	ldr	r2, [pc, #432]	@ (800521c <HAL_DMA_Abort_IT+0x3a8>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d04a      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6b      	ldr	r2, [pc, #428]	@ (8005220 <HAL_DMA_Abort_IT+0x3ac>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d045      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a69      	ldr	r2, [pc, #420]	@ (8005224 <HAL_DMA_Abort_IT+0x3b0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d040      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a68      	ldr	r2, [pc, #416]	@ (8005228 <HAL_DMA_Abort_IT+0x3b4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d03b      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a66      	ldr	r2, [pc, #408]	@ (800522c <HAL_DMA_Abort_IT+0x3b8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d036      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a65      	ldr	r2, [pc, #404]	@ (8005230 <HAL_DMA_Abort_IT+0x3bc>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d031      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a63      	ldr	r2, [pc, #396]	@ (8005234 <HAL_DMA_Abort_IT+0x3c0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d02c      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a62      	ldr	r2, [pc, #392]	@ (8005238 <HAL_DMA_Abort_IT+0x3c4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d027      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a60      	ldr	r2, [pc, #384]	@ (800523c <HAL_DMA_Abort_IT+0x3c8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d022      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a5f      	ldr	r2, [pc, #380]	@ (8005240 <HAL_DMA_Abort_IT+0x3cc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d01d      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a5d      	ldr	r2, [pc, #372]	@ (8005244 <HAL_DMA_Abort_IT+0x3d0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d018      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a5c      	ldr	r2, [pc, #368]	@ (8005248 <HAL_DMA_Abort_IT+0x3d4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d013      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a5a      	ldr	r2, [pc, #360]	@ (800524c <HAL_DMA_Abort_IT+0x3d8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d00e      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a59      	ldr	r2, [pc, #356]	@ (8005250 <HAL_DMA_Abort_IT+0x3dc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d009      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a57      	ldr	r2, [pc, #348]	@ (8005254 <HAL_DMA_Abort_IT+0x3e0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d004      	beq.n	8005104 <HAL_DMA_Abort_IT+0x290>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a56      	ldr	r2, [pc, #344]	@ (8005258 <HAL_DMA_Abort_IT+0x3e4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d108      	bne.n	8005116 <HAL_DMA_Abort_IT+0x2a2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0201 	bic.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	e007      	b.n	8005126 <HAL_DMA_Abort_IT+0x2b2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a3c      	ldr	r2, [pc, #240]	@ (800521c <HAL_DMA_Abort_IT+0x3a8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d072      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a3a      	ldr	r2, [pc, #232]	@ (8005220 <HAL_DMA_Abort_IT+0x3ac>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d06d      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a39      	ldr	r2, [pc, #228]	@ (8005224 <HAL_DMA_Abort_IT+0x3b0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d068      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a37      	ldr	r2, [pc, #220]	@ (8005228 <HAL_DMA_Abort_IT+0x3b4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d063      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a36      	ldr	r2, [pc, #216]	@ (800522c <HAL_DMA_Abort_IT+0x3b8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d05e      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a34      	ldr	r2, [pc, #208]	@ (8005230 <HAL_DMA_Abort_IT+0x3bc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d059      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a33      	ldr	r2, [pc, #204]	@ (8005234 <HAL_DMA_Abort_IT+0x3c0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d054      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a31      	ldr	r2, [pc, #196]	@ (8005238 <HAL_DMA_Abort_IT+0x3c4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d04f      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a30      	ldr	r2, [pc, #192]	@ (800523c <HAL_DMA_Abort_IT+0x3c8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d04a      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a2e      	ldr	r2, [pc, #184]	@ (8005240 <HAL_DMA_Abort_IT+0x3cc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d045      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a2d      	ldr	r2, [pc, #180]	@ (8005244 <HAL_DMA_Abort_IT+0x3d0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d040      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a2b      	ldr	r2, [pc, #172]	@ (8005248 <HAL_DMA_Abort_IT+0x3d4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d03b      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2a      	ldr	r2, [pc, #168]	@ (800524c <HAL_DMA_Abort_IT+0x3d8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d036      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a28      	ldr	r2, [pc, #160]	@ (8005250 <HAL_DMA_Abort_IT+0x3dc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d031      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a27      	ldr	r2, [pc, #156]	@ (8005254 <HAL_DMA_Abort_IT+0x3e0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d02c      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a25      	ldr	r2, [pc, #148]	@ (8005258 <HAL_DMA_Abort_IT+0x3e4>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d027      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a24      	ldr	r2, [pc, #144]	@ (800525c <HAL_DMA_Abort_IT+0x3e8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d022      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a22      	ldr	r2, [pc, #136]	@ (8005260 <HAL_DMA_Abort_IT+0x3ec>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d01d      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a21      	ldr	r2, [pc, #132]	@ (8005264 <HAL_DMA_Abort_IT+0x3f0>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d018      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005268 <HAL_DMA_Abort_IT+0x3f4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1e      	ldr	r2, [pc, #120]	@ (800526c <HAL_DMA_Abort_IT+0x3f8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00e      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <HAL_DMA_Abort_IT+0x3fc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d009      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <HAL_DMA_Abort_IT+0x400>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d004      	beq.n	8005216 <HAL_DMA_Abort_IT+0x3a2>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a19      	ldr	r2, [pc, #100]	@ (8005278 <HAL_DMA_Abort_IT+0x404>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d132      	bne.n	800527c <HAL_DMA_Abort_IT+0x408>
 8005216:	2301      	movs	r3, #1
 8005218:	e031      	b.n	800527e <HAL_DMA_Abort_IT+0x40a>
 800521a:	bf00      	nop
 800521c:	40020010 	.word	0x40020010
 8005220:	40020028 	.word	0x40020028
 8005224:	40020040 	.word	0x40020040
 8005228:	40020058 	.word	0x40020058
 800522c:	40020070 	.word	0x40020070
 8005230:	40020088 	.word	0x40020088
 8005234:	400200a0 	.word	0x400200a0
 8005238:	400200b8 	.word	0x400200b8
 800523c:	40020410 	.word	0x40020410
 8005240:	40020428 	.word	0x40020428
 8005244:	40020440 	.word	0x40020440
 8005248:	40020458 	.word	0x40020458
 800524c:	40020470 	.word	0x40020470
 8005250:	40020488 	.word	0x40020488
 8005254:	400204a0 	.word	0x400204a0
 8005258:	400204b8 	.word	0x400204b8
 800525c:	58025408 	.word	0x58025408
 8005260:	5802541c 	.word	0x5802541c
 8005264:	58025430 	.word	0x58025430
 8005268:	58025444 	.word	0x58025444
 800526c:	58025458 	.word	0x58025458
 8005270:	5802546c 	.word	0x5802546c
 8005274:	58025480 	.word	0x58025480
 8005278:	58025494 	.word	0x58025494
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d028      	beq.n	80052d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800528c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005290:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005296:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	2201      	movs	r2, #1
 80052a2:	409a      	lsls	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80052b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00c      	beq.n	80052d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80052c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80052d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d003      	beq.n	80052f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop

08005300 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08a      	sub	sp, #40	@ 0x28
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800530c:	4b67      	ldr	r3, [pc, #412]	@ (80054ac <HAL_DMA_IRQHandler+0x1ac>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a67      	ldr	r2, [pc, #412]	@ (80054b0 <HAL_DMA_IRQHandler+0x1b0>)
 8005312:	fba2 2303 	umull	r2, r3, r2, r3
 8005316:	0a9b      	lsrs	r3, r3, #10
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005324:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a5f      	ldr	r2, [pc, #380]	@ (80054b4 <HAL_DMA_IRQHandler+0x1b4>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d04a      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a5d      	ldr	r2, [pc, #372]	@ (80054b8 <HAL_DMA_IRQHandler+0x1b8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d045      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a5c      	ldr	r2, [pc, #368]	@ (80054bc <HAL_DMA_IRQHandler+0x1bc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d040      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a5a      	ldr	r2, [pc, #360]	@ (80054c0 <HAL_DMA_IRQHandler+0x1c0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d03b      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a59      	ldr	r2, [pc, #356]	@ (80054c4 <HAL_DMA_IRQHandler+0x1c4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d036      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a57      	ldr	r2, [pc, #348]	@ (80054c8 <HAL_DMA_IRQHandler+0x1c8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d031      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a56      	ldr	r2, [pc, #344]	@ (80054cc <HAL_DMA_IRQHandler+0x1cc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d02c      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a54      	ldr	r2, [pc, #336]	@ (80054d0 <HAL_DMA_IRQHandler+0x1d0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d027      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a53      	ldr	r2, [pc, #332]	@ (80054d4 <HAL_DMA_IRQHandler+0x1d4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d022      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a51      	ldr	r2, [pc, #324]	@ (80054d8 <HAL_DMA_IRQHandler+0x1d8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d01d      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a50      	ldr	r2, [pc, #320]	@ (80054dc <HAL_DMA_IRQHandler+0x1dc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a4e      	ldr	r2, [pc, #312]	@ (80054e0 <HAL_DMA_IRQHandler+0x1e0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d013      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a4d      	ldr	r2, [pc, #308]	@ (80054e4 <HAL_DMA_IRQHandler+0x1e4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a4b      	ldr	r2, [pc, #300]	@ (80054e8 <HAL_DMA_IRQHandler+0x1e8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a4a      	ldr	r2, [pc, #296]	@ (80054ec <HAL_DMA_IRQHandler+0x1ec>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xd2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a48      	ldr	r2, [pc, #288]	@ (80054f0 <HAL_DMA_IRQHandler+0x1f0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d101      	bne.n	80053d6 <HAL_DMA_IRQHandler+0xd6>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <HAL_DMA_IRQHandler+0xd8>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 842b 	beq.w	8005c34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053e2:	f003 031f 	and.w	r3, r3, #31
 80053e6:	2208      	movs	r2, #8
 80053e8:	409a      	lsls	r2, r3
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 80a2 	beq.w	8005538 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2e      	ldr	r2, [pc, #184]	@ (80054b4 <HAL_DMA_IRQHandler+0x1b4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d04a      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2d      	ldr	r2, [pc, #180]	@ (80054b8 <HAL_DMA_IRQHandler+0x1b8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d045      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a2b      	ldr	r2, [pc, #172]	@ (80054bc <HAL_DMA_IRQHandler+0x1bc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d040      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a2a      	ldr	r2, [pc, #168]	@ (80054c0 <HAL_DMA_IRQHandler+0x1c0>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d03b      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a28      	ldr	r2, [pc, #160]	@ (80054c4 <HAL_DMA_IRQHandler+0x1c4>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d036      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a27      	ldr	r2, [pc, #156]	@ (80054c8 <HAL_DMA_IRQHandler+0x1c8>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d031      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a25      	ldr	r2, [pc, #148]	@ (80054cc <HAL_DMA_IRQHandler+0x1cc>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d02c      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a24      	ldr	r2, [pc, #144]	@ (80054d0 <HAL_DMA_IRQHandler+0x1d0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d027      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a22      	ldr	r2, [pc, #136]	@ (80054d4 <HAL_DMA_IRQHandler+0x1d4>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d022      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a21      	ldr	r2, [pc, #132]	@ (80054d8 <HAL_DMA_IRQHandler+0x1d8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d01d      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1f      	ldr	r2, [pc, #124]	@ (80054dc <HAL_DMA_IRQHandler+0x1dc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d018      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1e      	ldr	r2, [pc, #120]	@ (80054e0 <HAL_DMA_IRQHandler+0x1e0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1c      	ldr	r2, [pc, #112]	@ (80054e4 <HAL_DMA_IRQHandler+0x1e4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00e      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1b      	ldr	r2, [pc, #108]	@ (80054e8 <HAL_DMA_IRQHandler+0x1e8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a19      	ldr	r2, [pc, #100]	@ (80054ec <HAL_DMA_IRQHandler+0x1ec>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_DMA_IRQHandler+0x194>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a18      	ldr	r2, [pc, #96]	@ (80054f0 <HAL_DMA_IRQHandler+0x1f0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d12f      	bne.n	80054f4 <HAL_DMA_IRQHandler+0x1f4>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bf14      	ite	ne
 80054a2:	2301      	movne	r3, #1
 80054a4:	2300      	moveq	r3, #0
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	e02e      	b.n	8005508 <HAL_DMA_IRQHandler+0x208>
 80054aa:	bf00      	nop
 80054ac:	24000438 	.word	0x24000438
 80054b0:	1b4e81b5 	.word	0x1b4e81b5
 80054b4:	40020010 	.word	0x40020010
 80054b8:	40020028 	.word	0x40020028
 80054bc:	40020040 	.word	0x40020040
 80054c0:	40020058 	.word	0x40020058
 80054c4:	40020070 	.word	0x40020070
 80054c8:	40020088 	.word	0x40020088
 80054cc:	400200a0 	.word	0x400200a0
 80054d0:	400200b8 	.word	0x400200b8
 80054d4:	40020410 	.word	0x40020410
 80054d8:	40020428 	.word	0x40020428
 80054dc:	40020440 	.word	0x40020440
 80054e0:	40020458 	.word	0x40020458
 80054e4:	40020470 	.word	0x40020470
 80054e8:	40020488 	.word	0x40020488
 80054ec:	400204a0 	.word	0x400204a0
 80054f0:	400204b8 	.word	0x400204b8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0308 	and.w	r3, r3, #8
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf14      	ite	ne
 8005502:	2301      	movne	r3, #1
 8005504:	2300      	moveq	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d015      	beq.n	8005538 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0204 	bic.w	r2, r2, #4
 800551a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005520:	f003 031f 	and.w	r3, r3, #31
 8005524:	2208      	movs	r2, #8
 8005526:	409a      	lsls	r2, r3
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005530:	f043 0201 	orr.w	r2, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	fa22 f303 	lsr.w	r3, r2, r3
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d06e      	beq.n	800562c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a69      	ldr	r2, [pc, #420]	@ (80056f8 <HAL_DMA_IRQHandler+0x3f8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d04a      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a67      	ldr	r2, [pc, #412]	@ (80056fc <HAL_DMA_IRQHandler+0x3fc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d045      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a66      	ldr	r2, [pc, #408]	@ (8005700 <HAL_DMA_IRQHandler+0x400>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d040      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a64      	ldr	r2, [pc, #400]	@ (8005704 <HAL_DMA_IRQHandler+0x404>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d03b      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a63      	ldr	r2, [pc, #396]	@ (8005708 <HAL_DMA_IRQHandler+0x408>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d036      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a61      	ldr	r2, [pc, #388]	@ (800570c <HAL_DMA_IRQHandler+0x40c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d031      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a60      	ldr	r2, [pc, #384]	@ (8005710 <HAL_DMA_IRQHandler+0x410>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d02c      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a5e      	ldr	r2, [pc, #376]	@ (8005714 <HAL_DMA_IRQHandler+0x414>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d027      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a5d      	ldr	r2, [pc, #372]	@ (8005718 <HAL_DMA_IRQHandler+0x418>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a5b      	ldr	r2, [pc, #364]	@ (800571c <HAL_DMA_IRQHandler+0x41c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01d      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a5a      	ldr	r2, [pc, #360]	@ (8005720 <HAL_DMA_IRQHandler+0x420>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d018      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a58      	ldr	r2, [pc, #352]	@ (8005724 <HAL_DMA_IRQHandler+0x424>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a57      	ldr	r2, [pc, #348]	@ (8005728 <HAL_DMA_IRQHandler+0x428>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00e      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a55      	ldr	r2, [pc, #340]	@ (800572c <HAL_DMA_IRQHandler+0x42c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a54      	ldr	r2, [pc, #336]	@ (8005730 <HAL_DMA_IRQHandler+0x430>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <HAL_DMA_IRQHandler+0x2ee>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a52      	ldr	r2, [pc, #328]	@ (8005734 <HAL_DMA_IRQHandler+0x434>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d10a      	bne.n	8005604 <HAL_DMA_IRQHandler+0x304>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	e003      	b.n	800560c <HAL_DMA_IRQHandler+0x30c>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2300      	movs	r3, #0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00d      	beq.n	800562c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2201      	movs	r2, #1
 800561a:	409a      	lsls	r2, r3
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005624:	f043 0202 	orr.w	r2, r3, #2
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2204      	movs	r2, #4
 8005636:	409a      	lsls	r2, r3
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 808f 	beq.w	8005760 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a2c      	ldr	r2, [pc, #176]	@ (80056f8 <HAL_DMA_IRQHandler+0x3f8>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d04a      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a2a      	ldr	r2, [pc, #168]	@ (80056fc <HAL_DMA_IRQHandler+0x3fc>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d045      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a29      	ldr	r2, [pc, #164]	@ (8005700 <HAL_DMA_IRQHandler+0x400>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d040      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a27      	ldr	r2, [pc, #156]	@ (8005704 <HAL_DMA_IRQHandler+0x404>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d03b      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a26      	ldr	r2, [pc, #152]	@ (8005708 <HAL_DMA_IRQHandler+0x408>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d036      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a24      	ldr	r2, [pc, #144]	@ (800570c <HAL_DMA_IRQHandler+0x40c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d031      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a23      	ldr	r2, [pc, #140]	@ (8005710 <HAL_DMA_IRQHandler+0x410>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d02c      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a21      	ldr	r2, [pc, #132]	@ (8005714 <HAL_DMA_IRQHandler+0x414>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d027      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a20      	ldr	r2, [pc, #128]	@ (8005718 <HAL_DMA_IRQHandler+0x418>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d022      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1e      	ldr	r2, [pc, #120]	@ (800571c <HAL_DMA_IRQHandler+0x41c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01d      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005720 <HAL_DMA_IRQHandler+0x420>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d018      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005724 <HAL_DMA_IRQHandler+0x424>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d013      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1a      	ldr	r2, [pc, #104]	@ (8005728 <HAL_DMA_IRQHandler+0x428>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00e      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a18      	ldr	r2, [pc, #96]	@ (800572c <HAL_DMA_IRQHandler+0x42c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d009      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a17      	ldr	r2, [pc, #92]	@ (8005730 <HAL_DMA_IRQHandler+0x430>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x3e2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a15      	ldr	r2, [pc, #84]	@ (8005734 <HAL_DMA_IRQHandler+0x434>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d12a      	bne.n	8005738 <HAL_DMA_IRQHandler+0x438>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	e023      	b.n	8005740 <HAL_DMA_IRQHandler+0x440>
 80056f8:	40020010 	.word	0x40020010
 80056fc:	40020028 	.word	0x40020028
 8005700:	40020040 	.word	0x40020040
 8005704:	40020058 	.word	0x40020058
 8005708:	40020070 	.word	0x40020070
 800570c:	40020088 	.word	0x40020088
 8005710:	400200a0 	.word	0x400200a0
 8005714:	400200b8 	.word	0x400200b8
 8005718:	40020410 	.word	0x40020410
 800571c:	40020428 	.word	0x40020428
 8005720:	40020440 	.word	0x40020440
 8005724:	40020458 	.word	0x40020458
 8005728:	40020470 	.word	0x40020470
 800572c:	40020488 	.word	0x40020488
 8005730:	400204a0 	.word	0x400204a0
 8005734:	400204b8 	.word	0x400204b8
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2300      	movs	r3, #0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00d      	beq.n	8005760 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005748:	f003 031f 	and.w	r3, r3, #31
 800574c:	2204      	movs	r2, #4
 800574e:	409a      	lsls	r2, r3
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005758:	f043 0204 	orr.w	r2, r3, #4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2210      	movs	r2, #16
 800576a:	409a      	lsls	r2, r3
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80a6 	beq.w	80058c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a85      	ldr	r2, [pc, #532]	@ (8005990 <HAL_DMA_IRQHandler+0x690>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d04a      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a83      	ldr	r2, [pc, #524]	@ (8005994 <HAL_DMA_IRQHandler+0x694>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d045      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a82      	ldr	r2, [pc, #520]	@ (8005998 <HAL_DMA_IRQHandler+0x698>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d040      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a80      	ldr	r2, [pc, #512]	@ (800599c <HAL_DMA_IRQHandler+0x69c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d03b      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a7f      	ldr	r2, [pc, #508]	@ (80059a0 <HAL_DMA_IRQHandler+0x6a0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d036      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a7d      	ldr	r2, [pc, #500]	@ (80059a4 <HAL_DMA_IRQHandler+0x6a4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d031      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a7c      	ldr	r2, [pc, #496]	@ (80059a8 <HAL_DMA_IRQHandler+0x6a8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d02c      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a7a      	ldr	r2, [pc, #488]	@ (80059ac <HAL_DMA_IRQHandler+0x6ac>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d027      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a79      	ldr	r2, [pc, #484]	@ (80059b0 <HAL_DMA_IRQHandler+0x6b0>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d022      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a77      	ldr	r2, [pc, #476]	@ (80059b4 <HAL_DMA_IRQHandler+0x6b4>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01d      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a76      	ldr	r2, [pc, #472]	@ (80059b8 <HAL_DMA_IRQHandler+0x6b8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d018      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a74      	ldr	r2, [pc, #464]	@ (80059bc <HAL_DMA_IRQHandler+0x6bc>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a73      	ldr	r2, [pc, #460]	@ (80059c0 <HAL_DMA_IRQHandler+0x6c0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a71      	ldr	r2, [pc, #452]	@ (80059c4 <HAL_DMA_IRQHandler+0x6c4>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a70      	ldr	r2, [pc, #448]	@ (80059c8 <HAL_DMA_IRQHandler+0x6c8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_DMA_IRQHandler+0x516>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a6e      	ldr	r2, [pc, #440]	@ (80059cc <HAL_DMA_IRQHandler+0x6cc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10a      	bne.n	800582c <HAL_DMA_IRQHandler+0x52c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	e009      	b.n	8005840 <HAL_DMA_IRQHandler+0x540>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	bf14      	ite	ne
 800583a:	2301      	movne	r3, #1
 800583c:	2300      	moveq	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d03e      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2210      	movs	r2, #16
 800584e:	409a      	lsls	r2, r3
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d018      	beq.n	8005894 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	2b00      	cmp	r3, #0
 8005876:	d024      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	4798      	blx	r3
 8005880:	e01f      	b.n	80058c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01b      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4798      	blx	r3
 8005892:	e016      	b.n	80058c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d107      	bne.n	80058b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0208 	bic.w	r2, r2, #8
 80058b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	2220      	movs	r2, #32
 80058cc:	409a      	lsls	r2, r3
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	4013      	ands	r3, r2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8110 	beq.w	8005af8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005990 <HAL_DMA_IRQHandler+0x690>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d04a      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005994 <HAL_DMA_IRQHandler+0x694>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d045      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a29      	ldr	r2, [pc, #164]	@ (8005998 <HAL_DMA_IRQHandler+0x698>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d040      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a28      	ldr	r2, [pc, #160]	@ (800599c <HAL_DMA_IRQHandler+0x69c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d03b      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a26      	ldr	r2, [pc, #152]	@ (80059a0 <HAL_DMA_IRQHandler+0x6a0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d036      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a25      	ldr	r2, [pc, #148]	@ (80059a4 <HAL_DMA_IRQHandler+0x6a4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d031      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a23      	ldr	r2, [pc, #140]	@ (80059a8 <HAL_DMA_IRQHandler+0x6a8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d02c      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a22      	ldr	r2, [pc, #136]	@ (80059ac <HAL_DMA_IRQHandler+0x6ac>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d027      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a20      	ldr	r2, [pc, #128]	@ (80059b0 <HAL_DMA_IRQHandler+0x6b0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d022      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1f      	ldr	r2, [pc, #124]	@ (80059b4 <HAL_DMA_IRQHandler+0x6b4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d01d      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a1d      	ldr	r2, [pc, #116]	@ (80059b8 <HAL_DMA_IRQHandler+0x6b8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d018      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1c      	ldr	r2, [pc, #112]	@ (80059bc <HAL_DMA_IRQHandler+0x6bc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1a      	ldr	r2, [pc, #104]	@ (80059c0 <HAL_DMA_IRQHandler+0x6c0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00e      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a19      	ldr	r2, [pc, #100]	@ (80059c4 <HAL_DMA_IRQHandler+0x6c4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d009      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a17      	ldr	r2, [pc, #92]	@ (80059c8 <HAL_DMA_IRQHandler+0x6c8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <HAL_DMA_IRQHandler+0x678>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <HAL_DMA_IRQHandler+0x6cc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d12b      	bne.n	80059d0 <HAL_DMA_IRQHandler+0x6d0>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0310 	and.w	r3, r3, #16
 8005982:	2b00      	cmp	r3, #0
 8005984:	bf14      	ite	ne
 8005986:	2301      	movne	r3, #1
 8005988:	2300      	moveq	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	e02a      	b.n	80059e4 <HAL_DMA_IRQHandler+0x6e4>
 800598e:	bf00      	nop
 8005990:	40020010 	.word	0x40020010
 8005994:	40020028 	.word	0x40020028
 8005998:	40020040 	.word	0x40020040
 800599c:	40020058 	.word	0x40020058
 80059a0:	40020070 	.word	0x40020070
 80059a4:	40020088 	.word	0x40020088
 80059a8:	400200a0 	.word	0x400200a0
 80059ac:	400200b8 	.word	0x400200b8
 80059b0:	40020410 	.word	0x40020410
 80059b4:	40020428 	.word	0x40020428
 80059b8:	40020440 	.word	0x40020440
 80059bc:	40020458 	.word	0x40020458
 80059c0:	40020470 	.word	0x40020470
 80059c4:	40020488 	.word	0x40020488
 80059c8:	400204a0 	.word	0x400204a0
 80059cc:	400204b8 	.word	0x400204b8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	bf14      	ite	ne
 80059de:	2301      	movne	r3, #1
 80059e0:	2300      	moveq	r3, #0
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 8087 	beq.w	8005af8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ee:	f003 031f 	and.w	r3, r3, #31
 80059f2:	2220      	movs	r2, #32
 80059f4:	409a      	lsls	r2, r3
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d139      	bne.n	8005a7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0216 	bic.w	r2, r2, #22
 8005a14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <HAL_DMA_IRQHandler+0x736>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0208 	bic.w	r2, r2, #8
 8005a44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	223f      	movs	r2, #63	@ 0x3f
 8005a50:	409a      	lsls	r2, r3
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f000 8382 	beq.w	8006174 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	4798      	blx	r3
          }
          return;
 8005a78:	e37c      	b.n	8006174 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d018      	beq.n	8005aba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d108      	bne.n	8005aa8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d02c      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
 8005aa6:	e027      	b.n	8005af8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d023      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	4798      	blx	r3
 8005ab8:	e01e      	b.n	8005af8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10f      	bne.n	8005ae8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0210 	bic.w	r2, r2, #16
 8005ad6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 833e 	beq.w	800617e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8088 	beq.w	8005c20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2204      	movs	r2, #4
 8005b14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a89      	ldr	r2, [pc, #548]	@ (8005d44 <HAL_DMA_IRQHandler+0xa44>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04a      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a88      	ldr	r2, [pc, #544]	@ (8005d48 <HAL_DMA_IRQHandler+0xa48>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d045      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a86      	ldr	r2, [pc, #536]	@ (8005d4c <HAL_DMA_IRQHandler+0xa4c>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d040      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a85      	ldr	r2, [pc, #532]	@ (8005d50 <HAL_DMA_IRQHandler+0xa50>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d03b      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a83      	ldr	r2, [pc, #524]	@ (8005d54 <HAL_DMA_IRQHandler+0xa54>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d036      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a82      	ldr	r2, [pc, #520]	@ (8005d58 <HAL_DMA_IRQHandler+0xa58>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d031      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a80      	ldr	r2, [pc, #512]	@ (8005d5c <HAL_DMA_IRQHandler+0xa5c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02c      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a7f      	ldr	r2, [pc, #508]	@ (8005d60 <HAL_DMA_IRQHandler+0xa60>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d027      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a7d      	ldr	r2, [pc, #500]	@ (8005d64 <HAL_DMA_IRQHandler+0xa64>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a7c      	ldr	r2, [pc, #496]	@ (8005d68 <HAL_DMA_IRQHandler+0xa68>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a7a      	ldr	r2, [pc, #488]	@ (8005d6c <HAL_DMA_IRQHandler+0xa6c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a79      	ldr	r2, [pc, #484]	@ (8005d70 <HAL_DMA_IRQHandler+0xa70>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a77      	ldr	r2, [pc, #476]	@ (8005d74 <HAL_DMA_IRQHandler+0xa74>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a76      	ldr	r2, [pc, #472]	@ (8005d78 <HAL_DMA_IRQHandler+0xa78>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a74      	ldr	r2, [pc, #464]	@ (8005d7c <HAL_DMA_IRQHandler+0xa7c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_DMA_IRQHandler+0x8b8>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a73      	ldr	r2, [pc, #460]	@ (8005d80 <HAL_DMA_IRQHandler+0xa80>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d108      	bne.n	8005bca <HAL_DMA_IRQHandler+0x8ca>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 0201 	bic.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
 8005bc8:	e007      	b.n	8005bda <HAL_DMA_IRQHandler+0x8da>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d307      	bcc.n	8005bf6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f2      	bne.n	8005bda <HAL_DMA_IRQHandler+0x8da>
 8005bf4:	e000      	b.n	8005bf8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005bf6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0301 	and.w	r3, r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2203      	movs	r2, #3
 8005c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005c0e:	e003      	b.n	8005c18 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 82aa 	beq.w	800617e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
 8005c32:	e2a4      	b.n	800617e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a52      	ldr	r2, [pc, #328]	@ (8005d84 <HAL_DMA_IRQHandler+0xa84>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d04a      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a51      	ldr	r2, [pc, #324]	@ (8005d88 <HAL_DMA_IRQHandler+0xa88>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d045      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8005d8c <HAL_DMA_IRQHandler+0xa8c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d040      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a4e      	ldr	r2, [pc, #312]	@ (8005d90 <HAL_DMA_IRQHandler+0xa90>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d03b      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a4c      	ldr	r2, [pc, #304]	@ (8005d94 <HAL_DMA_IRQHandler+0xa94>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d036      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8005d98 <HAL_DMA_IRQHandler+0xa98>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d031      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a49      	ldr	r2, [pc, #292]	@ (8005d9c <HAL_DMA_IRQHandler+0xa9c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d02c      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a48      	ldr	r2, [pc, #288]	@ (8005da0 <HAL_DMA_IRQHandler+0xaa0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d027      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a46      	ldr	r2, [pc, #280]	@ (8005da4 <HAL_DMA_IRQHandler+0xaa4>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d022      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a45      	ldr	r2, [pc, #276]	@ (8005da8 <HAL_DMA_IRQHandler+0xaa8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d01d      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a43      	ldr	r2, [pc, #268]	@ (8005dac <HAL_DMA_IRQHandler+0xaac>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d018      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a42      	ldr	r2, [pc, #264]	@ (8005db0 <HAL_DMA_IRQHandler+0xab0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a40      	ldr	r2, [pc, #256]	@ (8005db4 <HAL_DMA_IRQHandler+0xab4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00e      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a3f      	ldr	r2, [pc, #252]	@ (8005db8 <HAL_DMA_IRQHandler+0xab8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d009      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a3d      	ldr	r2, [pc, #244]	@ (8005dbc <HAL_DMA_IRQHandler+0xabc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d004      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x9d4>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a3c      	ldr	r2, [pc, #240]	@ (8005dc0 <HAL_DMA_IRQHandler+0xac0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d101      	bne.n	8005cd8 <HAL_DMA_IRQHandler+0x9d8>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <HAL_DMA_IRQHandler+0x9da>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 824f 	beq.w	800617e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cec:	f003 031f 	and.w	r3, r3, #31
 8005cf0:	2204      	movs	r2, #4
 8005cf2:	409a      	lsls	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 80dd 	beq.w	8005eb8 <HAL_DMA_IRQHandler+0xbb8>
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 80d7 	beq.w	8005eb8 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2204      	movs	r2, #4
 8005d14:	409a      	lsls	r2, r3
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d059      	beq.n	8005dd8 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d14a      	bne.n	8005dc4 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 8220 	beq.w	8006178 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d40:	e21a      	b.n	8006178 <HAL_DMA_IRQHandler+0xe78>
 8005d42:	bf00      	nop
 8005d44:	40020010 	.word	0x40020010
 8005d48:	40020028 	.word	0x40020028
 8005d4c:	40020040 	.word	0x40020040
 8005d50:	40020058 	.word	0x40020058
 8005d54:	40020070 	.word	0x40020070
 8005d58:	40020088 	.word	0x40020088
 8005d5c:	400200a0 	.word	0x400200a0
 8005d60:	400200b8 	.word	0x400200b8
 8005d64:	40020410 	.word	0x40020410
 8005d68:	40020428 	.word	0x40020428
 8005d6c:	40020440 	.word	0x40020440
 8005d70:	40020458 	.word	0x40020458
 8005d74:	40020470 	.word	0x40020470
 8005d78:	40020488 	.word	0x40020488
 8005d7c:	400204a0 	.word	0x400204a0
 8005d80:	400204b8 	.word	0x400204b8
 8005d84:	48022c08 	.word	0x48022c08
 8005d88:	48022c1c 	.word	0x48022c1c
 8005d8c:	48022c30 	.word	0x48022c30
 8005d90:	48022c44 	.word	0x48022c44
 8005d94:	48022c58 	.word	0x48022c58
 8005d98:	48022c6c 	.word	0x48022c6c
 8005d9c:	48022c80 	.word	0x48022c80
 8005da0:	48022c94 	.word	0x48022c94
 8005da4:	58025408 	.word	0x58025408
 8005da8:	5802541c 	.word	0x5802541c
 8005dac:	58025430 	.word	0x58025430
 8005db0:	58025444 	.word	0x58025444
 8005db4:	58025458 	.word	0x58025458
 8005db8:	5802546c 	.word	0x5802546c
 8005dbc:	58025480 	.word	0x58025480
 8005dc0:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 81d5 	beq.w	8006178 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dd6:	e1cf      	b.n	8006178 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d160      	bne.n	8005ea4 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a7f      	ldr	r2, [pc, #508]	@ (8005fe4 <HAL_DMA_IRQHandler+0xce4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d04a      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a7d      	ldr	r2, [pc, #500]	@ (8005fe8 <HAL_DMA_IRQHandler+0xce8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d045      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a7c      	ldr	r2, [pc, #496]	@ (8005fec <HAL_DMA_IRQHandler+0xcec>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d040      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a7a      	ldr	r2, [pc, #488]	@ (8005ff0 <HAL_DMA_IRQHandler+0xcf0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d03b      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a79      	ldr	r2, [pc, #484]	@ (8005ff4 <HAL_DMA_IRQHandler+0xcf4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d036      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a77      	ldr	r2, [pc, #476]	@ (8005ff8 <HAL_DMA_IRQHandler+0xcf8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d031      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a76      	ldr	r2, [pc, #472]	@ (8005ffc <HAL_DMA_IRQHandler+0xcfc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d02c      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a74      	ldr	r2, [pc, #464]	@ (8006000 <HAL_DMA_IRQHandler+0xd00>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d027      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a73      	ldr	r2, [pc, #460]	@ (8006004 <HAL_DMA_IRQHandler+0xd04>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d022      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a71      	ldr	r2, [pc, #452]	@ (8006008 <HAL_DMA_IRQHandler+0xd08>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d01d      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a70      	ldr	r2, [pc, #448]	@ (800600c <HAL_DMA_IRQHandler+0xd0c>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d018      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6e      	ldr	r2, [pc, #440]	@ (8006010 <HAL_DMA_IRQHandler+0xd10>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d013      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a6d      	ldr	r2, [pc, #436]	@ (8006014 <HAL_DMA_IRQHandler+0xd14>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00e      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a6b      	ldr	r2, [pc, #428]	@ (8006018 <HAL_DMA_IRQHandler+0xd18>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d009      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a6a      	ldr	r2, [pc, #424]	@ (800601c <HAL_DMA_IRQHandler+0xd1c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d004      	beq.n	8005e82 <HAL_DMA_IRQHandler+0xb82>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a68      	ldr	r2, [pc, #416]	@ (8006020 <HAL_DMA_IRQHandler+0xd20>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d108      	bne.n	8005e94 <HAL_DMA_IRQHandler+0xb94>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0208 	bic.w	r2, r2, #8
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	e007      	b.n	8005ea4 <HAL_DMA_IRQHandler+0xba4>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f022 0204 	bic.w	r2, r2, #4
 8005ea2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 8165 	beq.w	8006178 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eb6:	e15f      	b.n	8006178 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	409a      	lsls	r2, r3
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 80c5 	beq.w	8006058 <HAL_DMA_IRQHandler+0xd58>
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80bf 	beq.w	8006058 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ede:	f003 031f 	and.w	r3, r3, #31
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	409a      	lsls	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d018      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d109      	bne.n	8005f12 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 813a 	beq.w	800617c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f10:	e134      	b.n	800617c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 8130 	beq.w	800617c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f24:	e12a      	b.n	800617c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 8089 	bne.w	8006044 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe4 <HAL_DMA_IRQHandler+0xce4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d04a      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a29      	ldr	r2, [pc, #164]	@ (8005fe8 <HAL_DMA_IRQHandler+0xce8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d045      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a28      	ldr	r2, [pc, #160]	@ (8005fec <HAL_DMA_IRQHandler+0xcec>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d040      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a26      	ldr	r2, [pc, #152]	@ (8005ff0 <HAL_DMA_IRQHandler+0xcf0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d03b      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a25      	ldr	r2, [pc, #148]	@ (8005ff4 <HAL_DMA_IRQHandler+0xcf4>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d036      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a23      	ldr	r2, [pc, #140]	@ (8005ff8 <HAL_DMA_IRQHandler+0xcf8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d031      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a22      	ldr	r2, [pc, #136]	@ (8005ffc <HAL_DMA_IRQHandler+0xcfc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d02c      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a20      	ldr	r2, [pc, #128]	@ (8006000 <HAL_DMA_IRQHandler+0xd00>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d027      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1f      	ldr	r2, [pc, #124]	@ (8006004 <HAL_DMA_IRQHandler+0xd04>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d022      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a1d      	ldr	r2, [pc, #116]	@ (8006008 <HAL_DMA_IRQHandler+0xd08>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01d      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800600c <HAL_DMA_IRQHandler+0xd0c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d018      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8006010 <HAL_DMA_IRQHandler+0xd10>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a19      	ldr	r2, [pc, #100]	@ (8006014 <HAL_DMA_IRQHandler+0xd14>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a17      	ldr	r2, [pc, #92]	@ (8006018 <HAL_DMA_IRQHandler+0xd18>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a16      	ldr	r2, [pc, #88]	@ (800601c <HAL_DMA_IRQHandler+0xd1c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xcd2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a14      	ldr	r2, [pc, #80]	@ (8006020 <HAL_DMA_IRQHandler+0xd20>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d128      	bne.n	8006024 <HAL_DMA_IRQHandler+0xd24>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0214 	bic.w	r2, r2, #20
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e027      	b.n	8006034 <HAL_DMA_IRQHandler+0xd34>
 8005fe4:	40020010 	.word	0x40020010
 8005fe8:	40020028 	.word	0x40020028
 8005fec:	40020040 	.word	0x40020040
 8005ff0:	40020058 	.word	0x40020058
 8005ff4:	40020070 	.word	0x40020070
 8005ff8:	40020088 	.word	0x40020088
 8005ffc:	400200a0 	.word	0x400200a0
 8006000:	400200b8 	.word	0x400200b8
 8006004:	40020410 	.word	0x40020410
 8006008:	40020428 	.word	0x40020428
 800600c:	40020440 	.word	0x40020440
 8006010:	40020458 	.word	0x40020458
 8006014:	40020470 	.word	0x40020470
 8006018:	40020488 	.word	0x40020488
 800601c:	400204a0 	.word	0x400204a0
 8006020:	400204b8 	.word	0x400204b8
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 020a 	bic.w	r2, r2, #10
 8006032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 8097 	beq.w	800617c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006056:	e091      	b.n	800617c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800605c:	f003 031f 	and.w	r3, r3, #31
 8006060:	2208      	movs	r2, #8
 8006062:	409a      	lsls	r2, r3
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4013      	ands	r3, r2
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8088 	beq.w	800617e <HAL_DMA_IRQHandler+0xe7e>
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f003 0308 	and.w	r3, r3, #8
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 8082 	beq.w	800617e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a41      	ldr	r2, [pc, #260]	@ (8006184 <HAL_DMA_IRQHandler+0xe84>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d04a      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a3f      	ldr	r2, [pc, #252]	@ (8006188 <HAL_DMA_IRQHandler+0xe88>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d045      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a3e      	ldr	r2, [pc, #248]	@ (800618c <HAL_DMA_IRQHandler+0xe8c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d040      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a3c      	ldr	r2, [pc, #240]	@ (8006190 <HAL_DMA_IRQHandler+0xe90>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d03b      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a3b      	ldr	r2, [pc, #236]	@ (8006194 <HAL_DMA_IRQHandler+0xe94>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d036      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a39      	ldr	r2, [pc, #228]	@ (8006198 <HAL_DMA_IRQHandler+0xe98>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d031      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a38      	ldr	r2, [pc, #224]	@ (800619c <HAL_DMA_IRQHandler+0xe9c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d02c      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a36      	ldr	r2, [pc, #216]	@ (80061a0 <HAL_DMA_IRQHandler+0xea0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d027      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a35      	ldr	r2, [pc, #212]	@ (80061a4 <HAL_DMA_IRQHandler+0xea4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d022      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a33      	ldr	r2, [pc, #204]	@ (80061a8 <HAL_DMA_IRQHandler+0xea8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d01d      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a32      	ldr	r2, [pc, #200]	@ (80061ac <HAL_DMA_IRQHandler+0xeac>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d018      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a30      	ldr	r2, [pc, #192]	@ (80061b0 <HAL_DMA_IRQHandler+0xeb0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a2f      	ldr	r2, [pc, #188]	@ (80061b4 <HAL_DMA_IRQHandler+0xeb4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00e      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a2d      	ldr	r2, [pc, #180]	@ (80061b8 <HAL_DMA_IRQHandler+0xeb8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d009      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2c      	ldr	r2, [pc, #176]	@ (80061bc <HAL_DMA_IRQHandler+0xebc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d004      	beq.n	800611a <HAL_DMA_IRQHandler+0xe1a>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a2a      	ldr	r2, [pc, #168]	@ (80061c0 <HAL_DMA_IRQHandler+0xec0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d108      	bne.n	800612c <HAL_DMA_IRQHandler+0xe2c>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 021c 	bic.w	r2, r2, #28
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e007      	b.n	800613c <HAL_DMA_IRQHandler+0xe3c>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 020e 	bic.w	r2, r2, #14
 800613a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	2201      	movs	r2, #1
 8006146:	409a      	lsls	r2, r3
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006166:	2b00      	cmp	r3, #0
 8006168:	d009      	beq.n	800617e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
 8006172:	e004      	b.n	800617e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006174:	bf00      	nop
 8006176:	e002      	b.n	800617e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006178:	bf00      	nop
 800617a:	e000      	b.n	800617e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800617c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800617e:	3728      	adds	r7, #40	@ 0x28
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40020010 	.word	0x40020010
 8006188:	40020028 	.word	0x40020028
 800618c:	40020040 	.word	0x40020040
 8006190:	40020058 	.word	0x40020058
 8006194:	40020070 	.word	0x40020070
 8006198:	40020088 	.word	0x40020088
 800619c:	400200a0 	.word	0x400200a0
 80061a0:	400200b8 	.word	0x400200b8
 80061a4:	40020410 	.word	0x40020410
 80061a8:	40020428 	.word	0x40020428
 80061ac:	40020440 	.word	0x40020440
 80061b0:	40020458 	.word	0x40020458
 80061b4:	40020470 	.word	0x40020470
 80061b8:	40020488 	.word	0x40020488
 80061bc:	400204a0 	.word	0x400204a0
 80061c0:	400204b8 	.word	0x400204b8

080061c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a7f      	ldr	r2, [pc, #508]	@ (80063e0 <DMA_SetConfig+0x21c>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d072      	beq.n	80062ce <DMA_SetConfig+0x10a>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a7d      	ldr	r2, [pc, #500]	@ (80063e4 <DMA_SetConfig+0x220>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d06d      	beq.n	80062ce <DMA_SetConfig+0x10a>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a7c      	ldr	r2, [pc, #496]	@ (80063e8 <DMA_SetConfig+0x224>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d068      	beq.n	80062ce <DMA_SetConfig+0x10a>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a7a      	ldr	r2, [pc, #488]	@ (80063ec <DMA_SetConfig+0x228>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d063      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a79      	ldr	r2, [pc, #484]	@ (80063f0 <DMA_SetConfig+0x22c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d05e      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a77      	ldr	r2, [pc, #476]	@ (80063f4 <DMA_SetConfig+0x230>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d059      	beq.n	80062ce <DMA_SetConfig+0x10a>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a76      	ldr	r2, [pc, #472]	@ (80063f8 <DMA_SetConfig+0x234>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d054      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a74      	ldr	r2, [pc, #464]	@ (80063fc <DMA_SetConfig+0x238>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d04f      	beq.n	80062ce <DMA_SetConfig+0x10a>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a73      	ldr	r2, [pc, #460]	@ (8006400 <DMA_SetConfig+0x23c>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d04a      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a71      	ldr	r2, [pc, #452]	@ (8006404 <DMA_SetConfig+0x240>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d045      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a70      	ldr	r2, [pc, #448]	@ (8006408 <DMA_SetConfig+0x244>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d040      	beq.n	80062ce <DMA_SetConfig+0x10a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a6e      	ldr	r2, [pc, #440]	@ (800640c <DMA_SetConfig+0x248>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d03b      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a6d      	ldr	r2, [pc, #436]	@ (8006410 <DMA_SetConfig+0x24c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d036      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a6b      	ldr	r2, [pc, #428]	@ (8006414 <DMA_SetConfig+0x250>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d031      	beq.n	80062ce <DMA_SetConfig+0x10a>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a6a      	ldr	r2, [pc, #424]	@ (8006418 <DMA_SetConfig+0x254>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d02c      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a68      	ldr	r2, [pc, #416]	@ (800641c <DMA_SetConfig+0x258>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d027      	beq.n	80062ce <DMA_SetConfig+0x10a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a67      	ldr	r2, [pc, #412]	@ (8006420 <DMA_SetConfig+0x25c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a65      	ldr	r2, [pc, #404]	@ (8006424 <DMA_SetConfig+0x260>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01d      	beq.n	80062ce <DMA_SetConfig+0x10a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a64      	ldr	r2, [pc, #400]	@ (8006428 <DMA_SetConfig+0x264>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <DMA_SetConfig+0x10a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a62      	ldr	r2, [pc, #392]	@ (800642c <DMA_SetConfig+0x268>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <DMA_SetConfig+0x10a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a61      	ldr	r2, [pc, #388]	@ (8006430 <DMA_SetConfig+0x26c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <DMA_SetConfig+0x10a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a5f      	ldr	r2, [pc, #380]	@ (8006434 <DMA_SetConfig+0x270>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <DMA_SetConfig+0x10a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a5e      	ldr	r2, [pc, #376]	@ (8006438 <DMA_SetConfig+0x274>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <DMA_SetConfig+0x10a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a5c      	ldr	r2, [pc, #368]	@ (800643c <DMA_SetConfig+0x278>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d101      	bne.n	80062d2 <DMA_SetConfig+0x10e>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <DMA_SetConfig+0x110>
 80062d2:	2300      	movs	r3, #0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00d      	beq.n	80062f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80062e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80062f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a39      	ldr	r2, [pc, #228]	@ (80063e0 <DMA_SetConfig+0x21c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d04a      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a38      	ldr	r2, [pc, #224]	@ (80063e4 <DMA_SetConfig+0x220>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d045      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a36      	ldr	r2, [pc, #216]	@ (80063e8 <DMA_SetConfig+0x224>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d040      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a35      	ldr	r2, [pc, #212]	@ (80063ec <DMA_SetConfig+0x228>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d03b      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a33      	ldr	r2, [pc, #204]	@ (80063f0 <DMA_SetConfig+0x22c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d036      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a32      	ldr	r2, [pc, #200]	@ (80063f4 <DMA_SetConfig+0x230>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d031      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a30      	ldr	r2, [pc, #192]	@ (80063f8 <DMA_SetConfig+0x234>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d02c      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a2f      	ldr	r2, [pc, #188]	@ (80063fc <DMA_SetConfig+0x238>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d027      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a2d      	ldr	r2, [pc, #180]	@ (8006400 <DMA_SetConfig+0x23c>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d022      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a2c      	ldr	r2, [pc, #176]	@ (8006404 <DMA_SetConfig+0x240>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d01d      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a2a      	ldr	r2, [pc, #168]	@ (8006408 <DMA_SetConfig+0x244>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d018      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a29      	ldr	r2, [pc, #164]	@ (800640c <DMA_SetConfig+0x248>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d013      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a27      	ldr	r2, [pc, #156]	@ (8006410 <DMA_SetConfig+0x24c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00e      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a26      	ldr	r2, [pc, #152]	@ (8006414 <DMA_SetConfig+0x250>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d009      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a24      	ldr	r2, [pc, #144]	@ (8006418 <DMA_SetConfig+0x254>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <DMA_SetConfig+0x1d0>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a23      	ldr	r2, [pc, #140]	@ (800641c <DMA_SetConfig+0x258>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d101      	bne.n	8006398 <DMA_SetConfig+0x1d4>
 8006394:	2301      	movs	r3, #1
 8006396:	e000      	b.n	800639a <DMA_SetConfig+0x1d6>
 8006398:	2300      	movs	r3, #0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d059      	beq.n	8006452 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a2:	f003 031f 	and.w	r3, r3, #31
 80063a6:	223f      	movs	r2, #63	@ 0x3f
 80063a8:	409a      	lsls	r2, r3
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80063bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b40      	cmp	r3, #64	@ 0x40
 80063cc:	d138      	bne.n	8006440 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063de:	e0ae      	b.n	800653e <DMA_SetConfig+0x37a>
 80063e0:	40020010 	.word	0x40020010
 80063e4:	40020028 	.word	0x40020028
 80063e8:	40020040 	.word	0x40020040
 80063ec:	40020058 	.word	0x40020058
 80063f0:	40020070 	.word	0x40020070
 80063f4:	40020088 	.word	0x40020088
 80063f8:	400200a0 	.word	0x400200a0
 80063fc:	400200b8 	.word	0x400200b8
 8006400:	40020410 	.word	0x40020410
 8006404:	40020428 	.word	0x40020428
 8006408:	40020440 	.word	0x40020440
 800640c:	40020458 	.word	0x40020458
 8006410:	40020470 	.word	0x40020470
 8006414:	40020488 	.word	0x40020488
 8006418:	400204a0 	.word	0x400204a0
 800641c:	400204b8 	.word	0x400204b8
 8006420:	58025408 	.word	0x58025408
 8006424:	5802541c 	.word	0x5802541c
 8006428:	58025430 	.word	0x58025430
 800642c:	58025444 	.word	0x58025444
 8006430:	58025458 	.word	0x58025458
 8006434:	5802546c 	.word	0x5802546c
 8006438:	58025480 	.word	0x58025480
 800643c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	60da      	str	r2, [r3, #12]
}
 8006450:	e075      	b.n	800653e <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a3d      	ldr	r2, [pc, #244]	@ (800654c <DMA_SetConfig+0x388>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d04a      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a3b      	ldr	r2, [pc, #236]	@ (8006550 <DMA_SetConfig+0x38c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d045      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a3a      	ldr	r2, [pc, #232]	@ (8006554 <DMA_SetConfig+0x390>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d040      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a38      	ldr	r2, [pc, #224]	@ (8006558 <DMA_SetConfig+0x394>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d03b      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a37      	ldr	r2, [pc, #220]	@ (800655c <DMA_SetConfig+0x398>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d036      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a35      	ldr	r2, [pc, #212]	@ (8006560 <DMA_SetConfig+0x39c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d031      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a34      	ldr	r2, [pc, #208]	@ (8006564 <DMA_SetConfig+0x3a0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d02c      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a32      	ldr	r2, [pc, #200]	@ (8006568 <DMA_SetConfig+0x3a4>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d027      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a31      	ldr	r2, [pc, #196]	@ (800656c <DMA_SetConfig+0x3a8>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d022      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a2f      	ldr	r2, [pc, #188]	@ (8006570 <DMA_SetConfig+0x3ac>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01d      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a2e      	ldr	r2, [pc, #184]	@ (8006574 <DMA_SetConfig+0x3b0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d018      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006578 <DMA_SetConfig+0x3b4>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d013      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a2b      	ldr	r2, [pc, #172]	@ (800657c <DMA_SetConfig+0x3b8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00e      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a29      	ldr	r2, [pc, #164]	@ (8006580 <DMA_SetConfig+0x3bc>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d009      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a28      	ldr	r2, [pc, #160]	@ (8006584 <DMA_SetConfig+0x3c0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <DMA_SetConfig+0x32e>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a26      	ldr	r2, [pc, #152]	@ (8006588 <DMA_SetConfig+0x3c4>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d101      	bne.n	80064f6 <DMA_SetConfig+0x332>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e000      	b.n	80064f8 <DMA_SetConfig+0x334>
 80064f6:	2300      	movs	r3, #0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d020      	beq.n	800653e <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006500:	f003 031f 	and.w	r3, r3, #31
 8006504:	2201      	movs	r2, #1
 8006506:	409a      	lsls	r2, r3
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	683a      	ldr	r2, [r7, #0]
 8006512:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	d108      	bne.n	800652e <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	60da      	str	r2, [r3, #12]
}
 800652c:	e007      	b.n	800653e <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	60da      	str	r2, [r3, #12]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	48022c08 	.word	0x48022c08
 8006550:	48022c1c 	.word	0x48022c1c
 8006554:	48022c30 	.word	0x48022c30
 8006558:	48022c44 	.word	0x48022c44
 800655c:	48022c58 	.word	0x48022c58
 8006560:	48022c6c 	.word	0x48022c6c
 8006564:	48022c80 	.word	0x48022c80
 8006568:	48022c94 	.word	0x48022c94
 800656c:	58025408 	.word	0x58025408
 8006570:	5802541c 	.word	0x5802541c
 8006574:	58025430 	.word	0x58025430
 8006578:	58025444 	.word	0x58025444
 800657c:	58025458 	.word	0x58025458
 8006580:	5802546c 	.word	0x5802546c
 8006584:	58025480 	.word	0x58025480
 8006588:	58025494 	.word	0x58025494

0800658c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a42      	ldr	r2, [pc, #264]	@ (80066a4 <DMA_CalcBaseAndBitshift+0x118>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d04a      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a41      	ldr	r2, [pc, #260]	@ (80066a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d045      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a3f      	ldr	r2, [pc, #252]	@ (80066ac <DMA_CalcBaseAndBitshift+0x120>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d040      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a3e      	ldr	r2, [pc, #248]	@ (80066b0 <DMA_CalcBaseAndBitshift+0x124>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d03b      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a3c      	ldr	r2, [pc, #240]	@ (80066b4 <DMA_CalcBaseAndBitshift+0x128>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d036      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a3b      	ldr	r2, [pc, #236]	@ (80066b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d031      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a39      	ldr	r2, [pc, #228]	@ (80066bc <DMA_CalcBaseAndBitshift+0x130>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d02c      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a38      	ldr	r2, [pc, #224]	@ (80066c0 <DMA_CalcBaseAndBitshift+0x134>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d027      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a36      	ldr	r2, [pc, #216]	@ (80066c4 <DMA_CalcBaseAndBitshift+0x138>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d022      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a35      	ldr	r2, [pc, #212]	@ (80066c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d01d      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a33      	ldr	r2, [pc, #204]	@ (80066cc <DMA_CalcBaseAndBitshift+0x140>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d018      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a32      	ldr	r2, [pc, #200]	@ (80066d0 <DMA_CalcBaseAndBitshift+0x144>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a30      	ldr	r2, [pc, #192]	@ (80066d4 <DMA_CalcBaseAndBitshift+0x148>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00e      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a2f      	ldr	r2, [pc, #188]	@ (80066d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d009      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a2d      	ldr	r2, [pc, #180]	@ (80066dc <DMA_CalcBaseAndBitshift+0x150>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <DMA_CalcBaseAndBitshift+0xa8>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a2c      	ldr	r2, [pc, #176]	@ (80066e0 <DMA_CalcBaseAndBitshift+0x154>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d101      	bne.n	8006638 <DMA_CalcBaseAndBitshift+0xac>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <DMA_CalcBaseAndBitshift+0xae>
 8006638:	2300      	movs	r3, #0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d024      	beq.n	8006688 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	b2db      	uxtb	r3, r3
 8006644:	3b10      	subs	r3, #16
 8006646:	4a27      	ldr	r2, [pc, #156]	@ (80066e4 <DMA_CalcBaseAndBitshift+0x158>)
 8006648:	fba2 2303 	umull	r2, r3, r2, r3
 800664c:	091b      	lsrs	r3, r3, #4
 800664e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	4a24      	ldr	r2, [pc, #144]	@ (80066e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006658:	5cd3      	ldrb	r3, [r2, r3]
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b03      	cmp	r3, #3
 8006664:	d908      	bls.n	8006678 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	4b1f      	ldr	r3, [pc, #124]	@ (80066ec <DMA_CalcBaseAndBitshift+0x160>)
 800666e:	4013      	ands	r3, r2
 8006670:	1d1a      	adds	r2, r3, #4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	659a      	str	r2, [r3, #88]	@ 0x58
 8006676:	e00d      	b.n	8006694 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	4b1b      	ldr	r3, [pc, #108]	@ (80066ec <DMA_CalcBaseAndBitshift+0x160>)
 8006680:	4013      	ands	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	6593      	str	r3, [r2, #88]	@ 0x58
 8006686:	e005      	b.n	8006694 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	40020010 	.word	0x40020010
 80066a8:	40020028 	.word	0x40020028
 80066ac:	40020040 	.word	0x40020040
 80066b0:	40020058 	.word	0x40020058
 80066b4:	40020070 	.word	0x40020070
 80066b8:	40020088 	.word	0x40020088
 80066bc:	400200a0 	.word	0x400200a0
 80066c0:	400200b8 	.word	0x400200b8
 80066c4:	40020410 	.word	0x40020410
 80066c8:	40020428 	.word	0x40020428
 80066cc:	40020440 	.word	0x40020440
 80066d0:	40020458 	.word	0x40020458
 80066d4:	40020470 	.word	0x40020470
 80066d8:	40020488 	.word	0x40020488
 80066dc:	400204a0 	.word	0x400204a0
 80066e0:	400204b8 	.word	0x400204b8
 80066e4:	aaaaaaab 	.word	0xaaaaaaab
 80066e8:	0800e718 	.word	0x0800e718
 80066ec:	fffffc00 	.word	0xfffffc00

080066f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066f8:	2300      	movs	r3, #0
 80066fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d120      	bne.n	8006746 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006708:	2b03      	cmp	r3, #3
 800670a:	d858      	bhi.n	80067be <DMA_CheckFifoParam+0xce>
 800670c:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <DMA_CheckFifoParam+0x24>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006725 	.word	0x08006725
 8006718:	08006737 	.word	0x08006737
 800671c:	08006725 	.word	0x08006725
 8006720:	080067bf 	.word	0x080067bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006728:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d048      	beq.n	80067c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006734:	e045      	b.n	80067c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800673e:	d142      	bne.n	80067c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006744:	e03f      	b.n	80067c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800674e:	d123      	bne.n	8006798 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006754:	2b03      	cmp	r3, #3
 8006756:	d838      	bhi.n	80067ca <DMA_CheckFifoParam+0xda>
 8006758:	a201      	add	r2, pc, #4	@ (adr r2, 8006760 <DMA_CheckFifoParam+0x70>)
 800675a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675e:	bf00      	nop
 8006760:	08006771 	.word	0x08006771
 8006764:	08006777 	.word	0x08006777
 8006768:	08006771 	.word	0x08006771
 800676c:	08006789 	.word	0x08006789
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	73fb      	strb	r3, [r7, #15]
        break;
 8006774:	e030      	b.n	80067d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d025      	beq.n	80067ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006786:	e022      	b.n	80067ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006790:	d11f      	bne.n	80067d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006796:	e01c      	b.n	80067d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679c:	2b02      	cmp	r3, #2
 800679e:	d902      	bls.n	80067a6 <DMA_CheckFifoParam+0xb6>
 80067a0:	2b03      	cmp	r3, #3
 80067a2:	d003      	beq.n	80067ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067a4:	e018      	b.n	80067d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	73fb      	strb	r3, [r7, #15]
        break;
 80067aa:	e015      	b.n	80067d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00e      	beq.n	80067d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	73fb      	strb	r3, [r7, #15]
    break;
 80067bc:	e00b      	b.n	80067d6 <DMA_CheckFifoParam+0xe6>
        break;
 80067be:	bf00      	nop
 80067c0:	e00a      	b.n	80067d8 <DMA_CheckFifoParam+0xe8>
        break;
 80067c2:	bf00      	nop
 80067c4:	e008      	b.n	80067d8 <DMA_CheckFifoParam+0xe8>
        break;
 80067c6:	bf00      	nop
 80067c8:	e006      	b.n	80067d8 <DMA_CheckFifoParam+0xe8>
        break;
 80067ca:	bf00      	nop
 80067cc:	e004      	b.n	80067d8 <DMA_CheckFifoParam+0xe8>
        break;
 80067ce:	bf00      	nop
 80067d0:	e002      	b.n	80067d8 <DMA_CheckFifoParam+0xe8>
        break;
 80067d2:	bf00      	nop
 80067d4:	e000      	b.n	80067d8 <DMA_CheckFifoParam+0xe8>
    break;
 80067d6:	bf00      	nop
    }
  }

  return status;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop

080067e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b085      	sub	sp, #20
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a38      	ldr	r2, [pc, #224]	@ (80068dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d022      	beq.n	8006846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a36      	ldr	r2, [pc, #216]	@ (80068e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d01d      	beq.n	8006846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a35      	ldr	r2, [pc, #212]	@ (80068e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a33      	ldr	r2, [pc, #204]	@ (80068e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d013      	beq.n	8006846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a32      	ldr	r2, [pc, #200]	@ (80068ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00e      	beq.n	8006846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a30      	ldr	r2, [pc, #192]	@ (80068f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a2f      	ldr	r2, [pc, #188]	@ (80068f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a2d      	ldr	r2, [pc, #180]	@ (80068f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d101      	bne.n	800684a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01a      	beq.n	8006886 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	b2db      	uxtb	r3, r3
 8006856:	3b08      	subs	r3, #8
 8006858:	4a28      	ldr	r2, [pc, #160]	@ (80068fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800685a:	fba2 2303 	umull	r2, r3, r2, r3
 800685e:	091b      	lsrs	r3, r3, #4
 8006860:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4b26      	ldr	r3, [pc, #152]	@ (8006900 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	461a      	mov	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a24      	ldr	r2, [pc, #144]	@ (8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006874:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	2201      	movs	r2, #1
 800687e:	409a      	lsls	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006884:	e024      	b.n	80068d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	3b10      	subs	r3, #16
 800688e:	4a1e      	ldr	r2, [pc, #120]	@ (8006908 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	091b      	lsrs	r3, r3, #4
 8006896:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4a1c      	ldr	r2, [pc, #112]	@ (800690c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d806      	bhi.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d902      	bls.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3308      	adds	r3, #8
 80068ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	4b18      	ldr	r3, [pc, #96]	@ (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068b2:	4413      	add	r3, r2
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	461a      	mov	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a16      	ldr	r2, [pc, #88]	@ (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068c0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f003 031f 	and.w	r3, r3, #31
 80068c8:	2201      	movs	r2, #1
 80068ca:	409a      	lsls	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	58025408 	.word	0x58025408
 80068e0:	5802541c 	.word	0x5802541c
 80068e4:	58025430 	.word	0x58025430
 80068e8:	58025444 	.word	0x58025444
 80068ec:	58025458 	.word	0x58025458
 80068f0:	5802546c 	.word	0x5802546c
 80068f4:	58025480 	.word	0x58025480
 80068f8:	58025494 	.word	0x58025494
 80068fc:	cccccccd 	.word	0xcccccccd
 8006900:	16009600 	.word	0x16009600
 8006904:	58025880 	.word	0x58025880
 8006908:	aaaaaaab 	.word	0xaaaaaaab
 800690c:	400204b8 	.word	0x400204b8
 8006910:	4002040f 	.word	0x4002040f
 8006914:	10008200 	.word	0x10008200
 8006918:	40020880 	.word	0x40020880

0800691c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	b2db      	uxtb	r3, r3
 800692a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d04a      	beq.n	80069c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d847      	bhi.n	80069c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a25      	ldr	r2, [pc, #148]	@ (80069d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d022      	beq.n	8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a24      	ldr	r2, [pc, #144]	@ (80069d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d01d      	beq.n	8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a22      	ldr	r2, [pc, #136]	@ (80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d018      	beq.n	8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a21      	ldr	r2, [pc, #132]	@ (80069e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d013      	beq.n	8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a1f      	ldr	r2, [pc, #124]	@ (80069e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00e      	beq.n	8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a1e      	ldr	r2, [pc, #120]	@ (80069e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d009      	beq.n	8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1c      	ldr	r2, [pc, #112]	@ (80069ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1b      	ldr	r2, [pc, #108]	@ (80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d101      	bne.n	800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006988:	2301      	movs	r3, #1
 800698a:	e000      	b.n	800698e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800698c:	2300      	movs	r3, #0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00a      	beq.n	80069a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4b17      	ldr	r3, [pc, #92]	@ (80069f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	461a      	mov	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a15      	ldr	r2, [pc, #84]	@ (80069f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80069a6:	e009      	b.n	80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4b14      	ldr	r3, [pc, #80]	@ (80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	461a      	mov	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a11      	ldr	r2, [pc, #68]	@ (8006a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069ba:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3b01      	subs	r3, #1
 80069c0:	2201      	movs	r2, #1
 80069c2:	409a      	lsls	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80069c8:	bf00      	nop
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	58025408 	.word	0x58025408
 80069d8:	5802541c 	.word	0x5802541c
 80069dc:	58025430 	.word	0x58025430
 80069e0:	58025444 	.word	0x58025444
 80069e4:	58025458 	.word	0x58025458
 80069e8:	5802546c 	.word	0x5802546c
 80069ec:	58025480 	.word	0x58025480
 80069f0:	58025494 	.word	0x58025494
 80069f4:	1600963f 	.word	0x1600963f
 80069f8:	58025940 	.word	0x58025940
 80069fc:	1000823f 	.word	0x1000823f
 8006a00:	40020940 	.word	0x40020940

08006a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b089      	sub	sp, #36	@ 0x24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a12:	4b89      	ldr	r3, [pc, #548]	@ (8006c38 <HAL_GPIO_Init+0x234>)
 8006a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a16:	e194      	b.n	8006d42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	fa01 f303 	lsl.w	r3, r1, r3
 8006a24:	4013      	ands	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8186 	beq.w	8006d3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f003 0303 	and.w	r3, r3, #3
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d005      	beq.n	8006a48 <HAL_GPIO_Init+0x44>
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f003 0303 	and.w	r3, r3, #3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d130      	bne.n	8006aaa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	2203      	movs	r2, #3
 8006a54:	fa02 f303 	lsl.w	r3, r2, r3
 8006a58:	43db      	mvns	r3, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a7e:	2201      	movs	r2, #1
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	43db      	mvns	r3, r3
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	f003 0201 	and.w	r2, r3, #1
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d017      	beq.n	8006ae6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	43db      	mvns	r3, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	4013      	ands	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	69ba      	ldr	r2, [r7, #24]
 8006ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d123      	bne.n	8006b3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	08da      	lsrs	r2, r3, #3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3208      	adds	r2, #8
 8006afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	220f      	movs	r2, #15
 8006b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0e:	43db      	mvns	r3, r3
 8006b10:	69ba      	ldr	r2, [r7, #24]
 8006b12:	4013      	ands	r3, r2
 8006b14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	691a      	ldr	r2, [r3, #16]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	08da      	lsrs	r2, r3, #3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3208      	adds	r2, #8
 8006b34:	69b9      	ldr	r1, [r7, #24]
 8006b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	2203      	movs	r2, #3
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 0203 	and.w	r2, r3, #3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 80e0 	beq.w	8006d3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8006c3c <HAL_GPIO_Init+0x238>)
 8006b7e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b82:	4a2e      	ldr	r2, [pc, #184]	@ (8006c3c <HAL_GPIO_Init+0x238>)
 8006b84:	f043 0302 	orr.w	r3, r3, #2
 8006b88:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006c3c <HAL_GPIO_Init+0x238>)
 8006b8e:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b9a:	4a29      	ldr	r2, [pc, #164]	@ (8006c40 <HAL_GPIO_Init+0x23c>)
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	089b      	lsrs	r3, r3, #2
 8006ba0:	3302      	adds	r3, #2
 8006ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	f003 0303 	and.w	r3, r3, #3
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	220f      	movs	r2, #15
 8006bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb6:	43db      	mvns	r3, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a20      	ldr	r2, [pc, #128]	@ (8006c44 <HAL_GPIO_Init+0x240>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d052      	beq.n	8006c6c <HAL_GPIO_Init+0x268>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8006c48 <HAL_GPIO_Init+0x244>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d031      	beq.n	8006c32 <HAL_GPIO_Init+0x22e>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a1e      	ldr	r2, [pc, #120]	@ (8006c4c <HAL_GPIO_Init+0x248>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d02b      	beq.n	8006c2e <HAL_GPIO_Init+0x22a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c50 <HAL_GPIO_Init+0x24c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d025      	beq.n	8006c2a <HAL_GPIO_Init+0x226>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <HAL_GPIO_Init+0x250>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01f      	beq.n	8006c26 <HAL_GPIO_Init+0x222>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <HAL_GPIO_Init+0x254>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d019      	beq.n	8006c22 <HAL_GPIO_Init+0x21e>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8006c5c <HAL_GPIO_Init+0x258>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d013      	beq.n	8006c1e <HAL_GPIO_Init+0x21a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a19      	ldr	r2, [pc, #100]	@ (8006c60 <HAL_GPIO_Init+0x25c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00d      	beq.n	8006c1a <HAL_GPIO_Init+0x216>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a18      	ldr	r2, [pc, #96]	@ (8006c64 <HAL_GPIO_Init+0x260>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <HAL_GPIO_Init+0x212>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a17      	ldr	r2, [pc, #92]	@ (8006c68 <HAL_GPIO_Init+0x264>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d101      	bne.n	8006c12 <HAL_GPIO_Init+0x20e>
 8006c0e:	2309      	movs	r3, #9
 8006c10:	e02d      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c12:	230a      	movs	r3, #10
 8006c14:	e02b      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c16:	2308      	movs	r3, #8
 8006c18:	e029      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c1a:	2307      	movs	r3, #7
 8006c1c:	e027      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c1e:	2306      	movs	r3, #6
 8006c20:	e025      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c22:	2305      	movs	r3, #5
 8006c24:	e023      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c26:	2304      	movs	r3, #4
 8006c28:	e021      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e01f      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c2e:	2302      	movs	r3, #2
 8006c30:	e01d      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c32:	2301      	movs	r3, #1
 8006c34:	e01b      	b.n	8006c6e <HAL_GPIO_Init+0x26a>
 8006c36:	bf00      	nop
 8006c38:	58000080 	.word	0x58000080
 8006c3c:	58024400 	.word	0x58024400
 8006c40:	58000400 	.word	0x58000400
 8006c44:	58020000 	.word	0x58020000
 8006c48:	58020400 	.word	0x58020400
 8006c4c:	58020800 	.word	0x58020800
 8006c50:	58020c00 	.word	0x58020c00
 8006c54:	58021000 	.word	0x58021000
 8006c58:	58021400 	.word	0x58021400
 8006c5c:	58021800 	.word	0x58021800
 8006c60:	58021c00 	.word	0x58021c00
 8006c64:	58022000 	.word	0x58022000
 8006c68:	58022400 	.word	0x58022400
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	f002 0203 	and.w	r2, r2, #3
 8006c74:	0092      	lsls	r2, r2, #2
 8006c76:	4093      	lsls	r3, r2
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c7e:	4938      	ldr	r1, [pc, #224]	@ (8006d60 <HAL_GPIO_Init+0x35c>)
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	089b      	lsrs	r3, r3, #2
 8006c84:	3302      	adds	r3, #2
 8006c86:	69ba      	ldr	r2, [r7, #24]
 8006c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	43db      	mvns	r3, r3
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	69ba      	ldr	r2, [r7, #24]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	43db      	mvns	r3, r3
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f47f ae63 	bne.w	8006a18 <HAL_GPIO_Init+0x14>
  }
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	3724      	adds	r7, #36	@ 0x24
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	58000400 	.word	0x58000400

08006d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	807b      	strh	r3, [r7, #2]
 8006d70:	4613      	mov	r3, r2
 8006d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d74:	787b      	ldrb	r3, [r7, #1]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d003      	beq.n	8006d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d7a:	887a      	ldrh	r2, [r7, #2]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d80:	e003      	b.n	8006d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d82:	887b      	ldrh	r3, [r7, #2]
 8006d84:	041a      	lsls	r2, r3, #16
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	619a      	str	r2, [r3, #24]
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006d9c:	4b05      	ldr	r3, [pc, #20]	@ (8006db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a04      	ldr	r2, [pc, #16]	@ (8006db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006da6:	6013      	str	r3, [r2, #0]
}
 8006da8:	bf00      	nop
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	58024800 	.word	0x58024800

08006db8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006dc0:	4b29      	ldr	r3, [pc, #164]	@ (8006e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0307 	and.w	r3, r3, #7
 8006dc8:	2b06      	cmp	r3, #6
 8006dca:	d00a      	beq.n	8006de2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006dcc:	4b26      	ldr	r3, [pc, #152]	@ (8006e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d001      	beq.n	8006dde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e040      	b.n	8006e60 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	e03e      	b.n	8006e60 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006de2:	4b21      	ldr	r3, [pc, #132]	@ (8006e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006dea:	491f      	ldr	r1, [pc, #124]	@ (8006e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006df2:	f7fb f8af 	bl	8001f54 <HAL_GetTick>
 8006df6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006df8:	e009      	b.n	8006e0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006dfa:	f7fb f8ab 	bl	8001f54 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e08:	d901      	bls.n	8006e0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e028      	b.n	8006e60 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e0e:	4b16      	ldr	r3, [pc, #88]	@ (8006e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e1a:	d1ee      	bne.n	8006dfa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b1e      	cmp	r3, #30
 8006e20:	d008      	beq.n	8006e34 <HAL_PWREx_ConfigSupply+0x7c>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e26:	d005      	beq.n	8006e34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b1d      	cmp	r3, #29
 8006e2c:	d002      	beq.n	8006e34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b2d      	cmp	r3, #45	@ 0x2d
 8006e32:	d114      	bne.n	8006e5e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006e34:	f7fb f88e 	bl	8001f54 <HAL_GetTick>
 8006e38:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e3a:	e009      	b.n	8006e50 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e3c:	f7fb f88a 	bl	8001f54 <HAL_GetTick>
 8006e40:	4602      	mov	r2, r0
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	1ad3      	subs	r3, r2, r3
 8006e46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e4a:	d901      	bls.n	8006e50 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e007      	b.n	8006e60 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006e50:	4b05      	ldr	r3, [pc, #20]	@ (8006e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e5c:	d1ee      	bne.n	8006e3c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	58024800 	.word	0x58024800

08006e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08c      	sub	sp, #48	@ 0x30
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	f000 bc1f 	b.w	80076be <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 80b3 	beq.w	8006ff4 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e8e:	4b95      	ldr	r3, [pc, #596]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e98:	4b92      	ldr	r3, [pc, #584]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d007      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x48>
 8006ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea6:	2b18      	cmp	r3, #24
 8006ea8:	d112      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x64>
 8006eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d10d      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb4:	4b8b      	ldr	r3, [pc, #556]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 8098 	beq.w	8006ff2 <HAL_RCC_OscConfig+0x186>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 8093 	bne.w	8006ff2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e3f6      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed8:	d106      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x7c>
 8006eda:	4b82      	ldr	r3, [pc, #520]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a81      	ldr	r2, [pc, #516]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	e058      	b.n	8006f9a <HAL_RCC_OscConfig+0x12e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d112      	bne.n	8006f16 <HAL_RCC_OscConfig+0xaa>
 8006ef0:	4b7c      	ldr	r3, [pc, #496]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a7b      	ldr	r2, [pc, #492]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	4b79      	ldr	r3, [pc, #484]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a78      	ldr	r2, [pc, #480]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f02:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	4b76      	ldr	r3, [pc, #472]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a75      	ldr	r2, [pc, #468]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	e041      	b.n	8006f9a <HAL_RCC_OscConfig+0x12e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f1e:	d112      	bne.n	8006f46 <HAL_RCC_OscConfig+0xda>
 8006f20:	4b70      	ldr	r3, [pc, #448]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a6f      	ldr	r2, [pc, #444]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	4b6d      	ldr	r3, [pc, #436]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a6c      	ldr	r2, [pc, #432]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f32:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	4b6a      	ldr	r3, [pc, #424]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a69      	ldr	r2, [pc, #420]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	e029      	b.n	8006f9a <HAL_RCC_OscConfig+0x12e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8006f4e:	d112      	bne.n	8006f76 <HAL_RCC_OscConfig+0x10a>
 8006f50:	4b64      	ldr	r3, [pc, #400]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a63      	ldr	r2, [pc, #396]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	4b61      	ldr	r3, [pc, #388]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a60      	ldr	r2, [pc, #384]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	4b5e      	ldr	r3, [pc, #376]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e011      	b.n	8006f9a <HAL_RCC_OscConfig+0x12e>
 8006f76:	4b5b      	ldr	r3, [pc, #364]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a5a      	ldr	r2, [pc, #360]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	4b58      	ldr	r3, [pc, #352]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a57      	ldr	r2, [pc, #348]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	4b55      	ldr	r3, [pc, #340]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a54      	ldr	r2, [pc, #336]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006f94:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006f98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d013      	beq.n	8006fca <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fa2:	f7fa ffd7 	bl	8001f54 <HAL_GetTick>
 8006fa6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006faa:	f7fa ffd3 	bl	8001f54 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b64      	cmp	r3, #100	@ 0x64
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e380      	b.n	80076be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fbc:	4b49      	ldr	r3, [pc, #292]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d0f0      	beq.n	8006faa <HAL_RCC_OscConfig+0x13e>
 8006fc8:	e014      	b.n	8006ff4 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fca:	f7fa ffc3 	bl	8001f54 <HAL_GetTick>
 8006fce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fd2:	f7fa ffbf 	bl	8001f54 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b64      	cmp	r3, #100	@ 0x64
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e36c      	b.n	80076be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fe4:	4b3f      	ldr	r3, [pc, #252]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f0      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x166>
 8006ff0:	e000      	b.n	8006ff4 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 808c 	beq.w	800711a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007002:	4b38      	ldr	r3, [pc, #224]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800700a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800700c:	4b35      	ldr	r3, [pc, #212]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007012:	6a3b      	ldr	r3, [r7, #32]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <HAL_RCC_OscConfig+0x1bc>
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	2b18      	cmp	r3, #24
 800701c:	d137      	bne.n	800708e <HAL_RCC_OscConfig+0x222>
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d132      	bne.n	800708e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007028:	4b2e      	ldr	r3, [pc, #184]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_OscConfig+0x1d4>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e33e      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007040:	4b28      	ldr	r3, [pc, #160]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f023 0219 	bic.w	r2, r3, #25
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	4925      	ldr	r1, [pc, #148]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 800704e:	4313      	orrs	r3, r2
 8007050:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007052:	f7fa ff7f 	bl	8001f54 <HAL_GetTick>
 8007056:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007058:	e008      	b.n	800706c <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800705a:	f7fa ff7b 	bl	8001f54 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d901      	bls.n	800706c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e328      	b.n	80076be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800706c:	4b1d      	ldr	r3, [pc, #116]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0304 	and.w	r3, r3, #4
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0f0      	beq.n	800705a <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007078:	4b1a      	ldr	r3, [pc, #104]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	061b      	lsls	r3, r3, #24
 8007086:	4917      	ldr	r1, [pc, #92]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8007088:	4313      	orrs	r3, r2
 800708a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800708c:	e045      	b.n	800711a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d028      	beq.n	80070e8 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007096:	4b13      	ldr	r3, [pc, #76]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f023 0219 	bic.w	r2, r3, #25
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	4910      	ldr	r1, [pc, #64]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a8:	f7fa ff54 	bl	8001f54 <HAL_GetTick>
 80070ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070b0:	f7fa ff50 	bl	8001f54 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e2fd      	b.n	80076be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070c2:	4b08      	ldr	r3, [pc, #32]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0f0      	beq.n	80070b0 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ce:	4b05      	ldr	r3, [pc, #20]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	061b      	lsls	r3, r3, #24
 80070dc:	4901      	ldr	r1, [pc, #4]	@ (80070e4 <HAL_RCC_OscConfig+0x278>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	604b      	str	r3, [r1, #4]
 80070e2:	e01a      	b.n	800711a <HAL_RCC_OscConfig+0x2ae>
 80070e4:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070e8:	4b97      	ldr	r3, [pc, #604]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a96      	ldr	r2, [pc, #600]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80070ee:	f023 0301 	bic.w	r3, r3, #1
 80070f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f4:	f7fa ff2e 	bl	8001f54 <HAL_GetTick>
 80070f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070fa:	e008      	b.n	800710e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070fc:	f7fa ff2a 	bl	8001f54 <HAL_GetTick>
 8007100:	4602      	mov	r2, r0
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	2b02      	cmp	r3, #2
 8007108:	d901      	bls.n	800710e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e2d7      	b.n	80076be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800710e:	4b8e      	ldr	r3, [pc, #568]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1f0      	bne.n	80070fc <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0310 	and.w	r3, r3, #16
 8007122:	2b00      	cmp	r3, #0
 8007124:	d06a      	beq.n	80071fc <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007126:	4b88      	ldr	r3, [pc, #544]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800712e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007130:	4b85      	ldr	r3, [pc, #532]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	2b08      	cmp	r3, #8
 800713a:	d007      	beq.n	800714c <HAL_RCC_OscConfig+0x2e0>
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b18      	cmp	r3, #24
 8007140:	d11b      	bne.n	800717a <HAL_RCC_OscConfig+0x30e>
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f003 0303 	and.w	r3, r3, #3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d116      	bne.n	800717a <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800714c:	4b7e      	ldr	r3, [pc, #504]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_RCC_OscConfig+0x2f8>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	2b80      	cmp	r3, #128	@ 0x80
 800715e:	d001      	beq.n	8007164 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e2ac      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007164:	4b78      	ldr	r3, [pc, #480]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a1b      	ldr	r3, [r3, #32]
 8007170:	061b      	lsls	r3, r3, #24
 8007172:	4975      	ldr	r1, [pc, #468]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007174:	4313      	orrs	r3, r2
 8007176:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007178:	e040      	b.n	80071fc <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d023      	beq.n	80071ca <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007182:	4b71      	ldr	r3, [pc, #452]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a70      	ldr	r2, [pc, #448]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800718c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718e:	f7fa fee1 	bl	8001f54 <HAL_GetTick>
 8007192:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007196:	f7fa fedd 	bl	8001f54 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e28a      	b.n	80076be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071a8:	4b67      	ldr	r3, [pc, #412]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d0f0      	beq.n	8007196 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071b4:	4b64      	ldr	r3, [pc, #400]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a1b      	ldr	r3, [r3, #32]
 80071c0:	061b      	lsls	r3, r3, #24
 80071c2:	4961      	ldr	r1, [pc, #388]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60cb      	str	r3, [r1, #12]
 80071c8:	e018      	b.n	80071fc <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071ca:	4b5f      	ldr	r3, [pc, #380]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a5e      	ldr	r2, [pc, #376]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80071d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d6:	f7fa febd 	bl	8001f54 <HAL_GetTick>
 80071da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071dc:	e008      	b.n	80071f0 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80071de:	f7fa feb9 	bl	8001f54 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d901      	bls.n	80071f0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80071ec:	2303      	movs	r3, #3
 80071ee:	e266      	b.n	80076be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80071f0:	4b55      	ldr	r3, [pc, #340]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1f0      	bne.n	80071de <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0308 	and.w	r3, r3, #8
 8007204:	2b00      	cmp	r3, #0
 8007206:	d036      	beq.n	8007276 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d019      	beq.n	8007244 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007210:	4b4d      	ldr	r3, [pc, #308]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007212:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007214:	4a4c      	ldr	r2, [pc, #304]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007216:	f043 0301 	orr.w	r3, r3, #1
 800721a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800721c:	f7fa fe9a 	bl	8001f54 <HAL_GetTick>
 8007220:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007222:	e008      	b.n	8007236 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007224:	f7fa fe96 	bl	8001f54 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	2b02      	cmp	r3, #2
 8007230:	d901      	bls.n	8007236 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8007232:	2303      	movs	r3, #3
 8007234:	e243      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007236:	4b44      	ldr	r3, [pc, #272]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0f0      	beq.n	8007224 <HAL_RCC_OscConfig+0x3b8>
 8007242:	e018      	b.n	8007276 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007244:	4b40      	ldr	r3, [pc, #256]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007248:	4a3f      	ldr	r2, [pc, #252]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007250:	f7fa fe80 	bl	8001f54 <HAL_GetTick>
 8007254:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007258:	f7fa fe7c 	bl	8001f54 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e229      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800726a:	4b37      	ldr	r3, [pc, #220]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 800726c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f0      	bne.n	8007258 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b00      	cmp	r3, #0
 8007280:	d036      	beq.n	80072f0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d019      	beq.n	80072be <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800728a:	4b2f      	ldr	r3, [pc, #188]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a2e      	ldr	r2, [pc, #184]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 8007290:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007294:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007296:	f7fa fe5d 	bl	8001f54 <HAL_GetTick>
 800729a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800729e:	f7fa fe59 	bl	8001f54 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e206      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072b0:	4b25      	ldr	r3, [pc, #148]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0f0      	beq.n	800729e <HAL_RCC_OscConfig+0x432>
 80072bc:	e018      	b.n	80072f0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072be:	4b22      	ldr	r3, [pc, #136]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a21      	ldr	r2, [pc, #132]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80072c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072ca:	f7fa fe43 	bl	8001f54 <HAL_GetTick>
 80072ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072d0:	e008      	b.n	80072e4 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072d2:	f7fa fe3f 	bl	8001f54 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d901      	bls.n	80072e4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e1ec      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072e4:	4b18      	ldr	r3, [pc, #96]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1f0      	bne.n	80072d2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80af 	beq.w	800745c <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072fe:	4b13      	ldr	r3, [pc, #76]	@ (800734c <HAL_RCC_OscConfig+0x4e0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a12      	ldr	r2, [pc, #72]	@ (800734c <HAL_RCC_OscConfig+0x4e0>)
 8007304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007308:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800730a:	f7fa fe23 	bl	8001f54 <HAL_GetTick>
 800730e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007310:	e008      	b.n	8007324 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007312:	f7fa fe1f 	bl	8001f54 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b64      	cmp	r3, #100	@ 0x64
 800731e:	d901      	bls.n	8007324 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e1cc      	b.n	80076be <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007324:	4b09      	ldr	r3, [pc, #36]	@ (800734c <HAL_RCC_OscConfig+0x4e0>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0f0      	beq.n	8007312 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d10b      	bne.n	8007350 <HAL_RCC_OscConfig+0x4e4>
 8007338:	4b03      	ldr	r3, [pc, #12]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 800733a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800733c:	4a02      	ldr	r2, [pc, #8]	@ (8007348 <HAL_RCC_OscConfig+0x4dc>)
 800733e:	f043 0301 	orr.w	r3, r3, #1
 8007342:	6713      	str	r3, [r2, #112]	@ 0x70
 8007344:	e05b      	b.n	80073fe <HAL_RCC_OscConfig+0x592>
 8007346:	bf00      	nop
 8007348:	58024400 	.word	0x58024400
 800734c:	58024800 	.word	0x58024800
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d112      	bne.n	800737e <HAL_RCC_OscConfig+0x512>
 8007358:	4b9d      	ldr	r3, [pc, #628]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800735a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800735c:	4a9c      	ldr	r2, [pc, #624]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800735e:	f023 0301 	bic.w	r3, r3, #1
 8007362:	6713      	str	r3, [r2, #112]	@ 0x70
 8007364:	4b9a      	ldr	r3, [pc, #616]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007366:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007368:	4a99      	ldr	r2, [pc, #612]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800736a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800736e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007370:	4b97      	ldr	r3, [pc, #604]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007374:	4a96      	ldr	r2, [pc, #600]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007376:	f023 0304 	bic.w	r3, r3, #4
 800737a:	6713      	str	r3, [r2, #112]	@ 0x70
 800737c:	e03f      	b.n	80073fe <HAL_RCC_OscConfig+0x592>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b05      	cmp	r3, #5
 8007384:	d112      	bne.n	80073ac <HAL_RCC_OscConfig+0x540>
 8007386:	4b92      	ldr	r3, [pc, #584]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738a:	4a91      	ldr	r2, [pc, #580]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800738c:	f043 0304 	orr.w	r3, r3, #4
 8007390:	6713      	str	r3, [r2, #112]	@ 0x70
 8007392:	4b8f      	ldr	r3, [pc, #572]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007396:	4a8e      	ldr	r2, [pc, #568]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800739c:	6713      	str	r3, [r2, #112]	@ 0x70
 800739e:	4b8c      	ldr	r3, [pc, #560]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073a2:	4a8b      	ldr	r2, [pc, #556]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073a4:	f043 0301 	orr.w	r3, r3, #1
 80073a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80073aa:	e028      	b.n	80073fe <HAL_RCC_OscConfig+0x592>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b85      	cmp	r3, #133	@ 0x85
 80073b2:	d112      	bne.n	80073da <HAL_RCC_OscConfig+0x56e>
 80073b4:	4b86      	ldr	r3, [pc, #536]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b8:	4a85      	ldr	r2, [pc, #532]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073ba:	f043 0304 	orr.w	r3, r3, #4
 80073be:	6713      	str	r3, [r2, #112]	@ 0x70
 80073c0:	4b83      	ldr	r3, [pc, #524]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c4:	4a82      	ldr	r2, [pc, #520]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80073cc:	4b80      	ldr	r3, [pc, #512]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073d0:	4a7f      	ldr	r2, [pc, #508]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073d2:	f043 0301 	orr.w	r3, r3, #1
 80073d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80073d8:	e011      	b.n	80073fe <HAL_RCC_OscConfig+0x592>
 80073da:	4b7d      	ldr	r3, [pc, #500]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073de:	4a7c      	ldr	r2, [pc, #496]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073e0:	f023 0301 	bic.w	r3, r3, #1
 80073e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80073e6:	4b7a      	ldr	r3, [pc, #488]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ea:	4a79      	ldr	r2, [pc, #484]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073ec:	f023 0304 	bic.w	r3, r3, #4
 80073f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80073f2:	4b77      	ldr	r3, [pc, #476]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f6:	4a76      	ldr	r2, [pc, #472]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80073f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073fc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d015      	beq.n	8007432 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007406:	f7fa fda5 	bl	8001f54 <HAL_GetTick>
 800740a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800740c:	e00a      	b.n	8007424 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800740e:	f7fa fda1 	bl	8001f54 <HAL_GetTick>
 8007412:	4602      	mov	r2, r0
 8007414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007416:	1ad3      	subs	r3, r2, r3
 8007418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800741c:	4293      	cmp	r3, r2
 800741e:	d901      	bls.n	8007424 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8007420:	2303      	movs	r3, #3
 8007422:	e14c      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007424:	4b6a      	ldr	r3, [pc, #424]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0ee      	beq.n	800740e <HAL_RCC_OscConfig+0x5a2>
 8007430:	e014      	b.n	800745c <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007432:	f7fa fd8f 	bl	8001f54 <HAL_GetTick>
 8007436:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007438:	e00a      	b.n	8007450 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800743a:	f7fa fd8b 	bl	8001f54 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007448:	4293      	cmp	r3, r2
 800744a:	d901      	bls.n	8007450 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e136      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007450:	4b5f      	ldr	r3, [pc, #380]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1ee      	bne.n	800743a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 812b 	beq.w	80076bc <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007466:	4b5a      	ldr	r3, [pc, #360]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800746e:	2b18      	cmp	r3, #24
 8007470:	f000 80bb 	beq.w	80075ea <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007478:	2b02      	cmp	r3, #2
 800747a:	f040 8095 	bne.w	80075a8 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800747e:	4b54      	ldr	r3, [pc, #336]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a53      	ldr	r2, [pc, #332]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007484:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748a:	f7fa fd63 	bl	8001f54 <HAL_GetTick>
 800748e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007492:	f7fa fd5f 	bl	8001f54 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e10c      	b.n	80076be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074a4:	4b4a      	ldr	r3, [pc, #296]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f0      	bne.n	8007492 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074b0:	4b47      	ldr	r3, [pc, #284]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80074b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80074b4:	4b47      	ldr	r3, [pc, #284]	@ (80075d4 <HAL_RCC_OscConfig+0x768>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80074c0:	0112      	lsls	r2, r2, #4
 80074c2:	430a      	orrs	r2, r1
 80074c4:	4942      	ldr	r1, [pc, #264]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	628b      	str	r3, [r1, #40]	@ 0x28
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ce:	3b01      	subs	r3, #1
 80074d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d8:	3b01      	subs	r3, #1
 80074da:	025b      	lsls	r3, r3, #9
 80074dc:	b29b      	uxth	r3, r3
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e4:	3b01      	subs	r3, #1
 80074e6:	041b      	lsls	r3, r3, #16
 80074e8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80074ec:	431a      	orrs	r2, r3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f2:	3b01      	subs	r3, #1
 80074f4:	061b      	lsls	r3, r3, #24
 80074f6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80074fa:	4935      	ldr	r1, [pc, #212]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007500:	4b33      	ldr	r3, [pc, #204]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007504:	4a32      	ldr	r2, [pc, #200]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800750c:	4b30      	ldr	r3, [pc, #192]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800750e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007510:	4b31      	ldr	r3, [pc, #196]	@ (80075d8 <HAL_RCC_OscConfig+0x76c>)
 8007512:	4013      	ands	r3, r2
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007518:	00d2      	lsls	r2, r2, #3
 800751a:	492d      	ldr	r1, [pc, #180]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800751c:	4313      	orrs	r3, r2
 800751e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007520:	4b2b      	ldr	r3, [pc, #172]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007524:	f023 020c 	bic.w	r2, r3, #12
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800752c:	4928      	ldr	r1, [pc, #160]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800752e:	4313      	orrs	r3, r2
 8007530:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007532:	4b27      	ldr	r3, [pc, #156]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	f023 0202 	bic.w	r2, r3, #2
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753e:	4924      	ldr	r1, [pc, #144]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007540:	4313      	orrs	r3, r2
 8007542:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007544:	4b22      	ldr	r3, [pc, #136]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007548:	4a21      	ldr	r2, [pc, #132]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800754a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800754e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007550:	4b1f      	ldr	r3, [pc, #124]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	4a1e      	ldr	r2, [pc, #120]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800755a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800755c:	4b1c      	ldr	r3, [pc, #112]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800755e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007560:	4a1b      	ldr	r2, [pc, #108]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007562:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007568:	4b19      	ldr	r3, [pc, #100]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	4a18      	ldr	r2, [pc, #96]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007574:	4b16      	ldr	r3, [pc, #88]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a15      	ldr	r2, [pc, #84]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800757a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800757e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007580:	f7fa fce8 	bl	8001f54 <HAL_GetTick>
 8007584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007588:	f7fa fce4 	bl	8001f54 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e091      	b.n	80076be <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800759a:	4b0d      	ldr	r3, [pc, #52]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d0f0      	beq.n	8007588 <HAL_RCC_OscConfig+0x71c>
 80075a6:	e089      	b.n	80076bc <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075a8:	4b09      	ldr	r3, [pc, #36]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a08      	ldr	r2, [pc, #32]	@ (80075d0 <HAL_RCC_OscConfig+0x764>)
 80075ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075b4:	f7fa fcce 	bl	8001f54 <HAL_GetTick>
 80075b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075ba:	e00f      	b.n	80075dc <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075bc:	f7fa fcca 	bl	8001f54 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d908      	bls.n	80075dc <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e077      	b.n	80076be <HAL_RCC_OscConfig+0x852>
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
 80075d4:	fffffc0c 	.word	0xfffffc0c
 80075d8:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80075dc:	4b3a      	ldr	r3, [pc, #232]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e9      	bne.n	80075bc <HAL_RCC_OscConfig+0x750>
 80075e8:	e068      	b.n	80076bc <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075ea:	4b37      	ldr	r3, [pc, #220]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 80075ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ee:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075f0:	4b35      	ldr	r3, [pc, #212]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 80075f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f4:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d031      	beq.n	8007662 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f003 0203 	and.w	r2, r3, #3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007608:	429a      	cmp	r2, r3
 800760a:	d12a      	bne.n	8007662 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	091b      	lsrs	r3, r3, #4
 8007610:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007618:	429a      	cmp	r2, r3
 800761a:	d122      	bne.n	8007662 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007626:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007628:	429a      	cmp	r2, r3
 800762a:	d11a      	bne.n	8007662 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	0a5b      	lsrs	r3, r3, #9
 8007630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007638:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800763a:	429a      	cmp	r2, r3
 800763c:	d111      	bne.n	8007662 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	0c1b      	lsrs	r3, r3, #16
 8007642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800764c:	429a      	cmp	r2, r3
 800764e:	d108      	bne.n	8007662 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	0e1b      	lsrs	r3, r3, #24
 8007654:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800765c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800765e:	429a      	cmp	r2, r3
 8007660:	d001      	beq.n	8007666 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e02b      	b.n	80076be <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007666:	4b18      	ldr	r3, [pc, #96]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 8007668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766a:	08db      	lsrs	r3, r3, #3
 800766c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007670:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	429a      	cmp	r2, r3
 800767a:	d01f      	beq.n	80076bc <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800767c:	4b12      	ldr	r3, [pc, #72]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 800767e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007680:	4a11      	ldr	r2, [pc, #68]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 8007682:	f023 0301 	bic.w	r3, r3, #1
 8007686:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007688:	f7fa fc64 	bl	8001f54 <HAL_GetTick>
 800768c:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800768e:	bf00      	nop
 8007690:	f7fa fc60 	bl	8001f54 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007698:	4293      	cmp	r3, r2
 800769a:	d0f9      	beq.n	8007690 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800769c:	4b0a      	ldr	r3, [pc, #40]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 800769e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076a0:	4b0a      	ldr	r3, [pc, #40]	@ (80076cc <HAL_RCC_OscConfig+0x860>)
 80076a2:	4013      	ands	r3, r2
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80076a8:	00d2      	lsls	r2, r2, #3
 80076aa:	4907      	ldr	r1, [pc, #28]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80076b0:	4b05      	ldr	r3, [pc, #20]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 80076b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076b4:	4a04      	ldr	r2, [pc, #16]	@ (80076c8 <HAL_RCC_OscConfig+0x85c>)
 80076b6:	f043 0301 	orr.w	r3, r3, #1
 80076ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3730      	adds	r7, #48	@ 0x30
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	58024400 	.word	0x58024400
 80076cc:	ffff0007 	.word	0xffff0007

080076d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e19c      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076e4:	4b8a      	ldr	r3, [pc, #552]	@ (8007910 <HAL_RCC_ClockConfig+0x240>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d910      	bls.n	8007714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076f2:	4b87      	ldr	r3, [pc, #540]	@ (8007910 <HAL_RCC_ClockConfig+0x240>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f023 020f 	bic.w	r2, r3, #15
 80076fa:	4985      	ldr	r1, [pc, #532]	@ (8007910 <HAL_RCC_ClockConfig+0x240>)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	4313      	orrs	r3, r2
 8007700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007702:	4b83      	ldr	r3, [pc, #524]	@ (8007910 <HAL_RCC_ClockConfig+0x240>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d001      	beq.n	8007714 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e184      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0304 	and.w	r3, r3, #4
 800771c:	2b00      	cmp	r3, #0
 800771e:	d010      	beq.n	8007742 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	691a      	ldr	r2, [r3, #16]
 8007724:	4b7b      	ldr	r3, [pc, #492]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007726:	699b      	ldr	r3, [r3, #24]
 8007728:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800772c:	429a      	cmp	r2, r3
 800772e:	d908      	bls.n	8007742 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007730:	4b78      	ldr	r3, [pc, #480]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	4975      	ldr	r1, [pc, #468]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 800773e:	4313      	orrs	r3, r2
 8007740:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 0308 	and.w	r3, r3, #8
 800774a:	2b00      	cmp	r3, #0
 800774c:	d010      	beq.n	8007770 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695a      	ldr	r2, [r3, #20]
 8007752:	4b70      	ldr	r3, [pc, #448]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007754:	69db      	ldr	r3, [r3, #28]
 8007756:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800775a:	429a      	cmp	r2, r3
 800775c:	d908      	bls.n	8007770 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800775e:	4b6d      	ldr	r3, [pc, #436]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	496a      	ldr	r1, [pc, #424]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 800776c:	4313      	orrs	r3, r2
 800776e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0310 	and.w	r3, r3, #16
 8007778:	2b00      	cmp	r3, #0
 800777a:	d010      	beq.n	800779e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	699a      	ldr	r2, [r3, #24]
 8007780:	4b64      	ldr	r3, [pc, #400]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007788:	429a      	cmp	r2, r3
 800778a:	d908      	bls.n	800779e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800778c:	4b61      	ldr	r3, [pc, #388]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 800778e:	69db      	ldr	r3, [r3, #28]
 8007790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	495e      	ldr	r1, [pc, #376]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 800779a:	4313      	orrs	r3, r2
 800779c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d010      	beq.n	80077cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69da      	ldr	r2, [r3, #28]
 80077ae:	4b59      	ldr	r3, [pc, #356]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d908      	bls.n	80077cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80077ba:	4b56      	ldr	r3, [pc, #344]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077bc:	6a1b      	ldr	r3, [r3, #32]
 80077be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	4953      	ldr	r1, [pc, #332]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d010      	beq.n	80077fa <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	4b4d      	ldr	r3, [pc, #308]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d908      	bls.n	80077fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f023 020f 	bic.w	r2, r3, #15
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	4947      	ldr	r1, [pc, #284]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d055      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007806:	4b43      	ldr	r3, [pc, #268]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	4940      	ldr	r1, [pc, #256]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007814:	4313      	orrs	r3, r2
 8007816:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	2b02      	cmp	r3, #2
 800781e:	d107      	bne.n	8007830 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007820:	4b3c      	ldr	r3, [pc, #240]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d121      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e0f6      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d107      	bne.n	8007848 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007838:	4b36      	ldr	r3, [pc, #216]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d115      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e0ea      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d107      	bne.n	8007860 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007850:	4b30      	ldr	r3, [pc, #192]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007858:	2b00      	cmp	r3, #0
 800785a:	d109      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0de      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007860:	4b2c      	ldr	r3, [pc, #176]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e0d6      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007870:	4b28      	ldr	r3, [pc, #160]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f023 0207 	bic.w	r2, r3, #7
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	4925      	ldr	r1, [pc, #148]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 800787e:	4313      	orrs	r3, r2
 8007880:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007882:	f7fa fb67 	bl	8001f54 <HAL_GetTick>
 8007886:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007888:	e00a      	b.n	80078a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800788a:	f7fa fb63 	bl	8001f54 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007898:	4293      	cmp	r3, r2
 800789a:	d901      	bls.n	80078a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e0be      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078a0:	4b1c      	ldr	r3, [pc, #112]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d1eb      	bne.n	800788a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0302 	and.w	r3, r3, #2
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d010      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	4b14      	ldr	r3, [pc, #80]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d208      	bcs.n	80078e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078ce:	4b11      	ldr	r3, [pc, #68]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078d0:	699b      	ldr	r3, [r3, #24]
 80078d2:	f023 020f 	bic.w	r2, r3, #15
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	490e      	ldr	r1, [pc, #56]	@ (8007914 <HAL_RCC_ClockConfig+0x244>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007910 <HAL_RCC_ClockConfig+0x240>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d214      	bcs.n	8007918 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ee:	4b08      	ldr	r3, [pc, #32]	@ (8007910 <HAL_RCC_ClockConfig+0x240>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f023 020f 	bic.w	r2, r3, #15
 80078f6:	4906      	ldr	r1, [pc, #24]	@ (8007910 <HAL_RCC_ClockConfig+0x240>)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fe:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <HAL_RCC_ClockConfig+0x240>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d005      	beq.n	8007918 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e086      	b.n	8007a1e <HAL_RCC_ClockConfig+0x34e>
 8007910:	52002000 	.word	0x52002000
 8007914:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d010      	beq.n	8007946 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	4b3f      	ldr	r3, [pc, #252]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007930:	429a      	cmp	r2, r3
 8007932:	d208      	bcs.n	8007946 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007934:	4b3c      	ldr	r3, [pc, #240]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	4939      	ldr	r1, [pc, #228]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007942:	4313      	orrs	r3, r2
 8007944:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0308 	and.w	r3, r3, #8
 800794e:	2b00      	cmp	r3, #0
 8007950:	d010      	beq.n	8007974 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	695a      	ldr	r2, [r3, #20]
 8007956:	4b34      	ldr	r3, [pc, #208]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800795e:	429a      	cmp	r2, r3
 8007960:	d208      	bcs.n	8007974 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007962:	4b31      	ldr	r3, [pc, #196]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	492e      	ldr	r1, [pc, #184]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007970:	4313      	orrs	r3, r2
 8007972:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0310 	and.w	r3, r3, #16
 800797c:	2b00      	cmp	r3, #0
 800797e:	d010      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	699a      	ldr	r2, [r3, #24]
 8007984:	4b28      	ldr	r3, [pc, #160]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800798c:	429a      	cmp	r2, r3
 800798e:	d208      	bcs.n	80079a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007990:	4b25      	ldr	r3, [pc, #148]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	4922      	ldr	r1, [pc, #136]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0320 	and.w	r3, r3, #32
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d010      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69da      	ldr	r2, [r3, #28]
 80079b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d208      	bcs.n	80079d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80079be:	4b1a      	ldr	r3, [pc, #104]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	4917      	ldr	r1, [pc, #92]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80079d0:	f000 f89e 	bl	8007b10 <HAL_RCC_GetSysClockFreq>
 80079d4:	4602      	mov	r2, r0
 80079d6:	4b14      	ldr	r3, [pc, #80]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	0a1b      	lsrs	r3, r3, #8
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	4912      	ldr	r1, [pc, #72]	@ (8007a2c <HAL_RCC_ClockConfig+0x35c>)
 80079e2:	5ccb      	ldrb	r3, [r1, r3]
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	fa22 f303 	lsr.w	r3, r2, r3
 80079ec:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80079ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007a28 <HAL_RCC_ClockConfig+0x358>)
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f003 030f 	and.w	r3, r3, #15
 80079f6:	4a0d      	ldr	r2, [pc, #52]	@ (8007a2c <HAL_RCC_ClockConfig+0x35c>)
 80079f8:	5cd3      	ldrb	r3, [r2, r3]
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	fa22 f303 	lsr.w	r3, r2, r3
 8007a04:	4a0a      	ldr	r2, [pc, #40]	@ (8007a30 <HAL_RCC_ClockConfig+0x360>)
 8007a06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a08:	4a0a      	ldr	r2, [pc, #40]	@ (8007a34 <HAL_RCC_ClockConfig+0x364>)
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a38 <HAL_RCC_ClockConfig+0x368>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fa fa54 	bl	8001ec0 <HAL_InitTick>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	58024400 	.word	0x58024400
 8007a2c:	0800e708 	.word	0x0800e708
 8007a30:	2400043c 	.word	0x2400043c
 8007a34:	24000438 	.word	0x24000438
 8007a38:	24000440 	.word	0x24000440

08007a3c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08c      	sub	sp, #48	@ 0x30
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d12a      	bne.n	8007aa4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007a54:	4a2b      	ldr	r2, [pc, #172]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a56:	f043 0301 	orr.w	r3, r3, #1
 8007a5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007a5e:	4b29      	ldr	r3, [pc, #164]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007a64:	f003 0301 	and.w	r3, r3, #1
 8007a68:	61bb      	str	r3, [r7, #24]
 8007a6a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007a6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a72:	2302      	movs	r3, #2
 8007a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a76:	2303      	movs	r3, #3
 8007a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007a82:	f107 031c 	add.w	r3, r7, #28
 8007a86:	4619      	mov	r1, r3
 8007a88:	481f      	ldr	r0, [pc, #124]	@ (8007b08 <HAL_RCC_MCOConfig+0xcc>)
 8007a8a:	f7fe ffbb 	bl	8006a04 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8007a96:	68b9      	ldr	r1, [r7, #8]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	4919      	ldr	r1, [pc, #100]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007aa2:	e02a      	b.n	8007afa <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007aa4:	4b17      	ldr	r3, [pc, #92]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007aa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007aaa:	4a16      	ldr	r2, [pc, #88]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007aac:	f043 0304 	orr.w	r3, r3, #4
 8007ab0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8007ab4:	4b13      	ldr	r3, [pc, #76]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007ab6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007ac2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ac8:	2302      	movs	r3, #2
 8007aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007acc:	2303      	movs	r3, #3
 8007ace:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007ad8:	f107 031c 	add.w	r3, r7, #28
 8007adc:	4619      	mov	r1, r3
 8007ade:	480b      	ldr	r0, [pc, #44]	@ (8007b0c <HAL_RCC_MCOConfig+0xd0>)
 8007ae0:	f7fe ff90 	bl	8006a04 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007ae4:	4b07      	ldr	r3, [pc, #28]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	01d9      	lsls	r1, r3, #7
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	430b      	orrs	r3, r1
 8007af4:	4903      	ldr	r1, [pc, #12]	@ (8007b04 <HAL_RCC_MCOConfig+0xc8>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	610b      	str	r3, [r1, #16]
}
 8007afa:	bf00      	nop
 8007afc:	3730      	adds	r7, #48	@ 0x30
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	58024400 	.word	0x58024400
 8007b08:	58020000 	.word	0x58020000
 8007b0c:	58020800 	.word	0x58020800

08007b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b089      	sub	sp, #36	@ 0x24
 8007b14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b16:	4bb3      	ldr	r3, [pc, #716]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b1e:	2b18      	cmp	r3, #24
 8007b20:	f200 8155 	bhi.w	8007dce <HAL_RCC_GetSysClockFreq+0x2be>
 8007b24:	a201      	add	r2, pc, #4	@ (adr r2, 8007b2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2a:	bf00      	nop
 8007b2c:	08007b91 	.word	0x08007b91
 8007b30:	08007dcf 	.word	0x08007dcf
 8007b34:	08007dcf 	.word	0x08007dcf
 8007b38:	08007dcf 	.word	0x08007dcf
 8007b3c:	08007dcf 	.word	0x08007dcf
 8007b40:	08007dcf 	.word	0x08007dcf
 8007b44:	08007dcf 	.word	0x08007dcf
 8007b48:	08007dcf 	.word	0x08007dcf
 8007b4c:	08007bb7 	.word	0x08007bb7
 8007b50:	08007dcf 	.word	0x08007dcf
 8007b54:	08007dcf 	.word	0x08007dcf
 8007b58:	08007dcf 	.word	0x08007dcf
 8007b5c:	08007dcf 	.word	0x08007dcf
 8007b60:	08007dcf 	.word	0x08007dcf
 8007b64:	08007dcf 	.word	0x08007dcf
 8007b68:	08007dcf 	.word	0x08007dcf
 8007b6c:	08007bbd 	.word	0x08007bbd
 8007b70:	08007dcf 	.word	0x08007dcf
 8007b74:	08007dcf 	.word	0x08007dcf
 8007b78:	08007dcf 	.word	0x08007dcf
 8007b7c:	08007dcf 	.word	0x08007dcf
 8007b80:	08007dcf 	.word	0x08007dcf
 8007b84:	08007dcf 	.word	0x08007dcf
 8007b88:	08007dcf 	.word	0x08007dcf
 8007b8c:	08007bc3 	.word	0x08007bc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b90:	4b94      	ldr	r3, [pc, #592]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d009      	beq.n	8007bb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b9c:	4b91      	ldr	r3, [pc, #580]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	08db      	lsrs	r3, r3, #3
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	4a90      	ldr	r2, [pc, #576]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007bae:	e111      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007bb0:	4b8d      	ldr	r3, [pc, #564]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bb2:	61bb      	str	r3, [r7, #24]
      break;
 8007bb4:	e10e      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007bb6:	4b8d      	ldr	r3, [pc, #564]	@ (8007dec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bb8:	61bb      	str	r3, [r7, #24]
      break;
 8007bba:	e10b      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8007df0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007bbe:	61bb      	str	r3, [r7, #24]
      break;
 8007bc0:	e108      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bc2:	4b88      	ldr	r3, [pc, #544]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc6:	f003 0303 	and.w	r3, r3, #3
 8007bca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007bcc:	4b85      	ldr	r3, [pc, #532]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd0:	091b      	lsrs	r3, r3, #4
 8007bd2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007bd8:	4b82      	ldr	r3, [pc, #520]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007be2:	4b80      	ldr	r3, [pc, #512]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be6:	08db      	lsrs	r3, r3, #3
 8007be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	fb02 f303 	mul.w	r3, r2, r3
 8007bf2:	ee07 3a90 	vmov	s15, r3
 8007bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 80e1 	beq.w	8007dc8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	f000 8083 	beq.w	8007d14 <HAL_RCC_GetSysClockFreq+0x204>
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	f200 80a1 	bhi.w	8007d58 <HAL_RCC_GetSysClockFreq+0x248>
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <HAL_RCC_GetSysClockFreq+0x114>
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d056      	beq.n	8007cd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007c22:	e099      	b.n	8007d58 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c24:	4b6f      	ldr	r3, [pc, #444]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0320 	and.w	r3, r3, #32
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d02d      	beq.n	8007c8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c30:	4b6c      	ldr	r3, [pc, #432]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	08db      	lsrs	r3, r3, #3
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	4a6b      	ldr	r2, [pc, #428]	@ (8007de8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	ee07 3a90 	vmov	s15, r3
 8007c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	ee07 3a90 	vmov	s15, r3
 8007c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5a:	4b62      	ldr	r3, [pc, #392]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c6e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c8a:	e087      	b.n	8007d9c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c96:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007df8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c9e:	4b51      	ldr	r3, [pc, #324]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cb2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007cce:	e065      	b.n	8007d9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cda:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007dfc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce2:	4b40      	ldr	r3, [pc, #256]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cf6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d12:	e043      	b.n	8007d9c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	ee07 3a90 	vmov	s15, r3
 8007d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d1e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007e00 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d26:	4b2f      	ldr	r3, [pc, #188]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d2e:	ee07 3a90 	vmov	s15, r3
 8007d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d3a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d56:	e021      	b.n	8007d9c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007dfc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d7e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007df4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d9a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d9c:	4b11      	ldr	r3, [pc, #68]	@ (8007de4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007da0:	0a5b      	lsrs	r3, r3, #9
 8007da2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007da6:	3301      	adds	r3, #1
 8007da8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	ee07 3a90 	vmov	s15, r3
 8007db0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dc0:	ee17 3a90 	vmov	r3, s15
 8007dc4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007dc6:	e005      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	61bb      	str	r3, [r7, #24]
      break;
 8007dcc:	e002      	b.n	8007dd4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007dce:	4b07      	ldr	r3, [pc, #28]	@ (8007dec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007dd0:	61bb      	str	r3, [r7, #24]
      break;
 8007dd2:	bf00      	nop
  }

  return sysclockfreq;
 8007dd4:	69bb      	ldr	r3, [r7, #24]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3724      	adds	r7, #36	@ 0x24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	58024400 	.word	0x58024400
 8007de8:	03d09000 	.word	0x03d09000
 8007dec:	003d0900 	.word	0x003d0900
 8007df0:	007a1200 	.word	0x007a1200
 8007df4:	46000000 	.word	0x46000000
 8007df8:	4c742400 	.word	0x4c742400
 8007dfc:	4a742400 	.word	0x4a742400
 8007e00:	4af42400 	.word	0x4af42400

08007e04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8007e0a:	f7ff fe81 	bl	8007b10 <HAL_RCC_GetSysClockFreq>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	4b10      	ldr	r3, [pc, #64]	@ (8007e54 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	f003 030f 	and.w	r3, r3, #15
 8007e1a:	490f      	ldr	r1, [pc, #60]	@ (8007e58 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e1c:	5ccb      	ldrb	r3, [r1, r3]
 8007e1e:	f003 031f 	and.w	r3, r3, #31
 8007e22:	fa22 f303 	lsr.w	r3, r2, r3
 8007e26:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8007e28:	4b0a      	ldr	r3, [pc, #40]	@ (8007e54 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e2a:	699b      	ldr	r3, [r3, #24]
 8007e2c:	f003 030f 	and.w	r3, r3, #15
 8007e30:	4a09      	ldr	r2, [pc, #36]	@ (8007e58 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e32:	5cd3      	ldrb	r3, [r2, r3]
 8007e34:	f003 031f 	and.w	r3, r3, #31
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3e:	4a07      	ldr	r2, [pc, #28]	@ (8007e5c <HAL_RCC_GetHCLKFreq+0x58>)
 8007e40:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e42:	4a07      	ldr	r2, [pc, #28]	@ (8007e60 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007e48:	4b04      	ldr	r3, [pc, #16]	@ (8007e5c <HAL_RCC_GetHCLKFreq+0x58>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	58024400 	.word	0x58024400
 8007e58:	0800e708 	.word	0x0800e708
 8007e5c:	2400043c 	.word	0x2400043c
 8007e60:	24000438 	.word	0x24000438

08007e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007e68:	f7ff ffcc 	bl	8007e04 <HAL_RCC_GetHCLKFreq>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	4b06      	ldr	r3, [pc, #24]	@ (8007e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	091b      	lsrs	r3, r3, #4
 8007e74:	f003 0307 	and.w	r3, r3, #7
 8007e78:	4904      	ldr	r1, [pc, #16]	@ (8007e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e7a:	5ccb      	ldrb	r3, [r1, r3]
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	58024400 	.word	0x58024400
 8007e8c:	0800e708 	.word	0x0800e708

08007e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007e94:	f7ff ffb6 	bl	8007e04 <HAL_RCC_GetHCLKFreq>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	4b06      	ldr	r3, [pc, #24]	@ (8007eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	0a1b      	lsrs	r3, r3, #8
 8007ea0:	f003 0307 	and.w	r3, r3, #7
 8007ea4:	4904      	ldr	r1, [pc, #16]	@ (8007eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007ea6:	5ccb      	ldrb	r3, [r1, r3]
 8007ea8:	f003 031f 	and.w	r3, r3, #31
 8007eac:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	58024400 	.word	0x58024400
 8007eb8:	0800e708 	.word	0x0800e708

08007ebc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ec0:	b0c8      	sub	sp, #288	@ 0x120
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007ee0:	2500      	movs	r5, #0
 8007ee2:	ea54 0305 	orrs.w	r3, r4, r5
 8007ee6:	d049      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ee8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ef2:	d02f      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007ef4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ef8:	d828      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007efa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007efe:	d01a      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007f04:	d822      	bhi.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f0e:	d007      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f10:	e01c      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f12:	4ba7      	ldr	r3, [pc, #668]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f16:	4aa6      	ldr	r2, [pc, #664]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f1e:	e01a      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f24:	3308      	adds	r3, #8
 8007f26:	2102      	movs	r1, #2
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f002 fac3 	bl	800a4b4 <RCCEx_PLL2_Config>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f34:	e00f      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f3a:	3328      	adds	r3, #40	@ 0x28
 8007f3c:	2102      	movs	r1, #2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 fb6a 	bl	800a618 <RCCEx_PLL3_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007f4a:	e004      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f52:	e000      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f56:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f5e:	4b94      	ldr	r3, [pc, #592]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f62:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007f66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f6c:	4a90      	ldr	r2, [pc, #576]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f72:	e003      	b.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f74:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007f88:	f04f 0900 	mov.w	r9, #0
 8007f8c:	ea58 0309 	orrs.w	r3, r8, r9
 8007f90:	d047      	beq.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007f92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f98:	2b04      	cmp	r3, #4
 8007f9a:	d82a      	bhi.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa2:	bf00      	nop
 8007fa4:	08007fb9 	.word	0x08007fb9
 8007fa8:	08007fc7 	.word	0x08007fc7
 8007fac:	08007fdd 	.word	0x08007fdd
 8007fb0:	08007ffb 	.word	0x08007ffb
 8007fb4:	08007ffb 	.word	0x08007ffb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fb8:	4b7d      	ldr	r3, [pc, #500]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fbc:	4a7c      	ldr	r2, [pc, #496]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fc4:	e01a      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fca:	3308      	adds	r3, #8
 8007fcc:	2100      	movs	r1, #0
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f002 fa70 	bl	800a4b4 <RCCEx_PLL2_Config>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fda:	e00f      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fe0:	3328      	adds	r3, #40	@ 0x28
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f002 fb17 	bl	800a618 <RCCEx_PLL3_Config>
 8007fea:	4603      	mov	r3, r0
 8007fec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ff0:	e004      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ff8:	e000      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ffc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10a      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008004:	4b6a      	ldr	r3, [pc, #424]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008006:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008008:	f023 0107 	bic.w	r1, r3, #7
 800800c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008012:	4a67      	ldr	r2, [pc, #412]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008014:	430b      	orrs	r3, r1
 8008016:	6513      	str	r3, [r2, #80]	@ 0x50
 8008018:	e003      	b.n	8008022 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800801a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800801e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8008022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800802e:	f04f 0b00 	mov.w	fp, #0
 8008032:	ea5a 030b 	orrs.w	r3, sl, fp
 8008036:	d054      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8008038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800803c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800803e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008042:	d036      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8008044:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008048:	d82f      	bhi.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800804a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800804e:	d032      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008050:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008054:	d829      	bhi.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008056:	2bc0      	cmp	r3, #192	@ 0xc0
 8008058:	d02f      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800805a:	2bc0      	cmp	r3, #192	@ 0xc0
 800805c:	d825      	bhi.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800805e:	2b80      	cmp	r3, #128	@ 0x80
 8008060:	d018      	beq.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8008062:	2b80      	cmp	r3, #128	@ 0x80
 8008064:	d821      	bhi.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800806a:	2b40      	cmp	r3, #64	@ 0x40
 800806c:	d007      	beq.n	800807e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800806e:	e01c      	b.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008070:	4b4f      	ldr	r3, [pc, #316]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008074:	4a4e      	ldr	r2, [pc, #312]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800807a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800807c:	e01e      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800807e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008082:	3308      	adds	r3, #8
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f002 fa14 	bl	800a4b4 <RCCEx_PLL2_Config>
 800808c:	4603      	mov	r3, r0
 800808e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8008092:	e013      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008094:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008098:	3328      	adds	r3, #40	@ 0x28
 800809a:	2100      	movs	r1, #0
 800809c:	4618      	mov	r0, r3
 800809e:	f002 fabb 	bl	800a618 <RCCEx_PLL3_Config>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 80080a8:	e008      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080b0:	e004      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80080b2:	bf00      	nop
 80080b4:	e002      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 80080ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 80080c4:	4b3a      	ldr	r3, [pc, #232]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080c8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80080cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080d2:	4a37      	ldr	r2, [pc, #220]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080d4:	430b      	orrs	r3, r1
 80080d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80080d8:	e003      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080da:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080de:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 80080e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80080ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80080f2:	2300      	movs	r3, #0
 80080f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80080f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80080fc:	460b      	mov	r3, r1
 80080fe:	4313      	orrs	r3, r2
 8008100:	d05c      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8008102:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008108:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800810c:	d03b      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800810e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008112:	d834      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008114:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008118:	d037      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800811a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800811e:	d82e      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008120:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008124:	d033      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008126:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800812a:	d828      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800812c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008130:	d01a      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8008132:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008136:	d822      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800813c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008140:	d007      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8008142:	e01c      	b.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008144:	4b1a      	ldr	r3, [pc, #104]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	4a19      	ldr	r2, [pc, #100]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800814a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800814e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008150:	e01e      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008152:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008156:	3308      	adds	r3, #8
 8008158:	2100      	movs	r1, #0
 800815a:	4618      	mov	r0, r3
 800815c:	f002 f9aa 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008160:	4603      	mov	r3, r0
 8008162:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8008166:	e013      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800816c:	3328      	adds	r3, #40	@ 0x28
 800816e:	2100      	movs	r1, #0
 8008170:	4618      	mov	r0, r3
 8008172:	f002 fa51 	bl	800a618 <RCCEx_PLL3_Config>
 8008176:	4603      	mov	r3, r0
 8008178:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800817c:	e008      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008184:	e004      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8008186:	bf00      	nop
 8008188:	e002      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800818a:	bf00      	nop
 800818c:	e000      	b.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800818e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008190:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10d      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8008198:	4b05      	ldr	r3, [pc, #20]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800819a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800819c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80081a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081a6:	4a02      	ldr	r2, [pc, #8]	@ (80081b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80081a8:	430b      	orrs	r3, r1
 80081aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80081ac:	e006      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x300>
 80081ae:	bf00      	nop
 80081b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80081b8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80081bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80081c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80081cc:	2300      	movs	r3, #0
 80081ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80081d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80081d6:	460b      	mov	r3, r1
 80081d8:	4313      	orrs	r3, r2
 80081da:	d03a      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80081dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081e2:	2b30      	cmp	r3, #48	@ 0x30
 80081e4:	d01f      	beq.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 80081e6:	2b30      	cmp	r3, #48	@ 0x30
 80081e8:	d819      	bhi.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80081ea:	2b20      	cmp	r3, #32
 80081ec:	d00c      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80081ee:	2b20      	cmp	r3, #32
 80081f0:	d815      	bhi.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x362>
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d019      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80081f6:	2b10      	cmp	r3, #16
 80081f8:	d111      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081fa:	4bae      	ldr	r3, [pc, #696]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	4aad      	ldr	r2, [pc, #692]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008204:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008206:	e011      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800820c:	3308      	adds	r3, #8
 800820e:	2102      	movs	r1, #2
 8008210:	4618      	mov	r0, r3
 8008212:	f002 f94f 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008216:	4603      	mov	r3, r0
 8008218:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800821c:	e006      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008224:	e002      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8008226:	bf00      	nop
 8008228:	e000      	b.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800822a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008234:	4b9f      	ldr	r3, [pc, #636]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008238:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800823c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008242:	4a9c      	ldr	r2, [pc, #624]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008244:	430b      	orrs	r3, r1
 8008246:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008248:	e003      	b.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800824e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008252:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800825e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008262:	2300      	movs	r3, #0
 8008264:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008268:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800826c:	460b      	mov	r3, r1
 800826e:	4313      	orrs	r3, r2
 8008270:	d051      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008278:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800827c:	d035      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800827e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008282:	d82e      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008284:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008288:	d031      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x432>
 800828a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800828e:	d828      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8008290:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008294:	d01a      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008296:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800829a:	d822      	bhi.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800829c:	2b00      	cmp	r3, #0
 800829e:	d003      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80082a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a4:	d007      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80082a6:	e01c      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082a8:	4b82      	ldr	r3, [pc, #520]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ac:	4a81      	ldr	r2, [pc, #516]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80082b4:	e01c      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ba:	3308      	adds	r3, #8
 80082bc:	2100      	movs	r1, #0
 80082be:	4618      	mov	r0, r3
 80082c0:	f002 f8f8 	bl	800a4b4 <RCCEx_PLL2_Config>
 80082c4:	4603      	mov	r3, r0
 80082c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80082ca:	e011      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80082cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d0:	3328      	adds	r3, #40	@ 0x28
 80082d2:	2100      	movs	r1, #0
 80082d4:	4618      	mov	r0, r3
 80082d6:	f002 f99f 	bl	800a618 <RCCEx_PLL3_Config>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80082e0:	e006      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082e8:	e002      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80082ea:	bf00      	nop
 80082ec:	e000      	b.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 80082ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10a      	bne.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80082f8:	4b6e      	ldr	r3, [pc, #440]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80082fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008300:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008306:	4a6b      	ldr	r2, [pc, #428]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008308:	430b      	orrs	r3, r1
 800830a:	6513      	str	r3, [r2, #80]	@ 0x50
 800830c:	e003      	b.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800830e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008312:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008316:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008322:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008326:	2300      	movs	r3, #0
 8008328:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800832c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008330:	460b      	mov	r3, r1
 8008332:	4313      	orrs	r3, r2
 8008334:	d053      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008336:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800833a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800833c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008340:	d033      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8008342:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008346:	d82c      	bhi.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008348:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800834c:	d02f      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800834e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008352:	d826      	bhi.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008354:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008358:	d02b      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800835a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800835e:	d820      	bhi.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8008360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008364:	d012      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8008366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800836a:	d81a      	bhi.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d022      	beq.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8008370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008374:	d115      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800837a:	3308      	adds	r3, #8
 800837c:	2101      	movs	r1, #1
 800837e:	4618      	mov	r0, r3
 8008380:	f002 f898 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008384:	4603      	mov	r3, r0
 8008386:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800838a:	e015      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800838c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008390:	3328      	adds	r3, #40	@ 0x28
 8008392:	2101      	movs	r1, #1
 8008394:	4618      	mov	r0, r3
 8008396:	f002 f93f 	bl	800a618 <RCCEx_PLL3_Config>
 800839a:	4603      	mov	r3, r0
 800839c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80083a0:	e00a      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083a8:	e006      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80083aa:	bf00      	nop
 80083ac:	e004      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80083ae:	bf00      	nop
 80083b0:	e002      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80083b2:	bf00      	nop
 80083b4:	e000      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80083b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80083c0:	4b3c      	ldr	r3, [pc, #240]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80083c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083ce:	4a39      	ldr	r2, [pc, #228]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083d0:	430b      	orrs	r3, r1
 80083d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80083d4:	e003      	b.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083da:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80083ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80083ee:	2300      	movs	r3, #0
 80083f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80083f4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4313      	orrs	r3, r2
 80083fc:	d060      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80083fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008402:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008406:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800840a:	d039      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800840c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008410:	d832      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008412:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008416:	d035      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008418:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800841c:	d82c      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800841e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008422:	d031      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008428:	d826      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800842a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800842e:	d02d      	beq.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008430:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008434:	d820      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800843a:	d012      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800843c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008440:	d81a      	bhi.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d024      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800844a:	d115      	bne.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800844c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008450:	3308      	adds	r3, #8
 8008452:	2101      	movs	r1, #1
 8008454:	4618      	mov	r0, r3
 8008456:	f002 f82d 	bl	800a4b4 <RCCEx_PLL2_Config>
 800845a:	4603      	mov	r3, r0
 800845c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008460:	e017      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008466:	3328      	adds	r3, #40	@ 0x28
 8008468:	2101      	movs	r1, #1
 800846a:	4618      	mov	r0, r3
 800846c:	f002 f8d4 	bl	800a618 <RCCEx_PLL3_Config>
 8008470:	4603      	mov	r3, r0
 8008472:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008476:	e00c      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800847e:	e008      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008480:	bf00      	nop
 8008482:	e006      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008484:	bf00      	nop
 8008486:	e004      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008488:	bf00      	nop
 800848a:	e002      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800848c:	bf00      	nop
 800848e:	e000      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008492:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10e      	bne.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800849a:	4b06      	ldr	r3, [pc, #24]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800849c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800849e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80084a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084aa:	4a02      	ldr	r2, [pc, #8]	@ (80084b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084ac:	430b      	orrs	r3, r1
 80084ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80084b0:	e006      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80084b2:	bf00      	nop
 80084b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80084bc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80084cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80084da:	460b      	mov	r3, r1
 80084dc:	4313      	orrs	r3, r2
 80084de:	d037      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80084e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ea:	d00e      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80084ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084f0:	d816      	bhi.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d018      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80084f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084fa:	d111      	bne.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084fc:	4bc4      	ldr	r3, [pc, #784]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008500:	4ac3      	ldr	r2, [pc, #780]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008506:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008508:	e00f      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800850a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800850e:	3308      	adds	r3, #8
 8008510:	2101      	movs	r1, #1
 8008512:	4618      	mov	r0, r3
 8008514:	f001 ffce 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008518:	4603      	mov	r3, r0
 800851a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800851e:	e004      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008526:	e000      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800852a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008532:	4bb7      	ldr	r3, [pc, #732]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008536:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800853a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800853e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008540:	4ab3      	ldr	r2, [pc, #716]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008542:	430b      	orrs	r3, r1
 8008544:	6513      	str	r3, [r2, #80]	@ 0x50
 8008546:	e003      	b.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008548:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800854c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800855c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008560:	2300      	movs	r3, #0
 8008562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008566:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800856a:	460b      	mov	r3, r1
 800856c:	4313      	orrs	r3, r2
 800856e:	d039      	beq.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008570:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008576:	2b03      	cmp	r3, #3
 8008578:	d81c      	bhi.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800857a:	a201      	add	r2, pc, #4	@ (adr r2, 8008580 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800857c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008580:	080085bd 	.word	0x080085bd
 8008584:	08008591 	.word	0x08008591
 8008588:	0800859f 	.word	0x0800859f
 800858c:	080085bd 	.word	0x080085bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008590:	4b9f      	ldr	r3, [pc, #636]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008594:	4a9e      	ldr	r2, [pc, #632]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800859a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800859c:	e00f      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800859e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a2:	3308      	adds	r3, #8
 80085a4:	2102      	movs	r1, #2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f001 ff84 	bl	800a4b4 <RCCEx_PLL2_Config>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80085b2:	e004      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80085ba:	e000      	b.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80085bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085be:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80085c6:	4b92      	ldr	r3, [pc, #584]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ca:	f023 0103 	bic.w	r1, r3, #3
 80085ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085d4:	4a8e      	ldr	r2, [pc, #568]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80085d6:	430b      	orrs	r3, r1
 80085d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80085da:	e003      	b.n	80085e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085e0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80085e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80085f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80085f4:	2300      	movs	r3, #0
 80085f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80085fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80085fe:	460b      	mov	r3, r1
 8008600:	4313      	orrs	r3, r2
 8008602:	f000 8099 	beq.w	8008738 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008606:	4b83      	ldr	r3, [pc, #524]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a82      	ldr	r2, [pc, #520]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800860c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008612:	f7f9 fc9f 	bl	8001f54 <HAL_GetTick>
 8008616:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800861a:	e00b      	b.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800861c:	f7f9 fc9a 	bl	8001f54 <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8008626:	1ad3      	subs	r3, r2, r3
 8008628:	2b64      	cmp	r3, #100	@ 0x64
 800862a:	d903      	bls.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008632:	e005      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008634:	4b77      	ldr	r3, [pc, #476]	@ (8008814 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800863c:	2b00      	cmp	r3, #0
 800863e:	d0ed      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008640:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008644:	2b00      	cmp	r3, #0
 8008646:	d173      	bne.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008648:	4b71      	ldr	r3, [pc, #452]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800864a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800864c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008650:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008654:	4053      	eors	r3, r2
 8008656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800865a:	2b00      	cmp	r3, #0
 800865c:	d015      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800865e:	4b6c      	ldr	r3, [pc, #432]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008666:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800866a:	4b69      	ldr	r3, [pc, #420]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800866c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800866e:	4a68      	ldr	r2, [pc, #416]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008670:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008674:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008676:	4b66      	ldr	r3, [pc, #408]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800867a:	4a65      	ldr	r2, [pc, #404]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800867c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008680:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008682:	4a63      	ldr	r2, [pc, #396]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008688:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800868a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800868e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008692:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008696:	d118      	bne.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008698:	f7f9 fc5c 	bl	8001f54 <HAL_GetTick>
 800869c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086a0:	e00d      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086a2:	f7f9 fc57 	bl	8001f54 <HAL_GetTick>
 80086a6:	4602      	mov	r2, r0
 80086a8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80086ac:	1ad2      	subs	r2, r2, r3
 80086ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d903      	bls.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 80086bc:	e005      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086be:	4b54      	ldr	r3, [pc, #336]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0eb      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80086ca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d129      	bne.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086e2:	d10e      	bne.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80086e4:	4b4a      	ldr	r3, [pc, #296]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80086ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086f4:	091a      	lsrs	r2, r3, #4
 80086f6:	4b48      	ldr	r3, [pc, #288]	@ (8008818 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	4a45      	ldr	r2, [pc, #276]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086fc:	430b      	orrs	r3, r1
 80086fe:	6113      	str	r3, [r2, #16]
 8008700:	e005      	b.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008702:	4b43      	ldr	r3, [pc, #268]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	4a42      	ldr	r2, [pc, #264]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008708:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800870c:	6113      	str	r3, [r2, #16]
 800870e:	4b40      	ldr	r3, [pc, #256]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008710:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008712:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008716:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800871a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800871e:	4a3c      	ldr	r2, [pc, #240]	@ (8008810 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008720:	430b      	orrs	r3, r1
 8008722:	6713      	str	r3, [r2, #112]	@ 0x70
 8008724:	e008      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008726:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800872a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800872e:	e003      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008730:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008734:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008738:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f002 0301 	and.w	r3, r2, #1
 8008744:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008748:	2300      	movs	r3, #0
 800874a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800874e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008752:	460b      	mov	r3, r1
 8008754:	4313      	orrs	r3, r2
 8008756:	f000 8090 	beq.w	800887a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800875a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800875e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008762:	2b28      	cmp	r3, #40	@ 0x28
 8008764:	d870      	bhi.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008766:	a201      	add	r2, pc, #4	@ (adr r2, 800876c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876c:	08008851 	.word	0x08008851
 8008770:	08008849 	.word	0x08008849
 8008774:	08008849 	.word	0x08008849
 8008778:	08008849 	.word	0x08008849
 800877c:	08008849 	.word	0x08008849
 8008780:	08008849 	.word	0x08008849
 8008784:	08008849 	.word	0x08008849
 8008788:	08008849 	.word	0x08008849
 800878c:	0800881d 	.word	0x0800881d
 8008790:	08008849 	.word	0x08008849
 8008794:	08008849 	.word	0x08008849
 8008798:	08008849 	.word	0x08008849
 800879c:	08008849 	.word	0x08008849
 80087a0:	08008849 	.word	0x08008849
 80087a4:	08008849 	.word	0x08008849
 80087a8:	08008849 	.word	0x08008849
 80087ac:	08008833 	.word	0x08008833
 80087b0:	08008849 	.word	0x08008849
 80087b4:	08008849 	.word	0x08008849
 80087b8:	08008849 	.word	0x08008849
 80087bc:	08008849 	.word	0x08008849
 80087c0:	08008849 	.word	0x08008849
 80087c4:	08008849 	.word	0x08008849
 80087c8:	08008849 	.word	0x08008849
 80087cc:	08008851 	.word	0x08008851
 80087d0:	08008849 	.word	0x08008849
 80087d4:	08008849 	.word	0x08008849
 80087d8:	08008849 	.word	0x08008849
 80087dc:	08008849 	.word	0x08008849
 80087e0:	08008849 	.word	0x08008849
 80087e4:	08008849 	.word	0x08008849
 80087e8:	08008849 	.word	0x08008849
 80087ec:	08008851 	.word	0x08008851
 80087f0:	08008849 	.word	0x08008849
 80087f4:	08008849 	.word	0x08008849
 80087f8:	08008849 	.word	0x08008849
 80087fc:	08008849 	.word	0x08008849
 8008800:	08008849 	.word	0x08008849
 8008804:	08008849 	.word	0x08008849
 8008808:	08008849 	.word	0x08008849
 800880c:	08008851 	.word	0x08008851
 8008810:	58024400 	.word	0x58024400
 8008814:	58024800 	.word	0x58024800
 8008818:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800881c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008820:	3308      	adds	r3, #8
 8008822:	2101      	movs	r1, #1
 8008824:	4618      	mov	r0, r3
 8008826:	f001 fe45 	bl	800a4b4 <RCCEx_PLL2_Config>
 800882a:	4603      	mov	r3, r0
 800882c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008830:	e00f      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008836:	3328      	adds	r3, #40	@ 0x28
 8008838:	2101      	movs	r1, #1
 800883a:	4618      	mov	r0, r3
 800883c:	f001 feec 	bl	800a618 <RCCEx_PLL3_Config>
 8008840:	4603      	mov	r3, r0
 8008842:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008846:	e004      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800884e:	e000      	b.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008852:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10b      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800885a:	4bc0      	ldr	r3, [pc, #768]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800885c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800885e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008862:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800886a:	4abc      	ldr	r2, [pc, #752]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800886c:	430b      	orrs	r3, r1
 800886e:	6553      	str	r3, [r2, #84]	@ 0x54
 8008870:	e003      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008872:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008876:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800887a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	f002 0302 	and.w	r3, r2, #2
 8008886:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800888a:	2300      	movs	r3, #0
 800888c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008890:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008894:	460b      	mov	r3, r1
 8008896:	4313      	orrs	r3, r2
 8008898:	d043      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800889a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800889e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a2:	2b05      	cmp	r3, #5
 80088a4:	d824      	bhi.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80088a6:	a201      	add	r2, pc, #4	@ (adr r2, 80088ac <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088f9 	.word	0x080088f9
 80088b0:	080088c5 	.word	0x080088c5
 80088b4:	080088db 	.word	0x080088db
 80088b8:	080088f9 	.word	0x080088f9
 80088bc:	080088f9 	.word	0x080088f9
 80088c0:	080088f9 	.word	0x080088f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088c8:	3308      	adds	r3, #8
 80088ca:	2101      	movs	r1, #1
 80088cc:	4618      	mov	r0, r3
 80088ce:	f001 fdf1 	bl	800a4b4 <RCCEx_PLL2_Config>
 80088d2:	4603      	mov	r3, r0
 80088d4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80088d8:	e00f      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80088de:	3328      	adds	r3, #40	@ 0x28
 80088e0:	2101      	movs	r1, #1
 80088e2:	4618      	mov	r0, r3
 80088e4:	f001 fe98 	bl	800a618 <RCCEx_PLL3_Config>
 80088e8:	4603      	mov	r3, r0
 80088ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80088ee:	e004      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80088f6:	e000      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80088f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10b      	bne.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008902:	4b96      	ldr	r3, [pc, #600]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008906:	f023 0107 	bic.w	r1, r3, #7
 800890a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800890e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008912:	4a92      	ldr	r2, [pc, #584]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008914:	430b      	orrs	r3, r1
 8008916:	6553      	str	r3, [r2, #84]	@ 0x54
 8008918:	e003      	b.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800891a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800891e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892a:	f002 0304 	and.w	r3, r2, #4
 800892e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008932:	2300      	movs	r3, #0
 8008934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008938:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800893c:	460b      	mov	r3, r1
 800893e:	4313      	orrs	r3, r2
 8008940:	d043      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008946:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800894a:	2b05      	cmp	r3, #5
 800894c:	d824      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800894e:	a201      	add	r2, pc, #4	@ (adr r2, 8008954 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8008950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008954:	080089a1 	.word	0x080089a1
 8008958:	0800896d 	.word	0x0800896d
 800895c:	08008983 	.word	0x08008983
 8008960:	080089a1 	.word	0x080089a1
 8008964:	080089a1 	.word	0x080089a1
 8008968:	080089a1 	.word	0x080089a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800896c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008970:	3308      	adds	r3, #8
 8008972:	2101      	movs	r1, #1
 8008974:	4618      	mov	r0, r3
 8008976:	f001 fd9d 	bl	800a4b4 <RCCEx_PLL2_Config>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008980:	e00f      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008982:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008986:	3328      	adds	r3, #40	@ 0x28
 8008988:	2101      	movs	r1, #1
 800898a:	4618      	mov	r0, r3
 800898c:	f001 fe44 	bl	800a618 <RCCEx_PLL3_Config>
 8008990:	4603      	mov	r3, r0
 8008992:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008996:	e004      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800899e:	e000      	b.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80089a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10b      	bne.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089aa:	4b6c      	ldr	r3, [pc, #432]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80089ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089ae:	f023 0107 	bic.w	r1, r3, #7
 80089b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089ba:	4a68      	ldr	r2, [pc, #416]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80089bc:	430b      	orrs	r3, r1
 80089be:	6593      	str	r3, [r2, #88]	@ 0x58
 80089c0:	e003      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80089c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d2:	f002 0320 	and.w	r3, r2, #32
 80089d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089da:	2300      	movs	r3, #0
 80089dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80089e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80089e4:	460b      	mov	r3, r1
 80089e6:	4313      	orrs	r3, r2
 80089e8:	d055      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80089ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80089ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80089f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089f6:	d033      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80089f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089fc:	d82c      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80089fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a02:	d02f      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a08:	d826      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a0e:	d02b      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008a10:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a14:	d820      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a1a:	d012      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008a1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a20:	d81a      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d022      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008a26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a2a:	d115      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a30:	3308      	adds	r3, #8
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f001 fd3d 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a40:	e015      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a46:	3328      	adds	r3, #40	@ 0x28
 8008a48:	2102      	movs	r1, #2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f001 fde4 	bl	800a618 <RCCEx_PLL3_Config>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a56:	e00a      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008a5e:	e006      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a60:	bf00      	nop
 8008a62:	e004      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a64:	bf00      	nop
 8008a66:	e002      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a68:	bf00      	nop
 8008a6a:	e000      	b.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8008a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a76:	4b39      	ldr	r3, [pc, #228]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008a7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008a86:	4a35      	ldr	r2, [pc, #212]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008a8c:	e003      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008a92:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008a96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008aac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	d058      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008aba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008abe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008ac2:	d033      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008ac4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008ac8:	d82c      	bhi.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ace:	d02f      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ad4:	d826      	bhi.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008ad6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ada:	d02b      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008adc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ae0:	d820      	bhi.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008ae2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008ae6:	d012      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8008ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008aec:	d81a      	bhi.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d022      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8008af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008af6:	d115      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008afc:	3308      	adds	r3, #8
 8008afe:	2100      	movs	r1, #0
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 fcd7 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008b06:	4603      	mov	r3, r0
 8008b08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b0c:	e015      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b12:	3328      	adds	r3, #40	@ 0x28
 8008b14:	2102      	movs	r1, #2
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 fd7e 	bl	800a618 <RCCEx_PLL3_Config>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b22:	e00a      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008b2a:	e006      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b2c:	bf00      	nop
 8008b2e:	e004      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b30:	bf00      	nop
 8008b32:	e002      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b34:	bf00      	nop
 8008b36:	e000      	b.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8008b38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10e      	bne.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b42:	4b06      	ldr	r3, [pc, #24]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b52:	4a02      	ldr	r2, [pc, #8]	@ (8008b5c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008b54:	430b      	orrs	r3, r1
 8008b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b58:	e006      	b.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008b5a:	bf00      	nop
 8008b5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008b64:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008b74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b78:	2300      	movs	r3, #0
 8008b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b7e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008b82:	460b      	mov	r3, r1
 8008b84:	4313      	orrs	r3, r2
 8008b86:	d055      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008b8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b94:	d033      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008b96:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008b9a:	d82c      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008b9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ba0:	d02f      	beq.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ba6:	d826      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008ba8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008bac:	d02b      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008bae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008bb2:	d820      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008bb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bb8:	d012      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008bba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bbe:	d81a      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d022      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bc8:	d115      	bne.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008bce:	3308      	adds	r3, #8
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 fc6e 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008bde:	e015      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008be0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008be4:	3328      	adds	r3, #40	@ 0x28
 8008be6:	2102      	movs	r1, #2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 fd15 	bl	800a618 <RCCEx_PLL3_Config>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008bf4:	e00a      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008bfc:	e006      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008bfe:	bf00      	nop
 8008c00:	e004      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c02:	bf00      	nop
 8008c04:	e002      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8008c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10b      	bne.n	8008c2c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c14:	4ba1      	ldr	r3, [pc, #644]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c18:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c24:	4a9d      	ldr	r2, [pc, #628]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c26:	430b      	orrs	r3, r1
 8008c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c2a:	e003      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008c30:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f002 0308 	and.w	r3, r2, #8
 8008c40:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c44:	2300      	movs	r3, #0
 8008c46:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c4a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c4e:	460b      	mov	r3, r1
 8008c50:	4313      	orrs	r3, r2
 8008c52:	d01e      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008c54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c60:	d10c      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c66:	3328      	adds	r3, #40	@ 0x28
 8008c68:	2102      	movs	r1, #2
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f001 fcd4 	bl	800a618 <RCCEx_PLL3_Config>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008c7c:	4b87      	ldr	r3, [pc, #540]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c8c:	4a83      	ldr	r2, [pc, #524]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008c8e:	430b      	orrs	r3, r1
 8008c90:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f002 0310 	and.w	r3, r2, #16
 8008c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008ca8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008cac:	460b      	mov	r3, r1
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	d01e      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008cb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cbe:	d10c      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008cc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cc4:	3328      	adds	r3, #40	@ 0x28
 8008cc6:	2102      	movs	r1, #2
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f001 fca5 	bl	800a618 <RCCEx_PLL3_Config>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d002      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008cda:	4b70      	ldr	r3, [pc, #448]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008cea:	4a6c      	ldr	r2, [pc, #432]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008cec:	430b      	orrs	r3, r1
 8008cee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008cfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d00:	2300      	movs	r3, #0
 8008d02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d06:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	d03e      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d14:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d1c:	d022      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8008d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d22:	d81b      	bhi.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8008d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d2c:	d00b      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8008d2e:	e015      	b.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d34:	3308      	adds	r3, #8
 8008d36:	2100      	movs	r1, #0
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f001 fbbb 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d44:	e00f      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d4a:	3328      	adds	r3, #40	@ 0x28
 8008d4c:	2102      	movs	r1, #2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 fc62 	bl	800a618 <RCCEx_PLL3_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d5a:	e004      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008d62:	e000      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d66:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10b      	bne.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008d76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d7e:	4a47      	ldr	r2, [pc, #284]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008d80:	430b      	orrs	r3, r1
 8008d82:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d84:	e003      	b.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d86:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008d8a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008da0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008da4:	460b      	mov	r3, r1
 8008da6:	4313      	orrs	r3, r2
 8008da8:	d03b      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008db6:	d01f      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008db8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008dbc:	d818      	bhi.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008dc2:	d003      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dc8:	d007      	beq.n	8008dda <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008dca:	e011      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008dcc:	4b33      	ldr	r3, [pc, #204]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	4a32      	ldr	r2, [pc, #200]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008dd8:	e00f      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dde:	3328      	adds	r3, #40	@ 0x28
 8008de0:	2101      	movs	r1, #1
 8008de2:	4618      	mov	r0, r3
 8008de4:	f001 fc18 	bl	800a618 <RCCEx_PLL3_Config>
 8008de8:	4603      	mov	r3, r0
 8008dea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8008dee:	e004      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008df6:	e000      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8008df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dfa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10b      	bne.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e02:	4b26      	ldr	r3, [pc, #152]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e06:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e12:	4a22      	ldr	r2, [pc, #136]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e14:	430b      	orrs	r3, r1
 8008e16:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e18:	e003      	b.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008e2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e30:	2300      	movs	r3, #0
 8008e32:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e34:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	d034      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d003      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8008e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e4c:	d007      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8008e4e:	e011      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e50:	4b12      	ldr	r3, [pc, #72]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	4a11      	ldr	r2, [pc, #68]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e5c:	e00e      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e62:	3308      	adds	r3, #8
 8008e64:	2102      	movs	r1, #2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 fb24 	bl	800a4b4 <RCCEx_PLL2_Config>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e72:	e003      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008e7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10d      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008e84:	4b05      	ldr	r3, [pc, #20]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008e8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e92:	4a02      	ldr	r2, [pc, #8]	@ (8008e9c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008e94:	430b      	orrs	r3, r1
 8008e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e98:	e006      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008e9a:	bf00      	nop
 8008e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008ea4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ea8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008eb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008eba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	d00c      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ec8:	3328      	adds	r3, #40	@ 0x28
 8008eca:	2102      	movs	r1, #2
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 fba3 	bl	800a618 <RCCEx_PLL3_Config>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d002      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008eea:	663b      	str	r3, [r7, #96]	@ 0x60
 8008eec:	2300      	movs	r3, #0
 8008eee:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ef0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	d038      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008efa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f06:	d018      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8008f08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f0c:	d811      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f12:	d014      	beq.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008f14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f18:	d80b      	bhi.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d011      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8008f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f22:	d106      	bne.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f24:	4bc3      	ldr	r3, [pc, #780]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f28:	4ac2      	ldr	r2, [pc, #776]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008f30:	e008      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008f38:	e004      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f3a:	bf00      	nop
 8008f3c:	e002      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f3e:	bf00      	nop
 8008f40:	e000      	b.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8008f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d10b      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f4c:	4bb9      	ldr	r3, [pc, #740]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f50:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f5c:	4ab5      	ldr	r2, [pc, #724]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f5e:	430b      	orrs	r3, r1
 8008f60:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f62:	e003      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f64:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008f68:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008f82:	460b      	mov	r3, r1
 8008f84:	4313      	orrs	r3, r2
 8008f86:	d009      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008f88:	4baa      	ldr	r3, [pc, #680]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f8c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f96:	4aa7      	ldr	r2, [pc, #668]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008fa8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008faa:	2300      	movs	r3, #0
 8008fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	d009      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fb8:	4b9e      	ldr	r3, [pc, #632]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fbc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc6:	4a9b      	ldr	r2, [pc, #620]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008fcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008fda:	2300      	movs	r3, #0
 8008fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fde:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	d009      	beq.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008fe8:	4b92      	ldr	r3, [pc, #584]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fec:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 8008ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ff6:	4a8f      	ldr	r2, [pc, #572]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008ff8:	430b      	orrs	r3, r1
 8008ffa:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009004:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009008:	643b      	str	r3, [r7, #64]	@ 0x40
 800900a:	2300      	movs	r3, #0
 800900c:	647b      	str	r3, [r7, #68]	@ 0x44
 800900e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009012:	460b      	mov	r3, r1
 8009014:	4313      	orrs	r3, r2
 8009016:	d00e      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009018:	4b86      	ldr	r3, [pc, #536]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	4a85      	ldr	r2, [pc, #532]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800901e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009022:	6113      	str	r3, [r2, #16]
 8009024:	4b83      	ldr	r3, [pc, #524]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009026:	6919      	ldr	r1, [r3, #16]
 8009028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800902c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009030:	4a80      	ldr	r2, [pc, #512]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009032:	430b      	orrs	r3, r1
 8009034:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800903a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009042:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009044:	2300      	movs	r3, #0
 8009046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009048:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800904c:	460b      	mov	r3, r1
 800904e:	4313      	orrs	r3, r2
 8009050:	d009      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009052:	4b78      	ldr	r3, [pc, #480]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009056:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800905a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800905e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009060:	4a74      	ldr	r2, [pc, #464]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009062:	430b      	orrs	r3, r1
 8009064:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009072:	633b      	str	r3, [r7, #48]	@ 0x30
 8009074:	2300      	movs	r3, #0
 8009076:	637b      	str	r3, [r7, #52]	@ 0x34
 8009078:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800907c:	460b      	mov	r3, r1
 800907e:	4313      	orrs	r3, r2
 8009080:	d00a      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009082:	4b6c      	ldr	r3, [pc, #432]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009086:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800908a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800908e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009092:	4a68      	ldr	r2, [pc, #416]	@ (8009234 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8009094:	430b      	orrs	r3, r1
 8009096:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	2100      	movs	r1, #0
 80090a2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090aa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80090ae:	460b      	mov	r3, r1
 80090b0:	4313      	orrs	r3, r2
 80090b2:	d011      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090b8:	3308      	adds	r3, #8
 80090ba:	2100      	movs	r1, #0
 80090bc:	4618      	mov	r0, r3
 80090be:	f001 f9f9 	bl	800a4b4 <RCCEx_PLL2_Config>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80090c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80090d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80090d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	2100      	movs	r1, #0
 80090e2:	6239      	str	r1, [r7, #32]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80090ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80090ee:	460b      	mov	r3, r1
 80090f0:	4313      	orrs	r3, r2
 80090f2:	d011      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090f8:	3308      	adds	r3, #8
 80090fa:	2101      	movs	r1, #1
 80090fc:	4618      	mov	r0, r3
 80090fe:	f001 f9d9 	bl	800a4b4 <RCCEx_PLL2_Config>
 8009102:	4603      	mov	r3, r0
 8009104:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009108:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800910c:	2b00      	cmp	r3, #0
 800910e:	d003      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009110:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009114:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009118:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	2100      	movs	r1, #0
 8009122:	61b9      	str	r1, [r7, #24]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	61fb      	str	r3, [r7, #28]
 800912a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800912e:	460b      	mov	r3, r1
 8009130:	4313      	orrs	r3, r2
 8009132:	d011      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009134:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009138:	3308      	adds	r3, #8
 800913a:	2102      	movs	r1, #2
 800913c:	4618      	mov	r0, r3
 800913e:	f001 f9b9 	bl	800a4b4 <RCCEx_PLL2_Config>
 8009142:	4603      	mov	r3, r0
 8009144:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009148:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800914c:	2b00      	cmp	r3, #0
 800914e:	d003      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009150:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009154:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009158:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	2100      	movs	r1, #0
 8009162:	6139      	str	r1, [r7, #16]
 8009164:	f003 0308 	and.w	r3, r3, #8
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800916e:	460b      	mov	r3, r1
 8009170:	4313      	orrs	r3, r2
 8009172:	d011      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009174:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009178:	3328      	adds	r3, #40	@ 0x28
 800917a:	2100      	movs	r1, #0
 800917c:	4618      	mov	r0, r3
 800917e:	f001 fa4b 	bl	800a618 <RCCEx_PLL3_Config>
 8009182:	4603      	mov	r3, r0
 8009184:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8009188:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009190:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009194:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	2100      	movs	r1, #0
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	f003 0310 	and.w	r3, r3, #16
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80091ae:	460b      	mov	r3, r1
 80091b0:	4313      	orrs	r3, r2
 80091b2:	d011      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091b8:	3328      	adds	r3, #40	@ 0x28
 80091ba:	2101      	movs	r1, #1
 80091bc:	4618      	mov	r0, r3
 80091be:	f001 fa2b 	bl	800a618 <RCCEx_PLL3_Config>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80091c8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d003      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80091d4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80091d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	2100      	movs	r1, #0
 80091e2:	6039      	str	r1, [r7, #0]
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	607b      	str	r3, [r7, #4]
 80091ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80091ee:	460b      	mov	r3, r1
 80091f0:	4313      	orrs	r3, r2
 80091f2:	d011      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80091f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80091f8:	3328      	adds	r3, #40	@ 0x28
 80091fa:	2102      	movs	r1, #2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f001 fa0b 	bl	800a618 <RCCEx_PLL3_Config>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8009208:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800920c:	2b00      	cmp	r3, #0
 800920e:	d003      	beq.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009210:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009214:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 8009218:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800921c:	2b00      	cmp	r3, #0
 800921e:	d101      	bne.n	8009224 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	e000      	b.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
}
 8009226:	4618      	mov	r0, r3
 8009228:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800922c:	46bd      	mov	sp, r7
 800922e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009232:	bf00      	nop
 8009234:	58024400 	.word	0x58024400

08009238 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b090      	sub	sp, #64	@ 0x40
 800923c:	af00      	add	r7, sp, #0
 800923e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009246:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800924a:	430b      	orrs	r3, r1
 800924c:	f040 8094 	bne.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009250:	4b97      	ldr	r3, [pc, #604]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009254:	f003 0307 	and.w	r3, r3, #7
 8009258:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800925a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925c:	2b04      	cmp	r3, #4
 800925e:	f200 8087 	bhi.w	8009370 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009262:	a201      	add	r2, pc, #4	@ (adr r2, 8009268 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009268:	0800927d 	.word	0x0800927d
 800926c:	080092a5 	.word	0x080092a5
 8009270:	080092cd 	.word	0x080092cd
 8009274:	08009369 	.word	0x08009369
 8009278:	080092f5 	.word	0x080092f5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800927c:	4b8c      	ldr	r3, [pc, #560]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009288:	d108      	bne.n	800929c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800928a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800928e:	4618      	mov	r0, r3
 8009290:	f000 ff68 	bl	800a164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009298:	f000 bc97 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a0:	f000 bc93 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092a4:	4b82      	ldr	r3, [pc, #520]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092b0:	d108      	bne.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092b2:	f107 0318 	add.w	r3, r7, #24
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 fcac 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092c0:	f000 bc83 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c8:	f000 bc7f 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092cc:	4b78      	ldr	r3, [pc, #480]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80092d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092d8:	d108      	bne.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092da:	f107 030c 	add.w	r3, r7, #12
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fdec 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092e8:	f000 bc6f 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80092ec:	2300      	movs	r3, #0
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f0:	f000 bc6b 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092f4:	4b6e      	ldr	r3, [pc, #440]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80092f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80092fc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092fe:	4b6c      	ldr	r3, [pc, #432]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0304 	and.w	r3, r3, #4
 8009306:	2b04      	cmp	r3, #4
 8009308:	d10c      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800930a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930c:	2b00      	cmp	r3, #0
 800930e:	d109      	bne.n	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009310:	4b67      	ldr	r3, [pc, #412]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	08db      	lsrs	r3, r3, #3
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	4a66      	ldr	r2, [pc, #408]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800931c:	fa22 f303 	lsr.w	r3, r2, r3
 8009320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009322:	e01f      	b.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009324:	4b62      	ldr	r3, [pc, #392]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800932c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009330:	d106      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009338:	d102      	bne.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800933a:	4b5f      	ldr	r3, [pc, #380]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800933c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800933e:	e011      	b.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009340:	4b5b      	ldr	r3, [pc, #364]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800934c:	d106      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800934e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009354:	d102      	bne.n	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009356:	4b59      	ldr	r3, [pc, #356]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800935a:	e003      	b.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009360:	f000 bc33 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009364:	f000 bc31 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009368:	4b55      	ldr	r3, [pc, #340]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800936a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800936c:	f000 bc2d 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009374:	f000 bc29 	b.w	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8009378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800937c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009380:	430b      	orrs	r3, r1
 8009382:	f040 809f 	bne.w	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8009386:	4b4a      	ldr	r3, [pc, #296]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800938a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800938e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009396:	d04d      	beq.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8009398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800939e:	f200 8084 	bhi.w	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	2bc0      	cmp	r3, #192	@ 0xc0
 80093a6:	d07d      	beq.n	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80093ac:	d87d      	bhi.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80093ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b0:	2b80      	cmp	r3, #128	@ 0x80
 80093b2:	d02d      	beq.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 80093b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b6:	2b80      	cmp	r3, #128	@ 0x80
 80093b8:	d877      	bhi.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80093ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 80093c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c2:	2b40      	cmp	r3, #64	@ 0x40
 80093c4:	d012      	beq.n	80093ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 80093c6:	e070      	b.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093c8:	4b39      	ldr	r3, [pc, #228]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093d4:	d107      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fec2 	bl	800a164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093e4:	e3f1      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80093e6:	2300      	movs	r3, #0
 80093e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ea:	e3ee      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093ec:	4b30      	ldr	r3, [pc, #192]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093f8:	d107      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093fa:	f107 0318 	add.w	r3, r7, #24
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fc08 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009404:	69bb      	ldr	r3, [r7, #24]
 8009406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009408:	e3df      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800940e:	e3dc      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009410:	4b27      	ldr	r3, [pc, #156]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009418:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800941c:	d107      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800941e:	f107 030c 	add.w	r3, r7, #12
 8009422:	4618      	mov	r0, r3
 8009424:	f000 fd4a 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800942c:	e3cd      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009432:	e3ca      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009434:	4b1e      	ldr	r3, [pc, #120]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009438:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800943c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800943e:	4b1c      	ldr	r3, [pc, #112]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0304 	and.w	r3, r3, #4
 8009446:	2b04      	cmp	r3, #4
 8009448:	d10c      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800944a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800944c:	2b00      	cmp	r3, #0
 800944e:	d109      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009450:	4b17      	ldr	r3, [pc, #92]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	08db      	lsrs	r3, r3, #3
 8009456:	f003 0303 	and.w	r3, r3, #3
 800945a:	4a16      	ldr	r2, [pc, #88]	@ (80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800945c:	fa22 f303 	lsr.w	r3, r2, r3
 8009460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009462:	e01e      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009464:	4b12      	ldr	r3, [pc, #72]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800946c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009470:	d106      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8009472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009474:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009478:	d102      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800947a:	4b0f      	ldr	r3, [pc, #60]	@ (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800947c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800947e:	e010      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009480:	4b0b      	ldr	r3, [pc, #44]	@ (80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009488:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800948c:	d106      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800948e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009494:	d102      	bne.n	800949c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009496:	4b09      	ldr	r3, [pc, #36]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009498:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800949a:	e002      	b.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80094a0:	e393      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094a2:	e392      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094a4:	4b06      	ldr	r3, [pc, #24]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a8:	e38f      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80094aa:	2300      	movs	r3, #0
 80094ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ae:	e38c      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80094b0:	58024400 	.word	0x58024400
 80094b4:	03d09000 	.word	0x03d09000
 80094b8:	003d0900 	.word	0x003d0900
 80094bc:	007a1200 	.word	0x007a1200
 80094c0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 80094c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094c8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80094cc:	430b      	orrs	r3, r1
 80094ce:	f040 809c 	bne.w	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 80094d2:	4b9e      	ldr	r3, [pc, #632]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80094d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094d6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80094da:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80094dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094e2:	d054      	beq.n	800958e <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 80094e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094ea:	f200 808b 	bhi.w	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80094ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094f4:	f000 8083 	beq.w	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094fe:	f200 8081 	bhi.w	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009508:	d02f      	beq.n	800956a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009510:	d878      	bhi.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	2b00      	cmp	r3, #0
 8009516:	d004      	beq.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8009518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800951e:	d012      	beq.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8009520:	e070      	b.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009522:	4b8a      	ldr	r3, [pc, #552]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800952a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800952e:	d107      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009530:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009534:	4618      	mov	r0, r3
 8009536:	f000 fe15 	bl	800a164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800953a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800953c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800953e:	e344      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009544:	e341      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009546:	4b81      	ldr	r3, [pc, #516]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800954e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009552:	d107      	bne.n	8009564 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009554:	f107 0318 	add.w	r3, r7, #24
 8009558:	4618      	mov	r0, r3
 800955a:	f000 fb5b 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009562:	e332      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009564:	2300      	movs	r3, #0
 8009566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009568:	e32f      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800956a:	4b78      	ldr	r3, [pc, #480]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009572:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009576:	d107      	bne.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009578:	f107 030c 	add.w	r3, r7, #12
 800957c:	4618      	mov	r0, r3
 800957e:	f000 fc9d 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009586:	e320      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800958c:	e31d      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800958e:	4b6f      	ldr	r3, [pc, #444]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009592:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009596:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009598:	4b6c      	ldr	r3, [pc, #432]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0304 	and.w	r3, r3, #4
 80095a0:	2b04      	cmp	r3, #4
 80095a2:	d10c      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80095a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d109      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095aa:	4b68      	ldr	r3, [pc, #416]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	08db      	lsrs	r3, r3, #3
 80095b0:	f003 0303 	and.w	r3, r3, #3
 80095b4:	4a66      	ldr	r2, [pc, #408]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80095b6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095bc:	e01e      	b.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095be:	4b63      	ldr	r3, [pc, #396]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095ca:	d106      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80095cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095d2:	d102      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095d4:	4b5f      	ldr	r3, [pc, #380]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095d8:	e010      	b.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095da:	4b5c      	ldr	r3, [pc, #368]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095e6:	d106      	bne.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80095e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ee:	d102      	bne.n	80095f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095f0:	4b59      	ldr	r3, [pc, #356]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80095f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095f4:	e002      	b.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 80095fa:	e2e6      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80095fc:	e2e5      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80095fe:	4b57      	ldr	r3, [pc, #348]	@ (800975c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009602:	e2e2      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8009604:	2300      	movs	r3, #0
 8009606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009608:	e2df      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800960a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800960e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009612:	430b      	orrs	r3, r1
 8009614:	f040 80a7 	bne.w	8009766 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009618:	4b4c      	ldr	r3, [pc, #304]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800961a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800961c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009620:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009628:	d055      	beq.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800962a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800962c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009630:	f200 8096 	bhi.w	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009636:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800963a:	f000 8084 	beq.w	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800963e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009640:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009644:	f200 808c 	bhi.w	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8009648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800964a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800964e:	d030      	beq.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8009650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009652:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009656:	f200 8083 	bhi.w	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800965a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965c:	2b00      	cmp	r3, #0
 800965e:	d004      	beq.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8009660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009666:	d012      	beq.n	800968e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8009668:	e07a      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800966a:	4b38      	ldr	r3, [pc, #224]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009676:	d107      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009678:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800967c:	4618      	mov	r0, r3
 800967e:	f000 fd71 	bl	800a164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009686:	e2a0      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800968c:	e29d      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800968e:	4b2f      	ldr	r3, [pc, #188]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009696:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800969a:	d107      	bne.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800969c:	f107 0318 	add.w	r3, r7, #24
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 fab7 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096aa:	e28e      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b0:	e28b      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096b2:	4b26      	ldr	r3, [pc, #152]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096be:	d107      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096c0:	f107 030c 	add.w	r3, r7, #12
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 fbf9 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ce:	e27c      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096d4:	e279      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096d6:	4b1d      	ldr	r3, [pc, #116]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80096de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096e0:	4b1a      	ldr	r3, [pc, #104]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d10c      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 80096ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d109      	bne.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096f2:	4b16      	ldr	r3, [pc, #88]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	08db      	lsrs	r3, r3, #3
 80096f8:	f003 0303 	and.w	r3, r3, #3
 80096fc:	4a14      	ldr	r2, [pc, #80]	@ (8009750 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80096fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009702:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009704:	e01e      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009706:	4b11      	ldr	r3, [pc, #68]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800970e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009712:	d106      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800971a:	d102      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800971c:	4b0d      	ldr	r3, [pc, #52]	@ (8009754 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800971e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009720:	e010      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009722:	4b0a      	ldr	r3, [pc, #40]	@ (800974c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800972a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800972e:	d106      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009732:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009736:	d102      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009738:	4b07      	ldr	r3, [pc, #28]	@ (8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800973a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800973c:	e002      	b.n	8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009742:	e242      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8009744:	e241      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009746:	4b05      	ldr	r3, [pc, #20]	@ (800975c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800974a:	e23e      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800974c:	58024400 	.word	0x58024400
 8009750:	03d09000 	.word	0x03d09000
 8009754:	003d0900 	.word	0x003d0900
 8009758:	007a1200 	.word	0x007a1200
 800975c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009764:	e231      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800976a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800976e:	430b      	orrs	r3, r1
 8009770:	f040 8085 	bne.w	800987e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009774:	4b9c      	ldr	r3, [pc, #624]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009778:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800977c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800977e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009784:	d06b      	beq.n	800985e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8009786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800978c:	d874      	bhi.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800978e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009790:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009794:	d056      	beq.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8009796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009798:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800979c:	d86c      	bhi.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800979e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097a4:	d03b      	beq.n	800981e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 80097a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80097ac:	d864      	bhi.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80097ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097b4:	d021      	beq.n	80097fa <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 80097b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097bc:	d85c      	bhi.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d004      	beq.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 80097c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097ca:	d004      	beq.n	80097d6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 80097cc:	e054      	b.n	8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80097ce:	f7fe fb49 	bl	8007e64 <HAL_RCC_GetPCLK1Freq>
 80097d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097d4:	e1f9      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097d6:	4b84      	ldr	r3, [pc, #528]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097e2:	d107      	bne.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097e4:	f107 0318 	add.w	r3, r7, #24
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 fa13 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097f2:	e1ea      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097f8:	e1e7      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80097fa:	4b7b      	ldr	r3, [pc, #492]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009806:	d107      	bne.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009808:	f107 030c 	add.w	r3, r7, #12
 800980c:	4618      	mov	r0, r3
 800980e:	f000 fb55 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009816:	e1d8      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800981c:	e1d5      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800981e:	4b72      	ldr	r3, [pc, #456]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0304 	and.w	r3, r3, #4
 8009826:	2b04      	cmp	r3, #4
 8009828:	d109      	bne.n	800983e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800982a:	4b6f      	ldr	r3, [pc, #444]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	08db      	lsrs	r3, r3, #3
 8009830:	f003 0303 	and.w	r3, r3, #3
 8009834:	4a6d      	ldr	r2, [pc, #436]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009836:	fa22 f303 	lsr.w	r3, r2, r3
 800983a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800983c:	e1c5      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009842:	e1c2      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009844:	4b68      	ldr	r3, [pc, #416]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800984c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009850:	d102      	bne.n	8009858 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8009852:	4b67      	ldr	r3, [pc, #412]	@ (80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009854:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009856:	e1b8      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800985c:	e1b5      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800985e:	4b62      	ldr	r3, [pc, #392]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009866:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800986a:	d102      	bne.n	8009872 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800986c:	4b61      	ldr	r3, [pc, #388]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800986e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009870:	e1ab      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009876:	e1a8      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800987c:	e1a5      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800987e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009882:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8009886:	430b      	orrs	r3, r1
 8009888:	d173      	bne.n	8009972 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800988a:	4b57      	ldr	r3, [pc, #348]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800988c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800988e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009892:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009896:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800989a:	d02f      	beq.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800989c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098a2:	d863      	bhi.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80098a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d004      	beq.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80098aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098b0:	d012      	beq.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 80098b2:	e05b      	b.n	800996c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098b4:	4b4c      	ldr	r3, [pc, #304]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098c0:	d107      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098c2:	f107 0318 	add.w	r3, r7, #24
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f9a4 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80098cc:	69bb      	ldr	r3, [r7, #24]
 80098ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d0:	e17b      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d6:	e178      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098d8:	4b43      	ldr	r3, [pc, #268]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098e4:	d107      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098e6:	f107 030c 	add.w	r3, r7, #12
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 fae6 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098f4:	e169      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098fa:	e166      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098fc:	4b3a      	ldr	r3, [pc, #232]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009900:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009904:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009906:	4b38      	ldr	r3, [pc, #224]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	2b04      	cmp	r3, #4
 8009910:	d10c      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8009912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009914:	2b00      	cmp	r3, #0
 8009916:	d109      	bne.n	800992c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009918:	4b33      	ldr	r3, [pc, #204]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	08db      	lsrs	r3, r3, #3
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	4a32      	ldr	r2, [pc, #200]	@ (80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009924:	fa22 f303 	lsr.w	r3, r2, r3
 8009928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800992a:	e01e      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800992c:	4b2e      	ldr	r3, [pc, #184]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009938:	d106      	bne.n	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800993a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009940:	d102      	bne.n	8009948 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009942:	4b2b      	ldr	r3, [pc, #172]	@ (80099f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8009944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009946:	e010      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009948:	4b27      	ldr	r3, [pc, #156]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009950:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009954:	d106      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8009956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800995c:	d102      	bne.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800995e:	4b25      	ldr	r3, [pc, #148]	@ (80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8009960:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009962:	e002      	b.n	800996a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009968:	e12f      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800996a:	e12e      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800996c:	2300      	movs	r3, #0
 800996e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009970:	e12b      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009976:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800997a:	430b      	orrs	r3, r1
 800997c:	d13c      	bne.n	80099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800997e:	4b1a      	ldr	r3, [pc, #104]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8009980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009986:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800998a:	2b00      	cmp	r3, #0
 800998c:	d004      	beq.n	8009998 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800998e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009994:	d012      	beq.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8009996:	e023      	b.n	80099e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009998:	4b13      	ldr	r3, [pc, #76]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099a4:	d107      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 fbda 	bl	800a164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099b4:	e109      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099ba:	e106      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099bc:	4b0a      	ldr	r3, [pc, #40]	@ (80099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099c8:	d107      	bne.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ca:	f107 0318 	add.w	r3, r7, #24
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f920 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099d8:	e0f7      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099de:	e0f4      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099e4:	e0f1      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80099e6:	bf00      	nop
 80099e8:	58024400 	.word	0x58024400
 80099ec:	03d09000 	.word	0x03d09000
 80099f0:	003d0900 	.word	0x003d0900
 80099f4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80099f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099fc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009a00:	430b      	orrs	r3, r1
 8009a02:	f040 8091 	bne.w	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a06:	4b73      	ldr	r3, [pc, #460]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a0a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009a0e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a12:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a16:	f000 8081 	beq.w	8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8009a20:	d87f      	bhi.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a28:	d06b      	beq.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8009a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009a30:	d877      	bhi.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a38:	d056      	beq.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8009a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a40:	d86f      	bhi.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a44:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a48:	d03b      	beq.n	8009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009a50:	d867      	bhi.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a58:	d021      	beq.n	8009a9e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a60:	d85f      	bhi.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8009a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d004      	beq.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a6e:	d004      	beq.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8009a70:	e057      	b.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009a72:	f000 f8b9 	bl	8009be8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009a76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009a78:	e0a7      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a7a:	4b56      	ldr	r3, [pc, #344]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a86:	d107      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a88:	f107 0318 	add.w	r3, r7, #24
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 f8c1 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a96:	e098      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a9c:	e095      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a9e:	4b4d      	ldr	r3, [pc, #308]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009aaa:	d107      	bne.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009aac:	f107 030c 	add.w	r3, r7, #12
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 fa03 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009aba:	e086      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ac0:	e083      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ac2:	4b44      	ldr	r3, [pc, #272]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 0304 	and.w	r3, r3, #4
 8009aca:	2b04      	cmp	r3, #4
 8009acc:	d109      	bne.n	8009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ace:	4b41      	ldr	r3, [pc, #260]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	08db      	lsrs	r3, r3, #3
 8009ad4:	f003 0303 	and.w	r3, r3, #3
 8009ad8:	4a3f      	ldr	r2, [pc, #252]	@ (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009ada:	fa22 f303 	lsr.w	r3, r2, r3
 8009ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ae0:	e073      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ae6:	e070      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009af4:	d102      	bne.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8009af6:	4b39      	ldr	r3, [pc, #228]	@ (8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8009af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009afa:	e066      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009afc:	2300      	movs	r3, #0
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b00:	e063      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b02:	4b34      	ldr	r3, [pc, #208]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b0e:	d102      	bne.n	8009b16 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8009b10:	4b33      	ldr	r3, [pc, #204]	@ (8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b14:	e059      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1a:	e056      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009b1c:	4b31      	ldr	r3, [pc, #196]	@ (8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8009b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b20:	e053      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009b22:	2300      	movs	r3, #0
 8009b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b26:	e050      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b2c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009b30:	430b      	orrs	r3, r1
 8009b32:	d148      	bne.n	8009bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009b34:	4b27      	ldr	r3, [pc, #156]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b3c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b44:	d02a      	beq.n	8009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8009b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b4c:	d838      	bhi.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d004      	beq.n	8009b5e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b5a:	d00d      	beq.n	8009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009b5c:	e030      	b.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b6a:	d102      	bne.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8009b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b70:	e02b      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b76:	e028      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009b78:	4b16      	ldr	r3, [pc, #88]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009b80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009b84:	d107      	bne.n	8009b96 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 faea 	bl	800a164 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b94:	e019      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009b96:	2300      	movs	r3, #0
 8009b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b9a:	e016      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ba4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ba8:	d107      	bne.n	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009baa:	f107 0318 	add.w	r3, r7, #24
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 f830 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bb8:	e007      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bbe:	e004      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bc4:	e001      	b.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3740      	adds	r7, #64	@ 0x40
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	03d09000 	.word	0x03d09000
 8009bdc:	003d0900 	.word	0x003d0900
 8009be0:	007a1200 	.word	0x007a1200
 8009be4:	00bb8000 	.word	0x00bb8000

08009be8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009bec:	f7fe f90a 	bl	8007e04 <HAL_RCC_GetHCLKFreq>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	4b06      	ldr	r3, [pc, #24]	@ (8009c0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009bf4:	6a1b      	ldr	r3, [r3, #32]
 8009bf6:	091b      	lsrs	r3, r3, #4
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	4904      	ldr	r1, [pc, #16]	@ (8009c10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009bfe:	5ccb      	ldrb	r3, [r1, r3]
 8009c00:	f003 031f 	and.w	r3, r3, #31
 8009c04:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	58024400 	.word	0x58024400
 8009c10:	0800e708 	.word	0x0800e708

08009c14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b089      	sub	sp, #36	@ 0x24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c1c:	4ba1      	ldr	r3, [pc, #644]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c20:	f003 0303 	and.w	r3, r3, #3
 8009c24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009c26:	4b9f      	ldr	r3, [pc, #636]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c2a:	0b1b      	lsrs	r3, r3, #12
 8009c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009c30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009c32:	4b9c      	ldr	r3, [pc, #624]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c36:	091b      	lsrs	r3, r3, #4
 8009c38:	f003 0301 	and.w	r3, r3, #1
 8009c3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009c3e:	4b99      	ldr	r3, [pc, #612]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c42:	08db      	lsrs	r3, r3, #3
 8009c44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c48:	693a      	ldr	r2, [r7, #16]
 8009c4a:	fb02 f303 	mul.w	r3, r2, r3
 8009c4e:	ee07 3a90 	vmov	s15, r3
 8009c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f000 8111 	beq.w	8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009c62:	69bb      	ldr	r3, [r7, #24]
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	f000 8083 	beq.w	8009d70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	f200 80a1 	bhi.w	8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d056      	beq.n	8009d2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c7e:	e099      	b.n	8009db4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c80:	4b88      	ldr	r3, [pc, #544]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0320 	and.w	r3, r3, #32
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d02d      	beq.n	8009ce8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c8c:	4b85      	ldr	r3, [pc, #532]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	08db      	lsrs	r3, r3, #3
 8009c92:	f003 0303 	and.w	r3, r3, #3
 8009c96:	4a84      	ldr	r2, [pc, #528]	@ (8009ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c98:	fa22 f303 	lsr.w	r3, r2, r3
 8009c9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	ee07 3a90 	vmov	s15, r3
 8009ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	ee07 3a90 	vmov	s15, r3
 8009cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cb6:	4b7b      	ldr	r3, [pc, #492]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cbe:	ee07 3a90 	vmov	s15, r3
 8009cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009ce6:	e087      	b.n	8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	ee07 3a90 	vmov	s15, r3
 8009cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d2a:	e065      	b.n	8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	ee07 3a90 	vmov	s15, r3
 8009d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d3e:	4b59      	ldr	r3, [pc, #356]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d6e:	e043      	b.n	8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d82:	4b48      	ldr	r3, [pc, #288]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009da2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009da6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009db2:	e021      	b.n	8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	ee07 3a90 	vmov	s15, r3
 8009dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dc6:	4b37      	ldr	r3, [pc, #220]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009eac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009df6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009df8:	4b2a      	ldr	r3, [pc, #168]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfc:	0a5b      	lsrs	r3, r3, #9
 8009dfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e1e:	ee17 2a90 	vmov	r2, s15
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009e26:	4b1f      	ldr	r3, [pc, #124]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e2a:	0c1b      	lsrs	r3, r3, #16
 8009e2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e30:	ee07 3a90 	vmov	s15, r3
 8009e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e4c:	ee17 2a90 	vmov	r2, s15
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009e54:	4b13      	ldr	r3, [pc, #76]	@ (8009ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e58:	0e1b      	lsrs	r3, r3, #24
 8009e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e5e:	ee07 3a90 	vmov	s15, r3
 8009e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e7a:	ee17 2a90 	vmov	r2, s15
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e82:	e008      	b.n	8009e96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	609a      	str	r2, [r3, #8]
}
 8009e96:	bf00      	nop
 8009e98:	3724      	adds	r7, #36	@ 0x24
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	58024400 	.word	0x58024400
 8009ea8:	03d09000 	.word	0x03d09000
 8009eac:	46000000 	.word	0x46000000
 8009eb0:	4c742400 	.word	0x4c742400
 8009eb4:	4a742400 	.word	0x4a742400
 8009eb8:	4af42400 	.word	0x4af42400

08009ebc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b089      	sub	sp, #36	@ 0x24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009ec4:	4ba1      	ldr	r3, [pc, #644]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec8:	f003 0303 	and.w	r3, r3, #3
 8009ecc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009ece:	4b9f      	ldr	r3, [pc, #636]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed2:	0d1b      	lsrs	r3, r3, #20
 8009ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ed8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009eda:	4b9c      	ldr	r3, [pc, #624]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ede:	0a1b      	lsrs	r3, r3, #8
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009ee6:	4b99      	ldr	r3, [pc, #612]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009eea:	08db      	lsrs	r3, r3, #3
 8009eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	fb02 f303 	mul.w	r3, r2, r3
 8009ef6:	ee07 3a90 	vmov	s15, r3
 8009efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009efe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8111 	beq.w	800a12c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	2b02      	cmp	r3, #2
 8009f0e:	f000 8083 	beq.w	800a018 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	f200 80a1 	bhi.w	800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d003      	beq.n	8009f28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d056      	beq.n	8009fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009f26:	e099      	b.n	800a05c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f28:	4b88      	ldr	r3, [pc, #544]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0320 	and.w	r3, r3, #32
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d02d      	beq.n	8009f90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f34:	4b85      	ldr	r3, [pc, #532]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	08db      	lsrs	r3, r3, #3
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	4a84      	ldr	r2, [pc, #528]	@ (800a150 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	ee07 3a90 	vmov	s15, r3
 8009f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	ee07 3a90 	vmov	s15, r3
 8009f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f66:	ee07 3a90 	vmov	s15, r3
 8009f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009f8e:	e087      	b.n	800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	ee07 3a90 	vmov	s15, r3
 8009f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a158 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fa2:	4b6a      	ldr	r3, [pc, #424]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009faa:	ee07 3a90 	vmov	s15, r3
 8009fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009fd2:	e065      	b.n	800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	ee07 3a90 	vmov	s15, r3
 8009fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fde:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fe6:	4b59      	ldr	r3, [pc, #356]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fee:	ee07 3a90 	vmov	s15, r3
 8009ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ffa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a00a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a00e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a012:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a016:	e043      	b.n	800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	ee07 3a90 	vmov	s15, r3
 800a01e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a022:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02a:	4b48      	ldr	r3, [pc, #288]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a032:	ee07 3a90 	vmov	s15, r3
 800a036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a03a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a03e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a04a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a04e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a056:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a05a:	e021      	b.n	800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	ee07 3a90 	vmov	s15, r3
 800a062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a066:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a15c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a06e:	4b37      	ldr	r3, [pc, #220]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a082:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a154 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a08e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a09a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a09e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a0a0:	4b2a      	ldr	r3, [pc, #168]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0a4:	0a5b      	lsrs	r3, r3, #9
 800a0a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0aa:	ee07 3a90 	vmov	s15, r3
 800a0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0c6:	ee17 2a90 	vmov	r2, s15
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a0ce:	4b1f      	ldr	r3, [pc, #124]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0d2:	0c1b      	lsrs	r3, r3, #16
 800a0d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0d8:	ee07 3a90 	vmov	s15, r3
 800a0dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a0e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0f4:	ee17 2a90 	vmov	r2, s15
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a0fc:	4b13      	ldr	r3, [pc, #76]	@ (800a14c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a100:	0e1b      	lsrs	r3, r3, #24
 800a102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a106:	ee07 3a90 	vmov	s15, r3
 800a10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a10e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a112:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a116:	edd7 6a07 	vldr	s13, [r7, #28]
 800a11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a122:	ee17 2a90 	vmov	r2, s15
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a12a:	e008      	b.n	800a13e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	609a      	str	r2, [r3, #8]
}
 800a13e:	bf00      	nop
 800a140:	3724      	adds	r7, #36	@ 0x24
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	58024400 	.word	0x58024400
 800a150:	03d09000 	.word	0x03d09000
 800a154:	46000000 	.word	0x46000000
 800a158:	4c742400 	.word	0x4c742400
 800a15c:	4a742400 	.word	0x4a742400
 800a160:	4af42400 	.word	0x4af42400

0800a164 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a164:	b480      	push	{r7}
 800a166:	b089      	sub	sp, #36	@ 0x24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a16c:	4ba0      	ldr	r3, [pc, #640]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a16e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a170:	f003 0303 	and.w	r3, r3, #3
 800a174:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a176:	4b9e      	ldr	r3, [pc, #632]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a17a:	091b      	lsrs	r3, r3, #4
 800a17c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a180:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a182:	4b9b      	ldr	r3, [pc, #620]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a18c:	4b98      	ldr	r3, [pc, #608]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a190:	08db      	lsrs	r3, r3, #3
 800a192:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a196:	693a      	ldr	r2, [r7, #16]
 800a198:	fb02 f303 	mul.w	r3, r2, r3
 800a19c:	ee07 3a90 	vmov	s15, r3
 800a1a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1a4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f000 8111 	beq.w	800a3d2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	f000 8083 	beq.w	800a2be <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	f200 80a1 	bhi.w	800a302 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d056      	beq.n	800a27a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a1cc:	e099      	b.n	800a302 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1ce:	4b88      	ldr	r3, [pc, #544]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0320 	and.w	r3, r3, #32
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d02d      	beq.n	800a236 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1da:	4b85      	ldr	r3, [pc, #532]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	08db      	lsrs	r3, r3, #3
 800a1e0:	f003 0303 	and.w	r3, r3, #3
 800a1e4:	4a83      	ldr	r2, [pc, #524]	@ (800a3f4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a1e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ea:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	ee07 3a90 	vmov	s15, r3
 800a1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	ee07 3a90 	vmov	s15, r3
 800a1fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a204:	4b7a      	ldr	r3, [pc, #488]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a20c:	ee07 3a90 	vmov	s15, r3
 800a210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a214:	ed97 6a03 	vldr	s12, [r7, #12]
 800a218:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a21c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a224:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a230:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a234:	e087      	b.n	800a346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	ee07 3a90 	vmov	s15, r3
 800a23c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a240:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a3fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a248:	4b69      	ldr	r3, [pc, #420]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a24a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a24c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a250:	ee07 3a90 	vmov	s15, r3
 800a254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a258:	ed97 6a03 	vldr	s12, [r7, #12]
 800a25c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a260:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a264:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a268:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a26c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a270:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a274:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a278:	e065      	b.n	800a346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	ee07 3a90 	vmov	s15, r3
 800a280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a284:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a400 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a288:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a28c:	4b58      	ldr	r3, [pc, #352]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a290:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a294:	ee07 3a90 	vmov	s15, r3
 800a298:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a29c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2a0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2bc:	e043      	b.n	800a346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	ee07 3a90 	vmov	s15, r3
 800a2c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a404 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a2cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2d0:	4b47      	ldr	r3, [pc, #284]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d8:	ee07 3a90 	vmov	s15, r3
 800a2dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2e4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a300:	e021      	b.n	800a346 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	ee07 3a90 	vmov	s15, r3
 800a308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a30c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a3fc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a310:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a314:	4b36      	ldr	r3, [pc, #216]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a31c:	ee07 3a90 	vmov	s15, r3
 800a320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a324:	ed97 6a03 	vldr	s12, [r7, #12]
 800a328:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a3f8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a32c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a334:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a338:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a340:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a344:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a346:	4b2a      	ldr	r3, [pc, #168]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a34a:	0a5b      	lsrs	r3, r3, #9
 800a34c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a350:	ee07 3a90 	vmov	s15, r3
 800a354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a35c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a360:	edd7 6a07 	vldr	s13, [r7, #28]
 800a364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a36c:	ee17 2a90 	vmov	r2, s15
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a374:	4b1e      	ldr	r3, [pc, #120]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a378:	0c1b      	lsrs	r3, r3, #16
 800a37a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a37e:	ee07 3a90 	vmov	s15, r3
 800a382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a38a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a38e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a39a:	ee17 2a90 	vmov	r2, s15
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a3a2:	4b13      	ldr	r3, [pc, #76]	@ (800a3f0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a6:	0e1b      	lsrs	r3, r3, #24
 800a3a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3ac:	ee07 3a90 	vmov	s15, r3
 800a3b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3c8:	ee17 2a90 	vmov	r2, s15
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a3d0:	e008      	b.n	800a3e4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	609a      	str	r2, [r3, #8]
}
 800a3e4:	bf00      	nop
 800a3e6:	3724      	adds	r7, #36	@ 0x24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	58024400 	.word	0x58024400
 800a3f4:	03d09000 	.word	0x03d09000
 800a3f8:	46000000 	.word	0x46000000
 800a3fc:	4c742400 	.word	0x4c742400
 800a400:	4a742400 	.word	0x4a742400
 800a404:	4af42400 	.word	0x4af42400

0800a408 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800a410:	4b26      	ldr	r3, [pc, #152]	@ (800a4ac <HAL_RCCEx_CRSConfig+0xa4>)
 800a412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a416:	4a25      	ldr	r2, [pc, #148]	@ (800a4ac <HAL_RCCEx_CRSConfig+0xa4>)
 800a418:	f043 0302 	orr.w	r3, r3, #2
 800a41c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800a420:	4b22      	ldr	r3, [pc, #136]	@ (800a4ac <HAL_RCCEx_CRSConfig+0xa4>)
 800a422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a426:	4a21      	ldr	r2, [pc, #132]	@ (800a4ac <HAL_RCCEx_CRSConfig+0xa4>)
 800a428:	f023 0302 	bic.w	r3, r3, #2
 800a42c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800a430:	f7f7 fd9c 	bl	8001f6c <HAL_GetREVID>
 800a434:	4603      	mov	r3, r0
 800a436:	f241 0203 	movw	r2, #4099	@ 0x1003
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d80b      	bhi.n	800a456 <HAL_RCCEx_CRSConfig+0x4e>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a446:	d106      	bne.n	800a456 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	4313      	orrs	r3, r2
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	e008      	b.n	800a468 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	431a      	orrs	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	4313      	orrs	r3, r2
 800a466:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	4313      	orrs	r3, r2
 800a470:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	041b      	lsls	r3, r3, #16
 800a478:	68fa      	ldr	r2, [r7, #12]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800a47e:	4a0c      	ldr	r2, [pc, #48]	@ (800a4b0 <HAL_RCCEx_CRSConfig+0xa8>)
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800a484:	4b0a      	ldr	r3, [pc, #40]	@ (800a4b0 <HAL_RCCEx_CRSConfig+0xa8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	695b      	ldr	r3, [r3, #20]
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	4907      	ldr	r1, [pc, #28]	@ (800a4b0 <HAL_RCCEx_CRSConfig+0xa8>)
 800a494:	4313      	orrs	r3, r2
 800a496:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800a498:	4b05      	ldr	r3, [pc, #20]	@ (800a4b0 <HAL_RCCEx_CRSConfig+0xa8>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a04      	ldr	r2, [pc, #16]	@ (800a4b0 <HAL_RCCEx_CRSConfig+0xa8>)
 800a49e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a4a2:	6013      	str	r3, [r2, #0]
}
 800a4a4:	bf00      	nop
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}
 800a4ac:	58024400 	.word	0x58024400
 800a4b0:	40008400 	.word	0x40008400

0800a4b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4c2:	4b53      	ldr	r3, [pc, #332]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d101      	bne.n	800a4d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e099      	b.n	800a606 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4d2:	4b4f      	ldr	r3, [pc, #316]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a4e      	ldr	r2, [pc, #312]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a4d8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4de:	f7f7 fd39 	bl	8001f54 <HAL_GetTick>
 800a4e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4e4:	e008      	b.n	800a4f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4e6:	f7f7 fd35 	bl	8001f54 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	d901      	bls.n	800a4f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e086      	b.n	800a606 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4f8:	4b45      	ldr	r3, [pc, #276]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1f0      	bne.n	800a4e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a504:	4b42      	ldr	r3, [pc, #264]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a508:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	031b      	lsls	r3, r3, #12
 800a512:	493f      	ldr	r1, [pc, #252]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a514:	4313      	orrs	r3, r2
 800a516:	628b      	str	r3, [r1, #40]	@ 0x28
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	3b01      	subs	r3, #1
 800a51e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	3b01      	subs	r3, #1
 800a528:	025b      	lsls	r3, r3, #9
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	431a      	orrs	r2, r3
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	3b01      	subs	r3, #1
 800a534:	041b      	lsls	r3, r3, #16
 800a536:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a53a:	431a      	orrs	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	3b01      	subs	r3, #1
 800a542:	061b      	lsls	r3, r3, #24
 800a544:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a548:	4931      	ldr	r1, [pc, #196]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a54a:	4313      	orrs	r3, r2
 800a54c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a54e:	4b30      	ldr	r3, [pc, #192]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a552:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	492d      	ldr	r1, [pc, #180]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a55c:	4313      	orrs	r3, r2
 800a55e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a560:	4b2b      	ldr	r3, [pc, #172]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a564:	f023 0220 	bic.w	r2, r3, #32
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	4928      	ldr	r1, [pc, #160]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a572:	4b27      	ldr	r3, [pc, #156]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a576:	4a26      	ldr	r2, [pc, #152]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a578:	f023 0310 	bic.w	r3, r3, #16
 800a57c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a57e:	4b24      	ldr	r3, [pc, #144]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a582:	4b24      	ldr	r3, [pc, #144]	@ (800a614 <RCCEx_PLL2_Config+0x160>)
 800a584:	4013      	ands	r3, r2
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	69d2      	ldr	r2, [r2, #28]
 800a58a:	00d2      	lsls	r2, r2, #3
 800a58c:	4920      	ldr	r1, [pc, #128]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a592:	4b1f      	ldr	r3, [pc, #124]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a596:	4a1e      	ldr	r2, [pc, #120]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a598:	f043 0310 	orr.w	r3, r3, #16
 800a59c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d106      	bne.n	800a5b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a5a4:	4b1a      	ldr	r3, [pc, #104]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a8:	4a19      	ldr	r2, [pc, #100]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a5ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5b0:	e00f      	b.n	800a5d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d106      	bne.n	800a5c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a5b8:	4b15      	ldr	r3, [pc, #84]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5bc:	4a14      	ldr	r2, [pc, #80]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a5c4:	e005      	b.n	800a5d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a5c6:	4b12      	ldr	r3, [pc, #72]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ca:	4a11      	ldr	r2, [pc, #68]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a0e      	ldr	r2, [pc, #56]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5de:	f7f7 fcb9 	bl	8001f54 <HAL_GetTick>
 800a5e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5e4:	e008      	b.n	800a5f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a5e6:	f7f7 fcb5 	bl	8001f54 <HAL_GetTick>
 800a5ea:	4602      	mov	r2, r0
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d901      	bls.n	800a5f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	e006      	b.n	800a606 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5f8:	4b05      	ldr	r3, [pc, #20]	@ (800a610 <RCCEx_PLL2_Config+0x15c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d0f0      	beq.n	800a5e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a604:	7bfb      	ldrb	r3, [r7, #15]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3710      	adds	r7, #16
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	58024400 	.word	0x58024400
 800a614:	ffff0007 	.word	0xffff0007

0800a618 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a622:	2300      	movs	r3, #0
 800a624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a626:	4b53      	ldr	r3, [pc, #332]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d101      	bne.n	800a636 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	e099      	b.n	800a76a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a636:	4b4f      	ldr	r3, [pc, #316]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a4e      	ldr	r2, [pc, #312]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a63c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a642:	f7f7 fc87 	bl	8001f54 <HAL_GetTick>
 800a646:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a648:	e008      	b.n	800a65c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a64a:	f7f7 fc83 	bl	8001f54 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d901      	bls.n	800a65c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e086      	b.n	800a76a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a65c:	4b45      	ldr	r3, [pc, #276]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1f0      	bne.n	800a64a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a668:	4b42      	ldr	r3, [pc, #264]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a66c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	051b      	lsls	r3, r3, #20
 800a676:	493f      	ldr	r1, [pc, #252]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a678:	4313      	orrs	r3, r2
 800a67a:	628b      	str	r3, [r1, #40]	@ 0x28
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	3b01      	subs	r3, #1
 800a682:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	3b01      	subs	r3, #1
 800a68c:	025b      	lsls	r3, r3, #9
 800a68e:	b29b      	uxth	r3, r3
 800a690:	431a      	orrs	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	3b01      	subs	r3, #1
 800a698:	041b      	lsls	r3, r3, #16
 800a69a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a69e:	431a      	orrs	r2, r3
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	061b      	lsls	r3, r3, #24
 800a6a8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a6ac:	4931      	ldr	r1, [pc, #196]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a6b2:	4b30      	ldr	r3, [pc, #192]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	492d      	ldr	r1, [pc, #180]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a6c4:	4b2b      	ldr	r3, [pc, #172]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	4928      	ldr	r1, [pc, #160]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6d6:	4b27      	ldr	r3, [pc, #156]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6da:	4a26      	ldr	r2, [pc, #152]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a6e2:	4b24      	ldr	r3, [pc, #144]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6e6:	4b24      	ldr	r3, [pc, #144]	@ (800a778 <RCCEx_PLL3_Config+0x160>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	69d2      	ldr	r2, [r2, #28]
 800a6ee:	00d2      	lsls	r2, r2, #3
 800a6f0:	4920      	ldr	r1, [pc, #128]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a6f6:	4b1f      	ldr	r3, [pc, #124]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a6fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a700:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d106      	bne.n	800a716 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a708:	4b1a      	ldr	r3, [pc, #104]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a70a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70c:	4a19      	ldr	r2, [pc, #100]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a70e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a712:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a714:	e00f      	b.n	800a736 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d106      	bne.n	800a72a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a71c:	4b15      	ldr	r3, [pc, #84]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a720:	4a14      	ldr	r2, [pc, #80]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a722:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a726:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a728:	e005      	b.n	800a736 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a72a:	4b12      	ldr	r3, [pc, #72]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a72e:	4a11      	ldr	r2, [pc, #68]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a730:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a734:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a736:	4b0f      	ldr	r3, [pc, #60]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a0e      	ldr	r2, [pc, #56]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a73c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a740:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a742:	f7f7 fc07 	bl	8001f54 <HAL_GetTick>
 800a746:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a748:	e008      	b.n	800a75c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a74a:	f7f7 fc03 	bl	8001f54 <HAL_GetTick>
 800a74e:	4602      	mov	r2, r0
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	2b02      	cmp	r3, #2
 800a756:	d901      	bls.n	800a75c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a758:	2303      	movs	r3, #3
 800a75a:	e006      	b.n	800a76a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a75c:	4b05      	ldr	r3, [pc, #20]	@ (800a774 <RCCEx_PLL3_Config+0x15c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a764:	2b00      	cmp	r3, #0
 800a766:	d0f0      	beq.n	800a74a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a768:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	58024400 	.word	0x58024400
 800a778:	ffff0007 	.word	0xffff0007

0800a77c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d101      	bne.n	800a78e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e049      	b.n	800a822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b00      	cmp	r3, #0
 800a798:	d106      	bne.n	800a7a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7f7 f9ca 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2202      	movs	r2, #2
 800a7ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	4619      	mov	r1, r3
 800a7ba:	4610      	mov	r0, r2
 800a7bc:	f000 f99e 	bl	800aafc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
	...

0800a82c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d001      	beq.n	800a844 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a840:	2301      	movs	r3, #1
 800a842:	e04c      	b.n	800a8de <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2202      	movs	r2, #2
 800a848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a26      	ldr	r2, [pc, #152]	@ (800a8ec <HAL_TIM_Base_Start+0xc0>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d022      	beq.n	800a89c <HAL_TIM_Base_Start+0x70>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a85e:	d01d      	beq.n	800a89c <HAL_TIM_Base_Start+0x70>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a22      	ldr	r2, [pc, #136]	@ (800a8f0 <HAL_TIM_Base_Start+0xc4>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d018      	beq.n	800a89c <HAL_TIM_Base_Start+0x70>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a21      	ldr	r2, [pc, #132]	@ (800a8f4 <HAL_TIM_Base_Start+0xc8>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d013      	beq.n	800a89c <HAL_TIM_Base_Start+0x70>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a1f      	ldr	r2, [pc, #124]	@ (800a8f8 <HAL_TIM_Base_Start+0xcc>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d00e      	beq.n	800a89c <HAL_TIM_Base_Start+0x70>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a1e      	ldr	r2, [pc, #120]	@ (800a8fc <HAL_TIM_Base_Start+0xd0>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d009      	beq.n	800a89c <HAL_TIM_Base_Start+0x70>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a1c      	ldr	r2, [pc, #112]	@ (800a900 <HAL_TIM_Base_Start+0xd4>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d004      	beq.n	800a89c <HAL_TIM_Base_Start+0x70>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a1b      	ldr	r2, [pc, #108]	@ (800a904 <HAL_TIM_Base_Start+0xd8>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d115      	bne.n	800a8c8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	689a      	ldr	r2, [r3, #8]
 800a8a2:	4b19      	ldr	r3, [pc, #100]	@ (800a908 <HAL_TIM_Base_Start+0xdc>)
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b06      	cmp	r3, #6
 800a8ac:	d015      	beq.n	800a8da <HAL_TIM_Base_Start+0xae>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8b4:	d011      	beq.n	800a8da <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f042 0201 	orr.w	r2, r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8c6:	e008      	b.n	800a8da <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f042 0201 	orr.w	r2, r2, #1
 800a8d6:	601a      	str	r2, [r3, #0]
 800a8d8:	e000      	b.n	800a8dc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8dc:	2300      	movs	r3, #0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	40010000 	.word	0x40010000
 800a8f0:	40000400 	.word	0x40000400
 800a8f4:	40000800 	.word	0x40000800
 800a8f8:	40000c00 	.word	0x40000c00
 800a8fc:	40010400 	.word	0x40010400
 800a900:	40001800 	.word	0x40001800
 800a904:	40014000 	.word	0x40014000
 800a908:	00010007 	.word	0x00010007

0800a90c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a920:	2b01      	cmp	r3, #1
 800a922:	d101      	bne.n	800a928 <HAL_TIM_ConfigClockSource+0x1c>
 800a924:	2302      	movs	r3, #2
 800a926:	e0dc      	b.n	800aae2 <HAL_TIM_ConfigClockSource+0x1d6>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2202      	movs	r2, #2
 800a934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	4b6a      	ldr	r3, [pc, #424]	@ (800aaec <HAL_TIM_ConfigClockSource+0x1e0>)
 800a944:	4013      	ands	r3, r2
 800a946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a94e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a64      	ldr	r2, [pc, #400]	@ (800aaf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	f000 80a9 	beq.w	800aab6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a964:	4a62      	ldr	r2, [pc, #392]	@ (800aaf0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a966:	4293      	cmp	r3, r2
 800a968:	f200 80ae 	bhi.w	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a96c:	4a61      	ldr	r2, [pc, #388]	@ (800aaf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	f000 80a1 	beq.w	800aab6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a974:	4a5f      	ldr	r2, [pc, #380]	@ (800aaf4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a976:	4293      	cmp	r3, r2
 800a978:	f200 80a6 	bhi.w	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a97c:	4a5e      	ldr	r2, [pc, #376]	@ (800aaf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	f000 8099 	beq.w	800aab6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a984:	4a5c      	ldr	r2, [pc, #368]	@ (800aaf8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a986:	4293      	cmp	r3, r2
 800a988:	f200 809e 	bhi.w	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a98c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a990:	f000 8091 	beq.w	800aab6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a994:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a998:	f200 8096 	bhi.w	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a99c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9a0:	f000 8089 	beq.w	800aab6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a9a8:	f200 808e 	bhi.w	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9b0:	d03e      	beq.n	800aa30 <HAL_TIM_ConfigClockSource+0x124>
 800a9b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9b6:	f200 8087 	bhi.w	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9be:	f000 8086 	beq.w	800aace <HAL_TIM_ConfigClockSource+0x1c2>
 800a9c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a9c6:	d87f      	bhi.n	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9c8:	2b70      	cmp	r3, #112	@ 0x70
 800a9ca:	d01a      	beq.n	800aa02 <HAL_TIM_ConfigClockSource+0xf6>
 800a9cc:	2b70      	cmp	r3, #112	@ 0x70
 800a9ce:	d87b      	bhi.n	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d0:	2b60      	cmp	r3, #96	@ 0x60
 800a9d2:	d050      	beq.n	800aa76 <HAL_TIM_ConfigClockSource+0x16a>
 800a9d4:	2b60      	cmp	r3, #96	@ 0x60
 800a9d6:	d877      	bhi.n	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9d8:	2b50      	cmp	r3, #80	@ 0x50
 800a9da:	d03c      	beq.n	800aa56 <HAL_TIM_ConfigClockSource+0x14a>
 800a9dc:	2b50      	cmp	r3, #80	@ 0x50
 800a9de:	d873      	bhi.n	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e0:	2b40      	cmp	r3, #64	@ 0x40
 800a9e2:	d058      	beq.n	800aa96 <HAL_TIM_ConfigClockSource+0x18a>
 800a9e4:	2b40      	cmp	r3, #64	@ 0x40
 800a9e6:	d86f      	bhi.n	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9e8:	2b30      	cmp	r3, #48	@ 0x30
 800a9ea:	d064      	beq.n	800aab6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9ec:	2b30      	cmp	r3, #48	@ 0x30
 800a9ee:	d86b      	bhi.n	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f0:	2b20      	cmp	r3, #32
 800a9f2:	d060      	beq.n	800aab6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9f4:	2b20      	cmp	r3, #32
 800a9f6:	d867      	bhi.n	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d05c      	beq.n	800aab6 <HAL_TIM_ConfigClockSource+0x1aa>
 800a9fc:	2b10      	cmp	r3, #16
 800a9fe:	d05a      	beq.n	800aab6 <HAL_TIM_ConfigClockSource+0x1aa>
 800aa00:	e062      	b.n	800aac8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa12:	f000 f997 	bl	800ad44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aa24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	609a      	str	r2, [r3, #8]
      break;
 800aa2e:	e04f      	b.n	800aad0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa40:	f000 f980 	bl	800ad44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	689a      	ldr	r2, [r3, #8]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa52:	609a      	str	r2, [r3, #8]
      break;
 800aa54:	e03c      	b.n	800aad0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa62:	461a      	mov	r2, r3
 800aa64:	f000 f8f0 	bl	800ac48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2150      	movs	r1, #80	@ 0x50
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f000 f94a 	bl	800ad08 <TIM_ITRx_SetConfig>
      break;
 800aa74:	e02c      	b.n	800aad0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa82:	461a      	mov	r2, r3
 800aa84:	f000 f90f 	bl	800aca6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2160      	movs	r1, #96	@ 0x60
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 f93a 	bl	800ad08 <TIM_ITRx_SetConfig>
      break;
 800aa94:	e01c      	b.n	800aad0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f000 f8d0 	bl	800ac48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2140      	movs	r1, #64	@ 0x40
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 f92a 	bl	800ad08 <TIM_ITRx_SetConfig>
      break;
 800aab4:	e00c      	b.n	800aad0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4619      	mov	r1, r3
 800aac0:	4610      	mov	r0, r2
 800aac2:	f000 f921 	bl	800ad08 <TIM_ITRx_SetConfig>
      break;
 800aac6:	e003      	b.n	800aad0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800aac8:	2301      	movs	r3, #1
 800aaca:	73fb      	strb	r3, [r7, #15]
      break;
 800aacc:	e000      	b.n	800aad0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800aace:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3710      	adds	r7, #16
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	ffceff88 	.word	0xffceff88
 800aaf0:	00100040 	.word	0x00100040
 800aaf4:	00100030 	.word	0x00100030
 800aaf8:	00100020 	.word	0x00100020

0800aafc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a46      	ldr	r2, [pc, #280]	@ (800ac28 <TIM_Base_SetConfig+0x12c>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d013      	beq.n	800ab3c <TIM_Base_SetConfig+0x40>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab1a:	d00f      	beq.n	800ab3c <TIM_Base_SetConfig+0x40>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a43      	ldr	r2, [pc, #268]	@ (800ac2c <TIM_Base_SetConfig+0x130>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d00b      	beq.n	800ab3c <TIM_Base_SetConfig+0x40>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a42      	ldr	r2, [pc, #264]	@ (800ac30 <TIM_Base_SetConfig+0x134>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d007      	beq.n	800ab3c <TIM_Base_SetConfig+0x40>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4a41      	ldr	r2, [pc, #260]	@ (800ac34 <TIM_Base_SetConfig+0x138>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d003      	beq.n	800ab3c <TIM_Base_SetConfig+0x40>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a40      	ldr	r2, [pc, #256]	@ (800ac38 <TIM_Base_SetConfig+0x13c>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d108      	bne.n	800ab4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a35      	ldr	r2, [pc, #212]	@ (800ac28 <TIM_Base_SetConfig+0x12c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d01f      	beq.n	800ab96 <TIM_Base_SetConfig+0x9a>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab5c:	d01b      	beq.n	800ab96 <TIM_Base_SetConfig+0x9a>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a32      	ldr	r2, [pc, #200]	@ (800ac2c <TIM_Base_SetConfig+0x130>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d017      	beq.n	800ab96 <TIM_Base_SetConfig+0x9a>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4a31      	ldr	r2, [pc, #196]	@ (800ac30 <TIM_Base_SetConfig+0x134>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d013      	beq.n	800ab96 <TIM_Base_SetConfig+0x9a>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4a30      	ldr	r2, [pc, #192]	@ (800ac34 <TIM_Base_SetConfig+0x138>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d00f      	beq.n	800ab96 <TIM_Base_SetConfig+0x9a>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a2f      	ldr	r2, [pc, #188]	@ (800ac38 <TIM_Base_SetConfig+0x13c>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d00b      	beq.n	800ab96 <TIM_Base_SetConfig+0x9a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a2e      	ldr	r2, [pc, #184]	@ (800ac3c <TIM_Base_SetConfig+0x140>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d007      	beq.n	800ab96 <TIM_Base_SetConfig+0x9a>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a2d      	ldr	r2, [pc, #180]	@ (800ac40 <TIM_Base_SetConfig+0x144>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d003      	beq.n	800ab96 <TIM_Base_SetConfig+0x9a>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a2c      	ldr	r2, [pc, #176]	@ (800ac44 <TIM_Base_SetConfig+0x148>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d108      	bne.n	800aba8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	4313      	orrs	r3, r2
 800aba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	689a      	ldr	r2, [r3, #8]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	4a16      	ldr	r2, [pc, #88]	@ (800ac28 <TIM_Base_SetConfig+0x12c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d00f      	beq.n	800abf4 <TIM_Base_SetConfig+0xf8>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a18      	ldr	r2, [pc, #96]	@ (800ac38 <TIM_Base_SetConfig+0x13c>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d00b      	beq.n	800abf4 <TIM_Base_SetConfig+0xf8>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	4a17      	ldr	r2, [pc, #92]	@ (800ac3c <TIM_Base_SetConfig+0x140>)
 800abe0:	4293      	cmp	r3, r2
 800abe2:	d007      	beq.n	800abf4 <TIM_Base_SetConfig+0xf8>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	4a16      	ldr	r2, [pc, #88]	@ (800ac40 <TIM_Base_SetConfig+0x144>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d003      	beq.n	800abf4 <TIM_Base_SetConfig+0xf8>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	4a15      	ldr	r2, [pc, #84]	@ (800ac44 <TIM_Base_SetConfig+0x148>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d103      	bne.n	800abfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	691a      	ldr	r2, [r3, #16]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2201      	movs	r2, #1
 800ac00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b01      	cmp	r3, #1
 800ac0c:	d105      	bne.n	800ac1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f023 0201 	bic.w	r2, r3, #1
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	611a      	str	r2, [r3, #16]
  }
}
 800ac1a:	bf00      	nop
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	40010000 	.word	0x40010000
 800ac2c:	40000400 	.word	0x40000400
 800ac30:	40000800 	.word	0x40000800
 800ac34:	40000c00 	.word	0x40000c00
 800ac38:	40010400 	.word	0x40010400
 800ac3c:	40014000 	.word	0x40014000
 800ac40:	40014400 	.word	0x40014400
 800ac44:	40014800 	.word	0x40014800

0800ac48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b087      	sub	sp, #28
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	6a1b      	ldr	r3, [r3, #32]
 800ac58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a1b      	ldr	r3, [r3, #32]
 800ac5e:	f023 0201 	bic.w	r2, r3, #1
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	011b      	lsls	r3, r3, #4
 800ac78:	693a      	ldr	r2, [r7, #16]
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f023 030a 	bic.w	r3, r3, #10
 800ac84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac86:	697a      	ldr	r2, [r7, #20]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	697a      	ldr	r2, [r7, #20]
 800ac98:	621a      	str	r2, [r3, #32]
}
 800ac9a:	bf00      	nop
 800ac9c:	371c      	adds	r7, #28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aca6:	b480      	push	{r7}
 800aca8:	b087      	sub	sp, #28
 800acaa:	af00      	add	r7, sp, #0
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	f023 0210 	bic.w	r2, r3, #16
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	699b      	ldr	r3, [r3, #24]
 800acc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800acd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	031b      	lsls	r3, r3, #12
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	4313      	orrs	r3, r2
 800acda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ace2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	011b      	lsls	r3, r3, #4
 800ace8:	697a      	ldr	r2, [r7, #20]
 800acea:	4313      	orrs	r3, r2
 800acec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	621a      	str	r2, [r3, #32]
}
 800acfa:	bf00      	nop
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4b09      	ldr	r3, [pc, #36]	@ (800ad40 <TIM_ITRx_SetConfig+0x38>)
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	f043 0307 	orr.w	r3, r3, #7
 800ad2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	609a      	str	r2, [r3, #8]
}
 800ad32:	bf00      	nop
 800ad34:	3714      	adds	r7, #20
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	ffcfff8f 	.word	0xffcfff8f

0800ad44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	021a      	lsls	r2, r3, #8
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	431a      	orrs	r2, r3
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	697a      	ldr	r2, [r7, #20]
 800ad76:	609a      	str	r2, [r3, #8]
}
 800ad78:	bf00      	nop
 800ad7a:	371c      	adds	r7, #28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr

0800ad84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b085      	sub	sp, #20
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad98:	2302      	movs	r3, #2
 800ad9a:	e06d      	b.n	800ae78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2201      	movs	r2, #1
 800ada0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2202      	movs	r2, #2
 800ada8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a30      	ldr	r2, [pc, #192]	@ (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d004      	beq.n	800add0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a2f      	ldr	r2, [pc, #188]	@ (800ae88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d108      	bne.n	800ade2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800add6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	68fa      	ldr	r2, [r7, #12]
 800adde:	4313      	orrs	r3, r2
 800ade0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a20      	ldr	r2, [pc, #128]	@ (800ae84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d022      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae0e:	d01d      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a1d      	ldr	r2, [pc, #116]	@ (800ae8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d018      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a1c      	ldr	r2, [pc, #112]	@ (800ae90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d013      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a1a      	ldr	r2, [pc, #104]	@ (800ae94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d00e      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a15      	ldr	r2, [pc, #84]	@ (800ae88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d009      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a16      	ldr	r2, [pc, #88]	@ (800ae98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d004      	beq.n	800ae4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a15      	ldr	r2, [pc, #84]	@ (800ae9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d10c      	bne.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68ba      	ldr	r2, [r7, #8]
 800ae64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2201      	movs	r2, #1
 800ae6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr
 800ae84:	40010000 	.word	0x40010000
 800ae88:	40010400 	.word	0x40010400
 800ae8c:	40000400 	.word	0x40000400
 800ae90:	40000800 	.word	0x40000800
 800ae94:	40000c00 	.word	0x40000c00
 800ae98:	40001800 	.word	0x40001800
 800ae9c:	40014000 	.word	0x40014000

0800aea0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e042      	b.n	800af38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d106      	bne.n	800aeca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7f6 fe59 	bl	8001b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2224      	movs	r2, #36	@ 0x24
 800aece:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f022 0201 	bic.w	r2, r2, #1
 800aee0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d002      	beq.n	800aef0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f001 fafc 	bl	800c4e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fc8d 	bl	800b810 <UART_SetConfig>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d101      	bne.n	800af00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e01b      	b.n	800af38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	685a      	ldr	r2, [r3, #4]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800af0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800af1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f042 0201 	orr.w	r2, r2, #1
 800af2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 fb7b 	bl	800c62c <UART_CheckIdleState>
 800af36:	4603      	mov	r3, r0
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b08a      	sub	sp, #40	@ 0x28
 800af44:	af02      	add	r7, sp, #8
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	603b      	str	r3, [r7, #0]
 800af4c:	4613      	mov	r3, r2
 800af4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800af56:	2b20      	cmp	r3, #32
 800af58:	d17b      	bne.n	800b052 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <HAL_UART_Transmit+0x26>
 800af60:	88fb      	ldrh	r3, [r7, #6]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e074      	b.n	800b054 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2221      	movs	r2, #33	@ 0x21
 800af76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af7a:	f7f6 ffeb 	bl	8001f54 <HAL_GetTick>
 800af7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	88fa      	ldrh	r2, [r7, #6]
 800af84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	88fa      	ldrh	r2, [r7, #6]
 800af8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af98:	d108      	bne.n	800afac <HAL_UART_Transmit+0x6c>
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d104      	bne.n	800afac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	61bb      	str	r3, [r7, #24]
 800afaa:	e003      	b.n	800afb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800afb4:	e030      	b.n	800b018 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	2200      	movs	r2, #0
 800afbe:	2180      	movs	r1, #128	@ 0x80
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f001 fbdd 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d005      	beq.n	800afd8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2220      	movs	r2, #32
 800afd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800afd4:	2303      	movs	r3, #3
 800afd6:	e03d      	b.n	800b054 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10b      	bne.n	800aff6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800afde:	69bb      	ldr	r3, [r7, #24]
 800afe0:	881b      	ldrh	r3, [r3, #0]
 800afe2:	461a      	mov	r2, r3
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800afee:	69bb      	ldr	r3, [r7, #24]
 800aff0:	3302      	adds	r3, #2
 800aff2:	61bb      	str	r3, [r7, #24]
 800aff4:	e007      	b.n	800b006 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	781a      	ldrb	r2, [r3, #0]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	3301      	adds	r3, #1
 800b004:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	3b01      	subs	r3, #1
 800b010:	b29a      	uxth	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b01e:	b29b      	uxth	r3, r3
 800b020:	2b00      	cmp	r3, #0
 800b022:	d1c8      	bne.n	800afb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2200      	movs	r2, #0
 800b02c:	2140      	movs	r1, #64	@ 0x40
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f001 fba6 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	2220      	movs	r2, #32
 800b03e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e006      	b.n	800b054 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2220      	movs	r2, #32
 800b04a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b04e:	2300      	movs	r3, #0
 800b050:	e000      	b.n	800b054 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b052:	2302      	movs	r3, #2
  }
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b0ba      	sub	sp, #232	@ 0xe8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	69db      	ldr	r3, [r3, #28]
 800b06a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b082:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b086:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b08a:	4013      	ands	r3, r2
 800b08c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b090:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b094:	2b00      	cmp	r3, #0
 800b096:	d11b      	bne.n	800b0d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b09c:	f003 0320 	and.w	r3, r3, #32
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d015      	beq.n	800b0d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0a8:	f003 0320 	and.w	r3, r3, #32
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d105      	bne.n	800b0bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d009      	beq.n	800b0d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 8377 	beq.w	800b7b4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	4798      	blx	r3
      }
      return;
 800b0ce:	e371      	b.n	800b7b4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b0d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 8123 	beq.w	800b320 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b0da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b0de:	4b8d      	ldr	r3, [pc, #564]	@ (800b314 <HAL_UART_IRQHandler+0x2b8>)
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d106      	bne.n	800b0f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b0e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b0ea:	4b8b      	ldr	r3, [pc, #556]	@ (800b318 <HAL_UART_IRQHandler+0x2bc>)
 800b0ec:	4013      	ands	r3, r2
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	f000 8116 	beq.w	800b320 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b0f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d011      	beq.n	800b124 <HAL_UART_IRQHandler+0xc8>
 800b100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00b      	beq.n	800b124 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2201      	movs	r2, #1
 800b112:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b11a:	f043 0201 	orr.w	r2, r3, #1
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b128:	f003 0302 	and.w	r3, r3, #2
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d011      	beq.n	800b154 <HAL_UART_IRQHandler+0xf8>
 800b130:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b134:	f003 0301 	and.w	r3, r3, #1
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d00b      	beq.n	800b154 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2202      	movs	r2, #2
 800b142:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b14a:	f043 0204 	orr.w	r2, r3, #4
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d011      	beq.n	800b184 <HAL_UART_IRQHandler+0x128>
 800b160:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00b      	beq.n	800b184 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2204      	movs	r2, #4
 800b172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b17a:	f043 0202 	orr.w	r2, r3, #2
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b188:	f003 0308 	and.w	r3, r3, #8
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d017      	beq.n	800b1c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b194:	f003 0320 	and.w	r3, r3, #32
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d105      	bne.n	800b1a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b19c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b1a0:	4b5c      	ldr	r3, [pc, #368]	@ (800b314 <HAL_UART_IRQHandler+0x2b8>)
 800b1a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00b      	beq.n	800b1c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2208      	movs	r2, #8
 800b1ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1b6:	f043 0208 	orr.w	r2, r3, #8
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b1c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d012      	beq.n	800b1f2 <HAL_UART_IRQHandler+0x196>
 800b1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b1d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00c      	beq.n	800b1f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1e8:	f043 0220 	orr.w	r2, r3, #32
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 82dd 	beq.w	800b7b8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b202:	f003 0320 	and.w	r3, r3, #32
 800b206:	2b00      	cmp	r3, #0
 800b208:	d013      	beq.n	800b232 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b20a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b20e:	f003 0320 	and.w	r3, r3, #32
 800b212:	2b00      	cmp	r3, #0
 800b214:	d105      	bne.n	800b222 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b21a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d007      	beq.n	800b232 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b226:	2b00      	cmp	r3, #0
 800b228:	d003      	beq.n	800b232 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b238:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b246:	2b40      	cmp	r3, #64	@ 0x40
 800b248:	d005      	beq.n	800b256 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b24a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b24e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b252:	2b00      	cmp	r3, #0
 800b254:	d054      	beq.n	800b300 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f001 fb00 	bl	800c85c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b266:	2b40      	cmp	r3, #64	@ 0x40
 800b268:	d146      	bne.n	800b2f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3308      	adds	r3, #8
 800b270:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b274:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b278:	e853 3f00 	ldrex	r3, [r3]
 800b27c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b280:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b284:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3308      	adds	r3, #8
 800b292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b296:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b29a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b2a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b2a6:	e841 2300 	strex	r3, r2, [r1]
 800b2aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b2ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1d9      	bne.n	800b26a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d017      	beq.n	800b2f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2c6:	4a15      	ldr	r2, [pc, #84]	@ (800b31c <HAL_UART_IRQHandler+0x2c0>)
 800b2c8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7f9 fdcf 	bl	8004e74 <HAL_DMA_Abort_IT>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d019      	beq.n	800b310 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b2e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ee:	e00f      	b.n	800b310 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fa77 	bl	800b7e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2f6:	e00b      	b.n	800b310 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 fa73 	bl	800b7e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2fe:	e007      	b.n	800b310 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fa6f 	bl	800b7e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b30e:	e253      	b.n	800b7b8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b310:	bf00      	nop
    return;
 800b312:	e251      	b.n	800b7b8 <HAL_UART_IRQHandler+0x75c>
 800b314:	10000001 	.word	0x10000001
 800b318:	04000120 	.word	0x04000120
 800b31c:	0800c929 	.word	0x0800c929

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b324:	2b01      	cmp	r3, #1
 800b326:	f040 81e7 	bne.w	800b6f8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b32e:	f003 0310 	and.w	r3, r3, #16
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 81e0 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b33c:	f003 0310 	and.w	r3, r3, #16
 800b340:	2b00      	cmp	r3, #0
 800b342:	f000 81d9 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2210      	movs	r2, #16
 800b34c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	689b      	ldr	r3, [r3, #8]
 800b354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b358:	2b40      	cmp	r3, #64	@ 0x40
 800b35a:	f040 8151 	bne.w	800b600 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a96      	ldr	r2, [pc, #600]	@ (800b5c0 <HAL_UART_IRQHandler+0x564>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d068      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a93      	ldr	r2, [pc, #588]	@ (800b5c4 <HAL_UART_IRQHandler+0x568>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d061      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a91      	ldr	r2, [pc, #580]	@ (800b5c8 <HAL_UART_IRQHandler+0x56c>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d05a      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a8e      	ldr	r2, [pc, #568]	@ (800b5cc <HAL_UART_IRQHandler+0x570>)
 800b392:	4293      	cmp	r3, r2
 800b394:	d053      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a8c      	ldr	r2, [pc, #560]	@ (800b5d0 <HAL_UART_IRQHandler+0x574>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d04c      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a89      	ldr	r2, [pc, #548]	@ (800b5d4 <HAL_UART_IRQHandler+0x578>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d045      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a87      	ldr	r2, [pc, #540]	@ (800b5d8 <HAL_UART_IRQHandler+0x57c>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d03e      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a84      	ldr	r2, [pc, #528]	@ (800b5dc <HAL_UART_IRQHandler+0x580>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d037      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	4a82      	ldr	r2, [pc, #520]	@ (800b5e0 <HAL_UART_IRQHandler+0x584>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d030      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a7f      	ldr	r2, [pc, #508]	@ (800b5e4 <HAL_UART_IRQHandler+0x588>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d029      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a7d      	ldr	r2, [pc, #500]	@ (800b5e8 <HAL_UART_IRQHandler+0x58c>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d022      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a7a      	ldr	r2, [pc, #488]	@ (800b5ec <HAL_UART_IRQHandler+0x590>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d01b      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	4a78      	ldr	r2, [pc, #480]	@ (800b5f0 <HAL_UART_IRQHandler+0x594>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d014      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a75      	ldr	r2, [pc, #468]	@ (800b5f4 <HAL_UART_IRQHandler+0x598>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d00d      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a73      	ldr	r2, [pc, #460]	@ (800b5f8 <HAL_UART_IRQHandler+0x59c>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d006      	beq.n	800b43e <HAL_UART_IRQHandler+0x3e2>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a70      	ldr	r2, [pc, #448]	@ (800b5fc <HAL_UART_IRQHandler+0x5a0>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d106      	bne.n	800b44c <HAL_UART_IRQHandler+0x3f0>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	b29b      	uxth	r3, r3
 800b44a:	e005      	b.n	800b458 <HAL_UART_IRQHandler+0x3fc>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	b29b      	uxth	r3, r3
 800b458:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b45c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b460:	2b00      	cmp	r3, #0
 800b462:	f000 81ab 	beq.w	800b7bc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b46c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b470:	429a      	cmp	r2, r3
 800b472:	f080 81a3 	bcs.w	800b7bc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b47c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b486:	69db      	ldr	r3, [r3, #28]
 800b488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b48c:	f000 8087 	beq.w	800b59e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b498:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b4a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b4a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b4ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b4be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b4c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b4ca:	e841 2300 	strex	r3, r2, [r1]
 800b4ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b4d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1da      	bne.n	800b490 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4e4:	e853 3f00 	ldrex	r3, [r3]
 800b4e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b4ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b4ec:	f023 0301 	bic.w	r3, r3, #1
 800b4f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b4fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b502:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b506:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1e1      	bne.n	800b4da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3308      	adds	r3, #8
 800b51c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b520:	e853 3f00 	ldrex	r3, [r3]
 800b524:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b52c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3308      	adds	r3, #8
 800b536:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b53a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b53c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b540:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b542:	e841 2300 	strex	r3, r2, [r1]
 800b546:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b548:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1e3      	bne.n	800b516 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2220      	movs	r2, #32
 800b552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b564:	e853 3f00 	ldrex	r3, [r3]
 800b568:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b56a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b56c:	f023 0310 	bic.w	r3, r3, #16
 800b570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	461a      	mov	r2, r3
 800b57a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b57e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b580:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b582:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b584:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b586:	e841 2300 	strex	r3, r2, [r1]
 800b58a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b58c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1e4      	bne.n	800b55c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b598:	4618      	mov	r0, r3
 800b59a:	f7f9 f94d 	bl	8004838 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	b29b      	uxth	r3, r3
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f91d 	bl	800b7f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5be:	e0fd      	b.n	800b7bc <HAL_UART_IRQHandler+0x760>
 800b5c0:	40020010 	.word	0x40020010
 800b5c4:	40020028 	.word	0x40020028
 800b5c8:	40020040 	.word	0x40020040
 800b5cc:	40020058 	.word	0x40020058
 800b5d0:	40020070 	.word	0x40020070
 800b5d4:	40020088 	.word	0x40020088
 800b5d8:	400200a0 	.word	0x400200a0
 800b5dc:	400200b8 	.word	0x400200b8
 800b5e0:	40020410 	.word	0x40020410
 800b5e4:	40020428 	.word	0x40020428
 800b5e8:	40020440 	.word	0x40020440
 800b5ec:	40020458 	.word	0x40020458
 800b5f0:	40020470 	.word	0x40020470
 800b5f4:	40020488 	.word	0x40020488
 800b5f8:	400204a0 	.word	0x400204a0
 800b5fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f000 80cf 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b626:	2b00      	cmp	r3, #0
 800b628:	f000 80ca 	beq.w	800b7c0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b634:	e853 3f00 	ldrex	r3, [r3]
 800b638:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b63a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b63c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	461a      	mov	r2, r3
 800b64a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b64e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b650:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b652:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b656:	e841 2300 	strex	r3, r2, [r1]
 800b65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b65c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1e4      	bne.n	800b62c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3308      	adds	r3, #8
 800b668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	e853 3f00 	ldrex	r3, [r3]
 800b670:	623b      	str	r3, [r7, #32]
   return(result);
 800b672:	6a3a      	ldr	r2, [r7, #32]
 800b674:	4b55      	ldr	r3, [pc, #340]	@ (800b7cc <HAL_UART_IRQHandler+0x770>)
 800b676:	4013      	ands	r3, r2
 800b678:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3308      	adds	r3, #8
 800b682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b686:	633a      	str	r2, [r7, #48]	@ 0x30
 800b688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b68e:	e841 2300 	strex	r3, r2, [r1]
 800b692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1e3      	bne.n	800b662 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2220      	movs	r2, #32
 800b69e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	e853 3f00 	ldrex	r3, [r3]
 800b6ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f023 0310 	bic.w	r3, r3, #16
 800b6c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b6d0:	61fb      	str	r3, [r7, #28]
 800b6d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6d4:	69b9      	ldr	r1, [r7, #24]
 800b6d6:	69fa      	ldr	r2, [r7, #28]
 800b6d8:	e841 2300 	strex	r3, r2, [r1]
 800b6dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1e4      	bne.n	800b6ae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f881 	bl	800b7f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6f6:	e063      	b.n	800b7c0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b6fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00e      	beq.n	800b722 <HAL_UART_IRQHandler+0x6c6>
 800b704:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d008      	beq.n	800b722 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b718:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f001 f945 	bl	800c9aa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b720:	e051      	b.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d014      	beq.n	800b758 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b72e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b736:	2b00      	cmp	r3, #0
 800b738:	d105      	bne.n	800b746 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b73a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b73e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b742:	2b00      	cmp	r3, #0
 800b744:	d008      	beq.n	800b758 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d03a      	beq.n	800b7c4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	4798      	blx	r3
    }
    return;
 800b756:	e035      	b.n	800b7c4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b75c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b760:	2b00      	cmp	r3, #0
 800b762:	d009      	beq.n	800b778 <HAL_UART_IRQHandler+0x71c>
 800b764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d003      	beq.n	800b778 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f001 f8ef 	bl	800c954 <UART_EndTransmit_IT>
    return;
 800b776:	e026      	b.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b77c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b780:	2b00      	cmp	r3, #0
 800b782:	d009      	beq.n	800b798 <HAL_UART_IRQHandler+0x73c>
 800b784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b788:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f001 f91e 	bl	800c9d2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b796:	e016      	b.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b79c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d010      	beq.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
 800b7a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	da0c      	bge.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f001 f906 	bl	800c9be <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b7b2:	e008      	b.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800b7b4:	bf00      	nop
 800b7b6:	e006      	b.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
    return;
 800b7b8:	bf00      	nop
 800b7ba:	e004      	b.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800b7bc:	bf00      	nop
 800b7be:	e002      	b.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800b7c0:	bf00      	nop
 800b7c2:	e000      	b.n	800b7c6 <HAL_UART_IRQHandler+0x76a>
    return;
 800b7c4:	bf00      	nop
  }
}
 800b7c6:	37e8      	adds	r7, #232	@ 0xe8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	effffffe 	.word	0xeffffffe

0800b7d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b814:	b092      	sub	sp, #72	@ 0x48
 800b816:	af00      	add	r7, sp, #0
 800b818:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b81a:	2300      	movs	r3, #0
 800b81c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	431a      	orrs	r2, r3
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	695b      	ldr	r3, [r3, #20]
 800b82e:	431a      	orrs	r2, r3
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	4313      	orrs	r3, r2
 800b836:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	4bbe      	ldr	r3, [pc, #760]	@ (800bb38 <UART_SetConfig+0x328>)
 800b840:	4013      	ands	r3, r2
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	6812      	ldr	r2, [r2, #0]
 800b846:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b848:	430b      	orrs	r3, r1
 800b84a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	68da      	ldr	r2, [r3, #12]
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	430a      	orrs	r2, r1
 800b860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4ab3      	ldr	r2, [pc, #716]	@ (800bb3c <UART_SetConfig+0x32c>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d004      	beq.n	800b87c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	6a1b      	ldr	r3, [r3, #32]
 800b876:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b878:	4313      	orrs	r3, r2
 800b87a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	689a      	ldr	r2, [r3, #8]
 800b882:	4baf      	ldr	r3, [pc, #700]	@ (800bb40 <UART_SetConfig+0x330>)
 800b884:	4013      	ands	r3, r2
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	6812      	ldr	r2, [r2, #0]
 800b88a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b88c:	430b      	orrs	r3, r1
 800b88e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b896:	f023 010f 	bic.w	r1, r3, #15
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4aa6      	ldr	r2, [pc, #664]	@ (800bb44 <UART_SetConfig+0x334>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d177      	bne.n	800b9a0 <UART_SetConfig+0x190>
 800b8b0:	4ba5      	ldr	r3, [pc, #660]	@ (800bb48 <UART_SetConfig+0x338>)
 800b8b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b8b8:	2b28      	cmp	r3, #40	@ 0x28
 800b8ba:	d86d      	bhi.n	800b998 <UART_SetConfig+0x188>
 800b8bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c4 <UART_SetConfig+0xb4>)
 800b8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c2:	bf00      	nop
 800b8c4:	0800b969 	.word	0x0800b969
 800b8c8:	0800b999 	.word	0x0800b999
 800b8cc:	0800b999 	.word	0x0800b999
 800b8d0:	0800b999 	.word	0x0800b999
 800b8d4:	0800b999 	.word	0x0800b999
 800b8d8:	0800b999 	.word	0x0800b999
 800b8dc:	0800b999 	.word	0x0800b999
 800b8e0:	0800b999 	.word	0x0800b999
 800b8e4:	0800b971 	.word	0x0800b971
 800b8e8:	0800b999 	.word	0x0800b999
 800b8ec:	0800b999 	.word	0x0800b999
 800b8f0:	0800b999 	.word	0x0800b999
 800b8f4:	0800b999 	.word	0x0800b999
 800b8f8:	0800b999 	.word	0x0800b999
 800b8fc:	0800b999 	.word	0x0800b999
 800b900:	0800b999 	.word	0x0800b999
 800b904:	0800b979 	.word	0x0800b979
 800b908:	0800b999 	.word	0x0800b999
 800b90c:	0800b999 	.word	0x0800b999
 800b910:	0800b999 	.word	0x0800b999
 800b914:	0800b999 	.word	0x0800b999
 800b918:	0800b999 	.word	0x0800b999
 800b91c:	0800b999 	.word	0x0800b999
 800b920:	0800b999 	.word	0x0800b999
 800b924:	0800b981 	.word	0x0800b981
 800b928:	0800b999 	.word	0x0800b999
 800b92c:	0800b999 	.word	0x0800b999
 800b930:	0800b999 	.word	0x0800b999
 800b934:	0800b999 	.word	0x0800b999
 800b938:	0800b999 	.word	0x0800b999
 800b93c:	0800b999 	.word	0x0800b999
 800b940:	0800b999 	.word	0x0800b999
 800b944:	0800b989 	.word	0x0800b989
 800b948:	0800b999 	.word	0x0800b999
 800b94c:	0800b999 	.word	0x0800b999
 800b950:	0800b999 	.word	0x0800b999
 800b954:	0800b999 	.word	0x0800b999
 800b958:	0800b999 	.word	0x0800b999
 800b95c:	0800b999 	.word	0x0800b999
 800b960:	0800b999 	.word	0x0800b999
 800b964:	0800b991 	.word	0x0800b991
 800b968:	2301      	movs	r3, #1
 800b96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b96e:	e326      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b970:	2304      	movs	r3, #4
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b976:	e322      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b978:	2308      	movs	r3, #8
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b97e:	e31e      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b980:	2310      	movs	r3, #16
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b986:	e31a      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b988:	2320      	movs	r3, #32
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b98e:	e316      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b990:	2340      	movs	r3, #64	@ 0x40
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b996:	e312      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b998:	2380      	movs	r3, #128	@ 0x80
 800b99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b99e:	e30e      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a69      	ldr	r2, [pc, #420]	@ (800bb4c <UART_SetConfig+0x33c>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d130      	bne.n	800ba0c <UART_SetConfig+0x1fc>
 800b9aa:	4b67      	ldr	r3, [pc, #412]	@ (800bb48 <UART_SetConfig+0x338>)
 800b9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ae:	f003 0307 	and.w	r3, r3, #7
 800b9b2:	2b05      	cmp	r3, #5
 800b9b4:	d826      	bhi.n	800ba04 <UART_SetConfig+0x1f4>
 800b9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800b9bc <UART_SetConfig+0x1ac>)
 800b9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9bc:	0800b9d5 	.word	0x0800b9d5
 800b9c0:	0800b9dd 	.word	0x0800b9dd
 800b9c4:	0800b9e5 	.word	0x0800b9e5
 800b9c8:	0800b9ed 	.word	0x0800b9ed
 800b9cc:	0800b9f5 	.word	0x0800b9f5
 800b9d0:	0800b9fd 	.word	0x0800b9fd
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9da:	e2f0      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b9dc:	2304      	movs	r3, #4
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9e2:	e2ec      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b9e4:	2308      	movs	r3, #8
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9ea:	e2e8      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b9ec:	2310      	movs	r3, #16
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9f2:	e2e4      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b9f4:	2320      	movs	r3, #32
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b9fa:	e2e0      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800b9fc:	2340      	movs	r3, #64	@ 0x40
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba02:	e2dc      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800ba04:	2380      	movs	r3, #128	@ 0x80
 800ba06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba0a:	e2d8      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a4f      	ldr	r2, [pc, #316]	@ (800bb50 <UART_SetConfig+0x340>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d130      	bne.n	800ba78 <UART_SetConfig+0x268>
 800ba16:	4b4c      	ldr	r3, [pc, #304]	@ (800bb48 <UART_SetConfig+0x338>)
 800ba18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba1a:	f003 0307 	and.w	r3, r3, #7
 800ba1e:	2b05      	cmp	r3, #5
 800ba20:	d826      	bhi.n	800ba70 <UART_SetConfig+0x260>
 800ba22:	a201      	add	r2, pc, #4	@ (adr r2, 800ba28 <UART_SetConfig+0x218>)
 800ba24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba28:	0800ba41 	.word	0x0800ba41
 800ba2c:	0800ba49 	.word	0x0800ba49
 800ba30:	0800ba51 	.word	0x0800ba51
 800ba34:	0800ba59 	.word	0x0800ba59
 800ba38:	0800ba61 	.word	0x0800ba61
 800ba3c:	0800ba69 	.word	0x0800ba69
 800ba40:	2300      	movs	r3, #0
 800ba42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba46:	e2ba      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800ba48:	2304      	movs	r3, #4
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba4e:	e2b6      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800ba50:	2308      	movs	r3, #8
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba56:	e2b2      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800ba58:	2310      	movs	r3, #16
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba5e:	e2ae      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800ba60:	2320      	movs	r3, #32
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba66:	e2aa      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800ba68:	2340      	movs	r3, #64	@ 0x40
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba6e:	e2a6      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800ba70:	2380      	movs	r3, #128	@ 0x80
 800ba72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ba76:	e2a2      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a35      	ldr	r2, [pc, #212]	@ (800bb54 <UART_SetConfig+0x344>)
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	d130      	bne.n	800bae4 <UART_SetConfig+0x2d4>
 800ba82:	4b31      	ldr	r3, [pc, #196]	@ (800bb48 <UART_SetConfig+0x338>)
 800ba84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba86:	f003 0307 	and.w	r3, r3, #7
 800ba8a:	2b05      	cmp	r3, #5
 800ba8c:	d826      	bhi.n	800badc <UART_SetConfig+0x2cc>
 800ba8e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba94 <UART_SetConfig+0x284>)
 800ba90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba94:	0800baad 	.word	0x0800baad
 800ba98:	0800bab5 	.word	0x0800bab5
 800ba9c:	0800babd 	.word	0x0800babd
 800baa0:	0800bac5 	.word	0x0800bac5
 800baa4:	0800bacd 	.word	0x0800bacd
 800baa8:	0800bad5 	.word	0x0800bad5
 800baac:	2300      	movs	r3, #0
 800baae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bab2:	e284      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bab4:	2304      	movs	r3, #4
 800bab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baba:	e280      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800babc:	2308      	movs	r3, #8
 800babe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bac2:	e27c      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bac4:	2310      	movs	r3, #16
 800bac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800baca:	e278      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bacc:	2320      	movs	r3, #32
 800bace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bad2:	e274      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bad4:	2340      	movs	r3, #64	@ 0x40
 800bad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bada:	e270      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800badc:	2380      	movs	r3, #128	@ 0x80
 800bade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bae2:	e26c      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a1b      	ldr	r2, [pc, #108]	@ (800bb58 <UART_SetConfig+0x348>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d142      	bne.n	800bb74 <UART_SetConfig+0x364>
 800baee:	4b16      	ldr	r3, [pc, #88]	@ (800bb48 <UART_SetConfig+0x338>)
 800baf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baf2:	f003 0307 	and.w	r3, r3, #7
 800baf6:	2b05      	cmp	r3, #5
 800baf8:	d838      	bhi.n	800bb6c <UART_SetConfig+0x35c>
 800bafa:	a201      	add	r2, pc, #4	@ (adr r2, 800bb00 <UART_SetConfig+0x2f0>)
 800bafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb00:	0800bb19 	.word	0x0800bb19
 800bb04:	0800bb21 	.word	0x0800bb21
 800bb08:	0800bb29 	.word	0x0800bb29
 800bb0c:	0800bb31 	.word	0x0800bb31
 800bb10:	0800bb5d 	.word	0x0800bb5d
 800bb14:	0800bb65 	.word	0x0800bb65
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb1e:	e24e      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bb20:	2304      	movs	r3, #4
 800bb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb26:	e24a      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bb28:	2308      	movs	r3, #8
 800bb2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb2e:	e246      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bb30:	2310      	movs	r3, #16
 800bb32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb36:	e242      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bb38:	cfff69f3 	.word	0xcfff69f3
 800bb3c:	58000c00 	.word	0x58000c00
 800bb40:	11fff4ff 	.word	0x11fff4ff
 800bb44:	40011000 	.word	0x40011000
 800bb48:	58024400 	.word	0x58024400
 800bb4c:	40004400 	.word	0x40004400
 800bb50:	40004800 	.word	0x40004800
 800bb54:	40004c00 	.word	0x40004c00
 800bb58:	40005000 	.word	0x40005000
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb62:	e22c      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bb64:	2340      	movs	r3, #64	@ 0x40
 800bb66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb6a:	e228      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bb6c:	2380      	movs	r3, #128	@ 0x80
 800bb6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bb72:	e224      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4ab1      	ldr	r2, [pc, #708]	@ (800be40 <UART_SetConfig+0x630>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d176      	bne.n	800bc6c <UART_SetConfig+0x45c>
 800bb7e:	4bb1      	ldr	r3, [pc, #708]	@ (800be44 <UART_SetConfig+0x634>)
 800bb80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bb86:	2b28      	cmp	r3, #40	@ 0x28
 800bb88:	d86c      	bhi.n	800bc64 <UART_SetConfig+0x454>
 800bb8a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb90 <UART_SetConfig+0x380>)
 800bb8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb90:	0800bc35 	.word	0x0800bc35
 800bb94:	0800bc65 	.word	0x0800bc65
 800bb98:	0800bc65 	.word	0x0800bc65
 800bb9c:	0800bc65 	.word	0x0800bc65
 800bba0:	0800bc65 	.word	0x0800bc65
 800bba4:	0800bc65 	.word	0x0800bc65
 800bba8:	0800bc65 	.word	0x0800bc65
 800bbac:	0800bc65 	.word	0x0800bc65
 800bbb0:	0800bc3d 	.word	0x0800bc3d
 800bbb4:	0800bc65 	.word	0x0800bc65
 800bbb8:	0800bc65 	.word	0x0800bc65
 800bbbc:	0800bc65 	.word	0x0800bc65
 800bbc0:	0800bc65 	.word	0x0800bc65
 800bbc4:	0800bc65 	.word	0x0800bc65
 800bbc8:	0800bc65 	.word	0x0800bc65
 800bbcc:	0800bc65 	.word	0x0800bc65
 800bbd0:	0800bc45 	.word	0x0800bc45
 800bbd4:	0800bc65 	.word	0x0800bc65
 800bbd8:	0800bc65 	.word	0x0800bc65
 800bbdc:	0800bc65 	.word	0x0800bc65
 800bbe0:	0800bc65 	.word	0x0800bc65
 800bbe4:	0800bc65 	.word	0x0800bc65
 800bbe8:	0800bc65 	.word	0x0800bc65
 800bbec:	0800bc65 	.word	0x0800bc65
 800bbf0:	0800bc4d 	.word	0x0800bc4d
 800bbf4:	0800bc65 	.word	0x0800bc65
 800bbf8:	0800bc65 	.word	0x0800bc65
 800bbfc:	0800bc65 	.word	0x0800bc65
 800bc00:	0800bc65 	.word	0x0800bc65
 800bc04:	0800bc65 	.word	0x0800bc65
 800bc08:	0800bc65 	.word	0x0800bc65
 800bc0c:	0800bc65 	.word	0x0800bc65
 800bc10:	0800bc55 	.word	0x0800bc55
 800bc14:	0800bc65 	.word	0x0800bc65
 800bc18:	0800bc65 	.word	0x0800bc65
 800bc1c:	0800bc65 	.word	0x0800bc65
 800bc20:	0800bc65 	.word	0x0800bc65
 800bc24:	0800bc65 	.word	0x0800bc65
 800bc28:	0800bc65 	.word	0x0800bc65
 800bc2c:	0800bc65 	.word	0x0800bc65
 800bc30:	0800bc5d 	.word	0x0800bc5d
 800bc34:	2301      	movs	r3, #1
 800bc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc3a:	e1c0      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bc3c:	2304      	movs	r3, #4
 800bc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc42:	e1bc      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bc44:	2308      	movs	r3, #8
 800bc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc4a:	e1b8      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bc4c:	2310      	movs	r3, #16
 800bc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc52:	e1b4      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bc54:	2320      	movs	r3, #32
 800bc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc5a:	e1b0      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bc5c:	2340      	movs	r3, #64	@ 0x40
 800bc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc62:	e1ac      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bc64:	2380      	movs	r3, #128	@ 0x80
 800bc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bc6a:	e1a8      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a75      	ldr	r2, [pc, #468]	@ (800be48 <UART_SetConfig+0x638>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d130      	bne.n	800bcd8 <UART_SetConfig+0x4c8>
 800bc76:	4b73      	ldr	r3, [pc, #460]	@ (800be44 <UART_SetConfig+0x634>)
 800bc78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc7a:	f003 0307 	and.w	r3, r3, #7
 800bc7e:	2b05      	cmp	r3, #5
 800bc80:	d826      	bhi.n	800bcd0 <UART_SetConfig+0x4c0>
 800bc82:	a201      	add	r2, pc, #4	@ (adr r2, 800bc88 <UART_SetConfig+0x478>)
 800bc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc88:	0800bca1 	.word	0x0800bca1
 800bc8c:	0800bca9 	.word	0x0800bca9
 800bc90:	0800bcb1 	.word	0x0800bcb1
 800bc94:	0800bcb9 	.word	0x0800bcb9
 800bc98:	0800bcc1 	.word	0x0800bcc1
 800bc9c:	0800bcc9 	.word	0x0800bcc9
 800bca0:	2300      	movs	r3, #0
 800bca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bca6:	e18a      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bca8:	2304      	movs	r3, #4
 800bcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcae:	e186      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bcb0:	2308      	movs	r3, #8
 800bcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcb6:	e182      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bcb8:	2310      	movs	r3, #16
 800bcba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcbe:	e17e      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bcc0:	2320      	movs	r3, #32
 800bcc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcc6:	e17a      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bcc8:	2340      	movs	r3, #64	@ 0x40
 800bcca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcce:	e176      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bcd0:	2380      	movs	r3, #128	@ 0x80
 800bcd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bcd6:	e172      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a5b      	ldr	r2, [pc, #364]	@ (800be4c <UART_SetConfig+0x63c>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d130      	bne.n	800bd44 <UART_SetConfig+0x534>
 800bce2:	4b58      	ldr	r3, [pc, #352]	@ (800be44 <UART_SetConfig+0x634>)
 800bce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bce6:	f003 0307 	and.w	r3, r3, #7
 800bcea:	2b05      	cmp	r3, #5
 800bcec:	d826      	bhi.n	800bd3c <UART_SetConfig+0x52c>
 800bcee:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf4 <UART_SetConfig+0x4e4>)
 800bcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf4:	0800bd0d 	.word	0x0800bd0d
 800bcf8:	0800bd15 	.word	0x0800bd15
 800bcfc:	0800bd1d 	.word	0x0800bd1d
 800bd00:	0800bd25 	.word	0x0800bd25
 800bd04:	0800bd2d 	.word	0x0800bd2d
 800bd08:	0800bd35 	.word	0x0800bd35
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd12:	e154      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bd14:	2304      	movs	r3, #4
 800bd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd1a:	e150      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bd1c:	2308      	movs	r3, #8
 800bd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd22:	e14c      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bd24:	2310      	movs	r3, #16
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2a:	e148      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bd2c:	2320      	movs	r3, #32
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd32:	e144      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bd34:	2340      	movs	r3, #64	@ 0x40
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3a:	e140      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bd3c:	2380      	movs	r3, #128	@ 0x80
 800bd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd42:	e13c      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a41      	ldr	r2, [pc, #260]	@ (800be50 <UART_SetConfig+0x640>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	f040 8082 	bne.w	800be54 <UART_SetConfig+0x644>
 800bd50:	4b3c      	ldr	r3, [pc, #240]	@ (800be44 <UART_SetConfig+0x634>)
 800bd52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd58:	2b28      	cmp	r3, #40	@ 0x28
 800bd5a:	d86d      	bhi.n	800be38 <UART_SetConfig+0x628>
 800bd5c:	a201      	add	r2, pc, #4	@ (adr r2, 800bd64 <UART_SetConfig+0x554>)
 800bd5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd62:	bf00      	nop
 800bd64:	0800be09 	.word	0x0800be09
 800bd68:	0800be39 	.word	0x0800be39
 800bd6c:	0800be39 	.word	0x0800be39
 800bd70:	0800be39 	.word	0x0800be39
 800bd74:	0800be39 	.word	0x0800be39
 800bd78:	0800be39 	.word	0x0800be39
 800bd7c:	0800be39 	.word	0x0800be39
 800bd80:	0800be39 	.word	0x0800be39
 800bd84:	0800be11 	.word	0x0800be11
 800bd88:	0800be39 	.word	0x0800be39
 800bd8c:	0800be39 	.word	0x0800be39
 800bd90:	0800be39 	.word	0x0800be39
 800bd94:	0800be39 	.word	0x0800be39
 800bd98:	0800be39 	.word	0x0800be39
 800bd9c:	0800be39 	.word	0x0800be39
 800bda0:	0800be39 	.word	0x0800be39
 800bda4:	0800be19 	.word	0x0800be19
 800bda8:	0800be39 	.word	0x0800be39
 800bdac:	0800be39 	.word	0x0800be39
 800bdb0:	0800be39 	.word	0x0800be39
 800bdb4:	0800be39 	.word	0x0800be39
 800bdb8:	0800be39 	.word	0x0800be39
 800bdbc:	0800be39 	.word	0x0800be39
 800bdc0:	0800be39 	.word	0x0800be39
 800bdc4:	0800be21 	.word	0x0800be21
 800bdc8:	0800be39 	.word	0x0800be39
 800bdcc:	0800be39 	.word	0x0800be39
 800bdd0:	0800be39 	.word	0x0800be39
 800bdd4:	0800be39 	.word	0x0800be39
 800bdd8:	0800be39 	.word	0x0800be39
 800bddc:	0800be39 	.word	0x0800be39
 800bde0:	0800be39 	.word	0x0800be39
 800bde4:	0800be29 	.word	0x0800be29
 800bde8:	0800be39 	.word	0x0800be39
 800bdec:	0800be39 	.word	0x0800be39
 800bdf0:	0800be39 	.word	0x0800be39
 800bdf4:	0800be39 	.word	0x0800be39
 800bdf8:	0800be39 	.word	0x0800be39
 800bdfc:	0800be39 	.word	0x0800be39
 800be00:	0800be39 	.word	0x0800be39
 800be04:	0800be31 	.word	0x0800be31
 800be08:	2301      	movs	r3, #1
 800be0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0e:	e0d6      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800be10:	2304      	movs	r3, #4
 800be12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be16:	e0d2      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800be18:	2308      	movs	r3, #8
 800be1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be1e:	e0ce      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800be20:	2310      	movs	r3, #16
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be26:	e0ca      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800be28:	2320      	movs	r3, #32
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be2e:	e0c6      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800be30:	2340      	movs	r3, #64	@ 0x40
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be36:	e0c2      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800be38:	2380      	movs	r3, #128	@ 0x80
 800be3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be3e:	e0be      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800be40:	40011400 	.word	0x40011400
 800be44:	58024400 	.word	0x58024400
 800be48:	40007800 	.word	0x40007800
 800be4c:	40007c00 	.word	0x40007c00
 800be50:	40011800 	.word	0x40011800
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4aad      	ldr	r2, [pc, #692]	@ (800c110 <UART_SetConfig+0x900>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d176      	bne.n	800bf4c <UART_SetConfig+0x73c>
 800be5e:	4bad      	ldr	r3, [pc, #692]	@ (800c114 <UART_SetConfig+0x904>)
 800be60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be66:	2b28      	cmp	r3, #40	@ 0x28
 800be68:	d86c      	bhi.n	800bf44 <UART_SetConfig+0x734>
 800be6a:	a201      	add	r2, pc, #4	@ (adr r2, 800be70 <UART_SetConfig+0x660>)
 800be6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be70:	0800bf15 	.word	0x0800bf15
 800be74:	0800bf45 	.word	0x0800bf45
 800be78:	0800bf45 	.word	0x0800bf45
 800be7c:	0800bf45 	.word	0x0800bf45
 800be80:	0800bf45 	.word	0x0800bf45
 800be84:	0800bf45 	.word	0x0800bf45
 800be88:	0800bf45 	.word	0x0800bf45
 800be8c:	0800bf45 	.word	0x0800bf45
 800be90:	0800bf1d 	.word	0x0800bf1d
 800be94:	0800bf45 	.word	0x0800bf45
 800be98:	0800bf45 	.word	0x0800bf45
 800be9c:	0800bf45 	.word	0x0800bf45
 800bea0:	0800bf45 	.word	0x0800bf45
 800bea4:	0800bf45 	.word	0x0800bf45
 800bea8:	0800bf45 	.word	0x0800bf45
 800beac:	0800bf45 	.word	0x0800bf45
 800beb0:	0800bf25 	.word	0x0800bf25
 800beb4:	0800bf45 	.word	0x0800bf45
 800beb8:	0800bf45 	.word	0x0800bf45
 800bebc:	0800bf45 	.word	0x0800bf45
 800bec0:	0800bf45 	.word	0x0800bf45
 800bec4:	0800bf45 	.word	0x0800bf45
 800bec8:	0800bf45 	.word	0x0800bf45
 800becc:	0800bf45 	.word	0x0800bf45
 800bed0:	0800bf2d 	.word	0x0800bf2d
 800bed4:	0800bf45 	.word	0x0800bf45
 800bed8:	0800bf45 	.word	0x0800bf45
 800bedc:	0800bf45 	.word	0x0800bf45
 800bee0:	0800bf45 	.word	0x0800bf45
 800bee4:	0800bf45 	.word	0x0800bf45
 800bee8:	0800bf45 	.word	0x0800bf45
 800beec:	0800bf45 	.word	0x0800bf45
 800bef0:	0800bf35 	.word	0x0800bf35
 800bef4:	0800bf45 	.word	0x0800bf45
 800bef8:	0800bf45 	.word	0x0800bf45
 800befc:	0800bf45 	.word	0x0800bf45
 800bf00:	0800bf45 	.word	0x0800bf45
 800bf04:	0800bf45 	.word	0x0800bf45
 800bf08:	0800bf45 	.word	0x0800bf45
 800bf0c:	0800bf45 	.word	0x0800bf45
 800bf10:	0800bf3d 	.word	0x0800bf3d
 800bf14:	2301      	movs	r3, #1
 800bf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf1a:	e050      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf1c:	2304      	movs	r3, #4
 800bf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf22:	e04c      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf24:	2308      	movs	r3, #8
 800bf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf2a:	e048      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf2c:	2310      	movs	r3, #16
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf32:	e044      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf34:	2320      	movs	r3, #32
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf3a:	e040      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf3c:	2340      	movs	r3, #64	@ 0x40
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf42:	e03c      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf44:	2380      	movs	r3, #128	@ 0x80
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf4a:	e038      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a71      	ldr	r2, [pc, #452]	@ (800c118 <UART_SetConfig+0x908>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d130      	bne.n	800bfb8 <UART_SetConfig+0x7a8>
 800bf56:	4b6f      	ldr	r3, [pc, #444]	@ (800c114 <UART_SetConfig+0x904>)
 800bf58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf5a:	f003 0307 	and.w	r3, r3, #7
 800bf5e:	2b05      	cmp	r3, #5
 800bf60:	d826      	bhi.n	800bfb0 <UART_SetConfig+0x7a0>
 800bf62:	a201      	add	r2, pc, #4	@ (adr r2, 800bf68 <UART_SetConfig+0x758>)
 800bf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf68:	0800bf81 	.word	0x0800bf81
 800bf6c:	0800bf89 	.word	0x0800bf89
 800bf70:	0800bf91 	.word	0x0800bf91
 800bf74:	0800bf99 	.word	0x0800bf99
 800bf78:	0800bfa1 	.word	0x0800bfa1
 800bf7c:	0800bfa9 	.word	0x0800bfa9
 800bf80:	2302      	movs	r3, #2
 800bf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf86:	e01a      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf88:	2304      	movs	r3, #4
 800bf8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf8e:	e016      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf90:	2308      	movs	r3, #8
 800bf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf96:	e012      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bf98:	2310      	movs	r3, #16
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf9e:	e00e      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bfa0:	2320      	movs	r3, #32
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfa6:	e00a      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bfa8:	2340      	movs	r3, #64	@ 0x40
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfae:	e006      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bfb0:	2380      	movs	r3, #128	@ 0x80
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfb6:	e002      	b.n	800bfbe <UART_SetConfig+0x7ae>
 800bfb8:	2380      	movs	r3, #128	@ 0x80
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a55      	ldr	r2, [pc, #340]	@ (800c118 <UART_SetConfig+0x908>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	f040 80f8 	bne.w	800c1ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bfce:	2b20      	cmp	r3, #32
 800bfd0:	dc46      	bgt.n	800c060 <UART_SetConfig+0x850>
 800bfd2:	2b02      	cmp	r3, #2
 800bfd4:	db75      	blt.n	800c0c2 <UART_SetConfig+0x8b2>
 800bfd6:	3b02      	subs	r3, #2
 800bfd8:	2b1e      	cmp	r3, #30
 800bfda:	d872      	bhi.n	800c0c2 <UART_SetConfig+0x8b2>
 800bfdc:	a201      	add	r2, pc, #4	@ (adr r2, 800bfe4 <UART_SetConfig+0x7d4>)
 800bfde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe2:	bf00      	nop
 800bfe4:	0800c067 	.word	0x0800c067
 800bfe8:	0800c0c3 	.word	0x0800c0c3
 800bfec:	0800c06f 	.word	0x0800c06f
 800bff0:	0800c0c3 	.word	0x0800c0c3
 800bff4:	0800c0c3 	.word	0x0800c0c3
 800bff8:	0800c0c3 	.word	0x0800c0c3
 800bffc:	0800c07f 	.word	0x0800c07f
 800c000:	0800c0c3 	.word	0x0800c0c3
 800c004:	0800c0c3 	.word	0x0800c0c3
 800c008:	0800c0c3 	.word	0x0800c0c3
 800c00c:	0800c0c3 	.word	0x0800c0c3
 800c010:	0800c0c3 	.word	0x0800c0c3
 800c014:	0800c0c3 	.word	0x0800c0c3
 800c018:	0800c0c3 	.word	0x0800c0c3
 800c01c:	0800c08f 	.word	0x0800c08f
 800c020:	0800c0c3 	.word	0x0800c0c3
 800c024:	0800c0c3 	.word	0x0800c0c3
 800c028:	0800c0c3 	.word	0x0800c0c3
 800c02c:	0800c0c3 	.word	0x0800c0c3
 800c030:	0800c0c3 	.word	0x0800c0c3
 800c034:	0800c0c3 	.word	0x0800c0c3
 800c038:	0800c0c3 	.word	0x0800c0c3
 800c03c:	0800c0c3 	.word	0x0800c0c3
 800c040:	0800c0c3 	.word	0x0800c0c3
 800c044:	0800c0c3 	.word	0x0800c0c3
 800c048:	0800c0c3 	.word	0x0800c0c3
 800c04c:	0800c0c3 	.word	0x0800c0c3
 800c050:	0800c0c3 	.word	0x0800c0c3
 800c054:	0800c0c3 	.word	0x0800c0c3
 800c058:	0800c0c3 	.word	0x0800c0c3
 800c05c:	0800c0b5 	.word	0x0800c0b5
 800c060:	2b40      	cmp	r3, #64	@ 0x40
 800c062:	d02a      	beq.n	800c0ba <UART_SetConfig+0x8aa>
 800c064:	e02d      	b.n	800c0c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c066:	f7fd fdbf 	bl	8009be8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c06a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c06c:	e02f      	b.n	800c0ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c06e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c072:	4618      	mov	r0, r3
 800c074:	f7fd fdce 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c07c:	e027      	b.n	800c0ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c07e:	f107 0318 	add.w	r3, r7, #24
 800c082:	4618      	mov	r0, r3
 800c084:	f7fd ff1a 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c08c:	e01f      	b.n	800c0ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c08e:	4b21      	ldr	r3, [pc, #132]	@ (800c114 <UART_SetConfig+0x904>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 0320 	and.w	r3, r3, #32
 800c096:	2b00      	cmp	r3, #0
 800c098:	d009      	beq.n	800c0ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c09a:	4b1e      	ldr	r3, [pc, #120]	@ (800c114 <UART_SetConfig+0x904>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	08db      	lsrs	r3, r3, #3
 800c0a0:	f003 0303 	and.w	r3, r3, #3
 800c0a4:	4a1d      	ldr	r2, [pc, #116]	@ (800c11c <UART_SetConfig+0x90c>)
 800c0a6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0ac:	e00f      	b.n	800c0ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c0ae:	4b1b      	ldr	r3, [pc, #108]	@ (800c11c <UART_SetConfig+0x90c>)
 800c0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b2:	e00c      	b.n	800c0ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c120 <UART_SetConfig+0x910>)
 800c0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0b8:	e009      	b.n	800c0ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c0c0:	e005      	b.n	800c0ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c0cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	f000 81ee 	beq.w	800c4b2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0da:	4a12      	ldr	r2, [pc, #72]	@ (800c124 <UART_SetConfig+0x914>)
 800c0dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0e8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	005b      	lsls	r3, r3, #1
 800c0f2:	4413      	add	r3, r2
 800c0f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d305      	bcc.n	800c106 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c100:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c102:	429a      	cmp	r2, r3
 800c104:	d910      	bls.n	800c128 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c106:	2301      	movs	r3, #1
 800c108:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c10c:	e1d1      	b.n	800c4b2 <UART_SetConfig+0xca2>
 800c10e:	bf00      	nop
 800c110:	40011c00 	.word	0x40011c00
 800c114:	58024400 	.word	0x58024400
 800c118:	58000c00 	.word	0x58000c00
 800c11c:	03d09000 	.word	0x03d09000
 800c120:	003d0900 	.word	0x003d0900
 800c124:	0800e720 	.word	0x0800e720
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c12a:	2200      	movs	r2, #0
 800c12c:	60bb      	str	r3, [r7, #8]
 800c12e:	60fa      	str	r2, [r7, #12]
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c134:	4ac0      	ldr	r2, [pc, #768]	@ (800c438 <UART_SetConfig+0xc28>)
 800c136:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c13a:	b29b      	uxth	r3, r3
 800c13c:	2200      	movs	r2, #0
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	607a      	str	r2, [r7, #4]
 800c142:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c146:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c14a:	f7f4 f8d1 	bl	80002f0 <__aeabi_uldivmod>
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	4610      	mov	r0, r2
 800c154:	4619      	mov	r1, r3
 800c156:	f04f 0200 	mov.w	r2, #0
 800c15a:	f04f 0300 	mov.w	r3, #0
 800c15e:	020b      	lsls	r3, r1, #8
 800c160:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c164:	0202      	lsls	r2, r0, #8
 800c166:	6979      	ldr	r1, [r7, #20]
 800c168:	6849      	ldr	r1, [r1, #4]
 800c16a:	0849      	lsrs	r1, r1, #1
 800c16c:	2000      	movs	r0, #0
 800c16e:	460c      	mov	r4, r1
 800c170:	4605      	mov	r5, r0
 800c172:	eb12 0804 	adds.w	r8, r2, r4
 800c176:	eb43 0905 	adc.w	r9, r3, r5
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	469a      	mov	sl, r3
 800c182:	4693      	mov	fp, r2
 800c184:	4652      	mov	r2, sl
 800c186:	465b      	mov	r3, fp
 800c188:	4640      	mov	r0, r8
 800c18a:	4649      	mov	r1, r9
 800c18c:	f7f4 f8b0 	bl	80002f0 <__aeabi_uldivmod>
 800c190:	4602      	mov	r2, r0
 800c192:	460b      	mov	r3, r1
 800c194:	4613      	mov	r3, r2
 800c196:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c19a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c19e:	d308      	bcc.n	800c1b2 <UART_SetConfig+0x9a2>
 800c1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1a6:	d204      	bcs.n	800c1b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1ae:	60da      	str	r2, [r3, #12]
 800c1b0:	e17f      	b.n	800c4b2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c1b8:	e17b      	b.n	800c4b2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	69db      	ldr	r3, [r3, #28]
 800c1be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c1c2:	f040 80bd 	bne.w	800c340 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c1c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c1ca:	2b20      	cmp	r3, #32
 800c1cc:	dc48      	bgt.n	800c260 <UART_SetConfig+0xa50>
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	db7b      	blt.n	800c2ca <UART_SetConfig+0xaba>
 800c1d2:	2b20      	cmp	r3, #32
 800c1d4:	d879      	bhi.n	800c2ca <UART_SetConfig+0xaba>
 800c1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1dc <UART_SetConfig+0x9cc>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c267 	.word	0x0800c267
 800c1e0:	0800c26f 	.word	0x0800c26f
 800c1e4:	0800c2cb 	.word	0x0800c2cb
 800c1e8:	0800c2cb 	.word	0x0800c2cb
 800c1ec:	0800c277 	.word	0x0800c277
 800c1f0:	0800c2cb 	.word	0x0800c2cb
 800c1f4:	0800c2cb 	.word	0x0800c2cb
 800c1f8:	0800c2cb 	.word	0x0800c2cb
 800c1fc:	0800c287 	.word	0x0800c287
 800c200:	0800c2cb 	.word	0x0800c2cb
 800c204:	0800c2cb 	.word	0x0800c2cb
 800c208:	0800c2cb 	.word	0x0800c2cb
 800c20c:	0800c2cb 	.word	0x0800c2cb
 800c210:	0800c2cb 	.word	0x0800c2cb
 800c214:	0800c2cb 	.word	0x0800c2cb
 800c218:	0800c2cb 	.word	0x0800c2cb
 800c21c:	0800c297 	.word	0x0800c297
 800c220:	0800c2cb 	.word	0x0800c2cb
 800c224:	0800c2cb 	.word	0x0800c2cb
 800c228:	0800c2cb 	.word	0x0800c2cb
 800c22c:	0800c2cb 	.word	0x0800c2cb
 800c230:	0800c2cb 	.word	0x0800c2cb
 800c234:	0800c2cb 	.word	0x0800c2cb
 800c238:	0800c2cb 	.word	0x0800c2cb
 800c23c:	0800c2cb 	.word	0x0800c2cb
 800c240:	0800c2cb 	.word	0x0800c2cb
 800c244:	0800c2cb 	.word	0x0800c2cb
 800c248:	0800c2cb 	.word	0x0800c2cb
 800c24c:	0800c2cb 	.word	0x0800c2cb
 800c250:	0800c2cb 	.word	0x0800c2cb
 800c254:	0800c2cb 	.word	0x0800c2cb
 800c258:	0800c2cb 	.word	0x0800c2cb
 800c25c:	0800c2bd 	.word	0x0800c2bd
 800c260:	2b40      	cmp	r3, #64	@ 0x40
 800c262:	d02e      	beq.n	800c2c2 <UART_SetConfig+0xab2>
 800c264:	e031      	b.n	800c2ca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c266:	f7fb fdfd 	bl	8007e64 <HAL_RCC_GetPCLK1Freq>
 800c26a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c26c:	e033      	b.n	800c2d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c26e:	f7fb fe0f 	bl	8007e90 <HAL_RCC_GetPCLK2Freq>
 800c272:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c274:	e02f      	b.n	800c2d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7fd fcca 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c284:	e027      	b.n	800c2d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c286:	f107 0318 	add.w	r3, r7, #24
 800c28a:	4618      	mov	r0, r3
 800c28c:	f7fd fe16 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c290:	69fb      	ldr	r3, [r7, #28]
 800c292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c294:	e01f      	b.n	800c2d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c296:	4b69      	ldr	r3, [pc, #420]	@ (800c43c <UART_SetConfig+0xc2c>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 0320 	and.w	r3, r3, #32
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d009      	beq.n	800c2b6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2a2:	4b66      	ldr	r3, [pc, #408]	@ (800c43c <UART_SetConfig+0xc2c>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	08db      	lsrs	r3, r3, #3
 800c2a8:	f003 0303 	and.w	r3, r3, #3
 800c2ac:	4a64      	ldr	r2, [pc, #400]	@ (800c440 <UART_SetConfig+0xc30>)
 800c2ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2b4:	e00f      	b.n	800c2d6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800c2b6:	4b62      	ldr	r3, [pc, #392]	@ (800c440 <UART_SetConfig+0xc30>)
 800c2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2ba:	e00c      	b.n	800c2d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2bc:	4b61      	ldr	r3, [pc, #388]	@ (800c444 <UART_SetConfig+0xc34>)
 800c2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c0:	e009      	b.n	800c2d6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c2c8:	e005      	b.n	800c2d6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c2d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c2d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f000 80ea 	beq.w	800c4b2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e2:	4a55      	ldr	r2, [pc, #340]	@ (800c438 <UART_SetConfig+0xc28>)
 800c2e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2f0:	005a      	lsls	r2, r3, #1
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	085b      	lsrs	r3, r3, #1
 800c2f8:	441a      	add	r2, r3
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800c302:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c306:	2b0f      	cmp	r3, #15
 800c308:	d916      	bls.n	800c338 <UART_SetConfig+0xb28>
 800c30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c310:	d212      	bcs.n	800c338 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c314:	b29b      	uxth	r3, r3
 800c316:	f023 030f 	bic.w	r3, r3, #15
 800c31a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c31c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31e:	085b      	lsrs	r3, r3, #1
 800c320:	b29b      	uxth	r3, r3
 800c322:	f003 0307 	and.w	r3, r3, #7
 800c326:	b29a      	uxth	r2, r3
 800c328:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c32a:	4313      	orrs	r3, r2
 800c32c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c334:	60da      	str	r2, [r3, #12]
 800c336:	e0bc      	b.n	800c4b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c33e:	e0b8      	b.n	800c4b2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c340:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c344:	2b20      	cmp	r3, #32
 800c346:	dc4b      	bgt.n	800c3e0 <UART_SetConfig+0xbd0>
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f2c0 8087 	blt.w	800c45c <UART_SetConfig+0xc4c>
 800c34e:	2b20      	cmp	r3, #32
 800c350:	f200 8084 	bhi.w	800c45c <UART_SetConfig+0xc4c>
 800c354:	a201      	add	r2, pc, #4	@ (adr r2, 800c35c <UART_SetConfig+0xb4c>)
 800c356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c35a:	bf00      	nop
 800c35c:	0800c3e7 	.word	0x0800c3e7
 800c360:	0800c3ef 	.word	0x0800c3ef
 800c364:	0800c45d 	.word	0x0800c45d
 800c368:	0800c45d 	.word	0x0800c45d
 800c36c:	0800c3f7 	.word	0x0800c3f7
 800c370:	0800c45d 	.word	0x0800c45d
 800c374:	0800c45d 	.word	0x0800c45d
 800c378:	0800c45d 	.word	0x0800c45d
 800c37c:	0800c407 	.word	0x0800c407
 800c380:	0800c45d 	.word	0x0800c45d
 800c384:	0800c45d 	.word	0x0800c45d
 800c388:	0800c45d 	.word	0x0800c45d
 800c38c:	0800c45d 	.word	0x0800c45d
 800c390:	0800c45d 	.word	0x0800c45d
 800c394:	0800c45d 	.word	0x0800c45d
 800c398:	0800c45d 	.word	0x0800c45d
 800c39c:	0800c417 	.word	0x0800c417
 800c3a0:	0800c45d 	.word	0x0800c45d
 800c3a4:	0800c45d 	.word	0x0800c45d
 800c3a8:	0800c45d 	.word	0x0800c45d
 800c3ac:	0800c45d 	.word	0x0800c45d
 800c3b0:	0800c45d 	.word	0x0800c45d
 800c3b4:	0800c45d 	.word	0x0800c45d
 800c3b8:	0800c45d 	.word	0x0800c45d
 800c3bc:	0800c45d 	.word	0x0800c45d
 800c3c0:	0800c45d 	.word	0x0800c45d
 800c3c4:	0800c45d 	.word	0x0800c45d
 800c3c8:	0800c45d 	.word	0x0800c45d
 800c3cc:	0800c45d 	.word	0x0800c45d
 800c3d0:	0800c45d 	.word	0x0800c45d
 800c3d4:	0800c45d 	.word	0x0800c45d
 800c3d8:	0800c45d 	.word	0x0800c45d
 800c3dc:	0800c44f 	.word	0x0800c44f
 800c3e0:	2b40      	cmp	r3, #64	@ 0x40
 800c3e2:	d037      	beq.n	800c454 <UART_SetConfig+0xc44>
 800c3e4:	e03a      	b.n	800c45c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c3e6:	f7fb fd3d 	bl	8007e64 <HAL_RCC_GetPCLK1Freq>
 800c3ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3ec:	e03c      	b.n	800c468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c3ee:	f7fb fd4f 	bl	8007e90 <HAL_RCC_GetPCLK2Freq>
 800c3f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c3f4:	e038      	b.n	800c468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f7fd fc0a 	bl	8009c14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c404:	e030      	b.n	800c468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c406:	f107 0318 	add.w	r3, r7, #24
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fd fd56 	bl	8009ebc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c414:	e028      	b.n	800c468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c416:	4b09      	ldr	r3, [pc, #36]	@ (800c43c <UART_SetConfig+0xc2c>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f003 0320 	and.w	r3, r3, #32
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d012      	beq.n	800c448 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c422:	4b06      	ldr	r3, [pc, #24]	@ (800c43c <UART_SetConfig+0xc2c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	08db      	lsrs	r3, r3, #3
 800c428:	f003 0303 	and.w	r3, r3, #3
 800c42c:	4a04      	ldr	r2, [pc, #16]	@ (800c440 <UART_SetConfig+0xc30>)
 800c42e:	fa22 f303 	lsr.w	r3, r2, r3
 800c432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c434:	e018      	b.n	800c468 <UART_SetConfig+0xc58>
 800c436:	bf00      	nop
 800c438:	0800e720 	.word	0x0800e720
 800c43c:	58024400 	.word	0x58024400
 800c440:	03d09000 	.word	0x03d09000
 800c444:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800c448:	4b24      	ldr	r3, [pc, #144]	@ (800c4dc <UART_SetConfig+0xccc>)
 800c44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c44c:	e00c      	b.n	800c468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c44e:	4b24      	ldr	r3, [pc, #144]	@ (800c4e0 <UART_SetConfig+0xcd0>)
 800c450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c452:	e009      	b.n	800c468 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c45a:	e005      	b.n	800c468 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800c45c:	2300      	movs	r3, #0
 800c45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c466:	bf00      	nop
    }

    if (pclk != 0U)
 800c468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d021      	beq.n	800c4b2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c472:	4a1c      	ldr	r2, [pc, #112]	@ (800c4e4 <UART_SetConfig+0xcd4>)
 800c474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c478:	461a      	mov	r2, r3
 800c47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c47c:	fbb3 f2f2 	udiv	r2, r3, r2
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	085b      	lsrs	r3, r3, #1
 800c486:	441a      	add	r2, r3
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c490:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c494:	2b0f      	cmp	r3, #15
 800c496:	d909      	bls.n	800c4ac <UART_SetConfig+0xc9c>
 800c498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c49a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c49e:	d205      	bcs.n	800c4ac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c4a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	60da      	str	r2, [r3, #12]
 800c4aa:	e002      	b.n	800c4b2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c4ce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3748      	adds	r7, #72	@ 0x48
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4dc:	03d09000 	.word	0x03d09000
 800c4e0:	003d0900 	.word	0x003d0900
 800c4e4:	0800e720 	.word	0x0800e720

0800c4e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f4:	f003 0308 	and.w	r3, r3, #8
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00a      	beq.n	800c512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	430a      	orrs	r2, r1
 800c510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00a      	beq.n	800c534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	430a      	orrs	r2, r1
 800c532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00a      	beq.n	800c556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	430a      	orrs	r2, r1
 800c554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00a      	beq.n	800c578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	430a      	orrs	r2, r1
 800c576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57c:	f003 0310 	and.w	r3, r3, #16
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00a      	beq.n	800c59a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	430a      	orrs	r2, r1
 800c598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c59e:	f003 0320 	and.w	r3, r3, #32
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00a      	beq.n	800c5bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	430a      	orrs	r2, r1
 800c5ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d01a      	beq.n	800c5fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	430a      	orrs	r2, r1
 800c5dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5e6:	d10a      	bne.n	800c5fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	430a      	orrs	r2, r1
 800c61e:	605a      	str	r2, [r3, #4]
  }
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b098      	sub	sp, #96	@ 0x60
 800c630:	af02      	add	r7, sp, #8
 800c632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c63c:	f7f5 fc8a 	bl	8001f54 <HAL_GetTick>
 800c640:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0308 	and.w	r3, r3, #8
 800c64c:	2b08      	cmp	r3, #8
 800c64e:	d12f      	bne.n	800c6b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c658:	2200      	movs	r2, #0
 800c65a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f88e 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d022      	beq.n	800c6b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c672:	e853 3f00 	ldrex	r3, [r3]
 800c676:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c67a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c67e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	461a      	mov	r2, r3
 800c686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c688:	647b      	str	r3, [r7, #68]	@ 0x44
 800c68a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c68e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c690:	e841 2300 	strex	r3, r2, [r1]
 800c694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1e6      	bne.n	800c66a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e063      	b.n	800c778 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0304 	and.w	r3, r3, #4
 800c6ba:	2b04      	cmp	r3, #4
 800c6bc:	d149      	bne.n	800c752 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 f857 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d03c      	beq.n	800c752 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e0:	e853 3f00 	ldrex	r3, [r3]
 800c6e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6fe:	e841 2300 	strex	r3, r2, [r1]
 800c702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1e6      	bne.n	800c6d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	3308      	adds	r3, #8
 800c710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	e853 3f00 	ldrex	r3, [r3]
 800c718:	60fb      	str	r3, [r7, #12]
   return(result);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f023 0301 	bic.w	r3, r3, #1
 800c720:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	3308      	adds	r3, #8
 800c728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c72a:	61fa      	str	r2, [r7, #28]
 800c72c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72e:	69b9      	ldr	r1, [r7, #24]
 800c730:	69fa      	ldr	r2, [r7, #28]
 800c732:	e841 2300 	strex	r3, r2, [r1]
 800c736:	617b      	str	r3, [r7, #20]
   return(result);
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1e5      	bne.n	800c70a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2220      	movs	r2, #32
 800c742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e012      	b.n	800c778 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2220      	movs	r2, #32
 800c756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2220      	movs	r2, #32
 800c75e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3758      	adds	r7, #88	@ 0x58
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	4613      	mov	r3, r2
 800c78e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c790:	e04f      	b.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c798:	d04b      	beq.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c79a:	f7f5 fbdb 	bl	8001f54 <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d302      	bcc.n	800c7b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	e04e      	b.n	800c852 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 0304 	and.w	r3, r3, #4
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d037      	beq.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2b80      	cmp	r3, #128	@ 0x80
 800c7c6:	d034      	beq.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b40      	cmp	r3, #64	@ 0x40
 800c7cc:	d031      	beq.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	69db      	ldr	r3, [r3, #28]
 800c7d4:	f003 0308 	and.w	r3, r3, #8
 800c7d8:	2b08      	cmp	r3, #8
 800c7da:	d110      	bne.n	800c7fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f000 f839 	bl	800c85c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2208      	movs	r2, #8
 800c7ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e029      	b.n	800c852 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	69db      	ldr	r3, [r3, #28]
 800c804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c80c:	d111      	bne.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c816:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f000 f81f 	bl	800c85c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2220      	movs	r2, #32
 800c822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c82e:	2303      	movs	r3, #3
 800c830:	e00f      	b.n	800c852 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69da      	ldr	r2, [r3, #28]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	4013      	ands	r3, r2
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	429a      	cmp	r2, r3
 800c840:	bf0c      	ite	eq
 800c842:	2301      	moveq	r3, #1
 800c844:	2300      	movne	r3, #0
 800c846:	b2db      	uxtb	r3, r3
 800c848:	461a      	mov	r2, r3
 800c84a:	79fb      	ldrb	r3, [r7, #7]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d0a0      	beq.n	800c792 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
	...

0800c85c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b095      	sub	sp, #84	@ 0x54
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c882:	643b      	str	r3, [r7, #64]	@ 0x40
 800c884:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c886:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c888:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c88a:	e841 2300 	strex	r3, r2, [r1]
 800c88e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1e6      	bne.n	800c864 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	3308      	adds	r3, #8
 800c89c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89e:	6a3b      	ldr	r3, [r7, #32]
 800c8a0:	e853 3f00 	ldrex	r3, [r3]
 800c8a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8a6:	69fa      	ldr	r2, [r7, #28]
 800c8a8:	4b1e      	ldr	r3, [pc, #120]	@ (800c924 <UART_EndRxTransfer+0xc8>)
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3308      	adds	r3, #8
 800c8b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8be:	e841 2300 	strex	r3, r2, [r1]
 800c8c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1e5      	bne.n	800c896 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d118      	bne.n	800c904 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	e853 3f00 	ldrex	r3, [r3]
 800c8de:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	f023 0310 	bic.w	r3, r3, #16
 800c8e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8f0:	61bb      	str	r3, [r7, #24]
 800c8f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f4:	6979      	ldr	r1, [r7, #20]
 800c8f6:	69ba      	ldr	r2, [r7, #24]
 800c8f8:	e841 2300 	strex	r3, r2, [r1]
 800c8fc:	613b      	str	r3, [r7, #16]
   return(result);
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1e6      	bne.n	800c8d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2220      	movs	r2, #32
 800c908:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c918:	bf00      	nop
 800c91a:	3754      	adds	r7, #84	@ 0x54
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr
 800c924:	effffffe 	.word	0xeffffffe

0800c928 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c934:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2200      	movs	r2, #0
 800c93a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f7fe ff4c 	bl	800b7e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c94c:	bf00      	nop
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b088      	sub	sp, #32
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	e853 3f00 	ldrex	r3, [r3]
 800c968:	60bb      	str	r3, [r7, #8]
   return(result);
 800c96a:	68bb      	ldr	r3, [r7, #8]
 800c96c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c970:	61fb      	str	r3, [r7, #28]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	61bb      	str	r3, [r7, #24]
 800c97c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97e:	6979      	ldr	r1, [r7, #20]
 800c980:	69ba      	ldr	r2, [r7, #24]
 800c982:	e841 2300 	strex	r3, r2, [r1]
 800c986:	613b      	str	r3, [r7, #16]
   return(result);
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e6      	bne.n	800c95c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2220      	movs	r2, #32
 800c992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f7fe ff17 	bl	800b7d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9a2:	bf00      	nop
 800c9a4:	3720      	adds	r7, #32
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b083      	sub	sp, #12
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c9b2:	bf00      	nop
 800c9b4:	370c      	adds	r7, #12
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr

0800c9be <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c9be:	b480      	push	{r7}
 800c9c0:	b083      	sub	sp, #12
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c9c6:	bf00      	nop
 800c9c8:	370c      	adds	r7, #12
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d0:	4770      	bx	lr

0800c9d2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c9d2:	b480      	push	{r7}
 800c9d4:	b083      	sub	sp, #12
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c9da:	bf00      	nop
 800c9dc:	370c      	adds	r7, #12
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b085      	sub	sp, #20
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d101      	bne.n	800c9fc <HAL_UARTEx_DisableFifoMode+0x16>
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	e027      	b.n	800ca4c <HAL_UARTEx_DisableFifoMode+0x66>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2201      	movs	r2, #1
 800ca00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2224      	movs	r2, #36	@ 0x24
 800ca08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f022 0201 	bic.w	r2, r2, #1
 800ca22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ca2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2220      	movs	r2, #32
 800ca3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca4a:	2300      	movs	r3, #0
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3714      	adds	r7, #20
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d101      	bne.n	800ca70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	e02d      	b.n	800cacc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2224      	movs	r2, #36	@ 0x24
 800ca7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	681a      	ldr	r2, [r3, #0]
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f022 0201 	bic.w	r2, r2, #1
 800ca96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	683a      	ldr	r2, [r7, #0]
 800caa8:	430a      	orrs	r2, r1
 800caaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f000 f84f 	bl	800cb50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68fa      	ldr	r2, [r7, #12]
 800cab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2220      	movs	r2, #32
 800cabe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d101      	bne.n	800caec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cae8:	2302      	movs	r3, #2
 800caea:	e02d      	b.n	800cb48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2224      	movs	r2, #36	@ 0x24
 800caf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f022 0201 	bic.w	r2, r2, #1
 800cb12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	683a      	ldr	r2, [r7, #0]
 800cb24:	430a      	orrs	r2, r1
 800cb26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f811 	bl	800cb50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2220      	movs	r2, #32
 800cb3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cb46:	2300      	movs	r3, #0
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b085      	sub	sp, #20
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d108      	bne.n	800cb72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cb70:	e031      	b.n	800cbd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cb72:	2310      	movs	r3, #16
 800cb74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cb76:	2310      	movs	r3, #16
 800cb78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	0e5b      	lsrs	r3, r3, #25
 800cb82:	b2db      	uxtb	r3, r3
 800cb84:	f003 0307 	and.w	r3, r3, #7
 800cb88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	0f5b      	lsrs	r3, r3, #29
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	f003 0307 	and.w	r3, r3, #7
 800cb98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb9a:	7bbb      	ldrb	r3, [r7, #14]
 800cb9c:	7b3a      	ldrb	r2, [r7, #12]
 800cb9e:	4911      	ldr	r1, [pc, #68]	@ (800cbe4 <UARTEx_SetNbDataToProcess+0x94>)
 800cba0:	5c8a      	ldrb	r2, [r1, r2]
 800cba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cba6:	7b3a      	ldrb	r2, [r7, #12]
 800cba8:	490f      	ldr	r1, [pc, #60]	@ (800cbe8 <UARTEx_SetNbDataToProcess+0x98>)
 800cbaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cbac:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbb0:	b29a      	uxth	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
 800cbba:	7b7a      	ldrb	r2, [r7, #13]
 800cbbc:	4909      	ldr	r1, [pc, #36]	@ (800cbe4 <UARTEx_SetNbDataToProcess+0x94>)
 800cbbe:	5c8a      	ldrb	r2, [r1, r2]
 800cbc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cbc4:	7b7a      	ldrb	r2, [r7, #13]
 800cbc6:	4908      	ldr	r1, [pc, #32]	@ (800cbe8 <UARTEx_SetNbDataToProcess+0x98>)
 800cbc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cbca:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbce:	b29a      	uxth	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cbd6:	bf00      	nop
 800cbd8:	3714      	adds	r7, #20
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	0800e738 	.word	0x0800e738
 800cbe8:	0800e740 	.word	0x0800e740

0800cbec <arm_correlate_f32>:
 800cbec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf0:	4299      	cmp	r1, r3
 800cbf2:	b08d      	sub	sp, #52	@ 0x34
 800cbf4:	f0c0 824c 	bcc.w	800d090 <arm_correlate_f32+0x4a4>
 800cbf8:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800cbfa:	eba1 0c03 	sub.w	ip, r1, r3
 800cbfe:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 800cc02:	f04f 0e04 	mov.w	lr, #4
 800cc06:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 800cc0a:	3101      	adds	r1, #1
 800cc0c:	1ac9      	subs	r1, r1, r3
 800cc0e:	3c01      	subs	r4, #1
 800cc10:	1e5e      	subs	r6, r3, #1
 800cc12:	9102      	str	r1, [sp, #8]
 800cc14:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800cc18:	f000 8294 	beq.w	800d144 <arm_correlate_f32+0x558>
 800cc1c:	eddf 7a53 	vldr	s15, [pc, #332]	@ 800cd6c <arm_correlate_f32+0x180>
 800cc20:	f1a1 0804 	sub.w	r8, r1, #4
 800cc24:	46e1      	mov	r9, ip
 800cc26:	4605      	mov	r5, r0
 800cc28:	2401      	movs	r4, #1
 800cc2a:	f014 0703 	ands.w	r7, r4, #3
 800cc2e:	d01b      	beq.n	800cc68 <arm_correlate_f32+0x7c>
 800cc30:	ed91 7a00 	vldr	s14, [r1]
 800cc34:	edd5 6a00 	vldr	s13, [r5]
 800cc38:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc3c:	3f01      	subs	r7, #1
 800cc3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc42:	d011      	beq.n	800cc68 <arm_correlate_f32+0x7c>
 800cc44:	ed91 7a01 	vldr	s14, [r1, #4]
 800cc48:	edd5 6a01 	vldr	s13, [r5, #4]
 800cc4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc50:	2f01      	cmp	r7, #1
 800cc52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc56:	d007      	beq.n	800cc68 <arm_correlate_f32+0x7c>
 800cc58:	ed95 7a02 	vldr	s14, [r5, #8]
 800cc5c:	edd1 6a02 	vldr	s13, [r1, #8]
 800cc60:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cc64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc68:	1c67      	adds	r7, r4, #1
 800cc6a:	42bb      	cmp	r3, r7
 800cc6c:	edc9 7a00 	vstr	s15, [r9]
 800cc70:	4641      	mov	r1, r8
 800cc72:	44f1      	add	r9, lr
 800cc74:	d03a      	beq.n	800ccec <arm_correlate_f32+0x100>
 800cc76:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 800cc7a:	f000 8267 	beq.w	800d14c <arm_correlate_f32+0x560>
 800cc7e:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800cc82:	f100 0110 	add.w	r1, r0, #16
 800cc86:	eddf 7a39 	vldr	s15, [pc, #228]	@ 800cd6c <arm_correlate_f32+0x180>
 800cc8a:	eb01 050a 	add.w	r5, r1, sl
 800cc8e:	f108 0410 	add.w	r4, r8, #16
 800cc92:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cc96:	ed54 3a04 	vldr	s7, [r4, #-16]
 800cc9a:	ed11 6a03 	vldr	s12, [r1, #-12]
 800cc9e:	ed14 4a03 	vldr	s8, [r4, #-12]
 800cca2:	ed51 6a02 	vldr	s13, [r1, #-8]
 800cca6:	ed54 4a02 	vldr	s9, [r4, #-8]
 800ccaa:	ed51 5a01 	vldr	s11, [r1, #-4]
 800ccae:	ed14 5a01 	vldr	s10, [r4, #-4]
 800ccb2:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ccb6:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ccba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccbe:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800ccc2:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ccc6:	ee65 6a85 	vmul.f32	s13, s11, s10
 800ccca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ccce:	3110      	adds	r1, #16
 800ccd0:	428d      	cmp	r5, r1
 800ccd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccd6:	f104 0410 	add.w	r4, r4, #16
 800ccda:	d1da      	bne.n	800cc92 <arm_correlate_f32+0xa6>
 800ccdc:	eb00 050a 	add.w	r5, r0, sl
 800cce0:	eb08 010a 	add.w	r1, r8, sl
 800cce4:	f1a8 0804 	sub.w	r8, r8, #4
 800cce8:	463c      	mov	r4, r7
 800ccea:	e79e      	b.n	800cc2a <arm_correlate_f32+0x3e>
 800ccec:	2b03      	cmp	r3, #3
 800ccee:	fb0e cc04 	mla	ip, lr, r4, ip
 800ccf2:	f240 81dd 	bls.w	800d0b0 <arm_correlate_f32+0x4c4>
 800ccf6:	9b02      	ldr	r3, [sp, #8]
 800ccf8:	0899      	lsrs	r1, r3, #2
 800ccfa:	9103      	str	r1, [sp, #12]
 800ccfc:	f000 8220 	beq.w	800d140 <arm_correlate_f32+0x554>
 800cd00:	08bb      	lsrs	r3, r7, #2
 800cd02:	f007 0403 	and.w	r4, r7, #3
 800cd06:	9300      	str	r3, [sp, #0]
 800cd08:	011b      	lsls	r3, r3, #4
 800cd0a:	f103 0b0c 	add.w	fp, r3, #12
 800cd0e:	18d5      	adds	r5, r2, r3
 800cd10:	1e63      	subs	r3, r4, #1
 800cd12:	0109      	lsls	r1, r1, #4
 800cd14:	9306      	str	r3, [sp, #24]
 800cd16:	f100 080c 	add.w	r8, r0, #12
 800cd1a:	9401      	str	r4, [sp, #4]
 800cd1c:	9104      	str	r1, [sp, #16]
 800cd1e:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800cd22:	4441      	add	r1, r8
 800cd24:	f102 0310 	add.w	r3, r2, #16
 800cd28:	e9cd 6009 	strd	r6, r0, [sp, #36]	@ 0x24
 800cd2c:	9e06      	ldr	r6, [sp, #24]
 800cd2e:	9405      	str	r4, [sp, #20]
 800cd30:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 800cd34:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 800cd38:	46e1      	mov	r9, ip
 800cd3a:	4483      	add	fp, r0
 800cd3c:	460f      	mov	r7, r1
 800cd3e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800cd40:	469c      	mov	ip, r3
 800cd42:	ed9f 6a0a 	vldr	s12, [pc, #40]	@ 800cd6c <arm_correlate_f32+0x180>
 800cd46:	ed58 1a03 	vldr	s3, [r8, #-12]
 800cd4a:	ed18 2a02 	vldr	s4, [r8, #-8]
 800cd4e:	ed58 2a01 	vldr	s5, [r8, #-4]
 800cd52:	ed98 0a00 	vldr	s0, [r8]
 800cd56:	9900      	ldr	r1, [sp, #0]
 800cd58:	eef0 5a46 	vmov.f32	s11, s12
 800cd5c:	eeb0 5a46 	vmov.f32	s10, s12
 800cd60:	eef0 4a46 	vmov.f32	s9, s12
 800cd64:	4663      	mov	r3, ip
 800cd66:	4642      	mov	r2, r8
 800cd68:	e005      	b.n	800cd76 <arm_correlate_f32+0x18a>
 800cd6a:	bf00      	nop
 800cd6c:	00000000 	.word	0x00000000
 800cd70:	ed90 0a04 	vldr	s0, [r0, #16]
 800cd74:	3210      	adds	r2, #16
 800cd76:	ed53 6a04 	vldr	s13, [r3, #-16]
 800cd7a:	ed13 7a03 	vldr	s14, [r3, #-12]
 800cd7e:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cd82:	ed13 1a01 	vldr	s2, [r3, #-4]
 800cd86:	ee62 3a26 	vmul.f32	s7, s4, s13
 800cd8a:	ee22 4aa6 	vmul.f32	s8, s5, s13
 800cd8e:	ee61 0aa6 	vmul.f32	s1, s3, s13
 800cd92:	edd2 1a01 	vldr	s3, [r2, #4]
 800cd96:	ee66 6a80 	vmul.f32	s13, s13, s0
 800cd9a:	ee22 3a07 	vmul.f32	s6, s4, s14
 800cd9e:	ee33 5a85 	vadd.f32	s10, s7, s10
 800cda2:	ee74 5a25 	vadd.f32	s11, s8, s11
 800cda6:	ee62 3a87 	vmul.f32	s7, s5, s14
 800cdaa:	ee20 4a07 	vmul.f32	s8, s0, s14
 800cdae:	ee70 4aa4 	vadd.f32	s9, s1, s9
 800cdb2:	ee36 6a86 	vadd.f32	s12, s13, s12
 800cdb6:	ed92 2a02 	vldr	s4, [r2, #8]
 800cdba:	ee27 7a21 	vmul.f32	s14, s14, s3
 800cdbe:	ee73 3a85 	vadd.f32	s7, s7, s10
 800cdc2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800cdc6:	ee20 5a27 	vmul.f32	s10, s0, s15
 800cdca:	ee33 3a24 	vadd.f32	s6, s6, s9
 800cdce:	ee34 4a25 	vadd.f32	s8, s8, s11
 800cdd2:	ee62 4aa7 	vmul.f32	s9, s5, s15
 800cdd6:	ee61 5aa7 	vmul.f32	s11, s3, s15
 800cdda:	edd2 2a03 	vldr	s5, [r2, #12]
 800cdde:	ee67 7a82 	vmul.f32	s15, s15, s4
 800cde2:	ee35 5a23 	vadd.f32	s10, s10, s7
 800cde6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cdea:	ee74 4a83 	vadd.f32	s9, s9, s6
 800cdee:	ee20 0a01 	vmul.f32	s0, s0, s2
 800cdf2:	ee61 3a81 	vmul.f32	s7, s3, s2
 800cdf6:	ee75 5a84 	vadd.f32	s11, s11, s8
 800cdfa:	ee22 7a01 	vmul.f32	s14, s4, s2
 800cdfe:	ee21 6a22 	vmul.f32	s12, s2, s5
 800ce02:	3901      	subs	r1, #1
 800ce04:	f103 0310 	add.w	r3, r3, #16
 800ce08:	ee70 4a24 	vadd.f32	s9, s0, s9
 800ce0c:	ee33 5a85 	vadd.f32	s10, s7, s10
 800ce10:	ee77 5a25 	vadd.f32	s11, s14, s11
 800ce14:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ce18:	4610      	mov	r0, r2
 800ce1a:	d1a9      	bne.n	800cd70 <arm_correlate_f32+0x184>
 800ce1c:	9b01      	ldr	r3, [sp, #4]
 800ce1e:	b3f3      	cbz	r3, 800ce9e <arm_correlate_f32+0x2b2>
 800ce20:	edd5 7a00 	vldr	s15, [r5]
 800ce24:	ed9b 4a00 	vldr	s8, [fp]
 800ce28:	ee61 6aa7 	vmul.f32	s13, s3, s15
 800ce2c:	ee62 3a27 	vmul.f32	s7, s4, s15
 800ce30:	ee22 7aa7 	vmul.f32	s14, s5, s15
 800ce34:	ee64 7a27 	vmul.f32	s15, s8, s15
 800ce38:	ee74 4aa6 	vadd.f32	s9, s9, s13
 800ce3c:	ee35 5a23 	vadd.f32	s10, s10, s7
 800ce40:	ee75 5a87 	vadd.f32	s11, s11, s14
 800ce44:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ce48:	b34e      	cbz	r6, 800ce9e <arm_correlate_f32+0x2b2>
 800ce4a:	edd5 7a01 	vldr	s15, [r5, #4]
 800ce4e:	eddb 6a01 	vldr	s13, [fp, #4]
 800ce52:	ee22 7a27 	vmul.f32	s14, s4, s15
 800ce56:	ee22 3aa7 	vmul.f32	s6, s5, s15
 800ce5a:	ee67 3a84 	vmul.f32	s7, s15, s8
 800ce5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce62:	2e01      	cmp	r6, #1
 800ce64:	ee74 4a87 	vadd.f32	s9, s9, s14
 800ce68:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ce6c:	ee75 5aa3 	vadd.f32	s11, s11, s7
 800ce70:	ee36 6a27 	vadd.f32	s12, s12, s15
 800ce74:	d013      	beq.n	800ce9e <arm_correlate_f32+0x2b2>
 800ce76:	ed95 7a02 	vldr	s14, [r5, #8]
 800ce7a:	eddb 3a02 	vldr	s7, [fp, #8]
 800ce7e:	ee62 7a87 	vmul.f32	s15, s5, s14
 800ce82:	ee27 4a04 	vmul.f32	s8, s14, s8
 800ce86:	ee67 6a26 	vmul.f32	s13, s14, s13
 800ce8a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800ce8e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800ce92:	ee35 5a04 	vadd.f32	s10, s10, s8
 800ce96:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800ce9a:	ee36 6a07 	vadd.f32	s12, s12, s14
 800ce9e:	f108 0810 	add.w	r8, r8, #16
 800cea2:	eb09 020e 	add.w	r2, r9, lr
 800cea6:	eb0a 030e 	add.w	r3, sl, lr
 800ceaa:	4547      	cmp	r7, r8
 800ceac:	edc9 4a00 	vstr	s9, [r9]
 800ceb0:	f10b 0b10 	add.w	fp, fp, #16
 800ceb4:	ed82 5a00 	vstr	s10, [r2]
 800ceb8:	44a1      	add	r9, r4
 800ceba:	edca 5a00 	vstr	s11, [sl]
 800cebe:	ed83 6a00 	vstr	s12, [r3]
 800cec2:	44a2      	add	sl, r4
 800cec4:	f47f af3d 	bne.w	800cd42 <arm_correlate_f32+0x156>
 800cec8:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 800cecc:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	@ 0x24
 800ced0:	9b03      	ldr	r3, [sp, #12]
 800ced2:	9c05      	ldr	r4, [sp, #20]
 800ced4:	9904      	ldr	r1, [sp, #16]
 800ced6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ced8:	fb04 cc03 	mla	ip, r4, r3, ip
 800cedc:	4401      	add	r1, r0
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	460d      	mov	r5, r1
 800cee2:	9303      	str	r3, [sp, #12]
 800cee4:	9b02      	ldr	r3, [sp, #8]
 800cee6:	f013 0303 	ands.w	r3, r3, #3
 800ceea:	9301      	str	r3, [sp, #4]
 800ceec:	d071      	beq.n	800cfd2 <arm_correlate_f32+0x3e6>
 800ceee:	9903      	ldr	r1, [sp, #12]
 800cef0:	9205      	str	r2, [sp, #20]
 800cef2:	f007 0403 	and.w	r4, r7, #3
 800cef6:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 800cefa:	1c4f      	adds	r7, r1, #1
 800cefc:	1859      	adds	r1, r3, r1
 800cefe:	1d03      	adds	r3, r0, #4
 800cf00:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800cf04:	9400      	str	r4, [sp, #0]
 800cf06:	f102 0110 	add.w	r1, r2, #16
 800cf0a:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 800cf0e:	3c01      	subs	r4, #1
 800cf10:	e9cd 6003 	strd	r6, r0, [sp, #12]
 800cf14:	eb02 090a 	add.w	r9, r2, sl
 800cf18:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800cf1c:	46e0      	mov	r8, ip
 800cf1e:	4618      	mov	r0, r3
 800cf20:	460e      	mov	r6, r1
 800cf22:	4622      	mov	r2, r4
 800cf24:	ed5f 7a6f 	vldr	s15, [pc, #-444]	@ 800cd6c <arm_correlate_f32+0x180>
 800cf28:	f105 0110 	add.w	r1, r5, #16
 800cf2c:	4633      	mov	r3, r6
 800cf2e:	465c      	mov	r4, fp
 800cf30:	ed11 7a04 	vldr	s14, [r1, #-16]
 800cf34:	ed53 3a04 	vldr	s7, [r3, #-16]
 800cf38:	ed11 6a03 	vldr	s12, [r1, #-12]
 800cf3c:	ed13 4a03 	vldr	s8, [r3, #-12]
 800cf40:	ed51 6a02 	vldr	s13, [r1, #-8]
 800cf44:	ed53 4a02 	vldr	s9, [r3, #-8]
 800cf48:	ed51 5a01 	vldr	s11, [r1, #-4]
 800cf4c:	ed13 5a01 	vldr	s10, [r3, #-4]
 800cf50:	ee27 7a23 	vmul.f32	s14, s14, s7
 800cf54:	ee26 6a04 	vmul.f32	s12, s12, s8
 800cf58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf5c:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800cf60:	ee76 7a27 	vadd.f32	s15, s12, s15
 800cf64:	ee65 6a85 	vmul.f32	s13, s11, s10
 800cf68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf6c:	3c01      	subs	r4, #1
 800cf6e:	f101 0110 	add.w	r1, r1, #16
 800cf72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf76:	f103 0310 	add.w	r3, r3, #16
 800cf7a:	d1d9      	bne.n	800cf30 <arm_correlate_f32+0x344>
 800cf7c:	9b00      	ldr	r3, [sp, #0]
 800cf7e:	4455      	add	r5, sl
 800cf80:	b1d3      	cbz	r3, 800cfb8 <arm_correlate_f32+0x3cc>
 800cf82:	ed99 7a00 	vldr	s14, [r9]
 800cf86:	edd5 6a00 	vldr	s13, [r5]
 800cf8a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cf8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf92:	b18a      	cbz	r2, 800cfb8 <arm_correlate_f32+0x3cc>
 800cf94:	ed99 7a01 	vldr	s14, [r9, #4]
 800cf98:	edd5 6a01 	vldr	s13, [r5, #4]
 800cf9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cfa0:	2a01      	cmp	r2, #1
 800cfa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfa6:	d007      	beq.n	800cfb8 <arm_correlate_f32+0x3cc>
 800cfa8:	ed95 7a02 	vldr	s14, [r5, #8]
 800cfac:	edd9 6a02 	vldr	s13, [r9, #8]
 800cfb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800cfb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cfb8:	463d      	mov	r5, r7
 800cfba:	3704      	adds	r7, #4
 800cfbc:	42b8      	cmp	r0, r7
 800cfbe:	edc8 7a00 	vstr	s15, [r8]
 800cfc2:	44f0      	add	r8, lr
 800cfc4:	d1ae      	bne.n	800cf24 <arm_correlate_f32+0x338>
 800cfc6:	9b01      	ldr	r3, [sp, #4]
 800cfc8:	9a05      	ldr	r2, [sp, #20]
 800cfca:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 800cfce:	fb0e cc03 	mla	ip, lr, r3, ip
 800cfd2:	9b02      	ldr	r3, [sp, #8]
 800cfd4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800cfd8:	08b5      	lsrs	r5, r6, #2
 800cfda:	ed5f 5a9c 	vldr	s11, [pc, #-624]	@ 800cd6c <arm_correlate_f32+0x180>
 800cfde:	f000 80ac 	beq.w	800d13a <arm_correlate_f32+0x54e>
 800cfe2:	f100 0110 	add.w	r1, r0, #16
 800cfe6:	f102 0310 	add.w	r3, r2, #16
 800cfea:	462c      	mov	r4, r5
 800cfec:	ed51 6a04 	vldr	s13, [r1, #-16]
 800cff0:	ed53 3a04 	vldr	s7, [r3, #-16]
 800cff4:	ed11 7a03 	vldr	s14, [r1, #-12]
 800cff8:	ed13 4a03 	vldr	s8, [r3, #-12]
 800cffc:	ed51 7a02 	vldr	s15, [r1, #-8]
 800d000:	ed53 4a02 	vldr	s9, [r3, #-8]
 800d004:	ed11 6a01 	vldr	s12, [r1, #-4]
 800d008:	ed13 5a01 	vldr	s10, [r3, #-4]
 800d00c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d010:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d014:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d018:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d01c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d020:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d024:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d028:	3c01      	subs	r4, #1
 800d02a:	f101 0110 	add.w	r1, r1, #16
 800d02e:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800d032:	f103 0310 	add.w	r3, r3, #16
 800d036:	d1d9      	bne.n	800cfec <arm_correlate_f32+0x400>
 800d038:	012d      	lsls	r5, r5, #4
 800d03a:	1941      	adds	r1, r0, r5
 800d03c:	4415      	add	r5, r2
 800d03e:	f016 0303 	ands.w	r3, r6, #3
 800d042:	d01b      	beq.n	800d07c <arm_correlate_f32+0x490>
 800d044:	edd5 7a00 	vldr	s15, [r5]
 800d048:	ed91 7a00 	vldr	s14, [r1]
 800d04c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d050:	3b01      	subs	r3, #1
 800d052:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d056:	d011      	beq.n	800d07c <arm_correlate_f32+0x490>
 800d058:	edd5 7a01 	vldr	s15, [r5, #4]
 800d05c:	ed91 7a01 	vldr	s14, [r1, #4]
 800d060:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d064:	2b01      	cmp	r3, #1
 800d066:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d06a:	d007      	beq.n	800d07c <arm_correlate_f32+0x490>
 800d06c:	edd1 7a02 	vldr	s15, [r1, #8]
 800d070:	ed95 7a02 	vldr	s14, [r5, #8]
 800d074:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d078:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d07c:	3e01      	subs	r6, #1
 800d07e:	edcc 5a00 	vstr	s11, [ip]
 800d082:	f100 0004 	add.w	r0, r0, #4
 800d086:	44f4      	add	ip, lr
 800d088:	d1a6      	bne.n	800cfd8 <arm_correlate_f32+0x3ec>
 800d08a:	b00d      	add	sp, #52	@ 0x34
 800d08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d090:	f103 4480 	add.w	r4, r3, #1073741824	@ 0x40000000
 800d094:	4606      	mov	r6, r0
 800d096:	3c02      	subs	r4, #2
 800d098:	4610      	mov	r0, r2
 800d09a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d09c:	440c      	add	r4, r1
 800d09e:	460d      	mov	r5, r1
 800d0a0:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4632      	mov	r2, r6
 800d0a8:	f06f 0e03 	mvn.w	lr, #3
 800d0ac:	462b      	mov	r3, r5
 800d0ae:	e5aa      	b.n	800cc06 <arm_correlate_f32+0x1a>
 800d0b0:	9902      	ldr	r1, [sp, #8]
 800d0b2:	2900      	cmp	r1, #0
 800d0b4:	d090      	beq.n	800cfd8 <arm_correlate_f32+0x3ec>
 800d0b6:	9902      	ldr	r1, [sp, #8]
 800d0b8:	ed1f 6ad4 	vldr	s12, [pc, #-848]	@ 800cd6c <arm_correlate_f32+0x180>
 800d0bc:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800d0c0:	eb00 0708 	add.w	r7, r0, r8
 800d0c4:	4601      	mov	r1, r0
 800d0c6:	4665      	mov	r5, ip
 800d0c8:	e020      	b.n	800d10c <arm_correlate_f32+0x520>
 800d0ca:	edd2 7a00 	vldr	s15, [r2]
 800d0ce:	ecb4 7a01 	vldmia	r4!, {s14}
 800d0d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d0da:	b18e      	cbz	r6, 800d100 <arm_correlate_f32+0x514>
 800d0dc:	ed92 7a01 	vldr	s14, [r2, #4]
 800d0e0:	edd1 6a01 	vldr	s13, [r1, #4]
 800d0e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d0ee:	d007      	beq.n	800d100 <arm_correlate_f32+0x514>
 800d0f0:	ed91 7a02 	vldr	s14, [r1, #8]
 800d0f4:	edd2 6a02 	vldr	s13, [r2, #8]
 800d0f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d0fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d100:	42bc      	cmp	r4, r7
 800d102:	edc5 7a00 	vstr	s15, [r5]
 800d106:	4621      	mov	r1, r4
 800d108:	4475      	add	r5, lr
 800d10a:	d00b      	beq.n	800d124 <arm_correlate_f32+0x538>
 800d10c:	460c      	mov	r4, r1
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d1db      	bne.n	800d0ca <arm_correlate_f32+0x4de>
 800d112:	1d0c      	adds	r4, r1, #4
 800d114:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800d154 <arm_correlate_f32+0x568>
 800d118:	42bc      	cmp	r4, r7
 800d11a:	edc5 7a00 	vstr	s15, [r5]
 800d11e:	4621      	mov	r1, r4
 800d120:	4475      	add	r5, lr
 800d122:	d1f3      	bne.n	800d10c <arm_correlate_f32+0x520>
 800d124:	9b02      	ldr	r3, [sp, #8]
 800d126:	4440      	add	r0, r8
 800d128:	fb0e cc03 	mla	ip, lr, r3, ip
 800d12c:	2e00      	cmp	r6, #0
 800d12e:	d0ac      	beq.n	800d08a <arm_correlate_f32+0x49e>
 800d130:	08b5      	lsrs	r5, r6, #2
 800d132:	eddf 5a08 	vldr	s11, [pc, #32]	@ 800d154 <arm_correlate_f32+0x568>
 800d136:	f47f af54 	bne.w	800cfe2 <arm_correlate_f32+0x3f6>
 800d13a:	4615      	mov	r5, r2
 800d13c:	4601      	mov	r1, r0
 800d13e:	e77e      	b.n	800d03e <arm_correlate_f32+0x452>
 800d140:	4605      	mov	r5, r0
 800d142:	e6cf      	b.n	800cee4 <arm_correlate_f32+0x2f8>
 800d144:	9902      	ldr	r1, [sp, #8]
 800d146:	2900      	cmp	r1, #0
 800d148:	d1b5      	bne.n	800d0b6 <arm_correlate_f32+0x4ca>
 800d14a:	e79e      	b.n	800d08a <arm_correlate_f32+0x49e>
 800d14c:	eddf 7a01 	vldr	s15, [pc, #4]	@ 800d154 <arm_correlate_f32+0x568>
 800d150:	4605      	mov	r5, r0
 800d152:	e5c7      	b.n	800cce4 <arm_correlate_f32+0xf8>
 800d154:	00000000 	.word	0x00000000

0800d158 <arm_conv_f32>:
 800d158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d15c:	b08b      	sub	sp, #44	@ 0x2c
 800d15e:	4299      	cmp	r1, r3
 800d160:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800d162:	d205      	bcs.n	800d170 <arm_conv_f32+0x18>
 800d164:	4606      	mov	r6, r0
 800d166:	460c      	mov	r4, r1
 800d168:	4610      	mov	r0, r2
 800d16a:	4619      	mov	r1, r3
 800d16c:	4632      	mov	r2, r6
 800d16e:	4623      	mov	r3, r4
 800d170:	f103 4b80 	add.w	fp, r3, #1073741824	@ 0x40000000
 800d174:	3101      	adds	r1, #1
 800d176:	1ac9      	subs	r1, r1, r3
 800d178:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d17c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800d180:	9101      	str	r1, [sp, #4]
 800d182:	1e59      	subs	r1, r3, #1
 800d184:	eb02 070b 	add.w	r7, r2, fp
 800d188:	f000 8277 	beq.w	800d67a <arm_conv_f32+0x522>
 800d18c:	eddf 7aaf 	vldr	s15, [pc, #700]	@ 800d44c <arm_conv_f32+0x2f4>
 800d190:	f102 0904 	add.w	r9, r2, #4
 800d194:	46aa      	mov	sl, r5
 800d196:	4680      	mov	r8, r0
 800d198:	2401      	movs	r4, #1
 800d19a:	f014 0603 	ands.w	r6, r4, #3
 800d19e:	d01b      	beq.n	800d1d8 <arm_conv_f32+0x80>
 800d1a0:	ed92 7a00 	vldr	s14, [r2]
 800d1a4:	edd8 6a00 	vldr	s13, [r8]
 800d1a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1ac:	3e01      	subs	r6, #1
 800d1ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d1b2:	d011      	beq.n	800d1d8 <arm_conv_f32+0x80>
 800d1b4:	ed12 7a01 	vldr	s14, [r2, #-4]
 800d1b8:	edd8 6a01 	vldr	s13, [r8, #4]
 800d1bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1c0:	2e01      	cmp	r6, #1
 800d1c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d1c6:	d007      	beq.n	800d1d8 <arm_conv_f32+0x80>
 800d1c8:	ed98 7a02 	vldr	s14, [r8, #8]
 800d1cc:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d1d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d1d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d1d8:	3401      	adds	r4, #1
 800d1da:	42a3      	cmp	r3, r4
 800d1dc:	ecea 7a01 	vstmia	sl!, {s15}
 800d1e0:	464a      	mov	r2, r9
 800d1e2:	d03a      	beq.n	800d25a <arm_conv_f32+0x102>
 800d1e4:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 800d1e8:	f000 824c 	beq.w	800d684 <arm_conv_f32+0x52c>
 800d1ec:	f100 0210 	add.w	r2, r0, #16
 800d1f0:	ea4f 180e 	mov.w	r8, lr, lsl #4
 800d1f4:	eddf 7a95 	vldr	s15, [pc, #596]	@ 800d44c <arm_conv_f32+0x2f4>
 800d1f8:	eb02 0c08 	add.w	ip, r2, r8
 800d1fc:	f1a9 0610 	sub.w	r6, r9, #16
 800d200:	ed12 7a04 	vldr	s14, [r2, #-16]
 800d204:	edd6 3a04 	vldr	s7, [r6, #16]
 800d208:	ed12 6a03 	vldr	s12, [r2, #-12]
 800d20c:	ed96 4a03 	vldr	s8, [r6, #12]
 800d210:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d214:	edd6 4a02 	vldr	s9, [r6, #8]
 800d218:	ed52 5a01 	vldr	s11, [r2, #-4]
 800d21c:	ed96 5a01 	vldr	s10, [r6, #4]
 800d220:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d224:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d22c:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800d230:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d234:	ee65 6a85 	vmul.f32	s13, s11, s10
 800d238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d23c:	3210      	adds	r2, #16
 800d23e:	4594      	cmp	ip, r2
 800d240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d244:	f1a6 0610 	sub.w	r6, r6, #16
 800d248:	d1da      	bne.n	800d200 <arm_conv_f32+0xa8>
 800d24a:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 800d24e:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800d252:	4480      	add	r8, r0
 800d254:	f109 0904 	add.w	r9, r9, #4
 800d258:	e79f      	b.n	800d19a <arm_conv_f32+0x42>
 800d25a:	2b03      	cmp	r3, #3
 800d25c:	445d      	add	r5, fp
 800d25e:	f240 80e9 	bls.w	800d434 <arm_conv_f32+0x2dc>
 800d262:	9b01      	ldr	r3, [sp, #4]
 800d264:	089a      	lsrs	r2, r3, #2
 800d266:	9202      	str	r2, [sp, #8]
 800d268:	f000 8203 	beq.w	800d672 <arm_conv_f32+0x51a>
 800d26c:	ea4f 0894 	mov.w	r8, r4, lsr #2
 800d270:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800d274:	0112      	lsls	r2, r2, #4
 800d276:	f004 0603 	and.w	r6, r4, #3
 800d27a:	9203      	str	r2, [sp, #12]
 800d27c:	f1a3 0a10 	sub.w	sl, r3, #16
 800d280:	f1a3 020c 	sub.w	r2, r3, #12
 800d284:	3b08      	subs	r3, #8
 800d286:	9204      	str	r2, [sp, #16]
 800d288:	9305      	str	r3, [sp, #20]
 800d28a:	f106 39ff 	add.w	r9, r6, #4294967295
 800d28e:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800d292:	9a03      	ldr	r2, [sp, #12]
 800d294:	f100 0c1c 	add.w	ip, r0, #28
 800d298:	e9cd 4106 	strd	r4, r1, [sp, #24]
 800d29c:	464c      	mov	r4, r9
 800d29e:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 800d2a2:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800d2a6:	f1a7 0310 	sub.w	r3, r7, #16
 800d2aa:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 800d2ae:	eb05 0b02 	add.w	fp, r5, r2
 800d2b2:	461f      	mov	r7, r3
 800d2b4:	3510      	adds	r5, #16
 800d2b6:	ed9f 6a65 	vldr	s12, [pc, #404]	@ 800d44c <arm_conv_f32+0x2f4>
 800d2ba:	ed1c 1a07 	vldr	s2, [ip, #-28]	@ 0xffffffe4
 800d2be:	ed5c 1a06 	vldr	s3, [ip, #-24]	@ 0xffffffe8
 800d2c2:	ed1c 2a05 	vldr	s4, [ip, #-20]	@ 0xffffffec
 800d2c6:	eeb0 5a46 	vmov.f32	s10, s12
 800d2ca:	eef0 4a46 	vmov.f32	s9, s12
 800d2ce:	eef0 5a46 	vmov.f32	s11, s12
 800d2d2:	463a      	mov	r2, r7
 800d2d4:	4663      	mov	r3, ip
 800d2d6:	4641      	mov	r1, r8
 800d2d8:	edd2 6a04 	vldr	s13, [r2, #16]
 800d2dc:	ed13 0a04 	vldr	s0, [r3, #-16]
 800d2e0:	ed92 7a03 	vldr	s14, [r2, #12]
 800d2e4:	edd2 7a02 	vldr	s15, [r2, #8]
 800d2e8:	edd2 0a01 	vldr	s1, [r2, #4]
 800d2ec:	ee21 3aa6 	vmul.f32	s6, s3, s13
 800d2f0:	ee62 3a26 	vmul.f32	s7, s4, s13
 800d2f4:	ee61 2a26 	vmul.f32	s5, s2, s13
 800d2f8:	ed13 1a03 	vldr	s2, [r3, #-12]
 800d2fc:	ee66 6a80 	vmul.f32	s13, s13, s0
 800d300:	ee21 4a87 	vmul.f32	s8, s3, s14
 800d304:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d308:	ee33 5a85 	vadd.f32	s10, s7, s10
 800d30c:	ee22 3a07 	vmul.f32	s6, s4, s14
 800d310:	ed53 1a02 	vldr	s3, [r3, #-8]
 800d314:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800d318:	ee36 6a86 	vadd.f32	s12, s13, s12
 800d31c:	ee60 3a07 	vmul.f32	s7, s0, s14
 800d320:	ee27 7a01 	vmul.f32	s14, s14, s2
 800d324:	ee33 3a24 	vadd.f32	s6, s6, s9
 800d328:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d32c:	ee74 2a22 	vadd.f32	s5, s8, s5
 800d330:	ee60 4a27 	vmul.f32	s9, s0, s15
 800d334:	ee22 4a27 	vmul.f32	s8, s4, s15
 800d338:	ee73 3a85 	vadd.f32	s7, s7, s10
 800d33c:	ed13 2a01 	vldr	s4, [r3, #-4]
 800d340:	ee21 5a27 	vmul.f32	s10, s2, s15
 800d344:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800d348:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d34c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d350:	ee34 4a22 	vadd.f32	s8, s8, s5
 800d354:	ee60 5a20 	vmul.f32	s11, s0, s1
 800d358:	ee21 3a20 	vmul.f32	s6, s2, s1
 800d35c:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d360:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800d364:	ee20 6a82 	vmul.f32	s12, s1, s4
 800d368:	3901      	subs	r1, #1
 800d36a:	f1a2 0210 	sub.w	r2, r2, #16
 800d36e:	ee75 5a84 	vadd.f32	s11, s11, s8
 800d372:	ee73 4a24 	vadd.f32	s9, s6, s9
 800d376:	ee37 5a05 	vadd.f32	s10, s14, s10
 800d37a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d37e:	f103 0310 	add.w	r3, r3, #16
 800d382:	d1a9      	bne.n	800d2d8 <arm_conv_f32+0x180>
 800d384:	eb0a 030c 	add.w	r3, sl, ip
 800d388:	2e00      	cmp	r6, #0
 800d38a:	d042      	beq.n	800d412 <arm_conv_f32+0x2ba>
 800d38c:	edde 7a00 	vldr	s15, [lr]
 800d390:	ed93 4a00 	vldr	s8, [r3]
 800d394:	ee61 6a27 	vmul.f32	s13, s2, s15
 800d398:	ee61 3aa7 	vmul.f32	s7, s3, s15
 800d39c:	ee22 7a27 	vmul.f32	s14, s4, s15
 800d3a0:	ee64 7a27 	vmul.f32	s15, s8, s15
 800d3a4:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800d3a8:	ee74 4aa3 	vadd.f32	s9, s9, s7
 800d3ac:	ee35 5a07 	vadd.f32	s10, s10, s14
 800d3b0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d3b4:	eb09 030c 	add.w	r3, r9, ip
 800d3b8:	b35c      	cbz	r4, 800d412 <arm_conv_f32+0x2ba>
 800d3ba:	ed5e 7a01 	vldr	s15, [lr, #-4]
 800d3be:	edd3 6a00 	vldr	s13, [r3]
 800d3c2:	ee21 7aa7 	vmul.f32	s14, s3, s15
 800d3c6:	ee22 3a27 	vmul.f32	s6, s4, s15
 800d3ca:	ee67 3a84 	vmul.f32	s7, s15, s8
 800d3ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3d2:	2c01      	cmp	r4, #1
 800d3d4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800d3d8:	ee74 4a83 	vadd.f32	s9, s9, s6
 800d3dc:	ee35 5a23 	vadd.f32	s10, s10, s7
 800d3e0:	ee36 6a27 	vadd.f32	s12, s12, s15
 800d3e4:	eb00 030c 	add.w	r3, r0, ip
 800d3e8:	d013      	beq.n	800d412 <arm_conv_f32+0x2ba>
 800d3ea:	ed1e 7a02 	vldr	s14, [lr, #-8]
 800d3ee:	edd3 3a00 	vldr	s7, [r3]
 800d3f2:	ee62 7a07 	vmul.f32	s15, s4, s14
 800d3f6:	ee27 4a04 	vmul.f32	s8, s14, s8
 800d3fa:	ee67 6a26 	vmul.f32	s13, s14, s13
 800d3fe:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d402:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d406:	ee74 4a84 	vadd.f32	s9, s9, s8
 800d40a:	ee35 5a26 	vadd.f32	s10, s10, s13
 800d40e:	ee36 6a07 	vadd.f32	s12, s12, s14
 800d412:	45ab      	cmp	fp, r5
 800d414:	ed45 5a04 	vstr	s11, [r5, #-16]
 800d418:	ed45 4a03 	vstr	s9, [r5, #-12]
 800d41c:	ed05 5a02 	vstr	s10, [r5, #-8]
 800d420:	ed05 6a01 	vstr	s12, [r5, #-4]
 800d424:	f10c 0c10 	add.w	ip, ip, #16
 800d428:	f105 0310 	add.w	r3, r5, #16
 800d42c:	f000 809e 	beq.w	800d56c <arm_conv_f32+0x414>
 800d430:	461d      	mov	r5, r3
 800d432:	e740      	b.n	800d2b6 <arm_conv_f32+0x15e>
 800d434:	9a01      	ldr	r2, [sp, #4]
 800d436:	46ac      	mov	ip, r5
 800d438:	2a00      	cmp	r2, #0
 800d43a:	d037      	beq.n	800d4ac <arm_conv_f32+0x354>
 800d43c:	9a01      	ldr	r2, [sp, #4]
 800d43e:	ed9f 6a03 	vldr	s12, [pc, #12]	@ 800d44c <arm_conv_f32+0x2f4>
 800d442:	0096      	lsls	r6, r2, #2
 800d444:	eb05 0c06 	add.w	ip, r5, r6
 800d448:	4604      	mov	r4, r0
 800d44a:	e021      	b.n	800d490 <arm_conv_f32+0x338>
 800d44c:	00000000 	.word	0x00000000
 800d450:	edd7 7a00 	vldr	s15, [r7]
 800d454:	ecb2 7a01 	vldmia	r2!, {s14}
 800d458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d45c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d460:	b189      	cbz	r1, 800d486 <arm_conv_f32+0x32e>
 800d462:	ed17 7a01 	vldr	s14, [r7, #-4]
 800d466:	edd4 6a01 	vldr	s13, [r4, #4]
 800d46a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d46e:	2b02      	cmp	r3, #2
 800d470:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d474:	d007      	beq.n	800d486 <arm_conv_f32+0x32e>
 800d476:	ed94 7a02 	vldr	s14, [r4, #8]
 800d47a:	ed57 6a02 	vldr	s13, [r7, #-8]
 800d47e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d482:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d486:	ece5 7a01 	vstmia	r5!, {s15}
 800d48a:	4565      	cmp	r5, ip
 800d48c:	4614      	mov	r4, r2
 800d48e:	d00a      	beq.n	800d4a6 <arm_conv_f32+0x34e>
 800d490:	4622      	mov	r2, r4
 800d492:	2b00      	cmp	r3, #0
 800d494:	d1dc      	bne.n	800d450 <arm_conv_f32+0x2f8>
 800d496:	ed5f 7a13 	vldr	s15, [pc, #-76]	@ 800d44c <arm_conv_f32+0x2f4>
 800d49a:	ece5 7a01 	vstmia	r5!, {s15}
 800d49e:	1d22      	adds	r2, r4, #4
 800d4a0:	4565      	cmp	r5, ip
 800d4a2:	4614      	mov	r4, r2
 800d4a4:	d1f4      	bne.n	800d490 <arm_conv_f32+0x338>
 800d4a6:	4430      	add	r0, r6
 800d4a8:	2900      	cmp	r1, #0
 800d4aa:	d059      	beq.n	800d560 <arm_conv_f32+0x408>
 800d4ac:	088d      	lsrs	r5, r1, #2
 800d4ae:	ed5f 5a19 	vldr	s11, [pc, #-100]	@ 800d44c <arm_conv_f32+0x2f4>
 800d4b2:	d058      	beq.n	800d566 <arm_conv_f32+0x40e>
 800d4b4:	f100 0210 	add.w	r2, r0, #16
 800d4b8:	f1a7 0310 	sub.w	r3, r7, #16
 800d4bc:	462c      	mov	r4, r5
 800d4be:	ed52 6a04 	vldr	s13, [r2, #-16]
 800d4c2:	edd3 3a04 	vldr	s7, [r3, #16]
 800d4c6:	ed12 7a03 	vldr	s14, [r2, #-12]
 800d4ca:	ed93 4a03 	vldr	s8, [r3, #12]
 800d4ce:	ed52 7a02 	vldr	s15, [r2, #-8]
 800d4d2:	edd3 4a02 	vldr	s9, [r3, #8]
 800d4d6:	ed12 6a01 	vldr	s12, [r2, #-4]
 800d4da:	ed93 5a01 	vldr	s10, [r3, #4]
 800d4de:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800d4e2:	ee27 7a04 	vmul.f32	s14, s14, s8
 800d4e6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800d4ea:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800d4ee:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d4f2:	ee66 6a05 	vmul.f32	s13, s12, s10
 800d4f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d4fa:	3c01      	subs	r4, #1
 800d4fc:	f102 0210 	add.w	r2, r2, #16
 800d500:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800d504:	f1a3 0310 	sub.w	r3, r3, #16
 800d508:	d1d9      	bne.n	800d4be <arm_conv_f32+0x366>
 800d50a:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 800d50e:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800d512:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800d516:	f011 0203 	ands.w	r2, r1, #3
 800d51a:	d01b      	beq.n	800d554 <arm_conv_f32+0x3fc>
 800d51c:	edd3 7a00 	vldr	s15, [r3]
 800d520:	ed95 7a00 	vldr	s14, [r5]
 800d524:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d528:	3a01      	subs	r2, #1
 800d52a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d52e:	d011      	beq.n	800d554 <arm_conv_f32+0x3fc>
 800d530:	ed53 7a01 	vldr	s15, [r3, #-4]
 800d534:	ed95 7a01 	vldr	s14, [r5, #4]
 800d538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d53c:	2a01      	cmp	r2, #1
 800d53e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d542:	d007      	beq.n	800d554 <arm_conv_f32+0x3fc>
 800d544:	edd5 7a02 	vldr	s15, [r5, #8]
 800d548:	ed13 7a02 	vldr	s14, [r3, #-8]
 800d54c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d550:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800d554:	3901      	subs	r1, #1
 800d556:	ecec 5a01 	vstmia	ip!, {s11}
 800d55a:	f100 0004 	add.w	r0, r0, #4
 800d55e:	d1a5      	bne.n	800d4ac <arm_conv_f32+0x354>
 800d560:	b00b      	add	sp, #44	@ 0x2c
 800d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d566:	463b      	mov	r3, r7
 800d568:	4605      	mov	r5, r0
 800d56a:	e7d4      	b.n	800d516 <arm_conv_f32+0x3be>
 800d56c:	9b02      	ldr	r3, [sp, #8]
 800d56e:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	9302      	str	r3, [sp, #8]
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 800d57c:	4403      	add	r3, r0
 800d57e:	465d      	mov	r5, fp
 800d580:	469e      	mov	lr, r3
 800d582:	9b01      	ldr	r3, [sp, #4]
 800d584:	f013 0c03 	ands.w	ip, r3, #3
 800d588:	d075      	beq.n	800d676 <arm_conv_f32+0x51e>
 800d58a:	9b02      	ldr	r3, [sp, #8]
 800d58c:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 800d590:	f004 0403 	and.w	r4, r4, #3
 800d594:	f104 3bff 	add.w	fp, r4, #4294967295
 800d598:	f103 0801 	add.w	r8, r3, #1
 800d59c:	ea4f 130a 	mov.w	r3, sl, lsl #4
 800d5a0:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800d5a4:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800d5a8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800d5ac:	f1a7 0210 	sub.w	r2, r7, #16
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	465b      	mov	r3, fp
 800d5b4:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 800d5b8:	468b      	mov	fp, r1
 800d5ba:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 800d5be:	4621      	mov	r1, r4
 800d5c0:	4617      	mov	r7, r2
 800d5c2:	461c      	mov	r4, r3
 800d5c4:	ed5f 7a5f 	vldr	s15, [pc, #-380]	@ 800d44c <arm_conv_f32+0x2f4>
 800d5c8:	f10e 0210 	add.w	r2, lr, #16
 800d5cc:	463b      	mov	r3, r7
 800d5ce:	4656      	mov	r6, sl
 800d5d0:	ed12 7a04 	vldr	s14, [r2, #-16]
 800d5d4:	edd3 3a04 	vldr	s7, [r3, #16]
 800d5d8:	ed12 6a03 	vldr	s12, [r2, #-12]
 800d5dc:	ed93 4a03 	vldr	s8, [r3, #12]
 800d5e0:	ed52 6a02 	vldr	s13, [r2, #-8]
 800d5e4:	edd3 4a02 	vldr	s9, [r3, #8]
 800d5e8:	ed52 5a01 	vldr	s11, [r2, #-4]
 800d5ec:	ed93 5a01 	vldr	s10, [r3, #4]
 800d5f0:	ee27 7a23 	vmul.f32	s14, s14, s7
 800d5f4:	ee26 6a04 	vmul.f32	s12, s12, s8
 800d5f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5fc:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800d600:	ee76 7a27 	vadd.f32	s15, s12, s15
 800d604:	ee65 6a85 	vmul.f32	s13, s11, s10
 800d608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d60c:	3e01      	subs	r6, #1
 800d60e:	f102 0210 	add.w	r2, r2, #16
 800d612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d616:	f1a3 0310 	sub.w	r3, r3, #16
 800d61a:	d1d9      	bne.n	800d5d0 <arm_conv_f32+0x478>
 800d61c:	4486      	add	lr, r0
 800d61e:	b1d1      	cbz	r1, 800d656 <arm_conv_f32+0x4fe>
 800d620:	ed99 7a00 	vldr	s14, [r9]
 800d624:	edde 6a00 	vldr	s13, [lr]
 800d628:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d62c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d630:	b18c      	cbz	r4, 800d656 <arm_conv_f32+0x4fe>
 800d632:	ed19 7a01 	vldr	s14, [r9, #-4]
 800d636:	edde 6a01 	vldr	s13, [lr, #4]
 800d63a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d63e:	2c01      	cmp	r4, #1
 800d640:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d644:	d007      	beq.n	800d656 <arm_conv_f32+0x4fe>
 800d646:	ed9e 7a02 	vldr	s14, [lr, #8]
 800d64a:	ed59 6a02 	vldr	s13, [r9, #-8]
 800d64e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800d652:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d656:	ece5 7a01 	vstmia	r5!, {s15}
 800d65a:	4565      	cmp	r5, ip
 800d65c:	46c6      	mov	lr, r8
 800d65e:	f108 0804 	add.w	r8, r8, #4
 800d662:	d1af      	bne.n	800d5c4 <arm_conv_f32+0x46c>
 800d664:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800d668:	4659      	mov	r1, fp
 800d66a:	9b01      	ldr	r3, [sp, #4]
 800d66c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800d670:	e71c      	b.n	800d4ac <arm_conv_f32+0x354>
 800d672:	4686      	mov	lr, r0
 800d674:	e785      	b.n	800d582 <arm_conv_f32+0x42a>
 800d676:	46ac      	mov	ip, r5
 800d678:	e7f7      	b.n	800d66a <arm_conv_f32+0x512>
 800d67a:	9a01      	ldr	r2, [sp, #4]
 800d67c:	2a00      	cmp	r2, #0
 800d67e:	f47f aedd 	bne.w	800d43c <arm_conv_f32+0x2e4>
 800d682:	e76d      	b.n	800d560 <arm_conv_f32+0x408>
 800d684:	ed5f 7a8f 	vldr	s15, [pc, #-572]	@ 800d44c <arm_conv_f32+0x2f4>
 800d688:	4680      	mov	r8, r0
 800d68a:	e5e3      	b.n	800d254 <arm_conv_f32+0xfc>

0800d68c <memset>:
 800d68c:	4402      	add	r2, r0
 800d68e:	4603      	mov	r3, r0
 800d690:	4293      	cmp	r3, r2
 800d692:	d100      	bne.n	800d696 <memset+0xa>
 800d694:	4770      	bx	lr
 800d696:	f803 1b01 	strb.w	r1, [r3], #1
 800d69a:	e7f9      	b.n	800d690 <memset+0x4>

0800d69c <__errno>:
 800d69c:	4b01      	ldr	r3, [pc, #4]	@ (800d6a4 <__errno+0x8>)
 800d69e:	6818      	ldr	r0, [r3, #0]
 800d6a0:	4770      	bx	lr
 800d6a2:	bf00      	nop
 800d6a4:	24000448 	.word	0x24000448

0800d6a8 <__libc_init_array>:
 800d6a8:	b570      	push	{r4, r5, r6, lr}
 800d6aa:	4d0d      	ldr	r5, [pc, #52]	@ (800d6e0 <__libc_init_array+0x38>)
 800d6ac:	4c0d      	ldr	r4, [pc, #52]	@ (800d6e4 <__libc_init_array+0x3c>)
 800d6ae:	1b64      	subs	r4, r4, r5
 800d6b0:	10a4      	asrs	r4, r4, #2
 800d6b2:	2600      	movs	r6, #0
 800d6b4:	42a6      	cmp	r6, r4
 800d6b6:	d109      	bne.n	800d6cc <__libc_init_array+0x24>
 800d6b8:	4d0b      	ldr	r5, [pc, #44]	@ (800d6e8 <__libc_init_array+0x40>)
 800d6ba:	4c0c      	ldr	r4, [pc, #48]	@ (800d6ec <__libc_init_array+0x44>)
 800d6bc:	f001 f818 	bl	800e6f0 <_init>
 800d6c0:	1b64      	subs	r4, r4, r5
 800d6c2:	10a4      	asrs	r4, r4, #2
 800d6c4:	2600      	movs	r6, #0
 800d6c6:	42a6      	cmp	r6, r4
 800d6c8:	d105      	bne.n	800d6d6 <__libc_init_array+0x2e>
 800d6ca:	bd70      	pop	{r4, r5, r6, pc}
 800d6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6d0:	4798      	blx	r3
 800d6d2:	3601      	adds	r6, #1
 800d6d4:	e7ee      	b.n	800d6b4 <__libc_init_array+0xc>
 800d6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6da:	4798      	blx	r3
 800d6dc:	3601      	adds	r6, #1
 800d6de:	e7f2      	b.n	800d6c6 <__libc_init_array+0x1e>
 800d6e0:	0800e938 	.word	0x0800e938
 800d6e4:	0800e938 	.word	0x0800e938
 800d6e8:	0800e938 	.word	0x0800e938
 800d6ec:	0800e93c 	.word	0x0800e93c

0800d6f0 <copysign>:
 800d6f0:	b082      	sub	sp, #8
 800d6f2:	ec51 0b10 	vmov	r0, r1, d0
 800d6f6:	ed8d 1b00 	vstr	d1, [sp]
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	f021 4000 	bic.w	r0, r1, #2147483648	@ 0x80000000
 800d700:	9901      	ldr	r1, [sp, #4]
 800d702:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800d706:	ea40 0301 	orr.w	r3, r0, r1
 800d70a:	ec43 2b10 	vmov	d0, r2, r3
 800d70e:	b002      	add	sp, #8
 800d710:	4770      	bx	lr
 800d712:	0000      	movs	r0, r0
 800d714:	0000      	movs	r0, r0
	...

0800d718 <remainder>:
 800d718:	b508      	push	{r3, lr}
 800d71a:	ed2d 8b04 	vpush	{d8-d9}
 800d71e:	eeb0 8b41 	vmov.f64	d8, d1
 800d722:	f000 fad9 	bl	800dcd8 <__ieee754_remainder>
 800d726:	eeb4 8b48 	vcmp.f64	d8, d8
 800d72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72e:	d60c      	bvs.n	800d74a <remainder+0x32>
 800d730:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800d750 <remainder+0x38>
 800d734:	eeb4 8b49 	vcmp.f64	d8, d9
 800d738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73c:	d105      	bne.n	800d74a <remainder+0x32>
 800d73e:	f7ff ffad 	bl	800d69c <__errno>
 800d742:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d746:	2321      	movs	r3, #33	@ 0x21
 800d748:	6003      	str	r3, [r0, #0]
 800d74a:	ecbd 8b04 	vpop	{d8-d9}
 800d74e:	bd08      	pop	{r3, pc}
	...

0800d758 <sqrt>:
 800d758:	b508      	push	{r3, lr}
 800d75a:	ed2d 8b04 	vpush	{d8-d9}
 800d75e:	eeb0 8b40 	vmov.f64	d8, d0
 800d762:	f000 f8b1 	bl	800d8c8 <__ieee754_sqrt>
 800d766:	eeb4 8b48 	vcmp.f64	d8, d8
 800d76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d76e:	d60c      	bvs.n	800d78a <sqrt+0x32>
 800d770:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800d790 <sqrt+0x38>
 800d774:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77c:	d505      	bpl.n	800d78a <sqrt+0x32>
 800d77e:	f7ff ff8d 	bl	800d69c <__errno>
 800d782:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d786:	2321      	movs	r3, #33	@ 0x21
 800d788:	6003      	str	r3, [r0, #0]
 800d78a:	ecbd 8b04 	vpop	{d8-d9}
 800d78e:	bd08      	pop	{r3, pc}
	...

0800d798 <cos>:
 800d798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d79a:	eeb0 7b40 	vmov.f64	d7, d0
 800d79e:	ee17 3a90 	vmov	r3, s15
 800d7a2:	4a21      	ldr	r2, [pc, #132]	@ (800d828 <cos+0x90>)
 800d7a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d7a8:	4293      	cmp	r3, r2
 800d7aa:	d806      	bhi.n	800d7ba <cos+0x22>
 800d7ac:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d820 <cos+0x88>
 800d7b0:	b005      	add	sp, #20
 800d7b2:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7b6:	f000 b88b 	b.w	800d8d0 <__kernel_cos>
 800d7ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d82c <cos+0x94>)
 800d7bc:	4293      	cmp	r3, r2
 800d7be:	d904      	bls.n	800d7ca <cos+0x32>
 800d7c0:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d7c4:	b005      	add	sp, #20
 800d7c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7ca:	4668      	mov	r0, sp
 800d7cc:	f000 f940 	bl	800da50 <__ieee754_rem_pio2>
 800d7d0:	f000 0003 	and.w	r0, r0, #3
 800d7d4:	2801      	cmp	r0, #1
 800d7d6:	d009      	beq.n	800d7ec <cos+0x54>
 800d7d8:	2802      	cmp	r0, #2
 800d7da:	d010      	beq.n	800d7fe <cos+0x66>
 800d7dc:	b9b0      	cbnz	r0, 800d80c <cos+0x74>
 800d7de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7e2:	ed9d 0b00 	vldr	d0, [sp]
 800d7e6:	f000 f873 	bl	800d8d0 <__kernel_cos>
 800d7ea:	e7eb      	b.n	800d7c4 <cos+0x2c>
 800d7ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7f0:	ed9d 0b00 	vldr	d0, [sp]
 800d7f4:	f000 f8d4 	bl	800d9a0 <__kernel_sin>
 800d7f8:	eeb1 0b40 	vneg.f64	d0, d0
 800d7fc:	e7e2      	b.n	800d7c4 <cos+0x2c>
 800d7fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d802:	ed9d 0b00 	vldr	d0, [sp]
 800d806:	f000 f863 	bl	800d8d0 <__kernel_cos>
 800d80a:	e7f5      	b.n	800d7f8 <cos+0x60>
 800d80c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d810:	ed9d 0b00 	vldr	d0, [sp]
 800d814:	2001      	movs	r0, #1
 800d816:	f000 f8c3 	bl	800d9a0 <__kernel_sin>
 800d81a:	e7d3      	b.n	800d7c4 <cos+0x2c>
 800d81c:	f3af 8000 	nop.w
	...
 800d828:	3fe921fb 	.word	0x3fe921fb
 800d82c:	7fefffff 	.word	0x7fefffff

0800d830 <sin>:
 800d830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d832:	eeb0 7b40 	vmov.f64	d7, d0
 800d836:	ee17 3a90 	vmov	r3, s15
 800d83a:	4a21      	ldr	r2, [pc, #132]	@ (800d8c0 <sin+0x90>)
 800d83c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d840:	4293      	cmp	r3, r2
 800d842:	d807      	bhi.n	800d854 <sin+0x24>
 800d844:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d8b8 <sin+0x88>
 800d848:	2000      	movs	r0, #0
 800d84a:	b005      	add	sp, #20
 800d84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d850:	f000 b8a6 	b.w	800d9a0 <__kernel_sin>
 800d854:	4a1b      	ldr	r2, [pc, #108]	@ (800d8c4 <sin+0x94>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d904      	bls.n	800d864 <sin+0x34>
 800d85a:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d85e:	b005      	add	sp, #20
 800d860:	f85d fb04 	ldr.w	pc, [sp], #4
 800d864:	4668      	mov	r0, sp
 800d866:	f000 f8f3 	bl	800da50 <__ieee754_rem_pio2>
 800d86a:	f000 0003 	and.w	r0, r0, #3
 800d86e:	2801      	cmp	r0, #1
 800d870:	d00a      	beq.n	800d888 <sin+0x58>
 800d872:	2802      	cmp	r0, #2
 800d874:	d00f      	beq.n	800d896 <sin+0x66>
 800d876:	b9c0      	cbnz	r0, 800d8aa <sin+0x7a>
 800d878:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d87c:	ed9d 0b00 	vldr	d0, [sp]
 800d880:	2001      	movs	r0, #1
 800d882:	f000 f88d 	bl	800d9a0 <__kernel_sin>
 800d886:	e7ea      	b.n	800d85e <sin+0x2e>
 800d888:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d88c:	ed9d 0b00 	vldr	d0, [sp]
 800d890:	f000 f81e 	bl	800d8d0 <__kernel_cos>
 800d894:	e7e3      	b.n	800d85e <sin+0x2e>
 800d896:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d89a:	ed9d 0b00 	vldr	d0, [sp]
 800d89e:	2001      	movs	r0, #1
 800d8a0:	f000 f87e 	bl	800d9a0 <__kernel_sin>
 800d8a4:	eeb1 0b40 	vneg.f64	d0, d0
 800d8a8:	e7d9      	b.n	800d85e <sin+0x2e>
 800d8aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8ae:	ed9d 0b00 	vldr	d0, [sp]
 800d8b2:	f000 f80d 	bl	800d8d0 <__kernel_cos>
 800d8b6:	e7f5      	b.n	800d8a4 <sin+0x74>
	...
 800d8c0:	3fe921fb 	.word	0x3fe921fb
 800d8c4:	7fefffff 	.word	0x7fefffff

0800d8c8 <__ieee754_sqrt>:
 800d8c8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800d8cc:	4770      	bx	lr
	...

0800d8d0 <__kernel_cos>:
 800d8d0:	eeb0 5b40 	vmov.f64	d5, d0
 800d8d4:	ee15 1a90 	vmov	r1, s11
 800d8d8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d8dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800d8e0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800d8e4:	d204      	bcs.n	800d8f0 <__kernel_cos+0x20>
 800d8e6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800d8ea:	ee17 3a90 	vmov	r3, s15
 800d8ee:	b343      	cbz	r3, 800d942 <__kernel_cos+0x72>
 800d8f0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800d8f4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800d8f8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800d968 <__kernel_cos+0x98>
 800d8fc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d970 <__kernel_cos+0xa0>
 800d900:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d904:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d978 <__kernel_cos+0xa8>
 800d908:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d90c:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d980 <__kernel_cos+0xb0>
 800d910:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d914:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d988 <__kernel_cos+0xb8>
 800d918:	4b1f      	ldr	r3, [pc, #124]	@ (800d998 <__kernel_cos+0xc8>)
 800d91a:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d91e:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800d990 <__kernel_cos+0xc0>
 800d922:	4299      	cmp	r1, r3
 800d924:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d928:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800d92c:	ee24 4b06 	vmul.f64	d4, d4, d6
 800d930:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d934:	eea6 1b04 	vfma.f64	d1, d6, d4
 800d938:	d804      	bhi.n	800d944 <__kernel_cos+0x74>
 800d93a:	ee37 7b41 	vsub.f64	d7, d7, d1
 800d93e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800d942:	4770      	bx	lr
 800d944:	4b15      	ldr	r3, [pc, #84]	@ (800d99c <__kernel_cos+0xcc>)
 800d946:	4299      	cmp	r1, r3
 800d948:	d809      	bhi.n	800d95e <__kernel_cos+0x8e>
 800d94a:	2200      	movs	r2, #0
 800d94c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800d950:	ec43 2b16 	vmov	d6, r2, r3
 800d954:	ee30 0b46 	vsub.f64	d0, d0, d6
 800d958:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d95c:	e7ed      	b.n	800d93a <__kernel_cos+0x6a>
 800d95e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800d962:	e7f7      	b.n	800d954 <__kernel_cos+0x84>
 800d964:	f3af 8000 	nop.w
 800d968:	be8838d4 	.word	0xbe8838d4
 800d96c:	bda8fae9 	.word	0xbda8fae9
 800d970:	bdb4b1c4 	.word	0xbdb4b1c4
 800d974:	3e21ee9e 	.word	0x3e21ee9e
 800d978:	809c52ad 	.word	0x809c52ad
 800d97c:	be927e4f 	.word	0xbe927e4f
 800d980:	19cb1590 	.word	0x19cb1590
 800d984:	3efa01a0 	.word	0x3efa01a0
 800d988:	16c15177 	.word	0x16c15177
 800d98c:	bf56c16c 	.word	0xbf56c16c
 800d990:	5555554c 	.word	0x5555554c
 800d994:	3fa55555 	.word	0x3fa55555
 800d998:	3fd33332 	.word	0x3fd33332
 800d99c:	3fe90000 	.word	0x3fe90000

0800d9a0 <__kernel_sin>:
 800d9a0:	ee10 3a90 	vmov	r3, s1
 800d9a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d9a8:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d9ac:	d204      	bcs.n	800d9b8 <__kernel_sin+0x18>
 800d9ae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800d9b2:	ee17 3a90 	vmov	r3, s15
 800d9b6:	b35b      	cbz	r3, 800da10 <__kernel_sin+0x70>
 800d9b8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800d9bc:	ee20 5b06 	vmul.f64	d5, d0, d6
 800d9c0:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800da18 <__kernel_sin+0x78>
 800d9c4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800da20 <__kernel_sin+0x80>
 800d9c8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d9cc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800da28 <__kernel_sin+0x88>
 800d9d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d9d4:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800da30 <__kernel_sin+0x90>
 800d9d8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800d9dc:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800da38 <__kernel_sin+0x98>
 800d9e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800d9e4:	b930      	cbnz	r0, 800d9f4 <__kernel_sin+0x54>
 800d9e6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800da40 <__kernel_sin+0xa0>
 800d9ea:	eea6 4b07 	vfma.f64	d4, d6, d7
 800d9ee:	eea4 0b05 	vfma.f64	d0, d4, d5
 800d9f2:	4770      	bx	lr
 800d9f4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800d9f8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800d9fc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800da00:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800da04:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800da48 <__kernel_sin+0xa8>
 800da08:	eea5 1b07 	vfma.f64	d1, d5, d7
 800da0c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800da10:	4770      	bx	lr
 800da12:	bf00      	nop
 800da14:	f3af 8000 	nop.w
 800da18:	5acfd57c 	.word	0x5acfd57c
 800da1c:	3de5d93a 	.word	0x3de5d93a
 800da20:	8a2b9ceb 	.word	0x8a2b9ceb
 800da24:	be5ae5e6 	.word	0xbe5ae5e6
 800da28:	57b1fe7d 	.word	0x57b1fe7d
 800da2c:	3ec71de3 	.word	0x3ec71de3
 800da30:	19c161d5 	.word	0x19c161d5
 800da34:	bf2a01a0 	.word	0xbf2a01a0
 800da38:	1110f8a6 	.word	0x1110f8a6
 800da3c:	3f811111 	.word	0x3f811111
 800da40:	55555549 	.word	0x55555549
 800da44:	bfc55555 	.word	0xbfc55555
 800da48:	55555549 	.word	0x55555549
 800da4c:	3fc55555 	.word	0x3fc55555

0800da50 <__ieee754_rem_pio2>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	eeb0 7b40 	vmov.f64	d7, d0
 800da56:	ee17 5a90 	vmov	r5, s15
 800da5a:	4b99      	ldr	r3, [pc, #612]	@ (800dcc0 <__ieee754_rem_pio2+0x270>)
 800da5c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800da60:	429e      	cmp	r6, r3
 800da62:	b088      	sub	sp, #32
 800da64:	4604      	mov	r4, r0
 800da66:	d807      	bhi.n	800da78 <__ieee754_rem_pio2+0x28>
 800da68:	2200      	movs	r2, #0
 800da6a:	2300      	movs	r3, #0
 800da6c:	ed84 0b00 	vstr	d0, [r4]
 800da70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800da74:	2000      	movs	r0, #0
 800da76:	e01b      	b.n	800dab0 <__ieee754_rem_pio2+0x60>
 800da78:	4b92      	ldr	r3, [pc, #584]	@ (800dcc4 <__ieee754_rem_pio2+0x274>)
 800da7a:	429e      	cmp	r6, r3
 800da7c:	d83b      	bhi.n	800daf6 <__ieee754_rem_pio2+0xa6>
 800da7e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800da82:	2d00      	cmp	r5, #0
 800da84:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800dc80 <__ieee754_rem_pio2+0x230>
 800da88:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800da8c:	dd19      	ble.n	800dac2 <__ieee754_rem_pio2+0x72>
 800da8e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800da92:	429e      	cmp	r6, r3
 800da94:	d00e      	beq.n	800dab4 <__ieee754_rem_pio2+0x64>
 800da96:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800dc88 <__ieee754_rem_pio2+0x238>
 800da9a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800da9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800daa2:	ed84 6b00 	vstr	d6, [r4]
 800daa6:	ee37 7b45 	vsub.f64	d7, d7, d5
 800daaa:	ed84 7b02 	vstr	d7, [r4, #8]
 800daae:	2001      	movs	r0, #1
 800dab0:	b008      	add	sp, #32
 800dab2:	bd70      	pop	{r4, r5, r6, pc}
 800dab4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800dc90 <__ieee754_rem_pio2+0x240>
 800dab8:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800dc98 <__ieee754_rem_pio2+0x248>
 800dabc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dac0:	e7eb      	b.n	800da9a <__ieee754_rem_pio2+0x4a>
 800dac2:	429e      	cmp	r6, r3
 800dac4:	ee30 7b06 	vadd.f64	d7, d0, d6
 800dac8:	d00e      	beq.n	800dae8 <__ieee754_rem_pio2+0x98>
 800daca:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800dc88 <__ieee754_rem_pio2+0x238>
 800dace:	ee37 6b05 	vadd.f64	d6, d7, d5
 800dad2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dad6:	ed84 6b00 	vstr	d6, [r4]
 800dada:	ee37 7b05 	vadd.f64	d7, d7, d5
 800dade:	f04f 30ff 	mov.w	r0, #4294967295
 800dae2:	ed84 7b02 	vstr	d7, [r4, #8]
 800dae6:	e7e3      	b.n	800dab0 <__ieee754_rem_pio2+0x60>
 800dae8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800dc90 <__ieee754_rem_pio2+0x240>
 800daec:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800dc98 <__ieee754_rem_pio2+0x248>
 800daf0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800daf4:	e7eb      	b.n	800dace <__ieee754_rem_pio2+0x7e>
 800daf6:	4b74      	ldr	r3, [pc, #464]	@ (800dcc8 <__ieee754_rem_pio2+0x278>)
 800daf8:	429e      	cmp	r6, r3
 800dafa:	d870      	bhi.n	800dbde <__ieee754_rem_pio2+0x18e>
 800dafc:	f000 f96e 	bl	800dddc <fabs>
 800db00:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800db04:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800dca0 <__ieee754_rem_pio2+0x250>
 800db08:	eea0 7b06 	vfma.f64	d7, d0, d6
 800db0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800db10:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800db14:	ee17 0a90 	vmov	r0, s15
 800db18:	eeb1 4b45 	vneg.f64	d4, d5
 800db1c:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800dc80 <__ieee754_rem_pio2+0x230>
 800db20:	eea5 0b47 	vfms.f64	d0, d5, d7
 800db24:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800dc88 <__ieee754_rem_pio2+0x238>
 800db28:	281f      	cmp	r0, #31
 800db2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800db2e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800db32:	dc05      	bgt.n	800db40 <__ieee754_rem_pio2+0xf0>
 800db34:	4b65      	ldr	r3, [pc, #404]	@ (800dccc <__ieee754_rem_pio2+0x27c>)
 800db36:	1e42      	subs	r2, r0, #1
 800db38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db3c:	42b3      	cmp	r3, r6
 800db3e:	d109      	bne.n	800db54 <__ieee754_rem_pio2+0x104>
 800db40:	ee16 3a90 	vmov	r3, s13
 800db44:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800db48:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800db4c:	2b10      	cmp	r3, #16
 800db4e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800db52:	dc02      	bgt.n	800db5a <__ieee754_rem_pio2+0x10a>
 800db54:	ed84 6b00 	vstr	d6, [r4]
 800db58:	e01a      	b.n	800db90 <__ieee754_rem_pio2+0x140>
 800db5a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800dc90 <__ieee754_rem_pio2+0x240>
 800db5e:	eeb0 6b40 	vmov.f64	d6, d0
 800db62:	eea4 6b03 	vfma.f64	d6, d4, d3
 800db66:	ee30 7b46 	vsub.f64	d7, d0, d6
 800db6a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800db6e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800dc98 <__ieee754_rem_pio2+0x248>
 800db72:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800db76:	ee36 3b47 	vsub.f64	d3, d6, d7
 800db7a:	ee13 3a90 	vmov	r3, s7
 800db7e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800db82:	1ad3      	subs	r3, r2, r3
 800db84:	2b31      	cmp	r3, #49	@ 0x31
 800db86:	dc17      	bgt.n	800dbb8 <__ieee754_rem_pio2+0x168>
 800db88:	eeb0 0b46 	vmov.f64	d0, d6
 800db8c:	ed84 3b00 	vstr	d3, [r4]
 800db90:	ed94 6b00 	vldr	d6, [r4]
 800db94:	2d00      	cmp	r5, #0
 800db96:	ee30 0b46 	vsub.f64	d0, d0, d6
 800db9a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800db9e:	ed84 0b02 	vstr	d0, [r4, #8]
 800dba2:	da85      	bge.n	800dab0 <__ieee754_rem_pio2+0x60>
 800dba4:	eeb1 6b46 	vneg.f64	d6, d6
 800dba8:	eeb1 0b40 	vneg.f64	d0, d0
 800dbac:	ed84 6b00 	vstr	d6, [r4]
 800dbb0:	ed84 0b02 	vstr	d0, [r4, #8]
 800dbb4:	4240      	negs	r0, r0
 800dbb6:	e77b      	b.n	800dab0 <__ieee754_rem_pio2+0x60>
 800dbb8:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800dca8 <__ieee754_rem_pio2+0x258>
 800dbbc:	eeb0 0b46 	vmov.f64	d0, d6
 800dbc0:	eea4 0b07 	vfma.f64	d0, d4, d7
 800dbc4:	ee36 6b40 	vsub.f64	d6, d6, d0
 800dbc8:	eea4 6b07 	vfma.f64	d6, d4, d7
 800dbcc:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800dcb0 <__ieee754_rem_pio2+0x260>
 800dbd0:	eeb0 7b46 	vmov.f64	d7, d6
 800dbd4:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800dbd8:	ee30 6b47 	vsub.f64	d6, d0, d7
 800dbdc:	e7ba      	b.n	800db54 <__ieee754_rem_pio2+0x104>
 800dbde:	4b3c      	ldr	r3, [pc, #240]	@ (800dcd0 <__ieee754_rem_pio2+0x280>)
 800dbe0:	429e      	cmp	r6, r3
 800dbe2:	d906      	bls.n	800dbf2 <__ieee754_rem_pio2+0x1a2>
 800dbe4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800dbe8:	ed80 7b02 	vstr	d7, [r0, #8]
 800dbec:	ed80 7b00 	vstr	d7, [r0]
 800dbf0:	e740      	b.n	800da74 <__ieee754_rem_pio2+0x24>
 800dbf2:	ee10 3a10 	vmov	r3, s0
 800dbf6:	1532      	asrs	r2, r6, #20
 800dbf8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800dc02:	ec41 0b17 	vmov	d7, r0, r1
 800dc06:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dc0a:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800dcb8 <__ieee754_rem_pio2+0x268>
 800dc0e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dc12:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc16:	ed8d 6b02 	vstr	d6, [sp, #8]
 800dc1a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc1e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800dc22:	a808      	add	r0, sp, #32
 800dc24:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800dc28:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dc2c:	ed8d 6b04 	vstr	d6, [sp, #16]
 800dc30:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc34:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dc38:	2103      	movs	r1, #3
 800dc3a:	ed30 7b02 	vldmdb	r0!, {d7}
 800dc3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc46:	460b      	mov	r3, r1
 800dc48:	f101 31ff 	add.w	r1, r1, #4294967295
 800dc4c:	d0f5      	beq.n	800dc3a <__ieee754_rem_pio2+0x1ea>
 800dc4e:	4921      	ldr	r1, [pc, #132]	@ (800dcd4 <__ieee754_rem_pio2+0x284>)
 800dc50:	9101      	str	r1, [sp, #4]
 800dc52:	2102      	movs	r1, #2
 800dc54:	9100      	str	r1, [sp, #0]
 800dc56:	a802      	add	r0, sp, #8
 800dc58:	4621      	mov	r1, r4
 800dc5a:	f000 f8c9 	bl	800ddf0 <__kernel_rem_pio2>
 800dc5e:	2d00      	cmp	r5, #0
 800dc60:	f6bf af26 	bge.w	800dab0 <__ieee754_rem_pio2+0x60>
 800dc64:	ed94 7b00 	vldr	d7, [r4]
 800dc68:	eeb1 7b47 	vneg.f64	d7, d7
 800dc6c:	ed84 7b00 	vstr	d7, [r4]
 800dc70:	ed94 7b02 	vldr	d7, [r4, #8]
 800dc74:	eeb1 7b47 	vneg.f64	d7, d7
 800dc78:	ed84 7b02 	vstr	d7, [r4, #8]
 800dc7c:	e79a      	b.n	800dbb4 <__ieee754_rem_pio2+0x164>
 800dc7e:	bf00      	nop
 800dc80:	54400000 	.word	0x54400000
 800dc84:	3ff921fb 	.word	0x3ff921fb
 800dc88:	1a626331 	.word	0x1a626331
 800dc8c:	3dd0b461 	.word	0x3dd0b461
 800dc90:	1a600000 	.word	0x1a600000
 800dc94:	3dd0b461 	.word	0x3dd0b461
 800dc98:	2e037073 	.word	0x2e037073
 800dc9c:	3ba3198a 	.word	0x3ba3198a
 800dca0:	6dc9c883 	.word	0x6dc9c883
 800dca4:	3fe45f30 	.word	0x3fe45f30
 800dca8:	2e000000 	.word	0x2e000000
 800dcac:	3ba3198a 	.word	0x3ba3198a
 800dcb0:	252049c1 	.word	0x252049c1
 800dcb4:	397b839a 	.word	0x397b839a
 800dcb8:	00000000 	.word	0x00000000
 800dcbc:	41700000 	.word	0x41700000
 800dcc0:	3fe921fb 	.word	0x3fe921fb
 800dcc4:	4002d97b 	.word	0x4002d97b
 800dcc8:	413921fb 	.word	0x413921fb
 800dccc:	0800e748 	.word	0x0800e748
 800dcd0:	7fefffff 	.word	0x7fefffff
 800dcd4:	0800e7c8 	.word	0x0800e7c8

0800dcd8 <__ieee754_remainder>:
 800dcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcdc:	ed2d 8b04 	vpush	{d8-d9}
 800dce0:	eeb0 9b41 	vmov.f64	d9, d1
 800dce4:	eeb0 8b40 	vmov.f64	d8, d0
 800dce8:	ee19 7a90 	vmov	r7, s19
 800dcec:	ee11 8a10 	vmov	r8, s2
 800dcf0:	f027 4600 	bic.w	r6, r7, #2147483648	@ 0x80000000
 800dcf4:	ea56 0308 	orrs.w	r3, r6, r8
 800dcf8:	d107      	bne.n	800dd0a <__ieee754_remainder+0x32>
 800dcfa:	ee28 8b09 	vmul.f64	d8, d8, d9
 800dcfe:	ee88 0b08 	vdiv.f64	d0, d8, d8
 800dd02:	ecbd 8b04 	vpop	{d8-d9}
 800dd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0a:	ee18 5a90 	vmov	r5, s17
 800dd0e:	4b30      	ldr	r3, [pc, #192]	@ (800ddd0 <__ieee754_remainder+0xf8>)
 800dd10:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800dd14:	429c      	cmp	r4, r3
 800dd16:	d8f0      	bhi.n	800dcfa <__ieee754_remainder+0x22>
 800dd18:	429e      	cmp	r6, r3
 800dd1a:	d909      	bls.n	800dd30 <__ieee754_remainder+0x58>
 800dd1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800dd20:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800dd24:	ea53 0308 	orrs.w	r3, r3, r8
 800dd28:	d1e7      	bne.n	800dcfa <__ieee754_remainder+0x22>
 800dd2a:	eeb0 0b48 	vmov.f64	d0, d8
 800dd2e:	e006      	b.n	800dd3e <__ieee754_remainder+0x66>
 800dd30:	4b28      	ldr	r3, [pc, #160]	@ (800ddd4 <__ieee754_remainder+0xfc>)
 800dd32:	429e      	cmp	r6, r3
 800dd34:	d8f9      	bhi.n	800dd2a <__ieee754_remainder+0x52>
 800dd36:	ee31 1b01 	vadd.f64	d1, d1, d1
 800dd3a:	f000 fad5 	bl	800e2e8 <__ieee754_fmod>
 800dd3e:	ee18 3a10 	vmov	r3, s16
 800dd42:	1ba4      	subs	r4, r4, r6
 800dd44:	eba3 0308 	sub.w	r3, r3, r8
 800dd48:	431c      	orrs	r4, r3
 800dd4a:	d104      	bne.n	800dd56 <__ieee754_remainder+0x7e>
 800dd4c:	ed9f 7b1e 	vldr	d7, [pc, #120]	@ 800ddc8 <__ieee754_remainder+0xf0>
 800dd50:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dd54:	e7d5      	b.n	800dd02 <__ieee754_remainder+0x2a>
 800dd56:	f000 f841 	bl	800dddc <fabs>
 800dd5a:	eeb0 8b40 	vmov.f64	d8, d0
 800dd5e:	eeb0 0b49 	vmov.f64	d0, d9
 800dd62:	f000 f83b 	bl	800dddc <fabs>
 800dd66:	4b1c      	ldr	r3, [pc, #112]	@ (800ddd8 <__ieee754_remainder+0x100>)
 800dd68:	403b      	ands	r3, r7
 800dd6a:	b993      	cbnz	r3, 800dd92 <__ieee754_remainder+0xba>
 800dd6c:	ee38 7b08 	vadd.f64	d7, d8, d8
 800dd70:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800dd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd78:	dd1b      	ble.n	800ddb2 <__ieee754_remainder+0xda>
 800dd7a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dd7e:	ee38 7b08 	vadd.f64	d7, d8, d8
 800dd82:	eeb4 7bc0 	vcmpe.f64	d7, d0
 800dd86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd8a:	db12      	blt.n	800ddb2 <__ieee754_remainder+0xda>
 800dd8c:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dd90:	e00f      	b.n	800ddb2 <__ieee754_remainder+0xda>
 800dd92:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800dd96:	ee20 7b07 	vmul.f64	d7, d0, d7
 800dd9a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dd9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda2:	dd06      	ble.n	800ddb2 <__ieee754_remainder+0xda>
 800dda4:	ee38 8b40 	vsub.f64	d8, d8, d0
 800dda8:	eeb4 7bc8 	vcmpe.f64	d7, d8
 800ddac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb0:	d9ec      	bls.n	800dd8c <__ieee754_remainder+0xb4>
 800ddb2:	ee18 1a90 	vmov	r1, s17
 800ddb6:	ec53 2b18 	vmov	r2, r3, d8
 800ddba:	f005 4500 	and.w	r5, r5, #2147483648	@ 0x80000000
 800ddbe:	ea85 0301 	eor.w	r3, r5, r1
 800ddc2:	ec43 2b10 	vmov	d0, r2, r3
 800ddc6:	e79c      	b.n	800dd02 <__ieee754_remainder+0x2a>
	...
 800ddd0:	7fefffff 	.word	0x7fefffff
 800ddd4:	7fdfffff 	.word	0x7fdfffff
 800ddd8:	7fe00000 	.word	0x7fe00000

0800dddc <fabs>:
 800dddc:	ec51 0b10 	vmov	r0, r1, d0
 800dde0:	4602      	mov	r2, r0
 800dde2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dde6:	ec43 2b10 	vmov	d0, r2, r3
 800ddea:	4770      	bx	lr
 800ddec:	0000      	movs	r0, r0
	...

0800ddf0 <__kernel_rem_pio2>:
 800ddf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf4:	ed2d 8b06 	vpush	{d8-d10}
 800ddf8:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800ddfc:	469b      	mov	fp, r3
 800ddfe:	9001      	str	r0, [sp, #4]
 800de00:	4bbb      	ldr	r3, [pc, #748]	@ (800e0f0 <__kernel_rem_pio2+0x300>)
 800de02:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800de04:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800de08:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800de0c:	f112 0f14 	cmn.w	r2, #20
 800de10:	bfa8      	it	ge
 800de12:	1ed3      	subge	r3, r2, #3
 800de14:	f10b 3aff 	add.w	sl, fp, #4294967295
 800de18:	bfb8      	it	lt
 800de1a:	2300      	movlt	r3, #0
 800de1c:	f06f 0517 	mvn.w	r5, #23
 800de20:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800e0d8 <__kernel_rem_pio2+0x2e8>
 800de24:	bfa4      	itt	ge
 800de26:	2018      	movge	r0, #24
 800de28:	fb93 f3f0 	sdivge	r3, r3, r0
 800de2c:	fb03 5505 	mla	r5, r3, r5, r5
 800de30:	eba3 040a 	sub.w	r4, r3, sl
 800de34:	4415      	add	r5, r2
 800de36:	460f      	mov	r7, r1
 800de38:	eb09 060a 	add.w	r6, r9, sl
 800de3c:	a81a      	add	r0, sp, #104	@ 0x68
 800de3e:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800de42:	2200      	movs	r2, #0
 800de44:	42b2      	cmp	r2, r6
 800de46:	dd0e      	ble.n	800de66 <__kernel_rem_pio2+0x76>
 800de48:	aa1a      	add	r2, sp, #104	@ 0x68
 800de4a:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800de4e:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800de52:	2600      	movs	r6, #0
 800de54:	454e      	cmp	r6, r9
 800de56:	dc25      	bgt.n	800dea4 <__kernel_rem_pio2+0xb4>
 800de58:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800e0d8 <__kernel_rem_pio2+0x2e8>
 800de5c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800de60:	4614      	mov	r4, r2
 800de62:	2000      	movs	r0, #0
 800de64:	e015      	b.n	800de92 <__kernel_rem_pio2+0xa2>
 800de66:	42d4      	cmn	r4, r2
 800de68:	d409      	bmi.n	800de7e <__kernel_rem_pio2+0x8e>
 800de6a:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800de6e:	ee07 1a90 	vmov	s15, r1
 800de72:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800de76:	eca0 7b02 	vstmia	r0!, {d7}
 800de7a:	3201      	adds	r2, #1
 800de7c:	e7e2      	b.n	800de44 <__kernel_rem_pio2+0x54>
 800de7e:	eeb0 7b46 	vmov.f64	d7, d6
 800de82:	e7f8      	b.n	800de76 <__kernel_rem_pio2+0x86>
 800de84:	ecbc 5b02 	vldmia	ip!, {d5}
 800de88:	ed94 6b00 	vldr	d6, [r4]
 800de8c:	3001      	adds	r0, #1
 800de8e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800de92:	4550      	cmp	r0, sl
 800de94:	f1a4 0408 	sub.w	r4, r4, #8
 800de98:	ddf4      	ble.n	800de84 <__kernel_rem_pio2+0x94>
 800de9a:	ecae 7b02 	vstmia	lr!, {d7}
 800de9e:	3601      	adds	r6, #1
 800dea0:	3208      	adds	r2, #8
 800dea2:	e7d7      	b.n	800de54 <__kernel_rem_pio2+0x64>
 800dea4:	aa06      	add	r2, sp, #24
 800dea6:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800e0e0 <__kernel_rem_pio2+0x2f0>
 800deaa:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800e0e8 <__kernel_rem_pio2+0x2f8>
 800deae:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800deb2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800deb6:	9203      	str	r2, [sp, #12]
 800deb8:	9302      	str	r3, [sp, #8]
 800deba:	464c      	mov	r4, r9
 800debc:	00e3      	lsls	r3, r4, #3
 800debe:	9304      	str	r3, [sp, #16]
 800dec0:	ab92      	add	r3, sp, #584	@ 0x248
 800dec2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dec6:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800deca:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800decc:	ab06      	add	r3, sp, #24
 800dece:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ded2:	461e      	mov	r6, r3
 800ded4:	4620      	mov	r0, r4
 800ded6:	2800      	cmp	r0, #0
 800ded8:	f1a2 0208 	sub.w	r2, r2, #8
 800dedc:	dc4a      	bgt.n	800df74 <__kernel_rem_pio2+0x184>
 800dede:	4628      	mov	r0, r5
 800dee0:	9305      	str	r3, [sp, #20]
 800dee2:	f000 fb0d 	bl	800e500 <scalbn>
 800dee6:	eeb0 8b40 	vmov.f64	d8, d0
 800deea:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800deee:	ee28 0b00 	vmul.f64	d0, d8, d0
 800def2:	f000 fb85 	bl	800e600 <floor>
 800def6:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800defa:	eea0 8b47 	vfms.f64	d8, d0, d7
 800defe:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800df02:	2d00      	cmp	r5, #0
 800df04:	ee17 8a90 	vmov	r8, s15
 800df08:	9b05      	ldr	r3, [sp, #20]
 800df0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800df0e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800df12:	dd41      	ble.n	800df98 <__kernel_rem_pio2+0x1a8>
 800df14:	1e60      	subs	r0, r4, #1
 800df16:	aa06      	add	r2, sp, #24
 800df18:	f1c5 0c18 	rsb	ip, r5, #24
 800df1c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800df20:	fa46 f20c 	asr.w	r2, r6, ip
 800df24:	4490      	add	r8, r2
 800df26:	fa02 f20c 	lsl.w	r2, r2, ip
 800df2a:	1ab6      	subs	r6, r6, r2
 800df2c:	aa06      	add	r2, sp, #24
 800df2e:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800df32:	f1c5 0217 	rsb	r2, r5, #23
 800df36:	4116      	asrs	r6, r2
 800df38:	2e00      	cmp	r6, #0
 800df3a:	dd3c      	ble.n	800dfb6 <__kernel_rem_pio2+0x1c6>
 800df3c:	f04f 0c00 	mov.w	ip, #0
 800df40:	f108 0801 	add.w	r8, r8, #1
 800df44:	4660      	mov	r0, ip
 800df46:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800df4a:	4564      	cmp	r4, ip
 800df4c:	dc66      	bgt.n	800e01c <__kernel_rem_pio2+0x22c>
 800df4e:	2d00      	cmp	r5, #0
 800df50:	dd03      	ble.n	800df5a <__kernel_rem_pio2+0x16a>
 800df52:	2d01      	cmp	r5, #1
 800df54:	d072      	beq.n	800e03c <__kernel_rem_pio2+0x24c>
 800df56:	2d02      	cmp	r5, #2
 800df58:	d07a      	beq.n	800e050 <__kernel_rem_pio2+0x260>
 800df5a:	2e02      	cmp	r6, #2
 800df5c:	d12b      	bne.n	800dfb6 <__kernel_rem_pio2+0x1c6>
 800df5e:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800df62:	ee30 8b48 	vsub.f64	d8, d0, d8
 800df66:	b330      	cbz	r0, 800dfb6 <__kernel_rem_pio2+0x1c6>
 800df68:	4628      	mov	r0, r5
 800df6a:	f000 fac9 	bl	800e500 <scalbn>
 800df6e:	ee38 8b40 	vsub.f64	d8, d8, d0
 800df72:	e020      	b.n	800dfb6 <__kernel_rem_pio2+0x1c6>
 800df74:	ee20 7b09 	vmul.f64	d7, d0, d9
 800df78:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800df7c:	3801      	subs	r0, #1
 800df7e:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800df82:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800df86:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800df8a:	eca6 0a01 	vstmia	r6!, {s0}
 800df8e:	ed92 0b00 	vldr	d0, [r2]
 800df92:	ee37 0b00 	vadd.f64	d0, d7, d0
 800df96:	e79e      	b.n	800ded6 <__kernel_rem_pio2+0xe6>
 800df98:	d105      	bne.n	800dfa6 <__kernel_rem_pio2+0x1b6>
 800df9a:	1e62      	subs	r2, r4, #1
 800df9c:	a906      	add	r1, sp, #24
 800df9e:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800dfa2:	15f6      	asrs	r6, r6, #23
 800dfa4:	e7c8      	b.n	800df38 <__kernel_rem_pio2+0x148>
 800dfa6:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800dfaa:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800dfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfb2:	da31      	bge.n	800e018 <__kernel_rem_pio2+0x228>
 800dfb4:	2600      	movs	r6, #0
 800dfb6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800dfba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfbe:	f040 809b 	bne.w	800e0f8 <__kernel_rem_pio2+0x308>
 800dfc2:	1e62      	subs	r2, r4, #1
 800dfc4:	2000      	movs	r0, #0
 800dfc6:	454a      	cmp	r2, r9
 800dfc8:	da49      	bge.n	800e05e <__kernel_rem_pio2+0x26e>
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d062      	beq.n	800e094 <__kernel_rem_pio2+0x2a4>
 800dfce:	3c01      	subs	r4, #1
 800dfd0:	ab06      	add	r3, sp, #24
 800dfd2:	3d18      	subs	r5, #24
 800dfd4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d0f8      	beq.n	800dfce <__kernel_rem_pio2+0x1de>
 800dfdc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dfe0:	4628      	mov	r0, r5
 800dfe2:	f000 fa8d 	bl	800e500 <scalbn>
 800dfe6:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800e0e0 <__kernel_rem_pio2+0x2f0>
 800dfea:	1c62      	adds	r2, r4, #1
 800dfec:	a96a      	add	r1, sp, #424	@ 0x1a8
 800dfee:	00d3      	lsls	r3, r2, #3
 800dff0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800dff4:	4622      	mov	r2, r4
 800dff6:	2a00      	cmp	r2, #0
 800dff8:	f280 80a8 	bge.w	800e14c <__kernel_rem_pio2+0x35c>
 800dffc:	4622      	mov	r2, r4
 800dffe:	2a00      	cmp	r2, #0
 800e000:	f2c0 80c6 	blt.w	800e190 <__kernel_rem_pio2+0x3a0>
 800e004:	a96a      	add	r1, sp, #424	@ 0x1a8
 800e006:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e00a:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800e0d8 <__kernel_rem_pio2+0x2e8>
 800e00e:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800e0f4 <__kernel_rem_pio2+0x304>
 800e012:	2000      	movs	r0, #0
 800e014:	1aa1      	subs	r1, r4, r2
 800e016:	e0b0      	b.n	800e17a <__kernel_rem_pio2+0x38a>
 800e018:	2602      	movs	r6, #2
 800e01a:	e78f      	b.n	800df3c <__kernel_rem_pio2+0x14c>
 800e01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e020:	b948      	cbnz	r0, 800e036 <__kernel_rem_pio2+0x246>
 800e022:	b122      	cbz	r2, 800e02e <__kernel_rem_pio2+0x23e>
 800e024:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800e028:	f843 2c04 	str.w	r2, [r3, #-4]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f10c 0c01 	add.w	ip, ip, #1
 800e032:	4610      	mov	r0, r2
 800e034:	e789      	b.n	800df4a <__kernel_rem_pio2+0x15a>
 800e036:	ebae 0202 	sub.w	r2, lr, r2
 800e03a:	e7f5      	b.n	800e028 <__kernel_rem_pio2+0x238>
 800e03c:	1e62      	subs	r2, r4, #1
 800e03e:	ab06      	add	r3, sp, #24
 800e040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e044:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e048:	a906      	add	r1, sp, #24
 800e04a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e04e:	e784      	b.n	800df5a <__kernel_rem_pio2+0x16a>
 800e050:	1e62      	subs	r2, r4, #1
 800e052:	ab06      	add	r3, sp, #24
 800e054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e058:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e05c:	e7f4      	b.n	800e048 <__kernel_rem_pio2+0x258>
 800e05e:	ab06      	add	r3, sp, #24
 800e060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e064:	3a01      	subs	r2, #1
 800e066:	4318      	orrs	r0, r3
 800e068:	e7ad      	b.n	800dfc6 <__kernel_rem_pio2+0x1d6>
 800e06a:	3301      	adds	r3, #1
 800e06c:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e070:	2800      	cmp	r0, #0
 800e072:	d0fa      	beq.n	800e06a <__kernel_rem_pio2+0x27a>
 800e074:	9a04      	ldr	r2, [sp, #16]
 800e076:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800e07a:	446a      	add	r2, sp
 800e07c:	eb04 000b 	add.w	r0, r4, fp
 800e080:	a91a      	add	r1, sp, #104	@ 0x68
 800e082:	1c66      	adds	r6, r4, #1
 800e084:	3a98      	subs	r2, #152	@ 0x98
 800e086:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800e08a:	4423      	add	r3, r4
 800e08c:	42b3      	cmp	r3, r6
 800e08e:	da04      	bge.n	800e09a <__kernel_rem_pio2+0x2aa>
 800e090:	461c      	mov	r4, r3
 800e092:	e713      	b.n	800debc <__kernel_rem_pio2+0xcc>
 800e094:	9a03      	ldr	r2, [sp, #12]
 800e096:	2301      	movs	r3, #1
 800e098:	e7e8      	b.n	800e06c <__kernel_rem_pio2+0x27c>
 800e09a:	9902      	ldr	r1, [sp, #8]
 800e09c:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e0a0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800e0a4:	9104      	str	r1, [sp, #16]
 800e0a6:	ee07 1a90 	vmov	s15, r1
 800e0aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e0ae:	2400      	movs	r4, #0
 800e0b0:	eca0 7b02 	vstmia	r0!, {d7}
 800e0b4:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800e0d8 <__kernel_rem_pio2+0x2e8>
 800e0b8:	4686      	mov	lr, r0
 800e0ba:	4554      	cmp	r4, sl
 800e0bc:	dd03      	ble.n	800e0c6 <__kernel_rem_pio2+0x2d6>
 800e0be:	eca2 7b02 	vstmia	r2!, {d7}
 800e0c2:	3601      	adds	r6, #1
 800e0c4:	e7e2      	b.n	800e08c <__kernel_rem_pio2+0x29c>
 800e0c6:	ecbc 5b02 	vldmia	ip!, {d5}
 800e0ca:	ed3e 6b02 	vldmdb	lr!, {d6}
 800e0ce:	3401      	adds	r4, #1
 800e0d0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e0d4:	e7f1      	b.n	800e0ba <__kernel_rem_pio2+0x2ca>
 800e0d6:	bf00      	nop
	...
 800e0e4:	3e700000 	.word	0x3e700000
 800e0e8:	00000000 	.word	0x00000000
 800e0ec:	41700000 	.word	0x41700000
 800e0f0:	0800e910 	.word	0x0800e910
 800e0f4:	0800e8d0 	.word	0x0800e8d0
 800e0f8:	4268      	negs	r0, r5
 800e0fa:	eeb0 0b48 	vmov.f64	d0, d8
 800e0fe:	f000 f9ff 	bl	800e500 <scalbn>
 800e102:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800e2d0 <__kernel_rem_pio2+0x4e0>
 800e106:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e10e:	db17      	blt.n	800e140 <__kernel_rem_pio2+0x350>
 800e110:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800e2d8 <__kernel_rem_pio2+0x4e8>
 800e114:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e118:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e11c:	aa06      	add	r2, sp, #24
 800e11e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e122:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e126:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e12a:	3518      	adds	r5, #24
 800e12c:	ee10 3a10 	vmov	r3, s0
 800e130:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e134:	ee17 3a10 	vmov	r3, s14
 800e138:	3401      	adds	r4, #1
 800e13a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e13e:	e74d      	b.n	800dfdc <__kernel_rem_pio2+0x1ec>
 800e140:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e144:	aa06      	add	r2, sp, #24
 800e146:	ee10 3a10 	vmov	r3, s0
 800e14a:	e7f6      	b.n	800e13a <__kernel_rem_pio2+0x34a>
 800e14c:	a806      	add	r0, sp, #24
 800e14e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e152:	9001      	str	r0, [sp, #4]
 800e154:	ee07 0a90 	vmov	s15, r0
 800e158:	3a01      	subs	r2, #1
 800e15a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e15e:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e162:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e166:	ed21 7b02 	vstmdb	r1!, {d7}
 800e16a:	e744      	b.n	800dff6 <__kernel_rem_pio2+0x206>
 800e16c:	ecbc 5b02 	vldmia	ip!, {d5}
 800e170:	ecb5 6b02 	vldmia	r5!, {d6}
 800e174:	3001      	adds	r0, #1
 800e176:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e17a:	4548      	cmp	r0, r9
 800e17c:	dc01      	bgt.n	800e182 <__kernel_rem_pio2+0x392>
 800e17e:	4281      	cmp	r1, r0
 800e180:	daf4      	bge.n	800e16c <__kernel_rem_pio2+0x37c>
 800e182:	a842      	add	r0, sp, #264	@ 0x108
 800e184:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e188:	ed81 7b00 	vstr	d7, [r1]
 800e18c:	3a01      	subs	r2, #1
 800e18e:	e736      	b.n	800dffe <__kernel_rem_pio2+0x20e>
 800e190:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e192:	2a02      	cmp	r2, #2
 800e194:	dc0a      	bgt.n	800e1ac <__kernel_rem_pio2+0x3bc>
 800e196:	2a00      	cmp	r2, #0
 800e198:	dc2d      	bgt.n	800e1f6 <__kernel_rem_pio2+0x406>
 800e19a:	d046      	beq.n	800e22a <__kernel_rem_pio2+0x43a>
 800e19c:	f008 0007 	and.w	r0, r8, #7
 800e1a0:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800e1a4:	ecbd 8b06 	vpop	{d8-d10}
 800e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e1ae:	2a03      	cmp	r2, #3
 800e1b0:	d1f4      	bne.n	800e19c <__kernel_rem_pio2+0x3ac>
 800e1b2:	a942      	add	r1, sp, #264	@ 0x108
 800e1b4:	f1a3 0208 	sub.w	r2, r3, #8
 800e1b8:	440a      	add	r2, r1
 800e1ba:	4611      	mov	r1, r2
 800e1bc:	4620      	mov	r0, r4
 800e1be:	2800      	cmp	r0, #0
 800e1c0:	f1a1 0108 	sub.w	r1, r1, #8
 800e1c4:	dc52      	bgt.n	800e26c <__kernel_rem_pio2+0x47c>
 800e1c6:	4621      	mov	r1, r4
 800e1c8:	2901      	cmp	r1, #1
 800e1ca:	f1a2 0208 	sub.w	r2, r2, #8
 800e1ce:	dc5d      	bgt.n	800e28c <__kernel_rem_pio2+0x49c>
 800e1d0:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800e2e0 <__kernel_rem_pio2+0x4f0>
 800e1d4:	aa42      	add	r2, sp, #264	@ 0x108
 800e1d6:	4413      	add	r3, r2
 800e1d8:	2c01      	cmp	r4, #1
 800e1da:	dc67      	bgt.n	800e2ac <__kernel_rem_pio2+0x4bc>
 800e1dc:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800e1e0:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800e1e4:	2e00      	cmp	r6, #0
 800e1e6:	d167      	bne.n	800e2b8 <__kernel_rem_pio2+0x4c8>
 800e1e8:	ed87 5b00 	vstr	d5, [r7]
 800e1ec:	ed87 6b02 	vstr	d6, [r7, #8]
 800e1f0:	ed87 7b04 	vstr	d7, [r7, #16]
 800e1f4:	e7d2      	b.n	800e19c <__kernel_rem_pio2+0x3ac>
 800e1f6:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800e2e0 <__kernel_rem_pio2+0x4f0>
 800e1fa:	aa42      	add	r2, sp, #264	@ 0x108
 800e1fc:	4413      	add	r3, r2
 800e1fe:	4622      	mov	r2, r4
 800e200:	2a00      	cmp	r2, #0
 800e202:	da24      	bge.n	800e24e <__kernel_rem_pio2+0x45e>
 800e204:	b34e      	cbz	r6, 800e25a <__kernel_rem_pio2+0x46a>
 800e206:	eeb1 7b46 	vneg.f64	d7, d6
 800e20a:	ed87 7b00 	vstr	d7, [r7]
 800e20e:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800e212:	aa44      	add	r2, sp, #272	@ 0x110
 800e214:	2301      	movs	r3, #1
 800e216:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e21a:	429c      	cmp	r4, r3
 800e21c:	da20      	bge.n	800e260 <__kernel_rem_pio2+0x470>
 800e21e:	b10e      	cbz	r6, 800e224 <__kernel_rem_pio2+0x434>
 800e220:	eeb1 7b47 	vneg.f64	d7, d7
 800e224:	ed87 7b02 	vstr	d7, [r7, #8]
 800e228:	e7b8      	b.n	800e19c <__kernel_rem_pio2+0x3ac>
 800e22a:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800e2e0 <__kernel_rem_pio2+0x4f0>
 800e22e:	aa42      	add	r2, sp, #264	@ 0x108
 800e230:	4413      	add	r3, r2
 800e232:	2c00      	cmp	r4, #0
 800e234:	da05      	bge.n	800e242 <__kernel_rem_pio2+0x452>
 800e236:	b10e      	cbz	r6, 800e23c <__kernel_rem_pio2+0x44c>
 800e238:	eeb1 7b47 	vneg.f64	d7, d7
 800e23c:	ed87 7b00 	vstr	d7, [r7]
 800e240:	e7ac      	b.n	800e19c <__kernel_rem_pio2+0x3ac>
 800e242:	ed33 6b02 	vldmdb	r3!, {d6}
 800e246:	3c01      	subs	r4, #1
 800e248:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e24c:	e7f1      	b.n	800e232 <__kernel_rem_pio2+0x442>
 800e24e:	ed33 7b02 	vldmdb	r3!, {d7}
 800e252:	3a01      	subs	r2, #1
 800e254:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e258:	e7d2      	b.n	800e200 <__kernel_rem_pio2+0x410>
 800e25a:	eeb0 7b46 	vmov.f64	d7, d6
 800e25e:	e7d4      	b.n	800e20a <__kernel_rem_pio2+0x41a>
 800e260:	ecb2 6b02 	vldmia	r2!, {d6}
 800e264:	3301      	adds	r3, #1
 800e266:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e26a:	e7d6      	b.n	800e21a <__kernel_rem_pio2+0x42a>
 800e26c:	ed91 7b00 	vldr	d7, [r1]
 800e270:	ed91 5b02 	vldr	d5, [r1, #8]
 800e274:	3801      	subs	r0, #1
 800e276:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e27a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e27e:	ed81 6b00 	vstr	d6, [r1]
 800e282:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e286:	ed81 7b02 	vstr	d7, [r1, #8]
 800e28a:	e798      	b.n	800e1be <__kernel_rem_pio2+0x3ce>
 800e28c:	ed92 7b00 	vldr	d7, [r2]
 800e290:	ed92 5b02 	vldr	d5, [r2, #8]
 800e294:	3901      	subs	r1, #1
 800e296:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e29a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e29e:	ed82 6b00 	vstr	d6, [r2]
 800e2a2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e2a6:	ed82 7b02 	vstr	d7, [r2, #8]
 800e2aa:	e78d      	b.n	800e1c8 <__kernel_rem_pio2+0x3d8>
 800e2ac:	ed33 6b02 	vldmdb	r3!, {d6}
 800e2b0:	3c01      	subs	r4, #1
 800e2b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e2b6:	e78f      	b.n	800e1d8 <__kernel_rem_pio2+0x3e8>
 800e2b8:	eeb1 5b45 	vneg.f64	d5, d5
 800e2bc:	eeb1 6b46 	vneg.f64	d6, d6
 800e2c0:	ed87 5b00 	vstr	d5, [r7]
 800e2c4:	eeb1 7b47 	vneg.f64	d7, d7
 800e2c8:	ed87 6b02 	vstr	d6, [r7, #8]
 800e2cc:	e790      	b.n	800e1f0 <__kernel_rem_pio2+0x400>
 800e2ce:	bf00      	nop
 800e2d0:	00000000 	.word	0x00000000
 800e2d4:	41700000 	.word	0x41700000
 800e2d8:	00000000 	.word	0x00000000
 800e2dc:	3e700000 	.word	0x3e700000
	...

0800e2e8 <__ieee754_fmod>:
 800e2e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e2ec:	ed8d 1b00 	vstr	d1, [sp]
 800e2f0:	e9dd 6500 	ldrd	r6, r5, [sp]
 800e2f4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800e2f8:	ea56 0307 	orrs.w	r3, r6, r7
 800e2fc:	46b6      	mov	lr, r6
 800e2fe:	d00d      	beq.n	800e31c <__ieee754_fmod+0x34>
 800e300:	ee10 ca90 	vmov	ip, s1
 800e304:	4b78      	ldr	r3, [pc, #480]	@ (800e4e8 <__ieee754_fmod+0x200>)
 800e306:	f02c 4800 	bic.w	r8, ip, #2147483648	@ 0x80000000
 800e30a:	4598      	cmp	r8, r3
 800e30c:	d806      	bhi.n	800e31c <__ieee754_fmod+0x34>
 800e30e:	4273      	negs	r3, r6
 800e310:	4a76      	ldr	r2, [pc, #472]	@ (800e4ec <__ieee754_fmod+0x204>)
 800e312:	4333      	orrs	r3, r6
 800e314:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800e318:	4293      	cmp	r3, r2
 800e31a:	d908      	bls.n	800e32e <__ieee754_fmod+0x46>
 800e31c:	ed9d 7b00 	vldr	d7, [sp]
 800e320:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e324:	ee87 0b07 	vdiv.f64	d0, d7, d7
 800e328:	b003      	add	sp, #12
 800e32a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e32e:	ee10 9a10 	vmov	r9, s0
 800e332:	45b8      	cmp	r8, r7
 800e334:	4649      	mov	r1, r9
 800e336:	f00c 4400 	and.w	r4, ip, #2147483648	@ 0x80000000
 800e33a:	dc09      	bgt.n	800e350 <__ieee754_fmod+0x68>
 800e33c:	dbf4      	blt.n	800e328 <__ieee754_fmod+0x40>
 800e33e:	454e      	cmp	r6, r9
 800e340:	d8f2      	bhi.n	800e328 <__ieee754_fmod+0x40>
 800e342:	d105      	bne.n	800e350 <__ieee754_fmod+0x68>
 800e344:	4b6a      	ldr	r3, [pc, #424]	@ (800e4f0 <__ieee754_fmod+0x208>)
 800e346:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800e34a:	ed93 0b00 	vldr	d0, [r3]
 800e34e:	e7eb      	b.n	800e328 <__ieee754_fmod+0x40>
 800e350:	4a66      	ldr	r2, [pc, #408]	@ (800e4ec <__ieee754_fmod+0x204>)
 800e352:	ea1c 0f02 	tst.w	ip, r2
 800e356:	d14a      	bne.n	800e3ee <__ieee754_fmod+0x106>
 800e358:	f1b8 0f00 	cmp.w	r8, #0
 800e35c:	d13f      	bne.n	800e3de <__ieee754_fmod+0xf6>
 800e35e:	4865      	ldr	r0, [pc, #404]	@ (800e4f4 <__ieee754_fmod+0x20c>)
 800e360:	464b      	mov	r3, r9
 800e362:	2b00      	cmp	r3, #0
 800e364:	dc38      	bgt.n	800e3d8 <__ieee754_fmod+0xf0>
 800e366:	4215      	tst	r5, r2
 800e368:	d150      	bne.n	800e40c <__ieee754_fmod+0x124>
 800e36a:	2f00      	cmp	r7, #0
 800e36c:	d147      	bne.n	800e3fe <__ieee754_fmod+0x116>
 800e36e:	4a61      	ldr	r2, [pc, #388]	@ (800e4f4 <__ieee754_fmod+0x20c>)
 800e370:	4633      	mov	r3, r6
 800e372:	2b00      	cmp	r3, #0
 800e374:	dc40      	bgt.n	800e3f8 <__ieee754_fmod+0x110>
 800e376:	4b60      	ldr	r3, [pc, #384]	@ (800e4f8 <__ieee754_fmod+0x210>)
 800e378:	4298      	cmp	r0, r3
 800e37a:	db4b      	blt.n	800e414 <__ieee754_fmod+0x12c>
 800e37c:	f3cc 0313 	ubfx	r3, ip, #0, #20
 800e380:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e384:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800e4f8 <__ieee754_fmod+0x210>
 800e388:	4562      	cmp	r2, ip
 800e38a:	db58      	blt.n	800e43e <__ieee754_fmod+0x156>
 800e38c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e390:	f445 1580 	orr.w	r5, r5, #1048576	@ 0x100000
 800e394:	1a80      	subs	r0, r0, r2
 800e396:	1b5e      	subs	r6, r3, r5
 800e398:	eba1 070e 	sub.w	r7, r1, lr
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d164      	bne.n	800e46a <__ieee754_fmod+0x182>
 800e3a0:	4571      	cmp	r1, lr
 800e3a2:	bf38      	it	cc
 800e3a4:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800e3a8:	2e00      	cmp	r6, #0
 800e3aa:	bfa4      	itt	ge
 800e3ac:	4639      	movge	r1, r7
 800e3ae:	4633      	movge	r3, r6
 800e3b0:	ea53 0001 	orrs.w	r0, r3, r1
 800e3b4:	d0c6      	beq.n	800e344 <__ieee754_fmod+0x5c>
 800e3b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e3ba:	db6b      	blt.n	800e494 <__ieee754_fmod+0x1ac>
 800e3bc:	484e      	ldr	r0, [pc, #312]	@ (800e4f8 <__ieee754_fmod+0x210>)
 800e3be:	4282      	cmp	r2, r0
 800e3c0:	db6e      	blt.n	800e4a0 <__ieee754_fmod+0x1b8>
 800e3c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e3c6:	4323      	orrs	r3, r4
 800e3c8:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800e3cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	ec45 4b10 	vmov	d0, r4, r5
 800e3d6:	e7a7      	b.n	800e328 <__ieee754_fmod+0x40>
 800e3d8:	3801      	subs	r0, #1
 800e3da:	005b      	lsls	r3, r3, #1
 800e3dc:	e7c1      	b.n	800e362 <__ieee754_fmod+0x7a>
 800e3de:	4846      	ldr	r0, [pc, #280]	@ (800e4f8 <__ieee754_fmod+0x210>)
 800e3e0:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	ddbe      	ble.n	800e366 <__ieee754_fmod+0x7e>
 800e3e8:	3801      	subs	r0, #1
 800e3ea:	005b      	lsls	r3, r3, #1
 800e3ec:	e7fa      	b.n	800e3e4 <__ieee754_fmod+0xfc>
 800e3ee:	ea4f 5028 	mov.w	r0, r8, asr #20
 800e3f2:	f2a0 30ff 	subw	r0, r0, #1023	@ 0x3ff
 800e3f6:	e7b6      	b.n	800e366 <__ieee754_fmod+0x7e>
 800e3f8:	3a01      	subs	r2, #1
 800e3fa:	005b      	lsls	r3, r3, #1
 800e3fc:	e7b9      	b.n	800e372 <__ieee754_fmod+0x8a>
 800e3fe:	4a3e      	ldr	r2, [pc, #248]	@ (800e4f8 <__ieee754_fmod+0x210>)
 800e400:	02fb      	lsls	r3, r7, #11
 800e402:	2b00      	cmp	r3, #0
 800e404:	ddb7      	ble.n	800e376 <__ieee754_fmod+0x8e>
 800e406:	3a01      	subs	r2, #1
 800e408:	005b      	lsls	r3, r3, #1
 800e40a:	e7fa      	b.n	800e402 <__ieee754_fmod+0x11a>
 800e40c:	153a      	asrs	r2, r7, #20
 800e40e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e412:	e7b0      	b.n	800e376 <__ieee754_fmod+0x8e>
 800e414:	eba3 0c00 	sub.w	ip, r3, r0
 800e418:	f1bc 0f1f 	cmp.w	ip, #31
 800e41c:	dc09      	bgt.n	800e432 <__ieee754_fmod+0x14a>
 800e41e:	f200 431e 	addw	r3, r0, #1054	@ 0x41e
 800e422:	fa08 f10c 	lsl.w	r1, r8, ip
 800e426:	fa29 f303 	lsr.w	r3, r9, r3
 800e42a:	430b      	orrs	r3, r1
 800e42c:	fa09 f10c 	lsl.w	r1, r9, ip
 800e430:	e7a8      	b.n	800e384 <__ieee754_fmod+0x9c>
 800e432:	4b32      	ldr	r3, [pc, #200]	@ (800e4fc <__ieee754_fmod+0x214>)
 800e434:	1a1b      	subs	r3, r3, r0
 800e436:	fa09 f303 	lsl.w	r3, r9, r3
 800e43a:	2100      	movs	r1, #0
 800e43c:	e7a2      	b.n	800e384 <__ieee754_fmod+0x9c>
 800e43e:	ebac 0c02 	sub.w	ip, ip, r2
 800e442:	f1bc 0f1f 	cmp.w	ip, #31
 800e446:	dc09      	bgt.n	800e45c <__ieee754_fmod+0x174>
 800e448:	f202 451e 	addw	r5, r2, #1054	@ 0x41e
 800e44c:	fa07 f70c 	lsl.w	r7, r7, ip
 800e450:	fa26 f505 	lsr.w	r5, r6, r5
 800e454:	433d      	orrs	r5, r7
 800e456:	fa06 fe0c 	lsl.w	lr, r6, ip
 800e45a:	e79b      	b.n	800e394 <__ieee754_fmod+0xac>
 800e45c:	4d27      	ldr	r5, [pc, #156]	@ (800e4fc <__ieee754_fmod+0x214>)
 800e45e:	1aad      	subs	r5, r5, r2
 800e460:	fa06 f505 	lsl.w	r5, r6, r5
 800e464:	f04f 0e00 	mov.w	lr, #0
 800e468:	e794      	b.n	800e394 <__ieee754_fmod+0xac>
 800e46a:	4571      	cmp	r1, lr
 800e46c:	bf38      	it	cc
 800e46e:	f106 36ff 	addcc.w	r6, r6, #4294967295
 800e472:	2e00      	cmp	r6, #0
 800e474:	da05      	bge.n	800e482 <__ieee754_fmod+0x19a>
 800e476:	0fce      	lsrs	r6, r1, #31
 800e478:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800e47c:	0049      	lsls	r1, r1, #1
 800e47e:	3801      	subs	r0, #1
 800e480:	e789      	b.n	800e396 <__ieee754_fmod+0xae>
 800e482:	ea56 0307 	orrs.w	r3, r6, r7
 800e486:	f43f af5d 	beq.w	800e344 <__ieee754_fmod+0x5c>
 800e48a:	0ffb      	lsrs	r3, r7, #31
 800e48c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800e490:	0079      	lsls	r1, r7, #1
 800e492:	e7f4      	b.n	800e47e <__ieee754_fmod+0x196>
 800e494:	0fc8      	lsrs	r0, r1, #31
 800e496:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e49a:	0049      	lsls	r1, r1, #1
 800e49c:	3a01      	subs	r2, #1
 800e49e:	e78a      	b.n	800e3b6 <__ieee754_fmod+0xce>
 800e4a0:	1a80      	subs	r0, r0, r2
 800e4a2:	2814      	cmp	r0, #20
 800e4a4:	dc0c      	bgt.n	800e4c0 <__ieee754_fmod+0x1d8>
 800e4a6:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800e4aa:	fa03 f202 	lsl.w	r2, r3, r2
 800e4ae:	40c1      	lsrs	r1, r0
 800e4b0:	430a      	orrs	r2, r1
 800e4b2:	4103      	asrs	r3, r0
 800e4b4:	ea43 0104 	orr.w	r1, r3, r4
 800e4b8:	4610      	mov	r0, r2
 800e4ba:	ec41 0b10 	vmov	d0, r0, r1
 800e4be:	e733      	b.n	800e328 <__ieee754_fmod+0x40>
 800e4c0:	281f      	cmp	r0, #31
 800e4c2:	dc07      	bgt.n	800e4d4 <__ieee754_fmod+0x1ec>
 800e4c4:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800e4c8:	40c1      	lsrs	r1, r0
 800e4ca:	fa03 f202 	lsl.w	r2, r3, r2
 800e4ce:	430a      	orrs	r2, r1
 800e4d0:	4623      	mov	r3, r4
 800e4d2:	e7ef      	b.n	800e4b4 <__ieee754_fmod+0x1cc>
 800e4d4:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800e4d8:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800e4dc:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800e4e0:	32e2      	adds	r2, #226	@ 0xe2
 800e4e2:	fa43 f202 	asr.w	r2, r3, r2
 800e4e6:	e7f3      	b.n	800e4d0 <__ieee754_fmod+0x1e8>
 800e4e8:	7fefffff 	.word	0x7fefffff
 800e4ec:	7ff00000 	.word	0x7ff00000
 800e4f0:	0800e920 	.word	0x0800e920
 800e4f4:	fffffbed 	.word	0xfffffbed
 800e4f8:	fffffc02 	.word	0xfffffc02
 800e4fc:	fffffbe2 	.word	0xfffffbe2

0800e500 <scalbn>:
 800e500:	ee10 1a90 	vmov	r1, s1
 800e504:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e508:	b98b      	cbnz	r3, 800e52e <scalbn+0x2e>
 800e50a:	ee10 3a10 	vmov	r3, s0
 800e50e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e512:	4319      	orrs	r1, r3
 800e514:	d00a      	beq.n	800e52c <scalbn+0x2c>
 800e516:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e5c8 <scalbn+0xc8>
 800e51a:	4b37      	ldr	r3, [pc, #220]	@ (800e5f8 <scalbn+0xf8>)
 800e51c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e520:	4298      	cmp	r0, r3
 800e522:	da0b      	bge.n	800e53c <scalbn+0x3c>
 800e524:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e5d0 <scalbn+0xd0>
 800e528:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e52c:	4770      	bx	lr
 800e52e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e532:	4293      	cmp	r3, r2
 800e534:	d107      	bne.n	800e546 <scalbn+0x46>
 800e536:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e53a:	4770      	bx	lr
 800e53c:	ee10 1a90 	vmov	r1, s1
 800e540:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e544:	3b36      	subs	r3, #54	@ 0x36
 800e546:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e54a:	4290      	cmp	r0, r2
 800e54c:	dd0d      	ble.n	800e56a <scalbn+0x6a>
 800e54e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e5d8 <scalbn+0xd8>
 800e552:	ee10 3a90 	vmov	r3, s1
 800e556:	eeb0 6b47 	vmov.f64	d6, d7
 800e55a:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800e5e0 <scalbn+0xe0>
 800e55e:	2b00      	cmp	r3, #0
 800e560:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e564:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e568:	4770      	bx	lr
 800e56a:	4418      	add	r0, r3
 800e56c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800e570:	4298      	cmp	r0, r3
 800e572:	dcec      	bgt.n	800e54e <scalbn+0x4e>
 800e574:	2800      	cmp	r0, #0
 800e576:	dd0a      	ble.n	800e58e <scalbn+0x8e>
 800e578:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800e57c:	ec53 2b10 	vmov	r2, r3, d0
 800e580:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800e584:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e588:	ec43 2b10 	vmov	d0, r2, r3
 800e58c:	4770      	bx	lr
 800e58e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800e592:	da09      	bge.n	800e5a8 <scalbn+0xa8>
 800e594:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800e5d0 <scalbn+0xd0>
 800e598:	ee10 3a90 	vmov	r3, s1
 800e59c:	eeb0 6b47 	vmov.f64	d6, d7
 800e5a0:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800e5e8 <scalbn+0xe8>
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	e7db      	b.n	800e560 <scalbn+0x60>
 800e5a8:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800e5ac:	ec53 2b10 	vmov	r2, r3, d0
 800e5b0:	3036      	adds	r0, #54	@ 0x36
 800e5b2:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800e5b6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e5ba:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800e5f0 <scalbn+0xf0>
 800e5be:	ec43 2b10 	vmov	d0, r2, r3
 800e5c2:	e7b1      	b.n	800e528 <scalbn+0x28>
 800e5c4:	f3af 8000 	nop.w
 800e5c8:	00000000 	.word	0x00000000
 800e5cc:	43500000 	.word	0x43500000
 800e5d0:	c2f8f359 	.word	0xc2f8f359
 800e5d4:	01a56e1f 	.word	0x01a56e1f
 800e5d8:	8800759c 	.word	0x8800759c
 800e5dc:	7e37e43c 	.word	0x7e37e43c
 800e5e0:	8800759c 	.word	0x8800759c
 800e5e4:	fe37e43c 	.word	0xfe37e43c
 800e5e8:	c2f8f359 	.word	0xc2f8f359
 800e5ec:	81a56e1f 	.word	0x81a56e1f
 800e5f0:	00000000 	.word	0x00000000
 800e5f4:	3c900000 	.word	0x3c900000
 800e5f8:	ffff3cb0 	.word	0xffff3cb0
 800e5fc:	00000000 	.word	0x00000000

0800e600 <floor>:
 800e600:	ee10 3a90 	vmov	r3, s1
 800e604:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800e608:	ee10 2a10 	vmov	r2, s0
 800e60c:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800e610:	2913      	cmp	r1, #19
 800e612:	b530      	push	{r4, r5, lr}
 800e614:	4615      	mov	r5, r2
 800e616:	dc33      	bgt.n	800e680 <floor+0x80>
 800e618:	2900      	cmp	r1, #0
 800e61a:	da18      	bge.n	800e64e <floor+0x4e>
 800e61c:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800e6e0 <floor+0xe0>
 800e620:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e624:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e62c:	dd0a      	ble.n	800e644 <floor+0x44>
 800e62e:	2b00      	cmp	r3, #0
 800e630:	da50      	bge.n	800e6d4 <floor+0xd4>
 800e632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e636:	4313      	orrs	r3, r2
 800e638:	2200      	movs	r2, #0
 800e63a:	4293      	cmp	r3, r2
 800e63c:	4b2a      	ldr	r3, [pc, #168]	@ (800e6e8 <floor+0xe8>)
 800e63e:	bf08      	it	eq
 800e640:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e644:	4619      	mov	r1, r3
 800e646:	4610      	mov	r0, r2
 800e648:	ec41 0b10 	vmov	d0, r0, r1
 800e64c:	e01f      	b.n	800e68e <floor+0x8e>
 800e64e:	4827      	ldr	r0, [pc, #156]	@ (800e6ec <floor+0xec>)
 800e650:	4108      	asrs	r0, r1
 800e652:	ea03 0400 	and.w	r4, r3, r0
 800e656:	4314      	orrs	r4, r2
 800e658:	d019      	beq.n	800e68e <floor+0x8e>
 800e65a:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800e6e0 <floor+0xe0>
 800e65e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e662:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e66a:	ddeb      	ble.n	800e644 <floor+0x44>
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	bfbe      	ittt	lt
 800e670:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800e674:	410a      	asrlt	r2, r1
 800e676:	189b      	addlt	r3, r3, r2
 800e678:	ea23 0300 	bic.w	r3, r3, r0
 800e67c:	2200      	movs	r2, #0
 800e67e:	e7e1      	b.n	800e644 <floor+0x44>
 800e680:	2933      	cmp	r1, #51	@ 0x33
 800e682:	dd05      	ble.n	800e690 <floor+0x90>
 800e684:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e688:	d101      	bne.n	800e68e <floor+0x8e>
 800e68a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e68e:	bd30      	pop	{r4, r5, pc}
 800e690:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800e694:	f04f 30ff 	mov.w	r0, #4294967295
 800e698:	40e0      	lsrs	r0, r4
 800e69a:	4210      	tst	r0, r2
 800e69c:	d0f7      	beq.n	800e68e <floor+0x8e>
 800e69e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e6e0 <floor+0xe0>
 800e6a2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e6a6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ae:	ddc9      	ble.n	800e644 <floor+0x44>
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	da02      	bge.n	800e6ba <floor+0xba>
 800e6b4:	2914      	cmp	r1, #20
 800e6b6:	d103      	bne.n	800e6c0 <floor+0xc0>
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	ea22 0200 	bic.w	r2, r2, r0
 800e6be:	e7c1      	b.n	800e644 <floor+0x44>
 800e6c0:	2401      	movs	r4, #1
 800e6c2:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800e6c6:	fa04 f101 	lsl.w	r1, r4, r1
 800e6ca:	440a      	add	r2, r1
 800e6cc:	42aa      	cmp	r2, r5
 800e6ce:	bf38      	it	cc
 800e6d0:	191b      	addcc	r3, r3, r4
 800e6d2:	e7f2      	b.n	800e6ba <floor+0xba>
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	4613      	mov	r3, r2
 800e6d8:	e7b4      	b.n	800e644 <floor+0x44>
 800e6da:	bf00      	nop
 800e6dc:	f3af 8000 	nop.w
 800e6e0:	8800759c 	.word	0x8800759c
 800e6e4:	7e37e43c 	.word	0x7e37e43c
 800e6e8:	bff00000 	.word	0xbff00000
 800e6ec:	000fffff 	.word	0x000fffff

0800e6f0 <_init>:
 800e6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6f2:	bf00      	nop
 800e6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6f6:	bc08      	pop	{r3}
 800e6f8:	469e      	mov	lr, r3
 800e6fa:	4770      	bx	lr

0800e6fc <_fini>:
 800e6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6fe:	bf00      	nop
 800e700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e702:	bc08      	pop	{r3}
 800e704:	469e      	mov	lr, r3
 800e706:	4770      	bx	lr
