
WRAP_RX_H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc60  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800bf0c  0800bf0c  0000cf0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bf4c  0800bf4c  0000cf4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bf54  0800bf54  0000cf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bf58  0800bf58  0000cf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800bf5c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008eec  24000010  0800bf6c  0000d010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24008efc  0800bf6c  0000defc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ae56  00000000  00000000  0000d03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d97  00000000  00000000  00027e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001568  00000000  00000000  0002ac30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000010c2  00000000  00000000  0002c198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032aac  00000000  00000000  0002d25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c331  00000000  00000000  0005fd06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001542b0  00000000  00000000  0007c037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d02e7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cd8  00000000  00000000  001d032c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  001d6004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800bef4 	.word	0x0800bef4

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800bef4 	.word	0x0800bef4

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96a 	b.w	80005d8 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	460c      	mov	r4, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14e      	bne.n	80003c6 <__udivmoddi4+0xaa>
 8000328:	4694      	mov	ip, r2
 800032a:	458c      	cmp	ip, r1
 800032c:	4686      	mov	lr, r0
 800032e:	fab2 f282 	clz	r2, r2
 8000332:	d962      	bls.n	80003fa <__udivmoddi4+0xde>
 8000334:	b14a      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000336:	f1c2 0320 	rsb	r3, r2, #32
 800033a:	4091      	lsls	r1, r2
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	fa0c fc02 	lsl.w	ip, ip, r2
 8000344:	4319      	orrs	r1, r3
 8000346:	fa00 fe02 	lsl.w	lr, r0, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f f68c 	uxth.w	r6, ip
 8000352:	fbb1 f4f7 	udiv	r4, r1, r7
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb07 1114 	mls	r1, r7, r4, r1
 800035e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000362:	fb04 f106 	mul.w	r1, r4, r6
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000372:	f080 8112 	bcs.w	800059a <__udivmoddi4+0x27e>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 810f 	bls.w	800059a <__udivmoddi4+0x27e>
 800037c:	3c02      	subs	r4, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a59      	subs	r1, r3, r1
 8000382:	fa1f f38e 	uxth.w	r3, lr
 8000386:	fbb1 f0f7 	udiv	r0, r1, r7
 800038a:	fb07 1110 	mls	r1, r7, r0, r1
 800038e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000392:	fb00 f606 	mul.w	r6, r0, r6
 8000396:	429e      	cmp	r6, r3
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x94>
 800039a:	eb1c 0303 	adds.w	r3, ip, r3
 800039e:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a2:	f080 80fc 	bcs.w	800059e <__udivmoddi4+0x282>
 80003a6:	429e      	cmp	r6, r3
 80003a8:	f240 80f9 	bls.w	800059e <__udivmoddi4+0x282>
 80003ac:	4463      	add	r3, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	1b9b      	subs	r3, r3, r6
 80003b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa6>
 80003ba:	40d3      	lsrs	r3, r2
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xba>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb4>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x150>
 80003de:	42a3      	cmp	r3, r4
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xcc>
 80003e2:	4290      	cmp	r0, r2
 80003e4:	f0c0 80f0 	bcc.w	80005c8 <__udivmoddi4+0x2ac>
 80003e8:	1a86      	subs	r6, r0, r2
 80003ea:	eb64 0303 	sbc.w	r3, r4, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	2d00      	cmp	r5, #0
 80003f2:	d0e6      	beq.n	80003c2 <__udivmoddi4+0xa6>
 80003f4:	e9c5 6300 	strd	r6, r3, [r5]
 80003f8:	e7e3      	b.n	80003c2 <__udivmoddi4+0xa6>
 80003fa:	2a00      	cmp	r2, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x204>
 8000400:	eba1 040c 	sub.w	r4, r1, ip
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	fa1f f78c 	uxth.w	r7, ip
 800040c:	2101      	movs	r1, #1
 800040e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000412:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000416:	fb08 4416 	mls	r4, r8, r6, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb07 f006 	mul.w	r0, r7, r6
 8000422:	4298      	cmp	r0, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x11c>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f106 34ff 	add.w	r4, r6, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x11a>
 8000430:	4298      	cmp	r0, r3
 8000432:	f200 80cd 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 8000436:	4626      	mov	r6, r4
 8000438:	1a1c      	subs	r4, r3, r0
 800043a:	fa1f f38e 	uxth.w	r3, lr
 800043e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000442:	fb08 4410 	mls	r4, r8, r0, r4
 8000446:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044a:	fb00 f707 	mul.w	r7, r0, r7
 800044e:	429f      	cmp	r7, r3
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x148>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 34ff 	add.w	r4, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x146>
 800045c:	429f      	cmp	r7, r3
 800045e:	f200 80b0 	bhi.w	80005c2 <__udivmoddi4+0x2a6>
 8000462:	4620      	mov	r0, r4
 8000464:	1bdb      	subs	r3, r3, r7
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x9c>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa20 fc06 	lsr.w	ip, r0, r6
 800047c:	fa04 f301 	lsl.w	r3, r4, r1
 8000480:	ea43 030c 	orr.w	r3, r3, ip
 8000484:	40f4      	lsrs	r4, r6
 8000486:	fa00 f801 	lsl.w	r8, r0, r1
 800048a:	0c38      	lsrs	r0, r7, #16
 800048c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000490:	fbb4 fef0 	udiv	lr, r4, r0
 8000494:	fa1f fc87 	uxth.w	ip, r7
 8000498:	fb00 441e 	mls	r4, r0, lr, r4
 800049c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a0:	fb0e f90c 	mul.w	r9, lr, ip
 80004a4:	45a1      	cmp	r9, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d90a      	bls.n	80004c2 <__udivmoddi4+0x1a6>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b2:	f080 8084 	bcs.w	80005be <__udivmoddi4+0x2a2>
 80004b6:	45a1      	cmp	r9, r4
 80004b8:	f240 8081 	bls.w	80005be <__udivmoddi4+0x2a2>
 80004bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	eba4 0409 	sub.w	r4, r4, r9
 80004c6:	fa1f f983 	uxth.w	r9, r3
 80004ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ce:	fb00 4413 	mls	r4, r0, r3, r4
 80004d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x1d2>
 80004de:	193c      	adds	r4, r7, r4
 80004e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e4:	d267      	bcs.n	80005b6 <__udivmoddi4+0x29a>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d965      	bls.n	80005b6 <__udivmoddi4+0x29a>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f2:	fba0 9302 	umull	r9, r3, r0, r2
 80004f6:	eba4 040c 	sub.w	r4, r4, ip
 80004fa:	429c      	cmp	r4, r3
 80004fc:	46ce      	mov	lr, r9
 80004fe:	469c      	mov	ip, r3
 8000500:	d351      	bcc.n	80005a6 <__udivmoddi4+0x28a>
 8000502:	d04e      	beq.n	80005a2 <__udivmoddi4+0x286>
 8000504:	b155      	cbz	r5, 800051c <__udivmoddi4+0x200>
 8000506:	ebb8 030e 	subs.w	r3, r8, lr
 800050a:	eb64 040c 	sbc.w	r4, r4, ip
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	40cb      	lsrs	r3, r1
 8000514:	431e      	orrs	r6, r3
 8000516:	40cc      	lsrs	r4, r1
 8000518:	e9c5 6400 	strd	r6, r4, [r5]
 800051c:	2100      	movs	r1, #0
 800051e:	e750      	b.n	80003c2 <__udivmoddi4+0xa6>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f103 	lsr.w	r1, r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa24 f303 	lsr.w	r3, r4, r3
 8000530:	4094      	lsls	r4, r2
 8000532:	430c      	orrs	r4, r1
 8000534:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000538:	fa00 fe02 	lsl.w	lr, r0, r2
 800053c:	fa1f f78c 	uxth.w	r7, ip
 8000540:	fbb3 f0f8 	udiv	r0, r3, r8
 8000544:	fb08 3110 	mls	r1, r8, r0, r3
 8000548:	0c23      	lsrs	r3, r4, #16
 800054a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800054e:	fb00 f107 	mul.w	r1, r0, r7
 8000552:	4299      	cmp	r1, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x24c>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 36ff 	add.w	r6, r0, #4294967295
 800055e:	d22c      	bcs.n	80005ba <__udivmoddi4+0x29e>
 8000560:	4299      	cmp	r1, r3
 8000562:	d92a      	bls.n	80005ba <__udivmoddi4+0x29e>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1a5b      	subs	r3, r3, r1
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000570:	fb08 3311 	mls	r3, r8, r1, r3
 8000574:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000578:	fb01 f307 	mul.w	r3, r1, r7
 800057c:	42a3      	cmp	r3, r4
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x276>
 8000580:	eb1c 0404 	adds.w	r4, ip, r4
 8000584:	f101 36ff 	add.w	r6, r1, #4294967295
 8000588:	d213      	bcs.n	80005b2 <__udivmoddi4+0x296>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d911      	bls.n	80005b2 <__udivmoddi4+0x296>
 800058e:	3902      	subs	r1, #2
 8000590:	4464      	add	r4, ip
 8000592:	1ae4      	subs	r4, r4, r3
 8000594:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000598:	e739      	b.n	800040e <__udivmoddi4+0xf2>
 800059a:	4604      	mov	r4, r0
 800059c:	e6f0      	b.n	8000380 <__udivmoddi4+0x64>
 800059e:	4608      	mov	r0, r1
 80005a0:	e706      	b.n	80003b0 <__udivmoddi4+0x94>
 80005a2:	45c8      	cmp	r8, r9
 80005a4:	d2ae      	bcs.n	8000504 <__udivmoddi4+0x1e8>
 80005a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ae:	3801      	subs	r0, #1
 80005b0:	e7a8      	b.n	8000504 <__udivmoddi4+0x1e8>
 80005b2:	4631      	mov	r1, r6
 80005b4:	e7ed      	b.n	8000592 <__udivmoddi4+0x276>
 80005b6:	4603      	mov	r3, r0
 80005b8:	e799      	b.n	80004ee <__udivmoddi4+0x1d2>
 80005ba:	4630      	mov	r0, r6
 80005bc:	e7d4      	b.n	8000568 <__udivmoddi4+0x24c>
 80005be:	46d6      	mov	lr, sl
 80005c0:	e77f      	b.n	80004c2 <__udivmoddi4+0x1a6>
 80005c2:	4463      	add	r3, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e74d      	b.n	8000464 <__udivmoddi4+0x148>
 80005c8:	4606      	mov	r6, r0
 80005ca:	4623      	mov	r3, r4
 80005cc:	4608      	mov	r0, r1
 80005ce:	e70f      	b.n	80003f0 <__udivmoddi4+0xd4>
 80005d0:	3e02      	subs	r6, #2
 80005d2:	4463      	add	r3, ip
 80005d4:	e730      	b.n	8000438 <__udivmoddi4+0x11c>
 80005d6:	bf00      	nop

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005e0:	f000 fbe6 	bl	8000db0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fe86 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f83e 	bl	8000668 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005ec:	f000 f8fe 	bl	80007ec <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 fac4 	bl	8000b7c <MX_GPIO_Init>
  MX_DMA_Init();
 80005f4:	f000 faa2 	bl	8000b3c <MX_DMA_Init>
  MX_ADC1_Init();
 80005f8:	f000 f928 	bl	800084c <MX_ADC1_Init>
  MX_ADC2_Init();
 80005fc:	f000 f9a4 	bl	8000948 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000600:	f000 fa50 	bl	8000aa4 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000604:	f000 fa00 	bl	8000a08 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Starts slave ADC (ADC2); this must be started before ADC1. It won't do anything until triggered by ADC1 anyways.
  HAL_ADC_Start(&hadc2);
 8000608:	480f      	ldr	r0, [pc, #60]	@ (8000648 <main+0x6c>)
 800060a:	f001 fa61 	bl	8001ad0 <HAL_ADC_Start>

  // Starts master ADC (ADC1) with fancy multi DMA command. Here is where we specify which buffer the DMA should store values in and how large the buffer is
  HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) adc_buf, ADC_BUF_LEN);
 800060e:	f241 1294 	movw	r2, #4500	@ 0x1194
 8000612:	490e      	ldr	r1, [pc, #56]	@ (800064c <main+0x70>)
 8000614:	480e      	ldr	r0, [pc, #56]	@ (8000650 <main+0x74>)
 8000616:	f002 fa47 	bl	8002aa8 <HAL_ADCEx_MultiModeStart_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	adc1_reading = (uint16_t)(adc_buf[0]&0x0000FFFF);
 800061a:	4b0c      	ldr	r3, [pc, #48]	@ (800064c <main+0x70>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	b29a      	uxth	r2, r3
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <main+0x78>)
 8000622:	801a      	strh	r2, [r3, #0]
	adc2_reading = (uint16_t)(adc_buf[0]>>16);
 8000624:	4b09      	ldr	r3, [pc, #36]	@ (800064c <main+0x70>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	0c1b      	lsrs	r3, r3, #16
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b0a      	ldr	r3, [pc, #40]	@ (8000658 <main+0x7c>)
 800062e:	801a      	strh	r2, [r3, #0]
	buff_process = RESET;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <main+0x80>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	buff_flag_1 = RESET;
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <main+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
	buff_flag_2 = RESET;
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <main+0x88>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	adc1_reading = (uint16_t)(adc_buf[0]&0x0000FFFF);
 8000642:	bf00      	nop
 8000644:	e7e9      	b.n	800061a <main+0x3e>
 8000646:	bf00      	nop
 8000648:	24000090 	.word	0x24000090
 800064c:	2400024c 	.word	0x2400024c
 8000650:	2400002c 	.word	0x2400002c
 8000654:	24008eec 	.word	0x24008eec
 8000658:	24008eee 	.word	0x24008eee
 800065c:	24008ef2 	.word	0x24008ef2
 8000660:	24008ef0 	.word	0x24008ef0
 8000664:	24008ef1 	.word	0x24008ef1

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b0a4      	sub	sp, #144	@ 0x90
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000672:	224c      	movs	r2, #76	@ 0x4c
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00b fc10 	bl	800be9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000680:	2220      	movs	r2, #32
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f00b fc09 	bl	800be9c <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800068a:	f107 030c 	add.w	r3, r7, #12
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]
 800069a:	615a      	str	r2, [r3, #20]

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 800069c:	4b51      	ldr	r3, [pc, #324]	@ (80007e4 <SystemClock_Config+0x17c>)
 800069e:	f04f 32ff 	mov.w	r2, #4294967295
 80006a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006a6:	2004      	movs	r0, #4
 80006a8:	f005 fddc 	bl	8006264 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b4d      	ldr	r3, [pc, #308]	@ (80007e8 <SystemClock_Config+0x180>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a4c      	ldr	r2, [pc, #304]	@ (80007e8 <SystemClock_Config+0x180>)
 80006b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b4a      	ldr	r3, [pc, #296]	@ (80007e8 <SystemClock_Config+0x180>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c8:	bf00      	nop
 80006ca:	4b47      	ldr	r3, [pc, #284]	@ (80007e8 <SystemClock_Config+0x180>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006d6:	d1f8      	bne.n	80006ca <SystemClock_Config+0x62>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006d8:	f005 fdb4 	bl	8006244 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006dc:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <SystemClock_Config+0x17c>)
 80006de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80006e0:	4a40      	ldr	r2, [pc, #256]	@ (80007e4 <SystemClock_Config+0x17c>)
 80006e2:	f023 0318 	bic.w	r3, r3, #24
 80006e6:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80006e8:	2327      	movs	r3, #39	@ 0x27
 80006ea:	647b      	str	r3, [r7, #68]	@ 0x44
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006f2:	2301      	movs	r3, #1
 80006f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006fa:	2340      	movs	r3, #64	@ 0x40
 80006fc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006fe:	2301      	movs	r3, #1
 8000700:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	2302      	movs	r3, #2
 8000708:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLN = 70;
 800070e:	2346      	movs	r3, #70	@ 0x46
 8000710:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000712:	2302      	movs	r3, #2
 8000714:	67bb      	str	r3, [r7, #120]	@ 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000716:	2304      	movs	r3, #4
 8000718:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000720:	230c      	movs	r3, #12
 8000722:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000736:	4618      	mov	r0, r3
 8000738:	f005 fdee 	bl	8006318 <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000742:	f000 fb61 	bl	8000e08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	233f      	movs	r3, #63	@ 0x3f
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2303      	movs	r3, #3
 800074c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000756:	2340      	movs	r3, #64	@ 0x40
 8000758:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800075a:	2340      	movs	r3, #64	@ 0x40
 800075c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800075e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000764:	2340      	movs	r3, #64	@ 0x40
 8000766:	643b      	str	r3, [r7, #64]	@ 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076c:	2106      	movs	r1, #6
 800076e:	4618      	mov	r0, r3
 8000770:	f006 fa04 	bl	8006b7c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x116>
  {
    Error_Handler();
 800077a:	f000 fb45 	bl	8000e08 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800077e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000782:	2100      	movs	r1, #0
 8000784:	2000      	movs	r0, #0
 8000786:	f006 fbaf 	bl	8006ee8 <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800078a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800078e:	2100      	movs	r1, #0
 8000790:	2001      	movs	r0, #1
 8000792:	f006 fba9 	bl	8006ee8 <HAL_RCC_MCOConfig>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <SystemClock_Config+0x17c>)
 8000798:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 800079c:	4a11      	ldr	r2, [pc, #68]	@ (80007e4 <SystemClock_Config+0x17c>)
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
 80007a6:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <SystemClock_Config+0x17c>)
 80007a8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80007b8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80007c2:	f240 53b7 	movw	r3, #1463	@ 0x5b7
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80007c8:	2322      	movs	r3, #34	@ 0x22
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80007cc:	2320      	movs	r3, #32
 80007ce:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4618      	mov	r0, r3
 80007d6:	f009 f86d 	bl	80098b4 <HAL_RCCEx_CRSConfig>
}
 80007da:	bf00      	nop
 80007dc:	3790      	adds	r7, #144	@ 0x90
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58024400 	.word	0x58024400
 80007e8:	58024800 	.word	0x58024800

080007ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0b0      	sub	sp, #192	@ 0xc0
 80007f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	22c0      	movs	r2, #192	@ 0xc0
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f00b fb4f 	bl	800be9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000802:	f04f 0300 	mov.w	r3, #0
 8000806:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 18;
 800080e:	2312      	movs	r3, #18
 8000810:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000812:	2303      	movs	r3, #3
 8000814:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000816:	2302      	movs	r3, #2
 8000818:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800081a:	2302      	movs	r3, #2
 800081c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800081e:	23c0      	movs	r3, #192	@ 0xc0
 8000820:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 6144;
 8000826:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800082c:	2300      	movs	r3, #0
 800082e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f006 fd97 	bl	8007368 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8000840:	f000 fae2 	bl	8000e08 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	37c0      	adds	r7, #192	@ 0xc0
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
 800086e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000870:	4b32      	ldr	r3, [pc, #200]	@ (800093c <MX_ADC1_Init+0xf0>)
 8000872:	4a33      	ldr	r2, [pc, #204]	@ (8000940 <MX_ADC1_Init+0xf4>)
 8000874:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000876:	4b31      	ldr	r3, [pc, #196]	@ (800093c <MX_ADC1_Init+0xf0>)
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800087c:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <MX_ADC1_Init+0xf0>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000882:	4b2e      	ldr	r3, [pc, #184]	@ (800093c <MX_ADC1_Init+0xf0>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000888:	4b2c      	ldr	r3, [pc, #176]	@ (800093c <MX_ADC1_Init+0xf0>)
 800088a:	2204      	movs	r2, #4
 800088c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800088e:	4b2b      	ldr	r3, [pc, #172]	@ (800093c <MX_ADC1_Init+0xf0>)
 8000890:	2200      	movs	r2, #0
 8000892:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000894:	4b29      	ldr	r3, [pc, #164]	@ (800093c <MX_ADC1_Init+0xf0>)
 8000896:	2201      	movs	r2, #1
 8000898:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800089a:	4b28      	ldr	r3, [pc, #160]	@ (800093c <MX_ADC1_Init+0xf0>)
 800089c:	2201      	movs	r2, #1
 800089e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a0:	4b26      	ldr	r3, [pc, #152]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a6:	4b25      	ldr	r3, [pc, #148]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ac:	4b23      	ldr	r3, [pc, #140]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80008b2:	4b22      	ldr	r3, [pc, #136]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008b4:	2203      	movs	r2, #3
 80008b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b8:	4b20      	ldr	r3, [pc, #128]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008be:	4b1f      	ldr	r3, [pc, #124]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008cc:	481b      	ldr	r0, [pc, #108]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008ce:	f000 ffa5 	bl	800181c <HAL_ADC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008d8:	f000 fa96 	bl	8000e08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INTERL;
 80008dc:	2307      	movs	r3, #7
 80008de:	61fb      	str	r3, [r7, #28]
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80008e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008e4:	623b      	str	r3, [r7, #32]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_4CYCLES;
 80008e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4812      	ldr	r0, [pc, #72]	@ (800093c <MX_ADC1_Init+0xf0>)
 80008f4:	f002 f9da 	bl	8002cac <HAL_ADCEx_MultiModeConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80008fe:	f000 fa83 	bl	8000e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <MX_ADC1_Init+0xf8>)
 8000904:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000906:	2306      	movs	r3, #6
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800090e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000912:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000914:	2304      	movs	r3, #4
 8000916:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_ADC1_Init+0xf0>)
 8000926:	f001 fbbb 	bl	80020a0 <HAL_ADC_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000930:	f000 fa6a 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	@ 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2400002c 	.word	0x2400002c
 8000940:	40022000 	.word	0x40022000
 8000944:	0c900008 	.word	0x0c900008

08000948 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000960:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <MX_ADC2_Init+0xb4>)
 8000962:	4a27      	ldr	r2, [pc, #156]	@ (8000a00 <MX_ADC2_Init+0xb8>)
 8000964:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000966:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <MX_ADC2_Init+0xb4>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800096c:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <MX_ADC2_Init+0xb4>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000972:	4b22      	ldr	r3, [pc, #136]	@ (80009fc <MX_ADC2_Init+0xb4>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000978:	4b20      	ldr	r3, [pc, #128]	@ (80009fc <MX_ADC2_Init+0xb4>)
 800097a:	2204      	movs	r2, #4
 800097c:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800097e:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <MX_ADC2_Init+0xb4>)
 8000980:	2200      	movs	r2, #0
 8000982:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000984:	4b1d      	ldr	r3, [pc, #116]	@ (80009fc <MX_ADC2_Init+0xb4>)
 8000986:	2201      	movs	r2, #1
 8000988:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800098a:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <MX_ADC2_Init+0xb4>)
 800098c:	2201      	movs	r2, #1
 800098e:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <MX_ADC2_Init+0xb4>)
 8000992:	2200      	movs	r2, #0
 8000994:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <MX_ADC2_Init+0xb4>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800099c:	4b17      	ldr	r3, [pc, #92]	@ (80009fc <MX_ADC2_Init+0xb4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <MX_ADC2_Init+0xb4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <MX_ADC2_Init+0xb4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009b0:	4812      	ldr	r0, [pc, #72]	@ (80009fc <MX_ADC2_Init+0xb4>)
 80009b2:	f000 ff33 	bl	800181c <HAL_ADC_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC2_Init+0x78>
  {
    Error_Handler();
 80009bc:	f000 fa24 	bl	8000e08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009c0:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <MX_ADC2_Init+0xbc>)
 80009c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c4:	2306      	movs	r3, #6
 80009c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009cc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80009d0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d2:	2304      	movs	r3, #4
 80009d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4619      	mov	r1, r3
 80009e2:	4806      	ldr	r0, [pc, #24]	@ (80009fc <MX_ADC2_Init+0xb4>)
 80009e4:	f001 fb5c 	bl	80020a0 <HAL_ADC_ConfigChannel>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80009ee:	f000 fa0b 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	24000090 	.word	0x24000090
 8000a00:	40022100 	.word	0x40022100
 8000a04:	0c900008 	.word	0x0c900008

08000a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa0 <MX_TIM2_Init+0x98>)
 8000a28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 280;
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <MX_TIM2_Init+0x98>)
 8000a30:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8000a34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa0 <MX_TIM2_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a3c:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <MX_TIM2_Init+0x98>)
 8000a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <MX_TIM2_Init+0x98>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <MX_TIM2_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a50:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <MX_TIM2_Init+0x98>)
 8000a52:	f009 f8e9 	bl	8009c28 <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a5c:	f000 f9d4 	bl	8000e08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <MX_TIM2_Init+0x98>)
 8000a6e:	f009 f933 	bl	8009cd8 <HAL_TIM_ConfigClockSource>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000a78:	f000 f9c6 	bl	8000e08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_TIM2_Init+0x98>)
 8000a8a:	f009 fb61 	bl	800a150 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000a94:	f000 f9b8 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	3720      	adds	r7, #32
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2400016c 	.word	0x2400016c

08000aa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000aaa:	4a23      	ldr	r2, [pc, #140]	@ (8000b38 <MX_USART3_UART_Init+0x94>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aae:	4b21      	ldr	r3, [pc, #132]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b17      	ldr	r3, [pc, #92]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aec:	4811      	ldr	r0, [pc, #68]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000aee:	f009 fbbd 	bl	800a26c <HAL_UART_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000af8:	f000 f986 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000afc:	2100      	movs	r1, #0
 8000afe:	480d      	ldr	r0, [pc, #52]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000b00:	f00b f902 	bl	800bd08 <HAL_UARTEx_SetTxFifoThreshold>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b0a:	f000 f97d 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4808      	ldr	r0, [pc, #32]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000b12:	f00b f937 	bl	800bd84 <HAL_UARTEx_SetRxFifoThreshold>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b1c:	f000 f974 	bl	8000e08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b20:	4804      	ldr	r0, [pc, #16]	@ (8000b34 <MX_USART3_UART_Init+0x90>)
 8000b22:	f00b f8b8 	bl	800bc96 <HAL_UARTEx_DisableFifoMode>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b2c:	f000 f96c 	bl	8000e08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	240001b8 	.word	0x240001b8
 8000b38:	40004800 	.word	0x40004800

08000b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b42:	4b0d      	ldr	r3, [pc, #52]	@ (8000b78 <MX_DMA_Init+0x3c>)
 8000b44:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b48:	4a0b      	ldr	r2, [pc, #44]	@ (8000b78 <MX_DMA_Init+0x3c>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_DMA_Init+0x3c>)
 8000b54:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000b58:	f003 0301 	and.w	r3, r3, #1
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2100      	movs	r1, #0
 8000b64:	200b      	movs	r0, #11
 8000b66:	f002 fa18 	bl	8002f9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b6a:	200b      	movs	r0, #11
 8000b6c:	f002 fa2f 	bl	8002fce <HAL_NVIC_EnableIRQ>

}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	58024400 	.word	0x58024400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b3a      	ldr	r3, [pc, #232]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000b94:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000b98:	4a38      	ldr	r2, [pc, #224]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000b9a:	f043 0304 	orr.w	r3, r3, #4
 8000b9e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ba2:	4b36      	ldr	r3, [pc, #216]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000ba4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb0:	4b32      	ldr	r3, [pc, #200]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000bb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bb6:	4a31      	ldr	r2, [pc, #196]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bbc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000bc2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2b      	ldr	r3, [pc, #172]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000bd0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bd4:	4a29      	ldr	r2, [pc, #164]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000bd6:	f043 0301 	orr.w	r3, r3, #1
 8000bda:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bde:	4b27      	ldr	r3, [pc, #156]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000be0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bec:	4b23      	ldr	r3, [pc, #140]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000bee:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000bf2:	4a22      	ldr	r2, [pc, #136]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_GPIO_Init+0x100>)
 8000bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	481c      	ldr	r0, [pc, #112]	@ (8000c80 <MX_GPIO_Init+0x104>)
 8000c10:	f005 fafe 	bl	8006210 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c14:	2320      	movs	r3, #32
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4815      	ldr	r0, [pc, #84]	@ (8000c80 <MX_GPIO_Init+0x104>)
 8000c2c:	f005 f940 	bl	8005eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <MX_GPIO_Init+0x108>)
 8000c4e:	f005 f92f 	bl	8005eb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <MX_GPIO_Init+0x104>)
 8000c70:	f005 f91e 	bl	8005eb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000c74:	bf00      	nop
 8000c76:	3728      	adds	r7, #40	@ 0x28
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	58020000 	.word	0x58020000
 8000c84:	58020800 	.word	0x58020800

08000c88 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2120      	movs	r1, #32
 8000c94:	481a      	ldr	r0, [pc, #104]	@ (8000d00 <HAL_ADC_ConvHalfCpltCallback+0x78>)
 8000c96:	f005 fabb 	bl	8006210 <HAL_GPIO_WritePin>

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d129      	bne.n	8000cf8 <HAL_ADC_ConvHalfCpltCallback+0x70>
	  buff_process = SET;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_ADC_ConvHalfCpltCallback+0x7c>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = SET;
 8000caa:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <HAL_ADC_ConvHalfCpltCallback+0x80>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = RESET;
 8000cb0:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <HAL_ADC_ConvHalfCpltCallback+0x84>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	e018      	b.n	8000cee <HAL_ADC_ConvHalfCpltCallback+0x66>
	  {
		  buffer_1[2*j] = (uint16_t)(adc_buf[j]&0x0000FFFF);
 8000cbc:	4a14      	ldr	r2, [pc, #80]	@ (8000d10 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	b291      	uxth	r1, r2
 8000cca:	4a12      	ldr	r2, [pc, #72]	@ (8000d14 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8000ccc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_1[2*j+1] = (uint16_t)(adc_buf[j]>>16);
 8000cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8000d10 <HAL_ADC_ConvHalfCpltCallback+0x88>)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd8:	0c1a      	lsrs	r2, r3, #16
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b291      	uxth	r1, r2
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8000d14 <HAL_ADC_ConvHalfCpltCallback+0x8c>)
 8000ce4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++)
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	dde1      	ble.n	8000cbc <HAL_ADC_ConvHalfCpltCallback+0x34>
	  }
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	58020000 	.word	0x58020000
 8000d04:	24008ef2 	.word	0x24008ef2
 8000d08:	24008ef0 	.word	0x24008ef0
 8000d0c:	24008ef1 	.word	0x24008ef1
 8000d10:	2400024c 	.word	0x2400024c
 8000d14:	2400489c 	.word	0x2400489c

08000d18 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  // toggles buffer status pin so sampling rate can be measured
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2120      	movs	r1, #32
 8000d24:	481c      	ldr	r0, [pc, #112]	@ (8000d98 <HAL_ADC_ConvCpltCallback+0x80>)
 8000d26:	f005 fa73 	bl	8006210 <HAL_GPIO_WritePin>

  // copies ADC/DMA temp buffer into sample buffer
  if (!buff_process){
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d9c <HAL_ADC_ConvCpltCallback+0x84>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d12d      	bne.n	8000d90 <HAL_ADC_ConvCpltCallback+0x78>
	  buff_process = SET;
 8000d34:	4b19      	ldr	r3, [pc, #100]	@ (8000d9c <HAL_ADC_ConvCpltCallback+0x84>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
	  buff_flag_2 = SET;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_ADC_ConvCpltCallback+0x88>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
	  buff_flag_1 = RESET;
 8000d40:	4b18      	ldr	r3, [pc, #96]	@ (8000da4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e01c      	b.n	8000d86 <HAL_ADC_ConvCpltCallback+0x6e>
		  buffer_2[2*j] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]&0x0000FFFF);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f603 03ca 	addw	r3, r3, #2250	@ 0x8ca
 8000d52:	4a15      	ldr	r2, [pc, #84]	@ (8000da8 <HAL_ADC_ConvCpltCallback+0x90>)
 8000d54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	b291      	uxth	r1, r2
 8000d5e:	4a13      	ldr	r2, [pc, #76]	@ (8000dac <HAL_ADC_ConvCpltCallback+0x94>)
 8000d60:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  buffer_2[2*j+1] = (uint16_t)(adc_buf[j+ADC_BUF_LEN/2]>>16);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f603 03ca 	addw	r3, r3, #2250	@ 0x8ca
 8000d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <HAL_ADC_ConvCpltCallback+0x90>)
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	0c1a      	lsrs	r2, r3, #16
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	3301      	adds	r3, #1
 8000d78:	b291      	uxth	r1, r2
 8000d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8000dac <HAL_ADC_ConvCpltCallback+0x94>)
 8000d7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int j = 0; j < ADC_BUF_LEN/2; j++) {
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	3301      	adds	r3, #1
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f640 02c9 	movw	r2, #2249	@ 0x8c9
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	dddd      	ble.n	8000d4c <HAL_ADC_ConvCpltCallback+0x34>
	  }
  }
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	58020000 	.word	0x58020000
 8000d9c:	24008ef2 	.word	0x24008ef2
 8000da0:	24008ef1 	.word	0x24008ef1
 8000da4:	24008ef0 	.word	0x24008ef0
 8000da8:	2400024c 	.word	0x2400024c
 8000dac:	24006bc4 	.word	0x24006bc4

08000db0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000dc2:	f002 f91f 	bl	8003004 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000dd2:	231f      	movs	r3, #31
 8000dd4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000dd6:	2387      	movs	r3, #135	@ 0x87
 8000dd8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000dde:	2300      	movs	r3, #0
 8000de0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000de2:	2301      	movs	r3, #1
 8000de4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000de6:	2301      	movs	r3, #1
 8000de8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000df2:	463b      	mov	r3, r7
 8000df4:	4618      	mov	r0, r3
 8000df6:	f002 f93d 	bl	8003074 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000dfa:	2004      	movs	r0, #4
 8000dfc:	f002 f91a 	bl	8003034 <HAL_MPU_Enable>

}
 8000e00:	bf00      	nop
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e0c:	b672      	cpsid	i
}
 8000e0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <Error_Handler+0x8>

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000e20:	4a08      	ldr	r2, [pc, #32]	@ (8000e44 <HAL_MspInit+0x30>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_MspInit+0x30>)
 8000e2c:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8000e30:	f003 0302 	and.w	r3, r3, #2
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	58024400 	.word	0x58024400

08000e48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	@ 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a59      	ldr	r2, [pc, #356]	@ (8000fcc <HAL_ADC_MspInit+0x184>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d16c      	bne.n	8000f44 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e6a:	4b59      	ldr	r3, [pc, #356]	@ (8000fd0 <HAL_ADC_MspInit+0x188>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	4a57      	ldr	r2, [pc, #348]	@ (8000fd0 <HAL_ADC_MspInit+0x188>)
 8000e72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e74:	4b56      	ldr	r3, [pc, #344]	@ (8000fd0 <HAL_ADC_MspInit+0x188>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d10e      	bne.n	8000e9a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e7c:	4b55      	ldr	r3, [pc, #340]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000e7e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e82:	4a54      	ldr	r2, [pc, #336]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000e84:	f043 0320 	orr.w	r3, r3, #32
 8000e88:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000e8c:	4b51      	ldr	r3, [pc, #324]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000e8e:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000e92:	f003 0320 	and.w	r3, r3, #32
 8000e96:	61bb      	str	r3, [r7, #24]
 8000e98:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b4e      	ldr	r3, [pc, #312]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000e9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ea0:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000eac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eb8:	2340      	movs	r3, #64	@ 0x40
 8000eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 031c 	add.w	r3, r7, #28
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4843      	ldr	r0, [pc, #268]	@ (8000fd8 <HAL_ADC_MspInit+0x190>)
 8000ecc:	f004 fff0 	bl	8005eb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000ed0:	4b42      	ldr	r3, [pc, #264]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000ed2:	4a43      	ldr	r2, [pc, #268]	@ (8000fe0 <HAL_ADC_MspInit+0x198>)
 8000ed4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000ed6:	4b41      	ldr	r3, [pc, #260]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000ed8:	2209      	movs	r2, #9
 8000eda:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000edc:	4b3f      	ldr	r3, [pc, #252]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000eea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000ef2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ef6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ef8:	4b38      	ldr	r3, [pc, #224]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000efe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000f00:	4b36      	ldr	r3, [pc, #216]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000f02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f06:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000f08:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f10:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000f16:	4831      	ldr	r0, [pc, #196]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000f18:	f002 f8ec 	bl	80030f4 <HAL_DMA_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000f22:	f7ff ff71 	bl	8000e08 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a2c      	ldr	r2, [pc, #176]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000f2a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8000fdc <HAL_ADC_MspInit+0x194>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2012      	movs	r0, #18
 8000f38:	f002 f82f 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f3c:	2012      	movs	r0, #18
 8000f3e:	f002 f846 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000f42:	e03f      	b.n	8000fc4 <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a26      	ldr	r2, [pc, #152]	@ (8000fe4 <HAL_ADC_MspInit+0x19c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d13a      	bne.n	8000fc4 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <HAL_ADC_MspInit+0x188>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	3301      	adds	r3, #1
 8000f54:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <HAL_ADC_MspInit+0x188>)
 8000f56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f58:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <HAL_ADC_MspInit+0x188>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d10e      	bne.n	8000f7e <HAL_ADC_MspInit+0x136>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f60:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000f62:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f66:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000f70:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000f72:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000f80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f84:	4a13      	ldr	r2, [pc, #76]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <HAL_ADC_MspInit+0x18c>)
 8000f90:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9c:	2340      	movs	r3, #64	@ 0x40
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	4619      	mov	r1, r3
 8000fae:	480a      	ldr	r0, [pc, #40]	@ (8000fd8 <HAL_ADC_MspInit+0x190>)
 8000fb0:	f004 ff7e 	bl	8005eb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2012      	movs	r0, #18
 8000fba:	f001 ffee 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fbe:	2012      	movs	r0, #18
 8000fc0:	f002 f805 	bl	8002fce <HAL_NVIC_EnableIRQ>
}
 8000fc4:	bf00      	nop
 8000fc6:	3730      	adds	r7, #48	@ 0x30
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40022000 	.word	0x40022000
 8000fd0:	24008ef4 	.word	0x24008ef4
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	240000f4 	.word	0x240000f4
 8000fe0:	40020010 	.word	0x40020010
 8000fe4:	40022100 	.word	0x40022100

08000fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff8:	d10e      	bne.n	8001018 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_TIM_Base_MspInit+0x3c>)
 8000ffc:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001000:	4a08      	ldr	r2, [pc, #32]	@ (8001024 <HAL_TIM_Base_MspInit+0x3c>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_TIM_Base_MspInit+0x3c>)
 800100c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	58024400 	.word	0x58024400

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0ba      	sub	sp, #232	@ 0xe8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	22c0      	movs	r2, #192	@ 0xc0
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f00a ff27 	bl	800be9c <memset>
  if(huart->Instance==USART3)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a2b      	ldr	r2, [pc, #172]	@ (8001100 <HAL_UART_MspInit+0xd8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d14e      	bne.n	80010f6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001058:	f04f 0202 	mov.w	r2, #2
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	4618      	mov	r0, r3
 8001070:	f006 f97a 	bl	8007368 <HAL_RCCEx_PeriphCLKConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800107a:	f7ff fec5 	bl	8000e08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <HAL_UART_MspInit+0xdc>)
 8001080:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001084:	4a1f      	ldr	r2, [pc, #124]	@ (8001104 <HAL_UART_MspInit+0xdc>)
 8001086:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800108a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 800108e:	4b1d      	ldr	r3, [pc, #116]	@ (8001104 <HAL_UART_MspInit+0xdc>)
 8001090:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001094:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_UART_MspInit+0xdc>)
 800109e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010a2:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <HAL_UART_MspInit+0xdc>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_UART_MspInit+0xdc>)
 80010ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d4:	2307      	movs	r3, #7
 80010d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010de:	4619      	mov	r1, r3
 80010e0:	4809      	ldr	r0, [pc, #36]	@ (8001108 <HAL_UART_MspInit+0xe0>)
 80010e2:	f004 fee5 	bl	8005eb0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	2027      	movs	r0, #39	@ 0x27
 80010ec:	f001 ff55 	bl	8002f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010f0:	2027      	movs	r0, #39	@ 0x27
 80010f2:	f001 ff6c 	bl	8002fce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010f6:	bf00      	nop
 80010f8:	37e8      	adds	r7, #232	@ 0xe8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40004800 	.word	0x40004800
 8001104:	58024400 	.word	0x58024400
 8001108:	58020c00 	.word	0x58020c00

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <NMI_Handler+0x4>

08001114 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <MemManage_Handler+0x4>

08001124 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <UsageFault_Handler+0x4>

08001134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001162:	f000 f939 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001170:	4802      	ldr	r0, [pc, #8]	@ (800117c <DMA1_Stream0_IRQHandler+0x10>)
 8001172:	f003 fb1b 	bl	80047ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	240000f4 	.word	0x240000f4

08001180 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <ADC_IRQHandler+0x14>)
 8001186:	f000 fd5d 	bl	8001c44 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800118a:	4803      	ldr	r0, [pc, #12]	@ (8001198 <ADC_IRQHandler+0x18>)
 800118c:	f000 fd5a 	bl	8001c44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2400002c 	.word	0x2400002c
 8001198:	24000090 	.word	0x24000090

0800119c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <USART3_IRQHandler+0x10>)
 80011a2:	f009 f8b3 	bl	800a30c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240001b8 	.word	0x240001b8

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b4:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <SystemInit+0xd0>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ba:	4a31      	ldr	r2, [pc, #196]	@ (8001280 <SystemInit+0xd0>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <SystemInit+0xd4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d807      	bhi.n	80011e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001284 <SystemInit+0xd4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 030f 	bic.w	r3, r3, #15
 80011d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001284 <SystemInit+0xd4>)
 80011da:	f043 0303 	orr.w	r3, r3, #3
 80011de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011e0:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <SystemInit+0xd8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a28      	ldr	r2, [pc, #160]	@ (8001288 <SystemInit+0xd8>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <SystemInit+0xd8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <SystemInit+0xd8>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4924      	ldr	r1, [pc, #144]	@ (8001288 <SystemInit+0xd8>)
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <SystemInit+0xdc>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <SystemInit+0xd4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800120a:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <SystemInit+0xd4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 030f 	bic.w	r3, r3, #15
 8001212:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <SystemInit+0xd4>)
 8001214:	f043 0303 	orr.w	r3, r3, #3
 8001218:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <SystemInit+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <SystemInit+0xd8>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <SystemInit+0xd8>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <SystemInit+0xd8>)
 800122e:	4a18      	ldr	r2, [pc, #96]	@ (8001290 <SystemInit+0xe0>)
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <SystemInit+0xd8>)
 8001234:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <SystemInit+0xe4>)
 8001236:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <SystemInit+0xd8>)
 800123a:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <SystemInit+0xe8>)
 800123c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <SystemInit+0xd8>)
 8001240:	2200      	movs	r2, #0
 8001242:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001244:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <SystemInit+0xd8>)
 8001246:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <SystemInit+0xe8>)
 8001248:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <SystemInit+0xd8>)
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001250:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <SystemInit+0xd8>)
 8001252:	4a11      	ldr	r2, [pc, #68]	@ (8001298 <SystemInit+0xe8>)
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <SystemInit+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <SystemInit+0xd8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a09      	ldr	r2, [pc, #36]	@ (8001288 <SystemInit+0xd8>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001266:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <SystemInit+0xd8>)
 800126a:	2200      	movs	r2, #0
 800126c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <SystemInit+0xec>)
 8001270:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001274:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	52002000 	.word	0x52002000
 8001288:	58024400 	.word	0x58024400
 800128c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001290:	02020200 	.word	0x02020200
 8001294:	01ff0000 	.word	0x01ff0000
 8001298:	01010280 	.word	0x01010280
 800129c:	52004000 	.word	0x52004000

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a4:	f7ff ff84 	bl	80011b0 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	@ (80012dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	@ (80012e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	@ (80012ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f00a fded 	bl	800beac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff f983 	bl	80005dc <main>
  bx  lr
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80012dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012e0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012e4:	0800bf5c 	.word	0x0800bf5c
  ldr r2, =_sbss
 80012e8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80012ec:	24008efc 	.word	0x24008efc

080012f0 <BDMA1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <BDMA1_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f001 fe42 	bl	8002f84 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001300:	f005 fe5c 	bl	8006fbc <HAL_RCC_GetSysClockFreq>
 8001304:	4602      	mov	r2, r0
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_Init+0x68>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	4913      	ldr	r1, [pc, #76]	@ (8001360 <HAL_Init+0x6c>)
 8001312:	5ccb      	ldrb	r3, [r1, r3]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <HAL_Init+0x6c>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <HAL_Init+0x70>)
 8001336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001338:	4a0b      	ldr	r2, [pc, #44]	@ (8001368 <HAL_Init+0x74>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133e:	200f      	movs	r0, #15
 8001340:	f000 f814 	bl	800136c <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e002      	b.n	8001354 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134e:	f7ff fd61 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	58024400 	.word	0x58024400
 8001360:	0800bf0c 	.word	0x0800bf0c
 8001364:	24000004 	.word	0x24000004
 8001368:	24000000 	.word	0x24000000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_InitTick+0x60>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e021      	b.n	80013c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_InitTick+0x64>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fe27 	bl	8002fea <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f001 fdf1 	bl	8002f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <HAL_InitTick+0x68>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2400000c 	.word	0x2400000c
 80013d0:	24000000 	.word	0x24000000
 80013d4:	24000008 	.word	0x24000008

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2400000c 	.word	0x2400000c
 80013fc:	24008ef8 	.word	0x24008ef8

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	24008ef8 	.word	0x24008ef8

08001418 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800141c:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_GetREVID+0x14>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0c1b      	lsrs	r3, r3, #16
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	5c001000 	.word	0x5c001000

08001430 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	609a      	str	r2, [r3, #8]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	3360      	adds	r3, #96	@ 0x60
 80014aa:	461a      	mov	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	431a      	orrs	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80014cc:	bf00      	nop
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	f003 031f 	and.w	r3, r3, #31
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	611a      	str	r2, [r3, #16]
}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800150a:	b480      	push	{r7}
 800150c:	b087      	sub	sp, #28
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3360      	adds	r3, #96	@ 0x60
 800151a:	461a      	mov	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	431a      	orrs	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	601a      	str	r2, [r3, #0]
  }
}
 8001534:	bf00      	nop
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001566:	b480      	push	{r7}
 8001568:	b087      	sub	sp, #28
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	3330      	adds	r3, #48	@ 0x30
 8001576:	461a      	mov	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	0a1b      	lsrs	r3, r3, #8
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	4413      	add	r3, r2
 8001584:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	211f      	movs	r1, #31
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	401a      	ands	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	0e9b      	lsrs	r3, r3, #26
 800159e:	f003 011f 	and.w	r1, r3, #31
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	431a      	orrs	r2, r3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015b2:	bf00      	nop
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015be:	b480      	push	{r7}
 80015c0:	b083      	sub	sp, #12
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ca:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	3314      	adds	r3, #20
 80015f4:	461a      	mov	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	0e5b      	lsrs	r3, r3, #25
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	4413      	add	r3, r2
 8001602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	0d1b      	lsrs	r3, r3, #20
 800160c:	f003 031f 	and.w	r3, r3, #31
 8001610:	2107      	movs	r1, #7
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	401a      	ands	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	0d1b      	lsrs	r3, r3, #20
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001654:	43db      	mvns	r3, r3
 8001656:	401a      	ands	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f003 0318 	and.w	r3, r3, #24
 800165e:	4908      	ldr	r1, [pc, #32]	@ (8001680 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001660:	40d9      	lsrs	r1, r3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	400b      	ands	r3, r1
 8001666:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800166a:	431a      	orrs	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	000fffff 	.word	0x000fffff

08001684 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 031f 	and.w	r3, r3, #31
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80016ca:	4013      	ands	r3, r2
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6093      	str	r3, [r2, #8]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	5fffffc0 	.word	0x5fffffc0

080016e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016f4:	d101      	bne.n	80016fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	4b05      	ldr	r3, [pc, #20]	@ (800172c <LL_ADC_EnableInternalRegulator+0x24>)
 8001716:	4013      	ands	r3, r2
 8001718:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	6fffffc0 	.word	0x6fffffc0

08001730 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001744:	d101      	bne.n	800174a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001746:	2301      	movs	r3, #1
 8001748:	e000      	b.n	800174c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <LL_ADC_Enable+0x24>)
 8001766:	4013      	ands	r3, r2
 8001768:	f043 0201 	orr.w	r2, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	7fffffc0 	.word	0x7fffffc0

08001780 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d101      	bne.n	8001798 <LL_ADC_IsEnabled+0x18>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <LL_ADC_IsEnabled+0x1a>
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <LL_ADC_REG_StartConversion+0x24>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	f043 0204 	orr.w	r2, r3, #4
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	7fffffc0 	.word	0x7fffffc0

080017d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017f6:	b480      	push	{r7}
 80017f8:	b083      	sub	sp, #12
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b08      	cmp	r3, #8
 8001808:	d101      	bne.n	800180e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b089      	sub	sp, #36	@ 0x24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001824:	2300      	movs	r3, #0
 8001826:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e138      	b.n	8001aa8 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff faff 	bl	8000e48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff3f 	bl	80016e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d004      	beq.n	8001872 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff25 	bl	80016bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff5a 	bl	8001730 <LL_ADC_IsInternalRegulatorEnabled>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d114      	bne.n	80018ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff3e 	bl	8001708 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800188c:	4b88      	ldr	r3, [pc, #544]	@ (8001ab0 <HAL_ADC_Init+0x294>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	099b      	lsrs	r3, r3, #6
 8001892:	4a88      	ldr	r2, [pc, #544]	@ (8001ab4 <HAL_ADC_Init+0x298>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	3301      	adds	r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800189e:	e002      	b.n	80018a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f9      	bne.n	80018a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff3d 	bl	8001730 <LL_ADC_IsInternalRegulatorEnabled>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d10d      	bne.n	80018d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018c0:	f043 0210 	orr.w	r2, r3, #16
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018cc:	f043 0201 	orr.w	r2, r3, #1
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff77 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 80018e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f040 80d2 	bne.w	8001a96 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 80ce 	bne.w	8001a96 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fe:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001902:	f043 0202 	orr.w	r2, r3, #2
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff36 	bl	8001780 <LL_ADC_IsEnabled>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d110      	bne.n	800193c <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800191a:	4867      	ldr	r0, [pc, #412]	@ (8001ab8 <HAL_ADC_Init+0x29c>)
 800191c:	f7ff ff30 	bl	8001780 <LL_ADC_IsEnabled>
 8001920:	4604      	mov	r4, r0
 8001922:	4866      	ldr	r0, [pc, #408]	@ (8001abc <HAL_ADC_Init+0x2a0>)
 8001924:	f7ff ff2c 	bl	8001780 <LL_ADC_IsEnabled>
 8001928:	4603      	mov	r3, r0
 800192a:	4323      	orrs	r3, r4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	4619      	mov	r1, r3
 8001936:	4862      	ldr	r0, [pc, #392]	@ (8001ac0 <HAL_ADC_Init+0x2a4>)
 8001938:	f7ff fd7a 	bl	8001430 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7d5b      	ldrb	r3, [r3, #21]
 8001940:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001946:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 800194c:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7f1b      	ldrb	r3, [r3, #28]
 8001952:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7f1b      	ldrb	r3, [r3, #28]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	3b01      	subs	r3, #1
 8001966:	045b      	lsls	r3, r3, #17
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	2b00      	cmp	r3, #0
 8001974:	d009      	beq.n	800198a <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001982:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac4 <HAL_ADC_Init+0x2a8>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	69b9      	ldr	r1, [r7, #24]
 800199a:	430b      	orrs	r3, r1
 800199c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ff14 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 80019a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff21 	bl	80017f6 <LL_ADC_INJ_IsConversionOngoing>
 80019b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d14a      	bne.n	8001a52 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d147      	bne.n	8001a52 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7d1b      	ldrb	r3, [r3, #20]
 80019c6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac8 <HAL_ADC_Init+0x2ac>)
 80019d8:	4013      	ands	r3, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	69b9      	ldr	r1, [r7, #24]
 80019e0:	430b      	orrs	r3, r1
 80019e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d11b      	bne.n	8001a26 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691a      	ldr	r2, [r3, #16]
 80019fa:	4b34      	ldr	r3, [pc, #208]	@ (8001acc <HAL_ADC_Init+0x2b0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001a02:	3a01      	subs	r2, #1
 8001a04:	0411      	lsls	r1, r2, #16
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a0a:	4311      	orrs	r1, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a10:	4311      	orrs	r1, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a16:	430a      	orrs	r2, r1
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	e007      	b.n	8001a36 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691a      	ldr	r2, [r3, #16]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0201 	bic.w	r2, r2, #1
 8001a34:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 ff21 	bl	8002894 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d10c      	bne.n	8001a74 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a60:	f023 010f 	bic.w	r1, r3, #15
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a72:	e007      	b.n	8001a84 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 020f 	bic.w	r2, r2, #15
 8001a82:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a88:	f023 0303 	bic.w	r3, r3, #3
 8001a8c:	f043 0201 	orr.w	r2, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a94:	e007      	b.n	8001aa6 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9a:	f043 0210 	orr.w	r2, r3, #16
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3724      	adds	r7, #36	@ 0x24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	24000000 	.word	0x24000000
 8001ab4:	053e2d63 	.word	0x053e2d63
 8001ab8:	40022000 	.word	0x40022000
 8001abc:	40022100 	.word	0x40022100
 8001ac0:	40022300 	.word	0x40022300
 8001ac4:	fff0c003 	.word	0xfff0c003
 8001ac8:	ffffbffc 	.word	0xffffbffc
 8001acc:	fc00f81e 	.word	0xfc00f81e

08001ad0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ad8:	4856      	ldr	r0, [pc, #344]	@ (8001c34 <HAL_ADC_Start+0x164>)
 8001ada:	f7ff fdd3 	bl	8001684 <LL_ADC_GetMultimode>
 8001ade:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fe73 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f040 809a 	bne.w	8001c26 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_Start+0x30>
 8001afc:	2302      	movs	r3, #2
 8001afe:	e095      	b.n	8001c2c <HAL_ADC_Start+0x15c>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 fdb3 	bl	8002674 <ADC_Enable>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b12:	7dfb      	ldrb	r3, [r7, #23]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f040 8081 	bne.w	8001c1c <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001b1e:	4b46      	ldr	r3, [pc, #280]	@ (8001c38 <HAL_ADC_Start+0x168>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a43      	ldr	r2, [pc, #268]	@ (8001c3c <HAL_ADC_Start+0x16c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d002      	beq.n	8001b3a <HAL_ADC_Start+0x6a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	e000      	b.n	8001b3c <HAL_ADC_Start+0x6c>
 8001b3a:	4b41      	ldr	r3, [pc, #260]	@ (8001c40 <HAL_ADC_Start+0x170>)
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6812      	ldr	r2, [r2, #0]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d002      	beq.n	8001b4a <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d105      	bne.n	8001b56 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b62:	d106      	bne.n	8001b72 <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b68:	f023 0206 	bic.w	r2, r3, #6
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b70:	e002      	b.n	8001b78 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	221c      	movs	r2, #28
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c3c <HAL_ADC_Start+0x16c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d002      	beq.n	8001b98 <HAL_ADC_Start+0xc8>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	e000      	b.n	8001b9a <HAL_ADC_Start+0xca>
 8001b98:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <HAL_ADC_Start+0x170>)
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d008      	beq.n	8001bb4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b05      	cmp	r3, #5
 8001bac:	d002      	beq.n	8001bb4 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	d114      	bne.n	8001bde <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d007      	beq.n	8001bd2 <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bc6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001bca:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fde6 	bl	80017a8 <LL_ADC_REG_StartConversion>
 8001bdc:	e025      	b.n	8001c2a <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a13      	ldr	r2, [pc, #76]	@ (8001c3c <HAL_ADC_Start+0x16c>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d002      	beq.n	8001bfa <HAL_ADC_Start+0x12a>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	e000      	b.n	8001bfc <HAL_ADC_Start+0x12c>
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_ADC_Start+0x170>)
 8001bfc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00f      	beq.n	8001c2a <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c0e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c12:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c1a:	e006      	b.n	8001c2a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001c24:	e001      	b.n	8001c2a <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c26:	2302      	movs	r3, #2
 8001c28:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40022300 	.word	0x40022300
 8001c38:	fffff0fe 	.word	0xfffff0fe
 8001c3c:	40022100 	.word	0x40022100
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c60:	4882      	ldr	r0, [pc, #520]	@ (8001e6c <HAL_ADC_IRQHandler+0x228>)
 8001c62:	f7ff fd0f 	bl	8001684 <LL_ADC_GetMultimode>
 8001c66:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d017      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x5e>
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d012      	beq.n	8001ca2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 ffff 	bl	8002c98 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <HAL_ADC_IRQHandler+0x72>
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10a      	bne.n	8001ccc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8083 	beq.w	8001dc8 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d07d      	beq.n	8001dc8 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d105      	bne.n	8001ce4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fc29 	bl	8001540 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d062      	beq.n	8001dba <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a5d      	ldr	r2, [pc, #372]	@ (8001e70 <HAL_ADC_IRQHandler+0x22c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d002      	beq.n	8001d04 <HAL_ADC_IRQHandler+0xc0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	e000      	b.n	8001d06 <HAL_ADC_IRQHandler+0xc2>
 8001d04:	4b5b      	ldr	r3, [pc, #364]	@ (8001e74 <HAL_ADC_IRQHandler+0x230>)
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d008      	beq.n	8001d20 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b05      	cmp	r3, #5
 8001d18:	d002      	beq.n	8001d20 <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	d104      	bne.n	8001d2a <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	623b      	str	r3, [r7, #32]
 8001d28:	e00c      	b.n	8001d44 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a50      	ldr	r2, [pc, #320]	@ (8001e70 <HAL_ADC_IRQHandler+0x22c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d002      	beq.n	8001d3a <HAL_ADC_IRQHandler+0xf6>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_IRQHandler+0xf8>
 8001d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e74 <HAL_ADC_IRQHandler+0x230>)
 8001d3c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d135      	bne.n	8001dba <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d12e      	bne.n	8001dba <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fd35 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11a      	bne.n	8001da2 <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 020c 	bic.w	r2, r2, #12
 8001d7a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d112      	bne.n	8001dba <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54
 8001da0:	e00b      	b.n	8001dba <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7fe ffac 	bl	8000d18 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	220c      	movs	r2, #12
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d004      	beq.n	8001ddc <HAL_ADC_IRQHandler+0x198>
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10b      	bne.n	8001df4 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 809f 	beq.w	8001f26 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8099 	beq.w	8001f26 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fbd4 	bl	80015be <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e16:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fb8f 	bl	8001540 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e22:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a11      	ldr	r2, [pc, #68]	@ (8001e70 <HAL_ADC_IRQHandler+0x22c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d002      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x1f0>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	e000      	b.n	8001e36 <HAL_ADC_IRQHandler+0x1f2>
 8001e34:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <HAL_ADC_IRQHandler+0x230>)
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d008      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d002      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2b07      	cmp	r3, #7
 8001e4e:	d104      	bne.n	8001e5a <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	623b      	str	r3, [r7, #32]
 8001e58:	e013      	b.n	8001e82 <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a04      	ldr	r2, [pc, #16]	@ (8001e70 <HAL_ADC_IRQHandler+0x22c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d009      	beq.n	8001e78 <HAL_ADC_IRQHandler+0x234>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	e007      	b.n	8001e7a <HAL_ADC_IRQHandler+0x236>
 8001e6a:	bf00      	nop
 8001e6c:	40022300 	.word	0x40022300
 8001e70:	40022100 	.word	0x40022100
 8001e74:	40022000 	.word	0x40022000
 8001e78:	4b7d      	ldr	r3, [pc, #500]	@ (8002070 <HAL_ADC_IRQHandler+0x42c>)
 8001e7a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d047      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001e88:	6a3b      	ldr	r3, [r7, #32]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <HAL_ADC_IRQHandler+0x25e>
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d03f      	beq.n	8001f18 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d13a      	bne.n	8001f18 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eac:	2b40      	cmp	r3, #64	@ 0x40
 8001eae:	d133      	bne.n	8001f18 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d12e      	bne.n	8001f18 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fc99 	bl	80017f6 <LL_ADC_INJ_IsConversionOngoing>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d11a      	bne.n	8001f00 <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001ed8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ede:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d112      	bne.n	8001f18 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ef6:	f043 0201 	orr.w	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	655a      	str	r2, [r3, #84]	@ 0x54
 8001efe:	e00b      	b.n	8001f18 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f04:	f043 0210 	orr.w	r2, r3, #16
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	f043 0201 	orr.w	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fe95 	bl	8002c48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2260      	movs	r2, #96	@ 0x60
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d011      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x310>
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00c      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f896 	bl	8002078 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2280      	movs	r2, #128	@ 0x80
 8001f52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d012      	beq.n	8001f84 <HAL_ADC_IRQHandler+0x340>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00d      	beq.n	8001f84 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f6c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fe7b 	bl	8002c70 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d012      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x370>
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00d      	beq.n	8001fb4 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f9c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f000 fe6d 	bl	8002c84 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d036      	beq.n	800202c <HAL_ADC_IRQHandler+0x3e8>
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d031      	beq.n	800202c <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd4:	e014      	b.n	8002000 <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001fdc:	4825      	ldr	r0, [pc, #148]	@ (8002074 <HAL_ADC_IRQHandler+0x430>)
 8001fde:	f7ff fb5f 	bl	80016a0 <LL_ADC_GetMultiDMATransfer>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fec:	e008      	b.n	8002000 <HAL_ADC_IRQHandler+0x3bc>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	2b01      	cmp	r3, #1
 8002004:	d10e      	bne.n	8002024 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f834 	bl	800208c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2210      	movs	r2, #16
 800202a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002032:	2b00      	cmp	r3, #0
 8002034:	d018      	beq.n	8002068 <HAL_ADC_IRQHandler+0x424>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002044:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	f043 0208 	orr.w	r2, r3, #8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002060:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fdfa 	bl	8002c5c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	@ 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40022000 	.word	0x40022000
 8002074:	40022300 	.word	0x40022300

08002078 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b0a1      	sub	sp, #132	@ 0x84
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a95      	ldr	r2, [pc, #596]	@ (8002310 <HAL_ADC_ConfigChannel+0x270>)
 80020ba:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x2a>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e2c0      	b.n	800264c <HAL_ADC_ConfigChannel+0x5ac>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff fb7a 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 82a5 	bne.w	800262e <HAL_ADC_ConfigChannel+0x58e>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db2c      	blt.n	8002146 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d108      	bne.n	800210a <HAL_ADC_ConfigChannel+0x6a>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0e9b      	lsrs	r3, r3, #26
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2201      	movs	r2, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	e016      	b.n	8002138 <HAL_ADC_ConfigChannel+0x98>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002118:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800211a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800211c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8002122:	2320      	movs	r3, #32
 8002124:	e003      	b.n	800212e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8002126:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2201      	movs	r2, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	69d1      	ldr	r1, [r2, #28]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	430b      	orrs	r3, r1
 8002144:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6859      	ldr	r1, [r3, #4]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	f7ff fa07 	bl	8001566 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fb37 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8002162:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fb44 	bl	80017f6 <LL_ADC_INJ_IsConversionOngoing>
 800216e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002170:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002172:	2b00      	cmp	r3, #0
 8002174:	f040 80a0 	bne.w	80022b8 <HAL_ADC_ConfigChannel+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002178:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 809c 	bne.w	80022b8 <HAL_ADC_ConfigChannel+0x218>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6819      	ldr	r1, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	461a      	mov	r2, r3
 800218e:	f7ff fa29 	bl	80015e4 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0310 	and.w	r3, r3, #16
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10b      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x118>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	e00a      	b.n	80021ce <HAL_ADC_ConfigChannel+0x12e>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d027      	beq.n	8002228 <HAL_ADC_ConfigChannel+0x188>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6919      	ldr	r1, [r3, #16]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021e6:	f7ff f957 	bl	8001498 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6919      	ldr	r1, [r3, #16]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	7e5b      	ldrb	r3, [r3, #25]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x160>
 80021fa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80021fe:	e000      	b.n	8002202 <HAL_ADC_ConfigChannel+0x162>
 8002200:	2300      	movs	r3, #0
 8002202:	461a      	mov	r2, r3
 8002204:	f7ff f981 	bl	800150a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6818      	ldr	r0, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	6919      	ldr	r1, [r3, #16]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	7e1b      	ldrb	r3, [r3, #24]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d102      	bne.n	800221e <HAL_ADC_ConfigChannel+0x17e>
 8002218:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800221c:	e000      	b.n	8002220 <HAL_ADC_ConfigChannel+0x180>
 800221e:	2300      	movs	r3, #0
 8002220:	461a      	mov	r2, r3
 8002222:	f7ff f959 	bl	80014d8 <LL_ADC_SetDataRightShift>
 8002226:	e047      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x218>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	069b      	lsls	r3, r3, #26
 8002238:	429a      	cmp	r2, r3
 800223a:	d107      	bne.n	800224c <HAL_ADC_ConfigChannel+0x1ac>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800224a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002252:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	069b      	lsls	r3, r3, #26
 800225c:	429a      	cmp	r2, r3
 800225e:	d107      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1d0>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800226e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002276:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	069b      	lsls	r3, r3, #26
 8002280:	429a      	cmp	r2, r3
 8002282:	d107      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x1f4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002292:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	069b      	lsls	r3, r3, #26
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d107      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x218>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fa5f 	bl	8001780 <LL_ADC_IsEnabled>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 81bb 	bne.w	8002640 <HAL_ADC_ConfigChannel+0x5a0>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f7ff f9b0 	bl	800163c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002310 <HAL_ADC_ConfigChannel+0x270>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	f040 8130 	bne.w	8002548 <HAL_ADC_ConfigChannel+0x4a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10d      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x274>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	3301      	adds	r3, #1
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	2b09      	cmp	r3, #9
 8002306:	bf94      	ite	ls
 8002308:	2301      	movls	r3, #1
 800230a:	2300      	movhi	r3, #0
 800230c:	b2db      	uxtb	r3, r3
 800230e:	e01b      	b.n	8002348 <HAL_ADC_ConfigChannel+0x2a8>
 8002310:	47ff0000 	.word	0x47ff0000
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002324:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x290>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e003      	b.n	8002338 <HAL_ADC_ConfigChannel+0x298>
  return __builtin_clz(value);
 8002330:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	2b09      	cmp	r3, #9
 8002340:	bf94      	ite	ls
 8002342:	2301      	movls	r3, #1
 8002344:	2300      	movhi	r3, #0
 8002346:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002348:	2b00      	cmp	r3, #0
 800234a:	d079      	beq.n	8002440 <HAL_ADC_ConfigChannel+0x3a0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x2c8>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	3301      	adds	r3, #1
 8002360:	069b      	lsls	r3, r3, #26
 8002362:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002366:	e015      	b.n	8002394 <HAL_ADC_ConfigChannel+0x2f4>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002376:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002378:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800237a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x2e4>
    return 32U;
 8002380:	2320      	movs	r3, #32
 8002382:	e003      	b.n	800238c <HAL_ADC_ConfigChannel+0x2ec>
  return __builtin_clz(value);
 8002384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	069b      	lsls	r3, r3, #26
 8002390:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x314>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	0e9b      	lsrs	r3, r3, #26
 80023a6:	3301      	adds	r3, #1
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f303 	lsl.w	r3, r1, r3
 80023b2:	e017      	b.n	80023e4 <HAL_ADC_ConfigChannel+0x344>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80023c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80023c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e003      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 80023d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3301      	adds	r3, #1
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	ea42 0103 	orr.w	r1, r2, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <HAL_ADC_ConfigChannel+0x36a>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0e9b      	lsrs	r3, r3, #26
 80023fa:	3301      	adds	r3, #1
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	051b      	lsls	r3, r3, #20
 8002408:	e018      	b.n	800243c <HAL_ADC_ConfigChannel+0x39c>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800241c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e003      	b.n	800242e <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800243c:	430b      	orrs	r3, r1
 800243e:	e07e      	b.n	800253e <HAL_ADC_ConfigChannel+0x49e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002448:	2b00      	cmp	r3, #0
 800244a:	d107      	bne.n	800245c <HAL_ADC_ConfigChannel+0x3bc>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	3301      	adds	r3, #1
 8002454:	069b      	lsls	r3, r3, #26
 8002456:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800245a:	e015      	b.n	8002488 <HAL_ADC_ConfigChannel+0x3e8>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002464:	fa93 f3a3 	rbit	r3, r3
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800246e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x3d8>
    return 32U;
 8002474:	2320      	movs	r3, #32
 8002476:	e003      	b.n	8002480 <HAL_ADC_ConfigChannel+0x3e0>
  return __builtin_clz(value);
 8002478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800247a:	fab3 f383 	clz	r3, r3
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3301      	adds	r3, #1
 8002482:	069b      	lsls	r3, r3, #26
 8002484:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x408>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	3301      	adds	r3, #1
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	e017      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x438>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	61bb      	str	r3, [r7, #24]
  return result;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024ba:	6a3b      	ldr	r3, [r7, #32]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x424>
    return 32U;
 80024c0:	2320      	movs	r3, #32
 80024c2:	e003      	b.n	80024cc <HAL_ADC_ConfigChannel+0x42c>
  return __builtin_clz(value);
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	fab3 f383 	clz	r3, r3
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f003 031f 	and.w	r3, r3, #31
 80024d2:	2101      	movs	r1, #1
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	ea42 0103 	orr.w	r1, r2, r3
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10d      	bne.n	8002504 <HAL_ADC_ConfigChannel+0x464>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	3301      	adds	r3, #1
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	3b1e      	subs	r3, #30
 80024fc:	051b      	lsls	r3, r3, #20
 80024fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002502:	e01b      	b.n	800253c <HAL_ADC_ConfigChannel+0x49c>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	fa93 f3a3 	rbit	r3, r3
 8002510:	60fb      	str	r3, [r7, #12]
  return result;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800251c:	2320      	movs	r3, #32
 800251e:	e003      	b.n	8002528 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3301      	adds	r3, #1
 800252a:	f003 021f 	and.w	r2, r3, #31
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	3b1e      	subs	r3, #30
 8002536:	051b      	lsls	r3, r3, #20
 8002538:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800253c:	430b      	orrs	r3, r1
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	6892      	ldr	r2, [r2, #8]
 8002542:	4619      	mov	r1, r3
 8002544:	f7ff f84e 	bl	80015e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	da77      	bge.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002550:	4840      	ldr	r0, [pc, #256]	@ (8002654 <HAL_ADC_ConfigChannel+0x5b4>)
 8002552:	f7fe ff93 	bl	800147c <LL_ADC_GetCommonPathInternalCh>
 8002556:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002558:	483f      	ldr	r0, [pc, #252]	@ (8002658 <HAL_ADC_ConfigChannel+0x5b8>)
 800255a:	f7ff f911 	bl	8001780 <LL_ADC_IsEnabled>
 800255e:	4604      	mov	r4, r0
 8002560:	483e      	ldr	r0, [pc, #248]	@ (800265c <HAL_ADC_ConfigChannel+0x5bc>)
 8002562:	f7ff f90d 	bl	8001780 <LL_ADC_IsEnabled>
 8002566:	4603      	mov	r3, r0
 8002568:	4323      	orrs	r3, r4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d155      	bne.n	800261a <HAL_ADC_ConfigChannel+0x57a>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a3b      	ldr	r2, [pc, #236]	@ (8002660 <HAL_ADC_ConfigChannel+0x5c0>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d122      	bne.n	80025be <HAL_ADC_ConfigChannel+0x51e>
 8002578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800257a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d11d      	bne.n	80025be <HAL_ADC_ConfigChannel+0x51e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a35      	ldr	r2, [pc, #212]	@ (800265c <HAL_ADC_ConfigChannel+0x5bc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d159      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800258c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800258e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002592:	4619      	mov	r1, r3
 8002594:	482f      	ldr	r0, [pc, #188]	@ (8002654 <HAL_ADC_ConfigChannel+0x5b4>)
 8002596:	f7fe ff5e 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800259a:	4b32      	ldr	r3, [pc, #200]	@ (8002664 <HAL_ADC_ConfigChannel+0x5c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	099b      	lsrs	r3, r3, #6
 80025a0:	4a31      	ldr	r2, [pc, #196]	@ (8002668 <HAL_ADC_ConfigChannel+0x5c8>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	3301      	adds	r3, #1
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025ae:	e002      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x516>
              {
                wait_loop_index--;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1f9      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x510>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025bc:	e040      	b.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	@ (800266c <HAL_ADC_ConfigChannel+0x5cc>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d111      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x54c>
 80025c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10c      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x54c>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a21      	ldr	r2, [pc, #132]	@ (800265c <HAL_ADC_ConfigChannel+0x5bc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d131      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025e2:	4619      	mov	r1, r3
 80025e4:	481b      	ldr	r0, [pc, #108]	@ (8002654 <HAL_ADC_ConfigChannel+0x5b4>)
 80025e6:	f7fe ff36 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025ea:	e029      	b.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002670 <HAL_ADC_ConfigChannel+0x5d0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d124      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
 80025f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d11f      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a15      	ldr	r2, [pc, #84]	@ (800265c <HAL_ADC_ConfigChannel+0x5bc>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d11a      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800260a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800260c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002610:	4619      	mov	r1, r3
 8002612:	4810      	ldr	r0, [pc, #64]	@ (8002654 <HAL_ADC_ConfigChannel+0x5b4>)
 8002614:	f7fe ff1f 	bl	8001456 <LL_ADC_SetCommonPathInternalCh>
 8002618:	e012      	b.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800262c:	e008      	b.n	8002640 <HAL_ADC_ConfigChannel+0x5a0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002632:	f043 0220 	orr.w	r2, r3, #32
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002648:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800264c:	4618      	mov	r0, r3
 800264e:	3784      	adds	r7, #132	@ 0x84
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}
 8002654:	40022300 	.word	0x40022300
 8002658:	40022000 	.word	0x40022000
 800265c:	40022100 	.word	0x40022100
 8002660:	cb840000 	.word	0xcb840000
 8002664:	24000000 	.word	0x24000000
 8002668:	053e2d63 	.word	0x053e2d63
 800266c:	bac04000 	.word	0xbac04000
 8002670:	cfb80000 	.word	0xcfb80000

08002674 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff f87d 	bl	8001780 <LL_ADC_IsEnabled>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d161      	bne.n	8002750 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	4b32      	ldr	r3, [pc, #200]	@ (800275c <ADC_Enable+0xe8>)
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269e:	f043 0210 	orr.w	r2, r3, #16
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026aa:	f043 0201 	orr.w	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e04d      	b.n	8002752 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f84c 	bl	8001758 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80026c0:	f7fe fe9e 	bl	8001400 <HAL_GetTick>
 80026c4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026c6:	4826      	ldr	r0, [pc, #152]	@ (8002760 <ADC_Enable+0xec>)
 80026c8:	f7fe ffdc 	bl	8001684 <LL_ADC_GetMultimode>
 80026cc:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a24      	ldr	r2, [pc, #144]	@ (8002764 <ADC_Enable+0xf0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d002      	beq.n	80026de <ADC_Enable+0x6a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	e000      	b.n	80026e0 <ADC_Enable+0x6c>
 80026de:	4b22      	ldr	r3, [pc, #136]	@ (8002768 <ADC_Enable+0xf4>)
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d02c      	beq.n	8002742 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d130      	bne.n	8002750 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ee:	e028      	b.n	8002742 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff f843 	bl	8001780 <LL_ADC_IsEnabled>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d104      	bne.n	800270a <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f827 	bl	8001758 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800270a:	f7fe fe79 	bl	8001400 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d914      	bls.n	8002742 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b01      	cmp	r3, #1
 8002724:	d00d      	beq.n	8002742 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272a:	f043 0210 	orr.w	r2, r3, #16
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	f043 0201 	orr.w	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e007      	b.n	8002752 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b01      	cmp	r3, #1
 800274e:	d1cf      	bne.n	80026f0 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	8000003f 	.word	0x8000003f
 8002760:	40022300 	.word	0x40022300
 8002764:	40022100 	.word	0x40022100
 8002768:	40022000 	.word	0x40022000

0800276c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002778:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002782:	2b00      	cmp	r3, #0
 8002784:	d14b      	bne.n	800281e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800278a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0308 	and.w	r3, r3, #8
 800279c:	2b00      	cmp	r3, #0
 800279e:	d021      	beq.n	80027e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fecb 	bl	8001540 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d032      	beq.n	8002816 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d12b      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11f      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	655a      	str	r2, [r3, #84]	@ 0x54
 80027e2:	e018      	b.n	8002816 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d111      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002802:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d105      	bne.n	8002816 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7fe fa7e 	bl	8000d18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800281c:	e00e      	b.n	800283c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f7ff fc2e 	bl	800208c <HAL_ADC_ErrorCallback>
}
 8002830:	e004      	b.n	800283c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	4798      	blx	r3
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002850:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f7fe fa18 	bl	8000c88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002858:	bf00      	nop
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002872:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287e:	f043 0204 	orr.w	r2, r3, #4
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f7ff fc00 	bl	800208c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800289c:	4b60      	ldr	r3, [pc, #384]	@ (8002a20 <ADC_ConfigureBoostMode+0x18c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01c      	beq.n	80028e2 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80028a8:	f004 fd02 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 80028ac:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028b6:	d010      	beq.n	80028da <ADC_ConfigureBoostMode+0x46>
 80028b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80028bc:	d873      	bhi.n	80029a6 <ADC_ConfigureBoostMode+0x112>
 80028be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c2:	d002      	beq.n	80028ca <ADC_ConfigureBoostMode+0x36>
 80028c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80028c8:	d16d      	bne.n	80029a6 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0c1b      	lsrs	r3, r3, #16
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	60fb      	str	r3, [r7, #12]
        break;
 80028d8:	e068      	b.n	80029ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	60fb      	str	r3, [r7, #12]
        break;
 80028e0:	e064      	b.n	80029ac <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80028e2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80028e6:	f04f 0100 	mov.w	r1, #0
 80028ea:	f005 fefb 	bl	80086e4 <HAL_RCCEx_GetPeriphCLKFreq>
 80028ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028f8:	d051      	beq.n	800299e <ADC_ConfigureBoostMode+0x10a>
 80028fa:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80028fe:	d854      	bhi.n	80029aa <ADC_ConfigureBoostMode+0x116>
 8002900:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002904:	d047      	beq.n	8002996 <ADC_ConfigureBoostMode+0x102>
 8002906:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800290a:	d84e      	bhi.n	80029aa <ADC_ConfigureBoostMode+0x116>
 800290c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002910:	d03d      	beq.n	800298e <ADC_ConfigureBoostMode+0xfa>
 8002912:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002916:	d848      	bhi.n	80029aa <ADC_ConfigureBoostMode+0x116>
 8002918:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800291c:	d033      	beq.n	8002986 <ADC_ConfigureBoostMode+0xf2>
 800291e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002922:	d842      	bhi.n	80029aa <ADC_ConfigureBoostMode+0x116>
 8002924:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002928:	d029      	beq.n	800297e <ADC_ConfigureBoostMode+0xea>
 800292a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800292e:	d83c      	bhi.n	80029aa <ADC_ConfigureBoostMode+0x116>
 8002930:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002934:	d01a      	beq.n	800296c <ADC_ConfigureBoostMode+0xd8>
 8002936:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800293a:	d836      	bhi.n	80029aa <ADC_ConfigureBoostMode+0x116>
 800293c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002940:	d014      	beq.n	800296c <ADC_ConfigureBoostMode+0xd8>
 8002942:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002946:	d830      	bhi.n	80029aa <ADC_ConfigureBoostMode+0x116>
 8002948:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800294c:	d00e      	beq.n	800296c <ADC_ConfigureBoostMode+0xd8>
 800294e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002952:	d82a      	bhi.n	80029aa <ADC_ConfigureBoostMode+0x116>
 8002954:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002958:	d008      	beq.n	800296c <ADC_ConfigureBoostMode+0xd8>
 800295a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800295e:	d824      	bhi.n	80029aa <ADC_ConfigureBoostMode+0x116>
 8002960:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002964:	d002      	beq.n	800296c <ADC_ConfigureBoostMode+0xd8>
 8002966:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800296a:	d11e      	bne.n	80029aa <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	0c9b      	lsrs	r3, r3, #18
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	60fb      	str	r3, [r7, #12]
        break;
 800297c:	e016      	b.n	80029ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
        break;
 8002984:	e012      	b.n	80029ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	095b      	lsrs	r3, r3, #5
 800298a:	60fb      	str	r3, [r7, #12]
        break;
 800298c:	e00e      	b.n	80029ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	099b      	lsrs	r3, r3, #6
 8002992:	60fb      	str	r3, [r7, #12]
        break;
 8002994:	e00a      	b.n	80029ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	09db      	lsrs	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
        break;
 800299c:	e006      	b.n	80029ac <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	60fb      	str	r3, [r7, #12]
        break;
 80029a4:	e002      	b.n	80029ac <ADC_ConfigureBoostMode+0x118>
        break;
 80029a6:	bf00      	nop
 80029a8:	e000      	b.n	80029ac <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80029aa:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <ADC_ConfigureBoostMode+0x190>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d808      	bhi.n	80029cc <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80029c8:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80029ca:	e025      	b.n	8002a18 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a16      	ldr	r2, [pc, #88]	@ (8002a28 <ADC_ConfigureBoostMode+0x194>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d80a      	bhi.n	80029ea <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029e6:	609a      	str	r2, [r3, #8]
}
 80029e8:	e016      	b.n	8002a18 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a0f      	ldr	r2, [pc, #60]	@ (8002a2c <ADC_ConfigureBoostMode+0x198>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d80a      	bhi.n	8002a08 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a04:	609a      	str	r2, [r3, #8]
}
 8002a06:	e007      	b.n	8002a18 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689a      	ldr	r2, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002a16:	609a      	str	r2, [r3, #8]
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40022300 	.word	0x40022300
 8002a24:	005f5e10 	.word	0x005f5e10
 8002a28:	00bebc20 	.word	0x00bebc20
 8002a2c:	017d7840 	.word	0x017d7840

08002a30 <LL_ADC_IsEnabled>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <LL_ADC_IsEnabled+0x18>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <LL_ADC_IsEnabled+0x1a>
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <LL_ADC_REG_StartConversion>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <LL_ADC_REG_StartConversion+0x24>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	f043 0204 	orr.w	r2, r3, #4
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	7fffffc0 	.word	0x7fffffc0

08002a80 <LL_ADC_REG_IsConversionOngoing>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d101      	bne.n	8002a98 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e000      	b.n	8002a9a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b0a0      	sub	sp, #128	@ 0x80
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ffe1 	bl	8002a80 <LL_ADC_REG_IsConversionOngoing>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e0ad      	b.n	8002c24 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e0a6      	b.n	8002c24 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Case of ADC slave using its own DMA channel: check whether handle selected
       corresponds to ADC master or slave instance */
    if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a52      	ldr	r2, [pc, #328]	@ (8002c2c <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d002      	beq.n	8002aee <HAL_ADCEx_MultiModeStart_DMA+0x46>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	e000      	b.n	8002af0 <HAL_ADCEx_MultiModeStart_DMA+0x48>
 8002aee:	4b50      	ldr	r3, [pc, #320]	@ (8002c30 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d006      	beq.n	8002b06 <HAL_ADCEx_MultiModeStart_DMA+0x5e>
    {
      /* Case of ADC slave selected: enable ADC instance */
      tmp_hal_status = ADC_Enable(hadc);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff fdbb 	bl	8002674 <ADC_Enable>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002b04:	e02e      	b.n	8002b64 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
    }
    else
    {
      tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	66bb      	str	r3, [r7, #104]	@ 0x68
      tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
      /* Set a temporary handle of the ADC slave associated to the ADC master   */
      ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a47      	ldr	r2, [pc, #284]	@ (8002c30 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d102      	bne.n	8002b1e <HAL_ADCEx_MultiModeStart_DMA+0x76>
 8002b18:	4b44      	ldr	r3, [pc, #272]	@ (8002c2c <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	e001      	b.n	8002b22 <HAL_ADCEx_MultiModeStart_DMA+0x7a>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]

      if (tmphadcSlave.Instance == NULL)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <HAL_ADCEx_MultiModeStart_DMA+0x98>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e071      	b.n	8002c24 <HAL_ADCEx_MultiModeStart_DMA+0x17c>
      }

      /* Enable the ADC peripherals: master and slave (in case if not already   */
      /* enabled previously)                                                    */
      tmp_hal_status = ADC_Enable(hadc);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff fd97 	bl	8002674 <ADC_Enable>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      if (tmp_hal_status == HAL_OK)
 8002b4c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_ADCEx_MultiModeStart_DMA+0xbc>
      {
        tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff fd8b 	bl	8002674 <ADC_Enable>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8002b64:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d155      	bne.n	8002c18 <HAL_ADCEx_MultiModeStart_DMA+0x170>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b70:	4b30      	ldr	r3, [pc, #192]	@ (8002c34 <HAL_ADCEx_MultiModeStart_DMA+0x18c>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	655a      	str	r2, [r3, #84]	@ 0x54
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b86:	4a2c      	ldr	r2, [pc, #176]	@ (8002c38 <HAL_ADCEx_MultiModeStart_DMA+0x190>)
 8002b88:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c3c <HAL_ADCEx_MultiModeStart_DMA+0x194>)
 8002b90:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b96:	4a2a      	ldr	r2, [pc, #168]	@ (8002c40 <HAL_ADCEx_MultiModeStart_DMA+0x198>)
 8002b98:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	221c      	movs	r2, #28
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0210 	orr.w	r2, r2, #16
 8002bb8:	605a      	str	r2, [r3, #4]

      /* Case of ADC slave using its own DMA channel: check whether handle selected
         corresponds to ADC master or slave instance */
      if (__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) != hadc->Instance)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <HAL_ADCEx_MultiModeStart_DMA+0x184>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d002      	beq.n	8002bca <HAL_ADCEx_MultiModeStart_DMA+0x122>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	e000      	b.n	8002bcc <HAL_ADCEx_MultiModeStart_DMA+0x124>
 8002bca:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_ADCEx_MultiModeStart_DMA+0x188>)
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_ADCEx_MultiModeStart_DMA+0x148>
      {
        /* Case of ADC slave selected: Start the DMA channel. */
        /* Note: Data transfer will start upon next call of this function using handle of ADC master */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3340      	adds	r3, #64	@ 0x40
 8002bde:	4619      	mov	r1, r3
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f000 fe14 	bl	8003810 <HAL_DMA_Start_IT>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002bee:	e017      	b.n	8002c20 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
      else
      {
        /* Pointer to the common control register  */
        tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bf0:	4b14      	ldr	r3, [pc, #80]	@ (8002c44 <HAL_ADCEx_MultiModeStart_DMA+0x19c>)
 8002bf2:	67bb      	str	r3, [r7, #120]	@ 0x78

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002bf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bfa:	330c      	adds	r3, #12
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f000 fe05 	bl	8003810 <HAL_DMA_Start_IT>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        /* Enable conversion of regular group.                                    */
        /* If software start has been selected, conversion starts immediately.    */
        /* If external trigger has been selected, conversion will start at next   */
        /* trigger event.                                                         */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff21 	bl	8002a58 <LL_ADC_REG_StartConversion>
 8002c16:	e003      	b.n	8002c20 <HAL_ADCEx_MultiModeStart_DMA+0x178>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    }

    /* Return function status */
    return tmp_hal_status;
 8002c20:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
  }
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3780      	adds	r7, #128	@ 0x80
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40022100 	.word	0x40022100
 8002c30:	40022000 	.word	0x40022000
 8002c34:	fffff0fe 	.word	0xfffff0fe
 8002c38:	0800276d 	.word	0x0800276d
 8002c3c:	08002845 	.word	0x08002845
 8002c40:	08002861 	.word	0x08002861
 8002c44:	40022300 	.word	0x40022300

08002c48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b09f      	sub	sp, #124	@ 0x7c
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d101      	bne.n	8002cca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e080      	b.n	8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d102      	bne.n	8002cea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ce4:	4b3c      	ldr	r3, [pc, #240]	@ (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	e001      	b.n	8002cee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf8:	f043 0220 	orr.w	r2, r3, #32
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e05f      	b.n	8002dcc <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff feb6 	bl	8002a80 <LL_ADC_REG_IsConversionOngoing>
 8002d14:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff feb0 	bl	8002a80 <LL_ADC_REG_IsConversionOngoing>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d141      	bne.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002d26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d13e      	bne.n	8002daa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ddc <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d48:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d4a:	4822      	ldr	r0, [pc, #136]	@ (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002d4c:	f7ff fe70 	bl	8002a30 <LL_ADC_IsEnabled>
 8002d50:	4604      	mov	r4, r0
 8002d52:	4821      	ldr	r0, [pc, #132]	@ (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002d54:	f7ff fe6c 	bl	8002a30 <LL_ADC_IsEnabled>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4323      	orrs	r3, r4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d12e      	bne.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b1e      	ldr	r3, [pc, #120]	@ (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002d66:	4013      	ands	r3, r2
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	6811      	ldr	r1, [r2, #0]
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	6892      	ldr	r2, [r2, #8]
 8002d70:	430a      	orrs	r2, r1
 8002d72:	431a      	orrs	r2, r3
 8002d74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002d78:	e021      	b.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002d7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d86:	4813      	ldr	r0, [pc, #76]	@ (8002dd4 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002d88:	f7ff fe52 	bl	8002a30 <LL_ADC_IsEnabled>
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	4812      	ldr	r0, [pc, #72]	@ (8002dd8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002d90:	f7ff fe4e 	bl	8002a30 <LL_ADC_IsEnabled>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4323      	orrs	r3, r4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d110      	bne.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b0f      	ldr	r3, [pc, #60]	@ (8002de0 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002da6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002da8:	e009      	b.n	8002dbe <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dae:	f043 0220 	orr.w	r2, r3, #32
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002dbc:	e000      	b.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002dbe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002dc8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	377c      	adds	r7, #124	@ 0x7c
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd90      	pop	{r4, r7, pc}
 8002dd4:	40022000 	.word	0x40022000
 8002dd8:	40022100 	.word	0x40022100
 8002ddc:	40022300 	.word	0x40022300
 8002de0:	fffff0e0 	.word	0xfffff0e0

08002de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e24 <__NVIC_SetPriorityGrouping+0x40>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e00:	4013      	ands	r3, r2
 8002e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e0c:	4b06      	ldr	r3, [pc, #24]	@ (8002e28 <__NVIC_SetPriorityGrouping+0x44>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e12:	4a04      	ldr	r2, [pc, #16]	@ (8002e24 <__NVIC_SetPriorityGrouping+0x40>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	60d3      	str	r3, [r2, #12]
}
 8002e18:	bf00      	nop
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000ed00 	.word	0xe000ed00
 8002e28:	05fa0000 	.word	0x05fa0000

08002e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e30:	4b04      	ldr	r3, [pc, #16]	@ (8002e44 <__NVIC_GetPriorityGrouping+0x18>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	f003 0307 	and.w	r3, r3, #7
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	db0b      	blt.n	8002e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5a:	88fb      	ldrh	r3, [r7, #6]
 8002e5c:	f003 021f 	and.w	r2, r3, #31
 8002e60:	4907      	ldr	r1, [pc, #28]	@ (8002e80 <__NVIC_EnableIRQ+0x38>)
 8002e62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e66:	095b      	lsrs	r3, r3, #5
 8002e68:	2001      	movs	r0, #1
 8002e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	e000e100 	.word	0xe000e100

08002e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	6039      	str	r1, [r7, #0]
 8002e8e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	db0a      	blt.n	8002eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	490c      	ldr	r1, [pc, #48]	@ (8002ed0 <__NVIC_SetPriority+0x4c>)
 8002e9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ea2:	0112      	lsls	r2, r2, #4
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eac:	e00a      	b.n	8002ec4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4908      	ldr	r1, [pc, #32]	@ (8002ed4 <__NVIC_SetPriority+0x50>)
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	f003 030f 	and.w	r3, r3, #15
 8002eba:	3b04      	subs	r3, #4
 8002ebc:	0112      	lsls	r2, r2, #4
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	761a      	strb	r2, [r3, #24]
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	e000e100 	.word	0xe000e100
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b089      	sub	sp, #36	@ 0x24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f1c3 0307 	rsb	r3, r3, #7
 8002ef2:	2b04      	cmp	r3, #4
 8002ef4:	bf28      	it	cs
 8002ef6:	2304      	movcs	r3, #4
 8002ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d902      	bls.n	8002f08 <NVIC_EncodePriority+0x30>
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3b03      	subs	r3, #3
 8002f06:	e000      	b.n	8002f0a <NVIC_EncodePriority+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43da      	mvns	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f20:	f04f 31ff 	mov.w	r1, #4294967295
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2a:	43d9      	mvns	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f30:	4313      	orrs	r3, r2
         );
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3724      	adds	r7, #36	@ 0x24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f50:	d301      	bcc.n	8002f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f52:	2301      	movs	r3, #1
 8002f54:	e00f      	b.n	8002f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f56:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <SysTick_Config+0x40>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f5e:	210f      	movs	r1, #15
 8002f60:	f04f 30ff 	mov.w	r0, #4294967295
 8002f64:	f7ff ff8e 	bl	8002e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f68:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <SysTick_Config+0x40>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f6e:	4b04      	ldr	r3, [pc, #16]	@ (8002f80 <SysTick_Config+0x40>)
 8002f70:	2207      	movs	r2, #7
 8002f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	e000e010 	.word	0xe000e010

08002f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff29 	bl	8002de4 <__NVIC_SetPriorityGrouping>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa8:	f7ff ff40 	bl	8002e2c <__NVIC_GetPriorityGrouping>
 8002fac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff90 	bl	8002ed8 <NVIC_EncodePriority>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff ff5f 	bl	8002e84 <__NVIC_SetPriority>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff ff33 	bl	8002e48 <__NVIC_EnableIRQ>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7ff ffa4 	bl	8002f40 <SysTick_Config>
 8002ff8:	4603      	mov	r3, r0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8003008:	f3bf 8f5f 	dmb	sy
}
 800300c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800300e:	4b07      	ldr	r3, [pc, #28]	@ (800302c <HAL_MPU_Disable+0x28>)
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	4a06      	ldr	r2, [pc, #24]	@ (800302c <HAL_MPU_Disable+0x28>)
 8003014:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003018:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_MPU_Disable+0x2c>)
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	e000ed00 	.word	0xe000ed00
 8003030:	e000ed90 	.word	0xe000ed90

08003034 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800303c:	4a0b      	ldr	r2, [pc, #44]	@ (800306c <HAL_MPU_Enable+0x38>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003046:	4b0a      	ldr	r3, [pc, #40]	@ (8003070 <HAL_MPU_Enable+0x3c>)
 8003048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304a:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <HAL_MPU_Enable+0x3c>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003050:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003052:	f3bf 8f4f 	dsb	sy
}
 8003056:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003058:	f3bf 8f6f 	isb	sy
}
 800305c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	e000ed90 	.word	0xe000ed90
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	785a      	ldrb	r2, [r3, #1]
 8003080:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <HAL_MPU_ConfigRegion+0x7c>)
 8003082:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003084:	4b1a      	ldr	r3, [pc, #104]	@ (80030f0 <HAL_MPU_ConfigRegion+0x7c>)
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	4a19      	ldr	r2, [pc, #100]	@ (80030f0 <HAL_MPU_ConfigRegion+0x7c>)
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003090:	4a17      	ldr	r2, [pc, #92]	@ (80030f0 <HAL_MPU_ConfigRegion+0x7c>)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7b1b      	ldrb	r3, [r3, #12]
 800309c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	7adb      	ldrb	r3, [r3, #11]
 80030a2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	7a9b      	ldrb	r3, [r3, #10]
 80030aa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80030ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	7b5b      	ldrb	r3, [r3, #13]
 80030b2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80030b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7b9b      	ldrb	r3, [r3, #14]
 80030ba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80030bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	7bdb      	ldrb	r3, [r3, #15]
 80030c2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80030c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	7a5b      	ldrb	r3, [r3, #9]
 80030ca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80030cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	7a1b      	ldrb	r3, [r3, #8]
 80030d2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80030d4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	7812      	ldrb	r2, [r2, #0]
 80030da:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030dc:	4a04      	ldr	r2, [pc, #16]	@ (80030f0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80030de:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80030e0:	6113      	str	r3, [r2, #16]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000ed90 	.word	0xe000ed90

080030f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030fc:	f7fe f980 	bl	8001400 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e37d      	b.n	8003808 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a66      	ldr	r2, [pc, #408]	@ (80032ac <HAL_DMA_Init+0x1b8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d04a      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a65      	ldr	r2, [pc, #404]	@ (80032b0 <HAL_DMA_Init+0x1bc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d045      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a63      	ldr	r2, [pc, #396]	@ (80032b4 <HAL_DMA_Init+0x1c0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d040      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a62      	ldr	r2, [pc, #392]	@ (80032b8 <HAL_DMA_Init+0x1c4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d03b      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a60      	ldr	r2, [pc, #384]	@ (80032bc <HAL_DMA_Init+0x1c8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d036      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5f      	ldr	r2, [pc, #380]	@ (80032c0 <HAL_DMA_Init+0x1cc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d031      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a5d      	ldr	r2, [pc, #372]	@ (80032c4 <HAL_DMA_Init+0x1d0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d02c      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a5c      	ldr	r2, [pc, #368]	@ (80032c8 <HAL_DMA_Init+0x1d4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d027      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a5a      	ldr	r2, [pc, #360]	@ (80032cc <HAL_DMA_Init+0x1d8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d022      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a59      	ldr	r2, [pc, #356]	@ (80032d0 <HAL_DMA_Init+0x1dc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d01d      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a57      	ldr	r2, [pc, #348]	@ (80032d4 <HAL_DMA_Init+0x1e0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d018      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a56      	ldr	r2, [pc, #344]	@ (80032d8 <HAL_DMA_Init+0x1e4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a54      	ldr	r2, [pc, #336]	@ (80032dc <HAL_DMA_Init+0x1e8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a53      	ldr	r2, [pc, #332]	@ (80032e0 <HAL_DMA_Init+0x1ec>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a51      	ldr	r2, [pc, #324]	@ (80032e4 <HAL_DMA_Init+0x1f0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_DMA_Init+0xb8>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a50      	ldr	r2, [pc, #320]	@ (80032e8 <HAL_DMA_Init+0x1f4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d101      	bne.n	80031b0 <HAL_DMA_Init+0xbc>
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <HAL_DMA_Init+0xbe>
 80031b0:	2300      	movs	r3, #0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 813c 	beq.w	8003430 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a37      	ldr	r2, [pc, #220]	@ (80032ac <HAL_DMA_Init+0x1b8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d04a      	beq.n	8003268 <HAL_DMA_Init+0x174>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a36      	ldr	r2, [pc, #216]	@ (80032b0 <HAL_DMA_Init+0x1bc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d045      	beq.n	8003268 <HAL_DMA_Init+0x174>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a34      	ldr	r2, [pc, #208]	@ (80032b4 <HAL_DMA_Init+0x1c0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d040      	beq.n	8003268 <HAL_DMA_Init+0x174>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a33      	ldr	r2, [pc, #204]	@ (80032b8 <HAL_DMA_Init+0x1c4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d03b      	beq.n	8003268 <HAL_DMA_Init+0x174>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a31      	ldr	r2, [pc, #196]	@ (80032bc <HAL_DMA_Init+0x1c8>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d036      	beq.n	8003268 <HAL_DMA_Init+0x174>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a30      	ldr	r2, [pc, #192]	@ (80032c0 <HAL_DMA_Init+0x1cc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d031      	beq.n	8003268 <HAL_DMA_Init+0x174>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a2e      	ldr	r2, [pc, #184]	@ (80032c4 <HAL_DMA_Init+0x1d0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d02c      	beq.n	8003268 <HAL_DMA_Init+0x174>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2d      	ldr	r2, [pc, #180]	@ (80032c8 <HAL_DMA_Init+0x1d4>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d027      	beq.n	8003268 <HAL_DMA_Init+0x174>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2b      	ldr	r2, [pc, #172]	@ (80032cc <HAL_DMA_Init+0x1d8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d022      	beq.n	8003268 <HAL_DMA_Init+0x174>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2a      	ldr	r2, [pc, #168]	@ (80032d0 <HAL_DMA_Init+0x1dc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d01d      	beq.n	8003268 <HAL_DMA_Init+0x174>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a28      	ldr	r2, [pc, #160]	@ (80032d4 <HAL_DMA_Init+0x1e0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d018      	beq.n	8003268 <HAL_DMA_Init+0x174>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a27      	ldr	r2, [pc, #156]	@ (80032d8 <HAL_DMA_Init+0x1e4>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d013      	beq.n	8003268 <HAL_DMA_Init+0x174>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a25      	ldr	r2, [pc, #148]	@ (80032dc <HAL_DMA_Init+0x1e8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d00e      	beq.n	8003268 <HAL_DMA_Init+0x174>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a24      	ldr	r2, [pc, #144]	@ (80032e0 <HAL_DMA_Init+0x1ec>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d009      	beq.n	8003268 <HAL_DMA_Init+0x174>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a22      	ldr	r2, [pc, #136]	@ (80032e4 <HAL_DMA_Init+0x1f0>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_DMA_Init+0x174>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a21      	ldr	r2, [pc, #132]	@ (80032e8 <HAL_DMA_Init+0x1f4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d108      	bne.n	800327a <HAL_DMA_Init+0x186>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	e007      	b.n	800328a <HAL_DMA_Init+0x196>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800328a:	e02f      	b.n	80032ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800328c:	f7fe f8b8 	bl	8001400 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b05      	cmp	r3, #5
 8003298:	d928      	bls.n	80032ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2203      	movs	r2, #3
 80032a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e2ad      	b.n	8003808 <HAL_DMA_Init+0x714>
 80032ac:	40020010 	.word	0x40020010
 80032b0:	40020028 	.word	0x40020028
 80032b4:	40020040 	.word	0x40020040
 80032b8:	40020058 	.word	0x40020058
 80032bc:	40020070 	.word	0x40020070
 80032c0:	40020088 	.word	0x40020088
 80032c4:	400200a0 	.word	0x400200a0
 80032c8:	400200b8 	.word	0x400200b8
 80032cc:	40020410 	.word	0x40020410
 80032d0:	40020428 	.word	0x40020428
 80032d4:	40020440 	.word	0x40020440
 80032d8:	40020458 	.word	0x40020458
 80032dc:	40020470 	.word	0x40020470
 80032e0:	40020488 	.word	0x40020488
 80032e4:	400204a0 	.word	0x400204a0
 80032e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1c8      	bne.n	800328c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4b73      	ldr	r3, [pc, #460]	@ (80034d4 <HAL_DMA_Init+0x3e0>)
 8003306:	4013      	ands	r3, r2
 8003308:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003312:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800332a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	2b04      	cmp	r3, #4
 800333e:	d107      	bne.n	8003350 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003348:	4313      	orrs	r3, r2
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b28      	cmp	r3, #40	@ 0x28
 8003356:	d903      	bls.n	8003360 <HAL_DMA_Init+0x26c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b2e      	cmp	r3, #46	@ 0x2e
 800335e:	d91f      	bls.n	80033a0 <HAL_DMA_Init+0x2ac>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b3e      	cmp	r3, #62	@ 0x3e
 8003366:	d903      	bls.n	8003370 <HAL_DMA_Init+0x27c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b42      	cmp	r3, #66	@ 0x42
 800336e:	d917      	bls.n	80033a0 <HAL_DMA_Init+0x2ac>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b46      	cmp	r3, #70	@ 0x46
 8003376:	d903      	bls.n	8003380 <HAL_DMA_Init+0x28c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b48      	cmp	r3, #72	@ 0x48
 800337e:	d90f      	bls.n	80033a0 <HAL_DMA_Init+0x2ac>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b4e      	cmp	r3, #78	@ 0x4e
 8003386:	d903      	bls.n	8003390 <HAL_DMA_Init+0x29c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b52      	cmp	r3, #82	@ 0x52
 800338e:	d907      	bls.n	80033a0 <HAL_DMA_Init+0x2ac>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b73      	cmp	r3, #115	@ 0x73
 8003396:	d905      	bls.n	80033a4 <HAL_DMA_Init+0x2b0>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2b77      	cmp	r3, #119	@ 0x77
 800339e:	d801      	bhi.n	80033a4 <HAL_DMA_Init+0x2b0>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_DMA_Init+0x2b2>
 80033a4:	2300      	movs	r3, #0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033b0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 0307 	bic.w	r3, r3, #7
 80033c8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d117      	bne.n	800340c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00e      	beq.n	800340c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f002 fbd4 	bl	8005b9c <DMA_CheckFifoParam>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2240      	movs	r2, #64	@ 0x40
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e1fd      	b.n	8003808 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f002 fb0f 	bl	8005a38 <DMA_CalcBaseAndBitshift>
 800341a:	4603      	mov	r3, r0
 800341c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003422:	f003 031f 	and.w	r3, r3, #31
 8003426:	223f      	movs	r2, #63	@ 0x3f
 8003428:	409a      	lsls	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	e0fd      	b.n	800362c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a28      	ldr	r2, [pc, #160]	@ (80034d8 <HAL_DMA_Init+0x3e4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d04a      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a27      	ldr	r2, [pc, #156]	@ (80034dc <HAL_DMA_Init+0x3e8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d045      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a25      	ldr	r2, [pc, #148]	@ (80034e0 <HAL_DMA_Init+0x3ec>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d040      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a24      	ldr	r2, [pc, #144]	@ (80034e4 <HAL_DMA_Init+0x3f0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d03b      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a22      	ldr	r2, [pc, #136]	@ (80034e8 <HAL_DMA_Init+0x3f4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d036      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a21      	ldr	r2, [pc, #132]	@ (80034ec <HAL_DMA_Init+0x3f8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d031      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1f      	ldr	r2, [pc, #124]	@ (80034f0 <HAL_DMA_Init+0x3fc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d02c      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <HAL_DMA_Init+0x400>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d027      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1c      	ldr	r2, [pc, #112]	@ (80034f8 <HAL_DMA_Init+0x404>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d022      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <HAL_DMA_Init+0x408>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d01d      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a19      	ldr	r2, [pc, #100]	@ (8003500 <HAL_DMA_Init+0x40c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d018      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a18      	ldr	r2, [pc, #96]	@ (8003504 <HAL_DMA_Init+0x410>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a16      	ldr	r2, [pc, #88]	@ (8003508 <HAL_DMA_Init+0x414>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00e      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a15      	ldr	r2, [pc, #84]	@ (800350c <HAL_DMA_Init+0x418>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a13      	ldr	r2, [pc, #76]	@ (8003510 <HAL_DMA_Init+0x41c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_DMA_Init+0x3dc>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a12      	ldr	r2, [pc, #72]	@ (8003514 <HAL_DMA_Init+0x420>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d123      	bne.n	8003518 <HAL_DMA_Init+0x424>
 80034d0:	2301      	movs	r3, #1
 80034d2:	e022      	b.n	800351a <HAL_DMA_Init+0x426>
 80034d4:	fe10803f 	.word	0xfe10803f
 80034d8:	48022c08 	.word	0x48022c08
 80034dc:	48022c1c 	.word	0x48022c1c
 80034e0:	48022c30 	.word	0x48022c30
 80034e4:	48022c44 	.word	0x48022c44
 80034e8:	48022c58 	.word	0x48022c58
 80034ec:	48022c6c 	.word	0x48022c6c
 80034f0:	48022c80 	.word	0x48022c80
 80034f4:	48022c94 	.word	0x48022c94
 80034f8:	58025408 	.word	0x58025408
 80034fc:	5802541c 	.word	0x5802541c
 8003500:	58025430 	.word	0x58025430
 8003504:	58025444 	.word	0x58025444
 8003508:	58025458 	.word	0x58025458
 800350c:	5802546c 	.word	0x5802546c
 8003510:	58025480 	.word	0x58025480
 8003514:	58025494 	.word	0x58025494
 8003518:	2300      	movs	r3, #0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d07d      	beq.n	800361a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a7f      	ldr	r2, [pc, #508]	@ (8003720 <HAL_DMA_Init+0x62c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d021      	beq.n	800356c <HAL_DMA_Init+0x478>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a7d      	ldr	r2, [pc, #500]	@ (8003724 <HAL_DMA_Init+0x630>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01c      	beq.n	800356c <HAL_DMA_Init+0x478>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7c      	ldr	r2, [pc, #496]	@ (8003728 <HAL_DMA_Init+0x634>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d017      	beq.n	800356c <HAL_DMA_Init+0x478>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a7a      	ldr	r2, [pc, #488]	@ (800372c <HAL_DMA_Init+0x638>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d012      	beq.n	800356c <HAL_DMA_Init+0x478>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a79      	ldr	r2, [pc, #484]	@ (8003730 <HAL_DMA_Init+0x63c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00d      	beq.n	800356c <HAL_DMA_Init+0x478>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a77      	ldr	r2, [pc, #476]	@ (8003734 <HAL_DMA_Init+0x640>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d008      	beq.n	800356c <HAL_DMA_Init+0x478>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a76      	ldr	r2, [pc, #472]	@ (8003738 <HAL_DMA_Init+0x644>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <HAL_DMA_Init+0x478>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a74      	ldr	r2, [pc, #464]	@ (800373c <HAL_DMA_Init+0x648>)
 800356a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	4b6e      	ldr	r3, [pc, #440]	@ (8003740 <HAL_DMA_Init+0x64c>)
 8003588:	4013      	ands	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b40      	cmp	r3, #64	@ 0x40
 8003592:	d008      	beq.n	80035a6 <HAL_DMA_Init+0x4b2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b80      	cmp	r3, #128	@ 0x80
 800359a:	d102      	bne.n	80035a2 <HAL_DMA_Init+0x4ae>
 800359c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035a0:	e002      	b.n	80035a8 <HAL_DMA_Init+0x4b4>
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_DMA_Init+0x4b4>
 80035a6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	68d2      	ldr	r2, [r2, #12]
 80035ac:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035ae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035b6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035be:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035c6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035ce:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035d6:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b55      	ldr	r3, [pc, #340]	@ (8003744 <HAL_DMA_Init+0x650>)
 80035ee:	4413      	add	r3, r2
 80035f0:	4a55      	ldr	r2, [pc, #340]	@ (8003748 <HAL_DMA_Init+0x654>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	009a      	lsls	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f002 fa1a 	bl	8005a38 <DMA_CalcBaseAndBitshift>
 8003604:	4603      	mov	r3, r0
 8003606:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360c:	f003 031f 	and.w	r3, r3, #31
 8003610:	2201      	movs	r2, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	e008      	b.n	800362c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2240      	movs	r2, #64	@ 0x40
 800361e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2203      	movs	r2, #3
 8003624:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0ed      	b.n	8003808 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a46      	ldr	r2, [pc, #280]	@ (800374c <HAL_DMA_Init+0x658>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d072      	beq.n	800371c <HAL_DMA_Init+0x628>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a45      	ldr	r2, [pc, #276]	@ (8003750 <HAL_DMA_Init+0x65c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d06d      	beq.n	800371c <HAL_DMA_Init+0x628>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a43      	ldr	r2, [pc, #268]	@ (8003754 <HAL_DMA_Init+0x660>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d068      	beq.n	800371c <HAL_DMA_Init+0x628>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a42      	ldr	r2, [pc, #264]	@ (8003758 <HAL_DMA_Init+0x664>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d063      	beq.n	800371c <HAL_DMA_Init+0x628>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a40      	ldr	r2, [pc, #256]	@ (800375c <HAL_DMA_Init+0x668>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d05e      	beq.n	800371c <HAL_DMA_Init+0x628>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a3f      	ldr	r2, [pc, #252]	@ (8003760 <HAL_DMA_Init+0x66c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d059      	beq.n	800371c <HAL_DMA_Init+0x628>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3d      	ldr	r2, [pc, #244]	@ (8003764 <HAL_DMA_Init+0x670>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d054      	beq.n	800371c <HAL_DMA_Init+0x628>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3c      	ldr	r2, [pc, #240]	@ (8003768 <HAL_DMA_Init+0x674>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d04f      	beq.n	800371c <HAL_DMA_Init+0x628>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a3a      	ldr	r2, [pc, #232]	@ (800376c <HAL_DMA_Init+0x678>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d04a      	beq.n	800371c <HAL_DMA_Init+0x628>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a39      	ldr	r2, [pc, #228]	@ (8003770 <HAL_DMA_Init+0x67c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d045      	beq.n	800371c <HAL_DMA_Init+0x628>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a37      	ldr	r2, [pc, #220]	@ (8003774 <HAL_DMA_Init+0x680>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d040      	beq.n	800371c <HAL_DMA_Init+0x628>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a36      	ldr	r2, [pc, #216]	@ (8003778 <HAL_DMA_Init+0x684>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d03b      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a34      	ldr	r2, [pc, #208]	@ (800377c <HAL_DMA_Init+0x688>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d036      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a33      	ldr	r2, [pc, #204]	@ (8003780 <HAL_DMA_Init+0x68c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d031      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a31      	ldr	r2, [pc, #196]	@ (8003784 <HAL_DMA_Init+0x690>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d02c      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a30      	ldr	r2, [pc, #192]	@ (8003788 <HAL_DMA_Init+0x694>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d027      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a13      	ldr	r2, [pc, #76]	@ (8003720 <HAL_DMA_Init+0x62c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d022      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a12      	ldr	r2, [pc, #72]	@ (8003724 <HAL_DMA_Init+0x630>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d01d      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a10      	ldr	r2, [pc, #64]	@ (8003728 <HAL_DMA_Init+0x634>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d018      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <HAL_DMA_Init+0x638>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d013      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003730 <HAL_DMA_Init+0x63c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00e      	beq.n	800371c <HAL_DMA_Init+0x628>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a0c      	ldr	r2, [pc, #48]	@ (8003734 <HAL_DMA_Init+0x640>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d009      	beq.n	800371c <HAL_DMA_Init+0x628>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <HAL_DMA_Init+0x644>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d004      	beq.n	800371c <HAL_DMA_Init+0x628>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a09      	ldr	r2, [pc, #36]	@ (800373c <HAL_DMA_Init+0x648>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d137      	bne.n	800378c <HAL_DMA_Init+0x698>
 800371c:	2301      	movs	r3, #1
 800371e:	e036      	b.n	800378e <HAL_DMA_Init+0x69a>
 8003720:	58025408 	.word	0x58025408
 8003724:	5802541c 	.word	0x5802541c
 8003728:	58025430 	.word	0x58025430
 800372c:	58025444 	.word	0x58025444
 8003730:	58025458 	.word	0x58025458
 8003734:	5802546c 	.word	0x5802546c
 8003738:	58025480 	.word	0x58025480
 800373c:	58025494 	.word	0x58025494
 8003740:	fffe000f 	.word	0xfffe000f
 8003744:	a7fdabf8 	.word	0xa7fdabf8
 8003748:	cccccccd 	.word	0xcccccccd
 800374c:	40020010 	.word	0x40020010
 8003750:	40020028 	.word	0x40020028
 8003754:	40020040 	.word	0x40020040
 8003758:	40020058 	.word	0x40020058
 800375c:	40020070 	.word	0x40020070
 8003760:	40020088 	.word	0x40020088
 8003764:	400200a0 	.word	0x400200a0
 8003768:	400200b8 	.word	0x400200b8
 800376c:	40020410 	.word	0x40020410
 8003770:	40020428 	.word	0x40020428
 8003774:	40020440 	.word	0x40020440
 8003778:	40020458 	.word	0x40020458
 800377c:	40020470 	.word	0x40020470
 8003780:	40020488 	.word	0x40020488
 8003784:	400204a0 	.word	0x400204a0
 8003788:	400204b8 	.word	0x400204b8
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d032      	beq.n	80037f8 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f002 fa7e 	bl	8005c94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b80      	cmp	r3, #128	@ 0x80
 800379e:	d102      	bne.n	80037a6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037ba:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d010      	beq.n	80037e6 <HAL_DMA_Init+0x6f2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d80c      	bhi.n	80037e6 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f002 fafb 	bl	8005dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037e2:	605a      	str	r2, [r3, #4]
 80037e4:	e008      	b.n	80037f8 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e226      	b.n	8003c7a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_DMA_Start_IT+0x2a>
 8003836:	2302      	movs	r3, #2
 8003838:	e21f      	b.n	8003c7a <HAL_DMA_Start_IT+0x46a>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b01      	cmp	r3, #1
 800384c:	f040 820a 	bne.w	8003c64 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2200      	movs	r2, #0
 800385c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a68      	ldr	r2, [pc, #416]	@ (8003a04 <HAL_DMA_Start_IT+0x1f4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d04a      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a66      	ldr	r2, [pc, #408]	@ (8003a08 <HAL_DMA_Start_IT+0x1f8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d045      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a65      	ldr	r2, [pc, #404]	@ (8003a0c <HAL_DMA_Start_IT+0x1fc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d040      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a63      	ldr	r2, [pc, #396]	@ (8003a10 <HAL_DMA_Start_IT+0x200>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d03b      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a62      	ldr	r2, [pc, #392]	@ (8003a14 <HAL_DMA_Start_IT+0x204>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d036      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a60      	ldr	r2, [pc, #384]	@ (8003a18 <HAL_DMA_Start_IT+0x208>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d031      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5f      	ldr	r2, [pc, #380]	@ (8003a1c <HAL_DMA_Start_IT+0x20c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d02c      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a5d      	ldr	r2, [pc, #372]	@ (8003a20 <HAL_DMA_Start_IT+0x210>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d027      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003a24 <HAL_DMA_Start_IT+0x214>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d022      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5a      	ldr	r2, [pc, #360]	@ (8003a28 <HAL_DMA_Start_IT+0x218>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01d      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a59      	ldr	r2, [pc, #356]	@ (8003a2c <HAL_DMA_Start_IT+0x21c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d018      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a57      	ldr	r2, [pc, #348]	@ (8003a30 <HAL_DMA_Start_IT+0x220>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d013      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a56      	ldr	r2, [pc, #344]	@ (8003a34 <HAL_DMA_Start_IT+0x224>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00e      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a54      	ldr	r2, [pc, #336]	@ (8003a38 <HAL_DMA_Start_IT+0x228>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a53      	ldr	r2, [pc, #332]	@ (8003a3c <HAL_DMA_Start_IT+0x22c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d004      	beq.n	80038fe <HAL_DMA_Start_IT+0xee>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a51      	ldr	r2, [pc, #324]	@ (8003a40 <HAL_DMA_Start_IT+0x230>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d108      	bne.n	8003910 <HAL_DMA_Start_IT+0x100>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e007      	b.n	8003920 <HAL_DMA_Start_IT+0x110>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f001 fea2 	bl	8005670 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a34      	ldr	r2, [pc, #208]	@ (8003a04 <HAL_DMA_Start_IT+0x1f4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d04a      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a33      	ldr	r2, [pc, #204]	@ (8003a08 <HAL_DMA_Start_IT+0x1f8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d045      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a31      	ldr	r2, [pc, #196]	@ (8003a0c <HAL_DMA_Start_IT+0x1fc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d040      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a30      	ldr	r2, [pc, #192]	@ (8003a10 <HAL_DMA_Start_IT+0x200>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d03b      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2e      	ldr	r2, [pc, #184]	@ (8003a14 <HAL_DMA_Start_IT+0x204>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d036      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a2d      	ldr	r2, [pc, #180]	@ (8003a18 <HAL_DMA_Start_IT+0x208>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d031      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a1c <HAL_DMA_Start_IT+0x20c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d02c      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2a      	ldr	r2, [pc, #168]	@ (8003a20 <HAL_DMA_Start_IT+0x210>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d027      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a28      	ldr	r2, [pc, #160]	@ (8003a24 <HAL_DMA_Start_IT+0x214>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d022      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a27      	ldr	r2, [pc, #156]	@ (8003a28 <HAL_DMA_Start_IT+0x218>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d01d      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a25      	ldr	r2, [pc, #148]	@ (8003a2c <HAL_DMA_Start_IT+0x21c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d018      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a24      	ldr	r2, [pc, #144]	@ (8003a30 <HAL_DMA_Start_IT+0x220>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d013      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a22      	ldr	r2, [pc, #136]	@ (8003a34 <HAL_DMA_Start_IT+0x224>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00e      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a21      	ldr	r2, [pc, #132]	@ (8003a38 <HAL_DMA_Start_IT+0x228>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a3c <HAL_DMA_Start_IT+0x22c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d004      	beq.n	80039cc <HAL_DMA_Start_IT+0x1bc>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a40 <HAL_DMA_Start_IT+0x230>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_DMA_Start_IT+0x1c0>
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_DMA_Start_IT+0x1c2>
 80039d0:	2300      	movs	r3, #0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d036      	beq.n	8003a44 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 021e 	bic.w	r2, r3, #30
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f042 0216 	orr.w	r2, r2, #22
 80039e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d03e      	beq.n	8003a70 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0208 	orr.w	r2, r2, #8
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e035      	b.n	8003a70 <HAL_DMA_Start_IT+0x260>
 8003a04:	40020010 	.word	0x40020010
 8003a08:	40020028 	.word	0x40020028
 8003a0c:	40020040 	.word	0x40020040
 8003a10:	40020058 	.word	0x40020058
 8003a14:	40020070 	.word	0x40020070
 8003a18:	40020088 	.word	0x40020088
 8003a1c:	400200a0 	.word	0x400200a0
 8003a20:	400200b8 	.word	0x400200b8
 8003a24:	40020410 	.word	0x40020410
 8003a28:	40020428 	.word	0x40020428
 8003a2c:	40020440 	.word	0x40020440
 8003a30:	40020458 	.word	0x40020458
 8003a34:	40020470 	.word	0x40020470
 8003a38:	40020488 	.word	0x40020488
 8003a3c:	400204a0 	.word	0x400204a0
 8003a40:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 020e 	bic.w	r2, r3, #14
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 020a 	orr.w	r2, r2, #10
 8003a56:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0204 	orr.w	r2, r2, #4
 8003a6e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a83      	ldr	r2, [pc, #524]	@ (8003c84 <HAL_DMA_Start_IT+0x474>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d072      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a82      	ldr	r2, [pc, #520]	@ (8003c88 <HAL_DMA_Start_IT+0x478>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d06d      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a80      	ldr	r2, [pc, #512]	@ (8003c8c <HAL_DMA_Start_IT+0x47c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d068      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a7f      	ldr	r2, [pc, #508]	@ (8003c90 <HAL_DMA_Start_IT+0x480>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d063      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a7d      	ldr	r2, [pc, #500]	@ (8003c94 <HAL_DMA_Start_IT+0x484>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d05e      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a7c      	ldr	r2, [pc, #496]	@ (8003c98 <HAL_DMA_Start_IT+0x488>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d059      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a7a      	ldr	r2, [pc, #488]	@ (8003c9c <HAL_DMA_Start_IT+0x48c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d054      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a79      	ldr	r2, [pc, #484]	@ (8003ca0 <HAL_DMA_Start_IT+0x490>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d04f      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a77      	ldr	r2, [pc, #476]	@ (8003ca4 <HAL_DMA_Start_IT+0x494>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d04a      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a76      	ldr	r2, [pc, #472]	@ (8003ca8 <HAL_DMA_Start_IT+0x498>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d045      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a74      	ldr	r2, [pc, #464]	@ (8003cac <HAL_DMA_Start_IT+0x49c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d040      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a73      	ldr	r2, [pc, #460]	@ (8003cb0 <HAL_DMA_Start_IT+0x4a0>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d03b      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a71      	ldr	r2, [pc, #452]	@ (8003cb4 <HAL_DMA_Start_IT+0x4a4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d036      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a70      	ldr	r2, [pc, #448]	@ (8003cb8 <HAL_DMA_Start_IT+0x4a8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d031      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a6e      	ldr	r2, [pc, #440]	@ (8003cbc <HAL_DMA_Start_IT+0x4ac>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d02c      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003cc0 <HAL_DMA_Start_IT+0x4b0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d027      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6b      	ldr	r2, [pc, #428]	@ (8003cc4 <HAL_DMA_Start_IT+0x4b4>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d022      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6a      	ldr	r2, [pc, #424]	@ (8003cc8 <HAL_DMA_Start_IT+0x4b8>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d01d      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a68      	ldr	r2, [pc, #416]	@ (8003ccc <HAL_DMA_Start_IT+0x4bc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d018      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a67      	ldr	r2, [pc, #412]	@ (8003cd0 <HAL_DMA_Start_IT+0x4c0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d013      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a65      	ldr	r2, [pc, #404]	@ (8003cd4 <HAL_DMA_Start_IT+0x4c4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00e      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a64      	ldr	r2, [pc, #400]	@ (8003cd8 <HAL_DMA_Start_IT+0x4c8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d009      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a62      	ldr	r2, [pc, #392]	@ (8003cdc <HAL_DMA_Start_IT+0x4cc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <HAL_DMA_Start_IT+0x350>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a61      	ldr	r2, [pc, #388]	@ (8003ce0 <HAL_DMA_Start_IT+0x4d0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d101      	bne.n	8003b64 <HAL_DMA_Start_IT+0x354>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <HAL_DMA_Start_IT+0x356>
 8003b64:	2300      	movs	r3, #0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d01a      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d007      	beq.n	8003b88 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b86:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a37      	ldr	r2, [pc, #220]	@ (8003c84 <HAL_DMA_Start_IT+0x474>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d04a      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a36      	ldr	r2, [pc, #216]	@ (8003c88 <HAL_DMA_Start_IT+0x478>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d045      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a34      	ldr	r2, [pc, #208]	@ (8003c8c <HAL_DMA_Start_IT+0x47c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d040      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a33      	ldr	r2, [pc, #204]	@ (8003c90 <HAL_DMA_Start_IT+0x480>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d03b      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a31      	ldr	r2, [pc, #196]	@ (8003c94 <HAL_DMA_Start_IT+0x484>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d036      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a30      	ldr	r2, [pc, #192]	@ (8003c98 <HAL_DMA_Start_IT+0x488>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d031      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c9c <HAL_DMA_Start_IT+0x48c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d02c      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ca0 <HAL_DMA_Start_IT+0x490>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d027      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8003ca4 <HAL_DMA_Start_IT+0x494>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d022      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca8 <HAL_DMA_Start_IT+0x498>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d01d      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a28      	ldr	r2, [pc, #160]	@ (8003cac <HAL_DMA_Start_IT+0x49c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d018      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a27      	ldr	r2, [pc, #156]	@ (8003cb0 <HAL_DMA_Start_IT+0x4a0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a25      	ldr	r2, [pc, #148]	@ (8003cb4 <HAL_DMA_Start_IT+0x4a4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00e      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a24      	ldr	r2, [pc, #144]	@ (8003cb8 <HAL_DMA_Start_IT+0x4a8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d009      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a22      	ldr	r2, [pc, #136]	@ (8003cbc <HAL_DMA_Start_IT+0x4ac>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <HAL_DMA_Start_IT+0x430>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a21      	ldr	r2, [pc, #132]	@ (8003cc0 <HAL_DMA_Start_IT+0x4b0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d108      	bne.n	8003c52 <HAL_DMA_Start_IT+0x442>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e012      	b.n	8003c78 <HAL_DMA_Start_IT+0x468>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e009      	b.n	8003c78 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c6a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40020010 	.word	0x40020010
 8003c88:	40020028 	.word	0x40020028
 8003c8c:	40020040 	.word	0x40020040
 8003c90:	40020058 	.word	0x40020058
 8003c94:	40020070 	.word	0x40020070
 8003c98:	40020088 	.word	0x40020088
 8003c9c:	400200a0 	.word	0x400200a0
 8003ca0:	400200b8 	.word	0x400200b8
 8003ca4:	40020410 	.word	0x40020410
 8003ca8:	40020428 	.word	0x40020428
 8003cac:	40020440 	.word	0x40020440
 8003cb0:	40020458 	.word	0x40020458
 8003cb4:	40020470 	.word	0x40020470
 8003cb8:	40020488 	.word	0x40020488
 8003cbc:	400204a0 	.word	0x400204a0
 8003cc0:	400204b8 	.word	0x400204b8
 8003cc4:	58025408 	.word	0x58025408
 8003cc8:	5802541c 	.word	0x5802541c
 8003ccc:	58025430 	.word	0x58025430
 8003cd0:	58025444 	.word	0x58025444
 8003cd4:	58025458 	.word	0x58025458
 8003cd8:	5802546c 	.word	0x5802546c
 8003cdc:	58025480 	.word	0x58025480
 8003ce0:	58025494 	.word	0x58025494

08003ce4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003cec:	f7fd fb88 	bl	8001400 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e2dc      	b.n	80042b6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d008      	beq.n	8003d1a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2280      	movs	r2, #128	@ 0x80
 8003d0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e2cd      	b.n	80042b6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a76      	ldr	r2, [pc, #472]	@ (8003ef8 <HAL_DMA_Abort+0x214>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d04a      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a74      	ldr	r2, [pc, #464]	@ (8003efc <HAL_DMA_Abort+0x218>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d045      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a73      	ldr	r2, [pc, #460]	@ (8003f00 <HAL_DMA_Abort+0x21c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d040      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a71      	ldr	r2, [pc, #452]	@ (8003f04 <HAL_DMA_Abort+0x220>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d03b      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a70      	ldr	r2, [pc, #448]	@ (8003f08 <HAL_DMA_Abort+0x224>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d036      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6e      	ldr	r2, [pc, #440]	@ (8003f0c <HAL_DMA_Abort+0x228>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d031      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003f10 <HAL_DMA_Abort+0x22c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d02c      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a6b      	ldr	r2, [pc, #428]	@ (8003f14 <HAL_DMA_Abort+0x230>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d027      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a6a      	ldr	r2, [pc, #424]	@ (8003f18 <HAL_DMA_Abort+0x234>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d022      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a68      	ldr	r2, [pc, #416]	@ (8003f1c <HAL_DMA_Abort+0x238>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d01d      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a67      	ldr	r2, [pc, #412]	@ (8003f20 <HAL_DMA_Abort+0x23c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d018      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a65      	ldr	r2, [pc, #404]	@ (8003f24 <HAL_DMA_Abort+0x240>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a64      	ldr	r2, [pc, #400]	@ (8003f28 <HAL_DMA_Abort+0x244>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d00e      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a62      	ldr	r2, [pc, #392]	@ (8003f2c <HAL_DMA_Abort+0x248>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d009      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a61      	ldr	r2, [pc, #388]	@ (8003f30 <HAL_DMA_Abort+0x24c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d004      	beq.n	8003dba <HAL_DMA_Abort+0xd6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a5f      	ldr	r2, [pc, #380]	@ (8003f34 <HAL_DMA_Abort+0x250>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d101      	bne.n	8003dbe <HAL_DMA_Abort+0xda>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_DMA_Abort+0xdc>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d013      	beq.n	8003dec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 021e 	bic.w	r2, r2, #30
 8003dd2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695a      	ldr	r2, [r3, #20]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003de2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	e00a      	b.n	8003e02 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 020e 	bic.w	r2, r2, #14
 8003dfa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a3c      	ldr	r2, [pc, #240]	@ (8003ef8 <HAL_DMA_Abort+0x214>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d072      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3a      	ldr	r2, [pc, #232]	@ (8003efc <HAL_DMA_Abort+0x218>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d06d      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a39      	ldr	r2, [pc, #228]	@ (8003f00 <HAL_DMA_Abort+0x21c>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d068      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a37      	ldr	r2, [pc, #220]	@ (8003f04 <HAL_DMA_Abort+0x220>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d063      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a36      	ldr	r2, [pc, #216]	@ (8003f08 <HAL_DMA_Abort+0x224>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d05e      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a34      	ldr	r2, [pc, #208]	@ (8003f0c <HAL_DMA_Abort+0x228>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d059      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a33      	ldr	r2, [pc, #204]	@ (8003f10 <HAL_DMA_Abort+0x22c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d054      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a31      	ldr	r2, [pc, #196]	@ (8003f14 <HAL_DMA_Abort+0x230>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d04f      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a30      	ldr	r2, [pc, #192]	@ (8003f18 <HAL_DMA_Abort+0x234>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d04a      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a2e      	ldr	r2, [pc, #184]	@ (8003f1c <HAL_DMA_Abort+0x238>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d045      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a2d      	ldr	r2, [pc, #180]	@ (8003f20 <HAL_DMA_Abort+0x23c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d040      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a2b      	ldr	r2, [pc, #172]	@ (8003f24 <HAL_DMA_Abort+0x240>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d03b      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f28 <HAL_DMA_Abort+0x244>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d036      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a28      	ldr	r2, [pc, #160]	@ (8003f2c <HAL_DMA_Abort+0x248>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d031      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a27      	ldr	r2, [pc, #156]	@ (8003f30 <HAL_DMA_Abort+0x24c>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d02c      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a25      	ldr	r2, [pc, #148]	@ (8003f34 <HAL_DMA_Abort+0x250>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d027      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a24      	ldr	r2, [pc, #144]	@ (8003f38 <HAL_DMA_Abort+0x254>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a22      	ldr	r2, [pc, #136]	@ (8003f3c <HAL_DMA_Abort+0x258>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a21      	ldr	r2, [pc, #132]	@ (8003f40 <HAL_DMA_Abort+0x25c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f44 <HAL_DMA_Abort+0x260>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1e      	ldr	r2, [pc, #120]	@ (8003f48 <HAL_DMA_Abort+0x264>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f4c <HAL_DMA_Abort+0x268>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f50 <HAL_DMA_Abort+0x26c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_DMA_Abort+0x20e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <HAL_DMA_Abort+0x270>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d132      	bne.n	8003f58 <HAL_DMA_Abort+0x274>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e031      	b.n	8003f5a <HAL_DMA_Abort+0x276>
 8003ef6:	bf00      	nop
 8003ef8:	40020010 	.word	0x40020010
 8003efc:	40020028 	.word	0x40020028
 8003f00:	40020040 	.word	0x40020040
 8003f04:	40020058 	.word	0x40020058
 8003f08:	40020070 	.word	0x40020070
 8003f0c:	40020088 	.word	0x40020088
 8003f10:	400200a0 	.word	0x400200a0
 8003f14:	400200b8 	.word	0x400200b8
 8003f18:	40020410 	.word	0x40020410
 8003f1c:	40020428 	.word	0x40020428
 8003f20:	40020440 	.word	0x40020440
 8003f24:	40020458 	.word	0x40020458
 8003f28:	40020470 	.word	0x40020470
 8003f2c:	40020488 	.word	0x40020488
 8003f30:	400204a0 	.word	0x400204a0
 8003f34:	400204b8 	.word	0x400204b8
 8003f38:	58025408 	.word	0x58025408
 8003f3c:	5802541c 	.word	0x5802541c
 8003f40:	58025430 	.word	0x58025430
 8003f44:	58025444 	.word	0x58025444
 8003f48:	58025458 	.word	0x58025458
 8003f4c:	5802546c 	.word	0x5802546c
 8003f50:	58025480 	.word	0x58025480
 8003f54:	58025494 	.word	0x58025494
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a6d      	ldr	r2, [pc, #436]	@ (8004128 <HAL_DMA_Abort+0x444>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a6b      	ldr	r2, [pc, #428]	@ (800412c <HAL_DMA_Abort+0x448>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a6a      	ldr	r2, [pc, #424]	@ (8004130 <HAL_DMA_Abort+0x44c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a68      	ldr	r2, [pc, #416]	@ (8004134 <HAL_DMA_Abort+0x450>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a67      	ldr	r2, [pc, #412]	@ (8004138 <HAL_DMA_Abort+0x454>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a65      	ldr	r2, [pc, #404]	@ (800413c <HAL_DMA_Abort+0x458>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a64      	ldr	r2, [pc, #400]	@ (8004140 <HAL_DMA_Abort+0x45c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a62      	ldr	r2, [pc, #392]	@ (8004144 <HAL_DMA_Abort+0x460>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a61      	ldr	r2, [pc, #388]	@ (8004148 <HAL_DMA_Abort+0x464>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a5f      	ldr	r2, [pc, #380]	@ (800414c <HAL_DMA_Abort+0x468>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a5e      	ldr	r2, [pc, #376]	@ (8004150 <HAL_DMA_Abort+0x46c>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a5c      	ldr	r2, [pc, #368]	@ (8004154 <HAL_DMA_Abort+0x470>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a5b      	ldr	r2, [pc, #364]	@ (8004158 <HAL_DMA_Abort+0x474>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a59      	ldr	r2, [pc, #356]	@ (800415c <HAL_DMA_Abort+0x478>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a58      	ldr	r2, [pc, #352]	@ (8004160 <HAL_DMA_Abort+0x47c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_Abort+0x32a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a56      	ldr	r2, [pc, #344]	@ (8004164 <HAL_DMA_Abort+0x480>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d108      	bne.n	8004020 <HAL_DMA_Abort+0x33c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e007      	b.n	8004030 <HAL_DMA_Abort+0x34c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004030:	e013      	b.n	800405a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004032:	f7fd f9e5 	bl	8001400 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b05      	cmp	r3, #5
 800403e:	d90c      	bls.n	800405a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2203      	movs	r2, #3
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e12d      	b.n	80042b6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1e5      	bne.n	8004032 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a2f      	ldr	r2, [pc, #188]	@ (8004128 <HAL_DMA_Abort+0x444>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d04a      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a2d      	ldr	r2, [pc, #180]	@ (800412c <HAL_DMA_Abort+0x448>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d045      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a2c      	ldr	r2, [pc, #176]	@ (8004130 <HAL_DMA_Abort+0x44c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d040      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a2a      	ldr	r2, [pc, #168]	@ (8004134 <HAL_DMA_Abort+0x450>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d03b      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a29      	ldr	r2, [pc, #164]	@ (8004138 <HAL_DMA_Abort+0x454>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d036      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a27      	ldr	r2, [pc, #156]	@ (800413c <HAL_DMA_Abort+0x458>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d031      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <HAL_DMA_Abort+0x45c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d02c      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a24      	ldr	r2, [pc, #144]	@ (8004144 <HAL_DMA_Abort+0x460>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d027      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a23      	ldr	r2, [pc, #140]	@ (8004148 <HAL_DMA_Abort+0x464>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a21      	ldr	r2, [pc, #132]	@ (800414c <HAL_DMA_Abort+0x468>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01d      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a20      	ldr	r2, [pc, #128]	@ (8004150 <HAL_DMA_Abort+0x46c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1e      	ldr	r2, [pc, #120]	@ (8004154 <HAL_DMA_Abort+0x470>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004158 <HAL_DMA_Abort+0x474>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a1b      	ldr	r2, [pc, #108]	@ (800415c <HAL_DMA_Abort+0x478>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <HAL_DMA_Abort+0x47c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <HAL_DMA_Abort+0x422>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a18      	ldr	r2, [pc, #96]	@ (8004164 <HAL_DMA_Abort+0x480>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <HAL_DMA_Abort+0x426>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_DMA_Abort+0x428>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d02b      	beq.n	8004168 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004114:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411a:	f003 031f 	and.w	r3, r3, #31
 800411e:	223f      	movs	r2, #63	@ 0x3f
 8004120:	409a      	lsls	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	609a      	str	r2, [r3, #8]
 8004126:	e02a      	b.n	800417e <HAL_DMA_Abort+0x49a>
 8004128:	40020010 	.word	0x40020010
 800412c:	40020028 	.word	0x40020028
 8004130:	40020040 	.word	0x40020040
 8004134:	40020058 	.word	0x40020058
 8004138:	40020070 	.word	0x40020070
 800413c:	40020088 	.word	0x40020088
 8004140:	400200a0 	.word	0x400200a0
 8004144:	400200b8 	.word	0x400200b8
 8004148:	40020410 	.word	0x40020410
 800414c:	40020428 	.word	0x40020428
 8004150:	40020440 	.word	0x40020440
 8004154:	40020458 	.word	0x40020458
 8004158:	40020470 	.word	0x40020470
 800415c:	40020488 	.word	0x40020488
 8004160:	400204a0 	.word	0x400204a0
 8004164:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2201      	movs	r2, #1
 8004178:	409a      	lsls	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a4f      	ldr	r2, [pc, #316]	@ (80042c0 <HAL_DMA_Abort+0x5dc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d072      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a4d      	ldr	r2, [pc, #308]	@ (80042c4 <HAL_DMA_Abort+0x5e0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d06d      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a4c      	ldr	r2, [pc, #304]	@ (80042c8 <HAL_DMA_Abort+0x5e4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d068      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a4a      	ldr	r2, [pc, #296]	@ (80042cc <HAL_DMA_Abort+0x5e8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d063      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a49      	ldr	r2, [pc, #292]	@ (80042d0 <HAL_DMA_Abort+0x5ec>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d05e      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a47      	ldr	r2, [pc, #284]	@ (80042d4 <HAL_DMA_Abort+0x5f0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d059      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a46      	ldr	r2, [pc, #280]	@ (80042d8 <HAL_DMA_Abort+0x5f4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d054      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a44      	ldr	r2, [pc, #272]	@ (80042dc <HAL_DMA_Abort+0x5f8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d04f      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a43      	ldr	r2, [pc, #268]	@ (80042e0 <HAL_DMA_Abort+0x5fc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d04a      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a41      	ldr	r2, [pc, #260]	@ (80042e4 <HAL_DMA_Abort+0x600>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d045      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a40      	ldr	r2, [pc, #256]	@ (80042e8 <HAL_DMA_Abort+0x604>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d040      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a3e      	ldr	r2, [pc, #248]	@ (80042ec <HAL_DMA_Abort+0x608>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d03b      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a3d      	ldr	r2, [pc, #244]	@ (80042f0 <HAL_DMA_Abort+0x60c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d036      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a3b      	ldr	r2, [pc, #236]	@ (80042f4 <HAL_DMA_Abort+0x610>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d031      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a3a      	ldr	r2, [pc, #232]	@ (80042f8 <HAL_DMA_Abort+0x614>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d02c      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a38      	ldr	r2, [pc, #224]	@ (80042fc <HAL_DMA_Abort+0x618>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d027      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a37      	ldr	r2, [pc, #220]	@ (8004300 <HAL_DMA_Abort+0x61c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d022      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a35      	ldr	r2, [pc, #212]	@ (8004304 <HAL_DMA_Abort+0x620>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d01d      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a34      	ldr	r2, [pc, #208]	@ (8004308 <HAL_DMA_Abort+0x624>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d018      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a32      	ldr	r2, [pc, #200]	@ (800430c <HAL_DMA_Abort+0x628>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a31      	ldr	r2, [pc, #196]	@ (8004310 <HAL_DMA_Abort+0x62c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2f      	ldr	r2, [pc, #188]	@ (8004314 <HAL_DMA_Abort+0x630>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d009      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2e      	ldr	r2, [pc, #184]	@ (8004318 <HAL_DMA_Abort+0x634>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d004      	beq.n	800426e <HAL_DMA_Abort+0x58a>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2c      	ldr	r2, [pc, #176]	@ (800431c <HAL_DMA_Abort+0x638>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d101      	bne.n	8004272 <HAL_DMA_Abort+0x58e>
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <HAL_DMA_Abort+0x590>
 8004272:	2300      	movs	r3, #0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004280:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004294:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004298:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80042a2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40020010 	.word	0x40020010
 80042c4:	40020028 	.word	0x40020028
 80042c8:	40020040 	.word	0x40020040
 80042cc:	40020058 	.word	0x40020058
 80042d0:	40020070 	.word	0x40020070
 80042d4:	40020088 	.word	0x40020088
 80042d8:	400200a0 	.word	0x400200a0
 80042dc:	400200b8 	.word	0x400200b8
 80042e0:	40020410 	.word	0x40020410
 80042e4:	40020428 	.word	0x40020428
 80042e8:	40020440 	.word	0x40020440
 80042ec:	40020458 	.word	0x40020458
 80042f0:	40020470 	.word	0x40020470
 80042f4:	40020488 	.word	0x40020488
 80042f8:	400204a0 	.word	0x400204a0
 80042fc:	400204b8 	.word	0x400204b8
 8004300:	58025408 	.word	0x58025408
 8004304:	5802541c 	.word	0x5802541c
 8004308:	58025430 	.word	0x58025430
 800430c:	58025444 	.word	0x58025444
 8004310:	58025458 	.word	0x58025458
 8004314:	5802546c 	.word	0x5802546c
 8004318:	58025480 	.word	0x58025480
 800431c:	58025494 	.word	0x58025494

08004320 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e237      	b.n	80047a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d004      	beq.n	8004348 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2280      	movs	r2, #128	@ 0x80
 8004342:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e22c      	b.n	80047a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a5c      	ldr	r2, [pc, #368]	@ (80044c0 <HAL_DMA_Abort_IT+0x1a0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d04a      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a5b      	ldr	r2, [pc, #364]	@ (80044c4 <HAL_DMA_Abort_IT+0x1a4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d045      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a59      	ldr	r2, [pc, #356]	@ (80044c8 <HAL_DMA_Abort_IT+0x1a8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d040      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a58      	ldr	r2, [pc, #352]	@ (80044cc <HAL_DMA_Abort_IT+0x1ac>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d03b      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a56      	ldr	r2, [pc, #344]	@ (80044d0 <HAL_DMA_Abort_IT+0x1b0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d036      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a55      	ldr	r2, [pc, #340]	@ (80044d4 <HAL_DMA_Abort_IT+0x1b4>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d031      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a53      	ldr	r2, [pc, #332]	@ (80044d8 <HAL_DMA_Abort_IT+0x1b8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d02c      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a52      	ldr	r2, [pc, #328]	@ (80044dc <HAL_DMA_Abort_IT+0x1bc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d027      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a50      	ldr	r2, [pc, #320]	@ (80044e0 <HAL_DMA_Abort_IT+0x1c0>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d022      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a4f      	ldr	r2, [pc, #316]	@ (80044e4 <HAL_DMA_Abort_IT+0x1c4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d01d      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a4d      	ldr	r2, [pc, #308]	@ (80044e8 <HAL_DMA_Abort_IT+0x1c8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a4c      	ldr	r2, [pc, #304]	@ (80044ec <HAL_DMA_Abort_IT+0x1cc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a4a      	ldr	r2, [pc, #296]	@ (80044f0 <HAL_DMA_Abort_IT+0x1d0>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a49      	ldr	r2, [pc, #292]	@ (80044f4 <HAL_DMA_Abort_IT+0x1d4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a47      	ldr	r2, [pc, #284]	@ (80044f8 <HAL_DMA_Abort_IT+0x1d8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_DMA_Abort_IT+0xc8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a46      	ldr	r2, [pc, #280]	@ (80044fc <HAL_DMA_Abort_IT+0x1dc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_DMA_Abort_IT+0xcc>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_DMA_Abort_IT+0xce>
 80043ec:	2300      	movs	r3, #0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 8086 	beq.w	8004500 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2204      	movs	r2, #4
 80043f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2f      	ldr	r2, [pc, #188]	@ (80044c0 <HAL_DMA_Abort_IT+0x1a0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d04a      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2e      	ldr	r2, [pc, #184]	@ (80044c4 <HAL_DMA_Abort_IT+0x1a4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d045      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a2c      	ldr	r2, [pc, #176]	@ (80044c8 <HAL_DMA_Abort_IT+0x1a8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d040      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a2b      	ldr	r2, [pc, #172]	@ (80044cc <HAL_DMA_Abort_IT+0x1ac>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d03b      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a29      	ldr	r2, [pc, #164]	@ (80044d0 <HAL_DMA_Abort_IT+0x1b0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d036      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a28      	ldr	r2, [pc, #160]	@ (80044d4 <HAL_DMA_Abort_IT+0x1b4>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d031      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a26      	ldr	r2, [pc, #152]	@ (80044d8 <HAL_DMA_Abort_IT+0x1b8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d02c      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a25      	ldr	r2, [pc, #148]	@ (80044dc <HAL_DMA_Abort_IT+0x1bc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d027      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a23      	ldr	r2, [pc, #140]	@ (80044e0 <HAL_DMA_Abort_IT+0x1c0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d022      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a22      	ldr	r2, [pc, #136]	@ (80044e4 <HAL_DMA_Abort_IT+0x1c4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d01d      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a20      	ldr	r2, [pc, #128]	@ (80044e8 <HAL_DMA_Abort_IT+0x1c8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d018      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1f      	ldr	r2, [pc, #124]	@ (80044ec <HAL_DMA_Abort_IT+0x1cc>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1d      	ldr	r2, [pc, #116]	@ (80044f0 <HAL_DMA_Abort_IT+0x1d0>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00e      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1c      	ldr	r2, [pc, #112]	@ (80044f4 <HAL_DMA_Abort_IT+0x1d4>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1a      	ldr	r2, [pc, #104]	@ (80044f8 <HAL_DMA_Abort_IT+0x1d8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_DMA_Abort_IT+0x17c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a19      	ldr	r2, [pc, #100]	@ (80044fc <HAL_DMA_Abort_IT+0x1dc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d108      	bne.n	80044ae <HAL_DMA_Abort_IT+0x18e>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e178      	b.n	80047a0 <HAL_DMA_Abort_IT+0x480>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0201 	bic.w	r2, r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e16f      	b.n	80047a0 <HAL_DMA_Abort_IT+0x480>
 80044c0:	40020010 	.word	0x40020010
 80044c4:	40020028 	.word	0x40020028
 80044c8:	40020040 	.word	0x40020040
 80044cc:	40020058 	.word	0x40020058
 80044d0:	40020070 	.word	0x40020070
 80044d4:	40020088 	.word	0x40020088
 80044d8:	400200a0 	.word	0x400200a0
 80044dc:	400200b8 	.word	0x400200b8
 80044e0:	40020410 	.word	0x40020410
 80044e4:	40020428 	.word	0x40020428
 80044e8:	40020440 	.word	0x40020440
 80044ec:	40020458 	.word	0x40020458
 80044f0:	40020470 	.word	0x40020470
 80044f4:	40020488 	.word	0x40020488
 80044f8:	400204a0 	.word	0x400204a0
 80044fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 020e 	bic.w	r2, r2, #14
 800450e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a6c      	ldr	r2, [pc, #432]	@ (80046c8 <HAL_DMA_Abort_IT+0x3a8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d04a      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6b      	ldr	r2, [pc, #428]	@ (80046cc <HAL_DMA_Abort_IT+0x3ac>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d045      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a69      	ldr	r2, [pc, #420]	@ (80046d0 <HAL_DMA_Abort_IT+0x3b0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d040      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a68      	ldr	r2, [pc, #416]	@ (80046d4 <HAL_DMA_Abort_IT+0x3b4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d03b      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a66      	ldr	r2, [pc, #408]	@ (80046d8 <HAL_DMA_Abort_IT+0x3b8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d036      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a65      	ldr	r2, [pc, #404]	@ (80046dc <HAL_DMA_Abort_IT+0x3bc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d031      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a63      	ldr	r2, [pc, #396]	@ (80046e0 <HAL_DMA_Abort_IT+0x3c0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d02c      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a62      	ldr	r2, [pc, #392]	@ (80046e4 <HAL_DMA_Abort_IT+0x3c4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d027      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a60      	ldr	r2, [pc, #384]	@ (80046e8 <HAL_DMA_Abort_IT+0x3c8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d022      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a5f      	ldr	r2, [pc, #380]	@ (80046ec <HAL_DMA_Abort_IT+0x3cc>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d01d      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a5d      	ldr	r2, [pc, #372]	@ (80046f0 <HAL_DMA_Abort_IT+0x3d0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d018      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a5c      	ldr	r2, [pc, #368]	@ (80046f4 <HAL_DMA_Abort_IT+0x3d4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d013      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a5a      	ldr	r2, [pc, #360]	@ (80046f8 <HAL_DMA_Abort_IT+0x3d8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00e      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a59      	ldr	r2, [pc, #356]	@ (80046fc <HAL_DMA_Abort_IT+0x3dc>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d009      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a57      	ldr	r2, [pc, #348]	@ (8004700 <HAL_DMA_Abort_IT+0x3e0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d004      	beq.n	80045b0 <HAL_DMA_Abort_IT+0x290>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a56      	ldr	r2, [pc, #344]	@ (8004704 <HAL_DMA_Abort_IT+0x3e4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d108      	bne.n	80045c2 <HAL_DMA_Abort_IT+0x2a2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0201 	bic.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e007      	b.n	80045d2 <HAL_DMA_Abort_IT+0x2b2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a3c      	ldr	r2, [pc, #240]	@ (80046c8 <HAL_DMA_Abort_IT+0x3a8>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d072      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a3a      	ldr	r2, [pc, #232]	@ (80046cc <HAL_DMA_Abort_IT+0x3ac>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d06d      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a39      	ldr	r2, [pc, #228]	@ (80046d0 <HAL_DMA_Abort_IT+0x3b0>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d068      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a37      	ldr	r2, [pc, #220]	@ (80046d4 <HAL_DMA_Abort_IT+0x3b4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d063      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a36      	ldr	r2, [pc, #216]	@ (80046d8 <HAL_DMA_Abort_IT+0x3b8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d05e      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a34      	ldr	r2, [pc, #208]	@ (80046dc <HAL_DMA_Abort_IT+0x3bc>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d059      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a33      	ldr	r2, [pc, #204]	@ (80046e0 <HAL_DMA_Abort_IT+0x3c0>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d054      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a31      	ldr	r2, [pc, #196]	@ (80046e4 <HAL_DMA_Abort_IT+0x3c4>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d04f      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a30      	ldr	r2, [pc, #192]	@ (80046e8 <HAL_DMA_Abort_IT+0x3c8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d04a      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2e      	ldr	r2, [pc, #184]	@ (80046ec <HAL_DMA_Abort_IT+0x3cc>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d045      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2d      	ldr	r2, [pc, #180]	@ (80046f0 <HAL_DMA_Abort_IT+0x3d0>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d040      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2b      	ldr	r2, [pc, #172]	@ (80046f4 <HAL_DMA_Abort_IT+0x3d4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d03b      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2a      	ldr	r2, [pc, #168]	@ (80046f8 <HAL_DMA_Abort_IT+0x3d8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d036      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a28      	ldr	r2, [pc, #160]	@ (80046fc <HAL_DMA_Abort_IT+0x3dc>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a27      	ldr	r2, [pc, #156]	@ (8004700 <HAL_DMA_Abort_IT+0x3e0>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d02c      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a25      	ldr	r2, [pc, #148]	@ (8004704 <HAL_DMA_Abort_IT+0x3e4>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d027      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a24      	ldr	r2, [pc, #144]	@ (8004708 <HAL_DMA_Abort_IT+0x3e8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d022      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a22      	ldr	r2, [pc, #136]	@ (800470c <HAL_DMA_Abort_IT+0x3ec>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d01d      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a21      	ldr	r2, [pc, #132]	@ (8004710 <HAL_DMA_Abort_IT+0x3f0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d018      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a1f      	ldr	r2, [pc, #124]	@ (8004714 <HAL_DMA_Abort_IT+0x3f4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d013      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1e      	ldr	r2, [pc, #120]	@ (8004718 <HAL_DMA_Abort_IT+0x3f8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00e      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1c      	ldr	r2, [pc, #112]	@ (800471c <HAL_DMA_Abort_IT+0x3fc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d009      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1b      	ldr	r2, [pc, #108]	@ (8004720 <HAL_DMA_Abort_IT+0x400>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d004      	beq.n	80046c2 <HAL_DMA_Abort_IT+0x3a2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <HAL_DMA_Abort_IT+0x404>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d132      	bne.n	8004728 <HAL_DMA_Abort_IT+0x408>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e031      	b.n	800472a <HAL_DMA_Abort_IT+0x40a>
 80046c6:	bf00      	nop
 80046c8:	40020010 	.word	0x40020010
 80046cc:	40020028 	.word	0x40020028
 80046d0:	40020040 	.word	0x40020040
 80046d4:	40020058 	.word	0x40020058
 80046d8:	40020070 	.word	0x40020070
 80046dc:	40020088 	.word	0x40020088
 80046e0:	400200a0 	.word	0x400200a0
 80046e4:	400200b8 	.word	0x400200b8
 80046e8:	40020410 	.word	0x40020410
 80046ec:	40020428 	.word	0x40020428
 80046f0:	40020440 	.word	0x40020440
 80046f4:	40020458 	.word	0x40020458
 80046f8:	40020470 	.word	0x40020470
 80046fc:	40020488 	.word	0x40020488
 8004700:	400204a0 	.word	0x400204a0
 8004704:	400204b8 	.word	0x400204b8
 8004708:	58025408 	.word	0x58025408
 800470c:	5802541c 	.word	0x5802541c
 8004710:	58025430 	.word	0x58025430
 8004714:	58025444 	.word	0x58025444
 8004718:	58025458 	.word	0x58025458
 800471c:	5802546c 	.word	0x5802546c
 8004720:	58025480 	.word	0x58025480
 8004724:	58025494 	.word	0x58025494
 8004728:	2300      	movs	r3, #0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d028      	beq.n	8004780 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800473c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004742:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	2201      	movs	r2, #1
 800474e:	409a      	lsls	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800475c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004770:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004774:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800477e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop

080047ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	@ 0x28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047b8:	4b67      	ldr	r3, [pc, #412]	@ (8004958 <HAL_DMA_IRQHandler+0x1ac>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a67      	ldr	r2, [pc, #412]	@ (800495c <HAL_DMA_IRQHandler+0x1b0>)
 80047be:	fba2 2303 	umull	r2, r3, r2, r3
 80047c2:	0a9b      	lsrs	r3, r3, #10
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a5f      	ldr	r2, [pc, #380]	@ (8004960 <HAL_DMA_IRQHandler+0x1b4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d04a      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004964 <HAL_DMA_IRQHandler+0x1b8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d045      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a5c      	ldr	r2, [pc, #368]	@ (8004968 <HAL_DMA_IRQHandler+0x1bc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d040      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a5a      	ldr	r2, [pc, #360]	@ (800496c <HAL_DMA_IRQHandler+0x1c0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d03b      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a59      	ldr	r2, [pc, #356]	@ (8004970 <HAL_DMA_IRQHandler+0x1c4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d036      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a57      	ldr	r2, [pc, #348]	@ (8004974 <HAL_DMA_IRQHandler+0x1c8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d031      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a56      	ldr	r2, [pc, #344]	@ (8004978 <HAL_DMA_IRQHandler+0x1cc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d02c      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a54      	ldr	r2, [pc, #336]	@ (800497c <HAL_DMA_IRQHandler+0x1d0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d027      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a53      	ldr	r2, [pc, #332]	@ (8004980 <HAL_DMA_IRQHandler+0x1d4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d022      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a51      	ldr	r2, [pc, #324]	@ (8004984 <HAL_DMA_IRQHandler+0x1d8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d01d      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a50      	ldr	r2, [pc, #320]	@ (8004988 <HAL_DMA_IRQHandler+0x1dc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a4e      	ldr	r2, [pc, #312]	@ (800498c <HAL_DMA_IRQHandler+0x1e0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a4d      	ldr	r2, [pc, #308]	@ (8004990 <HAL_DMA_IRQHandler+0x1e4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a4b      	ldr	r2, [pc, #300]	@ (8004994 <HAL_DMA_IRQHandler+0x1e8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a4a      	ldr	r2, [pc, #296]	@ (8004998 <HAL_DMA_IRQHandler+0x1ec>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_DMA_IRQHandler+0xd2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a48      	ldr	r2, [pc, #288]	@ (800499c <HAL_DMA_IRQHandler+0x1f0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d101      	bne.n	8004882 <HAL_DMA_IRQHandler+0xd6>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_DMA_IRQHandler+0xd8>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 842b 	beq.w	80050e0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2208      	movs	r2, #8
 8004894:	409a      	lsls	r2, r3
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80a2 	beq.w	80049e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004960 <HAL_DMA_IRQHandler+0x1b4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d04a      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a2d      	ldr	r2, [pc, #180]	@ (8004964 <HAL_DMA_IRQHandler+0x1b8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d045      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a2b      	ldr	r2, [pc, #172]	@ (8004968 <HAL_DMA_IRQHandler+0x1bc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d040      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a2a      	ldr	r2, [pc, #168]	@ (800496c <HAL_DMA_IRQHandler+0x1c0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d03b      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a28      	ldr	r2, [pc, #160]	@ (8004970 <HAL_DMA_IRQHandler+0x1c4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d036      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a27      	ldr	r2, [pc, #156]	@ (8004974 <HAL_DMA_IRQHandler+0x1c8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d031      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a25      	ldr	r2, [pc, #148]	@ (8004978 <HAL_DMA_IRQHandler+0x1cc>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02c      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a24      	ldr	r2, [pc, #144]	@ (800497c <HAL_DMA_IRQHandler+0x1d0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d027      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a22      	ldr	r2, [pc, #136]	@ (8004980 <HAL_DMA_IRQHandler+0x1d4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d022      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a21      	ldr	r2, [pc, #132]	@ (8004984 <HAL_DMA_IRQHandler+0x1d8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d01d      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a1f      	ldr	r2, [pc, #124]	@ (8004988 <HAL_DMA_IRQHandler+0x1dc>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1e      	ldr	r2, [pc, #120]	@ (800498c <HAL_DMA_IRQHandler+0x1e0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <HAL_DMA_IRQHandler+0x1e4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <HAL_DMA_IRQHandler+0x1e8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a19      	ldr	r2, [pc, #100]	@ (8004998 <HAL_DMA_IRQHandler+0x1ec>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_DMA_IRQHandler+0x194>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a18      	ldr	r2, [pc, #96]	@ (800499c <HAL_DMA_IRQHandler+0x1f0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d12f      	bne.n	80049a0 <HAL_DMA_IRQHandler+0x1f4>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0304 	and.w	r3, r3, #4
 800494a:	2b00      	cmp	r3, #0
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	e02e      	b.n	80049b4 <HAL_DMA_IRQHandler+0x208>
 8004956:	bf00      	nop
 8004958:	24000000 	.word	0x24000000
 800495c:	1b4e81b5 	.word	0x1b4e81b5
 8004960:	40020010 	.word	0x40020010
 8004964:	40020028 	.word	0x40020028
 8004968:	40020040 	.word	0x40020040
 800496c:	40020058 	.word	0x40020058
 8004970:	40020070 	.word	0x40020070
 8004974:	40020088 	.word	0x40020088
 8004978:	400200a0 	.word	0x400200a0
 800497c:	400200b8 	.word	0x400200b8
 8004980:	40020410 	.word	0x40020410
 8004984:	40020428 	.word	0x40020428
 8004988:	40020440 	.word	0x40020440
 800498c:	40020458 	.word	0x40020458
 8004990:	40020470 	.word	0x40020470
 8004994:	40020488 	.word	0x40020488
 8004998:	400204a0 	.word	0x400204a0
 800499c:	400204b8 	.word	0x400204b8
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	bf14      	ite	ne
 80049ae:	2301      	movne	r3, #1
 80049b0:	2300      	moveq	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 0204 	bic.w	r2, r2, #4
 80049c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	2208      	movs	r2, #8
 80049d2:	409a      	lsls	r2, r3
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049dc:	f043 0201 	orr.w	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	fa22 f303 	lsr.w	r3, r2, r3
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d06e      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a69      	ldr	r2, [pc, #420]	@ (8004ba4 <HAL_DMA_IRQHandler+0x3f8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d04a      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a67      	ldr	r2, [pc, #412]	@ (8004ba8 <HAL_DMA_IRQHandler+0x3fc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d045      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a66      	ldr	r2, [pc, #408]	@ (8004bac <HAL_DMA_IRQHandler+0x400>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d040      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a64      	ldr	r2, [pc, #400]	@ (8004bb0 <HAL_DMA_IRQHandler+0x404>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d03b      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a63      	ldr	r2, [pc, #396]	@ (8004bb4 <HAL_DMA_IRQHandler+0x408>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d036      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a61      	ldr	r2, [pc, #388]	@ (8004bb8 <HAL_DMA_IRQHandler+0x40c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d031      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a60      	ldr	r2, [pc, #384]	@ (8004bbc <HAL_DMA_IRQHandler+0x410>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d02c      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a5e      	ldr	r2, [pc, #376]	@ (8004bc0 <HAL_DMA_IRQHandler+0x414>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d027      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a5d      	ldr	r2, [pc, #372]	@ (8004bc4 <HAL_DMA_IRQHandler+0x418>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d022      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a5b      	ldr	r2, [pc, #364]	@ (8004bc8 <HAL_DMA_IRQHandler+0x41c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01d      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a5a      	ldr	r2, [pc, #360]	@ (8004bcc <HAL_DMA_IRQHandler+0x420>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a58      	ldr	r2, [pc, #352]	@ (8004bd0 <HAL_DMA_IRQHandler+0x424>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a57      	ldr	r2, [pc, #348]	@ (8004bd4 <HAL_DMA_IRQHandler+0x428>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a55      	ldr	r2, [pc, #340]	@ (8004bd8 <HAL_DMA_IRQHandler+0x42c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a54      	ldr	r2, [pc, #336]	@ (8004bdc <HAL_DMA_IRQHandler+0x430>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x2ee>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a52      	ldr	r2, [pc, #328]	@ (8004be0 <HAL_DMA_IRQHandler+0x434>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10a      	bne.n	8004ab0 <HAL_DMA_IRQHandler+0x304>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	bf14      	ite	ne
 8004aa8:	2301      	movne	r3, #1
 8004aaa:	2300      	moveq	r3, #0
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	e003      	b.n	8004ab8 <HAL_DMA_IRQHandler+0x30c>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad0:	f043 0202 	orr.w	r2, r3, #2
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004adc:	f003 031f 	and.w	r3, r3, #31
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	409a      	lsls	r2, r3
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 808f 	beq.w	8004c0c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba4 <HAL_DMA_IRQHandler+0x3f8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d04a      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2a      	ldr	r2, [pc, #168]	@ (8004ba8 <HAL_DMA_IRQHandler+0x3fc>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d045      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a29      	ldr	r2, [pc, #164]	@ (8004bac <HAL_DMA_IRQHandler+0x400>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d040      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a27      	ldr	r2, [pc, #156]	@ (8004bb0 <HAL_DMA_IRQHandler+0x404>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d03b      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a26      	ldr	r2, [pc, #152]	@ (8004bb4 <HAL_DMA_IRQHandler+0x408>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d036      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a24      	ldr	r2, [pc, #144]	@ (8004bb8 <HAL_DMA_IRQHandler+0x40c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d031      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a23      	ldr	r2, [pc, #140]	@ (8004bbc <HAL_DMA_IRQHandler+0x410>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d02c      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a21      	ldr	r2, [pc, #132]	@ (8004bc0 <HAL_DMA_IRQHandler+0x414>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d027      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a20      	ldr	r2, [pc, #128]	@ (8004bc4 <HAL_DMA_IRQHandler+0x418>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d022      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004bc8 <HAL_DMA_IRQHandler+0x41c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d01d      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a1d      	ldr	r2, [pc, #116]	@ (8004bcc <HAL_DMA_IRQHandler+0x420>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d018      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1b      	ldr	r2, [pc, #108]	@ (8004bd0 <HAL_DMA_IRQHandler+0x424>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d013      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd4 <HAL_DMA_IRQHandler+0x428>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d00e      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a18      	ldr	r2, [pc, #96]	@ (8004bd8 <HAL_DMA_IRQHandler+0x42c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a17      	ldr	r2, [pc, #92]	@ (8004bdc <HAL_DMA_IRQHandler+0x430>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x3e2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a15      	ldr	r2, [pc, #84]	@ (8004be0 <HAL_DMA_IRQHandler+0x434>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d12a      	bne.n	8004be4 <HAL_DMA_IRQHandler+0x438>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	e023      	b.n	8004bec <HAL_DMA_IRQHandler+0x440>
 8004ba4:	40020010 	.word	0x40020010
 8004ba8:	40020028 	.word	0x40020028
 8004bac:	40020040 	.word	0x40020040
 8004bb0:	40020058 	.word	0x40020058
 8004bb4:	40020070 	.word	0x40020070
 8004bb8:	40020088 	.word	0x40020088
 8004bbc:	400200a0 	.word	0x400200a0
 8004bc0:	400200b8 	.word	0x400200b8
 8004bc4:	40020410 	.word	0x40020410
 8004bc8:	40020428 	.word	0x40020428
 8004bcc:	40020440 	.word	0x40020440
 8004bd0:	40020458 	.word	0x40020458
 8004bd4:	40020470 	.word	0x40020470
 8004bd8:	40020488 	.word	0x40020488
 8004bdc:	400204a0 	.word	0x400204a0
 8004be0:	400204b8 	.word	0x400204b8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00d      	beq.n	8004c0c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c04:	f043 0204 	orr.w	r2, r3, #4
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	2210      	movs	r2, #16
 8004c16:	409a      	lsls	r2, r3
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80a6 	beq.w	8004d6e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a85      	ldr	r2, [pc, #532]	@ (8004e3c <HAL_DMA_IRQHandler+0x690>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d04a      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a83      	ldr	r2, [pc, #524]	@ (8004e40 <HAL_DMA_IRQHandler+0x694>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d045      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a82      	ldr	r2, [pc, #520]	@ (8004e44 <HAL_DMA_IRQHandler+0x698>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d040      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a80      	ldr	r2, [pc, #512]	@ (8004e48 <HAL_DMA_IRQHandler+0x69c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d03b      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a7f      	ldr	r2, [pc, #508]	@ (8004e4c <HAL_DMA_IRQHandler+0x6a0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d036      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a7d      	ldr	r2, [pc, #500]	@ (8004e50 <HAL_DMA_IRQHandler+0x6a4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d031      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a7c      	ldr	r2, [pc, #496]	@ (8004e54 <HAL_DMA_IRQHandler+0x6a8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d02c      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a7a      	ldr	r2, [pc, #488]	@ (8004e58 <HAL_DMA_IRQHandler+0x6ac>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d027      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a79      	ldr	r2, [pc, #484]	@ (8004e5c <HAL_DMA_IRQHandler+0x6b0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d022      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a77      	ldr	r2, [pc, #476]	@ (8004e60 <HAL_DMA_IRQHandler+0x6b4>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d01d      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a76      	ldr	r2, [pc, #472]	@ (8004e64 <HAL_DMA_IRQHandler+0x6b8>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d018      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a74      	ldr	r2, [pc, #464]	@ (8004e68 <HAL_DMA_IRQHandler+0x6bc>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d013      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a73      	ldr	r2, [pc, #460]	@ (8004e6c <HAL_DMA_IRQHandler+0x6c0>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00e      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a71      	ldr	r2, [pc, #452]	@ (8004e70 <HAL_DMA_IRQHandler+0x6c4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d009      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a70      	ldr	r2, [pc, #448]	@ (8004e74 <HAL_DMA_IRQHandler+0x6c8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d004      	beq.n	8004cc2 <HAL_DMA_IRQHandler+0x516>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a6e      	ldr	r2, [pc, #440]	@ (8004e78 <HAL_DMA_IRQHandler+0x6cc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10a      	bne.n	8004cd8 <HAL_DMA_IRQHandler+0x52c>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	e009      	b.n	8004cec <HAL_DMA_IRQHandler+0x540>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	bf14      	ite	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	2300      	moveq	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d03e      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf4:	f003 031f 	and.w	r3, r3, #31
 8004cf8:	2210      	movs	r2, #16
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d018      	beq.n	8004d40 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d108      	bne.n	8004d2e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d024      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
 8004d2c:	e01f      	b.n	8004d6e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01b      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	4798      	blx	r3
 8004d3e:	e016      	b.n	8004d6e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d107      	bne.n	8004d5e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0208 	bic.w	r2, r2, #8
 8004d5c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2220      	movs	r2, #32
 8004d78:	409a      	lsls	r2, r3
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 8110 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2c      	ldr	r2, [pc, #176]	@ (8004e3c <HAL_DMA_IRQHandler+0x690>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d04a      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2b      	ldr	r2, [pc, #172]	@ (8004e40 <HAL_DMA_IRQHandler+0x694>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d045      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a29      	ldr	r2, [pc, #164]	@ (8004e44 <HAL_DMA_IRQHandler+0x698>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d040      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a28      	ldr	r2, [pc, #160]	@ (8004e48 <HAL_DMA_IRQHandler+0x69c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d03b      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a26      	ldr	r2, [pc, #152]	@ (8004e4c <HAL_DMA_IRQHandler+0x6a0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d036      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a25      	ldr	r2, [pc, #148]	@ (8004e50 <HAL_DMA_IRQHandler+0x6a4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d031      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a23      	ldr	r2, [pc, #140]	@ (8004e54 <HAL_DMA_IRQHandler+0x6a8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d02c      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a22      	ldr	r2, [pc, #136]	@ (8004e58 <HAL_DMA_IRQHandler+0x6ac>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d027      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a20      	ldr	r2, [pc, #128]	@ (8004e5c <HAL_DMA_IRQHandler+0x6b0>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d022      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1f      	ldr	r2, [pc, #124]	@ (8004e60 <HAL_DMA_IRQHandler+0x6b4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d01d      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a1d      	ldr	r2, [pc, #116]	@ (8004e64 <HAL_DMA_IRQHandler+0x6b8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d018      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1c      	ldr	r2, [pc, #112]	@ (8004e68 <HAL_DMA_IRQHandler+0x6bc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d013      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1a      	ldr	r2, [pc, #104]	@ (8004e6c <HAL_DMA_IRQHandler+0x6c0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d00e      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a19      	ldr	r2, [pc, #100]	@ (8004e70 <HAL_DMA_IRQHandler+0x6c4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a17      	ldr	r2, [pc, #92]	@ (8004e74 <HAL_DMA_IRQHandler+0x6c8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d004      	beq.n	8004e24 <HAL_DMA_IRQHandler+0x678>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a16      	ldr	r2, [pc, #88]	@ (8004e78 <HAL_DMA_IRQHandler+0x6cc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d12b      	bne.n	8004e7c <HAL_DMA_IRQHandler+0x6d0>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bf14      	ite	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	2300      	moveq	r3, #0
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	e02a      	b.n	8004e90 <HAL_DMA_IRQHandler+0x6e4>
 8004e3a:	bf00      	nop
 8004e3c:	40020010 	.word	0x40020010
 8004e40:	40020028 	.word	0x40020028
 8004e44:	40020040 	.word	0x40020040
 8004e48:	40020058 	.word	0x40020058
 8004e4c:	40020070 	.word	0x40020070
 8004e50:	40020088 	.word	0x40020088
 8004e54:	400200a0 	.word	0x400200a0
 8004e58:	400200b8 	.word	0x400200b8
 8004e5c:	40020410 	.word	0x40020410
 8004e60:	40020428 	.word	0x40020428
 8004e64:	40020440 	.word	0x40020440
 8004e68:	40020458 	.word	0x40020458
 8004e6c:	40020470 	.word	0x40020470
 8004e70:	40020488 	.word	0x40020488
 8004e74:	400204a0 	.word	0x400204a0
 8004e78:	400204b8 	.word	0x400204b8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bf14      	ite	ne
 8004e8a:	2301      	movne	r3, #1
 8004e8c:	2300      	moveq	r3, #0
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8087 	beq.w	8004fa4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e9a:	f003 031f 	and.w	r3, r3, #31
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d139      	bne.n	8004f26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0216 	bic.w	r2, r2, #22
 8004ec0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	695a      	ldr	r2, [r3, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ed0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <HAL_DMA_IRQHandler+0x736>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0208 	bic.w	r2, r2, #8
 8004ef0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef6:	f003 031f 	and.w	r3, r3, #31
 8004efa:	223f      	movs	r2, #63	@ 0x3f
 8004efc:	409a      	lsls	r2, r3
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f000 8382 	beq.w	8005620 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
          }
          return;
 8004f24:	e37c      	b.n	8005620 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d018      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d108      	bne.n	8004f54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d02c      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	4798      	blx	r3
 8004f52:	e027      	b.n	8004fa4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d023      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4798      	blx	r3
 8004f64:	e01e      	b.n	8004fa4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10f      	bne.n	8004f94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0210 	bic.w	r2, r2, #16
 8004f82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 833e 	beq.w	800562a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8088 	beq.w	80050cc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a89      	ldr	r2, [pc, #548]	@ (80051f0 <HAL_DMA_IRQHandler+0xa44>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d04a      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a88      	ldr	r2, [pc, #544]	@ (80051f4 <HAL_DMA_IRQHandler+0xa48>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d045      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a86      	ldr	r2, [pc, #536]	@ (80051f8 <HAL_DMA_IRQHandler+0xa4c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d040      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a85      	ldr	r2, [pc, #532]	@ (80051fc <HAL_DMA_IRQHandler+0xa50>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d03b      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a83      	ldr	r2, [pc, #524]	@ (8005200 <HAL_DMA_IRQHandler+0xa54>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d036      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a82      	ldr	r2, [pc, #520]	@ (8005204 <HAL_DMA_IRQHandler+0xa58>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d031      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a80      	ldr	r2, [pc, #512]	@ (8005208 <HAL_DMA_IRQHandler+0xa5c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d02c      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7f      	ldr	r2, [pc, #508]	@ (800520c <HAL_DMA_IRQHandler+0xa60>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d027      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7d      	ldr	r2, [pc, #500]	@ (8005210 <HAL_DMA_IRQHandler+0xa64>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d022      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a7c      	ldr	r2, [pc, #496]	@ (8005214 <HAL_DMA_IRQHandler+0xa68>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d01d      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a7a      	ldr	r2, [pc, #488]	@ (8005218 <HAL_DMA_IRQHandler+0xa6c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d018      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a79      	ldr	r2, [pc, #484]	@ (800521c <HAL_DMA_IRQHandler+0xa70>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d013      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a77      	ldr	r2, [pc, #476]	@ (8005220 <HAL_DMA_IRQHandler+0xa74>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d00e      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a76      	ldr	r2, [pc, #472]	@ (8005224 <HAL_DMA_IRQHandler+0xa78>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d009      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a74      	ldr	r2, [pc, #464]	@ (8005228 <HAL_DMA_IRQHandler+0xa7c>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d004      	beq.n	8005064 <HAL_DMA_IRQHandler+0x8b8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a73      	ldr	r2, [pc, #460]	@ (800522c <HAL_DMA_IRQHandler+0xa80>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d108      	bne.n	8005076 <HAL_DMA_IRQHandler+0x8ca>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e007      	b.n	8005086 <HAL_DMA_IRQHandler+0x8da>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508e:	429a      	cmp	r2, r3
 8005090:	d307      	bcc.n	80050a2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f2      	bne.n	8005086 <HAL_DMA_IRQHandler+0x8da>
 80050a0:	e000      	b.n	80050a4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80050a2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2203      	movs	r2, #3
 80050b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80050ba:	e003      	b.n	80050c4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 82aa 	beq.w	800562a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
 80050de:	e2a4      	b.n	800562a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a52      	ldr	r2, [pc, #328]	@ (8005230 <HAL_DMA_IRQHandler+0xa84>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d04a      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a51      	ldr	r2, [pc, #324]	@ (8005234 <HAL_DMA_IRQHandler+0xa88>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d045      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a4f      	ldr	r2, [pc, #316]	@ (8005238 <HAL_DMA_IRQHandler+0xa8c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d040      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a4e      	ldr	r2, [pc, #312]	@ (800523c <HAL_DMA_IRQHandler+0xa90>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d03b      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a4c      	ldr	r2, [pc, #304]	@ (8005240 <HAL_DMA_IRQHandler+0xa94>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d036      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a4b      	ldr	r2, [pc, #300]	@ (8005244 <HAL_DMA_IRQHandler+0xa98>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d031      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a49      	ldr	r2, [pc, #292]	@ (8005248 <HAL_DMA_IRQHandler+0xa9c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02c      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a48      	ldr	r2, [pc, #288]	@ (800524c <HAL_DMA_IRQHandler+0xaa0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d027      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a46      	ldr	r2, [pc, #280]	@ (8005250 <HAL_DMA_IRQHandler+0xaa4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a45      	ldr	r2, [pc, #276]	@ (8005254 <HAL_DMA_IRQHandler+0xaa8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d01d      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a43      	ldr	r2, [pc, #268]	@ (8005258 <HAL_DMA_IRQHandler+0xaac>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a42      	ldr	r2, [pc, #264]	@ (800525c <HAL_DMA_IRQHandler+0xab0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a40      	ldr	r2, [pc, #256]	@ (8005260 <HAL_DMA_IRQHandler+0xab4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a3f      	ldr	r2, [pc, #252]	@ (8005264 <HAL_DMA_IRQHandler+0xab8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3d      	ldr	r2, [pc, #244]	@ (8005268 <HAL_DMA_IRQHandler+0xabc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_DMA_IRQHandler+0x9d4>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a3c      	ldr	r2, [pc, #240]	@ (800526c <HAL_DMA_IRQHandler+0xac0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d101      	bne.n	8005184 <HAL_DMA_IRQHandler+0x9d8>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <HAL_DMA_IRQHandler+0x9da>
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 824f 	beq.w	800562a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	2204      	movs	r2, #4
 800519e:	409a      	lsls	r2, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4013      	ands	r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 80dd 	beq.w	8005364 <HAL_DMA_IRQHandler+0xbb8>
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80d7 	beq.w	8005364 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	2204      	movs	r2, #4
 80051c0:	409a      	lsls	r2, r3
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d059      	beq.n	8005284 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d14a      	bne.n	8005270 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8220 	beq.w	8005624 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051ec:	e21a      	b.n	8005624 <HAL_DMA_IRQHandler+0xe78>
 80051ee:	bf00      	nop
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
 8005230:	48022c08 	.word	0x48022c08
 8005234:	48022c1c 	.word	0x48022c1c
 8005238:	48022c30 	.word	0x48022c30
 800523c:	48022c44 	.word	0x48022c44
 8005240:	48022c58 	.word	0x48022c58
 8005244:	48022c6c 	.word	0x48022c6c
 8005248:	48022c80 	.word	0x48022c80
 800524c:	48022c94 	.word	0x48022c94
 8005250:	58025408 	.word	0x58025408
 8005254:	5802541c 	.word	0x5802541c
 8005258:	58025430 	.word	0x58025430
 800525c:	58025444 	.word	0x58025444
 8005260:	58025458 	.word	0x58025458
 8005264:	5802546c 	.word	0x5802546c
 8005268:	58025480 	.word	0x58025480
 800526c:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 81d5 	beq.w	8005624 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005282:	e1cf      	b.n	8005624 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d160      	bne.n	8005350 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a7f      	ldr	r2, [pc, #508]	@ (8005490 <HAL_DMA_IRQHandler+0xce4>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d04a      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a7d      	ldr	r2, [pc, #500]	@ (8005494 <HAL_DMA_IRQHandler+0xce8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d045      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a7c      	ldr	r2, [pc, #496]	@ (8005498 <HAL_DMA_IRQHandler+0xcec>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d040      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a7a      	ldr	r2, [pc, #488]	@ (800549c <HAL_DMA_IRQHandler+0xcf0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d03b      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a79      	ldr	r2, [pc, #484]	@ (80054a0 <HAL_DMA_IRQHandler+0xcf4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d036      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a77      	ldr	r2, [pc, #476]	@ (80054a4 <HAL_DMA_IRQHandler+0xcf8>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d031      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a76      	ldr	r2, [pc, #472]	@ (80054a8 <HAL_DMA_IRQHandler+0xcfc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d02c      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a74      	ldr	r2, [pc, #464]	@ (80054ac <HAL_DMA_IRQHandler+0xd00>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d027      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a73      	ldr	r2, [pc, #460]	@ (80054b0 <HAL_DMA_IRQHandler+0xd04>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d022      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a71      	ldr	r2, [pc, #452]	@ (80054b4 <HAL_DMA_IRQHandler+0xd08>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d01d      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a70      	ldr	r2, [pc, #448]	@ (80054b8 <HAL_DMA_IRQHandler+0xd0c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d018      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a6e      	ldr	r2, [pc, #440]	@ (80054bc <HAL_DMA_IRQHandler+0xd10>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d013      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a6d      	ldr	r2, [pc, #436]	@ (80054c0 <HAL_DMA_IRQHandler+0xd14>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d00e      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a6b      	ldr	r2, [pc, #428]	@ (80054c4 <HAL_DMA_IRQHandler+0xd18>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d009      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a6a      	ldr	r2, [pc, #424]	@ (80054c8 <HAL_DMA_IRQHandler+0xd1c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d004      	beq.n	800532e <HAL_DMA_IRQHandler+0xb82>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a68      	ldr	r2, [pc, #416]	@ (80054cc <HAL_DMA_IRQHandler+0xd20>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d108      	bne.n	8005340 <HAL_DMA_IRQHandler+0xb94>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0208 	bic.w	r2, r2, #8
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e007      	b.n	8005350 <HAL_DMA_IRQHandler+0xba4>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0204 	bic.w	r2, r2, #4
 800534e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8165 	beq.w	8005624 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005362:	e15f      	b.n	8005624 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005368:	f003 031f 	and.w	r3, r3, #31
 800536c:	2202      	movs	r2, #2
 800536e:	409a      	lsls	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	4013      	ands	r3, r2
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80c5 	beq.w	8005504 <HAL_DMA_IRQHandler+0xd58>
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80bf 	beq.w	8005504 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800538a:	f003 031f 	and.w	r3, r3, #31
 800538e:	2202      	movs	r2, #2
 8005390:	409a      	lsls	r2, r3
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d018      	beq.n	80053d2 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 813a 	beq.w	8005628 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053bc:	e134      	b.n	8005628 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 8130 	beq.w	8005628 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053d0:	e12a      	b.n	8005628 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f003 0320 	and.w	r3, r3, #32
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f040 8089 	bne.w	80054f0 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005490 <HAL_DMA_IRQHandler+0xce4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d04a      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a29      	ldr	r2, [pc, #164]	@ (8005494 <HAL_DMA_IRQHandler+0xce8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d045      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a28      	ldr	r2, [pc, #160]	@ (8005498 <HAL_DMA_IRQHandler+0xcec>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d040      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a26      	ldr	r2, [pc, #152]	@ (800549c <HAL_DMA_IRQHandler+0xcf0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d03b      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a25      	ldr	r2, [pc, #148]	@ (80054a0 <HAL_DMA_IRQHandler+0xcf4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d036      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a23      	ldr	r2, [pc, #140]	@ (80054a4 <HAL_DMA_IRQHandler+0xcf8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d031      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a22      	ldr	r2, [pc, #136]	@ (80054a8 <HAL_DMA_IRQHandler+0xcfc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d02c      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a20      	ldr	r2, [pc, #128]	@ (80054ac <HAL_DMA_IRQHandler+0xd00>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d027      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1f      	ldr	r2, [pc, #124]	@ (80054b0 <HAL_DMA_IRQHandler+0xd04>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d022      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1d      	ldr	r2, [pc, #116]	@ (80054b4 <HAL_DMA_IRQHandler+0xd08>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01d      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1c      	ldr	r2, [pc, #112]	@ (80054b8 <HAL_DMA_IRQHandler+0xd0c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d018      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1a      	ldr	r2, [pc, #104]	@ (80054bc <HAL_DMA_IRQHandler+0xd10>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d013      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a19      	ldr	r2, [pc, #100]	@ (80054c0 <HAL_DMA_IRQHandler+0xd14>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00e      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a17      	ldr	r2, [pc, #92]	@ (80054c4 <HAL_DMA_IRQHandler+0xd18>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d009      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a16      	ldr	r2, [pc, #88]	@ (80054c8 <HAL_DMA_IRQHandler+0xd1c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d004      	beq.n	800547e <HAL_DMA_IRQHandler+0xcd2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a14      	ldr	r2, [pc, #80]	@ (80054cc <HAL_DMA_IRQHandler+0xd20>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d128      	bne.n	80054d0 <HAL_DMA_IRQHandler+0xd24>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0214 	bic.w	r2, r2, #20
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	e027      	b.n	80054e0 <HAL_DMA_IRQHandler+0xd34>
 8005490:	40020010 	.word	0x40020010
 8005494:	40020028 	.word	0x40020028
 8005498:	40020040 	.word	0x40020040
 800549c:	40020058 	.word	0x40020058
 80054a0:	40020070 	.word	0x40020070
 80054a4:	40020088 	.word	0x40020088
 80054a8:	400200a0 	.word	0x400200a0
 80054ac:	400200b8 	.word	0x400200b8
 80054b0:	40020410 	.word	0x40020410
 80054b4:	40020428 	.word	0x40020428
 80054b8:	40020440 	.word	0x40020440
 80054bc:	40020458 	.word	0x40020458
 80054c0:	40020470 	.word	0x40020470
 80054c4:	40020488 	.word	0x40020488
 80054c8:	400204a0 	.word	0x400204a0
 80054cc:	400204b8 	.word	0x400204b8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 020a 	bic.w	r2, r2, #10
 80054de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f000 8097 	beq.w	8005628 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005502:	e091      	b.n	8005628 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005508:	f003 031f 	and.w	r3, r3, #31
 800550c:	2208      	movs	r2, #8
 800550e:	409a      	lsls	r2, r3
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 8088 	beq.w	800562a <HAL_DMA_IRQHandler+0xe7e>
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8082 	beq.w	800562a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a41      	ldr	r2, [pc, #260]	@ (8005630 <HAL_DMA_IRQHandler+0xe84>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d04a      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a3f      	ldr	r2, [pc, #252]	@ (8005634 <HAL_DMA_IRQHandler+0xe88>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d045      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a3e      	ldr	r2, [pc, #248]	@ (8005638 <HAL_DMA_IRQHandler+0xe8c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d040      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a3c      	ldr	r2, [pc, #240]	@ (800563c <HAL_DMA_IRQHandler+0xe90>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d03b      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a3b      	ldr	r2, [pc, #236]	@ (8005640 <HAL_DMA_IRQHandler+0xe94>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d036      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a39      	ldr	r2, [pc, #228]	@ (8005644 <HAL_DMA_IRQHandler+0xe98>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d031      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a38      	ldr	r2, [pc, #224]	@ (8005648 <HAL_DMA_IRQHandler+0xe9c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d02c      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a36      	ldr	r2, [pc, #216]	@ (800564c <HAL_DMA_IRQHandler+0xea0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d027      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a35      	ldr	r2, [pc, #212]	@ (8005650 <HAL_DMA_IRQHandler+0xea4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d022      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a33      	ldr	r2, [pc, #204]	@ (8005654 <HAL_DMA_IRQHandler+0xea8>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d01d      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a32      	ldr	r2, [pc, #200]	@ (8005658 <HAL_DMA_IRQHandler+0xeac>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d018      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a30      	ldr	r2, [pc, #192]	@ (800565c <HAL_DMA_IRQHandler+0xeb0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005660 <HAL_DMA_IRQHandler+0xeb4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00e      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005664 <HAL_DMA_IRQHandler+0xeb8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d009      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a2c      	ldr	r2, [pc, #176]	@ (8005668 <HAL_DMA_IRQHandler+0xebc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d004      	beq.n	80055c6 <HAL_DMA_IRQHandler+0xe1a>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a2a      	ldr	r2, [pc, #168]	@ (800566c <HAL_DMA_IRQHandler+0xec0>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d108      	bne.n	80055d8 <HAL_DMA_IRQHandler+0xe2c>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 021c 	bic.w	r2, r2, #28
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e007      	b.n	80055e8 <HAL_DMA_IRQHandler+0xe3c>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 020e 	bic.w	r2, r2, #14
 80055e6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ec:	f003 031f 	and.w	r3, r3, #31
 80055f0:	2201      	movs	r2, #1
 80055f2:	409a      	lsls	r2, r3
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d009      	beq.n	800562a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	4798      	blx	r3
 800561e:	e004      	b.n	800562a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005620:	bf00      	nop
 8005622:	e002      	b.n	800562a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005624:	bf00      	nop
 8005626:	e000      	b.n	800562a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005628:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800562a:	3728      	adds	r7, #40	@ 0x28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	40020010 	.word	0x40020010
 8005634:	40020028 	.word	0x40020028
 8005638:	40020040 	.word	0x40020040
 800563c:	40020058 	.word	0x40020058
 8005640:	40020070 	.word	0x40020070
 8005644:	40020088 	.word	0x40020088
 8005648:	400200a0 	.word	0x400200a0
 800564c:	400200b8 	.word	0x400200b8
 8005650:	40020410 	.word	0x40020410
 8005654:	40020428 	.word	0x40020428
 8005658:	40020440 	.word	0x40020440
 800565c:	40020458 	.word	0x40020458
 8005660:	40020470 	.word	0x40020470
 8005664:	40020488 	.word	0x40020488
 8005668:	400204a0 	.word	0x400204a0
 800566c:	400204b8 	.word	0x400204b8

08005670 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005682:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005688:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a7f      	ldr	r2, [pc, #508]	@ (800588c <DMA_SetConfig+0x21c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d072      	beq.n	800577a <DMA_SetConfig+0x10a>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a7d      	ldr	r2, [pc, #500]	@ (8005890 <DMA_SetConfig+0x220>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d06d      	beq.n	800577a <DMA_SetConfig+0x10a>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005894 <DMA_SetConfig+0x224>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d068      	beq.n	800577a <DMA_SetConfig+0x10a>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a7a      	ldr	r2, [pc, #488]	@ (8005898 <DMA_SetConfig+0x228>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d063      	beq.n	800577a <DMA_SetConfig+0x10a>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a79      	ldr	r2, [pc, #484]	@ (800589c <DMA_SetConfig+0x22c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d05e      	beq.n	800577a <DMA_SetConfig+0x10a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a77      	ldr	r2, [pc, #476]	@ (80058a0 <DMA_SetConfig+0x230>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d059      	beq.n	800577a <DMA_SetConfig+0x10a>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a76      	ldr	r2, [pc, #472]	@ (80058a4 <DMA_SetConfig+0x234>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d054      	beq.n	800577a <DMA_SetConfig+0x10a>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a74      	ldr	r2, [pc, #464]	@ (80058a8 <DMA_SetConfig+0x238>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d04f      	beq.n	800577a <DMA_SetConfig+0x10a>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a73      	ldr	r2, [pc, #460]	@ (80058ac <DMA_SetConfig+0x23c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d04a      	beq.n	800577a <DMA_SetConfig+0x10a>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a71      	ldr	r2, [pc, #452]	@ (80058b0 <DMA_SetConfig+0x240>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d045      	beq.n	800577a <DMA_SetConfig+0x10a>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a70      	ldr	r2, [pc, #448]	@ (80058b4 <DMA_SetConfig+0x244>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d040      	beq.n	800577a <DMA_SetConfig+0x10a>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a6e      	ldr	r2, [pc, #440]	@ (80058b8 <DMA_SetConfig+0x248>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d03b      	beq.n	800577a <DMA_SetConfig+0x10a>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a6d      	ldr	r2, [pc, #436]	@ (80058bc <DMA_SetConfig+0x24c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d036      	beq.n	800577a <DMA_SetConfig+0x10a>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a6b      	ldr	r2, [pc, #428]	@ (80058c0 <DMA_SetConfig+0x250>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d031      	beq.n	800577a <DMA_SetConfig+0x10a>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a6a      	ldr	r2, [pc, #424]	@ (80058c4 <DMA_SetConfig+0x254>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d02c      	beq.n	800577a <DMA_SetConfig+0x10a>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a68      	ldr	r2, [pc, #416]	@ (80058c8 <DMA_SetConfig+0x258>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d027      	beq.n	800577a <DMA_SetConfig+0x10a>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a67      	ldr	r2, [pc, #412]	@ (80058cc <DMA_SetConfig+0x25c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d022      	beq.n	800577a <DMA_SetConfig+0x10a>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a65      	ldr	r2, [pc, #404]	@ (80058d0 <DMA_SetConfig+0x260>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d01d      	beq.n	800577a <DMA_SetConfig+0x10a>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a64      	ldr	r2, [pc, #400]	@ (80058d4 <DMA_SetConfig+0x264>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d018      	beq.n	800577a <DMA_SetConfig+0x10a>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a62      	ldr	r2, [pc, #392]	@ (80058d8 <DMA_SetConfig+0x268>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d013      	beq.n	800577a <DMA_SetConfig+0x10a>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a61      	ldr	r2, [pc, #388]	@ (80058dc <DMA_SetConfig+0x26c>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00e      	beq.n	800577a <DMA_SetConfig+0x10a>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a5f      	ldr	r2, [pc, #380]	@ (80058e0 <DMA_SetConfig+0x270>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d009      	beq.n	800577a <DMA_SetConfig+0x10a>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a5e      	ldr	r2, [pc, #376]	@ (80058e4 <DMA_SetConfig+0x274>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <DMA_SetConfig+0x10a>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a5c      	ldr	r2, [pc, #368]	@ (80058e8 <DMA_SetConfig+0x278>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d101      	bne.n	800577e <DMA_SetConfig+0x10e>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <DMA_SetConfig+0x110>
 800577e:	2300      	movs	r3, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00d      	beq.n	80057a0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800578c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005792:	2b00      	cmp	r3, #0
 8005794:	d004      	beq.n	80057a0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800579e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a39      	ldr	r2, [pc, #228]	@ (800588c <DMA_SetConfig+0x21c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d04a      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a38      	ldr	r2, [pc, #224]	@ (8005890 <DMA_SetConfig+0x220>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d045      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a36      	ldr	r2, [pc, #216]	@ (8005894 <DMA_SetConfig+0x224>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d040      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a35      	ldr	r2, [pc, #212]	@ (8005898 <DMA_SetConfig+0x228>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d03b      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a33      	ldr	r2, [pc, #204]	@ (800589c <DMA_SetConfig+0x22c>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d036      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a32      	ldr	r2, [pc, #200]	@ (80058a0 <DMA_SetConfig+0x230>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d031      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a30      	ldr	r2, [pc, #192]	@ (80058a4 <DMA_SetConfig+0x234>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d02c      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a2f      	ldr	r2, [pc, #188]	@ (80058a8 <DMA_SetConfig+0x238>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d027      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a2d      	ldr	r2, [pc, #180]	@ (80058ac <DMA_SetConfig+0x23c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d022      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a2c      	ldr	r2, [pc, #176]	@ (80058b0 <DMA_SetConfig+0x240>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d01d      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a2a      	ldr	r2, [pc, #168]	@ (80058b4 <DMA_SetConfig+0x244>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d018      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a29      	ldr	r2, [pc, #164]	@ (80058b8 <DMA_SetConfig+0x248>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d013      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a27      	ldr	r2, [pc, #156]	@ (80058bc <DMA_SetConfig+0x24c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d00e      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a26      	ldr	r2, [pc, #152]	@ (80058c0 <DMA_SetConfig+0x250>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d009      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a24      	ldr	r2, [pc, #144]	@ (80058c4 <DMA_SetConfig+0x254>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d004      	beq.n	8005840 <DMA_SetConfig+0x1d0>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a23      	ldr	r2, [pc, #140]	@ (80058c8 <DMA_SetConfig+0x258>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d101      	bne.n	8005844 <DMA_SetConfig+0x1d4>
 8005840:	2301      	movs	r3, #1
 8005842:	e000      	b.n	8005846 <DMA_SetConfig+0x1d6>
 8005844:	2300      	movs	r3, #0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d059      	beq.n	80058fe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	223f      	movs	r2, #63	@ 0x3f
 8005854:	409a      	lsls	r2, r3
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005868:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b40      	cmp	r3, #64	@ 0x40
 8005878:	d138      	bne.n	80058ec <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800588a:	e0ae      	b.n	80059ea <DMA_SetConfig+0x37a>
 800588c:	40020010 	.word	0x40020010
 8005890:	40020028 	.word	0x40020028
 8005894:	40020040 	.word	0x40020040
 8005898:	40020058 	.word	0x40020058
 800589c:	40020070 	.word	0x40020070
 80058a0:	40020088 	.word	0x40020088
 80058a4:	400200a0 	.word	0x400200a0
 80058a8:	400200b8 	.word	0x400200b8
 80058ac:	40020410 	.word	0x40020410
 80058b0:	40020428 	.word	0x40020428
 80058b4:	40020440 	.word	0x40020440
 80058b8:	40020458 	.word	0x40020458
 80058bc:	40020470 	.word	0x40020470
 80058c0:	40020488 	.word	0x40020488
 80058c4:	400204a0 	.word	0x400204a0
 80058c8:	400204b8 	.word	0x400204b8
 80058cc:	58025408 	.word	0x58025408
 80058d0:	5802541c 	.word	0x5802541c
 80058d4:	58025430 	.word	0x58025430
 80058d8:	58025444 	.word	0x58025444
 80058dc:	58025458 	.word	0x58025458
 80058e0:	5802546c 	.word	0x5802546c
 80058e4:	58025480 	.word	0x58025480
 80058e8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	60da      	str	r2, [r3, #12]
}
 80058fc:	e075      	b.n	80059ea <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a3d      	ldr	r2, [pc, #244]	@ (80059f8 <DMA_SetConfig+0x388>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d04a      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a3b      	ldr	r2, [pc, #236]	@ (80059fc <DMA_SetConfig+0x38c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d045      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a3a      	ldr	r2, [pc, #232]	@ (8005a00 <DMA_SetConfig+0x390>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d040      	beq.n	800599e <DMA_SetConfig+0x32e>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a38      	ldr	r2, [pc, #224]	@ (8005a04 <DMA_SetConfig+0x394>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d03b      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a37      	ldr	r2, [pc, #220]	@ (8005a08 <DMA_SetConfig+0x398>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d036      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a35      	ldr	r2, [pc, #212]	@ (8005a0c <DMA_SetConfig+0x39c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d031      	beq.n	800599e <DMA_SetConfig+0x32e>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a34      	ldr	r2, [pc, #208]	@ (8005a10 <DMA_SetConfig+0x3a0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d02c      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a32      	ldr	r2, [pc, #200]	@ (8005a14 <DMA_SetConfig+0x3a4>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d027      	beq.n	800599e <DMA_SetConfig+0x32e>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a31      	ldr	r2, [pc, #196]	@ (8005a18 <DMA_SetConfig+0x3a8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d022      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2f      	ldr	r2, [pc, #188]	@ (8005a1c <DMA_SetConfig+0x3ac>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01d      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a2e      	ldr	r2, [pc, #184]	@ (8005a20 <DMA_SetConfig+0x3b0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d018      	beq.n	800599e <DMA_SetConfig+0x32e>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a2c      	ldr	r2, [pc, #176]	@ (8005a24 <DMA_SetConfig+0x3b4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a2b      	ldr	r2, [pc, #172]	@ (8005a28 <DMA_SetConfig+0x3b8>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a29      	ldr	r2, [pc, #164]	@ (8005a2c <DMA_SetConfig+0x3bc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <DMA_SetConfig+0x32e>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a28      	ldr	r2, [pc, #160]	@ (8005a30 <DMA_SetConfig+0x3c0>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <DMA_SetConfig+0x32e>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a26      	ldr	r2, [pc, #152]	@ (8005a34 <DMA_SetConfig+0x3c4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d101      	bne.n	80059a2 <DMA_SetConfig+0x332>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <DMA_SetConfig+0x334>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ac:	f003 031f 	and.w	r3, r3, #31
 80059b0:	2201      	movs	r2, #1
 80059b2:	409a      	lsls	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b40      	cmp	r3, #64	@ 0x40
 80059c6:	d108      	bne.n	80059da <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	60da      	str	r2, [r3, #12]
}
 80059d8:	e007      	b.n	80059ea <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	60da      	str	r2, [r3, #12]
}
 80059ea:	bf00      	nop
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	48022c08 	.word	0x48022c08
 80059fc:	48022c1c 	.word	0x48022c1c
 8005a00:	48022c30 	.word	0x48022c30
 8005a04:	48022c44 	.word	0x48022c44
 8005a08:	48022c58 	.word	0x48022c58
 8005a0c:	48022c6c 	.word	0x48022c6c
 8005a10:	48022c80 	.word	0x48022c80
 8005a14:	48022c94 	.word	0x48022c94
 8005a18:	58025408 	.word	0x58025408
 8005a1c:	5802541c 	.word	0x5802541c
 8005a20:	58025430 	.word	0x58025430
 8005a24:	58025444 	.word	0x58025444
 8005a28:	58025458 	.word	0x58025458
 8005a2c:	5802546c 	.word	0x5802546c
 8005a30:	58025480 	.word	0x58025480
 8005a34:	58025494 	.word	0x58025494

08005a38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a42      	ldr	r2, [pc, #264]	@ (8005b50 <DMA_CalcBaseAndBitshift+0x118>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d04a      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a41      	ldr	r2, [pc, #260]	@ (8005b54 <DMA_CalcBaseAndBitshift+0x11c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d045      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a3f      	ldr	r2, [pc, #252]	@ (8005b58 <DMA_CalcBaseAndBitshift+0x120>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d040      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a3e      	ldr	r2, [pc, #248]	@ (8005b5c <DMA_CalcBaseAndBitshift+0x124>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d03b      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b60 <DMA_CalcBaseAndBitshift+0x128>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d036      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a3b      	ldr	r2, [pc, #236]	@ (8005b64 <DMA_CalcBaseAndBitshift+0x12c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d031      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a39      	ldr	r2, [pc, #228]	@ (8005b68 <DMA_CalcBaseAndBitshift+0x130>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d02c      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a38      	ldr	r2, [pc, #224]	@ (8005b6c <DMA_CalcBaseAndBitshift+0x134>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d027      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a36      	ldr	r2, [pc, #216]	@ (8005b70 <DMA_CalcBaseAndBitshift+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a35      	ldr	r2, [pc, #212]	@ (8005b74 <DMA_CalcBaseAndBitshift+0x13c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d01d      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a33      	ldr	r2, [pc, #204]	@ (8005b78 <DMA_CalcBaseAndBitshift+0x140>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a32      	ldr	r2, [pc, #200]	@ (8005b7c <DMA_CalcBaseAndBitshift+0x144>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a30      	ldr	r2, [pc, #192]	@ (8005b80 <DMA_CalcBaseAndBitshift+0x148>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8005b84 <DMA_CalcBaseAndBitshift+0x14c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8005b88 <DMA_CalcBaseAndBitshift+0x150>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <DMA_CalcBaseAndBitshift+0xa8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2c      	ldr	r2, [pc, #176]	@ (8005b8c <DMA_CalcBaseAndBitshift+0x154>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d101      	bne.n	8005ae4 <DMA_CalcBaseAndBitshift+0xac>
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e000      	b.n	8005ae6 <DMA_CalcBaseAndBitshift+0xae>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d024      	beq.n	8005b34 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	3b10      	subs	r3, #16
 8005af2:	4a27      	ldr	r2, [pc, #156]	@ (8005b90 <DMA_CalcBaseAndBitshift+0x158>)
 8005af4:	fba2 2303 	umull	r2, r3, r2, r3
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	4a24      	ldr	r2, [pc, #144]	@ (8005b94 <DMA_CalcBaseAndBitshift+0x15c>)
 8005b04:	5cd3      	ldrb	r3, [r2, r3]
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d908      	bls.n	8005b24 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	4b1f      	ldr	r3, [pc, #124]	@ (8005b98 <DMA_CalcBaseAndBitshift+0x160>)
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	1d1a      	adds	r2, r3, #4
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b22:	e00d      	b.n	8005b40 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8005b98 <DMA_CalcBaseAndBitshift+0x160>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b32:	e005      	b.n	8005b40 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	40020010 	.word	0x40020010
 8005b54:	40020028 	.word	0x40020028
 8005b58:	40020040 	.word	0x40020040
 8005b5c:	40020058 	.word	0x40020058
 8005b60:	40020070 	.word	0x40020070
 8005b64:	40020088 	.word	0x40020088
 8005b68:	400200a0 	.word	0x400200a0
 8005b6c:	400200b8 	.word	0x400200b8
 8005b70:	40020410 	.word	0x40020410
 8005b74:	40020428 	.word	0x40020428
 8005b78:	40020440 	.word	0x40020440
 8005b7c:	40020458 	.word	0x40020458
 8005b80:	40020470 	.word	0x40020470
 8005b84:	40020488 	.word	0x40020488
 8005b88:	400204a0 	.word	0x400204a0
 8005b8c:	400204b8 	.word	0x400204b8
 8005b90:	aaaaaaab 	.word	0xaaaaaaab
 8005b94:	0800bf1c 	.word	0x0800bf1c
 8005b98:	fffffc00 	.word	0xfffffc00

08005b9c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d120      	bne.n	8005bf2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d858      	bhi.n	8005c6a <DMA_CheckFifoParam+0xce>
 8005bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc0 <DMA_CheckFifoParam+0x24>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005bd1 	.word	0x08005bd1
 8005bc4:	08005be3 	.word	0x08005be3
 8005bc8:	08005bd1 	.word	0x08005bd1
 8005bcc:	08005c6b 	.word	0x08005c6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d048      	beq.n	8005c6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005be0:	e045      	b.n	8005c6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005bea:	d142      	bne.n	8005c72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005bf0:	e03f      	b.n	8005c72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bfa:	d123      	bne.n	8005c44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	2b03      	cmp	r3, #3
 8005c02:	d838      	bhi.n	8005c76 <DMA_CheckFifoParam+0xda>
 8005c04:	a201      	add	r2, pc, #4	@ (adr r2, 8005c0c <DMA_CheckFifoParam+0x70>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c1d 	.word	0x08005c1d
 8005c10:	08005c23 	.word	0x08005c23
 8005c14:	08005c1d 	.word	0x08005c1d
 8005c18:	08005c35 	.word	0x08005c35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
        break;
 8005c20:	e030      	b.n	8005c84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d025      	beq.n	8005c7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c32:	e022      	b.n	8005c7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c3c:	d11f      	bne.n	8005c7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c42:	e01c      	b.n	8005c7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d902      	bls.n	8005c52 <DMA_CheckFifoParam+0xb6>
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d003      	beq.n	8005c58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005c50:	e018      	b.n	8005c84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	73fb      	strb	r3, [r7, #15]
        break;
 8005c56:	e015      	b.n	8005c84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00e      	beq.n	8005c82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	73fb      	strb	r3, [r7, #15]
    break;
 8005c68:	e00b      	b.n	8005c82 <DMA_CheckFifoParam+0xe6>
        break;
 8005c6a:	bf00      	nop
 8005c6c:	e00a      	b.n	8005c84 <DMA_CheckFifoParam+0xe8>
        break;
 8005c6e:	bf00      	nop
 8005c70:	e008      	b.n	8005c84 <DMA_CheckFifoParam+0xe8>
        break;
 8005c72:	bf00      	nop
 8005c74:	e006      	b.n	8005c84 <DMA_CheckFifoParam+0xe8>
        break;
 8005c76:	bf00      	nop
 8005c78:	e004      	b.n	8005c84 <DMA_CheckFifoParam+0xe8>
        break;
 8005c7a:	bf00      	nop
 8005c7c:	e002      	b.n	8005c84 <DMA_CheckFifoParam+0xe8>
        break;
 8005c7e:	bf00      	nop
 8005c80:	e000      	b.n	8005c84 <DMA_CheckFifoParam+0xe8>
    break;
 8005c82:	bf00      	nop
    }
  }

  return status;
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop

08005c94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a38      	ldr	r2, [pc, #224]	@ (8005d88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d022      	beq.n	8005cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a36      	ldr	r2, [pc, #216]	@ (8005d8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01d      	beq.n	8005cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a35      	ldr	r2, [pc, #212]	@ (8005d90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a33      	ldr	r2, [pc, #204]	@ (8005d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a32      	ldr	r2, [pc, #200]	@ (8005d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a30      	ldr	r2, [pc, #192]	@ (8005d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a2f      	ldr	r2, [pc, #188]	@ (8005da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a2d      	ldr	r2, [pc, #180]	@ (8005da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d101      	bne.n	8005cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e000      	b.n	8005cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01a      	beq.n	8005d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	3b08      	subs	r3, #8
 8005d04:	4a28      	ldr	r2, [pc, #160]	@ (8005da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005d06:	fba2 2303 	umull	r2, r3, r2, r3
 8005d0a:	091b      	lsrs	r3, r3, #4
 8005d0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4b26      	ldr	r3, [pc, #152]	@ (8005dac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005d12:	4413      	add	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	461a      	mov	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a24      	ldr	r2, [pc, #144]	@ (8005db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005d20:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	2201      	movs	r2, #1
 8005d2a:	409a      	lsls	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005d30:	e024      	b.n	8005d7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	3b10      	subs	r3, #16
 8005d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	@ (8005db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d806      	bhi.n	8005d5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d902      	bls.n	8005d5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3308      	adds	r3, #8
 8005d58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	461a      	mov	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a16      	ldr	r2, [pc, #88]	@ (8005dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005d6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 031f 	and.w	r3, r3, #31
 8005d74:	2201      	movs	r2, #1
 8005d76:	409a      	lsls	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	58025408 	.word	0x58025408
 8005d8c:	5802541c 	.word	0x5802541c
 8005d90:	58025430 	.word	0x58025430
 8005d94:	58025444 	.word	0x58025444
 8005d98:	58025458 	.word	0x58025458
 8005d9c:	5802546c 	.word	0x5802546c
 8005da0:	58025480 	.word	0x58025480
 8005da4:	58025494 	.word	0x58025494
 8005da8:	cccccccd 	.word	0xcccccccd
 8005dac:	16009600 	.word	0x16009600
 8005db0:	58025880 	.word	0x58025880
 8005db4:	aaaaaaab 	.word	0xaaaaaaab
 8005db8:	400204b8 	.word	0x400204b8
 8005dbc:	4002040f 	.word	0x4002040f
 8005dc0:	10008200 	.word	0x10008200
 8005dc4:	40020880 	.word	0x40020880

08005dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d04a      	beq.n	8005e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d847      	bhi.n	8005e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a25      	ldr	r2, [pc, #148]	@ (8005e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a24      	ldr	r2, [pc, #144]	@ (8005e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d01d      	beq.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a22      	ldr	r2, [pc, #136]	@ (8005e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a21      	ldr	r2, [pc, #132]	@ (8005e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1f      	ldr	r2, [pc, #124]	@ (8005e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1e      	ldr	r2, [pc, #120]	@ (8005e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1c      	ldr	r2, [pc, #112]	@ (8005e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8005e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d101      	bne.n	8005e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00a      	beq.n	8005e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4b17      	ldr	r3, [pc, #92]	@ (8005ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a15      	ldr	r2, [pc, #84]	@ (8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005e50:	671a      	str	r2, [r3, #112]	@ 0x70
 8005e52:	e009      	b.n	8005e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4b14      	ldr	r3, [pc, #80]	@ (8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a11      	ldr	r2, [pc, #68]	@ (8005eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005e66:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	409a      	lsls	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005e74:	bf00      	nop
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	58025408 	.word	0x58025408
 8005e84:	5802541c 	.word	0x5802541c
 8005e88:	58025430 	.word	0x58025430
 8005e8c:	58025444 	.word	0x58025444
 8005e90:	58025458 	.word	0x58025458
 8005e94:	5802546c 	.word	0x5802546c
 8005e98:	58025480 	.word	0x58025480
 8005e9c:	58025494 	.word	0x58025494
 8005ea0:	1600963f 	.word	0x1600963f
 8005ea4:	58025940 	.word	0x58025940
 8005ea8:	1000823f 	.word	0x1000823f
 8005eac:	40020940 	.word	0x40020940

08005eb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b089      	sub	sp, #36	@ 0x24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ebe:	4b89      	ldr	r3, [pc, #548]	@ (80060e4 <HAL_GPIO_Init+0x234>)
 8005ec0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ec2:	e194      	b.n	80061ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	2101      	movs	r1, #1
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 8186 	beq.w	80061e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d005      	beq.n	8005ef4 <HAL_GPIO_Init+0x44>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d130      	bne.n	8005f56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	2203      	movs	r2, #3
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f32:	43db      	mvns	r3, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	4013      	ands	r3, r2
 8005f38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	f003 0201 	and.w	r2, r3, #1
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	fa02 f303 	lsl.w	r3, r2, r3
 8005f4a:	69ba      	ldr	r2, [r7, #24]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d017      	beq.n	8005f92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f72:	43db      	mvns	r3, r3
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	4013      	ands	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d123      	bne.n	8005fe6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	08da      	lsrs	r2, r3, #3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3208      	adds	r2, #8
 8005fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	220f      	movs	r2, #15
 8005fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fba:	43db      	mvns	r3, r3
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	691a      	ldr	r2, [r3, #16]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	08da      	lsrs	r2, r3, #3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3208      	adds	r2, #8
 8005fe0:	69b9      	ldr	r1, [r7, #24]
 8005fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	f003 0203 	and.w	r2, r3, #3
 8006006:	69fb      	ldr	r3, [r7, #28]
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4313      	orrs	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006022:	2b00      	cmp	r3, #0
 8006024:	f000 80e0 	beq.w	80061e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006028:	4b2f      	ldr	r3, [pc, #188]	@ (80060e8 <HAL_GPIO_Init+0x238>)
 800602a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800602e:	4a2e      	ldr	r2, [pc, #184]	@ (80060e8 <HAL_GPIO_Init+0x238>)
 8006030:	f043 0302 	orr.w	r3, r3, #2
 8006034:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006038:	4b2b      	ldr	r3, [pc, #172]	@ (80060e8 <HAL_GPIO_Init+0x238>)
 800603a:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006046:	4a29      	ldr	r2, [pc, #164]	@ (80060ec <HAL_GPIO_Init+0x23c>)
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	089b      	lsrs	r3, r3, #2
 800604c:	3302      	adds	r3, #2
 800604e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	220f      	movs	r2, #15
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	43db      	mvns	r3, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4013      	ands	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a20      	ldr	r2, [pc, #128]	@ (80060f0 <HAL_GPIO_Init+0x240>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d052      	beq.n	8006118 <HAL_GPIO_Init+0x268>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a1f      	ldr	r2, [pc, #124]	@ (80060f4 <HAL_GPIO_Init+0x244>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d031      	beq.n	80060de <HAL_GPIO_Init+0x22e>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1e      	ldr	r2, [pc, #120]	@ (80060f8 <HAL_GPIO_Init+0x248>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d02b      	beq.n	80060da <HAL_GPIO_Init+0x22a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1d      	ldr	r2, [pc, #116]	@ (80060fc <HAL_GPIO_Init+0x24c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d025      	beq.n	80060d6 <HAL_GPIO_Init+0x226>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1c      	ldr	r2, [pc, #112]	@ (8006100 <HAL_GPIO_Init+0x250>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01f      	beq.n	80060d2 <HAL_GPIO_Init+0x222>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1b      	ldr	r2, [pc, #108]	@ (8006104 <HAL_GPIO_Init+0x254>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d019      	beq.n	80060ce <HAL_GPIO_Init+0x21e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1a      	ldr	r2, [pc, #104]	@ (8006108 <HAL_GPIO_Init+0x258>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <HAL_GPIO_Init+0x21a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a19      	ldr	r2, [pc, #100]	@ (800610c <HAL_GPIO_Init+0x25c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00d      	beq.n	80060c6 <HAL_GPIO_Init+0x216>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a18      	ldr	r2, [pc, #96]	@ (8006110 <HAL_GPIO_Init+0x260>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d007      	beq.n	80060c2 <HAL_GPIO_Init+0x212>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a17      	ldr	r2, [pc, #92]	@ (8006114 <HAL_GPIO_Init+0x264>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d101      	bne.n	80060be <HAL_GPIO_Init+0x20e>
 80060ba:	2309      	movs	r3, #9
 80060bc:	e02d      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060be:	230a      	movs	r3, #10
 80060c0:	e02b      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060c2:	2308      	movs	r3, #8
 80060c4:	e029      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060c6:	2307      	movs	r3, #7
 80060c8:	e027      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060ca:	2306      	movs	r3, #6
 80060cc:	e025      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060ce:	2305      	movs	r3, #5
 80060d0:	e023      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060d2:	2304      	movs	r3, #4
 80060d4:	e021      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060d6:	2303      	movs	r3, #3
 80060d8:	e01f      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060da:	2302      	movs	r3, #2
 80060dc:	e01d      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060de:	2301      	movs	r3, #1
 80060e0:	e01b      	b.n	800611a <HAL_GPIO_Init+0x26a>
 80060e2:	bf00      	nop
 80060e4:	58000080 	.word	0x58000080
 80060e8:	58024400 	.word	0x58024400
 80060ec:	58000400 	.word	0x58000400
 80060f0:	58020000 	.word	0x58020000
 80060f4:	58020400 	.word	0x58020400
 80060f8:	58020800 	.word	0x58020800
 80060fc:	58020c00 	.word	0x58020c00
 8006100:	58021000 	.word	0x58021000
 8006104:	58021400 	.word	0x58021400
 8006108:	58021800 	.word	0x58021800
 800610c:	58021c00 	.word	0x58021c00
 8006110:	58022000 	.word	0x58022000
 8006114:	58022400 	.word	0x58022400
 8006118:	2300      	movs	r3, #0
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	f002 0203 	and.w	r2, r2, #3
 8006120:	0092      	lsls	r2, r2, #2
 8006122:	4093      	lsls	r3, r2
 8006124:	69ba      	ldr	r2, [r7, #24]
 8006126:	4313      	orrs	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800612a:	4938      	ldr	r1, [pc, #224]	@ (800620c <HAL_GPIO_Init+0x35c>)
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	089b      	lsrs	r3, r3, #2
 8006130:	3302      	adds	r3, #2
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	43db      	mvns	r3, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	4013      	ands	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800615e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	43db      	mvns	r3, r3
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	4013      	ands	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800618c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	43db      	mvns	r3, r3
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	4013      	ands	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d003      	beq.n	80061b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	43db      	mvns	r3, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4013      	ands	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	3301      	adds	r3, #1
 80061ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	fa22 f303 	lsr.w	r3, r2, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	f47f ae63 	bne.w	8005ec4 <HAL_GPIO_Init+0x14>
  }
}
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
 8006202:	3724      	adds	r7, #36	@ 0x24
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	58000400 	.word	0x58000400

08006210 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	460b      	mov	r3, r1
 800621a:	807b      	strh	r3, [r7, #2]
 800621c:	4613      	mov	r3, r2
 800621e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006220:	787b      	ldrb	r3, [r7, #1]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006226:	887a      	ldrh	r2, [r7, #2]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800622c:	e003      	b.n	8006236 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800622e:	887b      	ldrh	r3, [r7, #2]
 8006230:	041a      	lsls	r2, r3, #16
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	619a      	str	r2, [r3, #24]
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8006248:	4b05      	ldr	r3, [pc, #20]	@ (8006260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a04      	ldr	r2, [pc, #16]	@ (8006260 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800624e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006252:	6013      	str	r3, [r2, #0]
}
 8006254:	bf00      	nop
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	58024800 	.word	0x58024800

08006264 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800626c:	4b29      	ldr	r3, [pc, #164]	@ (8006314 <HAL_PWREx_ConfigSupply+0xb0>)
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0307 	and.w	r3, r3, #7
 8006274:	2b06      	cmp	r3, #6
 8006276:	d00a      	beq.n	800628e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006278:	4b26      	ldr	r3, [pc, #152]	@ (8006314 <HAL_PWREx_ConfigSupply+0xb0>)
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	429a      	cmp	r2, r3
 8006284:	d001      	beq.n	800628a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e040      	b.n	800630c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e03e      	b.n	800630c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800628e:	4b21      	ldr	r3, [pc, #132]	@ (8006314 <HAL_PWREx_ConfigSupply+0xb0>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8006296:	491f      	ldr	r1, [pc, #124]	@ (8006314 <HAL_PWREx_ConfigSupply+0xb0>)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4313      	orrs	r3, r2
 800629c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800629e:	f7fb f8af 	bl	8001400 <HAL_GetTick>
 80062a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062a4:	e009      	b.n	80062ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062a6:	f7fb f8ab 	bl	8001400 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062b4:	d901      	bls.n	80062ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e028      	b.n	800630c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062ba:	4b16      	ldr	r3, [pc, #88]	@ (8006314 <HAL_PWREx_ConfigSupply+0xb0>)
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062c6:	d1ee      	bne.n	80062a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b1e      	cmp	r3, #30
 80062cc:	d008      	beq.n	80062e0 <HAL_PWREx_ConfigSupply+0x7c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80062d2:	d005      	beq.n	80062e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b1d      	cmp	r3, #29
 80062d8:	d002      	beq.n	80062e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b2d      	cmp	r3, #45	@ 0x2d
 80062de:	d114      	bne.n	800630a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80062e0:	f7fb f88e 	bl	8001400 <HAL_GetTick>
 80062e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062e6:	e009      	b.n	80062fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062e8:	f7fb f88a 	bl	8001400 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062f6:	d901      	bls.n	80062fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e007      	b.n	800630c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80062fc:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <HAL_PWREx_ConfigSupply+0xb0>)
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006308:	d1ee      	bne.n	80062e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	58024800 	.word	0x58024800

08006318 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b08c      	sub	sp, #48	@ 0x30
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	f000 bc1f 	b.w	8006b6a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80b3 	beq.w	80064a0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800633a:	4b95      	ldr	r3, [pc, #596]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006344:	4b92      	ldr	r3, [pc, #584]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006348:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800634a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634c:	2b10      	cmp	r3, #16
 800634e:	d007      	beq.n	8006360 <HAL_RCC_OscConfig+0x48>
 8006350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006352:	2b18      	cmp	r3, #24
 8006354:	d112      	bne.n	800637c <HAL_RCC_OscConfig+0x64>
 8006356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006358:	f003 0303 	and.w	r3, r3, #3
 800635c:	2b02      	cmp	r3, #2
 800635e:	d10d      	bne.n	800637c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006360:	4b8b      	ldr	r3, [pc, #556]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006368:	2b00      	cmp	r3, #0
 800636a:	f000 8098 	beq.w	800649e <HAL_RCC_OscConfig+0x186>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f040 8093 	bne.w	800649e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e3f6      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006384:	d106      	bne.n	8006394 <HAL_RCC_OscConfig+0x7c>
 8006386:	4b82      	ldr	r3, [pc, #520]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a81      	ldr	r2, [pc, #516]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800638c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006390:	6013      	str	r3, [r2, #0]
 8006392:	e058      	b.n	8006446 <HAL_RCC_OscConfig+0x12e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d112      	bne.n	80063c2 <HAL_RCC_OscConfig+0xaa>
 800639c:	4b7c      	ldr	r3, [pc, #496]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a7b      	ldr	r2, [pc, #492]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	4b79      	ldr	r3, [pc, #484]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a78      	ldr	r2, [pc, #480]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b76      	ldr	r3, [pc, #472]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a75      	ldr	r2, [pc, #468]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	e041      	b.n	8006446 <HAL_RCC_OscConfig+0x12e>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063ca:	d112      	bne.n	80063f2 <HAL_RCC_OscConfig+0xda>
 80063cc:	4b70      	ldr	r3, [pc, #448]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a6f      	ldr	r2, [pc, #444]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	4b6d      	ldr	r3, [pc, #436]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a6c      	ldr	r2, [pc, #432]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063de:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80063e2:	6013      	str	r3, [r2, #0]
 80063e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a69      	ldr	r2, [pc, #420]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	e029      	b.n	8006446 <HAL_RCC_OscConfig+0x12e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80063fa:	d112      	bne.n	8006422 <HAL_RCC_OscConfig+0x10a>
 80063fc:	4b64      	ldr	r3, [pc, #400]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a63      	ldr	r2, [pc, #396]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006402:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	4b61      	ldr	r3, [pc, #388]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a60      	ldr	r2, [pc, #384]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800640e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	4b5e      	ldr	r3, [pc, #376]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5d      	ldr	r2, [pc, #372]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800641a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	e011      	b.n	8006446 <HAL_RCC_OscConfig+0x12e>
 8006422:	4b5b      	ldr	r3, [pc, #364]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a5a      	ldr	r2, [pc, #360]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006428:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	4b58      	ldr	r3, [pc, #352]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a57      	ldr	r2, [pc, #348]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006434:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	4b55      	ldr	r3, [pc, #340]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a54      	ldr	r2, [pc, #336]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006440:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006444:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d013      	beq.n	8006476 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644e:	f7fa ffd7 	bl	8001400 <HAL_GetTick>
 8006452:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006456:	f7fa ffd3 	bl	8001400 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b64      	cmp	r3, #100	@ 0x64
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e380      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006468:	4b49      	ldr	r3, [pc, #292]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x13e>
 8006474:	e014      	b.n	80064a0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006476:	f7fa ffc3 	bl	8001400 <HAL_GetTick>
 800647a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800647c:	e008      	b.n	8006490 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800647e:	f7fa ffbf 	bl	8001400 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b64      	cmp	r3, #100	@ 0x64
 800648a:	d901      	bls.n	8006490 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e36c      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006490:	4b3f      	ldr	r3, [pc, #252]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1f0      	bne.n	800647e <HAL_RCC_OscConfig+0x166>
 800649c:	e000      	b.n	80064a0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800649e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 808c 	beq.w	80065c6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ae:	4b38      	ldr	r3, [pc, #224]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064b8:	4b35      	ldr	r3, [pc, #212]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80064ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064bc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <HAL_RCC_OscConfig+0x1bc>
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	2b18      	cmp	r3, #24
 80064c8:	d137      	bne.n	800653a <HAL_RCC_OscConfig+0x222>
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f003 0303 	and.w	r3, r3, #3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d132      	bne.n	800653a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_RCC_OscConfig+0x1d4>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e33e      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064ec:	4b28      	ldr	r3, [pc, #160]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f023 0219 	bic.w	r2, r3, #25
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	4925      	ldr	r1, [pc, #148]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fe:	f7fa ff7f 	bl	8001400 <HAL_GetTick>
 8006502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006506:	f7fa ff7b 	bl	8001400 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e328      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006518:	4b1d      	ldr	r3, [pc, #116]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006524:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	061b      	lsls	r3, r3, #24
 8006532:	4917      	ldr	r1, [pc, #92]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006534:	4313      	orrs	r3, r2
 8006536:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006538:	e045      	b.n	80065c6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d028      	beq.n	8006594 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006542:	4b13      	ldr	r3, [pc, #76]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f023 0219 	bic.w	r2, r3, #25
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	4910      	ldr	r1, [pc, #64]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006550:	4313      	orrs	r3, r2
 8006552:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006554:	f7fa ff54 	bl	8001400 <HAL_GetTick>
 8006558:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655c:	f7fa ff50 	bl	8001400 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e2fd      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800656e:	4b08      	ldr	r3, [pc, #32]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0304 	and.w	r3, r3, #4
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800657a:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	061b      	lsls	r3, r3, #24
 8006588:	4901      	ldr	r1, [pc, #4]	@ (8006590 <HAL_RCC_OscConfig+0x278>)
 800658a:	4313      	orrs	r3, r2
 800658c:	604b      	str	r3, [r1, #4]
 800658e:	e01a      	b.n	80065c6 <HAL_RCC_OscConfig+0x2ae>
 8006590:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006594:	4b97      	ldr	r3, [pc, #604]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a96      	ldr	r2, [pc, #600]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a0:	f7fa ff2e 	bl	8001400 <HAL_GetTick>
 80065a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065a6:	e008      	b.n	80065ba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a8:	f7fa ff2a 	bl	8001400 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d901      	bls.n	80065ba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e2d7      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065ba:	4b8e      	ldr	r3, [pc, #568]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0304 	and.w	r3, r3, #4
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1f0      	bne.n	80065a8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d06a      	beq.n	80066a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d2:	4b88      	ldr	r3, [pc, #544]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80065da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065dc:	4b85      	ldr	r3, [pc, #532]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80065de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d007      	beq.n	80065f8 <HAL_RCC_OscConfig+0x2e0>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	2b18      	cmp	r3, #24
 80065ec:	d11b      	bne.n	8006626 <HAL_RCC_OscConfig+0x30e>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f003 0303 	and.w	r3, r3, #3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d116      	bne.n	8006626 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065f8:	4b7e      	ldr	r3, [pc, #504]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_RCC_OscConfig+0x2f8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69db      	ldr	r3, [r3, #28]
 8006608:	2b80      	cmp	r3, #128	@ 0x80
 800660a:	d001      	beq.n	8006610 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e2ac      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006610:	4b78      	ldr	r3, [pc, #480]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	4975      	ldr	r1, [pc, #468]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006620:	4313      	orrs	r3, r2
 8006622:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006624:	e040      	b.n	80066a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d023      	beq.n	8006676 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800662e:	4b71      	ldr	r3, [pc, #452]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a70      	ldr	r2, [pc, #448]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006634:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663a:	f7fa fee1 	bl	8001400 <HAL_GetTick>
 800663e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006642:	f7fa fedd 	bl	8001400 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e28a      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006654:	4b67      	ldr	r3, [pc, #412]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0f0      	beq.n	8006642 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006660:	4b64      	ldr	r3, [pc, #400]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	4961      	ldr	r1, [pc, #388]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006670:	4313      	orrs	r3, r2
 8006672:	60cb      	str	r3, [r1, #12]
 8006674:	e018      	b.n	80066a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006676:	4b5f      	ldr	r3, [pc, #380]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5e      	ldr	r2, [pc, #376]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 800667c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006682:	f7fa febd 	bl	8001400 <HAL_GetTick>
 8006686:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006688:	e008      	b.n	800669c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800668a:	f7fa feb9 	bl	8001400 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d901      	bls.n	800669c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e266      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800669c:	4b55      	ldr	r3, [pc, #340]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f0      	bne.n	800668a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d036      	beq.n	8006722 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d019      	beq.n	80066f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066bc:	4b4d      	ldr	r3, [pc, #308]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80066be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066c0:	4a4c      	ldr	r2, [pc, #304]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80066c2:	f043 0301 	orr.w	r3, r3, #1
 80066c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c8:	f7fa fe9a 	bl	8001400 <HAL_GetTick>
 80066cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066d0:	f7fa fe96 	bl	8001400 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e243      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80066e2:	4b44      	ldr	r3, [pc, #272]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80066e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e6:	f003 0302 	and.w	r3, r3, #2
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCC_OscConfig+0x3b8>
 80066ee:	e018      	b.n	8006722 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066f0:	4b40      	ldr	r3, [pc, #256]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80066f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066f4:	4a3f      	ldr	r2, [pc, #252]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80066f6:	f023 0301 	bic.w	r3, r3, #1
 80066fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fc:	f7fa fe80 	bl	8001400 <HAL_GetTick>
 8006700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006704:	f7fa fe7c 	bl	8001400 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e229      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006716:	4b37      	ldr	r3, [pc, #220]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f0      	bne.n	8006704 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0320 	and.w	r3, r3, #32
 800672a:	2b00      	cmp	r3, #0
 800672c:	d036      	beq.n	800679c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d019      	beq.n	800676a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006736:	4b2f      	ldr	r3, [pc, #188]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2e      	ldr	r2, [pc, #184]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 800673c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006742:	f7fa fe5d 	bl	8001400 <HAL_GetTick>
 8006746:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800674a:	f7fa fe59 	bl	8001400 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e206      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800675c:	4b25      	ldr	r3, [pc, #148]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCC_OscConfig+0x432>
 8006768:	e018      	b.n	800679c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800676a:	4b22      	ldr	r3, [pc, #136]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a21      	ldr	r2, [pc, #132]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006770:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006774:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006776:	f7fa fe43 	bl	8001400 <HAL_GetTick>
 800677a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800677e:	f7fa fe3f 	bl	8001400 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e1ec      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006790:	4b18      	ldr	r3, [pc, #96]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f0      	bne.n	800677e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 80af 	beq.w	8006908 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80067aa:	4b13      	ldr	r3, [pc, #76]	@ (80067f8 <HAL_RCC_OscConfig+0x4e0>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a12      	ldr	r2, [pc, #72]	@ (80067f8 <HAL_RCC_OscConfig+0x4e0>)
 80067b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067b6:	f7fa fe23 	bl	8001400 <HAL_GetTick>
 80067ba:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067bc:	e008      	b.n	80067d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067be:	f7fa fe1f 	bl	8001400 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b64      	cmp	r3, #100	@ 0x64
 80067ca:	d901      	bls.n	80067d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e1cc      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d0:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <HAL_RCC_OscConfig+0x4e0>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0f0      	beq.n	80067be <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d10b      	bne.n	80067fc <HAL_RCC_OscConfig+0x4e4>
 80067e4:	4b03      	ldr	r3, [pc, #12]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80067e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e8:	4a02      	ldr	r2, [pc, #8]	@ (80067f4 <HAL_RCC_OscConfig+0x4dc>)
 80067ea:	f043 0301 	orr.w	r3, r3, #1
 80067ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80067f0:	e05b      	b.n	80068aa <HAL_RCC_OscConfig+0x592>
 80067f2:	bf00      	nop
 80067f4:	58024400 	.word	0x58024400
 80067f8:	58024800 	.word	0x58024800
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d112      	bne.n	800682a <HAL_RCC_OscConfig+0x512>
 8006804:	4b9d      	ldr	r3, [pc, #628]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006808:	4a9c      	ldr	r2, [pc, #624]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 800680a:	f023 0301 	bic.w	r3, r3, #1
 800680e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006810:	4b9a      	ldr	r3, [pc, #616]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006814:	4a99      	ldr	r2, [pc, #612]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800681a:	6713      	str	r3, [r2, #112]	@ 0x70
 800681c:	4b97      	ldr	r3, [pc, #604]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 800681e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006820:	4a96      	ldr	r2, [pc, #600]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006822:	f023 0304 	bic.w	r3, r3, #4
 8006826:	6713      	str	r3, [r2, #112]	@ 0x70
 8006828:	e03f      	b.n	80068aa <HAL_RCC_OscConfig+0x592>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b05      	cmp	r3, #5
 8006830:	d112      	bne.n	8006858 <HAL_RCC_OscConfig+0x540>
 8006832:	4b92      	ldr	r3, [pc, #584]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006836:	4a91      	ldr	r2, [pc, #580]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006838:	f043 0304 	orr.w	r3, r3, #4
 800683c:	6713      	str	r3, [r2, #112]	@ 0x70
 800683e:	4b8f      	ldr	r3, [pc, #572]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006842:	4a8e      	ldr	r2, [pc, #568]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006848:	6713      	str	r3, [r2, #112]	@ 0x70
 800684a:	4b8c      	ldr	r3, [pc, #560]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 800684c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684e:	4a8b      	ldr	r2, [pc, #556]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006850:	f043 0301 	orr.w	r3, r3, #1
 8006854:	6713      	str	r3, [r2, #112]	@ 0x70
 8006856:	e028      	b.n	80068aa <HAL_RCC_OscConfig+0x592>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b85      	cmp	r3, #133	@ 0x85
 800685e:	d112      	bne.n	8006886 <HAL_RCC_OscConfig+0x56e>
 8006860:	4b86      	ldr	r3, [pc, #536]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006864:	4a85      	ldr	r2, [pc, #532]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006866:	f043 0304 	orr.w	r3, r3, #4
 800686a:	6713      	str	r3, [r2, #112]	@ 0x70
 800686c:	4b83      	ldr	r3, [pc, #524]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 800686e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006870:	4a82      	ldr	r2, [pc, #520]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006876:	6713      	str	r3, [r2, #112]	@ 0x70
 8006878:	4b80      	ldr	r3, [pc, #512]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	4a7f      	ldr	r2, [pc, #508]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	6713      	str	r3, [r2, #112]	@ 0x70
 8006884:	e011      	b.n	80068aa <HAL_RCC_OscConfig+0x592>
 8006886:	4b7d      	ldr	r3, [pc, #500]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800688a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 800688c:	f023 0301 	bic.w	r3, r3, #1
 8006890:	6713      	str	r3, [r2, #112]	@ 0x70
 8006892:	4b7a      	ldr	r3, [pc, #488]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006896:	4a79      	ldr	r2, [pc, #484]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006898:	f023 0304 	bic.w	r3, r3, #4
 800689c:	6713      	str	r3, [r2, #112]	@ 0x70
 800689e:	4b77      	ldr	r3, [pc, #476]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80068a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a2:	4a76      	ldr	r2, [pc, #472]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80068a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068a8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d015      	beq.n	80068de <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b2:	f7fa fda5 	bl	8001400 <HAL_GetTick>
 80068b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068b8:	e00a      	b.n	80068d0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ba:	f7fa fda1 	bl	8001400 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e14c      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068d0:	4b6a      	ldr	r3, [pc, #424]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80068d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d4:	f003 0302 	and.w	r3, r3, #2
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d0ee      	beq.n	80068ba <HAL_RCC_OscConfig+0x5a2>
 80068dc:	e014      	b.n	8006908 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068de:	f7fa fd8f 	bl	8001400 <HAL_GetTick>
 80068e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068e4:	e00a      	b.n	80068fc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e6:	f7fa fd8b 	bl	8001400 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e136      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80068fc:	4b5f      	ldr	r3, [pc, #380]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80068fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1ee      	bne.n	80068e6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	2b00      	cmp	r3, #0
 800690e:	f000 812b 	beq.w	8006b68 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006912:	4b5a      	ldr	r3, [pc, #360]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800691a:	2b18      	cmp	r3, #24
 800691c:	f000 80bb 	beq.w	8006a96 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006924:	2b02      	cmp	r3, #2
 8006926:	f040 8095 	bne.w	8006a54 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800692a:	4b54      	ldr	r3, [pc, #336]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a53      	ldr	r2, [pc, #332]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006930:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006936:	f7fa fd63 	bl	8001400 <HAL_GetTick>
 800693a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800693e:	f7fa fd5f 	bl	8001400 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e10c      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006950:	4b4a      	ldr	r3, [pc, #296]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d1f0      	bne.n	800693e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800695c:	4b47      	ldr	r3, [pc, #284]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 800695e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006960:	4b47      	ldr	r3, [pc, #284]	@ (8006a80 <HAL_RCC_OscConfig+0x768>)
 8006962:	4013      	ands	r3, r2
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800696c:	0112      	lsls	r2, r2, #4
 800696e:	430a      	orrs	r2, r1
 8006970:	4942      	ldr	r1, [pc, #264]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006972:	4313      	orrs	r3, r2
 8006974:	628b      	str	r3, [r1, #40]	@ 0x28
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697a:	3b01      	subs	r3, #1
 800697c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006984:	3b01      	subs	r3, #1
 8006986:	025b      	lsls	r3, r3, #9
 8006988:	b29b      	uxth	r3, r3
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006990:	3b01      	subs	r3, #1
 8006992:	041b      	lsls	r3, r3, #16
 8006994:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800699e:	3b01      	subs	r3, #1
 80069a0:	061b      	lsls	r3, r3, #24
 80069a2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80069a6:	4935      	ldr	r1, [pc, #212]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80069ac:	4b33      	ldr	r3, [pc, #204]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	4a32      	ldr	r2, [pc, #200]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069b8:	4b30      	ldr	r3, [pc, #192]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069bc:	4b31      	ldr	r3, [pc, #196]	@ (8006a84 <HAL_RCC_OscConfig+0x76c>)
 80069be:	4013      	ands	r3, r2
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80069c4:	00d2      	lsls	r2, r2, #3
 80069c6:	492d      	ldr	r1, [pc, #180]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80069cc:	4b2b      	ldr	r3, [pc, #172]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d0:	f023 020c 	bic.w	r2, r3, #12
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d8:	4928      	ldr	r1, [pc, #160]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80069de:	4b27      	ldr	r3, [pc, #156]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e2:	f023 0202 	bic.w	r2, r3, #2
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	4924      	ldr	r1, [pc, #144]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80069f0:	4b22      	ldr	r3, [pc, #136]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f4:	4a21      	ldr	r2, [pc, #132]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069fc:	4b1f      	ldr	r3, [pc, #124]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 80069fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a00:	4a1e      	ldr	r2, [pc, #120]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006a08:	4b1c      	ldr	r3, [pc, #112]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006a14:	4b19      	ldr	r3, [pc, #100]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	4a18      	ldr	r2, [pc, #96]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a20:	4b16      	ldr	r3, [pc, #88]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a15      	ldr	r2, [pc, #84]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fa fce8 	bl	8001400 <HAL_GetTick>
 8006a30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fa fce4 	bl	8001400 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e091      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006a46:	4b0d      	ldr	r3, [pc, #52]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x71c>
 8006a52:	e089      	b.n	8006b68 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a54:	4b09      	ldr	r3, [pc, #36]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a08      	ldr	r2, [pc, #32]	@ (8006a7c <HAL_RCC_OscConfig+0x764>)
 8006a5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fa fcce 	bl	8001400 <HAL_GetTick>
 8006a64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a66:	e00f      	b.n	8006a88 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a68:	f7fa fcca 	bl	8001400 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d908      	bls.n	8006a88 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e077      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
 8006a7a:	bf00      	nop
 8006a7c:	58024400 	.word	0x58024400
 8006a80:	fffffc0c 	.word	0xfffffc0c
 8006a84:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a88:	4b3a      	ldr	r3, [pc, #232]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e9      	bne.n	8006a68 <HAL_RCC_OscConfig+0x750>
 8006a94:	e068      	b.n	8006b68 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006a96:	4b37      	ldr	r3, [pc, #220]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006a9c:	4b35      	ldr	r3, [pc, #212]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d031      	beq.n	8006b0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f003 0203 	and.w	r2, r3, #3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d12a      	bne.n	8006b0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d122      	bne.n	8006b0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d11a      	bne.n	8006b0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	0a5b      	lsrs	r3, r3, #9
 8006adc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d111      	bne.n	8006b0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d108      	bne.n	8006b0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	0e1b      	lsrs	r3, r3, #24
 8006b00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d001      	beq.n	8006b12 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e02b      	b.n	8006b6a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006b12:	4b18      	ldr	r3, [pc, #96]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b16:	08db      	lsrs	r3, r3, #3
 8006b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b1c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d01f      	beq.n	8006b68 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006b28:	4b12      	ldr	r3, [pc, #72]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b2c:	4a11      	ldr	r2, [pc, #68]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006b2e:	f023 0301 	bic.w	r3, r3, #1
 8006b32:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b34:	f7fa fc64 	bl	8001400 <HAL_GetTick>
 8006b38:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006b3a:	bf00      	nop
 8006b3c:	f7fa fc60 	bl	8001400 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d0f9      	beq.n	8006b3c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006b48:	4b0a      	ldr	r3, [pc, #40]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006b4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <HAL_RCC_OscConfig+0x860>)
 8006b4e:	4013      	ands	r3, r2
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b54:	00d2      	lsls	r2, r2, #3
 8006b56:	4907      	ldr	r1, [pc, #28]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006b5c:	4b05      	ldr	r3, [pc, #20]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	4a04      	ldr	r2, [pc, #16]	@ (8006b74 <HAL_RCC_OscConfig+0x85c>)
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3730      	adds	r7, #48	@ 0x30
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	58024400 	.word	0x58024400
 8006b78:	ffff0007 	.word	0xffff0007

08006b7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e19c      	b.n	8006eca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b90:	4b8a      	ldr	r3, [pc, #552]	@ (8006dbc <HAL_RCC_ClockConfig+0x240>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 030f 	and.w	r3, r3, #15
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d910      	bls.n	8006bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9e:	4b87      	ldr	r3, [pc, #540]	@ (8006dbc <HAL_RCC_ClockConfig+0x240>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f023 020f 	bic.w	r2, r3, #15
 8006ba6:	4985      	ldr	r1, [pc, #532]	@ (8006dbc <HAL_RCC_ClockConfig+0x240>)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bae:	4b83      	ldr	r3, [pc, #524]	@ (8006dbc <HAL_RCC_ClockConfig+0x240>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	683a      	ldr	r2, [r7, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d001      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e184      	b.n	8006eca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d010      	beq.n	8006bee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	4b7b      	ldr	r3, [pc, #492]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d908      	bls.n	8006bee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006bdc:	4b78      	ldr	r3, [pc, #480]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	4975      	ldr	r1, [pc, #468]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d010      	beq.n	8006c1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	4b70      	ldr	r3, [pc, #448]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d908      	bls.n	8006c1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	496a      	ldr	r1, [pc, #424]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0310 	and.w	r3, r3, #16
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d010      	beq.n	8006c4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699a      	ldr	r2, [r3, #24]
 8006c2c:	4b64      	ldr	r3, [pc, #400]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d908      	bls.n	8006c4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c38:	4b61      	ldr	r3, [pc, #388]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	495e      	ldr	r1, [pc, #376]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d010      	beq.n	8006c78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69da      	ldr	r2, [r3, #28]
 8006c5a:	4b59      	ldr	r3, [pc, #356]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d908      	bls.n	8006c78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006c66:	4b56      	ldr	r3, [pc, #344]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	4953      	ldr	r1, [pc, #332]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d010      	beq.n	8006ca6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	4b4d      	ldr	r3, [pc, #308]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	699b      	ldr	r3, [r3, #24]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d908      	bls.n	8006ca6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c94:	4b4a      	ldr	r3, [pc, #296]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f023 020f 	bic.w	r2, r3, #15
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	4947      	ldr	r1, [pc, #284]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d055      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006cb2:	4b43      	ldr	r3, [pc, #268]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	4940      	ldr	r1, [pc, #256]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d107      	bne.n	8006cdc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d121      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0f6      	b.n	8006eca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d107      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ce4:	4b36      	ldr	r3, [pc, #216]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d115      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0ea      	b.n	8006eca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006cfc:	4b30      	ldr	r3, [pc, #192]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0de      	b.n	8006eca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0304 	and.w	r3, r3, #4
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e0d6      	b.n	8006eca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d1c:	4b28      	ldr	r3, [pc, #160]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	f023 0207 	bic.w	r2, r3, #7
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	4925      	ldr	r1, [pc, #148]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d2e:	f7fa fb67 	bl	8001400 <HAL_GetTick>
 8006d32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d34:	e00a      	b.n	8006d4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d36:	f7fa fb63 	bl	8001400 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e0be      	b.n	8006eca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d1eb      	bne.n	8006d36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d010      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	4b14      	ldr	r3, [pc, #80]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d208      	bcs.n	8006d8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d7a:	4b11      	ldr	r3, [pc, #68]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	f023 020f 	bic.w	r2, r3, #15
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	490e      	ldr	r1, [pc, #56]	@ (8006dc0 <HAL_RCC_ClockConfig+0x244>)
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dbc <HAL_RCC_ClockConfig+0x240>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d214      	bcs.n	8006dc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9a:	4b08      	ldr	r3, [pc, #32]	@ (8006dbc <HAL_RCC_ClockConfig+0x240>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f023 020f 	bic.w	r2, r3, #15
 8006da2:	4906      	ldr	r1, [pc, #24]	@ (8006dbc <HAL_RCC_ClockConfig+0x240>)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	4b04      	ldr	r3, [pc, #16]	@ (8006dbc <HAL_RCC_ClockConfig+0x240>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d005      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e086      	b.n	8006eca <HAL_RCC_ClockConfig+0x34e>
 8006dbc:	52002000 	.word	0x52002000
 8006dc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d010      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d208      	bcs.n	8006df2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006de0:	4b3c      	ldr	r3, [pc, #240]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	4939      	ldr	r1, [pc, #228]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0308 	and.w	r3, r3, #8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d010      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695a      	ldr	r2, [r3, #20]
 8006e02:	4b34      	ldr	r3, [pc, #208]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d208      	bcs.n	8006e20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e0e:	4b31      	ldr	r3, [pc, #196]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	492e      	ldr	r1, [pc, #184]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d010      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699a      	ldr	r2, [r3, #24]
 8006e30:	4b28      	ldr	r3, [pc, #160]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d208      	bcs.n	8006e4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e3c:	4b25      	ldr	r3, [pc, #148]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	4922      	ldr	r1, [pc, #136]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d010      	beq.n	8006e7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	69da      	ldr	r2, [r3, #28]
 8006e5e:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d208      	bcs.n	8006e7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	4917      	ldr	r1, [pc, #92]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8006e7c:	f000 f89e 	bl	8006fbc <HAL_RCC_GetSysClockFreq>
 8006e80:	4602      	mov	r2, r0
 8006e82:	4b14      	ldr	r3, [pc, #80]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	0a1b      	lsrs	r3, r3, #8
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	4912      	ldr	r1, [pc, #72]	@ (8006ed8 <HAL_RCC_ClockConfig+0x35c>)
 8006e8e:	5ccb      	ldrb	r3, [r1, r3]
 8006e90:	f003 031f 	and.w	r3, r3, #31
 8006e94:	fa22 f303 	lsr.w	r3, r2, r3
 8006e98:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006ed4 <HAL_RCC_ClockConfig+0x358>)
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	f003 030f 	and.w	r3, r3, #15
 8006ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8006ed8 <HAL_RCC_ClockConfig+0x35c>)
 8006ea4:	5cd3      	ldrb	r3, [r2, r3]
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006edc <HAL_RCC_ClockConfig+0x360>)
 8006eb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006ee0 <HAL_RCC_ClockConfig+0x364>)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006eba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee4 <HAL_RCC_ClockConfig+0x368>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fa fa54 	bl	800136c <HAL_InitTick>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3718      	adds	r7, #24
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	58024400 	.word	0x58024400
 8006ed8:	0800bf0c 	.word	0x0800bf0c
 8006edc:	24000004 	.word	0x24000004
 8006ee0:	24000000 	.word	0x24000000
 8006ee4:	24000008 	.word	0x24000008

08006ee8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	@ 0x30
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d12a      	bne.n	8006f50 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006efa:	4b2d      	ldr	r3, [pc, #180]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006efc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006f00:	4a2b      	ldr	r2, [pc, #172]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006f02:	f043 0301 	orr.w	r3, r3, #1
 8006f06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8006f0a:	4b29      	ldr	r3, [pc, #164]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006f0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006f10:	f003 0301 	and.w	r3, r3, #1
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006f18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f22:	2303      	movs	r3, #3
 8006f24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006f2e:	f107 031c 	add.w	r3, r7, #28
 8006f32:	4619      	mov	r1, r3
 8006f34:	481f      	ldr	r0, [pc, #124]	@ (8006fb4 <HAL_RCC_MCOConfig+0xcc>)
 8006f36:	f7fe ffbb 	bl	8005eb0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	430b      	orrs	r3, r1
 8006f48:	4919      	ldr	r1, [pc, #100]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006f4e:	e02a      	b.n	8006fa6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006f50:	4b17      	ldr	r3, [pc, #92]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006f52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006f56:	4a16      	ldr	r2, [pc, #88]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006f58:	f043 0304 	orr.w	r3, r3, #4
 8006f5c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8006f60:	4b13      	ldr	r3, [pc, #76]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006f62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006f6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f74:	2302      	movs	r3, #2
 8006f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f78:	2303      	movs	r3, #3
 8006f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006f80:	2300      	movs	r3, #0
 8006f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006f84:	f107 031c 	add.w	r3, r7, #28
 8006f88:	4619      	mov	r1, r3
 8006f8a:	480b      	ldr	r0, [pc, #44]	@ (8006fb8 <HAL_RCC_MCOConfig+0xd0>)
 8006f8c:	f7fe ff90 	bl	8005eb0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006f90:	4b07      	ldr	r3, [pc, #28]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	01d9      	lsls	r1, r3, #7
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	430b      	orrs	r3, r1
 8006fa0:	4903      	ldr	r1, [pc, #12]	@ (8006fb0 <HAL_RCC_MCOConfig+0xc8>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	610b      	str	r3, [r1, #16]
}
 8006fa6:	bf00      	nop
 8006fa8:	3730      	adds	r7, #48	@ 0x30
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	58024400 	.word	0x58024400
 8006fb4:	58020000 	.word	0x58020000
 8006fb8:	58020800 	.word	0x58020800

08006fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b089      	sub	sp, #36	@ 0x24
 8006fc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006fc2:	4bb3      	ldr	r3, [pc, #716]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fca:	2b18      	cmp	r3, #24
 8006fcc:	f200 8155 	bhi.w	800727a <HAL_RCC_GetSysClockFreq+0x2be>
 8006fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd6:	bf00      	nop
 8006fd8:	0800703d 	.word	0x0800703d
 8006fdc:	0800727b 	.word	0x0800727b
 8006fe0:	0800727b 	.word	0x0800727b
 8006fe4:	0800727b 	.word	0x0800727b
 8006fe8:	0800727b 	.word	0x0800727b
 8006fec:	0800727b 	.word	0x0800727b
 8006ff0:	0800727b 	.word	0x0800727b
 8006ff4:	0800727b 	.word	0x0800727b
 8006ff8:	08007063 	.word	0x08007063
 8006ffc:	0800727b 	.word	0x0800727b
 8007000:	0800727b 	.word	0x0800727b
 8007004:	0800727b 	.word	0x0800727b
 8007008:	0800727b 	.word	0x0800727b
 800700c:	0800727b 	.word	0x0800727b
 8007010:	0800727b 	.word	0x0800727b
 8007014:	0800727b 	.word	0x0800727b
 8007018:	08007069 	.word	0x08007069
 800701c:	0800727b 	.word	0x0800727b
 8007020:	0800727b 	.word	0x0800727b
 8007024:	0800727b 	.word	0x0800727b
 8007028:	0800727b 	.word	0x0800727b
 800702c:	0800727b 	.word	0x0800727b
 8007030:	0800727b 	.word	0x0800727b
 8007034:	0800727b 	.word	0x0800727b
 8007038:	0800706f 	.word	0x0800706f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800703c:	4b94      	ldr	r3, [pc, #592]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b00      	cmp	r3, #0
 8007046:	d009      	beq.n	800705c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007048:	4b91      	ldr	r3, [pc, #580]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	08db      	lsrs	r3, r3, #3
 800704e:	f003 0303 	and.w	r3, r3, #3
 8007052:	4a90      	ldr	r2, [pc, #576]	@ (8007294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007054:	fa22 f303 	lsr.w	r3, r2, r3
 8007058:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800705a:	e111      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800705c:	4b8d      	ldr	r3, [pc, #564]	@ (8007294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800705e:	61bb      	str	r3, [r7, #24]
      break;
 8007060:	e10e      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007062:	4b8d      	ldr	r3, [pc, #564]	@ (8007298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007064:	61bb      	str	r3, [r7, #24]
      break;
 8007066:	e10b      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007068:	4b8c      	ldr	r3, [pc, #560]	@ (800729c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800706a:	61bb      	str	r3, [r7, #24]
      break;
 800706c:	e108      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800706e:	4b88      	ldr	r3, [pc, #544]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007078:	4b85      	ldr	r3, [pc, #532]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007082:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007084:	4b82      	ldr	r3, [pc, #520]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800708e:	4b80      	ldr	r3, [pc, #512]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007092:	08db      	lsrs	r3, r3, #3
 8007094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	fb02 f303 	mul.w	r3, r2, r3
 800709e:	ee07 3a90 	vmov	s15, r3
 80070a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 80e1 	beq.w	8007274 <HAL_RCC_GetSysClockFreq+0x2b8>
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b02      	cmp	r3, #2
 80070b6:	f000 8083 	beq.w	80071c0 <HAL_RCC_GetSysClockFreq+0x204>
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	f200 80a1 	bhi.w	8007204 <HAL_RCC_GetSysClockFreq+0x248>
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d003      	beq.n	80070d0 <HAL_RCC_GetSysClockFreq+0x114>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d056      	beq.n	800717c <HAL_RCC_GetSysClockFreq+0x1c0>
 80070ce:	e099      	b.n	8007204 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d02d      	beq.n	8007138 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	08db      	lsrs	r3, r3, #3
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	4a6b      	ldr	r2, [pc, #428]	@ (8007294 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070e8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	ee07 3a90 	vmov	s15, r3
 80070f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007106:	4b62      	ldr	r3, [pc, #392]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800710a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007116:	ed97 6a02 	vldr	s12, [r7, #8]
 800711a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80072a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800711e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800712a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007132:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007136:	e087      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	ee07 3a90 	vmov	s15, r3
 800713e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007142:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80072a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714a:	4b51      	ldr	r3, [pc, #324]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800714c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800714e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007152:	ee07 3a90 	vmov	s15, r3
 8007156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715a:	ed97 6a02 	vldr	s12, [r7, #8]
 800715e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80072a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800716e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007176:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800717a:	e065      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	ee07 3a90 	vmov	s15, r3
 8007182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007186:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80072a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800718a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718e:	4b40      	ldr	r3, [pc, #256]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719e:	ed97 6a02 	vldr	s12, [r7, #8]
 80071a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80072a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071be:	e043      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80072ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80071ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80072a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007202:	e021      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80072a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007216:	4b1e      	ldr	r3, [pc, #120]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007226:	ed97 6a02 	vldr	s12, [r7, #8]
 800722a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80072a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800722e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800723a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007246:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007248:	4b11      	ldr	r3, [pc, #68]	@ (8007290 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800724a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800724c:	0a5b      	lsrs	r3, r3, #9
 800724e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007252:	3301      	adds	r3, #1
 8007254:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	ee07 3a90 	vmov	s15, r3
 800725c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007260:	edd7 6a07 	vldr	s13, [r7, #28]
 8007264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007268:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800726c:	ee17 3a90 	vmov	r3, s15
 8007270:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007272:	e005      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
      break;
 8007278:	e002      	b.n	8007280 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800727a:	4b07      	ldr	r3, [pc, #28]	@ (8007298 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800727c:	61bb      	str	r3, [r7, #24]
      break;
 800727e:	bf00      	nop
  }

  return sysclockfreq;
 8007280:	69bb      	ldr	r3, [r7, #24]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3724      	adds	r7, #36	@ 0x24
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	58024400 	.word	0x58024400
 8007294:	03d09000 	.word	0x03d09000
 8007298:	003d0900 	.word	0x003d0900
 800729c:	007a1200 	.word	0x007a1200
 80072a0:	46000000 	.word	0x46000000
 80072a4:	4c742400 	.word	0x4c742400
 80072a8:	4a742400 	.word	0x4a742400
 80072ac:	4af42400 	.word	0x4af42400

080072b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80072b6:	f7ff fe81 	bl	8006fbc <HAL_RCC_GetSysClockFreq>
 80072ba:	4602      	mov	r2, r0
 80072bc:	4b10      	ldr	r3, [pc, #64]	@ (8007300 <HAL_RCC_GetHCLKFreq+0x50>)
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	490f      	ldr	r1, [pc, #60]	@ (8007304 <HAL_RCC_GetHCLKFreq+0x54>)
 80072c8:	5ccb      	ldrb	r3, [r1, r3]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	fa22 f303 	lsr.w	r3, r2, r3
 80072d2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80072d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <HAL_RCC_GetHCLKFreq+0x50>)
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f003 030f 	and.w	r3, r3, #15
 80072dc:	4a09      	ldr	r2, [pc, #36]	@ (8007304 <HAL_RCC_GetHCLKFreq+0x54>)
 80072de:	5cd3      	ldrb	r3, [r2, r3]
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ea:	4a07      	ldr	r2, [pc, #28]	@ (8007308 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ee:	4a07      	ldr	r2, [pc, #28]	@ (800730c <HAL_RCC_GetHCLKFreq+0x5c>)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072f4:	4b04      	ldr	r3, [pc, #16]	@ (8007308 <HAL_RCC_GetHCLKFreq+0x58>)
 80072f6:	681b      	ldr	r3, [r3, #0]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	58024400 	.word	0x58024400
 8007304:	0800bf0c 	.word	0x0800bf0c
 8007308:	24000004 	.word	0x24000004
 800730c:	24000000 	.word	0x24000000

08007310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8007314:	f7ff ffcc 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 8007318:	4602      	mov	r2, r0
 800731a:	4b06      	ldr	r3, [pc, #24]	@ (8007334 <HAL_RCC_GetPCLK1Freq+0x24>)
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	091b      	lsrs	r3, r3, #4
 8007320:	f003 0307 	and.w	r3, r3, #7
 8007324:	4904      	ldr	r1, [pc, #16]	@ (8007338 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007326:	5ccb      	ldrb	r3, [r1, r3]
 8007328:	f003 031f 	and.w	r3, r3, #31
 800732c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007330:	4618      	mov	r0, r3
 8007332:	bd80      	pop	{r7, pc}
 8007334:	58024400 	.word	0x58024400
 8007338:	0800bf0c 	.word	0x0800bf0c

0800733c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8007340:	f7ff ffb6 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 8007344:	4602      	mov	r2, r0
 8007346:	4b06      	ldr	r3, [pc, #24]	@ (8007360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007348:	69db      	ldr	r3, [r3, #28]
 800734a:	0a1b      	lsrs	r3, r3, #8
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	4904      	ldr	r1, [pc, #16]	@ (8007364 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007352:	5ccb      	ldrb	r3, [r1, r3]
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800735c:	4618      	mov	r0, r3
 800735e:	bd80      	pop	{r7, pc}
 8007360:	58024400 	.word	0x58024400
 8007364:	0800bf0c 	.word	0x0800bf0c

08007368 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800736c:	b0c8      	sub	sp, #288	@ 0x120
 800736e:	af00      	add	r7, sp, #0
 8007370:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007374:	2300      	movs	r3, #0
 8007376:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800737a:	2300      	movs	r3, #0
 800737c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007380:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007388:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800738c:	2500      	movs	r5, #0
 800738e:	ea54 0305 	orrs.w	r3, r4, r5
 8007392:	d049      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007398:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800739a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800739e:	d02f      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80073a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80073a4:	d828      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073aa:	d01a      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80073ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073b0:	d822      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80073b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073ba:	d007      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073bc:	e01c      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073be:	4ba7      	ldr	r3, [pc, #668]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c2:	4aa6      	ldr	r2, [pc, #664]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073ca:	e01a      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073d0:	3308      	adds	r3, #8
 80073d2:	2102      	movs	r1, #2
 80073d4:	4618      	mov	r0, r3
 80073d6:	f002 fac3 	bl	8009960 <RCCEx_PLL2_Config>
 80073da:	4603      	mov	r3, r0
 80073dc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073e0:	e00f      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80073e6:	3328      	adds	r3, #40	@ 0x28
 80073e8:	2102      	movs	r1, #2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f002 fb6a 	bl	8009ac4 <RCCEx_PLL3_Config>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073f6:	e004      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80073fe:	e000      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007402:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800740a:	4b94      	ldr	r3, [pc, #592]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800740c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800740e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007418:	4a90      	ldr	r2, [pc, #576]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800741a:	430b      	orrs	r3, r1
 800741c:	6513      	str	r3, [r2, #80]	@ 0x50
 800741e:	e003      	b.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007420:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007424:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007434:	f04f 0900 	mov.w	r9, #0
 8007438:	ea58 0309 	orrs.w	r3, r8, r9
 800743c:	d047      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800743e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007444:	2b04      	cmp	r3, #4
 8007446:	d82a      	bhi.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007448:	a201      	add	r2, pc, #4	@ (adr r2, 8007450 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800744a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744e:	bf00      	nop
 8007450:	08007465 	.word	0x08007465
 8007454:	08007473 	.word	0x08007473
 8007458:	08007489 	.word	0x08007489
 800745c:	080074a7 	.word	0x080074a7
 8007460:	080074a7 	.word	0x080074a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007464:	4b7d      	ldr	r3, [pc, #500]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	4a7c      	ldr	r2, [pc, #496]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800746a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800746e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007470:	e01a      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007476:	3308      	adds	r3, #8
 8007478:	2100      	movs	r1, #0
 800747a:	4618      	mov	r0, r3
 800747c:	f002 fa70 	bl	8009960 <RCCEx_PLL2_Config>
 8007480:	4603      	mov	r3, r0
 8007482:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007486:	e00f      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800748c:	3328      	adds	r3, #40	@ 0x28
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f002 fb17 	bl	8009ac4 <RCCEx_PLL3_Config>
 8007496:	4603      	mov	r3, r0
 8007498:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800749c:	e004      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80074a4:	e000      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80074a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074b0:	4b6a      	ldr	r3, [pc, #424]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b4:	f023 0107 	bic.w	r1, r3, #7
 80074b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074be:	4a67      	ldr	r2, [pc, #412]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074c0:	430b      	orrs	r3, r1
 80074c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80074c4:	e003      	b.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80074ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80074ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80074da:	f04f 0b00 	mov.w	fp, #0
 80074de:	ea5a 030b 	orrs.w	r3, sl, fp
 80074e2:	d054      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 80074e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80074e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ea:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80074ee:	d036      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80074f0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80074f4:	d82f      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074fa:	d032      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80074fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007500:	d829      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007502:	2bc0      	cmp	r3, #192	@ 0xc0
 8007504:	d02f      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8007506:	2bc0      	cmp	r3, #192	@ 0xc0
 8007508:	d825      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800750a:	2b80      	cmp	r3, #128	@ 0x80
 800750c:	d018      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800750e:	2b80      	cmp	r3, #128	@ 0x80
 8007510:	d821      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007516:	2b40      	cmp	r3, #64	@ 0x40
 8007518:	d007      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800751a:	e01c      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800751c:	4b4f      	ldr	r3, [pc, #316]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800751e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007520:	4a4e      	ldr	r2, [pc, #312]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007522:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007526:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007528:	e01e      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800752a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800752e:	3308      	adds	r3, #8
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f002 fa14 	bl	8009960 <RCCEx_PLL2_Config>
 8007538:	4603      	mov	r3, r0
 800753a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800753e:	e013      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007540:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007544:	3328      	adds	r3, #40	@ 0x28
 8007546:	2100      	movs	r1, #0
 8007548:	4618      	mov	r0, r3
 800754a:	f002 fabb 	bl	8009ac4 <RCCEx_PLL3_Config>
 800754e:	4603      	mov	r3, r0
 8007550:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8007554:	e008      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800755c:	e004      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800755e:	bf00      	nop
 8007560:	e002      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8007566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007568:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10a      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8007570:	4b3a      	ldr	r3, [pc, #232]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007574:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800757c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757e:	4a37      	ldr	r2, [pc, #220]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007580:	430b      	orrs	r3, r1
 8007582:	6513      	str	r3, [r2, #80]	@ 0x50
 8007584:	e003      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007586:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800758a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800758e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800759a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800759e:	2300      	movs	r3, #0
 80075a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80075a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80075a8:	460b      	mov	r3, r1
 80075aa:	4313      	orrs	r3, r2
 80075ac:	d05c      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 80075ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80075b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075b4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80075b8:	d03b      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80075ba:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80075be:	d834      	bhi.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80075c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c4:	d037      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 80075c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ca:	d82e      	bhi.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80075cc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80075d0:	d033      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80075d2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80075d6:	d828      	bhi.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80075d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075dc:	d01a      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 80075de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e2:	d822      	bhi.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80075e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075ec:	d007      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x296>
 80075ee:	e01c      	b.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075f0:	4b1a      	ldr	r3, [pc, #104]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f4:	4a19      	ldr	r2, [pc, #100]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 80075fc:	e01e      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007602:	3308      	adds	r3, #8
 8007604:	2100      	movs	r1, #0
 8007606:	4618      	mov	r0, r3
 8007608:	f002 f9aa 	bl	8009960 <RCCEx_PLL2_Config>
 800760c:	4603      	mov	r3, r0
 800760e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007612:	e013      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007618:	3328      	adds	r3, #40	@ 0x28
 800761a:	2100      	movs	r1, #0
 800761c:	4618      	mov	r0, r3
 800761e:	f002 fa51 	bl	8009ac4 <RCCEx_PLL3_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8007628:	e008      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007630:	e004      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007632:	bf00      	nop
 8007634:	e002      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8007636:	bf00      	nop
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800763a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800763c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10d      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8007644:	4b05      	ldr	r3, [pc, #20]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007648:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800764c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007652:	4a02      	ldr	r2, [pc, #8]	@ (800765c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007654:	430b      	orrs	r3, r1
 8007656:	6513      	str	r3, [r2, #80]	@ 0x50
 8007658:	e006      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800765a:	bf00      	nop
 800765c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007660:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007664:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007670:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007674:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007678:	2300      	movs	r3, #0
 800767a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800767e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8007682:	460b      	mov	r3, r1
 8007684:	4313      	orrs	r3, r2
 8007686:	d03a      	beq.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8007688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800768c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800768e:	2b30      	cmp	r3, #48	@ 0x30
 8007690:	d01f      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007692:	2b30      	cmp	r3, #48	@ 0x30
 8007694:	d819      	bhi.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007696:	2b20      	cmp	r3, #32
 8007698:	d00c      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800769a:	2b20      	cmp	r3, #32
 800769c:	d815      	bhi.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x362>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d019      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80076a2:	2b10      	cmp	r3, #16
 80076a4:	d111      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076a6:	4bae      	ldr	r3, [pc, #696]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076aa:	4aad      	ldr	r2, [pc, #692]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80076b2:	e011      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076b8:	3308      	adds	r3, #8
 80076ba:	2102      	movs	r1, #2
 80076bc:	4618      	mov	r0, r3
 80076be:	f002 f94f 	bl	8009960 <RCCEx_PLL2_Config>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80076c8:	e006      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80076d0:	e002      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80076d2:	bf00      	nop
 80076d4:	e000      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 80076d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80076e0:	4b9f      	ldr	r3, [pc, #636]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80076e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80076ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ee:	4a9c      	ldr	r2, [pc, #624]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80076f0:	430b      	orrs	r3, r1
 80076f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80076f4:	e003      	b.n	80076fe <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80076fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80076fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007706:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800770a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800770e:	2300      	movs	r3, #0
 8007710:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007714:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007718:	460b      	mov	r3, r1
 800771a:	4313      	orrs	r3, r2
 800771c:	d051      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800771e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007728:	d035      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800772a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800772e:	d82e      	bhi.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007730:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007734:	d031      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007736:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800773a:	d828      	bhi.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800773c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007740:	d01a      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007742:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007746:	d822      	bhi.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x426>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800774c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007750:	d007      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8007752:	e01c      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007754:	4b82      	ldr	r3, [pc, #520]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007758:	4a81      	ldr	r2, [pc, #516]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800775a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800775e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007760:	e01c      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007762:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007766:	3308      	adds	r3, #8
 8007768:	2100      	movs	r1, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f002 f8f8 	bl	8009960 <RCCEx_PLL2_Config>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007776:	e011      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007778:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800777c:	3328      	adds	r3, #40	@ 0x28
 800777e:	2100      	movs	r1, #0
 8007780:	4618      	mov	r0, r3
 8007782:	f002 f99f 	bl	8009ac4 <RCCEx_PLL3_Config>
 8007786:	4603      	mov	r3, r0
 8007788:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800778c:	e006      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007794:	e002      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8007796:	bf00      	nop
 8007798:	e000      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800779a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800779c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10a      	bne.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077a4:	4b6e      	ldr	r3, [pc, #440]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077a8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80077ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077b2:	4a6b      	ldr	r2, [pc, #428]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80077b4:	430b      	orrs	r3, r1
 80077b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80077b8:	e003      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80077be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ca:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80077ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077d2:	2300      	movs	r3, #0
 80077d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80077dc:	460b      	mov	r3, r1
 80077de:	4313      	orrs	r3, r2
 80077e0:	d053      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80077e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80077e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077ec:	d033      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80077ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077f2:	d82c      	bhi.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80077f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077f8:	d02f      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80077fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80077fe:	d826      	bhi.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007800:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007804:	d02b      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8007806:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800780a:	d820      	bhi.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800780c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007810:	d012      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007816:	d81a      	bhi.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007818:	2b00      	cmp	r3, #0
 800781a:	d022      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800781c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007820:	d115      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007822:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007826:	3308      	adds	r3, #8
 8007828:	2101      	movs	r1, #1
 800782a:	4618      	mov	r0, r3
 800782c:	f002 f898 	bl	8009960 <RCCEx_PLL2_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007836:	e015      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007838:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800783c:	3328      	adds	r3, #40	@ 0x28
 800783e:	2101      	movs	r1, #1
 8007840:	4618      	mov	r0, r3
 8007842:	f002 f93f 	bl	8009ac4 <RCCEx_PLL3_Config>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800784c:	e00a      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007854:	e006      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007856:	bf00      	nop
 8007858:	e004      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800785a:	bf00      	nop
 800785c:	e002      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800785e:	bf00      	nop
 8007860:	e000      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8007862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007864:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800786c:	4b3c      	ldr	r3, [pc, #240]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800786e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007870:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007874:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007878:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800787a:	4a39      	ldr	r2, [pc, #228]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800787c:	430b      	orrs	r3, r1
 800787e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007880:	e003      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007882:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007886:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800788a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800788e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007892:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007896:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800789a:	2300      	movs	r3, #0
 800789c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80078a0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4313      	orrs	r3, r2
 80078a8:	d060      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80078aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078b2:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80078b6:	d039      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 80078b8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 80078bc:	d832      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078c2:	d035      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80078c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078c8:	d82c      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ce:	d031      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80078d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078d4:	d826      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078da:	d02d      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80078dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078e0:	d820      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078e6:	d012      	beq.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80078e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078ec:	d81a      	bhi.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d024      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078f6:	d115      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80078f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80078fc:	3308      	adds	r3, #8
 80078fe:	2101      	movs	r1, #1
 8007900:	4618      	mov	r0, r3
 8007902:	f002 f82d 	bl	8009960 <RCCEx_PLL2_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800790c:	e017      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800790e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007912:	3328      	adds	r3, #40	@ 0x28
 8007914:	2101      	movs	r1, #1
 8007916:	4618      	mov	r0, r3
 8007918:	f002 f8d4 	bl	8009ac4 <RCCEx_PLL3_Config>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007922:	e00c      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800792a:	e008      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800792c:	bf00      	nop
 800792e:	e006      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007930:	bf00      	nop
 8007932:	e004      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007934:	bf00      	nop
 8007936:	e002      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8007938:	bf00      	nop
 800793a:	e000      	b.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800793c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10e      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007946:	4b06      	ldr	r3, [pc, #24]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800794e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007956:	4a02      	ldr	r2, [pc, #8]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8007958:	430b      	orrs	r3, r1
 800795a:	6593      	str	r3, [r2, #88]	@ 0x58
 800795c:	e006      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800795e:	bf00      	nop
 8007960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007964:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007968:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800796c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007978:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800797c:	2300      	movs	r3, #0
 800797e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007986:	460b      	mov	r3, r1
 8007988:	4313      	orrs	r3, r2
 800798a:	d037      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800798c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007990:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007992:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007996:	d00e      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8007998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800799c:	d816      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d018      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80079a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079a6:	d111      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079a8:	4bc4      	ldr	r3, [pc, #784]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	4ac3      	ldr	r2, [pc, #780]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079b4:	e00f      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ba:	3308      	adds	r3, #8
 80079bc:	2101      	movs	r1, #1
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 ffce 	bl	8009960 <RCCEx_PLL2_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079ca:	e004      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80079d2:	e000      	b.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80079d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10a      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079de:	4bb7      	ldr	r3, [pc, #732]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80079e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80079ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ec:	4ab3      	ldr	r2, [pc, #716]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80079ee:	430b      	orrs	r3, r1
 80079f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80079f2:	e003      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80079f8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a16:	460b      	mov	r3, r1
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	d039      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a22:	2b03      	cmp	r3, #3
 8007a24:	d81c      	bhi.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007a26:	a201      	add	r2, pc, #4	@ (adr r2, 8007a2c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a69 	.word	0x08007a69
 8007a30:	08007a3d 	.word	0x08007a3d
 8007a34:	08007a4b 	.word	0x08007a4b
 8007a38:	08007a69 	.word	0x08007a69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a3c:	4b9f      	ldr	r3, [pc, #636]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a40:	4a9e      	ldr	r2, [pc, #632]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a48:	e00f      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a4e:	3308      	adds	r3, #8
 8007a50:	2102      	movs	r1, #2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f001 ff84 	bl	8009960 <RCCEx_PLL2_Config>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a5e:	e004      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007a66:	e000      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8007a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a72:	4b92      	ldr	r3, [pc, #584]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a76:	f023 0103 	bic.w	r1, r3, #3
 8007a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a80:	4a8e      	ldr	r2, [pc, #568]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007a82:	430b      	orrs	r3, r1
 8007a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a86:	e003      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007a8c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a98:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007aa6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4313      	orrs	r3, r2
 8007aae:	f000 8099 	beq.w	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ab2:	4b83      	ldr	r3, [pc, #524]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a82      	ldr	r2, [pc, #520]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007abc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007abe:	f7f9 fc9f 	bl	8001400 <HAL_GetTick>
 8007ac2:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ac6:	e00b      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ac8:	f7f9 fc9a 	bl	8001400 <HAL_GetTick>
 8007acc:	4602      	mov	r2, r0
 8007ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b64      	cmp	r3, #100	@ 0x64
 8007ad6:	d903      	bls.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007ade:	e005      	b.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ae0:	4b77      	ldr	r3, [pc, #476]	@ (8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0ed      	beq.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8007aec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d173      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007af4:	4b71      	ldr	r3, [pc, #452]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007af6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007afc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b00:	4053      	eors	r3, r2
 8007b02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d015      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b12:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b16:	4b69      	ldr	r3, [pc, #420]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b1a:	4a68      	ldr	r2, [pc, #416]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b20:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b22:	4b66      	ldr	r3, [pc, #408]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b26:	4a65      	ldr	r2, [pc, #404]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b2c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b2e:	4a63      	ldr	r2, [pc, #396]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b34:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b42:	d118      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b44:	f7f9 fc5c 	bl	8001400 <HAL_GetTick>
 8007b48:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b4c:	e00d      	b.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b4e:	f7f9 fc57 	bl	8001400 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007b58:	1ad2      	subs	r2, r2, r3
 8007b5a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d903      	bls.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 8007b68:	e005      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b6a:	4b54      	ldr	r3, [pc, #336]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0eb      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8007b76:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d129      	bne.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b8e:	d10e      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007b90:	4b4a      	ldr	r3, [pc, #296]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007b9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ba0:	091a      	lsrs	r2, r3, #4
 8007ba2:	4b48      	ldr	r3, [pc, #288]	@ (8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	4a45      	ldr	r2, [pc, #276]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007ba8:	430b      	orrs	r3, r1
 8007baa:	6113      	str	r3, [r2, #16]
 8007bac:	e005      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007bae:	4b43      	ldr	r3, [pc, #268]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	4a42      	ldr	r2, [pc, #264]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bb4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007bb8:	6113      	str	r3, [r2, #16]
 8007bba:	4b40      	ldr	r3, [pc, #256]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bbc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007bc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bca:	4a3c      	ldr	r2, [pc, #240]	@ (8007cbc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bd0:	e008      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bd2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007bd6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 8007bda:	e003      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bdc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007be0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007be4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f002 0301 	and.w	r3, r2, #1
 8007bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4313      	orrs	r3, r2
 8007c02:	f000 8090 	beq.w	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c0e:	2b28      	cmp	r3, #40	@ 0x28
 8007c10:	d870      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8007c12:	a201      	add	r2, pc, #4	@ (adr r2, 8007c18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8007c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c18:	08007cfd 	.word	0x08007cfd
 8007c1c:	08007cf5 	.word	0x08007cf5
 8007c20:	08007cf5 	.word	0x08007cf5
 8007c24:	08007cf5 	.word	0x08007cf5
 8007c28:	08007cf5 	.word	0x08007cf5
 8007c2c:	08007cf5 	.word	0x08007cf5
 8007c30:	08007cf5 	.word	0x08007cf5
 8007c34:	08007cf5 	.word	0x08007cf5
 8007c38:	08007cc9 	.word	0x08007cc9
 8007c3c:	08007cf5 	.word	0x08007cf5
 8007c40:	08007cf5 	.word	0x08007cf5
 8007c44:	08007cf5 	.word	0x08007cf5
 8007c48:	08007cf5 	.word	0x08007cf5
 8007c4c:	08007cf5 	.word	0x08007cf5
 8007c50:	08007cf5 	.word	0x08007cf5
 8007c54:	08007cf5 	.word	0x08007cf5
 8007c58:	08007cdf 	.word	0x08007cdf
 8007c5c:	08007cf5 	.word	0x08007cf5
 8007c60:	08007cf5 	.word	0x08007cf5
 8007c64:	08007cf5 	.word	0x08007cf5
 8007c68:	08007cf5 	.word	0x08007cf5
 8007c6c:	08007cf5 	.word	0x08007cf5
 8007c70:	08007cf5 	.word	0x08007cf5
 8007c74:	08007cf5 	.word	0x08007cf5
 8007c78:	08007cfd 	.word	0x08007cfd
 8007c7c:	08007cf5 	.word	0x08007cf5
 8007c80:	08007cf5 	.word	0x08007cf5
 8007c84:	08007cf5 	.word	0x08007cf5
 8007c88:	08007cf5 	.word	0x08007cf5
 8007c8c:	08007cf5 	.word	0x08007cf5
 8007c90:	08007cf5 	.word	0x08007cf5
 8007c94:	08007cf5 	.word	0x08007cf5
 8007c98:	08007cfd 	.word	0x08007cfd
 8007c9c:	08007cf5 	.word	0x08007cf5
 8007ca0:	08007cf5 	.word	0x08007cf5
 8007ca4:	08007cf5 	.word	0x08007cf5
 8007ca8:	08007cf5 	.word	0x08007cf5
 8007cac:	08007cf5 	.word	0x08007cf5
 8007cb0:	08007cf5 	.word	0x08007cf5
 8007cb4:	08007cf5 	.word	0x08007cf5
 8007cb8:	08007cfd 	.word	0x08007cfd
 8007cbc:	58024400 	.word	0x58024400
 8007cc0:	58024800 	.word	0x58024800
 8007cc4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ccc:	3308      	adds	r3, #8
 8007cce:	2101      	movs	r1, #1
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 fe45 	bl	8009960 <RCCEx_PLL2_Config>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cdc:	e00f      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ce2:	3328      	adds	r3, #40	@ 0x28
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f001 feec 	bl	8009ac4 <RCCEx_PLL3_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cf2:	e004      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007cfa:	e000      	b.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8007cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cfe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10b      	bne.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d06:	4bc0      	ldr	r3, [pc, #768]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d16:	4abc      	ldr	r2, [pc, #752]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d1c:	e003      	b.n	8007d26 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007d22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d2e:	f002 0302 	and.w	r3, r2, #2
 8007d32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d36:	2300      	movs	r3, #0
 8007d38:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d3c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d40:	460b      	mov	r3, r1
 8007d42:	4313      	orrs	r3, r2
 8007d44:	d043      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007d4e:	2b05      	cmp	r3, #5
 8007d50:	d824      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007d52:	a201      	add	r2, pc, #4	@ (adr r2, 8007d58 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007da5 	.word	0x08007da5
 8007d5c:	08007d71 	.word	0x08007d71
 8007d60:	08007d87 	.word	0x08007d87
 8007d64:	08007da5 	.word	0x08007da5
 8007d68:	08007da5 	.word	0x08007da5
 8007d6c:	08007da5 	.word	0x08007da5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d74:	3308      	adds	r3, #8
 8007d76:	2101      	movs	r1, #1
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 fdf1 	bl	8009960 <RCCEx_PLL2_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d84:	e00f      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007d8a:	3328      	adds	r3, #40	@ 0x28
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f001 fe98 	bl	8009ac4 <RCCEx_PLL3_Config>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d9a:	e004      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007da2:	e000      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8007da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10b      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007dae:	4b96      	ldr	r3, [pc, #600]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db2:	f023 0107 	bic.w	r1, r3, #7
 8007db6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dbe:	4a92      	ldr	r2, [pc, #584]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dc4:	e003      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007dca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f002 0304 	and.w	r3, r2, #4
 8007dda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007dde:	2300      	movs	r3, #0
 8007de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007de4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007de8:	460b      	mov	r3, r1
 8007dea:	4313      	orrs	r3, r2
 8007dec:	d043      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007dee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007df6:	2b05      	cmp	r3, #5
 8007df8:	d824      	bhi.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8007dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007e00 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007e4d 	.word	0x08007e4d
 8007e04:	08007e19 	.word	0x08007e19
 8007e08:	08007e2f 	.word	0x08007e2f
 8007e0c:	08007e4d 	.word	0x08007e4d
 8007e10:	08007e4d 	.word	0x08007e4d
 8007e14:	08007e4d 	.word	0x08007e4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	2101      	movs	r1, #1
 8007e20:	4618      	mov	r0, r3
 8007e22:	f001 fd9d 	bl	8009960 <RCCEx_PLL2_Config>
 8007e26:	4603      	mov	r3, r0
 8007e28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e2c:	e00f      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e32:	3328      	adds	r3, #40	@ 0x28
 8007e34:	2101      	movs	r1, #1
 8007e36:	4618      	mov	r0, r3
 8007e38:	f001 fe44 	bl	8009ac4 <RCCEx_PLL3_Config>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e42:	e004      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007e4a:	e000      	b.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8007e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10b      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e56:	4b6c      	ldr	r3, [pc, #432]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5a:	f023 0107 	bic.w	r1, r3, #7
 8007e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007e66:	4a68      	ldr	r2, [pc, #416]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007e68:	430b      	orrs	r3, r1
 8007e6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e6c:	e003      	b.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007e72:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f002 0320 	and.w	r3, r2, #32
 8007e82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e86:	2300      	movs	r3, #0
 8007e88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e90:	460b      	mov	r3, r1
 8007e92:	4313      	orrs	r3, r2
 8007e94:	d055      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ea2:	d033      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ea8:	d82c      	bhi.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eae:	d02f      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb4:	d826      	bhi.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007eb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007eba:	d02b      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007ebc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ec0:	d820      	bhi.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007ec2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ec6:	d012      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007ec8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ecc:	d81a      	bhi.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d022      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007ed2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ed6:	d115      	bne.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007edc:	3308      	adds	r3, #8
 8007ede:	2100      	movs	r1, #0
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f001 fd3d 	bl	8009960 <RCCEx_PLL2_Config>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007eec:	e015      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007eee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ef2:	3328      	adds	r3, #40	@ 0x28
 8007ef4:	2102      	movs	r1, #2
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 fde4 	bl	8009ac4 <RCCEx_PLL3_Config>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f02:	e00a      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007f0a:	e006      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007f0c:	bf00      	nop
 8007f0e:	e004      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007f10:	bf00      	nop
 8007f12:	e002      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007f14:	bf00      	nop
 8007f16:	e000      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8007f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f1a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10b      	bne.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f22:	4b39      	ldr	r3, [pc, #228]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f26:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007f32:	4a35      	ldr	r2, [pc, #212]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007f34:	430b      	orrs	r3, r1
 8007f36:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f38:	e003      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007f3e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f52:	2300      	movs	r3, #0
 8007f54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	d058      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007f66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007f6a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f6e:	d033      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007f70:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f74:	d82c      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f7a:	d02f      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8007f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f80:	d826      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f86:	d02b      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007f88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f8c:	d820      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f92:	d012      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8007f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f98:	d81a      	bhi.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d022      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8007f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa2:	d115      	bne.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fa8:	3308      	adds	r3, #8
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 fcd7 	bl	8009960 <RCCEx_PLL2_Config>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fb8:	e015      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007fbe:	3328      	adds	r3, #40	@ 0x28
 8007fc0:	2102      	movs	r1, #2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f001 fd7e 	bl	8009ac4 <RCCEx_PLL3_Config>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fce:	e00a      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8007fd6:	e006      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007fd8:	bf00      	nop
 8007fda:	e004      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007fdc:	bf00      	nop
 8007fde:	e002      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007fe0:	bf00      	nop
 8007fe2:	e000      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8007fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fe6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10e      	bne.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fee:	4b06      	ldr	r3, [pc, #24]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8007ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ffa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ffe:	4a02      	ldr	r2, [pc, #8]	@ (8008008 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8008000:	430b      	orrs	r3, r1
 8008002:	6593      	str	r3, [r2, #88]	@ 0x58
 8008004:	e006      	b.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8008006:	bf00      	nop
 8008008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008010:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008024:	2300      	movs	r3, #0
 8008026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800802a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800802e:	460b      	mov	r3, r1
 8008030:	4313      	orrs	r3, r2
 8008032:	d055      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008034:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008038:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800803c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008040:	d033      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008042:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008046:	d82c      	bhi.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800804c:	d02f      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800804e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008052:	d826      	bhi.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008054:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008058:	d02b      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800805a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800805e:	d820      	bhi.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8008060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008064:	d012      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 8008066:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800806a:	d81a      	bhi.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800806c:	2b00      	cmp	r3, #0
 800806e:	d022      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8008070:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008074:	d115      	bne.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800807a:	3308      	adds	r3, #8
 800807c:	2100      	movs	r1, #0
 800807e:	4618      	mov	r0, r3
 8008080:	f001 fc6e 	bl	8009960 <RCCEx_PLL2_Config>
 8008084:	4603      	mov	r3, r0
 8008086:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800808a:	e015      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800808c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008090:	3328      	adds	r3, #40	@ 0x28
 8008092:	2102      	movs	r1, #2
 8008094:	4618      	mov	r0, r3
 8008096:	f001 fd15 	bl	8009ac4 <RCCEx_PLL3_Config>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080a0:	e00a      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80080a8:	e006      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80080aa:	bf00      	nop
 80080ac:	e004      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80080ae:	bf00      	nop
 80080b0:	e002      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80080b2:	bf00      	nop
 80080b4:	e000      	b.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80080b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080b8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10b      	bne.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080c0:	4ba1      	ldr	r3, [pc, #644]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80080c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80080d0:	4a9d      	ldr	r2, [pc, #628]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80080d2:	430b      	orrs	r3, r1
 80080d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80080d6:	e003      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80080dc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80080e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f002 0308 	and.w	r3, r2, #8
 80080ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080f0:	2300      	movs	r3, #0
 80080f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80080fa:	460b      	mov	r3, r1
 80080fc:	4313      	orrs	r3, r2
 80080fe:	d01e      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800810c:	d10c      	bne.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800810e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008112:	3328      	adds	r3, #40	@ 0x28
 8008114:	2102      	movs	r1, #2
 8008116:	4618      	mov	r0, r3
 8008118:	f001 fcd4 	bl	8009ac4 <RCCEx_PLL3_Config>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008128:	4b87      	ldr	r3, [pc, #540]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800812a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800812c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008138:	4a83      	ldr	r2, [pc, #524]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800813a:	430b      	orrs	r3, r1
 800813c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800813e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008146:	f002 0310 	and.w	r3, r2, #16
 800814a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800814e:	2300      	movs	r3, #0
 8008150:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008154:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008158:	460b      	mov	r3, r1
 800815a:	4313      	orrs	r3, r2
 800815c:	d01e      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800815e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008162:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008166:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800816a:	d10c      	bne.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800816c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008170:	3328      	adds	r3, #40	@ 0x28
 8008172:	2102      	movs	r1, #2
 8008174:	4618      	mov	r0, r3
 8008176:	f001 fca5 	bl	8009ac4 <RCCEx_PLL3_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008186:	4b70      	ldr	r3, [pc, #448]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800818a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800818e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008192:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008196:	4a6c      	ldr	r2, [pc, #432]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008198:	430b      	orrs	r3, r1
 800819a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800819c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80081a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80081b6:	460b      	mov	r3, r1
 80081b8:	4313      	orrs	r3, r2
 80081ba:	d03e      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80081bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80081c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081c8:	d022      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80081ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081ce:	d81b      	bhi.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d003      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80081d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081d8:	d00b      	beq.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80081da:	e015      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081e0:	3308      	adds	r3, #8
 80081e2:	2100      	movs	r1, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f001 fbbb 	bl	8009960 <RCCEx_PLL2_Config>
 80081ea:	4603      	mov	r3, r0
 80081ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081f0:	e00f      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80081f6:	3328      	adds	r3, #40	@ 0x28
 80081f8:	2102      	movs	r1, #2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f001 fc62 	bl	8009ac4 <RCCEx_PLL3_Config>
 8008200:	4603      	mov	r3, r0
 8008202:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008206:	e004      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800820e:	e000      	b.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8008210:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008212:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10b      	bne.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800821a:	4b4b      	ldr	r3, [pc, #300]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800821c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800821e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008226:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800822a:	4a47      	ldr	r2, [pc, #284]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800822c:	430b      	orrs	r3, r1
 800822e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008230:	e003      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008232:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008236:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800823a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008246:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008248:	2300      	movs	r3, #0
 800824a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800824c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008250:	460b      	mov	r3, r1
 8008252:	4313      	orrs	r3, r2
 8008254:	d03b      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008256:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800825e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008262:	d01f      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8008264:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008268:	d818      	bhi.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800826a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800826e:	d003      	beq.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8008270:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008274:	d007      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8008276:	e011      	b.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008278:	4b33      	ldr	r3, [pc, #204]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800827a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827c:	4a32      	ldr	r2, [pc, #200]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800827e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008282:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008284:	e00f      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008286:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800828a:	3328      	adds	r3, #40	@ 0x28
 800828c:	2101      	movs	r1, #1
 800828e:	4618      	mov	r0, r3
 8008290:	f001 fc18 	bl	8009ac4 <RCCEx_PLL3_Config>
 8008294:	4603      	mov	r3, r0
 8008296:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800829a:	e004      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80082a2:	e000      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80082a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10b      	bne.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082ae:	4b26      	ldr	r3, [pc, #152]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80082b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80082b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082be:	4a22      	ldr	r2, [pc, #136]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80082c0:	430b      	orrs	r3, r1
 80082c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80082c4:	e003      	b.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082c6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80082ca:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80082da:	673b      	str	r3, [r7, #112]	@ 0x70
 80082dc:	2300      	movs	r3, #0
 80082de:	677b      	str	r3, [r7, #116]	@ 0x74
 80082e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80082e4:	460b      	mov	r3, r1
 80082e6:	4313      	orrs	r3, r2
 80082e8:	d034      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80082ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80082ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80082f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082f8:	d007      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80082fa:	e011      	b.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082fc:	4b12      	ldr	r3, [pc, #72]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80082fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008300:	4a11      	ldr	r2, [pc, #68]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008308:	e00e      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800830a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800830e:	3308      	adds	r3, #8
 8008310:	2102      	movs	r1, #2
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fb24 	bl	8009960 <RCCEx_PLL2_Config>
 8008318:	4603      	mov	r3, r0
 800831a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800831e:	e003      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8008326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008328:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10d      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008330:	4b05      	ldr	r3, [pc, #20]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008334:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008338:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800833c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800833e:	4a02      	ldr	r2, [pc, #8]	@ (8008348 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8008340:	430b      	orrs	r3, r1
 8008342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008344:	e006      	b.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8008346:	bf00      	nop
 8008348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800834c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008350:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008360:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008362:	2300      	movs	r3, #0
 8008364:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008366:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800836a:	460b      	mov	r3, r1
 800836c:	4313      	orrs	r3, r2
 800836e:	d00c      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008370:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008374:	3328      	adds	r3, #40	@ 0x28
 8008376:	2102      	movs	r1, #2
 8008378:	4618      	mov	r0, r3
 800837a:	f001 fba3 	bl	8009ac4 <RCCEx_PLL3_Config>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800838a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800838e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008392:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008396:	663b      	str	r3, [r7, #96]	@ 0x60
 8008398:	2300      	movs	r3, #0
 800839a:	667b      	str	r3, [r7, #100]	@ 0x64
 800839c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80083a0:	460b      	mov	r3, r1
 80083a2:	4313      	orrs	r3, r2
 80083a4:	d038      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80083aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083b2:	d018      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80083b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083b8:	d811      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80083ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083be:	d014      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80083c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c4:	d80b      	bhi.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d011      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80083ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083ce:	d106      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d0:	4bc3      	ldr	r3, [pc, #780]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d4:	4ac2      	ldr	r2, [pc, #776]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80083dc:	e008      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 80083e4:	e004      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80083e6:	bf00      	nop
 80083e8:	e002      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80083ea:	bf00      	nop
 80083ec:	e000      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80083ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10b      	bne.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083f8:	4bb9      	ldr	r3, [pc, #740]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80083fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008408:	4ab5      	ldr	r2, [pc, #724]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800840a:	430b      	orrs	r3, r1
 800840c:	6553      	str	r3, [r2, #84]	@ 0x54
 800840e:	e003      	b.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008410:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008414:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008424:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008426:	2300      	movs	r3, #0
 8008428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800842a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800842e:	460b      	mov	r3, r1
 8008430:	4313      	orrs	r3, r2
 8008432:	d009      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008434:	4baa      	ldr	r3, [pc, #680]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008438:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800843c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008442:	4aa7      	ldr	r2, [pc, #668]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008444:	430b      	orrs	r3, r1
 8008446:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008448:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008454:	653b      	str	r3, [r7, #80]	@ 0x50
 8008456:	2300      	movs	r3, #0
 8008458:	657b      	str	r3, [r7, #84]	@ 0x54
 800845a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800845e:	460b      	mov	r3, r1
 8008460:	4313      	orrs	r3, r2
 8008462:	d009      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008464:	4b9e      	ldr	r3, [pc, #632]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008466:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008468:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800846c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008472:	4a9b      	ldr	r2, [pc, #620]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008474:	430b      	orrs	r3, r1
 8008476:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8008478:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008484:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008486:	2300      	movs	r3, #0
 8008488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800848a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800848e:	460b      	mov	r3, r1
 8008490:	4313      	orrs	r3, r2
 8008492:	d009      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8008494:	4b92      	ldr	r3, [pc, #584]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008498:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800849c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084a2:	4a8f      	ldr	r2, [pc, #572]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084a4:	430b      	orrs	r3, r1
 80084a6:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80084b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084b6:	2300      	movs	r3, #0
 80084b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80084ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80084be:	460b      	mov	r3, r1
 80084c0:	4313      	orrs	r3, r2
 80084c2:	d00e      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084c4:	4b86      	ldr	r3, [pc, #536]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	4a85      	ldr	r2, [pc, #532]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084ce:	6113      	str	r3, [r2, #16]
 80084d0:	4b83      	ldr	r3, [pc, #524]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084d2:	6919      	ldr	r1, [r3, #16]
 80084d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80084dc:	4a80      	ldr	r2, [pc, #512]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80084de:	430b      	orrs	r3, r1
 80084e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80084ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084f0:	2300      	movs	r3, #0
 80084f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80084f8:	460b      	mov	r3, r1
 80084fa:	4313      	orrs	r3, r2
 80084fc:	d009      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084fe:	4b78      	ldr	r3, [pc, #480]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008502:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008506:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800850a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850c:	4a74      	ldr	r2, [pc, #464]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800850e:	430b      	orrs	r3, r1
 8008510:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800851e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008520:	2300      	movs	r3, #0
 8008522:	637b      	str	r3, [r7, #52]	@ 0x34
 8008524:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008528:	460b      	mov	r3, r1
 800852a:	4313      	orrs	r3, r2
 800852c:	d00a      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800852e:	4b6c      	ldr	r3, [pc, #432]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008532:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008536:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800853a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800853e:	4a68      	ldr	r2, [pc, #416]	@ (80086e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8008540:	430b      	orrs	r3, r1
 8008542:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008544:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854c:	2100      	movs	r1, #0
 800854e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008556:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800855a:	460b      	mov	r3, r1
 800855c:	4313      	orrs	r3, r2
 800855e:	d011      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008560:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008564:	3308      	adds	r3, #8
 8008566:	2100      	movs	r1, #0
 8008568:	4618      	mov	r0, r3
 800856a:	f001 f9f9 	bl	8009960 <RCCEx_PLL2_Config>
 800856e:	4603      	mov	r3, r0
 8008570:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008578:	2b00      	cmp	r3, #0
 800857a:	d003      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008580:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008584:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858c:	2100      	movs	r1, #0
 800858e:	6239      	str	r1, [r7, #32]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	627b      	str	r3, [r7, #36]	@ 0x24
 8008596:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800859a:	460b      	mov	r3, r1
 800859c:	4313      	orrs	r3, r2
 800859e:	d011      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085a4:	3308      	adds	r3, #8
 80085a6:	2101      	movs	r1, #1
 80085a8:	4618      	mov	r0, r3
 80085aa:	f001 f9d9 	bl	8009960 <RCCEx_PLL2_Config>
 80085ae:	4603      	mov	r3, r0
 80085b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80085b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d003      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80085c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085cc:	2100      	movs	r1, #0
 80085ce:	61b9      	str	r1, [r7, #24]
 80085d0:	f003 0304 	and.w	r3, r3, #4
 80085d4:	61fb      	str	r3, [r7, #28]
 80085d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80085da:	460b      	mov	r3, r1
 80085dc:	4313      	orrs	r3, r2
 80085de:	d011      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80085e4:	3308      	adds	r3, #8
 80085e6:	2102      	movs	r1, #2
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 f9b9 	bl	8009960 <RCCEx_PLL2_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80085f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008600:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008604:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	2100      	movs	r1, #0
 800860e:	6139      	str	r1, [r7, #16]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	617b      	str	r3, [r7, #20]
 8008616:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800861a:	460b      	mov	r3, r1
 800861c:	4313      	orrs	r3, r2
 800861e:	d011      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008620:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008624:	3328      	adds	r3, #40	@ 0x28
 8008626:	2100      	movs	r1, #0
 8008628:	4618      	mov	r0, r3
 800862a:	f001 fa4b 	bl	8009ac4 <RCCEx_PLL3_Config>
 800862e:	4603      	mov	r3, r0
 8008630:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 8008634:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008638:	2b00      	cmp	r3, #0
 800863a:	d003      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008640:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008644:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864c:	2100      	movs	r1, #0
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	f003 0310 	and.w	r3, r3, #16
 8008654:	60fb      	str	r3, [r7, #12]
 8008656:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800865a:	460b      	mov	r3, r1
 800865c:	4313      	orrs	r3, r2
 800865e:	d011      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008664:	3328      	adds	r3, #40	@ 0x28
 8008666:	2101      	movs	r1, #1
 8008668:	4618      	mov	r0, r3
 800866a:	f001 fa2b 	bl	8009ac4 <RCCEx_PLL3_Config>
 800866e:	4603      	mov	r3, r0
 8008670:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 8008674:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800867c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8008680:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008684:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868c:	2100      	movs	r1, #0
 800868e:	6039      	str	r1, [r7, #0]
 8008690:	f003 0320 	and.w	r3, r3, #32
 8008694:	607b      	str	r3, [r7, #4]
 8008696:	e9d7 1200 	ldrd	r1, r2, [r7]
 800869a:	460b      	mov	r3, r1
 800869c:	4313      	orrs	r3, r2
 800869e:	d011      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80086a4:	3328      	adds	r3, #40	@ 0x28
 80086a6:	2102      	movs	r1, #2
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 fa0b 	bl	8009ac4 <RCCEx_PLL3_Config>
 80086ae:	4603      	mov	r3, r0
 80086b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 80086b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086bc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80086c0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 80086c4:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d101      	bne.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e000      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80086d8:	46bd      	mov	sp, r7
 80086da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086de:	bf00      	nop
 80086e0:	58024400 	.word	0x58024400

080086e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b090      	sub	sp, #64	@ 0x40
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80086ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086f2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 80086f6:	430b      	orrs	r3, r1
 80086f8:	f040 8094 	bne.w	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80086fc:	4b97      	ldr	r3, [pc, #604]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80086fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008700:	f003 0307 	and.w	r3, r3, #7
 8008704:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	2b04      	cmp	r3, #4
 800870a:	f200 8087 	bhi.w	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800870e:	a201      	add	r2, pc, #4	@ (adr r2, 8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008714:	08008729 	.word	0x08008729
 8008718:	08008751 	.word	0x08008751
 800871c:	08008779 	.word	0x08008779
 8008720:	08008815 	.word	0x08008815
 8008724:	080087a1 	.word	0x080087a1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008728:	4b8c      	ldr	r3, [pc, #560]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008734:	d108      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800873a:	4618      	mov	r0, r3
 800873c:	f000 ff68 	bl	8009610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008744:	f000 bc97 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874c:	f000 bc93 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008750:	4b82      	ldr	r3, [pc, #520]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008758:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800875c:	d108      	bne.n	8008770 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800875e:	f107 0318 	add.w	r3, r7, #24
 8008762:	4618      	mov	r0, r3
 8008764:	f000 fcac 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800876c:	f000 bc83 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008770:	2300      	movs	r3, #0
 8008772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008774:	f000 bc7f 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008778:	4b78      	ldr	r3, [pc, #480]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008784:	d108      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008786:	f107 030c 	add.w	r3, r7, #12
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fdec 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008794:	f000 bc6f 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800879c:	f000 bc6b 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80087a0:	4b6e      	ldr	r3, [pc, #440]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80087a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80087a8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80087aa:	4b6c      	ldr	r3, [pc, #432]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d10c      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80087b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d109      	bne.n	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087bc:	4b67      	ldr	r3, [pc, #412]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	08db      	lsrs	r3, r3, #3
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	4a66      	ldr	r2, [pc, #408]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80087c8:	fa22 f303 	lsr.w	r3, r2, r3
 80087cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ce:	e01f      	b.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087d0:	4b62      	ldr	r3, [pc, #392]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087dc:	d106      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80087de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087e4:	d102      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087e6:	4b5f      	ldr	r3, [pc, #380]	@ (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80087e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ea:	e011      	b.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087ec:	4b5b      	ldr	r3, [pc, #364]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087f8:	d106      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80087fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008800:	d102      	bne.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008802:	4b59      	ldr	r3, [pc, #356]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008806:	e003      	b.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800880c:	f000 bc33 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008810:	f000 bc31 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008814:	4b55      	ldr	r3, [pc, #340]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008818:	f000 bc2d 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800881c:	2300      	movs	r3, #0
 800881e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008820:	f000 bc29 	b.w	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8008824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008828:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800882c:	430b      	orrs	r3, r1
 800882e:	f040 809f 	bne.w	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8008832:	4b4a      	ldr	r3, [pc, #296]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008836:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800883a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800883c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008842:	d04d      	beq.n	80088e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800884a:	f200 8084 	bhi.w	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	2bc0      	cmp	r3, #192	@ 0xc0
 8008852:	d07d      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8008854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008856:	2bc0      	cmp	r3, #192	@ 0xc0
 8008858:	d87d      	bhi.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800885a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885c:	2b80      	cmp	r3, #128	@ 0x80
 800885e:	d02d      	beq.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	2b80      	cmp	r3, #128	@ 0x80
 8008864:	d877      	bhi.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8008866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008868:	2b00      	cmp	r3, #0
 800886a:	d003      	beq.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800886c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886e:	2b40      	cmp	r3, #64	@ 0x40
 8008870:	d012      	beq.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008872:	e070      	b.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008874:	4b39      	ldr	r3, [pc, #228]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800887c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008880:	d107      	bne.n	8008892 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fec2 	bl	8009610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800888c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800888e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008890:	e3f1      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008892:	2300      	movs	r3, #0
 8008894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008896:	e3ee      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008898:	4b30      	ldr	r3, [pc, #192]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088a4:	d107      	bne.n	80088b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088a6:	f107 0318 	add.w	r3, r7, #24
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fc08 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088b4:	e3df      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ba:	e3dc      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80088bc:	4b27      	ldr	r3, [pc, #156]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c8:	d107      	bne.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088ca:	f107 030c 	add.w	r3, r7, #12
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fd4a 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088d8:	e3cd      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088de:	e3ca      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80088e0:	4b1e      	ldr	r3, [pc, #120]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80088e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80088ea:	4b1c      	ldr	r3, [pc, #112]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0304 	and.w	r3, r3, #4
 80088f2:	2b04      	cmp	r3, #4
 80088f4:	d10c      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80088f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d109      	bne.n	8008910 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80088fc:	4b17      	ldr	r3, [pc, #92]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	08db      	lsrs	r3, r3, #3
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	4a16      	ldr	r2, [pc, #88]	@ (8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8008908:	fa22 f303 	lsr.w	r3, r2, r3
 800890c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800890e:	e01e      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008910:	4b12      	ldr	r3, [pc, #72]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800891c:	d106      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800891e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008924:	d102      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008926:	4b0f      	ldr	r3, [pc, #60]	@ (8008964 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8008928:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800892a:	e010      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800892c:	4b0b      	ldr	r3, [pc, #44]	@ (800895c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008938:	d106      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800893a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800893c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008940:	d102      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008942:	4b09      	ldr	r3, [pc, #36]	@ (8008968 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8008944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008946:	e002      	b.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008948:	2300      	movs	r3, #0
 800894a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800894c:	e393      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800894e:	e392      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008950:	4b06      	ldr	r3, [pc, #24]	@ (800896c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8008952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008954:	e38f      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800895a:	e38c      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800895c:	58024400 	.word	0x58024400
 8008960:	03d09000 	.word	0x03d09000
 8008964:	003d0900 	.word	0x003d0900
 8008968:	007a1200 	.word	0x007a1200
 800896c:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8008970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008974:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008978:	430b      	orrs	r3, r1
 800897a:	f040 809c 	bne.w	8008ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800897e:	4b9e      	ldr	r3, [pc, #632]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008982:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008986:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800898e:	d054      	beq.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8008990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008992:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008996:	f200 808b 	bhi.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800899a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800899c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80089a0:	f000 8083 	beq.w	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 80089a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80089aa:	f200 8081 	bhi.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089b4:	d02f      	beq.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80089b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089bc:	d878      	bhi.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d004      	beq.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 80089c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089ca:	d012      	beq.n	80089f2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80089cc:	e070      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089ce:	4b8a      	ldr	r3, [pc, #552]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089da:	d107      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089e0:	4618      	mov	r0, r3
 80089e2:	f000 fe15 	bl	8009610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80089e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089ea:	e344      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089f0:	e341      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80089f2:	4b81      	ldr	r3, [pc, #516]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089fe:	d107      	bne.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a00:	f107 0318 	add.w	r3, r7, #24
 8008a04:	4618      	mov	r0, r3
 8008a06:	f000 fb5b 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a0e:	e332      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a10:	2300      	movs	r3, #0
 8008a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a14:	e32f      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a16:	4b78      	ldr	r3, [pc, #480]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a22:	d107      	bne.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a24:	f107 030c 	add.w	r3, r7, #12
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 fc9d 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a32:	e320      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a38:	e31d      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a3a:	4b6f      	ldr	r3, [pc, #444]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008a42:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a44:	4b6c      	ldr	r3, [pc, #432]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0304 	and.w	r3, r3, #4
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d10c      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d109      	bne.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a56:	4b68      	ldr	r3, [pc, #416]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	08db      	lsrs	r3, r3, #3
 8008a5c:	f003 0303 	and.w	r3, r3, #3
 8008a60:	4a66      	ldr	r2, [pc, #408]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008a62:	fa22 f303 	lsr.w	r3, r2, r3
 8008a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a68:	e01e      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a6a:	4b63      	ldr	r3, [pc, #396]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a76:	d106      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a7e:	d102      	bne.n	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008a80:	4b5f      	ldr	r3, [pc, #380]	@ (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a84:	e010      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a86:	4b5c      	ldr	r3, [pc, #368]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a92:	d106      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a9a:	d102      	bne.n	8008aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008a9c:	4b59      	ldr	r3, [pc, #356]	@ (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aa0:	e002      	b.n	8008aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 8008aa6:	e2e6      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008aa8:	e2e5      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008aaa:	4b57      	ldr	r3, [pc, #348]	@ (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008aae:	e2e2      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ab4:	e2df      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aba:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8008abe:	430b      	orrs	r3, r1
 8008ac0:	f040 80a7 	bne.w	8008c12 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008acc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ad4:	d055      	beq.n	8008b82 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008adc:	f200 8096 	bhi.w	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ae6:	f000 8084 	beq.w	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 8008aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008af0:	f200 808c 	bhi.w	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008afa:	d030      	beq.n	8008b5e <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b02:	f200 8083 	bhi.w	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8008b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d004      	beq.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b12:	d012      	beq.n	8008b3a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 8008b14:	e07a      	b.n	8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b16:	4b38      	ldr	r3, [pc, #224]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b22:	d107      	bne.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f000 fd71 	bl	8009610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b32:	e2a0      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b34:	2300      	movs	r3, #0
 8008b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b38:	e29d      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b46:	d107      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b48:	f107 0318 	add.w	r3, r7, #24
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 fab7 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b56:	e28e      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b5c:	e28b      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008b5e:	4b26      	ldr	r3, [pc, #152]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6a:	d107      	bne.n	8008b7c <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b6c:	f107 030c 	add.w	r3, r7, #12
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fbf9 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008b7a:	e27c      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008b80:	e279      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b82:	4b1d      	ldr	r3, [pc, #116]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b86:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b8a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0304 	and.w	r3, r3, #4
 8008b94:	2b04      	cmp	r3, #4
 8008b96:	d10c      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d109      	bne.n	8008bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b9e:	4b16      	ldr	r3, [pc, #88]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	08db      	lsrs	r3, r3, #3
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	4a14      	ldr	r2, [pc, #80]	@ (8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8008baa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bb0:	e01e      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008bb2:	4b11      	ldr	r3, [pc, #68]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bbe:	d106      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bc6:	d102      	bne.n	8008bce <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8008bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bcc:	e010      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008bce:	4b0a      	ldr	r3, [pc, #40]	@ (8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bda:	d106      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008be2:	d102      	bne.n	8008bea <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008be4:	4b07      	ldr	r3, [pc, #28]	@ (8008c04 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8008be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008be8:	e002      	b.n	8008bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008bea:	2300      	movs	r3, #0
 8008bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008bee:	e242      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008bf0:	e241      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008bf2:	4b05      	ldr	r3, [pc, #20]	@ (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8008bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008bf6:	e23e      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008bf8:	58024400 	.word	0x58024400
 8008bfc:	03d09000 	.word	0x03d09000
 8008c00:	003d0900 	.word	0x003d0900
 8008c04:	007a1200 	.word	0x007a1200
 8008c08:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008c10:	e231      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c16:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8008c1a:	430b      	orrs	r3, r1
 8008c1c:	f040 8085 	bne.w	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008c20:	4b9c      	ldr	r3, [pc, #624]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c24:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c28:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c30:	d06b      	beq.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c38:	d874      	bhi.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c40:	d056      	beq.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 8008c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c48:	d86c      	bhi.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c50:	d03b      	beq.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8008c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c58:	d864      	bhi.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c60:	d021      	beq.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8008c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c68:	d85c      	bhi.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8008c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c76:	d004      	beq.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8008c78:	e054      	b.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008c7a:	f7fe fb49 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 8008c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008c80:	e1f9      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008c82:	4b84      	ldr	r3, [pc, #528]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c8e:	d107      	bne.n	8008ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c90:	f107 0318 	add.w	r3, r7, #24
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 fa13 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008c9e:	e1ea      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ca4:	e1e7      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008cae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cb2:	d107      	bne.n	8008cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cb4:	f107 030c 	add.w	r3, r7, #12
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fb55 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cc2:	e1d8      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cc8:	e1d5      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008cca:	4b72      	ldr	r3, [pc, #456]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b04      	cmp	r3, #4
 8008cd4:	d109      	bne.n	8008cea <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008cd6:	4b6f      	ldr	r3, [pc, #444]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	08db      	lsrs	r3, r3, #3
 8008cdc:	f003 0303 	and.w	r3, r3, #3
 8008ce0:	4a6d      	ldr	r2, [pc, #436]	@ (8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ce8:	e1c5      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008cee:	e1c2      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008cf0:	4b68      	ldr	r3, [pc, #416]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008cfc:	d102      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 8008cfe:	4b67      	ldr	r3, [pc, #412]	@ (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d02:	e1b8      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d08:	e1b5      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008d0a:	4b62      	ldr	r3, [pc, #392]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d16:	d102      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8008d18:	4b61      	ldr	r3, [pc, #388]	@ (8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1c:	e1ab      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d22:	e1a8      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8008d24:	2300      	movs	r3, #0
 8008d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d28:	e1a5      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d2e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008d32:	430b      	orrs	r3, r1
 8008d34:	d173      	bne.n	8008e1e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008d36:	4b57      	ldr	r3, [pc, #348]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008d3e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d46:	d02f      	beq.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8008d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d4e:	d863      	bhi.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d5c:	d012      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8008d5e:	e05b      	b.n	8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d60:	4b4c      	ldr	r3, [pc, #304]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008d68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d6c:	d107      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d6e:	f107 0318 	add.w	r3, r7, #24
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 f9a4 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d7c:	e17b      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008d82:	e178      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d84:	4b43      	ldr	r3, [pc, #268]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d90:	d107      	bne.n	8008da2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d92:	f107 030c 	add.w	r3, r7, #12
 8008d96:	4618      	mov	r0, r3
 8008d98:	f000 fae6 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008da0:	e169      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008da6:	e166      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008da8:	4b3a      	ldr	r3, [pc, #232]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008db0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008db2:	4b38      	ldr	r3, [pc, #224]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0304 	and.w	r3, r3, #4
 8008dba:	2b04      	cmp	r3, #4
 8008dbc:	d10c      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8008dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d109      	bne.n	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008dc4:	4b33      	ldr	r3, [pc, #204]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	08db      	lsrs	r3, r3, #3
 8008dca:	f003 0303 	and.w	r3, r3, #3
 8008dce:	4a32      	ldr	r2, [pc, #200]	@ (8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008dd6:	e01e      	b.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008de4:	d106      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 8008de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008dec:	d102      	bne.n	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008dee:	4b2b      	ldr	r3, [pc, #172]	@ (8008e9c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008df2:	e010      	b.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008df4:	4b27      	ldr	r3, [pc, #156]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e00:	d106      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8008e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e08:	d102      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008e0a:	4b25      	ldr	r3, [pc, #148]	@ (8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8008e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e0e:	e002      	b.n	8008e16 <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008e10:	2300      	movs	r3, #0
 8008e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008e14:	e12f      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008e16:	e12e      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e1c:	e12b      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e22:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008e26:	430b      	orrs	r3, r1
 8008e28:	d13c      	bne.n	8008ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e32:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d004      	beq.n	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e40:	d012      	beq.n	8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8008e42:	e023      	b.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e44:	4b13      	ldr	r3, [pc, #76]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e50:	d107      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 fbda 	bl	8009610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e60:	e109      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e62:	2300      	movs	r3, #0
 8008e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e66:	e106      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e68:	4b0a      	ldr	r3, [pc, #40]	@ (8008e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e70:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e74:	d107      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e76:	f107 0318 	add.w	r3, r7, #24
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 f920 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e84:	e0f7      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008e86:	2300      	movs	r3, #0
 8008e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e8a:	e0f4      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008e90:	e0f1      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8008e92:	bf00      	nop
 8008e94:	58024400 	.word	0x58024400
 8008e98:	03d09000 	.word	0x03d09000
 8008e9c:	003d0900 	.word	0x003d0900
 8008ea0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ea8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8008eac:	430b      	orrs	r3, r1
 8008eae:	f040 8091 	bne.w	8008fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008eb2:	4b73      	ldr	r3, [pc, #460]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008eba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebe:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008ec2:	f000 8081 	beq.w	8008fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec8:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8008ecc:	d87f      	bhi.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ed4:	d06b      	beq.n	8008fae <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008edc:	d877      	bhi.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ee4:	d056      	beq.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8008ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008eec:	d86f      	bhi.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ef4:	d03b      	beq.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008efc:	d867      	bhi.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f04:	d021      	beq.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f0c:	d85f      	bhi.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d004      	beq.n	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f1a:	d004      	beq.n	8008f26 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8008f1c:	e057      	b.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008f1e:	f000 f8b9 	bl	8009094 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008f24:	e0a7      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f26:	4b56      	ldr	r3, [pc, #344]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f32:	d107      	bne.n	8008f44 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f34:	f107 0318 	add.w	r3, r7, #24
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 f8c1 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f42:	e098      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f48:	e095      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f4a:	4b4d      	ldr	r3, [pc, #308]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f56:	d107      	bne.n	8008f68 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f58:	f107 030c 	add.w	r3, r7, #12
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f000 fa03 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f66:	e086      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f6c:	e083      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008f6e:	4b44      	ldr	r3, [pc, #272]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d109      	bne.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f7a:	4b41      	ldr	r3, [pc, #260]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	08db      	lsrs	r3, r3, #3
 8008f80:	f003 0303 	and.w	r3, r3, #3
 8008f84:	4a3f      	ldr	r2, [pc, #252]	@ (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008f86:	fa22 f303 	lsr.w	r3, r2, r3
 8008f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f8c:	e073      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f92:	e070      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008f94:	4b3a      	ldr	r3, [pc, #232]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa0:	d102      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8008fa2:	4b39      	ldr	r3, [pc, #228]	@ (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8008fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fa6:	e066      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fac:	e063      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fae:	4b34      	ldr	r3, [pc, #208]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008fba:	d102      	bne.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8008fbc:	4b33      	ldr	r3, [pc, #204]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8008fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fc0:	e059      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fc6:	e056      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008fc8:	4b31      	ldr	r3, [pc, #196]	@ (8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 8008fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fcc:	e053      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008fd2:	e050      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8008fdc:	430b      	orrs	r3, r1
 8008fde:	d148      	bne.n	8009072 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008fe0:	4b27      	ldr	r3, [pc, #156]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8008fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fe4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008fe8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ff0:	d02a      	beq.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ff8:	d838      	bhi.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009006:	d00d      	beq.n	8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8009008:	e030      	b.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800900a:	4b1d      	ldr	r3, [pc, #116]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009012:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009016:	d102      	bne.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8009018:	4b1c      	ldr	r3, [pc, #112]	@ (800908c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800901a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800901c:	e02b      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800901e:	2300      	movs	r3, #0
 8009020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009022:	e028      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009024:	4b16      	ldr	r3, [pc, #88]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800902c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009030:	d107      	bne.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009036:	4618      	mov	r0, r3
 8009038:	f000 faea 	bl	8009610 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800903c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009040:	e019      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009046:	e016      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009048:	4b0d      	ldr	r3, [pc, #52]	@ (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009050:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009054:	d107      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009056:	f107 0318 	add.w	r3, r7, #24
 800905a:	4618      	mov	r0, r3
 800905c:	f000 f830 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009064:	e007      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800906a:	e004      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009070:	e001      	b.n	8009076 <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8009072:	2300      	movs	r3, #0
 8009074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009078:	4618      	mov	r0, r3
 800907a:	3740      	adds	r7, #64	@ 0x40
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	58024400 	.word	0x58024400
 8009084:	03d09000 	.word	0x03d09000
 8009088:	003d0900 	.word	0x003d0900
 800908c:	007a1200 	.word	0x007a1200
 8009090:	00bb8000 	.word	0x00bb8000

08009094 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8009098:	f7fe f90a 	bl	80072b0 <HAL_RCC_GetHCLKFreq>
 800909c:	4602      	mov	r2, r0
 800909e:	4b06      	ldr	r3, [pc, #24]	@ (80090b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80090a0:	6a1b      	ldr	r3, [r3, #32]
 80090a2:	091b      	lsrs	r3, r3, #4
 80090a4:	f003 0307 	and.w	r3, r3, #7
 80090a8:	4904      	ldr	r1, [pc, #16]	@ (80090bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80090aa:	5ccb      	ldrb	r3, [r1, r3]
 80090ac:	f003 031f 	and.w	r3, r3, #31
 80090b0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	58024400 	.word	0x58024400
 80090bc:	0800bf0c 	.word	0x0800bf0c

080090c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b089      	sub	sp, #36	@ 0x24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80090c8:	4ba1      	ldr	r3, [pc, #644]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090cc:	f003 0303 	and.w	r3, r3, #3
 80090d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80090d2:	4b9f      	ldr	r3, [pc, #636]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d6:	0b1b      	lsrs	r3, r3, #12
 80090d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80090dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80090de:	4b9c      	ldr	r3, [pc, #624]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e2:	091b      	lsrs	r3, r3, #4
 80090e4:	f003 0301 	and.w	r3, r3, #1
 80090e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80090ea:	4b99      	ldr	r3, [pc, #612]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80090ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090ee:	08db      	lsrs	r3, r3, #3
 80090f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	fb02 f303 	mul.w	r3, r2, r3
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 8111 	beq.w	8009330 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b02      	cmp	r3, #2
 8009112:	f000 8083 	beq.w	800921c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	2b02      	cmp	r3, #2
 800911a:	f200 80a1 	bhi.w	8009260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d003      	beq.n	800912c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d056      	beq.n	80091d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800912a:	e099      	b.n	8009260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800912c:	4b88      	ldr	r3, [pc, #544]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0320 	and.w	r3, r3, #32
 8009134:	2b00      	cmp	r3, #0
 8009136:	d02d      	beq.n	8009194 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009138:	4b85      	ldr	r3, [pc, #532]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	08db      	lsrs	r3, r3, #3
 800913e:	f003 0303 	and.w	r3, r3, #3
 8009142:	4a84      	ldr	r2, [pc, #528]	@ (8009354 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009144:	fa22 f303 	lsr.w	r3, r2, r3
 8009148:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	ee07 3a90 	vmov	s15, r3
 8009150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	ee07 3a90 	vmov	s15, r3
 800915a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800915e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009162:	4b7b      	ldr	r3, [pc, #492]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009172:	ed97 6a03 	vldr	s12, [r7, #12]
 8009176:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800917a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800918a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009192:	e087      	b.n	80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800935c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80091a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a6:	4b6a      	ldr	r3, [pc, #424]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80091ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80091be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091d6:	e065      	b.n	80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	ee07 3a90 	vmov	s15, r3
 80091de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80091e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ea:	4b59      	ldr	r3, [pc, #356]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091f2:	ee07 3a90 	vmov	s15, r3
 80091f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80091fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800920a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800920e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800921a:	e043      	b.n	80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009226:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800922a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922e:	4b48      	ldr	r3, [pc, #288]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009242:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800924a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800925e:	e021      	b.n	80092a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	ee07 3a90 	vmov	s15, r3
 8009266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800926e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009272:	4b37      	ldr	r3, [pc, #220]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800927a:	ee07 3a90 	vmov	s15, r3
 800927e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009282:	ed97 6a03 	vldr	s12, [r7, #12]
 8009286:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800928a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800928e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800929a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800929e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80092a4:	4b2a      	ldr	r3, [pc, #168]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a8:	0a5b      	lsrs	r3, r3, #9
 80092aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092be:	edd7 6a07 	vldr	s13, [r7, #28]
 80092c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ca:	ee17 2a90 	vmov	r2, s15
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80092d2:	4b1f      	ldr	r3, [pc, #124]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d6:	0c1b      	lsrs	r3, r3, #16
 80092d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092dc:	ee07 3a90 	vmov	s15, r3
 80092e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80092ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80092f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092f8:	ee17 2a90 	vmov	r2, s15
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009300:	4b13      	ldr	r3, [pc, #76]	@ (8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009304:	0e1b      	lsrs	r3, r3, #24
 8009306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009312:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800931a:	edd7 6a07 	vldr	s13, [r7, #28]
 800931e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009326:	ee17 2a90 	vmov	r2, s15
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800932e:	e008      	b.n	8009342 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2200      	movs	r2, #0
 8009340:	609a      	str	r2, [r3, #8]
}
 8009342:	bf00      	nop
 8009344:	3724      	adds	r7, #36	@ 0x24
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr
 800934e:	bf00      	nop
 8009350:	58024400 	.word	0x58024400
 8009354:	03d09000 	.word	0x03d09000
 8009358:	46000000 	.word	0x46000000
 800935c:	4c742400 	.word	0x4c742400
 8009360:	4a742400 	.word	0x4a742400
 8009364:	4af42400 	.word	0x4af42400

08009368 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009368:	b480      	push	{r7}
 800936a:	b089      	sub	sp, #36	@ 0x24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009370:	4ba1      	ldr	r3, [pc, #644]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800937a:	4b9f      	ldr	r3, [pc, #636]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800937c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937e:	0d1b      	lsrs	r3, r3, #20
 8009380:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009384:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009386:	4b9c      	ldr	r3, [pc, #624]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938a:	0a1b      	lsrs	r3, r3, #8
 800938c:	f003 0301 	and.w	r3, r3, #1
 8009390:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009392:	4b99      	ldr	r3, [pc, #612]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009396:	08db      	lsrs	r3, r3, #3
 8009398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	fb02 f303 	mul.w	r3, r2, r3
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f000 8111 	beq.w	80095d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	f000 8083 	beq.w	80094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80093be:	69bb      	ldr	r3, [r7, #24]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	f200 80a1 	bhi.w	8009508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d056      	beq.n	8009480 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80093d2:	e099      	b.n	8009508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093d4:	4b88      	ldr	r3, [pc, #544]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0320 	and.w	r3, r3, #32
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d02d      	beq.n	800943c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093e0:	4b85      	ldr	r3, [pc, #532]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	08db      	lsrs	r3, r3, #3
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	4a84      	ldr	r2, [pc, #528]	@ (80095fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80093ec:	fa22 f303 	lsr.w	r3, r2, r3
 80093f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	ee07 3a90 	vmov	s15, r3
 80093f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800940a:	4b7b      	ldr	r3, [pc, #492]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009412:	ee07 3a90 	vmov	s15, r3
 8009416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800941a:	ed97 6a03 	vldr	s12, [r7, #12]
 800941e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800942a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800942e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009436:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800943a:	e087      	b.n	800954c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	ee07 3a90 	vmov	s15, r3
 8009442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009446:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800944a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800944e:	4b6a      	ldr	r3, [pc, #424]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009456:	ee07 3a90 	vmov	s15, r3
 800945a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800945e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009462:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800946a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800946e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800947a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800947e:	e065      	b.n	800954c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800948a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800948e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009492:	4b59      	ldr	r3, [pc, #356]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800949a:	ee07 3a90 	vmov	s15, r3
 800949e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80094c2:	e043      	b.n	800954c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	ee07 3a90 	vmov	s15, r3
 80094ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800960c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80094d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094d6:	4b48      	ldr	r3, [pc, #288]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80094ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80094fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009506:	e021      	b.n	800954c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	ee07 3a90 	vmov	s15, r3
 800950e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009512:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800951a:	4b37      	ldr	r3, [pc, #220]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800951c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800951e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800952a:	ed97 6a03 	vldr	s12, [r7, #12]
 800952e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800953a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800953e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800954a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800954c:	4b2a      	ldr	r3, [pc, #168]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800954e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009550:	0a5b      	lsrs	r3, r3, #9
 8009552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009566:	edd7 6a07 	vldr	s13, [r7, #28]
 800956a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800956e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009572:	ee17 2a90 	vmov	r2, s15
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800957a:	4b1f      	ldr	r3, [pc, #124]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800957c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800957e:	0c1b      	lsrs	r3, r3, #16
 8009580:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009584:	ee07 3a90 	vmov	s15, r3
 8009588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009594:	edd7 6a07 	vldr	s13, [r7, #28]
 8009598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800959c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095a0:	ee17 2a90 	vmov	r2, s15
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80095a8:	4b13      	ldr	r3, [pc, #76]	@ (80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ac:	0e1b      	lsrs	r3, r3, #24
 80095ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095b2:	ee07 3a90 	vmov	s15, r3
 80095b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80095be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80095c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80095c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80095ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80095ce:	ee17 2a90 	vmov	r2, s15
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80095d6:	e008      	b.n	80095ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	609a      	str	r2, [r3, #8]
}
 80095ea:	bf00      	nop
 80095ec:	3724      	adds	r7, #36	@ 0x24
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	58024400 	.word	0x58024400
 80095fc:	03d09000 	.word	0x03d09000
 8009600:	46000000 	.word	0x46000000
 8009604:	4c742400 	.word	0x4c742400
 8009608:	4a742400 	.word	0x4a742400
 800960c:	4af42400 	.word	0x4af42400

08009610 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009610:	b480      	push	{r7}
 8009612:	b089      	sub	sp, #36	@ 0x24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009618:	4ba0      	ldr	r3, [pc, #640]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800961a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961c:	f003 0303 	and.w	r3, r3, #3
 8009620:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009622:	4b9e      	ldr	r3, [pc, #632]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009626:	091b      	lsrs	r3, r3, #4
 8009628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800962c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800962e:	4b9b      	ldr	r3, [pc, #620]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009638:	4b98      	ldr	r3, [pc, #608]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800963a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800963c:	08db      	lsrs	r3, r3, #3
 800963e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	fb02 f303 	mul.w	r3, r2, r3
 8009648:	ee07 3a90 	vmov	s15, r3
 800964c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009650:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	2b00      	cmp	r3, #0
 8009658:	f000 8111 	beq.w	800987e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	2b02      	cmp	r3, #2
 8009660:	f000 8083 	beq.w	800976a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	2b02      	cmp	r3, #2
 8009668:	f200 80a1 	bhi.w	80097ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d056      	beq.n	8009726 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009678:	e099      	b.n	80097ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800967a:	4b88      	ldr	r3, [pc, #544]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0320 	and.w	r3, r3, #32
 8009682:	2b00      	cmp	r3, #0
 8009684:	d02d      	beq.n	80096e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009686:	4b85      	ldr	r3, [pc, #532]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	08db      	lsrs	r3, r3, #3
 800968c:	f003 0303 	and.w	r3, r3, #3
 8009690:	4a83      	ldr	r2, [pc, #524]	@ (80098a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009692:	fa22 f303 	lsr.w	r3, r2, r3
 8009696:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	ee07 3a90 	vmov	s15, r3
 800969e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	ee07 3a90 	vmov	s15, r3
 80096a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096b0:	4b7a      	ldr	r3, [pc, #488]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80096c4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80098a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80096c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096dc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80096e0:	e087      	b.n	80097f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	ee07 3a90 	vmov	s15, r3
 80096e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ec:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 80098a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80096f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096f4:	4b69      	ldr	r3, [pc, #420]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80096f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096fc:	ee07 3a90 	vmov	s15, r3
 8009700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009704:	ed97 6a03 	vldr	s12, [r7, #12]
 8009708:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80098a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800970c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009714:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800971c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009720:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009724:	e065      	b.n	80097f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	ee07 3a90 	vmov	s15, r3
 800972c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009730:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 80098ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009738:	4b58      	ldr	r3, [pc, #352]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800973a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800973c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009740:	ee07 3a90 	vmov	s15, r3
 8009744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009748:	ed97 6a03 	vldr	s12, [r7, #12]
 800974c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80098a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009758:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800975c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009764:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009768:	e043      	b.n	80097f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	ee07 3a90 	vmov	s15, r3
 8009770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009774:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 80098b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800977c:	4b47      	ldr	r3, [pc, #284]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800977e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009784:	ee07 3a90 	vmov	s15, r3
 8009788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800978c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009790:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80098a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800979c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097ac:	e021      	b.n	80097f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	ee07 3a90 	vmov	s15, r3
 80097b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80098a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80097bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097c0:	4b36      	ldr	r3, [pc, #216]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c8:	ee07 3a90 	vmov	s15, r3
 80097cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80097d4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80098a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80097d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80097f2:	4b2a      	ldr	r3, [pc, #168]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f6:	0a5b      	lsrs	r3, r3, #9
 80097f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097fc:	ee07 3a90 	vmov	s15, r3
 8009800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009804:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009808:	ee37 7a87 	vadd.f32	s14, s15, s14
 800980c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009818:	ee17 2a90 	vmov	r2, s15
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009820:	4b1e      	ldr	r3, [pc, #120]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009824:	0c1b      	lsrs	r3, r3, #16
 8009826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800982a:	ee07 3a90 	vmov	s15, r3
 800982e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009832:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800983a:	edd7 6a07 	vldr	s13, [r7, #28]
 800983e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009846:	ee17 2a90 	vmov	r2, s15
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800984e:	4b13      	ldr	r3, [pc, #76]	@ (800989c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009852:	0e1b      	lsrs	r3, r3, #24
 8009854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009868:	edd7 6a07 	vldr	s13, [r7, #28]
 800986c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009874:	ee17 2a90 	vmov	r2, s15
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800987c:	e008      	b.n	8009890 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	609a      	str	r2, [r3, #8]
}
 8009890:	bf00      	nop
 8009892:	3724      	adds	r7, #36	@ 0x24
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	58024400 	.word	0x58024400
 80098a0:	03d09000 	.word	0x03d09000
 80098a4:	46000000 	.word	0x46000000
 80098a8:	4c742400 	.word	0x4c742400
 80098ac:	4a742400 	.word	0x4a742400
 80098b0:	4af42400 	.word	0x4af42400

080098b4 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80098bc:	4b26      	ldr	r3, [pc, #152]	@ (8009958 <HAL_RCCEx_CRSConfig+0xa4>)
 80098be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098c2:	4a25      	ldr	r2, [pc, #148]	@ (8009958 <HAL_RCCEx_CRSConfig+0xa4>)
 80098c4:	f043 0302 	orr.w	r3, r3, #2
 80098c8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 80098cc:	4b22      	ldr	r3, [pc, #136]	@ (8009958 <HAL_RCCEx_CRSConfig+0xa4>)
 80098ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098d2:	4a21      	ldr	r2, [pc, #132]	@ (8009958 <HAL_RCCEx_CRSConfig+0xa4>)
 80098d4:	f023 0302 	bic.w	r3, r3, #2
 80098d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 80098dc:	f7f7 fd9c 	bl	8001418 <HAL_GetREVID>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d80b      	bhi.n	8009902 <HAL_RCCEx_CRSConfig+0x4e>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80098f2:	d106      	bne.n	8009902 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e008      	b.n	8009914 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	4313      	orrs	r3, r2
 8009912:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4313      	orrs	r3, r2
 800991c:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	041b      	lsls	r3, r3, #16
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	4313      	orrs	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800992a:	4a0c      	ldr	r2, [pc, #48]	@ (800995c <HAL_RCCEx_CRSConfig+0xa8>)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8009930:	4b0a      	ldr	r3, [pc, #40]	@ (800995c <HAL_RCCEx_CRSConfig+0xa8>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	021b      	lsls	r3, r3, #8
 800993e:	4907      	ldr	r1, [pc, #28]	@ (800995c <HAL_RCCEx_CRSConfig+0xa8>)
 8009940:	4313      	orrs	r3, r2
 8009942:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8009944:	4b05      	ldr	r3, [pc, #20]	@ (800995c <HAL_RCCEx_CRSConfig+0xa8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a04      	ldr	r2, [pc, #16]	@ (800995c <HAL_RCCEx_CRSConfig+0xa8>)
 800994a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800994e:	6013      	str	r3, [r2, #0]
}
 8009950:	bf00      	nop
 8009952:	3710      	adds	r7, #16
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}
 8009958:	58024400 	.word	0x58024400
 800995c:	40008400 	.word	0x40008400

08009960 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800996e:	4b53      	ldr	r3, [pc, #332]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009972:	f003 0303 	and.w	r3, r3, #3
 8009976:	2b03      	cmp	r3, #3
 8009978:	d101      	bne.n	800997e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e099      	b.n	8009ab2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800997e:	4b4f      	ldr	r3, [pc, #316]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a4e      	ldr	r2, [pc, #312]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009984:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009988:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800998a:	f7f7 fd39 	bl	8001400 <HAL_GetTick>
 800998e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009990:	e008      	b.n	80099a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009992:	f7f7 fd35 	bl	8001400 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	2b02      	cmp	r3, #2
 800999e:	d901      	bls.n	80099a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e086      	b.n	8009ab2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80099a4:	4b45      	ldr	r3, [pc, #276]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1f0      	bne.n	8009992 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80099b0:	4b42      	ldr	r3, [pc, #264]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 80099b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	031b      	lsls	r3, r3, #12
 80099be:	493f      	ldr	r1, [pc, #252]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	3b01      	subs	r3, #1
 80099d4:	025b      	lsls	r3, r3, #9
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	431a      	orrs	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	3b01      	subs	r3, #1
 80099e0:	041b      	lsls	r3, r3, #16
 80099e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099e6:	431a      	orrs	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	691b      	ldr	r3, [r3, #16]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	061b      	lsls	r3, r3, #24
 80099f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099f4:	4931      	ldr	r1, [pc, #196]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80099fa:	4b30      	ldr	r3, [pc, #192]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 80099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	492d      	ldr	r1, [pc, #180]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a10:	f023 0220 	bic.w	r2, r3, #32
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	4928      	ldr	r1, [pc, #160]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a1a:	4313      	orrs	r3, r2
 8009a1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009a1e:	4b27      	ldr	r3, [pc, #156]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a22:	4a26      	ldr	r2, [pc, #152]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a24:	f023 0310 	bic.w	r3, r3, #16
 8009a28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009a2a:	4b24      	ldr	r3, [pc, #144]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a2e:	4b24      	ldr	r3, [pc, #144]	@ (8009ac0 <RCCEx_PLL2_Config+0x160>)
 8009a30:	4013      	ands	r3, r2
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	69d2      	ldr	r2, [r2, #28]
 8009a36:	00d2      	lsls	r2, r2, #3
 8009a38:	4920      	ldr	r1, [pc, #128]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a42:	4a1e      	ldr	r2, [pc, #120]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a44:	f043 0310 	orr.w	r3, r3, #16
 8009a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d106      	bne.n	8009a5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a50:	4b1a      	ldr	r3, [pc, #104]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a54:	4a19      	ldr	r2, [pc, #100]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a5c:	e00f      	b.n	8009a7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d106      	bne.n	8009a72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a64:	4b15      	ldr	r3, [pc, #84]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a68:	4a14      	ldr	r2, [pc, #80]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a70:	e005      	b.n	8009a7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a72:	4b12      	ldr	r3, [pc, #72]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a76:	4a11      	ldr	r2, [pc, #68]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a0e      	ldr	r2, [pc, #56]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009a84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a8a:	f7f7 fcb9 	bl	8001400 <HAL_GetTick>
 8009a8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a90:	e008      	b.n	8009aa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a92:	f7f7 fcb5 	bl	8001400 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d901      	bls.n	8009aa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	e006      	b.n	8009ab2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009aa4:	4b05      	ldr	r3, [pc, #20]	@ (8009abc <RCCEx_PLL2_Config+0x15c>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d0f0      	beq.n	8009a92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	58024400 	.word	0x58024400
 8009ac0:	ffff0007 	.word	0xffff0007

08009ac4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009ad2:	4b53      	ldr	r3, [pc, #332]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad6:	f003 0303 	and.w	r3, r3, #3
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d101      	bne.n	8009ae2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e099      	b.n	8009c16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a4e      	ldr	r2, [pc, #312]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009ae8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aee:	f7f7 fc87 	bl	8001400 <HAL_GetTick>
 8009af2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009af4:	e008      	b.n	8009b08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009af6:	f7f7 fc83 	bl	8001400 <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	2b02      	cmp	r3, #2
 8009b02:	d901      	bls.n	8009b08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e086      	b.n	8009c16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b08:	4b45      	ldr	r3, [pc, #276]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1f0      	bne.n	8009af6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009b14:	4b42      	ldr	r3, [pc, #264]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b18:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	051b      	lsls	r3, r3, #20
 8009b22:	493f      	ldr	r1, [pc, #252]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	628b      	str	r3, [r1, #40]	@ 0x28
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	689b      	ldr	r3, [r3, #8]
 8009b36:	3b01      	subs	r3, #1
 8009b38:	025b      	lsls	r3, r3, #9
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	431a      	orrs	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	3b01      	subs	r3, #1
 8009b44:	041b      	lsls	r3, r3, #16
 8009b46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b4a:	431a      	orrs	r2, r3
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	061b      	lsls	r3, r3, #24
 8009b54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b58:	4931      	ldr	r1, [pc, #196]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b5e:	4b30      	ldr	r3, [pc, #192]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	492d      	ldr	r1, [pc, #180]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b70:	4b2b      	ldr	r3, [pc, #172]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	4928      	ldr	r1, [pc, #160]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b82:	4b27      	ldr	r3, [pc, #156]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b86:	4a26      	ldr	r2, [pc, #152]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b8e:	4b24      	ldr	r3, [pc, #144]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b92:	4b24      	ldr	r3, [pc, #144]	@ (8009c24 <RCCEx_PLL3_Config+0x160>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	69d2      	ldr	r2, [r2, #28]
 8009b9a:	00d2      	lsls	r2, r2, #3
 8009b9c:	4920      	ldr	r1, [pc, #128]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba6:	4a1e      	ldr	r2, [pc, #120]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d106      	bne.n	8009bc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bb8:	4a19      	ldr	r2, [pc, #100]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009bba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009bbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009bc0:	e00f      	b.n	8009be2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d106      	bne.n	8009bd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009bc8:	4b15      	ldr	r3, [pc, #84]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bcc:	4a14      	ldr	r2, [pc, #80]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009bce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009bd4:	e005      	b.n	8009be2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009bd6:	4b12      	ldr	r3, [pc, #72]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bda:	4a11      	ldr	r2, [pc, #68]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009bdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009be0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009be2:	4b0f      	ldr	r3, [pc, #60]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a0e      	ldr	r2, [pc, #56]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bee:	f7f7 fc07 	bl	8001400 <HAL_GetTick>
 8009bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bf4:	e008      	b.n	8009c08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bf6:	f7f7 fc03 	bl	8001400 <HAL_GetTick>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d901      	bls.n	8009c08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c04:	2303      	movs	r3, #3
 8009c06:	e006      	b.n	8009c16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c08:	4b05      	ldr	r3, [pc, #20]	@ (8009c20 <RCCEx_PLL3_Config+0x15c>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d0f0      	beq.n	8009bf6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	58024400 	.word	0x58024400
 8009c24:	ffff0007 	.word	0xffff0007

08009c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d101      	bne.n	8009c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e049      	b.n	8009cce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d106      	bne.n	8009c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7f7 f9ca 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2202      	movs	r2, #2
 8009c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3304      	adds	r3, #4
 8009c64:	4619      	mov	r1, r3
 8009c66:	4610      	mov	r0, r2
 8009c68:	f000 f92e 	bl	8009ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
	...

08009cd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d101      	bne.n	8009cf4 <HAL_TIM_ConfigClockSource+0x1c>
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	e0dc      	b.n	8009eae <HAL_TIM_ConfigClockSource+0x1d6>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8009eb8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009d10:	4013      	ands	r3, r2
 8009d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a64      	ldr	r2, [pc, #400]	@ (8009ebc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	f000 80a9 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d30:	4a62      	ldr	r2, [pc, #392]	@ (8009ebc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	f200 80ae 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d38:	4a61      	ldr	r2, [pc, #388]	@ (8009ec0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	f000 80a1 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d40:	4a5f      	ldr	r2, [pc, #380]	@ (8009ec0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	f200 80a6 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d48:	4a5e      	ldr	r2, [pc, #376]	@ (8009ec4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	f000 8099 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d50:	4a5c      	ldr	r2, [pc, #368]	@ (8009ec4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	f200 809e 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d5c:	f000 8091 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d60:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009d64:	f200 8096 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d6c:	f000 8089 	beq.w	8009e82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009d70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d74:	f200 808e 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d7c:	d03e      	beq.n	8009dfc <HAL_TIM_ConfigClockSource+0x124>
 8009d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d82:	f200 8087 	bhi.w	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d8a:	f000 8086 	beq.w	8009e9a <HAL_TIM_ConfigClockSource+0x1c2>
 8009d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d92:	d87f      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d94:	2b70      	cmp	r3, #112	@ 0x70
 8009d96:	d01a      	beq.n	8009dce <HAL_TIM_ConfigClockSource+0xf6>
 8009d98:	2b70      	cmp	r3, #112	@ 0x70
 8009d9a:	d87b      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009d9c:	2b60      	cmp	r3, #96	@ 0x60
 8009d9e:	d050      	beq.n	8009e42 <HAL_TIM_ConfigClockSource+0x16a>
 8009da0:	2b60      	cmp	r3, #96	@ 0x60
 8009da2:	d877      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009da4:	2b50      	cmp	r3, #80	@ 0x50
 8009da6:	d03c      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x14a>
 8009da8:	2b50      	cmp	r3, #80	@ 0x50
 8009daa:	d873      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009dac:	2b40      	cmp	r3, #64	@ 0x40
 8009dae:	d058      	beq.n	8009e62 <HAL_TIM_ConfigClockSource+0x18a>
 8009db0:	2b40      	cmp	r3, #64	@ 0x40
 8009db2:	d86f      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009db4:	2b30      	cmp	r3, #48	@ 0x30
 8009db6:	d064      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009db8:	2b30      	cmp	r3, #48	@ 0x30
 8009dba:	d86b      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009dbc:	2b20      	cmp	r3, #32
 8009dbe:	d060      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009dc0:	2b20      	cmp	r3, #32
 8009dc2:	d867      	bhi.n	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d05c      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d05a      	beq.n	8009e82 <HAL_TIM_ConfigClockSource+0x1aa>
 8009dcc:	e062      	b.n	8009e94 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dde:	f000 f997 	bl	800a110 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009df0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	609a      	str	r2, [r3, #8]
      break;
 8009dfa:	e04f      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009e0c:	f000 f980 	bl	800a110 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	689a      	ldr	r2, [r3, #8]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e1e:	609a      	str	r2, [r3, #8]
      break;
 8009e20:	e03c      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e2e:	461a      	mov	r2, r3
 8009e30:	f000 f8f0 	bl	800a014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2150      	movs	r1, #80	@ 0x50
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f000 f94a 	bl	800a0d4 <TIM_ITRx_SetConfig>
      break;
 8009e40:	e02c      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e4e:	461a      	mov	r2, r3
 8009e50:	f000 f90f 	bl	800a072 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2160      	movs	r1, #96	@ 0x60
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 f93a 	bl	800a0d4 <TIM_ITRx_SetConfig>
      break;
 8009e60:	e01c      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f000 f8d0 	bl	800a014 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2140      	movs	r1, #64	@ 0x40
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 f92a 	bl	800a0d4 <TIM_ITRx_SetConfig>
      break;
 8009e80:	e00c      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	4610      	mov	r0, r2
 8009e8e:	f000 f921 	bl	800a0d4 <TIM_ITRx_SetConfig>
      break;
 8009e92:	e003      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	73fb      	strb	r3, [r7, #15]
      break;
 8009e98:	e000      	b.n	8009e9c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8009e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	ffceff88 	.word	0xffceff88
 8009ebc:	00100040 	.word	0x00100040
 8009ec0:	00100030 	.word	0x00100030
 8009ec4:	00100020 	.word	0x00100020

08009ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b085      	sub	sp, #20
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
 8009ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a46      	ldr	r2, [pc, #280]	@ (8009ff4 <TIM_Base_SetConfig+0x12c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d013      	beq.n	8009f08 <TIM_Base_SetConfig+0x40>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ee6:	d00f      	beq.n	8009f08 <TIM_Base_SetConfig+0x40>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a43      	ldr	r2, [pc, #268]	@ (8009ff8 <TIM_Base_SetConfig+0x130>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d00b      	beq.n	8009f08 <TIM_Base_SetConfig+0x40>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a42      	ldr	r2, [pc, #264]	@ (8009ffc <TIM_Base_SetConfig+0x134>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d007      	beq.n	8009f08 <TIM_Base_SetConfig+0x40>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a41      	ldr	r2, [pc, #260]	@ (800a000 <TIM_Base_SetConfig+0x138>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d003      	beq.n	8009f08 <TIM_Base_SetConfig+0x40>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a40      	ldr	r2, [pc, #256]	@ (800a004 <TIM_Base_SetConfig+0x13c>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d108      	bne.n	8009f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	4313      	orrs	r3, r2
 8009f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a35      	ldr	r2, [pc, #212]	@ (8009ff4 <TIM_Base_SetConfig+0x12c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d01f      	beq.n	8009f62 <TIM_Base_SetConfig+0x9a>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f28:	d01b      	beq.n	8009f62 <TIM_Base_SetConfig+0x9a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a32      	ldr	r2, [pc, #200]	@ (8009ff8 <TIM_Base_SetConfig+0x130>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d017      	beq.n	8009f62 <TIM_Base_SetConfig+0x9a>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a31      	ldr	r2, [pc, #196]	@ (8009ffc <TIM_Base_SetConfig+0x134>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d013      	beq.n	8009f62 <TIM_Base_SetConfig+0x9a>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a30      	ldr	r2, [pc, #192]	@ (800a000 <TIM_Base_SetConfig+0x138>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00f      	beq.n	8009f62 <TIM_Base_SetConfig+0x9a>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a2f      	ldr	r2, [pc, #188]	@ (800a004 <TIM_Base_SetConfig+0x13c>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d00b      	beq.n	8009f62 <TIM_Base_SetConfig+0x9a>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a2e      	ldr	r2, [pc, #184]	@ (800a008 <TIM_Base_SetConfig+0x140>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d007      	beq.n	8009f62 <TIM_Base_SetConfig+0x9a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a2d      	ldr	r2, [pc, #180]	@ (800a00c <TIM_Base_SetConfig+0x144>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d003      	beq.n	8009f62 <TIM_Base_SetConfig+0x9a>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4a2c      	ldr	r2, [pc, #176]	@ (800a010 <TIM_Base_SetConfig+0x148>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d108      	bne.n	8009f74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	695b      	ldr	r3, [r3, #20]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	68fa      	ldr	r2, [r7, #12]
 8009f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a16      	ldr	r2, [pc, #88]	@ (8009ff4 <TIM_Base_SetConfig+0x12c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d00f      	beq.n	8009fc0 <TIM_Base_SetConfig+0xf8>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a18      	ldr	r2, [pc, #96]	@ (800a004 <TIM_Base_SetConfig+0x13c>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d00b      	beq.n	8009fc0 <TIM_Base_SetConfig+0xf8>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a17      	ldr	r2, [pc, #92]	@ (800a008 <TIM_Base_SetConfig+0x140>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d007      	beq.n	8009fc0 <TIM_Base_SetConfig+0xf8>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a16      	ldr	r2, [pc, #88]	@ (800a00c <TIM_Base_SetConfig+0x144>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d003      	beq.n	8009fc0 <TIM_Base_SetConfig+0xf8>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a15      	ldr	r2, [pc, #84]	@ (800a010 <TIM_Base_SetConfig+0x148>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d103      	bne.n	8009fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	691a      	ldr	r2, [r3, #16]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d105      	bne.n	8009fe6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	f023 0201 	bic.w	r2, r3, #1
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	611a      	str	r2, [r3, #16]
  }
}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	40010000 	.word	0x40010000
 8009ff8:	40000400 	.word	0x40000400
 8009ffc:	40000800 	.word	0x40000800
 800a000:	40000c00 	.word	0x40000c00
 800a004:	40010400 	.word	0x40010400
 800a008:	40014000 	.word	0x40014000
 800a00c:	40014400 	.word	0x40014400
 800a010:	40014800 	.word	0x40014800

0800a014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6a1b      	ldr	r3, [r3, #32]
 800a024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6a1b      	ldr	r3, [r3, #32]
 800a02a:	f023 0201 	bic.w	r2, r3, #1
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a03e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	011b      	lsls	r3, r3, #4
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	4313      	orrs	r3, r2
 800a048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f023 030a 	bic.w	r3, r3, #10
 800a050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	4313      	orrs	r3, r2
 800a058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	693a      	ldr	r2, [r7, #16]
 800a05e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	621a      	str	r2, [r3, #32]
}
 800a066:	bf00      	nop
 800a068:	371c      	adds	r7, #28
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a072:	b480      	push	{r7}
 800a074:	b087      	sub	sp, #28
 800a076:	af00      	add	r7, sp, #0
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	60b9      	str	r1, [r7, #8]
 800a07c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a1b      	ldr	r3, [r3, #32]
 800a088:	f023 0210 	bic.w	r2, r3, #16
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a09c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	031b      	lsls	r3, r3, #12
 800a0a2:	693a      	ldr	r2, [r7, #16]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a0ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	011b      	lsls	r3, r3, #4
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	621a      	str	r2, [r3, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
	...

0800a0d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	4b09      	ldr	r3, [pc, #36]	@ (800a10c <TIM_ITRx_SetConfig+0x38>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	f043 0307 	orr.w	r3, r3, #7
 800a0f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	609a      	str	r2, [r3, #8]
}
 800a0fe:	bf00      	nop
 800a100:	3714      	adds	r7, #20
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	ffcfff8f 	.word	0xffcfff8f

0800a110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a12a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	021a      	lsls	r2, r3, #8
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	431a      	orrs	r2, r3
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4313      	orrs	r3, r2
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	609a      	str	r2, [r3, #8]
}
 800a144:	bf00      	nop
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a160:	2b01      	cmp	r3, #1
 800a162:	d101      	bne.n	800a168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a164:	2302      	movs	r3, #2
 800a166:	e06d      	b.n	800a244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2202      	movs	r2, #2
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a30      	ldr	r2, [pc, #192]	@ (800a250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d004      	beq.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a2f      	ldr	r2, [pc, #188]	@ (800a254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d108      	bne.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a1a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a20      	ldr	r2, [pc, #128]	@ (800a250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d022      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1da:	d01d      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d018      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a1c      	ldr	r2, [pc, #112]	@ (800a25c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d013      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a1a      	ldr	r2, [pc, #104]	@ (800a260 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00e      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a15      	ldr	r2, [pc, #84]	@ (800a254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d009      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a16      	ldr	r2, [pc, #88]	@ (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d004      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a15      	ldr	r2, [pc, #84]	@ (800a268 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d10c      	bne.n	800a232 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a21e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	4313      	orrs	r3, r2
 800a228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	40010000 	.word	0x40010000
 800a254:	40010400 	.word	0x40010400
 800a258:	40000400 	.word	0x40000400
 800a25c:	40000800 	.word	0x40000800
 800a260:	40000c00 	.word	0x40000c00
 800a264:	40001800 	.word	0x40001800
 800a268:	40014000 	.word	0x40014000

0800a26c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e042      	b.n	800a304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a284:	2b00      	cmp	r3, #0
 800a286:	d106      	bne.n	800a296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7f6 fec9 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2224      	movs	r2, #36	@ 0x24
 800a29a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f022 0201 	bic.w	r2, r2, #1
 800a2ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 fa6e 	bl	800b798 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fbff 	bl	800aac0 <UART_SetConfig>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d101      	bne.n	800a2cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e01b      	b.n	800a304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a2da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0201 	orr.w	r2, r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f001 faed 	bl	800b8dc <UART_CheckIdleState>
 800a302:	4603      	mov	r3, r0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b0ba      	sub	sp, #232	@ 0xe8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	69db      	ldr	r3, [r3, #28]
 800a31a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a332:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a336:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a33a:	4013      	ands	r3, r2
 800a33c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a340:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a344:	2b00      	cmp	r3, #0
 800a346:	d11b      	bne.n	800a380 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a34c:	f003 0320 	and.w	r3, r3, #32
 800a350:	2b00      	cmp	r3, #0
 800a352:	d015      	beq.n	800a380 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a358:	f003 0320 	and.w	r3, r3, #32
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d105      	bne.n	800a36c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a360:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d009      	beq.n	800a380 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a370:	2b00      	cmp	r3, #0
 800a372:	f000 8377 	beq.w	800aa64 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	4798      	blx	r3
      }
      return;
 800a37e:	e371      	b.n	800aa64 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 8123 	beq.w	800a5d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a38a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a38e:	4b8d      	ldr	r3, [pc, #564]	@ (800a5c4 <HAL_UART_IRQHandler+0x2b8>)
 800a390:	4013      	ands	r3, r2
 800a392:	2b00      	cmp	r3, #0
 800a394:	d106      	bne.n	800a3a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a396:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a39a:	4b8b      	ldr	r3, [pc, #556]	@ (800a5c8 <HAL_UART_IRQHandler+0x2bc>)
 800a39c:	4013      	ands	r3, r2
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 8116 	beq.w	800a5d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d011      	beq.n	800a3d4 <HAL_UART_IRQHandler+0xc8>
 800a3b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d00b      	beq.n	800a3d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3ca:	f043 0201 	orr.w	r2, r3, #1
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3d8:	f003 0302 	and.w	r3, r3, #2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d011      	beq.n	800a404 <HAL_UART_IRQHandler+0xf8>
 800a3e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a3e4:	f003 0301 	and.w	r3, r3, #1
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00b      	beq.n	800a404 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2202      	movs	r2, #2
 800a3f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3fa:	f043 0204 	orr.w	r2, r3, #4
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d011      	beq.n	800a434 <HAL_UART_IRQHandler+0x128>
 800a410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a414:	f003 0301 	and.w	r3, r3, #1
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00b      	beq.n	800a434 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2204      	movs	r2, #4
 800a422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a42a:	f043 0202 	orr.w	r2, r3, #2
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a438:	f003 0308 	and.w	r3, r3, #8
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d017      	beq.n	800a470 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a444:	f003 0320 	and.w	r3, r3, #32
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d105      	bne.n	800a458 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a44c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a450:	4b5c      	ldr	r3, [pc, #368]	@ (800a5c4 <HAL_UART_IRQHandler+0x2b8>)
 800a452:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a454:	2b00      	cmp	r3, #0
 800a456:	d00b      	beq.n	800a470 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	2208      	movs	r2, #8
 800a45e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a466:	f043 0208 	orr.w	r2, r3, #8
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d012      	beq.n	800a4a2 <HAL_UART_IRQHandler+0x196>
 800a47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a480:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00c      	beq.n	800a4a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a490:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a498:	f043 0220 	orr.w	r2, r3, #32
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 82dd 	beq.w	800aa68 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4b2:	f003 0320 	and.w	r3, r3, #32
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d013      	beq.n	800a4e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a4ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d105      	bne.n	800a4d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a4c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d007      	beq.n	800a4e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4f6:	2b40      	cmp	r3, #64	@ 0x40
 800a4f8:	d005      	beq.n	800a506 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a4fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a4fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a502:	2b00      	cmp	r3, #0
 800a504:	d054      	beq.n	800a5b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f001 fb00 	bl	800bb0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a516:	2b40      	cmp	r3, #64	@ 0x40
 800a518:	d146      	bne.n	800a5a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	3308      	adds	r3, #8
 800a520:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a524:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a528:	e853 3f00 	ldrex	r3, [r3]
 800a52c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a538:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	3308      	adds	r3, #8
 800a542:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a546:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a54a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a55e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1d9      	bne.n	800a51a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d017      	beq.n	800a5a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a576:	4a15      	ldr	r2, [pc, #84]	@ (800a5cc <HAL_UART_IRQHandler+0x2c0>)
 800a578:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a580:	4618      	mov	r0, r3
 800a582:	f7f9 fecd 	bl	8004320 <HAL_DMA_Abort_IT>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d019      	beq.n	800a5c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a59a:	4610      	mov	r0, r2
 800a59c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a59e:	e00f      	b.n	800a5c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fa77 	bl	800aa94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5a6:	e00b      	b.n	800a5c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fa73 	bl	800aa94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ae:	e007      	b.n	800a5c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fa6f 	bl	800aa94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a5be:	e253      	b.n	800aa68 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5c0:	bf00      	nop
    return;
 800a5c2:	e251      	b.n	800aa68 <HAL_UART_IRQHandler+0x75c>
 800a5c4:	10000001 	.word	0x10000001
 800a5c8:	04000120 	.word	0x04000120
 800a5cc:	0800bbd9 	.word	0x0800bbd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	f040 81e7 	bne.w	800a9a8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5de:	f003 0310 	and.w	r3, r3, #16
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 81e0 	beq.w	800a9a8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ec:	f003 0310 	and.w	r3, r3, #16
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 81d9 	beq.w	800a9a8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	2210      	movs	r2, #16
 800a5fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a608:	2b40      	cmp	r3, #64	@ 0x40
 800a60a:	f040 8151 	bne.w	800a8b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a96      	ldr	r2, [pc, #600]	@ (800a870 <HAL_UART_IRQHandler+0x564>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d068      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a93      	ldr	r2, [pc, #588]	@ (800a874 <HAL_UART_IRQHandler+0x568>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d061      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a91      	ldr	r2, [pc, #580]	@ (800a878 <HAL_UART_IRQHandler+0x56c>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d05a      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a8e      	ldr	r2, [pc, #568]	@ (800a87c <HAL_UART_IRQHandler+0x570>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d053      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a8c      	ldr	r2, [pc, #560]	@ (800a880 <HAL_UART_IRQHandler+0x574>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d04c      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a89      	ldr	r2, [pc, #548]	@ (800a884 <HAL_UART_IRQHandler+0x578>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d045      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a87      	ldr	r2, [pc, #540]	@ (800a888 <HAL_UART_IRQHandler+0x57c>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d03e      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4a84      	ldr	r2, [pc, #528]	@ (800a88c <HAL_UART_IRQHandler+0x580>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d037      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a82      	ldr	r2, [pc, #520]	@ (800a890 <HAL_UART_IRQHandler+0x584>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d030      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a7f      	ldr	r2, [pc, #508]	@ (800a894 <HAL_UART_IRQHandler+0x588>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d029      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a7d      	ldr	r2, [pc, #500]	@ (800a898 <HAL_UART_IRQHandler+0x58c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d022      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a7a      	ldr	r2, [pc, #488]	@ (800a89c <HAL_UART_IRQHandler+0x590>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d01b      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a78      	ldr	r2, [pc, #480]	@ (800a8a0 <HAL_UART_IRQHandler+0x594>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d014      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a75      	ldr	r2, [pc, #468]	@ (800a8a4 <HAL_UART_IRQHandler+0x598>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d00d      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a73      	ldr	r2, [pc, #460]	@ (800a8a8 <HAL_UART_IRQHandler+0x59c>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d006      	beq.n	800a6ee <HAL_UART_IRQHandler+0x3e2>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a70      	ldr	r2, [pc, #448]	@ (800a8ac <HAL_UART_IRQHandler+0x5a0>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d106      	bne.n	800a6fc <HAL_UART_IRQHandler+0x3f0>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	e005      	b.n	800a708 <HAL_UART_IRQHandler+0x3fc>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	b29b      	uxth	r3, r3
 800a708:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a70c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 81ab 	beq.w	800aa6c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a71c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a720:	429a      	cmp	r2, r3
 800a722:	f080 81a3 	bcs.w	800aa6c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a72c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a736:	69db      	ldr	r3, [r3, #28]
 800a738:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a73c:	f000 8087 	beq.w	800a84e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a748:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a74c:	e853 3f00 	ldrex	r3, [r3]
 800a750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a754:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a758:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a75c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	461a      	mov	r2, r3
 800a766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a76a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a76e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a772:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a776:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a77a:	e841 2300 	strex	r3, r2, [r1]
 800a77e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a782:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1da      	bne.n	800a740 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3308      	adds	r3, #8
 800a790:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a792:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a79a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a79c:	f023 0301 	bic.w	r3, r3, #1
 800a7a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3308      	adds	r3, #8
 800a7aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7ba:	e841 2300 	strex	r3, r2, [r1]
 800a7be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a7c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1e1      	bne.n	800a78a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7d0:	e853 3f00 	ldrex	r3, [r3]
 800a7d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a7d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3308      	adds	r3, #8
 800a7e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a7ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a7ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a7f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a7f2:	e841 2300 	strex	r3, r2, [r1]
 800a7f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a7f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d1e3      	bne.n	800a7c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2220      	movs	r2, #32
 800a802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a81a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a81c:	f023 0310 	bic.w	r3, r3, #16
 800a820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	461a      	mov	r2, r3
 800a82a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a82e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a830:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a832:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a834:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a83c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1e4      	bne.n	800a80c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a848:	4618      	mov	r0, r3
 800a84a:	f7f9 fa4b 	bl	8003ce4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2202      	movs	r2, #2
 800a852:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a860:	b29b      	uxth	r3, r3
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	b29b      	uxth	r3, r3
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 f91d 	bl	800aaa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a86e:	e0fd      	b.n	800aa6c <HAL_UART_IRQHandler+0x760>
 800a870:	40020010 	.word	0x40020010
 800a874:	40020028 	.word	0x40020028
 800a878:	40020040 	.word	0x40020040
 800a87c:	40020058 	.word	0x40020058
 800a880:	40020070 	.word	0x40020070
 800a884:	40020088 	.word	0x40020088
 800a888:	400200a0 	.word	0x400200a0
 800a88c:	400200b8 	.word	0x400200b8
 800a890:	40020410 	.word	0x40020410
 800a894:	40020428 	.word	0x40020428
 800a898:	40020440 	.word	0x40020440
 800a89c:	40020458 	.word	0x40020458
 800a8a0:	40020470 	.word	0x40020470
 800a8a4:	40020488 	.word	0x40020488
 800a8a8:	400204a0 	.word	0x400204a0
 800a8ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	1ad3      	subs	r3, r2, r3
 800a8c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 80cf 	beq.w	800aa70 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a8d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f000 80ca 	beq.w	800aa70 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e4:	e853 3f00 	ldrex	r3, [r3]
 800a8e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a8fe:	647b      	str	r3, [r7, #68]	@ 0x44
 800a900:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a904:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a906:	e841 2300 	strex	r3, r2, [r1]
 800a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1e4      	bne.n	800a8dc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3308      	adds	r3, #8
 800a918:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91c:	e853 3f00 	ldrex	r3, [r3]
 800a920:	623b      	str	r3, [r7, #32]
   return(result);
 800a922:	6a3a      	ldr	r2, [r7, #32]
 800a924:	4b55      	ldr	r3, [pc, #340]	@ (800aa7c <HAL_UART_IRQHandler+0x770>)
 800a926:	4013      	ands	r3, r2
 800a928:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3308      	adds	r3, #8
 800a932:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a936:	633a      	str	r2, [r7, #48]	@ 0x30
 800a938:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a93c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e3      	bne.n	800a912 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	e853 3f00 	ldrex	r3, [r3]
 800a96a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f023 0310 	bic.w	r3, r3, #16
 800a972:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a980:	61fb      	str	r3, [r7, #28]
 800a982:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a984:	69b9      	ldr	r1, [r7, #24]
 800a986:	69fa      	ldr	r2, [r7, #28]
 800a988:	e841 2300 	strex	r3, r2, [r1]
 800a98c:	617b      	str	r3, [r7, #20]
   return(result);
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1e4      	bne.n	800a95e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a99a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 f881 	bl	800aaa8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9a6:	e063      	b.n	800aa70 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00e      	beq.n	800a9d2 <HAL_UART_IRQHandler+0x6c6>
 800a9b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d008      	beq.n	800a9d2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a9c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 f945 	bl	800bc5a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9d0:	e051      	b.n	800aa76 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d014      	beq.n	800aa08 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a9de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d105      	bne.n	800a9f6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a9ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d008      	beq.n	800aa08 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d03a      	beq.n	800aa74 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
    }
    return;
 800aa06:	e035      	b.n	800aa74 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d009      	beq.n	800aa28 <HAL_UART_IRQHandler+0x71c>
 800aa14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f001 f8ef 	bl	800bc04 <UART_EndTransmit_IT>
    return;
 800aa26:	e026      	b.n	800aa76 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aa28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d009      	beq.n	800aa48 <HAL_UART_IRQHandler+0x73c>
 800aa34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d003      	beq.n	800aa48 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f001 f91e 	bl	800bc82 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa46:	e016      	b.n	800aa76 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d010      	beq.n	800aa76 <HAL_UART_IRQHandler+0x76a>
 800aa54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	da0c      	bge.n	800aa76 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 f906 	bl	800bc6e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa62:	e008      	b.n	800aa76 <HAL_UART_IRQHandler+0x76a>
      return;
 800aa64:	bf00      	nop
 800aa66:	e006      	b.n	800aa76 <HAL_UART_IRQHandler+0x76a>
    return;
 800aa68:	bf00      	nop
 800aa6a:	e004      	b.n	800aa76 <HAL_UART_IRQHandler+0x76a>
      return;
 800aa6c:	bf00      	nop
 800aa6e:	e002      	b.n	800aa76 <HAL_UART_IRQHandler+0x76a>
      return;
 800aa70:	bf00      	nop
 800aa72:	e000      	b.n	800aa76 <HAL_UART_IRQHandler+0x76a>
    return;
 800aa74:	bf00      	nop
  }
}
 800aa76:	37e8      	adds	r7, #232	@ 0xe8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	effffffe 	.word	0xeffffffe

0800aa80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aab4:	bf00      	nop
 800aab6:	370c      	adds	r7, #12
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aac4:	b092      	sub	sp, #72	@ 0x48
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aaca:	2300      	movs	r3, #0
 800aacc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	689a      	ldr	r2, [r3, #8]
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	431a      	orrs	r2, r3
 800aada:	697b      	ldr	r3, [r7, #20]
 800aadc:	695b      	ldr	r3, [r3, #20]
 800aade:	431a      	orrs	r2, r3
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	4313      	orrs	r3, r2
 800aae6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	4bbe      	ldr	r3, [pc, #760]	@ (800ade8 <UART_SetConfig+0x328>)
 800aaf0:	4013      	ands	r3, r2
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	6812      	ldr	r2, [r2, #0]
 800aaf6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800aaf8:	430b      	orrs	r3, r1
 800aafa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	68da      	ldr	r2, [r3, #12]
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4ab3      	ldr	r2, [pc, #716]	@ (800adec <UART_SetConfig+0x32c>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d004      	beq.n	800ab2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689a      	ldr	r2, [r3, #8]
 800ab32:	4baf      	ldr	r3, [pc, #700]	@ (800adf0 <UART_SetConfig+0x330>)
 800ab34:	4013      	ands	r3, r2
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	6812      	ldr	r2, [r2, #0]
 800ab3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ab3c:	430b      	orrs	r3, r1
 800ab3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab46:	f023 010f 	bic.w	r1, r3, #15
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4aa6      	ldr	r2, [pc, #664]	@ (800adf4 <UART_SetConfig+0x334>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d177      	bne.n	800ac50 <UART_SetConfig+0x190>
 800ab60:	4ba5      	ldr	r3, [pc, #660]	@ (800adf8 <UART_SetConfig+0x338>)
 800ab62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab68:	2b28      	cmp	r3, #40	@ 0x28
 800ab6a:	d86d      	bhi.n	800ac48 <UART_SetConfig+0x188>
 800ab6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab74 <UART_SetConfig+0xb4>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ac19 	.word	0x0800ac19
 800ab78:	0800ac49 	.word	0x0800ac49
 800ab7c:	0800ac49 	.word	0x0800ac49
 800ab80:	0800ac49 	.word	0x0800ac49
 800ab84:	0800ac49 	.word	0x0800ac49
 800ab88:	0800ac49 	.word	0x0800ac49
 800ab8c:	0800ac49 	.word	0x0800ac49
 800ab90:	0800ac49 	.word	0x0800ac49
 800ab94:	0800ac21 	.word	0x0800ac21
 800ab98:	0800ac49 	.word	0x0800ac49
 800ab9c:	0800ac49 	.word	0x0800ac49
 800aba0:	0800ac49 	.word	0x0800ac49
 800aba4:	0800ac49 	.word	0x0800ac49
 800aba8:	0800ac49 	.word	0x0800ac49
 800abac:	0800ac49 	.word	0x0800ac49
 800abb0:	0800ac49 	.word	0x0800ac49
 800abb4:	0800ac29 	.word	0x0800ac29
 800abb8:	0800ac49 	.word	0x0800ac49
 800abbc:	0800ac49 	.word	0x0800ac49
 800abc0:	0800ac49 	.word	0x0800ac49
 800abc4:	0800ac49 	.word	0x0800ac49
 800abc8:	0800ac49 	.word	0x0800ac49
 800abcc:	0800ac49 	.word	0x0800ac49
 800abd0:	0800ac49 	.word	0x0800ac49
 800abd4:	0800ac31 	.word	0x0800ac31
 800abd8:	0800ac49 	.word	0x0800ac49
 800abdc:	0800ac49 	.word	0x0800ac49
 800abe0:	0800ac49 	.word	0x0800ac49
 800abe4:	0800ac49 	.word	0x0800ac49
 800abe8:	0800ac49 	.word	0x0800ac49
 800abec:	0800ac49 	.word	0x0800ac49
 800abf0:	0800ac49 	.word	0x0800ac49
 800abf4:	0800ac39 	.word	0x0800ac39
 800abf8:	0800ac49 	.word	0x0800ac49
 800abfc:	0800ac49 	.word	0x0800ac49
 800ac00:	0800ac49 	.word	0x0800ac49
 800ac04:	0800ac49 	.word	0x0800ac49
 800ac08:	0800ac49 	.word	0x0800ac49
 800ac0c:	0800ac49 	.word	0x0800ac49
 800ac10:	0800ac49 	.word	0x0800ac49
 800ac14:	0800ac41 	.word	0x0800ac41
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac1e:	e326      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac20:	2304      	movs	r3, #4
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac26:	e322      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac28:	2308      	movs	r3, #8
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac2e:	e31e      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac30:	2310      	movs	r3, #16
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac36:	e31a      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac38:	2320      	movs	r3, #32
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac3e:	e316      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac40:	2340      	movs	r3, #64	@ 0x40
 800ac42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac46:	e312      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac48:	2380      	movs	r3, #128	@ 0x80
 800ac4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac4e:	e30e      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a69      	ldr	r2, [pc, #420]	@ (800adfc <UART_SetConfig+0x33c>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d130      	bne.n	800acbc <UART_SetConfig+0x1fc>
 800ac5a:	4b67      	ldr	r3, [pc, #412]	@ (800adf8 <UART_SetConfig+0x338>)
 800ac5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac5e:	f003 0307 	and.w	r3, r3, #7
 800ac62:	2b05      	cmp	r3, #5
 800ac64:	d826      	bhi.n	800acb4 <UART_SetConfig+0x1f4>
 800ac66:	a201      	add	r2, pc, #4	@ (adr r2, 800ac6c <UART_SetConfig+0x1ac>)
 800ac68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6c:	0800ac85 	.word	0x0800ac85
 800ac70:	0800ac8d 	.word	0x0800ac8d
 800ac74:	0800ac95 	.word	0x0800ac95
 800ac78:	0800ac9d 	.word	0x0800ac9d
 800ac7c:	0800aca5 	.word	0x0800aca5
 800ac80:	0800acad 	.word	0x0800acad
 800ac84:	2300      	movs	r3, #0
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac8a:	e2f0      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac8c:	2304      	movs	r3, #4
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac92:	e2ec      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac94:	2308      	movs	r3, #8
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ac9a:	e2e8      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ac9c:	2310      	movs	r3, #16
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aca2:	e2e4      	b.n	800b26e <UART_SetConfig+0x7ae>
 800aca4:	2320      	movs	r3, #32
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acaa:	e2e0      	b.n	800b26e <UART_SetConfig+0x7ae>
 800acac:	2340      	movs	r3, #64	@ 0x40
 800acae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acb2:	e2dc      	b.n	800b26e <UART_SetConfig+0x7ae>
 800acb4:	2380      	movs	r3, #128	@ 0x80
 800acb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acba:	e2d8      	b.n	800b26e <UART_SetConfig+0x7ae>
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a4f      	ldr	r2, [pc, #316]	@ (800ae00 <UART_SetConfig+0x340>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d130      	bne.n	800ad28 <UART_SetConfig+0x268>
 800acc6:	4b4c      	ldr	r3, [pc, #304]	@ (800adf8 <UART_SetConfig+0x338>)
 800acc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acca:	f003 0307 	and.w	r3, r3, #7
 800acce:	2b05      	cmp	r3, #5
 800acd0:	d826      	bhi.n	800ad20 <UART_SetConfig+0x260>
 800acd2:	a201      	add	r2, pc, #4	@ (adr r2, 800acd8 <UART_SetConfig+0x218>)
 800acd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd8:	0800acf1 	.word	0x0800acf1
 800acdc:	0800acf9 	.word	0x0800acf9
 800ace0:	0800ad01 	.word	0x0800ad01
 800ace4:	0800ad09 	.word	0x0800ad09
 800ace8:	0800ad11 	.word	0x0800ad11
 800acec:	0800ad19 	.word	0x0800ad19
 800acf0:	2300      	movs	r3, #0
 800acf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acf6:	e2ba      	b.n	800b26e <UART_SetConfig+0x7ae>
 800acf8:	2304      	movs	r3, #4
 800acfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800acfe:	e2b6      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad00:	2308      	movs	r3, #8
 800ad02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad06:	e2b2      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad08:	2310      	movs	r3, #16
 800ad0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad0e:	e2ae      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad10:	2320      	movs	r3, #32
 800ad12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad16:	e2aa      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad18:	2340      	movs	r3, #64	@ 0x40
 800ad1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad1e:	e2a6      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad20:	2380      	movs	r3, #128	@ 0x80
 800ad22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad26:	e2a2      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a35      	ldr	r2, [pc, #212]	@ (800ae04 <UART_SetConfig+0x344>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d130      	bne.n	800ad94 <UART_SetConfig+0x2d4>
 800ad32:	4b31      	ldr	r3, [pc, #196]	@ (800adf8 <UART_SetConfig+0x338>)
 800ad34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad36:	f003 0307 	and.w	r3, r3, #7
 800ad3a:	2b05      	cmp	r3, #5
 800ad3c:	d826      	bhi.n	800ad8c <UART_SetConfig+0x2cc>
 800ad3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad44 <UART_SetConfig+0x284>)
 800ad40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad44:	0800ad5d 	.word	0x0800ad5d
 800ad48:	0800ad65 	.word	0x0800ad65
 800ad4c:	0800ad6d 	.word	0x0800ad6d
 800ad50:	0800ad75 	.word	0x0800ad75
 800ad54:	0800ad7d 	.word	0x0800ad7d
 800ad58:	0800ad85 	.word	0x0800ad85
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad62:	e284      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad64:	2304      	movs	r3, #4
 800ad66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad6a:	e280      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad6c:	2308      	movs	r3, #8
 800ad6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad72:	e27c      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad74:	2310      	movs	r3, #16
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad7a:	e278      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad7c:	2320      	movs	r3, #32
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad82:	e274      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad84:	2340      	movs	r3, #64	@ 0x40
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad8a:	e270      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad8c:	2380      	movs	r3, #128	@ 0x80
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad92:	e26c      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a1b      	ldr	r2, [pc, #108]	@ (800ae08 <UART_SetConfig+0x348>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d142      	bne.n	800ae24 <UART_SetConfig+0x364>
 800ad9e:	4b16      	ldr	r3, [pc, #88]	@ (800adf8 <UART_SetConfig+0x338>)
 800ada0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ada2:	f003 0307 	and.w	r3, r3, #7
 800ada6:	2b05      	cmp	r3, #5
 800ada8:	d838      	bhi.n	800ae1c <UART_SetConfig+0x35c>
 800adaa:	a201      	add	r2, pc, #4	@ (adr r2, 800adb0 <UART_SetConfig+0x2f0>)
 800adac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb0:	0800adc9 	.word	0x0800adc9
 800adb4:	0800add1 	.word	0x0800add1
 800adb8:	0800add9 	.word	0x0800add9
 800adbc:	0800ade1 	.word	0x0800ade1
 800adc0:	0800ae0d 	.word	0x0800ae0d
 800adc4:	0800ae15 	.word	0x0800ae15
 800adc8:	2300      	movs	r3, #0
 800adca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adce:	e24e      	b.n	800b26e <UART_SetConfig+0x7ae>
 800add0:	2304      	movs	r3, #4
 800add2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800add6:	e24a      	b.n	800b26e <UART_SetConfig+0x7ae>
 800add8:	2308      	movs	r3, #8
 800adda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adde:	e246      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ade0:	2310      	movs	r3, #16
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ade6:	e242      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ade8:	cfff69f3 	.word	0xcfff69f3
 800adec:	58000c00 	.word	0x58000c00
 800adf0:	11fff4ff 	.word	0x11fff4ff
 800adf4:	40011000 	.word	0x40011000
 800adf8:	58024400 	.word	0x58024400
 800adfc:	40004400 	.word	0x40004400
 800ae00:	40004800 	.word	0x40004800
 800ae04:	40004c00 	.word	0x40004c00
 800ae08:	40005000 	.word	0x40005000
 800ae0c:	2320      	movs	r3, #32
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e22c      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ae14:	2340      	movs	r3, #64	@ 0x40
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1a:	e228      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ae1c:	2380      	movs	r3, #128	@ 0x80
 800ae1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae22:	e224      	b.n	800b26e <UART_SetConfig+0x7ae>
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4ab1      	ldr	r2, [pc, #708]	@ (800b0f0 <UART_SetConfig+0x630>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d176      	bne.n	800af1c <UART_SetConfig+0x45c>
 800ae2e:	4bb1      	ldr	r3, [pc, #708]	@ (800b0f4 <UART_SetConfig+0x634>)
 800ae30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae36:	2b28      	cmp	r3, #40	@ 0x28
 800ae38:	d86c      	bhi.n	800af14 <UART_SetConfig+0x454>
 800ae3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae40 <UART_SetConfig+0x380>)
 800ae3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae40:	0800aee5 	.word	0x0800aee5
 800ae44:	0800af15 	.word	0x0800af15
 800ae48:	0800af15 	.word	0x0800af15
 800ae4c:	0800af15 	.word	0x0800af15
 800ae50:	0800af15 	.word	0x0800af15
 800ae54:	0800af15 	.word	0x0800af15
 800ae58:	0800af15 	.word	0x0800af15
 800ae5c:	0800af15 	.word	0x0800af15
 800ae60:	0800aeed 	.word	0x0800aeed
 800ae64:	0800af15 	.word	0x0800af15
 800ae68:	0800af15 	.word	0x0800af15
 800ae6c:	0800af15 	.word	0x0800af15
 800ae70:	0800af15 	.word	0x0800af15
 800ae74:	0800af15 	.word	0x0800af15
 800ae78:	0800af15 	.word	0x0800af15
 800ae7c:	0800af15 	.word	0x0800af15
 800ae80:	0800aef5 	.word	0x0800aef5
 800ae84:	0800af15 	.word	0x0800af15
 800ae88:	0800af15 	.word	0x0800af15
 800ae8c:	0800af15 	.word	0x0800af15
 800ae90:	0800af15 	.word	0x0800af15
 800ae94:	0800af15 	.word	0x0800af15
 800ae98:	0800af15 	.word	0x0800af15
 800ae9c:	0800af15 	.word	0x0800af15
 800aea0:	0800aefd 	.word	0x0800aefd
 800aea4:	0800af15 	.word	0x0800af15
 800aea8:	0800af15 	.word	0x0800af15
 800aeac:	0800af15 	.word	0x0800af15
 800aeb0:	0800af15 	.word	0x0800af15
 800aeb4:	0800af15 	.word	0x0800af15
 800aeb8:	0800af15 	.word	0x0800af15
 800aebc:	0800af15 	.word	0x0800af15
 800aec0:	0800af05 	.word	0x0800af05
 800aec4:	0800af15 	.word	0x0800af15
 800aec8:	0800af15 	.word	0x0800af15
 800aecc:	0800af15 	.word	0x0800af15
 800aed0:	0800af15 	.word	0x0800af15
 800aed4:	0800af15 	.word	0x0800af15
 800aed8:	0800af15 	.word	0x0800af15
 800aedc:	0800af15 	.word	0x0800af15
 800aee0:	0800af0d 	.word	0x0800af0d
 800aee4:	2301      	movs	r3, #1
 800aee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeea:	e1c0      	b.n	800b26e <UART_SetConfig+0x7ae>
 800aeec:	2304      	movs	r3, #4
 800aeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef2:	e1bc      	b.n	800b26e <UART_SetConfig+0x7ae>
 800aef4:	2308      	movs	r3, #8
 800aef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aefa:	e1b8      	b.n	800b26e <UART_SetConfig+0x7ae>
 800aefc:	2310      	movs	r3, #16
 800aefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af02:	e1b4      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af04:	2320      	movs	r3, #32
 800af06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af0a:	e1b0      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af0c:	2340      	movs	r3, #64	@ 0x40
 800af0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af12:	e1ac      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af14:	2380      	movs	r3, #128	@ 0x80
 800af16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af1a:	e1a8      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a75      	ldr	r2, [pc, #468]	@ (800b0f8 <UART_SetConfig+0x638>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d130      	bne.n	800af88 <UART_SetConfig+0x4c8>
 800af26:	4b73      	ldr	r3, [pc, #460]	@ (800b0f4 <UART_SetConfig+0x634>)
 800af28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af2a:	f003 0307 	and.w	r3, r3, #7
 800af2e:	2b05      	cmp	r3, #5
 800af30:	d826      	bhi.n	800af80 <UART_SetConfig+0x4c0>
 800af32:	a201      	add	r2, pc, #4	@ (adr r2, 800af38 <UART_SetConfig+0x478>)
 800af34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af38:	0800af51 	.word	0x0800af51
 800af3c:	0800af59 	.word	0x0800af59
 800af40:	0800af61 	.word	0x0800af61
 800af44:	0800af69 	.word	0x0800af69
 800af48:	0800af71 	.word	0x0800af71
 800af4c:	0800af79 	.word	0x0800af79
 800af50:	2300      	movs	r3, #0
 800af52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af56:	e18a      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af58:	2304      	movs	r3, #4
 800af5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af5e:	e186      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af60:	2308      	movs	r3, #8
 800af62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af66:	e182      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af68:	2310      	movs	r3, #16
 800af6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af6e:	e17e      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af70:	2320      	movs	r3, #32
 800af72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af76:	e17a      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af78:	2340      	movs	r3, #64	@ 0x40
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af7e:	e176      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af80:	2380      	movs	r3, #128	@ 0x80
 800af82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af86:	e172      	b.n	800b26e <UART_SetConfig+0x7ae>
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a5b      	ldr	r2, [pc, #364]	@ (800b0fc <UART_SetConfig+0x63c>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d130      	bne.n	800aff4 <UART_SetConfig+0x534>
 800af92:	4b58      	ldr	r3, [pc, #352]	@ (800b0f4 <UART_SetConfig+0x634>)
 800af94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af96:	f003 0307 	and.w	r3, r3, #7
 800af9a:	2b05      	cmp	r3, #5
 800af9c:	d826      	bhi.n	800afec <UART_SetConfig+0x52c>
 800af9e:	a201      	add	r2, pc, #4	@ (adr r2, 800afa4 <UART_SetConfig+0x4e4>)
 800afa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa4:	0800afbd 	.word	0x0800afbd
 800afa8:	0800afc5 	.word	0x0800afc5
 800afac:	0800afcd 	.word	0x0800afcd
 800afb0:	0800afd5 	.word	0x0800afd5
 800afb4:	0800afdd 	.word	0x0800afdd
 800afb8:	0800afe5 	.word	0x0800afe5
 800afbc:	2300      	movs	r3, #0
 800afbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afc2:	e154      	b.n	800b26e <UART_SetConfig+0x7ae>
 800afc4:	2304      	movs	r3, #4
 800afc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afca:	e150      	b.n	800b26e <UART_SetConfig+0x7ae>
 800afcc:	2308      	movs	r3, #8
 800afce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afd2:	e14c      	b.n	800b26e <UART_SetConfig+0x7ae>
 800afd4:	2310      	movs	r3, #16
 800afd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afda:	e148      	b.n	800b26e <UART_SetConfig+0x7ae>
 800afdc:	2320      	movs	r3, #32
 800afde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afe2:	e144      	b.n	800b26e <UART_SetConfig+0x7ae>
 800afe4:	2340      	movs	r3, #64	@ 0x40
 800afe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800afea:	e140      	b.n	800b26e <UART_SetConfig+0x7ae>
 800afec:	2380      	movs	r3, #128	@ 0x80
 800afee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aff2:	e13c      	b.n	800b26e <UART_SetConfig+0x7ae>
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a41      	ldr	r2, [pc, #260]	@ (800b100 <UART_SetConfig+0x640>)
 800affa:	4293      	cmp	r3, r2
 800affc:	f040 8082 	bne.w	800b104 <UART_SetConfig+0x644>
 800b000:	4b3c      	ldr	r3, [pc, #240]	@ (800b0f4 <UART_SetConfig+0x634>)
 800b002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b008:	2b28      	cmp	r3, #40	@ 0x28
 800b00a:	d86d      	bhi.n	800b0e8 <UART_SetConfig+0x628>
 800b00c:	a201      	add	r2, pc, #4	@ (adr r2, 800b014 <UART_SetConfig+0x554>)
 800b00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b012:	bf00      	nop
 800b014:	0800b0b9 	.word	0x0800b0b9
 800b018:	0800b0e9 	.word	0x0800b0e9
 800b01c:	0800b0e9 	.word	0x0800b0e9
 800b020:	0800b0e9 	.word	0x0800b0e9
 800b024:	0800b0e9 	.word	0x0800b0e9
 800b028:	0800b0e9 	.word	0x0800b0e9
 800b02c:	0800b0e9 	.word	0x0800b0e9
 800b030:	0800b0e9 	.word	0x0800b0e9
 800b034:	0800b0c1 	.word	0x0800b0c1
 800b038:	0800b0e9 	.word	0x0800b0e9
 800b03c:	0800b0e9 	.word	0x0800b0e9
 800b040:	0800b0e9 	.word	0x0800b0e9
 800b044:	0800b0e9 	.word	0x0800b0e9
 800b048:	0800b0e9 	.word	0x0800b0e9
 800b04c:	0800b0e9 	.word	0x0800b0e9
 800b050:	0800b0e9 	.word	0x0800b0e9
 800b054:	0800b0c9 	.word	0x0800b0c9
 800b058:	0800b0e9 	.word	0x0800b0e9
 800b05c:	0800b0e9 	.word	0x0800b0e9
 800b060:	0800b0e9 	.word	0x0800b0e9
 800b064:	0800b0e9 	.word	0x0800b0e9
 800b068:	0800b0e9 	.word	0x0800b0e9
 800b06c:	0800b0e9 	.word	0x0800b0e9
 800b070:	0800b0e9 	.word	0x0800b0e9
 800b074:	0800b0d1 	.word	0x0800b0d1
 800b078:	0800b0e9 	.word	0x0800b0e9
 800b07c:	0800b0e9 	.word	0x0800b0e9
 800b080:	0800b0e9 	.word	0x0800b0e9
 800b084:	0800b0e9 	.word	0x0800b0e9
 800b088:	0800b0e9 	.word	0x0800b0e9
 800b08c:	0800b0e9 	.word	0x0800b0e9
 800b090:	0800b0e9 	.word	0x0800b0e9
 800b094:	0800b0d9 	.word	0x0800b0d9
 800b098:	0800b0e9 	.word	0x0800b0e9
 800b09c:	0800b0e9 	.word	0x0800b0e9
 800b0a0:	0800b0e9 	.word	0x0800b0e9
 800b0a4:	0800b0e9 	.word	0x0800b0e9
 800b0a8:	0800b0e9 	.word	0x0800b0e9
 800b0ac:	0800b0e9 	.word	0x0800b0e9
 800b0b0:	0800b0e9 	.word	0x0800b0e9
 800b0b4:	0800b0e1 	.word	0x0800b0e1
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0be:	e0d6      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b0c0:	2304      	movs	r3, #4
 800b0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0c6:	e0d2      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b0c8:	2308      	movs	r3, #8
 800b0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ce:	e0ce      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b0d0:	2310      	movs	r3, #16
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e0ca      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b0d8:	2320      	movs	r3, #32
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e0c6      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b0e0:	2340      	movs	r3, #64	@ 0x40
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e6:	e0c2      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b0e8:	2380      	movs	r3, #128	@ 0x80
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ee:	e0be      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b0f0:	40011400 	.word	0x40011400
 800b0f4:	58024400 	.word	0x58024400
 800b0f8:	40007800 	.word	0x40007800
 800b0fc:	40007c00 	.word	0x40007c00
 800b100:	40011800 	.word	0x40011800
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4aad      	ldr	r2, [pc, #692]	@ (800b3c0 <UART_SetConfig+0x900>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d176      	bne.n	800b1fc <UART_SetConfig+0x73c>
 800b10e:	4bad      	ldr	r3, [pc, #692]	@ (800b3c4 <UART_SetConfig+0x904>)
 800b110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b112:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b116:	2b28      	cmp	r3, #40	@ 0x28
 800b118:	d86c      	bhi.n	800b1f4 <UART_SetConfig+0x734>
 800b11a:	a201      	add	r2, pc, #4	@ (adr r2, 800b120 <UART_SetConfig+0x660>)
 800b11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b120:	0800b1c5 	.word	0x0800b1c5
 800b124:	0800b1f5 	.word	0x0800b1f5
 800b128:	0800b1f5 	.word	0x0800b1f5
 800b12c:	0800b1f5 	.word	0x0800b1f5
 800b130:	0800b1f5 	.word	0x0800b1f5
 800b134:	0800b1f5 	.word	0x0800b1f5
 800b138:	0800b1f5 	.word	0x0800b1f5
 800b13c:	0800b1f5 	.word	0x0800b1f5
 800b140:	0800b1cd 	.word	0x0800b1cd
 800b144:	0800b1f5 	.word	0x0800b1f5
 800b148:	0800b1f5 	.word	0x0800b1f5
 800b14c:	0800b1f5 	.word	0x0800b1f5
 800b150:	0800b1f5 	.word	0x0800b1f5
 800b154:	0800b1f5 	.word	0x0800b1f5
 800b158:	0800b1f5 	.word	0x0800b1f5
 800b15c:	0800b1f5 	.word	0x0800b1f5
 800b160:	0800b1d5 	.word	0x0800b1d5
 800b164:	0800b1f5 	.word	0x0800b1f5
 800b168:	0800b1f5 	.word	0x0800b1f5
 800b16c:	0800b1f5 	.word	0x0800b1f5
 800b170:	0800b1f5 	.word	0x0800b1f5
 800b174:	0800b1f5 	.word	0x0800b1f5
 800b178:	0800b1f5 	.word	0x0800b1f5
 800b17c:	0800b1f5 	.word	0x0800b1f5
 800b180:	0800b1dd 	.word	0x0800b1dd
 800b184:	0800b1f5 	.word	0x0800b1f5
 800b188:	0800b1f5 	.word	0x0800b1f5
 800b18c:	0800b1f5 	.word	0x0800b1f5
 800b190:	0800b1f5 	.word	0x0800b1f5
 800b194:	0800b1f5 	.word	0x0800b1f5
 800b198:	0800b1f5 	.word	0x0800b1f5
 800b19c:	0800b1f5 	.word	0x0800b1f5
 800b1a0:	0800b1e5 	.word	0x0800b1e5
 800b1a4:	0800b1f5 	.word	0x0800b1f5
 800b1a8:	0800b1f5 	.word	0x0800b1f5
 800b1ac:	0800b1f5 	.word	0x0800b1f5
 800b1b0:	0800b1f5 	.word	0x0800b1f5
 800b1b4:	0800b1f5 	.word	0x0800b1f5
 800b1b8:	0800b1f5 	.word	0x0800b1f5
 800b1bc:	0800b1f5 	.word	0x0800b1f5
 800b1c0:	0800b1ed 	.word	0x0800b1ed
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ca:	e050      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b1cc:	2304      	movs	r3, #4
 800b1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1d2:	e04c      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b1d4:	2308      	movs	r3, #8
 800b1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1da:	e048      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b1dc:	2310      	movs	r3, #16
 800b1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1e2:	e044      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b1e4:	2320      	movs	r3, #32
 800b1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1ea:	e040      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b1ec:	2340      	movs	r3, #64	@ 0x40
 800b1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1f2:	e03c      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b1f4:	2380      	movs	r3, #128	@ 0x80
 800b1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b1fa:	e038      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a71      	ldr	r2, [pc, #452]	@ (800b3c8 <UART_SetConfig+0x908>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d130      	bne.n	800b268 <UART_SetConfig+0x7a8>
 800b206:	4b6f      	ldr	r3, [pc, #444]	@ (800b3c4 <UART_SetConfig+0x904>)
 800b208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b20a:	f003 0307 	and.w	r3, r3, #7
 800b20e:	2b05      	cmp	r3, #5
 800b210:	d826      	bhi.n	800b260 <UART_SetConfig+0x7a0>
 800b212:	a201      	add	r2, pc, #4	@ (adr r2, 800b218 <UART_SetConfig+0x758>)
 800b214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b218:	0800b231 	.word	0x0800b231
 800b21c:	0800b239 	.word	0x0800b239
 800b220:	0800b241 	.word	0x0800b241
 800b224:	0800b249 	.word	0x0800b249
 800b228:	0800b251 	.word	0x0800b251
 800b22c:	0800b259 	.word	0x0800b259
 800b230:	2302      	movs	r3, #2
 800b232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b236:	e01a      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b238:	2304      	movs	r3, #4
 800b23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b23e:	e016      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b240:	2308      	movs	r3, #8
 800b242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b246:	e012      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b248:	2310      	movs	r3, #16
 800b24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b24e:	e00e      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b250:	2320      	movs	r3, #32
 800b252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b256:	e00a      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b258:	2340      	movs	r3, #64	@ 0x40
 800b25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b25e:	e006      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b260:	2380      	movs	r3, #128	@ 0x80
 800b262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b266:	e002      	b.n	800b26e <UART_SetConfig+0x7ae>
 800b268:	2380      	movs	r3, #128	@ 0x80
 800b26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a55      	ldr	r2, [pc, #340]	@ (800b3c8 <UART_SetConfig+0x908>)
 800b274:	4293      	cmp	r3, r2
 800b276:	f040 80f8 	bne.w	800b46a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b27a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b27e:	2b20      	cmp	r3, #32
 800b280:	dc46      	bgt.n	800b310 <UART_SetConfig+0x850>
 800b282:	2b02      	cmp	r3, #2
 800b284:	db75      	blt.n	800b372 <UART_SetConfig+0x8b2>
 800b286:	3b02      	subs	r3, #2
 800b288:	2b1e      	cmp	r3, #30
 800b28a:	d872      	bhi.n	800b372 <UART_SetConfig+0x8b2>
 800b28c:	a201      	add	r2, pc, #4	@ (adr r2, 800b294 <UART_SetConfig+0x7d4>)
 800b28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b292:	bf00      	nop
 800b294:	0800b317 	.word	0x0800b317
 800b298:	0800b373 	.word	0x0800b373
 800b29c:	0800b31f 	.word	0x0800b31f
 800b2a0:	0800b373 	.word	0x0800b373
 800b2a4:	0800b373 	.word	0x0800b373
 800b2a8:	0800b373 	.word	0x0800b373
 800b2ac:	0800b32f 	.word	0x0800b32f
 800b2b0:	0800b373 	.word	0x0800b373
 800b2b4:	0800b373 	.word	0x0800b373
 800b2b8:	0800b373 	.word	0x0800b373
 800b2bc:	0800b373 	.word	0x0800b373
 800b2c0:	0800b373 	.word	0x0800b373
 800b2c4:	0800b373 	.word	0x0800b373
 800b2c8:	0800b373 	.word	0x0800b373
 800b2cc:	0800b33f 	.word	0x0800b33f
 800b2d0:	0800b373 	.word	0x0800b373
 800b2d4:	0800b373 	.word	0x0800b373
 800b2d8:	0800b373 	.word	0x0800b373
 800b2dc:	0800b373 	.word	0x0800b373
 800b2e0:	0800b373 	.word	0x0800b373
 800b2e4:	0800b373 	.word	0x0800b373
 800b2e8:	0800b373 	.word	0x0800b373
 800b2ec:	0800b373 	.word	0x0800b373
 800b2f0:	0800b373 	.word	0x0800b373
 800b2f4:	0800b373 	.word	0x0800b373
 800b2f8:	0800b373 	.word	0x0800b373
 800b2fc:	0800b373 	.word	0x0800b373
 800b300:	0800b373 	.word	0x0800b373
 800b304:	0800b373 	.word	0x0800b373
 800b308:	0800b373 	.word	0x0800b373
 800b30c:	0800b365 	.word	0x0800b365
 800b310:	2b40      	cmp	r3, #64	@ 0x40
 800b312:	d02a      	beq.n	800b36a <UART_SetConfig+0x8aa>
 800b314:	e02d      	b.n	800b372 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b316:	f7fd febd 	bl	8009094 <HAL_RCCEx_GetD3PCLK1Freq>
 800b31a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b31c:	e02f      	b.n	800b37e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b31e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b322:	4618      	mov	r0, r3
 800b324:	f7fd fecc 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b32c:	e027      	b.n	800b37e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b32e:	f107 0318 	add.w	r3, r7, #24
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe f818 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b33c:	e01f      	b.n	800b37e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b33e:	4b21      	ldr	r3, [pc, #132]	@ (800b3c4 <UART_SetConfig+0x904>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 0320 	and.w	r3, r3, #32
 800b346:	2b00      	cmp	r3, #0
 800b348:	d009      	beq.n	800b35e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b34a:	4b1e      	ldr	r3, [pc, #120]	@ (800b3c4 <UART_SetConfig+0x904>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	08db      	lsrs	r3, r3, #3
 800b350:	f003 0303 	and.w	r3, r3, #3
 800b354:	4a1d      	ldr	r2, [pc, #116]	@ (800b3cc <UART_SetConfig+0x90c>)
 800b356:	fa22 f303 	lsr.w	r3, r2, r3
 800b35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b35c:	e00f      	b.n	800b37e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b35e:	4b1b      	ldr	r3, [pc, #108]	@ (800b3cc <UART_SetConfig+0x90c>)
 800b360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b362:	e00c      	b.n	800b37e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b364:	4b1a      	ldr	r3, [pc, #104]	@ (800b3d0 <UART_SetConfig+0x910>)
 800b366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b368:	e009      	b.n	800b37e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b36a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b370:	e005      	b.n	800b37e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b372:	2300      	movs	r3, #0
 800b374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b376:	2301      	movs	r3, #1
 800b378:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b37c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b37e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 81ee 	beq.w	800b762 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b38a:	4a12      	ldr	r2, [pc, #72]	@ (800b3d4 <UART_SetConfig+0x914>)
 800b38c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b390:	461a      	mov	r2, r3
 800b392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b394:	fbb3 f3f2 	udiv	r3, r3, r2
 800b398:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	685a      	ldr	r2, [r3, #4]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	005b      	lsls	r3, r3, #1
 800b3a2:	4413      	add	r3, r2
 800b3a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d305      	bcc.n	800b3b6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d910      	bls.n	800b3d8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b3bc:	e1d1      	b.n	800b762 <UART_SetConfig+0xca2>
 800b3be:	bf00      	nop
 800b3c0:	40011c00 	.word	0x40011c00
 800b3c4:	58024400 	.word	0x58024400
 800b3c8:	58000c00 	.word	0x58000c00
 800b3cc:	03d09000 	.word	0x03d09000
 800b3d0:	003d0900 	.word	0x003d0900
 800b3d4:	0800bf24 	.word	0x0800bf24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3da:	2200      	movs	r2, #0
 800b3dc:	60bb      	str	r3, [r7, #8]
 800b3de:	60fa      	str	r2, [r7, #12]
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3e4:	4ac0      	ldr	r2, [pc, #768]	@ (800b6e8 <UART_SetConfig+0xc28>)
 800b3e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	603b      	str	r3, [r7, #0]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b3fa:	f7f4 ff77 	bl	80002ec <__aeabi_uldivmod>
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	4610      	mov	r0, r2
 800b404:	4619      	mov	r1, r3
 800b406:	f04f 0200 	mov.w	r2, #0
 800b40a:	f04f 0300 	mov.w	r3, #0
 800b40e:	020b      	lsls	r3, r1, #8
 800b410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b414:	0202      	lsls	r2, r0, #8
 800b416:	6979      	ldr	r1, [r7, #20]
 800b418:	6849      	ldr	r1, [r1, #4]
 800b41a:	0849      	lsrs	r1, r1, #1
 800b41c:	2000      	movs	r0, #0
 800b41e:	460c      	mov	r4, r1
 800b420:	4605      	mov	r5, r0
 800b422:	eb12 0804 	adds.w	r8, r2, r4
 800b426:	eb43 0905 	adc.w	r9, r3, r5
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	469a      	mov	sl, r3
 800b432:	4693      	mov	fp, r2
 800b434:	4652      	mov	r2, sl
 800b436:	465b      	mov	r3, fp
 800b438:	4640      	mov	r0, r8
 800b43a:	4649      	mov	r1, r9
 800b43c:	f7f4 ff56 	bl	80002ec <__aeabi_uldivmod>
 800b440:	4602      	mov	r2, r0
 800b442:	460b      	mov	r3, r1
 800b444:	4613      	mov	r3, r2
 800b446:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b44a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b44e:	d308      	bcc.n	800b462 <UART_SetConfig+0x9a2>
 800b450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b456:	d204      	bcs.n	800b462 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b45e:	60da      	str	r2, [r3, #12]
 800b460:	e17f      	b.n	800b762 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b468:	e17b      	b.n	800b762 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b472:	f040 80bd 	bne.w	800b5f0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b476:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b47a:	2b20      	cmp	r3, #32
 800b47c:	dc48      	bgt.n	800b510 <UART_SetConfig+0xa50>
 800b47e:	2b00      	cmp	r3, #0
 800b480:	db7b      	blt.n	800b57a <UART_SetConfig+0xaba>
 800b482:	2b20      	cmp	r3, #32
 800b484:	d879      	bhi.n	800b57a <UART_SetConfig+0xaba>
 800b486:	a201      	add	r2, pc, #4	@ (adr r2, 800b48c <UART_SetConfig+0x9cc>)
 800b488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48c:	0800b517 	.word	0x0800b517
 800b490:	0800b51f 	.word	0x0800b51f
 800b494:	0800b57b 	.word	0x0800b57b
 800b498:	0800b57b 	.word	0x0800b57b
 800b49c:	0800b527 	.word	0x0800b527
 800b4a0:	0800b57b 	.word	0x0800b57b
 800b4a4:	0800b57b 	.word	0x0800b57b
 800b4a8:	0800b57b 	.word	0x0800b57b
 800b4ac:	0800b537 	.word	0x0800b537
 800b4b0:	0800b57b 	.word	0x0800b57b
 800b4b4:	0800b57b 	.word	0x0800b57b
 800b4b8:	0800b57b 	.word	0x0800b57b
 800b4bc:	0800b57b 	.word	0x0800b57b
 800b4c0:	0800b57b 	.word	0x0800b57b
 800b4c4:	0800b57b 	.word	0x0800b57b
 800b4c8:	0800b57b 	.word	0x0800b57b
 800b4cc:	0800b547 	.word	0x0800b547
 800b4d0:	0800b57b 	.word	0x0800b57b
 800b4d4:	0800b57b 	.word	0x0800b57b
 800b4d8:	0800b57b 	.word	0x0800b57b
 800b4dc:	0800b57b 	.word	0x0800b57b
 800b4e0:	0800b57b 	.word	0x0800b57b
 800b4e4:	0800b57b 	.word	0x0800b57b
 800b4e8:	0800b57b 	.word	0x0800b57b
 800b4ec:	0800b57b 	.word	0x0800b57b
 800b4f0:	0800b57b 	.word	0x0800b57b
 800b4f4:	0800b57b 	.word	0x0800b57b
 800b4f8:	0800b57b 	.word	0x0800b57b
 800b4fc:	0800b57b 	.word	0x0800b57b
 800b500:	0800b57b 	.word	0x0800b57b
 800b504:	0800b57b 	.word	0x0800b57b
 800b508:	0800b57b 	.word	0x0800b57b
 800b50c:	0800b56d 	.word	0x0800b56d
 800b510:	2b40      	cmp	r3, #64	@ 0x40
 800b512:	d02e      	beq.n	800b572 <UART_SetConfig+0xab2>
 800b514:	e031      	b.n	800b57a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b516:	f7fb fefb 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 800b51a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b51c:	e033      	b.n	800b586 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b51e:	f7fb ff0d 	bl	800733c <HAL_RCC_GetPCLK2Freq>
 800b522:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b524:	e02f      	b.n	800b586 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fd fdc8 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b534:	e027      	b.n	800b586 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b536:	f107 0318 	add.w	r3, r7, #24
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fd ff14 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b544:	e01f      	b.n	800b586 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b546:	4b69      	ldr	r3, [pc, #420]	@ (800b6ec <UART_SetConfig+0xc2c>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f003 0320 	and.w	r3, r3, #32
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d009      	beq.n	800b566 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b552:	4b66      	ldr	r3, [pc, #408]	@ (800b6ec <UART_SetConfig+0xc2c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	08db      	lsrs	r3, r3, #3
 800b558:	f003 0303 	and.w	r3, r3, #3
 800b55c:	4a64      	ldr	r2, [pc, #400]	@ (800b6f0 <UART_SetConfig+0xc30>)
 800b55e:	fa22 f303 	lsr.w	r3, r2, r3
 800b562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b564:	e00f      	b.n	800b586 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b566:	4b62      	ldr	r3, [pc, #392]	@ (800b6f0 <UART_SetConfig+0xc30>)
 800b568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b56a:	e00c      	b.n	800b586 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b56c:	4b61      	ldr	r3, [pc, #388]	@ (800b6f4 <UART_SetConfig+0xc34>)
 800b56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b570:	e009      	b.n	800b586 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b578:	e005      	b.n	800b586 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b57a:	2300      	movs	r3, #0
 800b57c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 80ea 	beq.w	800b762 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b592:	4a55      	ldr	r2, [pc, #340]	@ (800b6e8 <UART_SetConfig+0xc28>)
 800b594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b598:	461a      	mov	r2, r3
 800b59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b59c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5a0:	005a      	lsls	r2, r3, #1
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	085b      	lsrs	r3, r3, #1
 800b5a8:	441a      	add	r2, r3
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b6:	2b0f      	cmp	r3, #15
 800b5b8:	d916      	bls.n	800b5e8 <UART_SetConfig+0xb28>
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5c0:	d212      	bcs.n	800b5e8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	f023 030f 	bic.w	r3, r3, #15
 800b5ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ce:	085b      	lsrs	r3, r3, #1
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	f003 0307 	and.w	r3, r3, #7
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b5e4:	60da      	str	r2, [r3, #12]
 800b5e6:	e0bc      	b.n	800b762 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b5ee:	e0b8      	b.n	800b762 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b5f0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b5f4:	2b20      	cmp	r3, #32
 800b5f6:	dc4b      	bgt.n	800b690 <UART_SetConfig+0xbd0>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f2c0 8087 	blt.w	800b70c <UART_SetConfig+0xc4c>
 800b5fe:	2b20      	cmp	r3, #32
 800b600:	f200 8084 	bhi.w	800b70c <UART_SetConfig+0xc4c>
 800b604:	a201      	add	r2, pc, #4	@ (adr r2, 800b60c <UART_SetConfig+0xb4c>)
 800b606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60a:	bf00      	nop
 800b60c:	0800b697 	.word	0x0800b697
 800b610:	0800b69f 	.word	0x0800b69f
 800b614:	0800b70d 	.word	0x0800b70d
 800b618:	0800b70d 	.word	0x0800b70d
 800b61c:	0800b6a7 	.word	0x0800b6a7
 800b620:	0800b70d 	.word	0x0800b70d
 800b624:	0800b70d 	.word	0x0800b70d
 800b628:	0800b70d 	.word	0x0800b70d
 800b62c:	0800b6b7 	.word	0x0800b6b7
 800b630:	0800b70d 	.word	0x0800b70d
 800b634:	0800b70d 	.word	0x0800b70d
 800b638:	0800b70d 	.word	0x0800b70d
 800b63c:	0800b70d 	.word	0x0800b70d
 800b640:	0800b70d 	.word	0x0800b70d
 800b644:	0800b70d 	.word	0x0800b70d
 800b648:	0800b70d 	.word	0x0800b70d
 800b64c:	0800b6c7 	.word	0x0800b6c7
 800b650:	0800b70d 	.word	0x0800b70d
 800b654:	0800b70d 	.word	0x0800b70d
 800b658:	0800b70d 	.word	0x0800b70d
 800b65c:	0800b70d 	.word	0x0800b70d
 800b660:	0800b70d 	.word	0x0800b70d
 800b664:	0800b70d 	.word	0x0800b70d
 800b668:	0800b70d 	.word	0x0800b70d
 800b66c:	0800b70d 	.word	0x0800b70d
 800b670:	0800b70d 	.word	0x0800b70d
 800b674:	0800b70d 	.word	0x0800b70d
 800b678:	0800b70d 	.word	0x0800b70d
 800b67c:	0800b70d 	.word	0x0800b70d
 800b680:	0800b70d 	.word	0x0800b70d
 800b684:	0800b70d 	.word	0x0800b70d
 800b688:	0800b70d 	.word	0x0800b70d
 800b68c:	0800b6ff 	.word	0x0800b6ff
 800b690:	2b40      	cmp	r3, #64	@ 0x40
 800b692:	d037      	beq.n	800b704 <UART_SetConfig+0xc44>
 800b694:	e03a      	b.n	800b70c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b696:	f7fb fe3b 	bl	8007310 <HAL_RCC_GetPCLK1Freq>
 800b69a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b69c:	e03c      	b.n	800b718 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b69e:	f7fb fe4d 	bl	800733c <HAL_RCC_GetPCLK2Freq>
 800b6a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b6a4:	e038      	b.n	800b718 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fd fd08 	bl	80090c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6b4:	e030      	b.n	800b718 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6b6:	f107 0318 	add.w	r3, r7, #24
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7fd fe54 	bl	8009368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c4:	e028      	b.n	800b718 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6c6:	4b09      	ldr	r3, [pc, #36]	@ (800b6ec <UART_SetConfig+0xc2c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 0320 	and.w	r3, r3, #32
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d012      	beq.n	800b6f8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6d2:	4b06      	ldr	r3, [pc, #24]	@ (800b6ec <UART_SetConfig+0xc2c>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	08db      	lsrs	r3, r3, #3
 800b6d8:	f003 0303 	and.w	r3, r3, #3
 800b6dc:	4a04      	ldr	r2, [pc, #16]	@ (800b6f0 <UART_SetConfig+0xc30>)
 800b6de:	fa22 f303 	lsr.w	r3, r2, r3
 800b6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6e4:	e018      	b.n	800b718 <UART_SetConfig+0xc58>
 800b6e6:	bf00      	nop
 800b6e8:	0800bf24 	.word	0x0800bf24
 800b6ec:	58024400 	.word	0x58024400
 800b6f0:	03d09000 	.word	0x03d09000
 800b6f4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b6f8:	4b24      	ldr	r3, [pc, #144]	@ (800b78c <UART_SetConfig+0xccc>)
 800b6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6fc:	e00c      	b.n	800b718 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6fe:	4b24      	ldr	r3, [pc, #144]	@ (800b790 <UART_SetConfig+0xcd0>)
 800b700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b702:	e009      	b.n	800b718 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b704:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b70a:	e005      	b.n	800b718 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b70c:	2300      	movs	r3, #0
 800b70e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b710:	2301      	movs	r3, #1
 800b712:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b716:	bf00      	nop
    }

    if (pclk != 0U)
 800b718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d021      	beq.n	800b762 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b722:	4a1c      	ldr	r2, [pc, #112]	@ (800b794 <UART_SetConfig+0xcd4>)
 800b724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b728:	461a      	mov	r2, r3
 800b72a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b72c:	fbb3 f2f2 	udiv	r2, r3, r2
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	085b      	lsrs	r3, r3, #1
 800b736:	441a      	add	r2, r3
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b740:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b744:	2b0f      	cmp	r3, #15
 800b746:	d909      	bls.n	800b75c <UART_SetConfig+0xc9c>
 800b748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b74a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b74e:	d205      	bcs.n	800b75c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b752:	b29a      	uxth	r2, r3
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	60da      	str	r2, [r3, #12]
 800b75a:	e002      	b.n	800b762 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	2201      	movs	r2, #1
 800b766:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2201      	movs	r2, #1
 800b76e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2200      	movs	r2, #0
 800b776:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	2200      	movs	r2, #0
 800b77c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b77e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b782:	4618      	mov	r0, r3
 800b784:	3748      	adds	r7, #72	@ 0x48
 800b786:	46bd      	mov	sp, r7
 800b788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b78c:	03d09000 	.word	0x03d09000
 800b790:	003d0900 	.word	0x003d0900
 800b794:	0800bf24 	.word	0x0800bf24

0800b798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7a4:	f003 0308 	and.w	r3, r3, #8
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d00a      	beq.n	800b7c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	430a      	orrs	r2, r1
 800b7c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00a      	beq.n	800b7e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	430a      	orrs	r2, r1
 800b7e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7e8:	f003 0302 	and.w	r3, r3, #2
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00a      	beq.n	800b806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	430a      	orrs	r2, r1
 800b804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b80a:	f003 0304 	and.w	r3, r3, #4
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d00a      	beq.n	800b828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	430a      	orrs	r2, r1
 800b826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82c:	f003 0310 	and.w	r3, r3, #16
 800b830:	2b00      	cmp	r3, #0
 800b832:	d00a      	beq.n	800b84a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	430a      	orrs	r2, r1
 800b848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b84e:	f003 0320 	and.w	r3, r3, #32
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00a      	beq.n	800b86c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	430a      	orrs	r2, r1
 800b86a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b874:	2b00      	cmp	r3, #0
 800b876:	d01a      	beq.n	800b8ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b896:	d10a      	bne.n	800b8ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	430a      	orrs	r2, r1
 800b8ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	430a      	orrs	r2, r1
 800b8ce:	605a      	str	r2, [r3, #4]
  }
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b098      	sub	sp, #96	@ 0x60
 800b8e0:	af02      	add	r7, sp, #8
 800b8e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b8ec:	f7f5 fd88 	bl	8001400 <HAL_GetTick>
 800b8f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0308 	and.w	r3, r3, #8
 800b8fc:	2b08      	cmp	r3, #8
 800b8fe:	d12f      	bne.n	800b960 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b900:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b908:	2200      	movs	r2, #0
 800b90a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f88e 	bl	800ba30 <UART_WaitOnFlagUntilTimeout>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d022      	beq.n	800b960 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b922:	e853 3f00 	ldrex	r3, [r3]
 800b926:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b92a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b92e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	461a      	mov	r2, r3
 800b936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b938:	647b      	str	r3, [r7, #68]	@ 0x44
 800b93a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b93c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b93e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b940:	e841 2300 	strex	r3, r2, [r1]
 800b944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1e6      	bne.n	800b91a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2220      	movs	r2, #32
 800b950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b95c:	2303      	movs	r3, #3
 800b95e:	e063      	b.n	800ba28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0304 	and.w	r3, r3, #4
 800b96a:	2b04      	cmp	r3, #4
 800b96c:	d149      	bne.n	800ba02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b96e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b976:	2200      	movs	r2, #0
 800b978:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f857 	bl	800ba30 <UART_WaitOnFlagUntilTimeout>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	d03c      	beq.n	800ba02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b990:	e853 3f00 	ldrex	r3, [r3]
 800b994:	623b      	str	r3, [r7, #32]
   return(result);
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b99c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b9a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9ae:	e841 2300 	strex	r3, r2, [r1]
 800b9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1e6      	bne.n	800b988 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3308      	adds	r3, #8
 800b9c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	e853 3f00 	ldrex	r3, [r3]
 800b9c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f023 0301 	bic.w	r3, r3, #1
 800b9d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3308      	adds	r3, #8
 800b9d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9da:	61fa      	str	r2, [r7, #28]
 800b9dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9de:	69b9      	ldr	r1, [r7, #24]
 800b9e0:	69fa      	ldr	r2, [r7, #28]
 800b9e2:	e841 2300 	strex	r3, r2, [r1]
 800b9e6:	617b      	str	r3, [r7, #20]
   return(result);
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1e5      	bne.n	800b9ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2220      	movs	r2, #32
 800b9f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	e012      	b.n	800ba28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2220      	movs	r2, #32
 800ba06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2220      	movs	r2, #32
 800ba0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3758      	adds	r7, #88	@ 0x58
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	603b      	str	r3, [r7, #0]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba40:	e04f      	b.n	800bae2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba48:	d04b      	beq.n	800bae2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba4a:	f7f5 fcd9 	bl	8001400 <HAL_GetTick>
 800ba4e:	4602      	mov	r2, r0
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d302      	bcc.n	800ba60 <UART_WaitOnFlagUntilTimeout+0x30>
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d101      	bne.n	800ba64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ba60:	2303      	movs	r3, #3
 800ba62:	e04e      	b.n	800bb02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f003 0304 	and.w	r3, r3, #4
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d037      	beq.n	800bae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b80      	cmp	r3, #128	@ 0x80
 800ba76:	d034      	beq.n	800bae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	2b40      	cmp	r3, #64	@ 0x40
 800ba7c:	d031      	beq.n	800bae2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	69db      	ldr	r3, [r3, #28]
 800ba84:	f003 0308 	and.w	r3, r3, #8
 800ba88:	2b08      	cmp	r3, #8
 800ba8a:	d110      	bne.n	800baae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2208      	movs	r2, #8
 800ba92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f000 f839 	bl	800bb0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2208      	movs	r2, #8
 800ba9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e029      	b.n	800bb02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	69db      	ldr	r3, [r3, #28]
 800bab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800babc:	d111      	bne.n	800bae2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bac8:	68f8      	ldr	r0, [r7, #12]
 800baca:	f000 f81f 	bl	800bb0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2220      	movs	r2, #32
 800bad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bade:	2303      	movs	r3, #3
 800bae0:	e00f      	b.n	800bb02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	69da      	ldr	r2, [r3, #28]
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	4013      	ands	r3, r2
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	429a      	cmp	r2, r3
 800baf0:	bf0c      	ite	eq
 800baf2:	2301      	moveq	r3, #1
 800baf4:	2300      	movne	r3, #0
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	461a      	mov	r2, r3
 800bafa:	79fb      	ldrb	r3, [r7, #7]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d0a0      	beq.n	800ba42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
	...

0800bb0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b095      	sub	sp, #84	@ 0x54
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb1c:	e853 3f00 	ldrex	r3, [r3]
 800bb20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bb28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb32:	643b      	str	r3, [r7, #64]	@ 0x40
 800bb34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bb38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bb3a:	e841 2300 	strex	r3, r2, [r1]
 800bb3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d1e6      	bne.n	800bb14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	3308      	adds	r3, #8
 800bb4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb4e:	6a3b      	ldr	r3, [r7, #32]
 800bb50:	e853 3f00 	ldrex	r3, [r3]
 800bb54:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	4b1e      	ldr	r3, [pc, #120]	@ (800bbd4 <UART_EndRxTransfer+0xc8>)
 800bb5a:	4013      	ands	r3, r2
 800bb5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3308      	adds	r3, #8
 800bb64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb6e:	e841 2300 	strex	r3, r2, [r1]
 800bb72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d1e5      	bne.n	800bb46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d118      	bne.n	800bbb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	e853 3f00 	ldrex	r3, [r3]
 800bb8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f023 0310 	bic.w	r3, r3, #16
 800bb96:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bba0:	61bb      	str	r3, [r7, #24]
 800bba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bba4:	6979      	ldr	r1, [r7, #20]
 800bba6:	69ba      	ldr	r2, [r7, #24]
 800bba8:	e841 2300 	strex	r3, r2, [r1]
 800bbac:	613b      	str	r3, [r7, #16]
   return(result);
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d1e6      	bne.n	800bb82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bbc8:	bf00      	nop
 800bbca:	3754      	adds	r7, #84	@ 0x54
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	effffffe 	.word	0xeffffffe

0800bbd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f7fe ff4c 	bl	800aa94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbfc:	bf00      	nop
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b088      	sub	sp, #32
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	e853 3f00 	ldrex	r3, [r3]
 800bc18:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc20:	61fb      	str	r3, [r7, #28]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	461a      	mov	r2, r3
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	61bb      	str	r3, [r7, #24]
 800bc2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2e:	6979      	ldr	r1, [r7, #20]
 800bc30:	69ba      	ldr	r2, [r7, #24]
 800bc32:	e841 2300 	strex	r3, r2, [r1]
 800bc36:	613b      	str	r3, [r7, #16]
   return(result);
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d1e6      	bne.n	800bc0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2220      	movs	r2, #32
 800bc42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7fe ff17 	bl	800aa80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc52:	bf00      	nop
 800bc54:	3720      	adds	r7, #32
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bc62:	bf00      	nop
 800bc64:	370c      	adds	r7, #12
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr

0800bc6e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bc6e:	b480      	push	{r7}
 800bc70:	b083      	sub	sp, #12
 800bc72:	af00      	add	r7, sp, #0
 800bc74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bc76:	bf00      	nop
 800bc78:	370c      	adds	r7, #12
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b083      	sub	sp, #12
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bc8a:	bf00      	nop
 800bc8c:	370c      	adds	r7, #12
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc96:	b480      	push	{r7}
 800bc98:	b085      	sub	sp, #20
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d101      	bne.n	800bcac <HAL_UARTEx_DisableFifoMode+0x16>
 800bca8:	2302      	movs	r3, #2
 800bcaa:	e027      	b.n	800bcfc <HAL_UARTEx_DisableFifoMode+0x66>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2224      	movs	r2, #36	@ 0x24
 800bcb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f022 0201 	bic.w	r2, r2, #1
 800bcd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bcda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2200      	movs	r2, #0
 800bce0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcfa:	2300      	movs	r3, #0
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d101      	bne.n	800bd20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	e02d      	b.n	800bd7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2224      	movs	r2, #36	@ 0x24
 800bd2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f022 0201 	bic.w	r2, r2, #1
 800bd46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	430a      	orrs	r2, r1
 800bd5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd5c:	6878      	ldr	r0, [r7, #4]
 800bd5e:	f000 f84f 	bl	800be00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2220      	movs	r2, #32
 800bd6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d101      	bne.n	800bd9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd98:	2302      	movs	r3, #2
 800bd9a:	e02d      	b.n	800bdf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2224      	movs	r2, #36	@ 0x24
 800bda8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f022 0201 	bic.w	r2, r2, #1
 800bdc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	683a      	ldr	r2, [r7, #0]
 800bdd4:	430a      	orrs	r2, r1
 800bdd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 f811 	bl	800be00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2220      	movs	r2, #32
 800bdea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3710      	adds	r7, #16
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d108      	bne.n	800be22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be20:	e031      	b.n	800be86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be22:	2310      	movs	r3, #16
 800be24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be26:	2310      	movs	r3, #16
 800be28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	0e5b      	lsrs	r3, r3, #25
 800be32:	b2db      	uxtb	r3, r3
 800be34:	f003 0307 	and.w	r3, r3, #7
 800be38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	0f5b      	lsrs	r3, r3, #29
 800be42:	b2db      	uxtb	r3, r3
 800be44:	f003 0307 	and.w	r3, r3, #7
 800be48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be4a:	7bbb      	ldrb	r3, [r7, #14]
 800be4c:	7b3a      	ldrb	r2, [r7, #12]
 800be4e:	4911      	ldr	r1, [pc, #68]	@ (800be94 <UARTEx_SetNbDataToProcess+0x94>)
 800be50:	5c8a      	ldrb	r2, [r1, r2]
 800be52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be56:	7b3a      	ldrb	r2, [r7, #12]
 800be58:	490f      	ldr	r1, [pc, #60]	@ (800be98 <UARTEx_SetNbDataToProcess+0x98>)
 800be5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800be60:	b29a      	uxth	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be68:	7bfb      	ldrb	r3, [r7, #15]
 800be6a:	7b7a      	ldrb	r2, [r7, #13]
 800be6c:	4909      	ldr	r1, [pc, #36]	@ (800be94 <UARTEx_SetNbDataToProcess+0x94>)
 800be6e:	5c8a      	ldrb	r2, [r1, r2]
 800be70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be74:	7b7a      	ldrb	r2, [r7, #13]
 800be76:	4908      	ldr	r1, [pc, #32]	@ (800be98 <UARTEx_SetNbDataToProcess+0x98>)
 800be78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800be7e:	b29a      	uxth	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800be86:	bf00      	nop
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	0800bf3c 	.word	0x0800bf3c
 800be98:	0800bf44 	.word	0x0800bf44

0800be9c <memset>:
 800be9c:	4402      	add	r2, r0
 800be9e:	4603      	mov	r3, r0
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d100      	bne.n	800bea6 <memset+0xa>
 800bea4:	4770      	bx	lr
 800bea6:	f803 1b01 	strb.w	r1, [r3], #1
 800beaa:	e7f9      	b.n	800bea0 <memset+0x4>

0800beac <__libc_init_array>:
 800beac:	b570      	push	{r4, r5, r6, lr}
 800beae:	4d0d      	ldr	r5, [pc, #52]	@ (800bee4 <__libc_init_array+0x38>)
 800beb0:	4c0d      	ldr	r4, [pc, #52]	@ (800bee8 <__libc_init_array+0x3c>)
 800beb2:	1b64      	subs	r4, r4, r5
 800beb4:	10a4      	asrs	r4, r4, #2
 800beb6:	2600      	movs	r6, #0
 800beb8:	42a6      	cmp	r6, r4
 800beba:	d109      	bne.n	800bed0 <__libc_init_array+0x24>
 800bebc:	4d0b      	ldr	r5, [pc, #44]	@ (800beec <__libc_init_array+0x40>)
 800bebe:	4c0c      	ldr	r4, [pc, #48]	@ (800bef0 <__libc_init_array+0x44>)
 800bec0:	f000 f818 	bl	800bef4 <_init>
 800bec4:	1b64      	subs	r4, r4, r5
 800bec6:	10a4      	asrs	r4, r4, #2
 800bec8:	2600      	movs	r6, #0
 800beca:	42a6      	cmp	r6, r4
 800becc:	d105      	bne.n	800beda <__libc_init_array+0x2e>
 800bece:	bd70      	pop	{r4, r5, r6, pc}
 800bed0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed4:	4798      	blx	r3
 800bed6:	3601      	adds	r6, #1
 800bed8:	e7ee      	b.n	800beb8 <__libc_init_array+0xc>
 800beda:	f855 3b04 	ldr.w	r3, [r5], #4
 800bede:	4798      	blx	r3
 800bee0:	3601      	adds	r6, #1
 800bee2:	e7f2      	b.n	800beca <__libc_init_array+0x1e>
 800bee4:	0800bf54 	.word	0x0800bf54
 800bee8:	0800bf54 	.word	0x0800bf54
 800beec:	0800bf54 	.word	0x0800bf54
 800bef0:	0800bf58 	.word	0x0800bf58

0800bef4 <_init>:
 800bef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bef6:	bf00      	nop
 800bef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befa:	bc08      	pop	{r3}
 800befc:	469e      	mov	lr, r3
 800befe:	4770      	bx	lr

0800bf00 <_fini>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	bf00      	nop
 800bf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf06:	bc08      	pop	{r3}
 800bf08:	469e      	mov	lr, r3
 800bf0a:	4770      	bx	lr
